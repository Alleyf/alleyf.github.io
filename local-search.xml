<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/11/21/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <url>/2022/11/21/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="嵌入式原理与应用"><a href="#嵌入式原理与应用" class="headerlink" title="嵌入式原理与应用"></a><span alt="rainbow">嵌入式原理与应用</span></h1><blockquote><p>作业答案：<a href="https://www.sodocs.net/doc/746504251-7.html">学习通作业</a></p></blockquote><h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1.绪论"></a>1.绪论</h2><h3 id="1-1嵌入式系统定义"><a href="#1-1嵌入式系统定义" class="headerlink" title="1.1嵌入式系统定义"></a>1.1嵌入式系统定义</h3><ul><li><p><strong>广义</strong>：<code>微处理器+硬/软件系统</code></p></li><li><p><strong>狭义</strong>：<code>嵌入式微处理器+OS+特定功能+专用+硬/ 软件系统</code></p></li><li><p><strong>从技术的角度定义</strong>：<u>以应用为中心、以计算 机技术为基础、软件硬件可裁剪、适应应用系统对 功能、可靠性、成本、体积、功耗严格要求的专用 计算机系统。</u></p></li><li><p><strong>从系统的角度定义</strong>：<u>嵌入式系统是设计完成 复杂功能的硬件和软件，并使其紧密耦合在一起的 计算机系统。</u></p></li></ul><h3 id="1-2嵌入式系统特点及分类"><a href="#1-2嵌入式系统特点及分类" class="headerlink" title="1.2嵌入式系统特点及分类"></a>1.2嵌入式系统特点及分类</h3><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h4><ul><li>系统内核小 </li><li>专用性强 </li><li>系统精简 </li><li> 高实时性 </li><li>多任务的操作系统</li><li>需要专门的开发工具和环境（自身不具备）</li></ul><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h4><blockquote><p>由于嵌入式系统由硬件和软件两大部 分组成，所以其分类也可以从硬件和软件进行划分.</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121145910133.png" alt="image-20221121145910133"></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121145944569.png" alt="image-20221121145944569"></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121150118822.png" alt="image-20221121150118822"></p><h3 id="1-3嵌入式微处理器"><a href="#1-3嵌入式微处理器" class="headerlink" title="1.3嵌入式微处理器"></a>1.3嵌入式微处理器</h3><h4 id="1-3-1-ARM处理器"><a href="#1-3-1-ARM处理器" class="headerlink" title="1.3.1 ARM处理器"></a>1.3.1 ARM处理器</h4><p><strong>特点</strong>：</p><ol><li>小体积、低功耗、低成本而高性能；</li><li>16/32位双指令集；</li><li> 全球的合作伙伴众多。</li></ol><h4 id="1-3-2-MIPS"><a href="#1-3-2-MIPS" class="headerlink" title="1.3.2 MIPS"></a>1.3.2 MIPS</h4><blockquote><p><strong>MIPS</strong>是Microprocessor without Inter— locked Pipeline Stages的缩写，是一种处理器内 核标准，它是由MIPS技术公司开发的。</p></blockquote><h3 id="1-4嵌入式操作系统"><a href="#1-4嵌入式操作系统" class="headerlink" title="1.4嵌入式操作系统"></a>1.4嵌入式操作系统</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121150633545.png" alt="image-20221121150633545"></p><h4 id="2-实时操作系统"><a href="#2-实时操作系统" class="headerlink" title="2.实时操作系统"></a>2.实时操作系统</h4><h5 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1.特点"></a>1.特点</h5><ol><li>异步的事件响应 </li><li>切换时间和中断延迟时间确定 </li><li>优先级中断和调度 </li><li><code>抢占式调度</code> </li><li>内存锁定 </li><li>连续文件 </li><li>同步</li></ol><h5 id="2-分类-1"><a href="#2-分类-1" class="headerlink" title="2.分类"></a>2.分类</h5><ul><li><p><strong>一般实时操作系统</strong>：应用于实时处理系统的上位 机和实时查询系统等实时性较弱的实时系统，并且 提供了开发、调试、运用一致的环境。</p></li><li><p><strong>嵌入式实时操作系统</strong>：统应用于实时性要求高的实 时控制系统， 而且应用程序的开发过程是通过交叉开发来完成的， 即开发环境与运行环境是不一致。</p></li></ul><blockquote><p>嵌入式实时操作系统具有规模小(一般在几K～几十 K 内)、可固化使用实时性强(在毫秒或微秒数量级上) 的特点 </p></blockquote><h5 id="3-必要性"><a href="#3-必要性" class="headerlink" title="3.必要性"></a>3.必要性</h5><blockquote><ul><li>嵌入式实时操作系统在目前的嵌入式应用中用得越来 越广泛，尤其在功能复杂、系统庞大的应用中显得愈 来愈重要。 </li><li>在嵌入式应用中，只有把CPU嵌入到系统中，同时又 把操作系统嵌入进去，才是真正的计算机嵌入式应用。</li></ul></blockquote><ol><li>嵌入式实时操作系统提高了系统的可靠性。 </li><li>提高了开发效率，缩短了开发周期。</li><li>嵌入式实时操作系统充分发挥了<strong>32位CPU</strong>的多任务 潜力。</li></ol><h5 id="4-优缺点"><a href="#4-优缺点" class="headerlink" title="4.优缺点"></a>4.优缺点</h5><ol><li><p><strong>优点</strong>：</p><ul><li>在嵌入式实时操作系统环境下开发实时应用程序使程序的<strong>设计和扩展变得容易</strong>，不需要大的改动就可以增加新的功能。 </li><li>通过将应用程序<strong>分割成若干独立的任务模块</strong>，使应用程序的设计过程大为简化；而且对实时性要求苛刻的事件都得到了<strong>快速、可靠的处理。</strong> </li><li>通过有效的系统服务，嵌入式实时操作系统使得<strong>系统资源得到更好的利用</strong></li></ul></li><li><p><strong>缺点</strong>：</p></li></ol><ul><li>需要额外的<strong>ROM/RAM开销</strong>，2~5%的CPU额外负荷， 以及内核的费用</li></ul><h4 id="3-前后台系统"><a href="#3-前后台系统" class="headerlink" title="3.前后台系统"></a>3.前后台系统</h4><blockquote><p>对基于芯片的开发来说，应用程序一般是 一个无限的循环，可称为前后台系统或超循环系统。</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121151211045.png" alt="image-20221121151211045"></p><h4 id="4-操作系统"><a href="#4-操作系统" class="headerlink" title="4.操作系统"></a>4.操作系统</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h5><blockquote><ul><li><p>实时操作系统是一段在嵌入式系统启动后首先执 行的背景程序，用户的应用程序是运行于<strong>RTOS</strong>之上的 各个任务，RTOS根据各个任务的要求，进行<strong>资源(包括存储器、外设等)管理、消息管理、任务调度、异常处理</strong>等工作。</p></li><li><p>在RTOS支持的系统中， 每个任务均有一个优先级，RTOS根据各个任务的优先级，动态地切换各个任 务，保证对实时性的要求.</p></li></ul></blockquote><ol><li>是计算机中最基本的程序。</li><li>负责计算机系统中全部软硬资源的分配与回收、控制与协 调等并发的活动；</li><li> 提供用户接口，使用户获得良好的工作环境；</li><li>为用户扩展新的系统功能提供软件平台。</li></ol><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121151424983.png" alt="image-20221121151424983"></p><h5 id="2-代码的临界区"><a href="#2-代码的临界区" class="headerlink" title="2.代码的临界区"></a>2.代码的临界区</h5><blockquote><p>代码的临界区也称为临界区，指处理时不可分割 的代码，运行这些代码不允许被打断。一旦这部分代 码开始执行，则不允许任何中断打入 （这不是绝对的，如果中断不调用任何包含临界区的代码，也不访问任何临界区使用的共享资源，这个中断可能可以执行）。</p><p><strong>为确保临界区代码的执行，在进入临界区之前要关中断，而临界区代码执行完成以后要立即开中断。</strong></p></blockquote><h5 id="3-资源"><a href="#3-资源" class="headerlink" title="3.资源"></a>3.资源</h5><blockquote><p>程序运行时可使用的软、硬件环境统称为资源。</p></blockquote><ul><li>资源可以是输入输出设备，例如打印机、 键盘、显示器。</li><li>资源也可以是一个变量、一个结构或一个数组等。</li></ul><h5 id="4-共享资源"><a href="#4-共享资源" class="headerlink" title="4.共享资源"></a>4.共享资源</h5><blockquote><p>可以被一个以上任务使用的资源叫做共享资源。 为了防止数据被破坏，每个任务在与共享资源打交道时，必须<strong>独占该资源</strong>，这叫做<strong>互斥</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121152043856.png" alt="image-20221121152043856"></p><h5 id="5-任务"><a href="#5-任务" class="headerlink" title="5.任务"></a>5.任务</h5><blockquote><p>一个任务，也称作一个<strong>线程</strong>，是一个简单的程序， 该程序可以认为CPU完全属于该程序自己。</p></blockquote><p>实时应用程序的设计过程，包括:</p><ol><li>如何把问题分割成多个任务</li><li>每个任务都是整个应用的某一部分</li><li>每个任务被赋予一定的优先级</li><li>有它自己的一套CPU寄存器和自己的栈空间</li></ol><h5 id="6-任务切换"><a href="#6-任务切换" class="headerlink" title="6.任务切换"></a>6.任务切换</h5><blockquote><p>当多任务内核决定运行另外的任务时，它保存正 在运行任务的当前状态，即CPU寄存器中的全部内容。 这些内容保存在任务的当前状态保存区，也就是任务 自已的栈区之中。入栈工作完成以后，就把下一个将 要运行的任务的当前状态从任务的栈中重新装入CPU 的寄存器，并开始下一个任务的运行。这个过程就称为<strong>任务切换</strong>。</p><p>这个过程增加了应用程序的额外负荷。CPU的内部寄 存器越多，额外负荷就越重。做任务切换所需要的时间取决于CPU有多少寄存器要入栈。</p></blockquote><h5 id="7-内核"><a href="#7-内核" class="headerlink" title="7.内核"></a>7.内核</h5><blockquote><p>多任务系统中，<strong>内核负责管理各个任务，或者说为每个任务分配CPU时间，并且负责任务之间的通信</strong>。</p></blockquote><ul><li>内核提供的基本服务是<code>任务切换</code>。 </li><li>使用实时内核可以大大简化应用系统的设计，是因为<code>实时内核</code>允许将应用分成<code>若干个任务</code>，由实时内核来管理它们。内核需要消耗一定的系统资源，比如2％～5％的 <code>CPU运行时间、RAM和ROM</code>等。</li><li>内核提供必不可少的系统服务，如<code>信号量、消息队列、 延时</code>等。</li></ul><h5 id="8-调度"><a href="#8-调度" class="headerlink" title="8.调度"></a>8.调度</h5><blockquote><p>调度是内核的主要职责之一。调度就是决定该轮到哪个任务运行了。</p></blockquote><ul><li>多数实时内核是基于优先级调度法的。每个任务根据其重要程序的不同被赋予一定的优先级。基于优先级的调度法指CPU总是让处在就绪态的优先级最高的任务先运行。</li><li>然而究竟何时让高优先级任务掌握CPU的使用权， 有两种不同的情况，这要看用的是什么类型的内核， 是<strong>非占先式</strong>的还是<strong>占先式</strong>的内核。</li></ul><h5 id="9-非占先式内核"><a href="#9-非占先式内核" class="headerlink" title="9.非占先式内核"></a>9.非占先式内核</h5><blockquote><ol><li>非占先式内核要求每个任务自动弃CPU 的所有权。 非占先式调度法也称作合作型多任务，各个任务彼此合作共享一个CPU。 </li><li>异步事件还是由<strong>中断服务</strong>来处理。 </li><li>中断服务可以使一个高优先级的任务由挂起状态变为<strong>就绪状态</strong>。但中断服务以后控制权还是回到原来被中断了的那个任务，直到该任务主动放弃CPU的使用权时，那个高优先级的任务才能获得CPU的使用权。</li></ol></blockquote><h5 id="10-占先式内核"><a href="#10-占先式内核" class="headerlink" title="10.占先式内核"></a>10.占先式内核</h5><blockquote><ol><li>当系统响应时间很重要时，要使用占先式内核。 因此绝大多数商业上销售的实时内核都是占先式内核。 <strong>最高优先级的任务一旦就绪，总能得到CPU的控制权。</strong> </li><li>当一个运行着的任务使一个比它优先级高的任务进入了就绪状态，当前任务的CPU使用权就被剥夺了，或者说被挂起了，那个高优先级的任务立刻得到了CPU 的控制权。</li></ol></blockquote><h5 id="11-任务优先级"><a href="#11-任务优先级" class="headerlink" title="11.任务优先级"></a>11.任务优先级</h5><blockquote><p>任务的优先级是表示任务被调度的<strong>优先程度</strong>。每个任务都具有优先级。 任务越重要，赋予的优先级应越高，越容易被调度而进入<strong>运行态</strong>。</p></blockquote><h5 id="12-中断"><a href="#12-中断" class="headerlink" title="12.中断"></a>12.中断</h5><blockquote><ol><li>中断是一种硬件机制，用于通知CPU有个<strong>异步事件</strong>发生了。 </li><li>中断一旦被识别，CPU保存部分或全部上下文 （即部分或全部寄存器的值），跳转到专门的子程序， 称为中断服务子程序（ISR）。中断服务子程序做事件处理，处理完成后，程序返回到：<ul><li>在前后台系统中，程序<code>回到后台程序</code>；</li><li>对非占先式内核而言，程序回到被中断了的任务； </li><li>对占先式内核而言，让进入就绪态的优先级最高的任务开始运行</li></ul></li></ol></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121154003220.png" alt="image-20221121154003220"></p><h5 id="13-时钟节拍"><a href="#13-时钟节拍" class="headerlink" title="13.时钟节拍"></a>13.时钟节拍</h5><blockquote><p>时钟节拍是<code>特定的周期性中断</code>。 </p><ul><li> 这个中断可以看作是系统心脏的脉动。 </li><li>中断之间的时间间隔取决于不同应用，一般 在<code>10ms到200ms</code>之间。</li><li>时钟的节拍式中断使得内核可以将任务延时 若干个整数时钟节拍，以及当任务等待事件 发生时，提供等待超时的依据。</li><li> <code>时钟节拍率</code>越快，系统的额外开销就越大。</li></ul></blockquote><h2 id="2-体系结构"><a href="#2-体系结构" class="headerlink" title="2.体系结构"></a>2.体系结构</h2><h2 id="3-指令集"><a href="#3-指令集" class="headerlink" title="3.指令集"></a>3.指令集</h2><h2 id="4-汇编程序设计"><a href="#4-汇编程序设计" class="headerlink" title="4.汇编程序设计"></a>4.汇编程序设计</h2><h2 id="5-嵌入式C语言程序设计基础"><a href="#5-嵌入式C语言程序设计基础" class="headerlink" title="5.嵌入式C语言程序设计基础"></a>5.嵌入式C语言程序设计基础</h2><h2 id="6-ARM开发工具的使用"><a href="#6-ARM开发工具的使用" class="headerlink" title="6. ARM开发工具的使用"></a>6. ARM开发工具的使用</h2><h2 id="7-硬件系统设计"><a href="#7-硬件系统设计" class="headerlink" title="7.硬件系统设计"></a>7.硬件系统设计</h2><h2 id="8-1-UART"><a href="#8-1-UART" class="headerlink" title="8.1 UART"></a>8.1 UART</h2><h2 id="8-4-IO"><a href="#8-4-IO" class="headerlink" title="8.4 IO"></a>8.4 IO</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Web_Fast_Development</title>
    <link href="/2022/11/17/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <url>/2022/11/17/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前端开发"><a href="#前端开发" class="headerlink" title="前端开发"></a><font title="blue">前端开发</font></h1><h2 id="1-快速开发网站"><a href="#1-快速开发网站" class="headerlink" title="1.快速开发网站"></a>1.快速开发网站</h2><h3 id="1-1初试Flask"><a href="#1-1初试Flask" class="headerlink" title="1.1初试Flask"></a>1.1初试Flask</h3><p><code>返回字符串</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-comment"># 创建app实例</span><br>app = Flask(__name__)<br><br><br><span class="hljs-comment"># 创建路由网址与函数index的关系</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/info&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我的开发从这里开始&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p><code>返回一个html网页</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template<br><br><span class="hljs-comment"># 创建app实例</span><br>app = Flask(__name__)<br><br><br><span class="hljs-comment"># 创建路由网址与函数index的关系</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/info&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>():<br>    <span class="hljs-comment">#默认打开该目录下的templats目录下的index.html文件</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;./index.html&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h2 id="2-浏览器能识别的标签"><a href="#2-浏览器能识别的标签" class="headerlink" title="2.浏览器能识别的标签"></a>2.浏览器能识别的标签</h2><h3 id="2-1编码（head）"><a href="#2-1编码（head）" class="headerlink" title="2.1编码（head）"></a>2.1编码（head）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2title（head）"><a href="#2-2title（head）" class="headerlink" title="2.2title（head）"></a>2.2title（head）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>LoveStory<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3标题（body）"><a href="#2-3标题（body）" class="headerlink" title="2.3标题（body）"></a>2.3标题（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>五级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>六级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4div和span（body）"><a href="#2-4div和span（body）" class="headerlink" title="2.4div和span（body）"></a>2.4div和span（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>块级标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>行内标签/内联标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>div独占一行，块级标签</li><li>span有多大占多大，行内标签也叫内联标签</li></ul><blockquote><p>div和span样式由CSS渲染设定。</p></blockquote><h3 id="2-5超链接（body）"><a href="#2-5超链接（body）" class="headerlink" title="2.5超链接（body）"></a>2.5超链接（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--当前页面绝对跳转到完整网址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fcsy.fit&quot;</span>&gt;</span>绝对跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--新建页面绝对跳转到完整网址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fcsy.fit&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>绝对跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--相对跳转到本地其他目录--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/time&quot;</span>&gt;</span>相对跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--相对跳转到本地其他目录--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>空跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p align="center"><a href="https://fcsy.fit">绝对跳转</a></p><h3 id="2-6图片（body）"><a href="#2-6图片（body）" class="headerlink" title="2.6图片（body）"></a>2.6图片（body）</h3><blockquote><p>可以写内嵌式<strong>css</strong>，eg：<kbd>style="height:100px"</kbd>,以分号(;)隔开</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--网络图片绝对地址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://t7.baidu.com/it/u=1819248061,230866778&amp;fm=193&amp;f=GIF&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:100px&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--本地图片相对地址,flask要求本地图片必须存放在static目录下--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/picture.png&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p align="center"><a href="https://fcsy.fit"><img src="https://t7.baidu.com/it/u=1819248061,230866778&fm=193&f=GIF" alt="shadow-随便写" style="height:300px"/></a></p><h3 id="2-7音频（body）"><a href="#2-7音频（body）" class="headerlink" title="2.7音频（body）"></a>2.7音频（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://lo-sycdn.kuwo.cn/3f7fd58e7bca702aa2835729bbde7e1d/63764e76/resource/n1/62/42/3385123058.mp3&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;metadata&quot;</span>&gt;</span>暂时无法播放<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><audio id="mmedia-qNsKazEpCrrQGKJM" controls=true audi="audio" src="https://sr-sycdn.kuwo.cn/19afb1f908fc03bcf75647a5bbd6f357/6378b980/resource/n1/87/40/2726821845.mp3" autoplay=true ></audio><p><code>外联音频播放器</code></p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><div id="mmedia-YFLEXSsoZwVRAHQz"></div><script> var YFLEXSsoZwVRAHQz_options = JSON.parse('{\"lrcType\":3,\"audio\":[{\"name\":\"在你的身边\",\"url\":\"https://m704.music.126.net/20221119192835/140b21e09265a98964248133457f7348/jdymusic/obj/wo3DlMOGwrbDjj7DisKw/14096410711/7e04/100d/d588/25b0beab3b8bacaa87e4c5fc8eea6cf2.mp3\"}]}'); YFLEXSsoZwVRAHQz_options.container = document.getElementById("mmedia-YFLEXSsoZwVRAHQz"); const ap_YFLEXSsoZwVRAHQz = new APlayer(YFLEXSsoZwVRAHQz_options); </script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script><meting-js metin="meting" auto="https://y.qq.com/n/ryqq/song/003kIhRR4Vr0cV.html" ></meting-js><h3 id="2-8视频（body）"><a href="#2-8视频（body）" class="headerlink" title="2.8视频（body）"></a>2.8视频（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://vd4.bdstatic.com/mda-mkm388zceiim43xq/540p/h264_cae/1637547444425365643/mda-mkm388zceiim43xq.mp4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><video id="mmedia-rUAjFfIVlIgmHwdu" controls=true vide="video" src="https://vd4.bdstatic.com/mda-mkm388zceiim43xq/540p/h264_cae/1637547444425365643/mda-mkm388zceiim43xq.mp4" width="100%" ></video><p><code>外链视频播放器</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; padding: 30% 45%;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;视频地址去B站分享按钮下iframe里面的src属性值复制&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-uxzwhMYAtFvasXRd" src="https://player.bilibili.com/player.html?bvid=BV1rG411j7u9&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-uxzwhMYAtFvasXRd").style.height=document.getElementById("mmedia-uxzwhMYAtFvasXRd").scrollWidth*0.76+"px";    window.onresize = function(){      document.getElementById("mmedia-uxzwhMYAtFvasXRd").style.height=document.getElementById("mmedia-uxzwhMYAtFvasXRd").scrollWidth*0.76+"px";    }; </script><h3 id="2-9列表（body）"><a href="#2-9列表（body）" class="headerlink" title="2.9列表（body）"></a>2.9列表（body）</h3><ol><li><p><code>无序列表</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国移动<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国电信<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul>            <li>中国移动</li>            <li>中国电信</li>            <li>中国联通</li></ul></li><li><p><code>有序列表</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国移动<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国电信<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ol>            <li>中国移动</li>            <li>中国电信</li>            <li>中国联通</li></ol></li></ol><h3 id="2-10表格（body）"><a href="#2-10表格（body）" class="headerlink" title="2.10表格（body）"></a>2.10表格（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//表头<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Alleyf<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  //表格内容<br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Alleyf<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Alleyf<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><div>    <table border="0"  style="margin:0 auto;">        <thead>            <tr> <th>ID</th> <th>姓名</th> <th>年龄</th> </tr>        </thead>        <tbody>            <tr> <td>1</td> <td><a href="https://fcsy.fit">Alleyf</a></td> <td>20</td>    </tr>            <tr> <td>2</td> <td>ChuiYuGin</td> <td>20</td>    </tr>            <tr> <td>3</td> <td>Alleyf</td> <td>15</td>    </tr>        </tbody>    </table></div>`案例`<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>头像<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/images/01.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>alleyf<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>alleyf@gmail.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fcsy.fit&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编辑 删除<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/images/02.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin@gmail.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://chuiyugin.github.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编辑 删除<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/images/03.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin@gmail.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://chuiyugin.github.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编辑 删除<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/images/04.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin@gmail.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://chuiyugin.github.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编辑 删除<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-11表单（body）"><a href="#2-11表单（body）" class="headerlink" title="2.11表单（body）"></a>2.11表单（body）</h3><ol><li><p>input系列(7个)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>单选   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>复选  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>   <br></code></pre></td></tr></table></figure></li><li><p>下拉框系列(2个)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">单选下拉框<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>金钱<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>美人<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>地位<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>名声<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>归隐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>多选下拉框<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>金钱<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>美人<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>地位<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>名声<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>归隐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>多行输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>默认输入<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>实例</strong></p></li></ol><center><div>    用户名：<input type="text"></div><div>    密码：<input type="password"></div><div>    性别：<input type="radio" name="gender" checked="checked">男    <input type="radio" name="gender">女</div><div>    爱好：<input type="checkbox" checked="checked">篮球    <input type="checkbox">IT    <input type="checkbox">游戏</div><div>    城市：<select>    <option>北京</option>    <option>上海</option>    <option>深圳</option>    <option>西安</option>    <option>武汉</option>    <option>广州</option></select></div><div>    特长：<select multiple>    <option>java</option>    <option>python</option>    <option>C++</option>    <option>Go</option>    <option>php</option></select></div><div>    备注：<textarea cols="40" rows="2"></textarea></div><div>    <input type="button" value="button注册">    <input type="submit" value="submit提交"></div></center><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><span alt="rainbow">小结</span></h3><ul><li><p>划分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">-块级标签<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>-行内标签<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>嵌套</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">-点击图片跳转网页<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fcsy.fit target=&quot;</span><span class="hljs-attr">_blank</span>&quot;&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="综合案例–登录注册"><a href="#综合案例–登录注册" class="headerlink" title="综合案例–登录注册"></a>综合案例–登录注册</h3><ul><li><p>导入flask，创建app</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Author: Alleyf 3035581811@qq.com</span><br><span class="hljs-string">Github: https://github.com/Alleyf</span><br><span class="hljs-string">QQ: 3035581811</span><br><span class="hljs-string">Signature: You know more，you know less</span><br><span class="hljs-string">Date: 2022-11-19 20:57:35</span><br><span class="hljs-string">LastEditors: Alleyf 3035581811@qq.com</span><br><span class="hljs-string">LastEditTime: 2022-11-20 10:43:50</span><br><span class="hljs-string">FilePath: \login_register\app.py</span><br><span class="hljs-string">Copyright (c) 2022 by Alleyf 3035581811@qq.com, All Rights Reserved. </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, jsonify<br><br>app = Flask(__name__)<br><br>根据method的不同分别处理<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        user = request.form.get(<span class="hljs-string">&quot;username&quot;</span>)<br>        pwd = request.form.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        gender = request.form.get(<span class="hljs-string">&quot;gender&quot;</span>)<br>        hobbies = request.form.getlist(<span class="hljs-string">&quot;hobby&quot;</span>)<br>        city = request.form.get(<span class="hljs-string">&quot;city&quot;</span>)<br>        characters = request.form.getlist(<span class="hljs-string">&quot;characters&quot;</span>)<br>        notes = request.form.get(<span class="hljs-string">&quot;notes&quot;</span>)<br>        <span class="hljs-built_in">print</span>(user, pwd, gender, hobbies, city, characters, notes)<br>        info = &#123;<br>            <span class="hljs-string">&quot;user&quot;</span>: user,<br>            <span class="hljs-string">&quot;pwd&quot;</span>: pwd,<br>            <span class="hljs-string">&quot;gender&quot;</span>: gender,<br>            <span class="hljs-string">&quot;hobbies&quot;</span>: hobbies,<br>            <span class="hljs-string">&quot;city&quot;</span>: city,<br>            <span class="hljs-string">&quot;characters&quot;</span>: characters,<br>            <span class="hljs-string">&quot;notes&quot;</span>: notes<br>        &#125;<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>)<br>        <span class="hljs-comment"># return jsonify(info)</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;username&gt;&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">userdemo</span>(<span class="hljs-params">username</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello <span class="hljs-subst">&#123;username&#125;</span>!&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure></li><li><p>HTML实现注册</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/css/register.css&quot; /&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">html</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom right, <span class="hljs-built_in">rgb</span>(<span class="hljs-number">114</span>, <span class="hljs-number">135</span>, <span class="hljs-number">254</span>), <span class="hljs-built_in">rgb</span>(<span class="hljs-number">130</span>, <span class="hljs-number">88</span>, <span class="hljs-number">186</span>));</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            性别：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>男<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>女<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            爱好：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>篮球<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>足球<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span>排球<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40&quot;</span>&gt;</span>乒乓球<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            城市：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bj&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sh&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xa&quot;</span>&gt;</span>西安<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            特长：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characters&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;101&quot;</span>&gt;</span>c++<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;102&quot;</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;103&quot;</span>&gt;</span>Go<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            备注：<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;notes&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--        普通按钮--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--        提交表单数据到指定地址--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--    &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86--&gt;</span><br>    <span class="hljs-comment">&lt;!--            src=&quot;//music.163.com/outchain/player?type=2&amp;id=475479888&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> mycenter = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;center&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> myiframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;iframe&#x27;</span>);</span><br><span class="language-javascript">        myiframe.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>,<span class="hljs-string">&#x27;//music.163.com/outchain/player?type=2&amp;id=475479888&amp;auto=1&amp;height=66&#x27;</span>);</span><br><span class="language-javascript">        myiframe.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">&#x27;frameborder:no; border:0; marginwidth:0; marginheight:0; width:400; height:86&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">//把div添加到body作为他的子元素</span></span><br><span class="language-javascript">            mycenter.<span class="hljs-title function_">appendChild</span>(myiframe);</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(mycenter);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>提交数据到后台</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>流程展示<img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221120092448875.png"></p></li></ul><ol><li>form标签包裹要提交的数据的标签<ul><li>提交方式：<code>method=&quot;get&quot;</code></li><li>提交地址：<code>action=&quot;/xxx/xxx/xxx&quot;</code></li><li>在form标签里面必须有一个submit标签</li></ul></li><li>在form里面的一些标签：<kbd>input/select/textarea</kbd></li></ol><ul><li><p>一定要写**<code>name</code>**属性<input type="text" name="uu"/></p></li><li><p>后台处理数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        user = request.form.get(<span class="hljs-string">&quot;username&quot;</span>)<br>        pwd = request.form.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        gender = request.form.get(<span class="hljs-string">&quot;gender&quot;</span>)<br>        hobbies = request.form.getlist(<span class="hljs-string">&quot;hobby&quot;</span>)<br>        city = request.form.get(<span class="hljs-string">&quot;city&quot;</span>)<br>        characters = request.form.getlist(<span class="hljs-string">&quot;characters&quot;</span>)<br>        notes = request.form.get(<span class="hljs-string">&quot;notes&quot;</span>)<br>        <span class="hljs-built_in">print</span>(user, pwd, gender, hobbies, city, characters, notes)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> jsonify<br>&gt;... ...<br>&gt;@app.route(<span class="hljs-string">&#x27;/json_return&#x27;</span>)<br>&gt;<span class="hljs-keyword">def</span> <span class="hljs-title function_">json_return</span>():<br>   j = &#123;<br>       <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;北京图灵学院&quot;</span>,<br>       <span class="hljs-string">&quot;teacher&quot;</span>:<span class="hljs-string">&quot;刘大拿&quot;</span>,<br>       <span class="hljs-string">&quot;Blog_address&quot;</span>:<span class="hljs-string">&quot;http://www.mycode.wang&quot;</span><br>   &#125;<br>   <span class="hljs-keyword">return</span>  jsonify(j)<br></code></pre></td></tr></table></figure><p><span alt="rainbow">接受post请求返回json字符串</span></p></blockquote><h2 id="3-CSS样式"><a href="#3-CSS样式" class="headerlink" title="3.CSS样式"></a>3.CSS样式</h2><blockquote><p>css是美化html内容的层叠样式表</p></blockquote><h3 id="3-1快速了解"><a href="#3-1快速了解" class="headerlink" title="3.1快速了解"></a>3.1快速了解</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;```&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:100px;width:200px&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:blue;&quot;</span>&gt;</span> CSS<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2CSS引用方式"><a href="#3-2CSS引用方式" class="headerlink" title="3.2CSS引用方式"></a>3.2CSS引用方式</h3><h4 id="1-行内式"><a href="#1-行内式" class="headerlink" title="1.行内式"></a>1.行内式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:black;&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;padding:30px;&quot;</span>&gt;</span>Hostinger Tutorials<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;&quot;</span>&gt;</span>Something usefull here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>行内样式表(内联样式表)是在元素标签内部的style属性中设定CSS样式。<strong>适合于修改简单样式</strong>.</li><li>style实就是标签的属性</li><li>在双引号中间,写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li></ul><h4 id="2-内嵌式"><a href="#2-内嵌式" class="headerlink" title="2.内嵌式"></a>2.内嵌式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:white; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> &#123;<span class="hljs-attribute">display</span>: block; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#button-go</span>, <span class="hljs-selector-id">#button-back</span> &#123;<span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> black;&#125;</span><br><span class="language-css"></span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>标签理论上可以放在HTML文档的任何地方,但一般会放在文档的标签中</p></li><li><p>通过此种方式,可以防便控制当前整个页面中的元素样式设置</p></li><li><p>代码结构清晰,但是并没有实现结构与样式完全分离</p></li></ul><h4 id="3-外联式"><a href="#3-外联式" class="headerlink" title="3.外联式"></a>3.外联式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3CSS选择器"><a href="#3-3CSS选择器" class="headerlink" title="3.3CSS选择器"></a>3.3CSS选择器</h3><blockquote><p>作用： <u>选择标签设置格式属性</u></p></blockquote><p><strong>选择器分为基础选择器和复合选择器两个大类,我们这里先讲解一下基础选择器。</strong></p><ul><li>基础选择器是由<u>单个选择器组成的</u></li><li>基础选择器包括:<u>标签选择器、类选择器、id 选择器和通配符选择器</u></li></ul><h4 id="3-3-1标签选择器"><a href="#3-3-1标签选择器" class="headerlink" title="3.3.1标签选择器"></a>3.3.1标签选择器</h4><p>标签选择器(元素选择器)是指用<u>HTML标签名称</u>作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">标签名 &#123;<br>属性1: 属性值1;<br>属性2: 属性值2;<br>属性3 属性值3; ···<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-2类选择器"><a href="#3-3-2类选择器" class="headerlink" title="3.3.2类选择器"></a>3.3.2类选择器</h4><p>如果想要差异化选择不同的标签,单独选一个或者某几个标签 ,可以使用类选择器；<u><strong>样式点定义，结构类调用，一个或多个，开发最常用</strong></u></p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">.类名 &#123;<br>属性1：属性值1；<br>···<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多类名语法：</p><p><code>&lt;div class=&quot;name1 name2 ···&quot;&gt;&lt;/div&gt;</code></p><ul><li>在标签class属性中写多个类名,可以同时被调用</li><li><u>多个类名中间必须用空格分开</u></li><li><u>将相同样式放在一个公共样式里，便于调用，提高代码复用率</u></li></ul><h4 id="3-3-3ID选择器"><a href="#3-3-3ID选择器" class="headerlink" title="3.3.3ID选择器"></a>3.3.3ID选择器</h4><ul><li>id选择器可以为标有特定id的HTML元素指定特定的样式。</li><li>HTML元素以<u>id属性来设置id选择器</u>, CSS中id选择器<u>以“#” 来定义</u>。</li><li>id标签格式只能被调用一次，唯一性（常与js使用）</li></ul><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">#ID名 &#123;<br>属性1：属性值1；<br>···<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-4通配符选择器"><a href="#3-3-4通配符选择器" class="headerlink" title="3.3.4通配符选择器"></a>3.3.4通配符选择器</h4><ul><li>在CSS中,通配符选择器<code>使用*定义</code>,它表示选取页面中所有元素(标签)。</li><li>标签不需要主动调用，自动会给所有元素设置该格式</li><li>特殊情况才使用,后面讲解使用场景(以下是清除所有的元素标签的内外边距)</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br><span class="hljs-attribute">margin</span>：<span class="hljs-number">0</span>；<br><span class="hljs-attribute">padding</span>：<span class="hljs-number">0</span>；<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-5属性选择器"><a href="#3-3-5属性选择器" class="headerlink" title="3.3.5属性选择器"></a>3.3.5属性选择器</h4><ul><li>在CSS中给类选择器**<code>添加属性修饰</code>**以设置该属性的标签的样式</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">.类名<span class="hljs-selector-attr">[name=<span class="hljs-string">&quot;user&quot;</span>]</span> &#123;<br><span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-6子代选择器"><a href="#3-3-6子代选择器" class="headerlink" title="3.3.6子代选择器"></a>3.3.6子代选择器</h4><ul><li>在CSS中给类选择器**<code>添加子类</code>**单独设置子类的样式</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">.类名 子类名/子标签 &#123;<br><span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front_end_development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>h5</tag>
      
      <tag>css</tag>
      
      <tag>javascript</tag>
      
      <tag>Mysql</tag>
      
      <tag>Django</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fast_Conv Filter Design</title>
    <link href="/2022/11/13/FIR%E5%BF%AB%E9%80%9F%E5%8D%B7%E7%A7%AF%E6%BB%A4%E6%B3%A2/"/>
    <url>/2022/11/13/FIR%E5%BF%AB%E9%80%9F%E5%8D%B7%E7%A7%AF%E6%BB%A4%E6%B3%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="FIR滤波器结合快速卷积滤波"><a href="#FIR滤波器结合快速卷积滤波" class="headerlink" title="FIR滤波器结合快速卷积滤波"></a>FIR滤波器结合快速卷积滤波</h1><h2 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h2><p>选择子作业１中的音频信号，自行给定滤波器的单位取样响应，采用<strong>快速卷积</strong>实现对音频信号的滤波，比较滤波前后信号的波形和回放的效果。</p><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><h3 id="设计FIR滤波器"><a href="#设计FIR滤波器" class="headerlink" title="设计FIR滤波器"></a>设计FIR滤波器</h3><ul><li>分析原始音频信号的频谱，观察有用信号和噪声的分布，选择滤波器类型（低通、高通、带通、带阻等）</li><li>设定幅频响应下降三分贝的截止频率和滤波器阶数</li><li>选择合适的窗函数（包括Rectangular、Hanning、Hamming、Bartlett、Blackman、Kaiser、Gaussian、Flat-top等）</li><li>获得滤波器的单位采样响应hn</li></ul><h3 id="快速卷积"><a href="#快速卷积" class="headerlink" title="快速卷积"></a>快速卷积</h3><ul><li>计算原始音频信号x与滤波器的单位采样响应hn的线性卷积长度，L=length(x)+length(hn)</li><li>设计FFT的长度N&gt;=L</li><li>对x和hn分别做N点FFT变换获得Xk、Hk</li><li>将Xk与Hk相乘得到Yk</li><li>将Yk做IFFT逆变换得到yn，即完成快速卷积</li></ul><h2 id="三、实现过程"><a href="#三、实现过程" class="headerlink" title="三、实现过程"></a>三、实现过程</h2><h3 id="FIR滤波器"><a href="#FIR滤波器" class="headerlink" title="FIR滤波器"></a>FIR滤波器</h3><p>设FIR滤波器的单位冲激响应h(n)为一个N点序列，0≤n≤N-1，则滤波器的系统函数为：<br>$$<br>H(\mathrm{z})=\sum_{k=0}^{N-1}h(\mathrm{k})*\mathrm{z}^{-k}<br>$$<br><strong>直接型FIR滤波器</strong>的差分方程为：<br>$$<br>\mathrm{y(n)}=\sum_{m=0}^{N-1}\mathrm{h(m)x(n-m)}<br>$$<br>由差分方程可知只需要求出FIR滤波器的单位冲激响应h(n)，设置<strong>滤波阶数</strong>和<strong>3db通带截止频率fc</strong>，采用<strong>汉明窗函数</strong>处理，再使用<strong>fir1函数</strong>将其与待滤波信号卷积即可完成滤波，具体实现代码如下。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% hamming窗低通滤波器设计</span><br>fc=<span class="hljs-number">7.95e3</span>; <span class="hljs-comment">%下降3分贝截止频率</span><br>hn=fir1(<span class="hljs-number">1000</span>,fc*<span class="hljs-number">2</span>/Fs,<span class="hljs-string">&quot;low&quot;</span>);<br>hn=hn&#x27;;<br>Nh=<span class="hljs-built_in">length</span>(hn);<br></code></pre></td></tr></table></figure><p>FIR滤波器的单位冲击响应如下图所示：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221013213239697.png"></p><h3 id="快速卷积-1"><a href="#快速卷积-1" class="headerlink" title="快速卷积"></a>快速卷积</h3><p>线性卷积在<strong>满足圆周卷积点数大于等于线性卷积长度</strong>的条件下可以用圆周卷积计算，而圆周卷积可以使用DFT计算，而DFT有快速算法FFT，因此可以利用FFT算法减少运算量快速计算线性卷积。先将做卷积的两个信号<strong>补零</strong>到指定长度，然后分别做<strong>FFT变换</strong>，根据卷积定理可得时域上做卷积，就是在频域上做乘积，将两者<strong>频谱相乘后做IFFT</strong>即可实现快速卷积，整个过程如下图所示：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/Fast-linear-convolution-realized-by-circular-convolution-in-the-DFT-domain.png" alt="FFT流程图"></p><p>实现快速卷积的代码如下所示：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 快速卷积和线性卷积</span><br>L=<span class="hljs-built_in">pow2</span>(<span class="hljs-built_in">nextpow2</span>(Nx+Nh<span class="hljs-number">-1</span>));<span class="hljs-comment">%确定FFT快速卷积的点数</span><br>fprintf(<span class="hljs-string">&#x27;快速卷积：&#x27;</span>);<br>tic;<br>Xk=fft(x,L);<span class="hljs-comment">%计算x的L点FFT,结果为x(k)</span><br>Hk=fft(hn,L);<span class="hljs-comment">%计算y的L点FFT,结果为y(k)</span><br>Yk=Xk.*Hk;<span class="hljs-comment">%计算YK</span><br>y1n=ifft(Yk,L);<span class="hljs-comment">%对YK调用IFFT，求得y1(n)</span><br>toc;<br>fprintf(<span class="hljs-string">&#x27;直接卷积：&#x27;</span>);<br>tic;<br>y2n=conv(x,hn);<span class="hljs-comment">%计算y2(n)的卷积</span><br>toc;<br></code></pre></td></tr></table></figure><h2 id="四、结果展示"><a href="#四、结果展示" class="headerlink" title="四、结果展示"></a>四、结果展示</h2><h3 id="线性卷积和FFT快速卷积滤波前后对比图"><a href="#线性卷积和FFT快速卷积滤波前后对比图" class="headerlink" title="线性卷积和FFT快速卷积滤波前后对比图"></a>线性卷积和FFT快速卷积滤波前后对比图</h3><p><img src="https://img.gouka.la/i/2022/11/14/z1xwyl.webp" alt="滤波对比图"></p><h3 id="线性卷积和FFT快速卷积滤波时间对比图"><a href="#线性卷积和FFT快速卷积滤波时间对比图" class="headerlink" title="线性卷积和FFT快速卷积滤波时间对比图"></a>线性卷积和FFT快速卷积滤波时间对比图</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E6%97%B6%E9%97%B4%E5%AF%B9%E6%AF%94%E5%9B%BE.png" alt="时间对比图"></p><h2 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h2><blockquote><ul><li>由上图可知普通线性卷积的结果和快速卷积的结果一样，但快速卷积相比普通线性卷积耗时更短，因此快速卷积可以提高运算速率，减少运算量，提高运算效率。</li><li>离散傅立叶变换（DFT)实现了频域的离散化,方便了计算机处理,在数字信号处理中有着非常重要的作用。但直接计算DFT的运算量与变换长度N的平方成正比,计算量太大。而快速傅立叶变换FFT则是快速计算DFT的有效算法，大大提高了DFT的运算效率，在信号频谱的分析、滤波器频率响应的计算，以及线性卷积的快速计算等方面起着非常重要的作用。</li></ul></blockquote><h2 id="代码开源"><a href="#代码开源" class="headerlink" title="代码开源"></a>代码开源</h2><blockquote><p><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-24bfcec2-0b23-4547-a957-73ffab276534/c6e41a2b-0baa-4e0d-844b-9df8885dfe0c.zip">源代码包</a>有需要可以自行下载，里面包括源代码、滤波后的音频和PDF参考文档。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FIR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoodsManageSystem</title>
    <link href="/2022/10/28/%E5%95%86%E5%93%81%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/"/>
    <url>/2022/10/28/%E5%95%86%E5%93%81%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="商品管理系统实战"><a href="#商品管理系统实战" class="headerlink" title="商品管理系统实战"></a>商品管理系统实战</h1><h2 id="1-题目要求"><a href="#1-题目要求" class="headerlink" title="1.题目要求"></a>1.题目要求</h2><p>模拟实现以下商品管理业务系统，商品管理系统的整体功能有：</p><blockquote><p>注：商品数据存储在一个数据库中(用静态HashMap来模拟)，MySQL </p></blockquote><ol><li>用户可以通过输入商品信息来向库中添加商品，如：</li><li>id，name,price,库存数量 -&gt; <strong>p01,透明胶带,8.8,1000</strong></li><li>用户可以查看数据库中所有的商品 </li><li>用户可以通过输入一个id来查看一个商品</li><li>用户可以通过输入一个name来查看一个商品</li><li>用户可以通过输入一个价格范围（比如：100-&gt;200）来查看符合条件的商品</li><li>用户可以通过输入一个id来从数据库中删除一个商品</li><li>用户可以通过指定一个id来修改一个商品的名称</li><li>用户可以通过制定一个id来修改一个商品的价格</li><li>用户可以通过制定一个id来修改一个商品的库存数量</li></ol><p>要求：</p><blockquote><ul><li>整个程序要分成：交互层、 业务逻辑（service）层、 数据访问（dao）层</li><li>交互层和service层之间要用“面向接口编程”的模式来写</li><li>业务逻辑层和dao层之间要用“面向接口编程”的模式来写</li></ul></blockquote><h2 id="2-前期准备"><a href="#2-前期准备" class="headerlink" title="2.前期准备"></a>2.前期准备</h2><ul><li>该项目基本融合了java学习的大部分知识，我们需要熟悉前面所学的基础知识，尤其是关于<strong>类的封装、继承、多态</strong>，还有接口的使用，以及对未知错误的<strong>异常处理</strong>等方面知识；底层DAO需要掌握<strong>JDBC</strong>指令同<strong>mysql数据库</strong>处理，在交互层需要了解常用的<strong>GUI组件</strong>和设计思路框架，在此过程中需要学习相关知识，下面推荐了一些学习资料和视频。<blockquote><ul><li>MYSQL入门知识：<a href="https://blog.csdn.net/weixin_46211269/article/details/119814777?spm=1001.2014.3001.5506">SQL指令基础</a></li><li>GUI入门知识：<a href="https://xiets.blog.csdn.net/article/details/72814531?spm=1001.2014.3001.5506">Swing速成</a></li><li>优秀博主：<a href="https://chuiyugin.github.io/2022/10/28/exercise2/#%E5%AE%9E%E9%AA%8C%E9%A2%98%E7%9B%AE">ChuiyuGin</a>、<a href="https://alleyf.github.io/2022/10/28/%E5%95%86%E5%93%81%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/">Alleyf</a></li></ul></blockquote></li></ul><h2 id="3-设计思路"><a href="#3-设计思路" class="headerlink" title="3.设计思路"></a>3.设计思路</h2><h3 id="1-DAO层"><a href="#1-DAO层" class="headerlink" title="1.DAO层"></a>1.DAO层</h3><p>DAO层主要完成对底层数据库的连接，与数据库进行数据交互，作为后面业务服务层的基础，java实现数据库的连接需要用到<u>JDBC包（jar）</u>，使用包中相应的类方法完成数据库连接，下面展示了DAO层的实现代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DAO;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DAO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DAOApi</span>&#123;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-keyword">static</span> Statement statement;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Connection connection;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/goodsmag&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-literal">null</span>)<br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>+connection);<br>            &#125;<br>            <span class="hljs-keyword">assert</span> connection != <span class="hljs-literal">null</span>;<br>            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (ClassNotFoundException e)<br>        &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            System.exit(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-业务-Service-逻辑层"><a href="#2-业务-Service-逻辑层" class="headerlink" title="2.业务(Service)逻辑层"></a>2.业务(Service)逻辑层</h3><p>本层主要是实现对数据库的数据处理的各种功能，包括对数据库中表的数据的<strong>增删改查</strong>，以及各种基础功能和附加功能，本层采用接口的方法实现，通过<strong>JDBC</strong>的各种命令对数据库中数据表的数据进行各种操作，以下介绍各个功能的实现。</p><h4 id="2-1-各功能接口"><a href="#2-1-各功能接口" class="headerlink" title="2.1 各功能接口"></a>2.1 各功能接口</h4><p>各种功能的接口提前定义好，以便于在后面的服务层中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Service;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServiceApi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SearchApi</span>, AlterApi, JudgeApi&#123;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SearchApi</span><br>&#123;<br>    Object[][] alllook() <span class="hljs-keyword">throws</span> SQLException;<br>    Object[][] idlook(<span class="hljs-type">int</span> id) <span class="hljs-keyword">throws</span> SQLException;<br>    Object[][] namelook(String name) <span class="hljs-keyword">throws</span> SQLException;<br>    Object[][] pricelook(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b) <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AlterApi</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">iddel</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">alldel</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String namevalue,String pricevalue,String numvalue)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rename</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String newname)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reprice</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">float</span> newprice)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">renumber</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> newnumber)</span> <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">JudgeApi</span><br>&#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">idexist</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">nameexist</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-添加商品"><a href="#2-2-添加商品" class="headerlink" title="2.2 添加商品"></a>2.2 添加商品</h4><p>该方法采用**Vector<HashMap>**来临时存储输入的需要添加的商品的各种信息，然后通过JDBC命令将其添加到数据库中，从而实现对商品的添加功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String namevalue,String pricevalue,String numvalue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods (name, price, num) values &quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">4</span>)<br>        &#123;<br>            <span class="hljs-keyword">switch</span>(i++)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                &#123;<br>                    goods.put(<span class="hljs-string">&quot;name&quot;</span>, namevalue);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                &#123;<br>                    goods.put(<span class="hljs-string">&quot;price&quot;</span>, pricevalue);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                &#123;<br>                    goods.put(<span class="hljs-string">&quot;num&quot;</span>, numvalue);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        i = <span class="hljs-number">1</span>;<br>        v.add(goods);<br>        <span class="hljs-keyword">try</span>&#123;<br>            statement.executeUpdate(key+<span class="hljs-string">&quot;( \&quot;&quot;</span>+goods.get(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;\&quot;,&quot;</span>+goods.get(<span class="hljs-string">&quot;price&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+goods.get(<span class="hljs-string">&quot;num&quot;</span>)+<span class="hljs-string">&quot;)&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-查询所有商品"><a href="#2-3-查询所有商品" class="headerlink" title="2.3 查询所有商品"></a>2.3 查询所有商品</h4><p>本方法通过使用一个<strong>Object数组</strong>来临时存储从数据库中查询到的所有商品数据，并将其循环添加到数组中保存，待需要时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object[][] alllook() <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">retnumsql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SET @rownum = 0&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">reranksql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE goods SET id = @rownum := @rownum +1&quot;</span>;<br>        statement.execute(retnumsql);<br>        statement.execute(reranksql);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) totalCount from goods&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(sql1);<br>        rs.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;totalCount&quot;</span>);<br>        Object[][] rowdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[count][<span class="hljs-number">4</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from goods&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql2);<br>        <span class="hljs-keyword">while</span>(resultSet.next())<br>        &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> resultSet.getFloat(<span class="hljs-string">&quot;price&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>                rowdata[i++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;id, name, price, num&#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rowdata;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-ID查询商品"><a href="#2-4-ID查询商品" class="headerlink" title="2.4 ID查询商品"></a>2.4 ID查询商品</h4><p>通过查询指定键的键值即ID来从数据库中查询该ID的商品，实现原理与全查询类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object[][] idlook (<span class="hljs-type">int</span> id) <span class="hljs-keyword">throws</span> SQLException &#123;<br>        Object[][] rowdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">1</span>][<span class="hljs-number">4</span>];<br>        <span class="hljs-keyword">if</span>(idexist(id))<br>        &#123;<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(<span class="hljs-string">&quot;select * from goods where id = &quot;</span> + id);<br>            <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">ID</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> resultSet.getFloat(<span class="hljs-string">&quot;price&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>                rowdata[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;ID, name, price, num&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rowdata;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-名字查询商品"><a href="#2-5-名字查询商品" class="headerlink" title="2.5 名字查询商品"></a>2.5 名字查询商品</h4><p>通过传递输入的商品名字到服务层到数据库中查询指定名字的商品，原理与上文类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object[][] namelook(String name) <span class="hljs-keyword">throws</span> SQLException &#123;<br>        Object[][] rowdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">1</span>][<span class="hljs-number">4</span>];<br>        <span class="hljs-keyword">if</span>(nameexist(name))<br>        &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from goods where name = \&quot;&quot;</span> + name + <span class="hljs-string">&quot;\&quot;&quot;</span>;<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>            <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">ID</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">Name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> resultSet.getFloat(<span class="hljs-string">&quot;price&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>                rowdata[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;ID, Name, price, num&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rowdata;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-6-ID删除商品"><a href="#2-6-ID删除商品" class="headerlink" title="2.6 ID删除商品"></a>2.6 ID删除商品</h4><p>通过传递商品ID通过JDBC指令直接删除数据库中指定ID的商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">iddel</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">if</span> (idexist(id))<br>        &#123;<br>            statement.executeUpdate(<span class="hljs-string">&quot;delete from goods where id=&quot;</span> + id);<br>            System.out.println(<span class="hljs-string">&quot;ID = &quot;</span> + id + <span class="hljs-string">&quot; 的商品信息删除成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;您的输入ID有误请查证后重新删除&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-7-价格筛选"><a href="#2-7-价格筛选" class="headerlink" title="2.7 价格筛选"></a>2.7 价格筛选</h4><p>通过传递<strong>maxprice和minprice</strong>两个浮点数调用JDBC指令到数据库中查询处于该范围内的商品并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object[][] pricelook(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b) <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) totalCount from goods where price&gt;=&quot;</span> + a +  <span class="hljs-string">&quot;and price&lt;=&quot;</span> + b + <span class="hljs-string">&quot;order by price&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(sql1);<br>        rs.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;totalCount&quot;</span>);<br>        Object[][] rowdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[count][<span class="hljs-number">4</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from goods where price&gt;=&quot;</span> + a + <span class="hljs-string">&quot; and price&lt;=&quot;</span> + b +<span class="hljs-string">&quot;order by price&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql2);<br>        <span class="hljs-keyword">while</span>(resultSet.next())<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> resultSet.getFloat(<span class="hljs-string">&quot;price&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>            rowdata[i++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;id, name, price, num&#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rowdata;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-8-修改数据-重命名、修改价格、修改数量"><a href="#2-8-修改数据-重命名、修改价格、修改数量" class="headerlink" title="2.8 修改数据(重命名、修改价格、修改数量)"></a>2.8 修改数据(重命名、修改价格、修改数量)</h4><p>通过传递对应的Name、Price和Number利用JDBC指令修改为输入的数据，三种修改方式实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rename</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String newname)</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br>        <span class="hljs-keyword">if</span>(idexist(id))<br>        &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update goods set name=\&quot;&quot;</span> + newname + <span class="hljs-string">&quot;\&quot; where id=&quot;</span> + id;<br>            statement.executeUpdate(sql);<br>            System.out.println(<span class="hljs-string">&quot;商品名修改成功&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reprice</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">float</span> newprice)</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br>        <span class="hljs-keyword">if</span>(idexist(id))<br>        &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update goods set price=&quot;</span> + newprice + <span class="hljs-string">&quot; where id=&quot;</span> + id;<br>            statement.executeUpdate(sql);<br>            System.out.println(<span class="hljs-string">&quot;商品价格修改成功&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renumber</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> newnumber)</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br>        <span class="hljs-keyword">if</span>(idexist(id))<br>        &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update goods set num=&quot;</span> + newnumber + <span class="hljs-string">&quot; where id=&quot;</span> + id;<br>            statement.executeUpdate(sql);<br>            System.out.println(<span class="hljs-string">&quot;商品数量修改成功&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-GUI交互层"><a href="#3-GUI交互层" class="headerlink" title="3.GUI交互层"></a>3.GUI交互层</h3><p>该层主要采用<strong>Swing类</strong>的各种组件和方法实现自己想要的图形用户界面，实现过程简要分为一下几个步骤。</p><blockquote><ul><li>创建<strong>JFrame</strong>组件作为面板组件的载体。</li><li>创建<strong>JPanel</strong>组件作为基础组件的载体，并且设置面板的大小，位置以及<strong>布局方式</strong>。</li><li>创建<strong>JLabel、JTextField、JButton、JPassword</strong>等基本组件并且设置其<strong>格式</strong>，包括颜色、大小、位置等。</li><li>将创建的基本组件添加到面板中，为组件<strong>添加监视器</strong>来实现动态响应，然后设置JFrame的内容为面板，设置其<strong>居中可见</strong>即可。</li></ul></blockquote><p>下面只展示部分代码作为示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showmanual</span><span class="hljs-params">(Frame owner)</span>&#123;<br>    <span class="hljs-comment">//设置对话框为非模态</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">JDialog</span> <span class="hljs-variable">dialog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDialog</span>(owner, <span class="hljs-string">&quot;教程&quot;</span>, <span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 设置对话框的宽高</span><br>            dialog.setSize(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>            <span class="hljs-comment">// 设置对话框大小不可改变</span><br>            dialog.setResizable(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 设置对话框相对显示的位置</span><br>            dialog.setLocationRelativeTo(GuiInteractApi.jf);<br>            <span class="hljs-comment">// 创建一个标签显示消息内容</span><br>            <span class="hljs-type">JLabel</span> <span class="hljs-variable">background</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;resources/img/教程视频.gif&quot;</span>));<br>            <span class="hljs-comment">// 添加组件到面板</span><br>            <span class="hljs-type">JPanel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>            panel.add(background);<br>            dialog.setContentPane(panel);<br>            dialog.setVisible(<span class="hljs-literal">true</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="4-结果展示"><a href="#4-结果展示" class="headerlink" title="4.结果展示"></a>4.结果展示</h2><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-3278ff2a-e80b-46df-b1f9-2d88301455e3/5d524da4-ed4d-4d24-a3d9-3c235c8238bd.gif" alt="教程动图"></p><h2 id="5-资源下载"><a href="#5-资源下载" class="headerlink" title="5.资源下载"></a>5.资源下载</h2><blockquote><ul><li><p>程序下载链接：**<a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-24bfcec2-0b23-4547-a957-73ffab276534/76e0f3b0-e4b6-44fd-af46-d941bfe774cd.zip">项目资源包</a>**</p></li><li><p>登录的用户名为<strong>root</strong>,密码为<strong>123456</strong>.</p></li><li><p>本程序使用的为私人云端数据库，可以直接运行程序，不需要切换为自己本地的数据库，不过也实现了软件内切换登录本地数据库，具体请自行测试.</p></li><li><p>项目创作不易,精心打磨耗时较久,从底层代码设计编写到GUI的Logo图标均为自己设计，但是仍然还有很多做的不够好的地方,请大家加以指正,有兴趣的小伙伴可以相互交流合作.</p></li><li><p>该资源包中包含了一个完整的可执行程序可以供大家学习使用,有需要的小伙伴可以联系我获取项目源代码.</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/19/MYSQL/"/>
    <url>/2022/10/19/MYSQL/</url>
    
    <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h2><table><thead><tr><th>类型</th><th>用途</th></tr></thead><tbody><tr><td><strong>int</strong></td><td>整形，相当于java的int</td></tr><tr><td>bigint</td><td>整形，相当于java的long</td></tr><tr><td>float</td><td>单精度浮点型</td></tr><tr><td><strong>double</strong></td><td>双精度浮点型</td></tr><tr><td><strong>datatime</strong></td><td>日期类型</td></tr><tr><td>timestamp</td><td>日期类型（可存储时间戳）</td></tr><tr><td><strong>char</strong></td><td>定长字符</td></tr><tr><td><strong>varchar</strong></td><td>不定长字符</td></tr><tr><td>text</td><td>大文字，用于存储很长的字符内容</td></tr><tr><td>blob</td><td>字节数据类型，存储图片、音频等文件</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FilterDesign</title>
    <link href="/2022/10/13/Filter/"/>
    <url>/2022/10/13/Filter/</url>
    
    <content type="html"><![CDATA[<h1 id="信号的时域处理"><a href="#信号的时域处理" class="headerlink" title="信号的时域处理"></a>信号的时域处理</h1><h2 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h2><p>选择子作业１中的音频信号，自行给定滤波器的系统函数，分别采用<strong>时域线性卷积</strong>和<strong>差分方程</strong>两种方法对音频信号进行滤波处理，比较滤波前后信号的波形和回放的效果。</p><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><h3 id="1-时域卷积法"><a href="#1-时域卷积法" class="headerlink" title="1.时域卷积法"></a>1.时域卷积法</h3><ul><li><p>分析原始音频信号的频谱，观察有用信号和噪声的分布，选择滤波器类型（低通、高通、带通、带阻等）</p></li><li><p>设定幅频响应下降三分贝的截止频率和滤波器阶数</p></li><li><p>选择合适的窗函数（包括Rectangular、Hanning、Hamming、Bartlett、Blackman、Kaiser、Gaussian、Flat-top等）</p></li><li><p>计算滤波器系数（滤波器的单位脉冲响应）</p></li><li><p>将滤波器系数与原始信号卷积进行滤波</p></li></ul><h3 id="2-差分方程法"><a href="#2-差分方程法" class="headerlink" title="2.差分方程法"></a>2.差分方程法</h3><ul><li>分析原始音频信号的频谱，观察有用信号和噪声的分布，选择滤波器类型（低通、高通、带通、带阻等）</li><li>设置通带截止频率和阻带截止频率并归一化，设定通带纹波系数和阻带衰减系数</li><li>求出切比雪夫滤波器的阶数和下降3分贝通带截止频率</li><li>计算滤波器的差分方程系数</li><li>调用filter函数对原始信号进行滤波</li></ul><h2 id="三、实现过程"><a href="#三、实现过程" class="headerlink" title="三、实现过程"></a>三、实现过程</h2><h3 id="滤波前后对比图"><a href="#滤波前后对比图" class="headerlink" title="滤波前后对比图"></a>滤波前后对比图</h3><div align="center">    <table align="center" border="0" cellspacing="0">        <tr>            <td><p align="center"><img src="https://img.gouka.la/i/2022/10/15/ystu0e.webp">    <p align="center">        FIR hamming窗低通滤波器前后对比图    </p>    </p></td>            <td><p align="center"><img src="https://img.gouka.la/i/2022/10/15/yukca3.webp">    <p align="center">        IIR 切比雪夫低通滤波器前后对比图    </p></p></td>        </tr>    </table></div><h3 id="1-时域卷积"><a href="#1-时域卷积" class="headerlink" title="1.时域卷积"></a>1.时域卷积</h3><p>首先导入原始音频信号并画出时域图和幅频响应曲线，分析其频谱分布，代码如下所示。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 数据导入及参数设置</span><br>[x,Fs]=audioread(<span class="hljs-string">&#x27;D:\数据\Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>Nx=<span class="hljs-built_in">length</span>(x);<br>tx=(<span class="hljs-number">0</span>:Nx<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>df=Fs/<span class="hljs-built_in">length</span>(tx); <span class="hljs-comment">%计算谱线间隔</span><br>fx=tx*df;<span class="hljs-comment">%频域范围</span><br>X=FFT(x,Nx,Fs,tx);<span class="hljs-comment">%快速傅里叶变换</span><br>fx=(fx*Fs)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>X=<span class="hljs-built_in">abs</span>(X);<br><span class="hljs-comment">% 绘出时域图和幅频响应</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">221</span>)<br><span class="hljs-built_in">plot</span>(tx,x); <br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">222</span>)<br><span class="hljs-comment">% plot(fx*Fs/1e3,abs(X),&quot;blue&quot;)</span><br><span class="hljs-built_in">plot</span>(fx(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Nx/<span class="hljs-number">2</span>)),X(<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Nx/<span class="hljs-number">2</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;b&#x27;</span>)<br>title(<span class="hljs-string">&quot;原信号音频相频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br></code></pre></td></tr></table></figure><p><img src="https://img.gouka.la/i/2022/10/15/yy5o7x.webp"></p><p>观察其幅频响应发现有用信号的频率在8Khz以下，以上则为能量较大的高频噪声，因此我采用低通滤波器对其进行滤波。</p><h4 id="FIR滤波器"><a href="#FIR滤波器" class="headerlink" title="FIR滤波器"></a>FIR滤波器</h4><p>设FIR滤波器的单位冲激响应h(n)为一个N点序列，0≤n≤N-1，则滤波器的系统函数为：<br>$$<br>H(\mathrm{z})=\sum_{k=0}^{N-1}h(\mathrm{k})*\mathrm{z}^{-k}<br>$$<br><strong>直接型FIR滤波器</strong>的差分方程为：<br>$$<br>\mathrm{y(n)}=\sum_{m=0}^{N-1}\mathrm{h(m)x(n-m)}<br>$$<br>由差分方程可知只需要求出FIR滤波器的单位冲激响应h(n)，设置<strong>滤波阶数</strong>和<strong>3db通带截止频率fc</strong>，采用<strong>汉林窗函数</strong>处理，再使用<strong>fir1函数</strong>将其与待滤波信号卷积即可完成滤波，具体实现代码如下。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% hamming窗低通滤波器滤除高频噪声</span><br>fc=<span class="hljs-number">7.95e3</span>; <span class="hljs-comment">%下降3分贝截止频率</span><br>h_n=fir1(<span class="hljs-number">1000</span>,fc*<span class="hljs-number">2</span>/Fs,<span class="hljs-string">&quot;low&quot;</span>);<br>y=conv(h_n,x);<br><br>Ny=<span class="hljs-built_in">length</span>(y);<span class="hljs-comment">%滤波后信号的长度</span><br>ty=(<span class="hljs-number">0</span>:Ny<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>Y=FFT(y,Ny,Fs,ty);<span class="hljs-comment">%快速傅里叶变换求频谱</span><br>df=Fs/<span class="hljs-built_in">length</span>(ty); <span class="hljs-comment">%计算谱线间隔</span><br>fy=ty*df;<span class="hljs-comment">%频域范围</span><br>fy=(fy*Fs)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>Y=<span class="hljs-built_in">abs</span>(Y);<br><span class="hljs-comment">% 绘出滤波后的时域图和幅频响应</span><br>subplot(<span class="hljs-number">223</span>)<br><span class="hljs-built_in">plot</span>(ty,y,<span class="hljs-string">&quot;g&quot;</span>);<br>title(<span class="hljs-string">&quot;滤波后信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">224</span>)<br>stem(fx(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Ny/<span class="hljs-number">2</span>)),Y(<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Ny/<span class="hljs-number">2</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>)<br>title(<span class="hljs-string">&quot;滤波后信号音频相频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% 试听及保存</span><br><span class="hljs-comment">% sound(y,Fs);</span><br>audiowrite(<span class="hljs-string">&quot;D:\数据\FIRfilter.wav&quot;</span>,y,Fs);<br><span class="hljs-comment">%% 快速傅里叶变换函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FourierTransform</span> = <span class="hljs-title">FFT</span><span class="hljs-params">(signal,N,fs,t)</span></span><br>Y=fft(signal,N);<br>df=fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<span class="hljs-comment">%频域范围</span><br>Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>FourierTransform=Ys;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>FIR滤波器的单位冲激响应如下图所示：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221013213239697.png"></p><p>通过时域卷积得到滤波后的结果如下图所示：</p><p><img src="https://img.gouka.la/i/2022/10/15/yx0y7f.webp"></p><p>由图可知，发现经过<strong>1000阶</strong>的3分贝截止频率为<strong>7.95e3Khz</strong>的低通滤波器处理后，8Khz及以上的高频噪声基本被完全滤除，成功从原始音频信号中提取到有用信号。</p><h3 id="2-差分方程"><a href="#2-差分方程" class="headerlink" title="2.差分方程"></a>2.差分方程</h3><p>首先也是先对原始音频信号做傅里叶变换分析其频谱，频谱结果同上，这里不在赘述。</p><h4 id="IIR切比雪夫低通滤波"><a href="#IIR切比雪夫低通滤波" class="headerlink" title="IIR切比雪夫低通滤波"></a>IIR切比雪夫低通滤波</h4><p>IIR(infinite impulse response)滤波器，无限冲激响应滤波器,IIR滤波器定义如下：<br>$$<br>\sum_{l=0}^{N}a(l)y(n-l)= \sum _{k=0}^{M}b(k)x(n-k)<br>$$<br>令$a(0)=1,a(l),l=1,2,…N$取反后得：<br>$$<br>y(n)= \sum _{k=0}^{M}b(k)x(n-k)+ \sum _{l=1}^{N}a(l)y(n-l)<br>$$<br><strong>IIR直接II型滤波器</strong>的流程框图如下所示：</p><p><img src="https://upload.semidata.info/new.eefocus.com/article/image/2021/07/15/60efdc2160bb0-thumb.png"></p><p>根据流程框图可知，需要求得<strong>差分方程系数向量a和b</strong>，这里我采用常见的切比雪夫滤波器设定<strong>通带频率、阻带频率</strong>以及<strong>纹波系数</strong>和<strong>衰减系数</strong>计算出系数a和b，再利用<strong>filter函数</strong>传入系数a、b和待滤波信号即可完成滤波，采用如下代码实现差分方程法实现IIR切比雪夫低通滤波器。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% IIR-Chebyshev低通滤波器滤除高频噪声</span><br>Wp=<span class="hljs-number">7.6e3</span>*<span class="hljs-number">2</span>/Fs;<span class="hljs-comment">%通带频率</span><br>Ws=<span class="hljs-number">8e3</span>*<span class="hljs-number">2</span>/Fs;<span class="hljs-comment">%阻带频率</span><br>[n,Wc]=cheb1ord(Wp,Ws,<span class="hljs-number">2</span>,<span class="hljs-number">40</span>);<span class="hljs-comment">%计算阶数和3db通带截止频率</span><br>[b,a]=cheby1(n,<span class="hljs-number">3</span>,Wc);<span class="hljs-comment">%切比雪夫滤波器返回差分方程系数</span><br>freqz(b,a);<span class="hljs-comment">%绘出滤波器频谱图（幅频响应和相频响应）</span><br>y=filter(b,a,x);<span class="hljs-comment">%滤除高频噪声</span><br>Y=FFT(y,N,Fs,t);<br>Y=fftshift(Y);<br>Y=<span class="hljs-built_in">abs</span>(Y);<br><span class="hljs-comment">% 绘出滤波后的时域图和幅频响应</span><br>subplot(<span class="hljs-number">223</span>)<br><span class="hljs-built_in">plot</span>(t,y,<span class="hljs-string">&#x27;b&#x27;</span>);<br>title(<span class="hljs-string">&quot;滤波后信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">224</span>)<br><span class="hljs-comment">% plot(f*Fs/1e3,Y,&#x27;k&#x27;);</span><br><span class="hljs-built_in">plot</span>(f(<span class="hljs-number">1</span>,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),Y(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;g&#x27;</span>)<br>title(<span class="hljs-string">&quot;滤波后信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br></code></pre></td></tr></table></figure><p>IIR切比雪夫滤波器的归一化频谱图如下所示：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/chebfrequency.png"></p><p>观察发现其幅频响应滤波效果比较好，根据此滤波器对原始音频信号进行滤波，下图展示了滤波后的结果。</p><p><img src="https://img.gouka.la/i/2022/10/15/yukca3.webp"></p><p>由图可知8Khz及以上的高频噪声被滤除，但原始信号靠近8Khz的部分幅值也有所衰减但影响不大，从而实现了对有用信号的提取。</p><h2 id="四、结果分析"><a href="#四、结果分析" class="headerlink" title="四、结果分析"></a>四、结果分析</h2><ol><li><p>时域线性卷积法和差分方程法都是实现数字滤波的两种方法，都可以很好的滤除有用信号的噪声，从而提取出有用的信号，排除无用信号的干扰。</p></li><li><p>实际观察发现<strong>随着滤波器的阶数的升高，滤波器的频率响应越接近理想滤波</strong>器，而要想实现同样滤波效果，差分方程法的滤波器阶数远小于时域卷积法的阶数。</p></li><li><p>当使用IIR滤波器时，由于IIR滤波器的存在<strong>系统稳定性</strong>问题，因此当滤波器阶数过高时会导致系统不稳定，从而失去正常滤波能力。</p></li><li><p>将相同参数的IIR<strong>巴特沃斯滤波</strong>与<strong>切比雪夫滤波</strong>对比，发现切比雪夫滤波后<strong>残留噪声频谱分布均匀</strong>，而巴特沃斯滤波后<strong>残留噪声频谱频率与幅度成反比</strong>，但是两种滤波器<strong>对高频有用信号也都所衰减</strong>，说明难以实现理想滤波器，只能无限逼近，两者频谱对比图如下。</p></li></ol><center>    <table align="center" border="0" cellspacing="0">        <tr>            <td><p align="center"><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221013153232154.png">    <p align="center">        切比雪夫滤波后的信号频谱图    </p>    </p></td>            <td><p align="center"><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/IIRbutterword.png">    <p align="center">        巴特沃斯滤波后的信号频谱图    </p></p></td>        </tr>    </table></center><blockquote><p><strong><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-24bfcec2-0b23-4547-a957-73ffab276534/0414f532-0d93-430a-9df7-55b09eefd343.zip">如果需要程序源代码在此，点击即可下载</a></strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FIR、IIR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LatexEquationManual</title>
    <link href="/2022/10/09/LatexEquationManual/"/>
    <url>/2022/10/09/LatexEquationManual/</url>
    
    <content type="html"><![CDATA[<h1 id="Latex公式手册"><a href="#Latex公式手册" class="headerlink" title="Latex公式手册"></a>Latex公式手册</h1><h2 id="数学模式"><a href="#数学模式" class="headerlink" title="数学模式"></a>数学模式</h2><p>在LaTeX数学模式中，公式有两种形式——行内公式和行间公式。前者公式嵌入在行内，适用于简单短小的公式；后者居中独占一行，适用于比较长或重要的公式。公式中的空格均会被忽略，可以使用命令\quad或\qquad实现<br>在行间公式中，命令\tag{n}可以进行手动编号</p><p><strong>行内公式</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span> f(x) = a+b <span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p><strong>行间公式</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> f(x) = a+b <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p><strong>手动编号</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> f(x) = a - b <span class="hljs-keyword">\tag</span>&#123;1.1&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><h2 id="数学结构"><a href="#数学结构" class="headerlink" title="数学结构"></a>数学结构</h2><h2 id="简单运算"><a href="#简单运算" class="headerlink" title="简单运算"></a>简单运算</h2><p>拉丁字母、阿拉伯数字和 + - * / = 运算符均可以直接输入获得，命令<code>\le</code>和<code>\ge</code>分别表示&lt;=和&gt;=，命令<code>\cdot</code>表示乘法的圆点，命令<code>\neq</code>表示不等号，命令<code>\equiv</code>表示恒等于，命令<code>\bmod</code>表示取模, 命令<code>\lvert \rvert</code>取绝对值.</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> x+2-3*4/6=4/y + x<span class="hljs-keyword">\cdot</span> y <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>x+2−3∗4/6=4/y+x⋅y \<br>x\le{y} \quad q\ge{p}<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> 0 <span class="hljs-keyword">\neq</span> 1 <span class="hljs-keyword">\quad</span> x <span class="hljs-keyword">\equiv</span> x <span class="hljs-keyword">\quad</span> 1 = 9 <span class="hljs-keyword">\bmod</span> 2 <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>0 \neq 1 \quad x \equiv x \quad 1 = \lvert9\rvert \bmod{2}<br>$$</p><h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>语法_表示下标、^表示上标，但上下标内容不止一个字符时，需用大括号括起来。单引号’表示求导</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> a<span class="hljs-built_in">_</span>&#123;ij&#125;<span class="hljs-built_in">^</span>&#123;2&#125; + b<span class="hljs-built_in">^</span>3<span class="hljs-built_in">_</span>&#123;2&#125;=x<span class="hljs-built_in">^</span>&#123;t&#125; + y&#x27; + x&#x27;&#x27;<span class="hljs-built_in">_</span>&#123;12&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>a_{ij}^{2} + b^3_{2}=x^{t} + y’ + x’’_{12}<br>$$</p><h2 id="根号、分式"><a href="#根号、分式" class="headerlink" title="根号、分式"></a>根号、分式</h2><p>命令：<code>\sqrt</code>表示平方根，<code>\sqrt[n]</code>表示n次方根，<code>\frac</code>表示分式</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\sqrt</span>&#123;x&#125; + <span class="hljs-keyword">\sqrt</span>&#123;x<span class="hljs-built_in">^</span>&#123;2&#125;+<span class="hljs-keyword">\sqrt</span>&#123;y&#125;&#125; = <span class="hljs-keyword">\sqrt</span>[3]&#123;k<span class="hljs-built_in">_</span>&#123;i&#125;&#125; - <span class="hljs-keyword">\frac</span>&#123;x&#125;&#123;m&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\sqrt{x} + \sqrt{x^{2}+\sqrt{y}} = \sqrt[3]{k_{i}} - \frac{x}{m}<br>$$</p><h2 id="上下标记"><a href="#上下标记" class="headerlink" title="上下标记"></a>上下标记</h2><p>命令：<code>\overline, \underline</code> 分别在表达式上、下方画出水平线</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\overline</span>&#123;x+y&#125; <span class="hljs-keyword">\qquad</span> <span class="hljs-keyword">\underline</span>&#123;a+b&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\overline{x+y} \qquad \underline{a+b}<br>$$</p><p>命令：<code>\overbrace, \underbrace</code> 分别在表达式上、下方给出一个水平的大括号</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\overbrace</span>&#123;1+2+<span class="hljs-keyword">\cdots</span>+n&#125;<span class="hljs-built_in">^</span>&#123;n个&#125; <span class="hljs-keyword">\qquad</span> <span class="hljs-keyword">\underbrace</span>&#123;a+b+<span class="hljs-keyword">\cdots</span>+z&#125;<span class="hljs-built_in">_</span>&#123;26&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\overbrace{1+2+\cdots+n}^{n个} \qquad \underbrace{a+b+\cdots+z}_{26}<br>$$</p><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>命令：<code>\vec</code>表示向量，<code>\overrightarrow</code>表示箭头向右的向量，<code>\overleftarrow</code>表示箭头向左的向量</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\vec</span>&#123;a&#125; + <span class="hljs-keyword">\overrightarrow</span>&#123;AB&#125; + <span class="hljs-keyword">\overleftarrow</span>&#123;DE&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\vec{a} + \overrightarrow{AB} + \overleftarrow{DE}<br>$$</p><h2 id="积分、极限、求和、乘积"><a href="#积分、极限、求和、乘积" class="headerlink" title="积分、极限、求和、乘积"></a>积分、极限、求和、乘积</h2><p>命令：\int表示积分，\lim表示极限， \sum表示求和，\prod表示乘积，^、_表示上、下限</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span>  <span class="hljs-keyword">\lim</span><span class="hljs-built_in">_</span>&#123;x <span class="hljs-keyword">\to</span> <span class="hljs-keyword">\infty</span>&#125; x<span class="hljs-built_in">^</span>2<span class="hljs-built_in">_</span>&#123;22&#125; - <span class="hljs-keyword">\int</span><span class="hljs-built_in">_</span>&#123;1&#125;<span class="hljs-built_in">^</span>&#123;5&#125;x<span class="hljs-keyword">\mathrm</span>&#123;d&#125;x + <span class="hljs-keyword">\sum</span><span class="hljs-built_in">_</span>&#123;n=1&#125;<span class="hljs-built_in">^</span>&#123;20&#125; n<span class="hljs-built_in">^</span>&#123;2&#125; = <span class="hljs-keyword">\prod</span><span class="hljs-built_in">_</span>&#123;j=1&#125;<span class="hljs-built_in">^</span>&#123;3&#125; y<span class="hljs-built_in">_</span>&#123;j&#125;  + <span class="hljs-keyword">\lim</span><span class="hljs-built_in">_</span>&#123;x <span class="hljs-keyword">\to</span> -2&#125; <span class="hljs-keyword">\frac</span>&#123;x-2&#125;&#123;x&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\lim_{x \to \infty} x^2_{22} - \int_{1}^{5}x\mathrm{d}x + \sum_{n=1}^{20} n^{2} = \prod_{j=1}^{3} y_{j}  + \lim_{x \to -2} \frac{x-2}{x}<br>$$</p><h2 id="三圆点"><a href="#三圆点" class="headerlink" title="三圆点"></a>三圆点</h2><p>命令：\ldots点位于基线上，\cdots点设置为居中，\vdots使其垂直，\ddots对角线排列</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> x<span class="hljs-built_in">_</span>&#123;1&#125;,x<span class="hljs-built_in">_</span>&#123;2&#125;,<span class="hljs-keyword">\ldots</span>,x<span class="hljs-built_in">_</span>&#123;5&#125;  <span class="hljs-keyword">\quad</span> x<span class="hljs-built_in">_</span>&#123;1&#125; + x<span class="hljs-built_in">_</span>&#123;2&#125; + <span class="hljs-keyword">\cdots</span> + x<span class="hljs-built_in">_</span>&#123;n&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>x_{1},x_{2},\ldots,x_{5}  \quad x_{1} + x_{2} + \cdots + x_{n}<br>$$</p><h2 id="重音符号"><a href="#重音符号" class="headerlink" title="重音符号"></a>重音符号</h2><p>常用命令如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span> <span class="hljs-keyword">\hat</span>&#123;x&#125; <span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\hat{x}<br>$$</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span> <span class="hljs-keyword">\bar</span>&#123;x&#125; <span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\bar{x}<br>$$</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span> <span class="hljs-keyword">\tilde</span>&#123;x&#125; <span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\tilde{x}<br>$$</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>其采用矩阵环境实现矩阵排列，常用的矩阵环境有matrix、bmatrix、vmatrix、pmatrix，其区别为在于外面的括号不同：</p><p><img src="https://pic1.zhimg.com/v2-684e48900e810dff360c23b4ffe99680_r.jpg" alt="img"></p><p>下列代码中，&amp;用于分隔列，\用于分隔行</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br>1 <span class="hljs-built_in">&amp;</span> 2 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-keyword">\\</span><br>67 <span class="hljs-built_in">&amp;</span> 95 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\vdots</span>  <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ddots</span> <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\begin{matrix}<br>1 &amp; 2 &amp; \cdots \<br>67 &amp; 95 &amp; \cdots \<br>\vdots  &amp; \vdots &amp; \ddots \<br>\end{matrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 2 &amp; \cdots \<br>67 &amp; 95 &amp; \cdots \<br>\vdots  &amp; \vdots &amp; \ddots \<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{vmatrix}<br>1 &amp; 2 &amp; \cdots \<br>67 &amp; 95 &amp; \cdots \<br>\vdots  &amp; \vdots &amp; \ddots \<br>\end{vmatrix}<br>$$</p><p>$$<br>\begin{pmatrix}<br>1 &amp; 2 &amp; \cdots \<br>67 &amp; 95 &amp; \cdots \<br>\vdots  &amp; \vdots &amp; \ddots \<br>\end{pmatrix}<br>$$</p><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><p>希腊字母无法直接通过美式键盘输入获得。在LaTeX中通过反斜杠\加上其字母读音实现，将读音首字母大写即可输入其大写形式，详见下表</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> <span class="hljs-keyword">\alpha</span><span class="hljs-built_in">^</span>&#123;2&#125; + <span class="hljs-keyword">\beta</span> = <span class="hljs-keyword">\Theta</span>  <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\alpha^{2} + \beta = \theta<br>$$</p><p><img src="https://pic1.zhimg.com/v2-da3e717cf670582fbfbdddee33073524_r.jpg" alt="img"></p><h2 id="多行公式"><a href="#多行公式" class="headerlink" title="多行公式"></a>多行公式</h2><h2 id="公式组合"><a href="#公式组合" class="headerlink" title="公式组合"></a>公式组合</h2><p>通过cases环境实现公式的组合，&amp;分隔公式和条件，还可以通过\limits来让x→0位于lim的正下方而非默认在lim符号的右下方显示</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span>D(x) = <span class="hljs-keyword">\begin</span>&#123;cases&#125;<br><span class="hljs-keyword">\lim</span><span class="hljs-keyword">\limits</span><span class="hljs-built_in">_</span>&#123;x <span class="hljs-keyword">\to</span> 0&#125; <span class="hljs-keyword">\frac</span>&#123;a<span class="hljs-built_in">^</span>x&#125;&#123;b+c&#125;, <span class="hljs-built_in">&amp;</span> x&lt;3 <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\pi</span>, <span class="hljs-built_in">&amp;</span> x=3 <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\int</span><span class="hljs-built_in">_</span>a<span class="hljs-built_in">^</span>&#123;3b&#125;x<span class="hljs-built_in">_</span>&#123;ij&#125;+e<span class="hljs-built_in">^</span>2 <span class="hljs-keyword">\mathrm</span>&#123;d&#125;x,<span class="hljs-built_in">&amp;</span> x&gt;3 <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;cases&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>D(x) = \begin{cases}<br>\lim\limits_{x \to 0} \frac{a^x}{b+c}, &amp; x&lt;3 \<br>\pi, &amp; x=3 \<br>\int_a^{3b}x_{ij}+e^2 \mathrm{d}x,&amp; x&gt;3 \<br>\end{cases}<br>$$</p><h2 id="拆分单个公式"><a href="#拆分单个公式" class="headerlink" title="拆分单个公式"></a>拆分单个公式</h2><p>通过split环境实现公式拆分</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\begin</span>&#123;split&#125;<br><span class="hljs-keyword">\cos</span> 2x <span class="hljs-built_in">&amp;</span>= <span class="hljs-keyword">\cos</span><span class="hljs-built_in">^</span>2x - <span class="hljs-keyword">\sin</span><span class="hljs-built_in">^</span>2x <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span>=2<span class="hljs-keyword">\cos</span><span class="hljs-built_in">^</span>2x-1<br><span class="hljs-keyword">\end</span>&#123;split&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\begin{split}<br>\cos 2x &amp;= \cos^2x - \sin^2x \<br>&amp;=2\cos^2x-1<br>\end{split}<br>$$</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="上标、下标及积分等"><a href="#上标、下标及积分等" class="headerlink" title="上标、下标及积分等"></a>上标、下标及积分等</h3><table><thead><tr><th align="left">LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>a^2</code></td><td>a2</td><td>上标</td></tr><tr><td align="left"><code>a_2</code></td><td>a2</td><td>下标</td></tr><tr><td align="left"><code>a^&#123;2+2&#125;</code></td><td>a2+2</td><td>组合</td></tr><tr><td align="left"><code>x_2^3</code></td><td>x23</td><td>结合上下标</td></tr><tr><td align="left"><code>&#123;&#125;_1^2\!X_3^4</code></td><td>12X34</td><td>前置上下标</td></tr><tr><td align="left"><code>\bigcap_1^&#123;n&#125; p</code></td><td>⋂1np</td><td>交集</td></tr><tr><td align="left"><code>\bigcup_1^&#123;k&#125; p</code></td><td>⋃1kp</td><td>并集</td></tr><tr><td align="left"><code>x&#39;</code></td><td>x′</td><td>导数</td></tr><tr><td align="left"><code>\dot&#123;x&#125;</code></td><td>x˙</td><td>导数点</td></tr><tr><td align="left"><code>\ddot&#123;y&#125;</code></td><td>y¨</td><td></td></tr><tr><td align="left"><code>\vec&#123;c&#125;</code></td><td>c→</td><td>向量</td></tr><tr><td align="left"><code>\overleftarrow&#123;a b&#125;</code></td><td>ab←</td><td></td></tr><tr><td align="left"><code>\overrightarrow&#123;c d&#125;</code></td><td>cd→</td><td></td></tr><tr><td align="left"><code>\widehat&#123;e f g&#125;</code></td><td>efg^</td><td></td></tr><tr><td align="left"><code>\overset&#123;\frown&#125; &#123;AB&#125;</code></td><td>AB⌢</td><td>上弧</td></tr><tr><td align="left"><code>\overline&#123;h i j&#125;</code></td><td>hij¯</td><td>上划线</td></tr><tr><td align="left"><code>\underline&#123;k l m&#125;</code></td><td>klm_</td><td>下划线</td></tr><tr><td align="left"><code>\overbrace&#123;1+2+\cdots+100&#125;</code></td><td>1+2+⋯+100⏞</td><td>上括号</td></tr><tr><td align="left"><code>\underbrace&#123;a+b+\cdots+z&#125;</code></td><td>a+b+⋯+z⏟</td><td>下括号</td></tr><tr><td align="left"><code>\sum_&#123;k=1&#125;^N k^2</code></td><td>∑k=1Nk2</td><td>求和</td></tr><tr><td align="left"><code>\prod_&#123;i=1&#125;^N x_i</code></td><td>∏i=1Nxi</td><td>求积</td></tr><tr><td align="left"><code>\coprod_&#123;i=1&#125;^N x_i</code></td><td>∐i=1Nxi</td><td>上积</td></tr><tr><td align="left"><code>\lim_&#123;n \to \infty&#125;x_n</code></td><td>limn→∞xn</td><td>极限</td></tr><tr><td align="left"><code>\int_&#123;-N&#125;^&#123;N&#125; e^x\, dx</code></td><td>∫−NNexdx</td><td>积分</td></tr><tr><td align="left"><code>\iint_&#123;D&#125;^&#123;W&#125; \, dx\,dy</code></td><td>∬DWdxdy</td><td>二重积分</td></tr><tr><td align="left"><code>\iiint_&#123;E&#125;^&#123;V&#125; \, dx\,dy\,dz</code></td><td>∭EVdxdydz</td><td>三重积分</td></tr><tr><td align="left"><code>\oint_&#123;C&#125; x^3\, dx + 4y^2\, dy</code></td><td>∮Cx3dx+4y2dy</td><td>曲线积分</td></tr></tbody></table><h3 id="根号"><a href="#根号" class="headerlink" title="根号"></a>根号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\sqrt&#123;3&#125;</code></td><td>3</td><td>平方根</td></tr><tr><td><code>\sqrt[n]&#123;3&#125;</code></td><td>3n</td><td>n 次方根</td></tr></tbody></table><h3 id="关系符号"><a href="#关系符号" class="headerlink" title="关系符号"></a>关系符号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\pm</code></td><td>±</td><td>加减</td></tr><tr><td><code>\times</code></td><td>×</td><td>乘</td></tr><tr><td><code>\div</code></td><td>÷</td><td>除</td></tr><tr><td><code>\neq</code></td><td>≠</td><td>不等于</td></tr><tr><td><code>\approx</code></td><td>≈</td><td>约等于</td></tr><tr><td><code>\equiv</code></td><td>≡</td><td>恒等于</td></tr><tr><td><code>\not\equiv</code></td><td>≢</td><td>不恒等于</td></tr><tr><td><code>\geq</code></td><td>≥</td><td>大于等于</td></tr><tr><td><code>\gg</code></td><td>≫</td><td></td></tr><tr><td><code>\leq</code></td><td>≤</td><td>小于等于</td></tr><tr><td><code>\ll</code></td><td>≪</td><td></td></tr><tr><td><code>\sim</code></td><td>∼</td><td>相似</td></tr><tr><td><code>\simeq</code></td><td>≃</td><td></td></tr><tr><td><code>\cong</code></td><td>≅</td><td></td></tr><tr><td><code>\propto</code></td><td>∝</td><td>正比于</td></tr><tr><td><code>\perp</code></td><td>⊥</td><td>垂直</td></tr><tr><td><code>\mbox&#123;or&#125;</code></td><td>or</td><td></td></tr></tbody></table><h3 id="几何符号"><a href="#几何符号" class="headerlink" title="几何符号"></a>几何符号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\Box</code></td><td>◻</td><td>正方形</td></tr><tr><td><code>\Diamond</code></td><td>◊</td><td>菱形</td></tr><tr><td><code>\triangle</code></td><td>△</td><td>三角形</td></tr><tr><td><code>\angle</code></td><td>∠</td><td>角</td></tr><tr><td><code>\perp</code></td><td>⊥</td><td>垂直</td></tr><tr><td><code>\mid</code></td><td>∣</td><td></td></tr><tr><td><code>\nmid</code></td><td>∤</td><td></td></tr><tr><td><code>|</code></td><td>∥</td><td></td></tr><tr><td><code>45^\circ</code></td><td>45∘</td><td>角度</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\sin\theta</code></td><td>sin⁡θ</td><td><code>\min L</code></td><td>minL</td></tr><tr><td><code>\cos\theta</code></td><td>cos⁡θ</td><td><code>\inf s</code></td><td>infs</td></tr><tr><td><code>\tan\theta</code></td><td>tan⁡θ</td><td><code>\sup t</code></td><td>supt</td></tr><tr><td><code>\cot</code></td><td>cot</td><td><code>\exp\!t</code></td><td>expt</td></tr><tr><td><code>\sec</code></td><td>sec</td><td><code>\ln X</code></td><td>ln⁡X</td></tr><tr><td><code>\csc</code></td><td>csc</td><td><code>\lg X</code></td><td>lg⁡X</td></tr><tr><td><code>\arcsin\frac&#123;L&#125;&#123;r&#125;</code></td><td>arcsin⁡Lr</td><td><code>\log X</code></td><td>log⁡X</td></tr><tr><td><code>\arccos\frac&#123;T&#125;&#123;r&#125;</code></td><td>arccos⁡Tr</td><td><code>f \ker g</code></td><td>fker⁡g</td></tr><tr><td><code>\arctan\frac&#123;L&#125;&#123;T&#125;</code></td><td>arctan⁡LT</td><td><code>\log_&#123;10&#125;</code></td><td>log10</td></tr><tr><td><code>\sinh g</code></td><td>sinh⁡g</td><td><code>\log_\alpha X</code></td><td>logα⁡X</td></tr><tr><td><code>\cosh h</code></td><td>cosh⁡h</td><td><code>\deg x</code></td><td>deg⁡x</td></tr><tr><td><code>\tanh i</code></td><td>tanh⁡i</td><td><code>\arg x</code></td><td>arg⁡x</td></tr><tr><td><code>\operatorname&#123;sh&#125;j</code></td><td>sh⁡j</td><td><code>\dim x</code></td><td>dim⁡x</td></tr><tr><td><code>\max H</code></td><td>maxH</td><td><code>\lim_&#123;t\to n&#125;T</code></td><td>limt→nT</td></tr></tbody></table><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\forall</code></td><td>∀</td><td><code>\exists</code></td><td>∃</td></tr><tr><td><code>\in</code></td><td>∈</td><td><code>\ni</code></td><td>∋</td></tr><tr><td><code>\subset</code></td><td>⊂</td><td><code>\subseteq</code></td><td>⊆</td></tr><tr><td><code>\supset</code></td><td>⊃</td><td><code>\supseteq</code></td><td>⊇</td></tr><tr><td><code>\sqsupset</code></td><td>⊐</td><td><code>\sqsupseteq</code></td><td>⊒</td></tr><tr><td><code>\cup</code></td><td>∪</td><td><code>\bigcup</code></td><td>⋃</td></tr><tr><td><code>\sqcup</code></td><td>⊔</td><td><code>\bigsqcup</code></td><td>⨆</td></tr><tr><td><code>\cap</code></td><td>∩</td><td><code>\bigcap</code></td><td>⋂</td></tr><tr><td><code>\sqsubset</code></td><td>⊏</td><td><code>\sqsubseteq</code></td><td>⊑</td></tr><tr><td><code>\varnothing</code></td><td>∅</td><td><code>\biguplus</code></td><td>⨄</td></tr><tr><td><code>\emptyset</code></td><td>∅</td><td><code>\sqcap</code></td><td>⊓</td></tr><tr><td><code>\notin</code></td><td>∉</td><td><code>\setminus</code></td><td>∖</td></tr></tbody></table><h3 id="逻辑与箭头"><a href="#逻辑与箭头" class="headerlink" title="逻辑与箭头"></a>逻辑与箭头</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\And</code></td><td>&amp;</td><td><code>\land</code></td><td>∧</td></tr><tr><td><code>\bar&#123;q&#125;</code></td><td>q¯</td><td><code>\lor</code></td><td>∨</td></tr><tr><td><code>\lnot</code></td><td>¬</td><td><code>\neg q</code></td><td>¬q</td></tr><tr><td><code>\wedge</code></td><td>∧</td><td><code>\bigwedge</code></td><td>⋀</td></tr><tr><td><code>\vee</code></td><td>∨</td><td><code>\bigvee</code></td><td>⋁</td></tr><tr><td><code>\setminus</code></td><td>∖</td><td><code>\smallsetminus</code></td><td>∖</td></tr><tr><td><code>\leftarrow</code></td><td>←</td><td><code>\gets</code></td><td>←</td></tr><tr><td><code>\to</code></td><td>→</td><td><code>\rightarrow</code></td><td>→</td></tr><tr><td><code>\leftrightarrow</code></td><td>↔</td><td><code>\longleftarrow</code></td><td>⟵</td></tr><tr><td><code>\longrightarrow</code></td><td>⟶</td><td><code>\mapsto</code></td><td>↦</td></tr><tr><td><code>\longmapsto</code></td><td>⟼</td><td><code>\hookrightarrow</code></td><td>↪</td></tr><tr><td><code>\hookleftarrow</code></td><td>↩</td><td><code>\nearrow</code></td><td>↗</td></tr><tr><td><code>\searrow</code></td><td>↘</td><td><code>\swarrow</code></td><td>↙</td></tr><tr><td><code>\nwarrow</code></td><td>↖</td><td><code>\uparrow</code></td><td>↑</td></tr><tr><td><code>\downarrow</code></td><td>↓</td><td><code>\updownarrow</code></td><td>↕</td></tr><tr><td><code>\Leftarrow</code></td><td>⇐</td><td><code>\Rightarrow</code></td><td>⇒</td></tr><tr><td><code>\Leftrightarrow</code></td><td>⇔</td><td><code>\Longleftarrow</code></td><td>⟸</td></tr><tr><td><code>\Longrightarrow</code></td><td>⟹</td><td><code>\Longleftrightarrow</code></td><td>⟺</td></tr></tbody></table><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\left ( \frac&#123;a&#125;&#123;b&#125; \right )</code></td><td>(ab)</td><td>小括号</td></tr><tr><td><code>\left[ \frac&#123;a&#125;&#123;b&#125; \right]</code></td><td>[ab]</td><td>中括号</td></tr><tr><td><code>\left \langle \frac&#123;a&#125;&#123;b&#125; \right \rangle</code></td><td>⟨ab⟩</td><td>尖括号</td></tr><tr><td><code>\left\&#123; \frac&#123;a&#125;&#123;b&#125; \right\&#125;</code></td><td>{ab}</td><td>大括号</td></tr><tr><td><code>\overbrace&#123; 1+2+\cdots+100 &#125;</code></td><td>1+2+⋯+100⏞</td><td>上括号</td></tr><tr><td><code>\underbrace&#123; a+b+\cdots+z &#125;</code></td><td>a+b+⋯+z⏟</td><td>下括号</td></tr></tbody></table><h3 id="分数、矩阵、多行列式"><a href="#分数、矩阵、多行列式" class="headerlink" title="分数、矩阵、多行列式"></a>分数、矩阵、多行列式</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\frac&#123;1&#125;&#123;2&#125;=0.5</code></td><td>12=0.5</td><td>分数</td></tr><tr><td><code>\tfrac&#123;1&#125;&#123;2&#125; = 0.5</code></td><td>12=0.5</td><td>小型分数</td></tr><tr><td><code>\dfrac&#123;k&#125;&#123;k-1&#125; = 0.5</code></td><td>kk−1=0.5</td><td>大型分数</td></tr><tr><td><code>\dfrac&#123; \tfrac&#123;1&#125;&#123;2&#125;[1-(\tfrac&#123;1&#125;&#123;2&#125;)^n] &#125;&#123; 1-\tfrac&#123;1&#125;&#123;2&#125; &#125; = s_n</code></td><td>12[1−(12)n]1−12=sn</td><td>大小型分数嵌套</td></tr><tr><td><code>\cfrac&#123;2&#125;&#123; c + \cfrac&#123;2&#125;&#123; d + \cfrac&#123;1&#125;&#123;2&#125; &#125; &#125; = a \qquad \dfrac&#123;2&#125;&#123; c + \dfrac&#123;2&#125;&#123; d + \dfrac&#123;1&#125;&#123;2&#125; &#125; &#125; = a</code></td><td>2c+2d+12=a2c+2d+12=a</td><td>连续分数</td></tr><tr><td><code>\binom&#123;n&#125;&#123;k&#125;</code></td><td>(nk)</td><td>二项式分数</td></tr><tr><td><code>\tbinom&#123;n&#125;&#123;k&#125;</code></td><td>(nk)</td><td>小型二项式系数</td></tr><tr><td><code>\dbinom&#123;n&#125;&#123;k&#125;</code></td><td>(nk)</td><td>大型二项式系数</td></tr><tr><td><code>\begin&#123;matrix&#125; x &amp; y \\ z &amp; v \end&#123;matrix&#125;</code></td><td>xyzv</td><td>矩阵</td></tr><tr><td><code>\begin&#123;vmatrix&#125; x &amp; y \\ z &amp; v \end&#123;vmatrix&#125;</code></td><td>|xyzv|</td><td></td></tr><tr><td><code>\begin&#123;Vmatrix&#125; x &amp; y \\ z &amp; v \end&#123;Vmatrix&#125;</code></td><td>∥xyzv∥</td><td></td></tr><tr><td><code>\begin&#123;bmatrix&#125; 0 &amp; \cdots &amp; 0 \\ \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; \cdots &amp; 0 \end&#123;bmatrix&#125;</code></td><td>[0⋯0⋮⋱⋮0⋯0]</td><td></td></tr><tr><td><code>\begin&#123;Bmatrix&#125; x &amp; y \\ z &amp; v \end&#123;Bmatrix&#125;</code></td><td>{xyzv}</td><td></td></tr><tr><td><code>\begin&#123;pmatrix&#125; x &amp; y \\ z &amp; v \end&#123;pmatrix&#125;</code></td><td>(xyzv)</td><td></td></tr><tr><td><code>\bigl( \begin&#123;smallmatrix&#125; a&amp;b\\ c&amp;d \end&#123;smallmatrix&#125; \bigr)</code></td><td>(abcd)</td><td></td></tr><tr><td>`\begin{array}{</td><td>c</td><td>c</td></tr><tr><td><code>f(n) = \begin&#123;cases&#125; n/2, &amp; \mbox&#123;if &#125;n\mbox&#123; is even&#125; \\ 3n+1, &amp; \mbox&#123;if &#125;n\mbox&#123; is odd&#125; \end&#123;cases&#125;</code></td><td>f(n)={n/2,if n is even3n+1,if n is odd</td><td>条件定义</td></tr><tr><td><code>\begin&#123;cases&#125; 3x + 5y + z &amp;= 1 \\ 7x - 2y + 4z &amp;= 2 \\ -6x + 3y + 2z &amp;= 3 \end&#123;cases&#125;</code></td><td>{3x+5y+z=17x−2y+4z=2−6x+3y+2z=3</td><td>方程组</td></tr><tr><td><code>\begin&#123;align&#125; f(x) &amp; = (a+b)^2 \\ &amp; = a^2+2ab+b^2 \end&#123;align&#125;</code></td><td>f(x)=(a+b)2=a2+2ab+b2</td><td>多行公式</td></tr><tr><td><code>\begin&#123;alignat&#125;&#123;2&#125; f(x) &amp; = (a-b)^2 \\ &amp; = a^2-2ab+b^2 \end&#123;alignat&#125;</code></td><td>f(x)=(a−b)2=a2−2ab+b2</td><td></td></tr><tr><td><code>\begin&#123;array&#125;&#123;lcl&#125; z &amp; = &amp; a \\ f(x,y,z) &amp; = &amp; x + y + z \end&#123;array&#125;</code></td><td>z=af(x,y,z)=x+y+z</td><td>多行公式（左对齐）</td></tr><tr><td><code>\begin&#123;array&#125;&#123;lcr&#125; z &amp; = &amp; a \\ f(x,y,z) &amp; = &amp; x + y + z \end&#123;array&#125;</code></td><td>z=af(x,y,z)=x+y+z</td><td>多行公式（右对齐）</td></tr></tbody></table><h3 id="希腊字母-1"><a href="#希腊字母-1" class="headerlink" title="希腊字母"></a>希腊字母</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\Gamma</code></td><td>Γ</td><td><code>\Delta</code></td><td>Δ</td></tr><tr><td><code>\Theta</code></td><td>Θ</td><td><code>\Lambda</code></td><td>Λ</td></tr><tr><td><code>\Xi</code></td><td>Ξ</td><td><code>\Pi</code></td><td>Π</td></tr><tr><td><code>\Sigma</code></td><td>Σ</td><td><code>\Upsilon</code></td><td>Υ</td></tr><tr><td><code>\Phi</code></td><td>Φ</td><td><code>\Psi</code></td><td>Ψ</td></tr><tr><td><code>\Omega</code></td><td>Ω</td><td>``</td><td></td></tr><tr><td><code>\alpha</code></td><td>α</td><td><code>\beta</code></td><td>β</td></tr><tr><td><code>\gamma</code></td><td>γ</td><td><code>\delta</code></td><td>δ</td></tr><tr><td><code>\epsilon</code></td><td>ϵ</td><td><code>\zeta</code></td><td>ζ</td></tr><tr><td><code>\eta</code></td><td>η</td><td><code>\theta</code></td><td>θ</td></tr><tr><td><code>\iota</code></td><td>ι</td><td><code>\kappa</code></td><td>κ</td></tr><tr><td><code>\lambda</code></td><td>λ</td><td><code>\mu</code></td><td>μ</td></tr><tr><td><code>\nu</code></td><td>ν</td><td><code>\xi</code></td><td>ξ</td></tr><tr><td><code>\omicron</code></td><td>ο</td><td><code>\pi</code></td><td>π</td></tr><tr><td><code>\rho</code></td><td>ρ</td><td><code>\sigma</code></td><td>σ</td></tr><tr><td><code>\tau</code></td><td>τ</td><td>``</td><td></td></tr><tr><td><code>\upsilon</code></td><td>υ</td><td><code>\phi</code></td><td>ϕ</td></tr><tr><td><code>\chi</code></td><td>χ</td><td><code>\psi</code></td><td>ψ</td></tr><tr><td><code>\omega</code></td><td>ω</td><td>``</td><td></td></tr><tr><td><code>\varepsilon</code></td><td>ε</td><td><code>\digamma</code></td><td>ϝ</td></tr><tr><td><code>\vartheta</code></td><td>ϑ</td><td><code>\varkappa</code></td><td>ϰ</td></tr><tr><td><code>\varpi</code></td><td>ϖ</td><td><code>\varrho</code></td><td>ϱ</td></tr><tr><td><code>\varsigma</code></td><td>ς</td><td><code>\varphi</code></td><td>φ</td></tr></tbody></table><h3 id="声调"><a href="#声调" class="headerlink" title="声调"></a>声调</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\acute&#123;a&#125;</code></td><td>a´</td><td><code>\grave&#123;a&#125;</code></td><td>a`</td></tr><tr><td><code>\hat&#123;a&#125;</code></td><td>a^</td><td><code>\tilde&#123;a&#125;</code></td><td>a~</td></tr><tr><td><code>\breve&#123;a&#125;</code></td><td>a˘</td><td>``</td><td></td></tr><tr><td><code>\check&#123;a&#125;</code></td><td>aˇ</td><td><code>\bar&#123;a&#125;</code></td><td>a¯</td></tr><tr><td><code>\ddot&#123;a&#125;</code></td><td>a¨</td><td><code>\dot&#123;a&#125;</code></td><td>a˙</td></tr></tbody></table><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\And</code></td><td>&amp;</td><td><code>\eth</code></td><td>ð</td></tr><tr><td><code>\S</code></td><td>§§</td><td>``</td><td></td></tr><tr><td><code>\%</code></td><td>%</td><td><code>\dagger</code></td><td>†</td></tr><tr><td><code>\ddagger</code></td><td>‡</td><td><code>\ldots</code></td><td>…</td></tr><tr><td><code>\cdots</code></td><td>⋯</td><td><code>\colon</code></td><td>:</td></tr><tr><td><code>\smile</code></td><td>⌣</td><td><code>\frown</code></td><td>⌢</td></tr><tr><td><code>\wr</code></td><td>≀</td><td><code>\triangleleft</code></td><td>◃</td></tr><tr><td><code>\triangleright</code></td><td>▹</td><td><code>\infty</code></td><td>∞</td></tr><tr><td><code>\bot</code></td><td>⊥</td><td><code>\top</code></td><td>⊤</td></tr><tr><td><code>\vdash</code></td><td>⊢</td><td><code>\vDash</code></td><td>⊨</td></tr><tr><td><code>\Vdash</code></td><td>⊩</td><td><code>\models</code></td><td>⊨</td></tr><tr><td><code>\lVert</code></td><td>‖</td><td><code>\rVert</code></td><td>‖</td></tr><tr><td><code>\imath</code></td><td>ı</td><td><code>\hbar</code></td><td>ℏ</td></tr><tr><td><code>\ell</code></td><td>ℓ</td><td><code>\mho</code></td><td>℧</td></tr><tr><td><code>\Finv</code></td><td>Ⅎ</td><td><code>\Re</code></td><td>ℜ</td></tr><tr><td><code>\Im</code></td><td>ℑ</td><td><code>\wp</code></td><td>℘</td></tr><tr><td><code>\complement</code></td><td>∁</td><td>``</td><td></td></tr><tr><td><code>\diamondsuit</code></td><td>♢</td><td><code>\heartsuit</code></td><td>♡</td></tr><tr><td><code>\clubsuit</code></td><td>♣</td><td><code>\spadesuit</code></td><td>♠</td></tr><tr><td><code>\Game</code></td><td>⅁</td><td><code>\flat</code></td><td>♭</td></tr><tr><td><code>\natural</code></td><td>♮</td><td><code>\sharp</code></td><td>♯</td></tr></tbody></table><p><a href="https://meta.wikimedia.org/w/index.php?title=Help:Displaying_a_formula/zh&uselang=zh">更多 LaTeX 数学符号</a></p><h2 id="示例数学方程"><a href="#示例数学方程" class="headerlink" title="示例数学方程"></a>示例数学方程</h2><p>\1. 有部分数学符号可以直接从键盘上输入，例如 + - = / ( ) 等等。形成一个有效公式，需要相关的数学符号组合成对应的命令。</p><table><thead><tr><th><code>\forall x \in X, \quad \exists y \leq \epsilon</code></th><th>∀x∈X,∃y≤ϵ</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>\2. 运算符是一个用单词组成的函数，例如三角函数（正弦，余弦，正切），对数和指数（log，exp），极限（lim）以及迹线和行列式（tr，det）。</p><table><thead><tr><th><code>\cos (2\theta) = \cos^2 \theta - \sin^2 \theta</code></th><th>cos⁡(2θ)=cos2⁡θ−sin2⁡θ</th></tr></thead><tbody><tr><td><code>\lim\limits_&#123;x \to \infty&#125; \exp(-x) = 0</code></td><td>limx→∞exp⁡(−x)=0</td></tr></tbody></table><p>\3. 幂函数和指数函数在公式命令中，通过上标和下标符号来表示。如果上标或者下标内容包含多个字符，需要使用大括号来将其区分。</p><table><thead><tr><th><code>k_&#123;n+1&#125; = n^2 + k_n^2 - k_&#123;n-1&#125;</code></th><th>kn+1=n2+kn2−kn−1</th></tr></thead><tbody><tr><td>`f(n) = n^5 + 4n^2 + 2</td><td>_{n=17}`</td></tr></tbody></table><p>\4. 通过使用 \frac{numerator}{denominator} 命令可以创建分数。同时可以使用 \binom 来显示二项式系数。</p><table><thead><tr><th><code>\frac&#123;n!&#125;&#123;k!(n-k)!&#125; = \binom&#123;n&#125;&#123;k&#125;</code></th><th>n!k!(n−k)!=(nk)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>\5. 连续分数可以使用 \cfrac 命令。</p><table><thead><tr><th><code>\begin&#123;equation&#125; x = a_0 + \cfrac&#123;1&#125;&#123;a_1 + \cfrac&#123;1&#125;&#123;a_2 + \cfrac&#123;1&#125;&#123;a_3 + \cfrac&#123;1&#125;&#123;a_4&#125; &#125; &#125; &#125; \end&#123;equation&#125;</code></th><th>x=a0+1a1+1a2+1a3+1a4</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>\6. 通过使用 \sqrt 命令可以创建一个 n 次方根，你可以在中括号 [ ] 和 大括号 { } 中定义方程具体内容。</p><table><thead><tr><th><code>\sqrt[n]&#123;1+x+x^2+x^3+\dots+x^n&#125;</code></th><th>1+x+x2+x3+⋯+xnn</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>\7. 同情情况下，数学公式的表达会因为大小而不同，所以表达式周围的定界符应当相应变化。你可以使用\left, \right 和 \middle 命令来完成操作。</p><p>| <code>P\left(A=2\middle|\frac&#123;A^2&#125;&#123;B&#125;&gt;4\right)</code> | P(A=2|A2B&gt;4) |<br>| —————————————— | ————- |<br>| <code>\left.\frac&#123;x^3&#125;&#123;3&#125;\right|_0^1</code>           | x33|01       |</p><p>\8. 你可以通过矩阵环境来创建基础的矩阵公式：与其他类似表格结构的命令一样，通过双反斜杠创建新的行，&amp; 符号分割来创建列。</p><table><thead><tr><th><code>A_&#123;m,n&#125; = \begin&#123;pmatrix&#125; a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\ a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_&#123;m,1&#125; &amp; a_&#123;m,2&#125; &amp; \cdots &amp; a_&#123;m,n&#125; \end&#123;pmatrix&#125;</code></th><th>Am,n=(a1,1a1,2⋯a1,na2,1a2,2⋯a2,n⋮⋮⋱⋮am,1am,2⋯am,n)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Latex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LatexEquation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA_Notes</title>
    <link href="/2022/10/03/FPGA/"/>
    <url>/2022/10/03/FPGA/</url>
    
    <content type="html"><![CDATA[<h1 id="FPGA-Notes"><a href="#FPGA-Notes" class="headerlink" title="FPGA_Notes"></a>FPGA_Notes</h1><h2 id="Verilog"><a href="#Verilog" class="headerlink" title="Verilog"></a>Verilog</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h4><ul><li>顺序块：<br><code>begin</code><br><code>end</code></li><li>并行块：<br><code>fork</code><br><code>join</code></li></ul><h4 id="多路分支语句"><a href="#多路分支语句" class="headerlink" title="多路分支语句"></a>多路分支语句</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">case</span>()<br>    condition1<br>    condition2<br>    <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">casez</span>(sel)<br>          <span class="hljs-number">4</span>&#x27;b???<span class="hljs-number">1</span>:     sout_t = p0 ;<br>          <span class="hljs-number">4</span>&#x27;b??<span class="hljs-number">1</span>?:     sout_t = p1 ;<br>          <span class="hljs-number">4</span>&#x27;b?<span class="hljs-number">1</span>??:     sout_t = p2 ;<br>          <span class="hljs-number">4&#x27;b1</span>???:     sout_t = p3 ;  <br>      <span class="hljs-keyword">default</span>:         sout_t = <span class="hljs-number">2&#x27;b0</span> ;<br><span class="hljs-keyword">endcase</span><br></code></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">while</span>()<br> <span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span>(initial_assignment; condition ; step_assignment)  <br><span class="hljs-keyword">begin</span><br>  …<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">repeat</span>(num)<br> <span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">forever</span><br> <span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="模块例化"><a href="#模块例化" class="headerlink" title="模块例化"></a>模块例化</h4><ul><li>不带参数例化</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//output 端口 Co 悬空</span><br>full_adder1  u_adder0(<br>  <span class="hljs-variable">.Ai</span>     (a[<span class="hljs-number">0</span>]),<br>  <span class="hljs-variable">.Bi</span>     (b[<span class="hljs-number">0</span>]),<br>  <span class="hljs-variable">.Ci</span>     (c==<span class="hljs-number">1&#x27;b1</span> ? <span class="hljs-number">1&#x27;b0</span> : <span class="hljs-number">1&#x27;b1</span>),<br>  <span class="hljs-variable">.So</span>     (so_bit0),<br>  <span class="hljs-variable">.Co</span>     ());<br><br><span class="hljs-comment">//output 端口 Co 删除</span><br>full_adder1  u_adder0(<br>    <span class="hljs-variable">.Ai</span>     (a[<span class="hljs-number">0</span>]),<br>    <span class="hljs-variable">.Bi</span>     (b[<span class="hljs-number">0</span>]),<br>    <span class="hljs-variable">.Ci</span>     (c==<span class="hljs-number">1&#x27;b1</span> ? <span class="hljs-number">1&#x27;b0</span> : <span class="hljs-number">1&#x27;b1</span>),<br>    <span class="hljs-variable">.So</span>     (so_bit0));<br></code></pre></td></tr></table></figure><ul><li>带参数例化</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//instantiation</span><br><span class="hljs-keyword">defparam</span>     u_ram_4x4<span class="hljs-variable">.MASK</span> = <span class="hljs-number">7</span> ;<br>ram_4x4    u_ram_4x4<br>    (<br>        <span class="hljs-variable">.CLK</span>    (clk),<br>        <span class="hljs-variable">.A</span>      (a[<span class="hljs-number">4</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]),<br>        <span class="hljs-variable">.D</span>      (d),<br>        <span class="hljs-variable">.EN</span>     (en),<br>        <span class="hljs-variable">.WR</span>     (wr),    <span class="hljs-comment">//1 for write and 0 for read</span><br>        <span class="hljs-variable">.Q</span>      (q)    );<br></code></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数只能在模块中定义，位置任意，并在模块的任何地方引用，作用范围也局限于此模块。函数主要有以下几个特点：</p><ol><li>不含有任何延迟、时序或时序控制逻辑</li><li>至少有一个输入变量</li><li>只有一个返回值，且没有输出</li><li>不含有非阻塞赋值语句</li><li>函数可以调用其他函数，但是不能调用任务</li></ol><p>Verilog 函数声明格式如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">function</span> [range-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]     function_id ;<br>input_declaration ;<br> other_declaration ;<br>procedural_statement ;<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><p><strong>模块实例</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> endian_rvs<br>#(<span class="hljs-keyword">parameter</span> N = <span class="hljs-number">4</span>)<br>    (<br>        <span class="hljs-keyword">input</span>             en,     <span class="hljs-comment">//enable control</span><br>        <span class="hljs-keyword">input</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]     a ,<br>        <span class="hljs-keyword">output</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]    b<br>);<br>     <br>    <span class="hljs-keyword">reg</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]          b_temp ;<br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (en) <span class="hljs-keyword">begin</span><br>            b_temp =  data_rvs(a);<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            b_temp = <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> b = b_temp ;<br>     <br><span class="hljs-comment">//function entity</span><br>    <span class="hljs-keyword">function</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]     data_rvs ;<br>        <span class="hljs-keyword">input</span>     [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] data_in ;<br>        <span class="hljs-keyword">parameter</span>         MASK = <span class="hljs-number">32&#x27;h3</span> ;<br>        <span class="hljs-keyword">integer</span>           k ;<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>; k&lt;N; k=k+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                data_rvs[N-k-<span class="hljs-number">1</span>]  = data_in[k] ;  <br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endmodule</span> <br></code></pre></td></tr></table></figure><h3 id="常数函数"><a href="#常数函数" class="headerlink" title="常数函数"></a>常数函数</h3><p>常数函数是指在仿真开始之前，在编译期间就计算出结果为常数的函数。常数函数不允许访问全局变量或者调用系统函数，但是可以调用另一个常数函数。</p><p>这种函数能够用来引用复杂的值，因此可用来代替常量。</p><p>例如下面一个常量函数，可以来计算模块中地址总线的宽度：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">parameter</span>    MEM_DEPTH = <span class="hljs-number">256</span> ;<br><span class="hljs-keyword">reg</span>  [logb2(MEM_DEPTH)-<span class="hljs-number">1</span>: <span class="hljs-number">0</span>] addr ; <span class="hljs-comment">//可得addr的宽度为8bit</span><br> <br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">integer</span>     logb2;<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">integer</span>     depth ;<br>        <span class="hljs-comment">//256为9bit，我们最终数据应该是8，所以需depth=2时提前停止循环</span><br>    <span class="hljs-keyword">for</span>(logb2=<span class="hljs-number">0</span>; depth&gt;<span class="hljs-number">1</span>; logb2=logb2+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>        depth = depth &gt;&gt; <span class="hljs-number">1</span> ;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><h3 id="automatic-函数"><a href="#automatic-函数" class="headerlink" title="automatic 函数"></a>automatic 函数</h3><p>在 Verilog 中，一般函数的局部变量是静态的，即函数的每次调用，函数的局部变量都会使用同一个存储空间。若某个函数在两个不同的地方同时并发的调用，那么两个函数调用行为同时对同一块地址进行操作，会导致不确定的函数结果。</p><p>Verilog 用关键字 automatic 来对函数进行说明，此类函数在调用时是可以自动分配新的内存空间的，也可以理解为是可递归的。因此，automatic 函数中声明的局部变量不能通过层次命名进行访问，但是 automatic 函数本身可以通过层次名进行调用。</p><p>下面用 automatic 函数，实现阶乘计算：</p><blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog">&gt;<span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>]      results3 = factorial(<span class="hljs-number">4</span>);<br>&gt;<span class="hljs-keyword">function</span> <span class="hljs-keyword">automatic</span> <span class="hljs-keyword">integer</span>    factorial ;<br>&gt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">integer</span>   data ;<br>&gt;<span class="hljs-keyword">integer</span>     i ;<br>&gt;<span class="hljs-keyword">begin</span><br>&gt;factorial = (data&gt;=<span class="hljs-number">2</span>)? data * factorial(data-<span class="hljs-number">1</span>) : <span class="hljs-number">1</span> ;<br>&gt;<span class="hljs-keyword">end</span><br>&gt;<span class="hljs-keyword">endfunction</span><span class="hljs-comment">// factorial</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><ul><li>$display<br>(类似于c的print,自动换行,运行时显示)</li><li>$write<br>(和display功能一样,不换行)</li><li>$monitor<br>(监视变量的变化，只要变则输出)</li><li>$strobe<br>(活动结束后显示)</li><li>$stop<br>(暂停仿真)</li><li>$finish<br>(结束仿真)</li><li>$time<br>(返回一个64位整数时间值)<br>$stime<br>(返回一个32位整数时间值)<br>$realtime<br>(返回-一个实数时间值)</li><li>( 1) Srandom和$random()<br>意义一样,都是产生32带符号整数随机数<br>( 2) $random%100<br>在-99到99之间产生随机数<br>(3) {Srandom}%100<br>采用位拼接符,在0到100之间产生随机数<br>(4) 如seed =10, Srandom(seed)<br>根据seed值产生随机数,而后seed值也会更新</li><li>（读取文件中的数据,内容必须为空格、换行、制表格、注释行、二进制或十六进制的数字）<br>$readmemb(“ &lt;数据文件名&gt;”, &lt;存贮器名&gt;);<br>$readmemb(“&lt;数据文件名&gt;”,&lt;存贮器名&gt;,&lt;起始地址&gt;);<br>Sreadmemb(“ &lt;数据文件名&gt;”, &lt;存贮器名&gt;,&lt;起始地址&gt;, &lt;结束地址&gt;);<br>$readmemh(“ &lt;数据文件名&gt;”, &lt;存贮器名&gt;);<br>$readmemh(“ &lt;数据文件名&gt;”,&lt;存则器名&gt;,&lt;起始地址&gt;);<br>$readmemh(“&lt;数据文件名&gt;”,&lt;存贮器名&gt;,&lt;起始地址&gt;, &lt;结束地址&gt;);</li></ul><h2 id="ModelSim"><a href="#ModelSim" class="headerlink" title="ModelSim"></a>ModelSim</h2><h2 id="分支主题-3"><a href="#分支主题-3" class="headerlink" title="分支主题 3"></a>分支主题 3</h2>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java_Exercise</title>
    <link href="/2022/09/28/Java_Exercise/"/>
    <url>/2022/09/28/Java_Exercise/</url>
    
    <content type="html"><![CDATA[<h1 id="Java—Exercise"><a href="#Java—Exercise" class="headerlink" title="Java—Exercise"></a>Java—Exercise</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>定义一个数组类，编写成员函数实现以下功能：</p><ol><li><p>随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；</p></li><li><p>判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；</p></li><li><p>数组和函数Sum（）：计算数组和。</p></li><li><p>判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；</p></li><li><p>编写main函数，调用测试以上功能；</p></li></ol><h3 id="二、-运行结果"><a href="#二、-运行结果" class="headerlink" title="二、 运行结果"></a>二、 运行结果</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928183135033.png" alt="image-20220928183135033"></p><h3 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> task;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">array</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> [] x;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">RandomArray</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> max)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-built_in">this</span>.x[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(max);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">CheckOrder</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">int</span> [] temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-built_in">this</span>.x.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.x.length; i++)<br>        &#123;<br>            temp[i] = <span class="hljs-built_in">this</span>.x[i];<br>        &#125;<br>        Arrays.sort(temp);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.x.length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.x[i] != temp[i])<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Sum</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.x.length; i++)<br>        &#123;<br>            sum += <span class="hljs-built_in">this</span>.x[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">CheckKey</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.x.length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.x[i] == key)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">array</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">array</span>();<br>        a.RandomArray(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>);<br>        System.out.println(<span class="hljs-string">&quot;打印随机产生的数组&quot;</span>);<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : a.x) &#123;<br>             System.out.print(x+<span class="hljs-string">&quot;\t&quot;</span>);<br>    &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;判断数组中是否有2?&quot;</span>);<br>        System.out.println(a.CheckKey(<span class="hljs-number">2</span>));<br>        System.out.println(<span class="hljs-string">&quot;判断数组是否升序?&quot;</span>);<br>        System.out.println(a.CheckOrder());<br>        System.out.println(<span class="hljs-string">&quot;打印数组求和的值&quot;</span>);<br>        System.out.print(a.Sum());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><h3 id="一、题目描述-1"><a href="#一、题目描述-1" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>编写程序，求圆柱体的体积<strong>CylinderVolume</strong>。</p><ol><li><p>设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；</p></li><li><p>设计一个圆柱体类Cylinder实现接口area。</p><ul><li><p>包含包含成员变量：高度，半径；</p></li><li><p>实现构造方法，对成员变量进行赋值；</p></li><li><p>实现圆柱体底面积成员方法area；</p></li><li><p> 实现计算圆柱体体积的成员方法volume；</p></li></ul></li><li><p>编写测试类计算圆柱体体积。</p></li></ol><h3 id="二、运行结果"><a href="#二、运行结果" class="headerlink" title="二、运行结果"></a>二、运行结果</h3><p><img src="https://img.gouka.la/i/2022/09/28/z0gkwr.webp"></p><h3 id="三、源代码-1"><a href="#三、源代码-1" class="headerlink" title="三、源代码"></a>三、源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> task;<br><span class="hljs-keyword">import</span> java.lang.Math.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cylinder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">area</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> radius;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">bottomArea</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Math.PI*Math.pow(<span class="hljs-built_in">this</span>.radius,<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cylinder</span><span class="hljs-params">(<span class="hljs-type">double</span> radius, <span class="hljs-type">double</span> height)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.radius = radius;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">volume</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> height*bottomArea();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">area</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">bottomArea</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cylindertest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入圆柱的半径和高度：&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> in.nextDouble();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> in.nextDouble();<br>        <span class="hljs-type">Cylinder</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cylinder</span>(r, h);<br>        System.out.println(<span class="hljs-string">&quot;圆柱的体积为:\n&quot;</span>+c.volume()+<span class="hljs-string">&quot;立方米&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><h3 id="一、题目描述-2"><a href="#一、题目描述-2" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>按以下要求编写程序：</strong></p><ol><li> 定义一个父类Animal类</li></ol><p>​            属性：kind(种类)</p><p>​            方法：创建带参（kind为参数）构造方法</p><p>​            创建cry():void方法</p><ol start="2"><li>编写三个具体的子类Cat类、Dog类、Sheep类</li></ol><p>​            分别重写父类中的 cry() 方法，输出信息分别为</p><p>​            Cat类：小猫的叫声：喵喵喵~~~</p><p>​            Dog类：小狗的叫声：汪汪汪~~~</p><p>​            Sheep类：小羊的叫声：咩咩咩~~~</p><ol start="3"><li>编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：</li></ol><ul><li>每次随机产生一个0~2的正整数</li><li>若数值为 0，则生成一个 Cat 类的对象，存入数组</li><li>若数值为 1，则生成一个 Dog 类的对象，存入数组</li><li>若数值为 2，则生成一个 Sheep 类的对象，存入数组最后循环输出数组成员，并分别调用 cry() 方法。</li></ul><h3 id="二、运行结果-1"><a href="#二、运行结果-1" class="headerlink" title="二、运行结果"></a>二、运行结果</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928210706368.png" alt="image-20220928210706368"></p><h3 id="三、源代码-2"><a href="#三、源代码-2" class="headerlink" title="三、源代码"></a>三、源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> task;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> String kind;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span>&#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String kind)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.kind = kind;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;&#125;;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span><br>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String kind)</span><br>        &#123;<br>            <span class="hljs-built_in">super</span>(kind);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.kind+<span class="hljs-string">&quot;的叫声：喵喵喵~~~&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String kind)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(kind);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.kind+<span class="hljs-string">&quot;的叫声：汪汪汪~~~&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sheep</span><span class="hljs-params">(String kind)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(kind);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.kind+<span class="hljs-string">&quot;的叫声：咩咩咩~~~&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animaltest</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">int</span> []n = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>        Animal [] An = <span class="hljs-keyword">new</span>  <span class="hljs-title class_">Animal</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;An.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">switch</span> (j) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    An[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;Tom&quot;</span>+(n[<span class="hljs-number">0</span>]++));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    An[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;Jerry&quot;</span>+(n[<span class="hljs-number">1</span>]++));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    An[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>(<span class="hljs-string">&quot;PeiQi&quot;</span>+(n[<span class="hljs-number">2</span>]++));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid number&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Animal temp : An )<br>        &#123;<br>            temp.cry();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                                                                                                                                <a href="https://alleyf.github.io/">文章已上传博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QuartusIIUsage</title>
    <link href="/2022/09/23/QuartusUsage/"/>
    <url>/2022/09/23/QuartusUsage/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Usage-of-QuartusII-And-ModelSim"><a href="#The-Usage-of-QuartusII-And-ModelSim" class="headerlink" title="The Usage of QuartusII And ModelSim"></a>The Usage of QuartusII And ModelSim</h1><h2 id="习题3-1"><a href="#习题3-1" class="headerlink" title="习题3.1"></a>习题3.1</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>基于 Quartus Prime 软件，采用原理图设计方式用 D 触发器设计一个 2 分频电路；在此基础上， 设计一个 4 分频和 8 分频电路并进行仿真。（参考设计如图 3.67 所示）</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924165154538.png"></p><p>​                                                        图 3.67 2 分频电路</p><h3 id="电路原理图设计"><a href="#电路原理图设计" class="headerlink" title="电路原理图设计"></a>电路原理图设计</h3><h4 id="四分频原理图"><a href="#四分频原理图" class="headerlink" title="四分频原理图"></a>四分频原理图</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/TwoDivF.png" alt="TwoDivF"></p><h4 id="八分频原理图"><a href="#八分频原理图" class="headerlink" title="八分频原理图"></a>八分频原理图</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDivf.png" alt="EightDivf"></p><h3 id="ModelSim仿真结果"><a href="#ModelSim仿真结果" class="headerlink" title="ModelSim仿真结果"></a>ModelSim仿真结果</h3><h4 id="四分频波形图"><a href="#四分频波形图" class="headerlink" title="四分频波形图"></a>四分频波形图</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/FourDiv.png" alt="FourDiv"></p><h4 id="八分频波形图"><a href="#八分频波形图" class="headerlink" title="八分频波形图"></a>八分频波形图</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDiv.png" alt="EightDiv"></p><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>首先在QuartusII中绘出原理图，编译后然后生成testbench测试文件，将两者关联后，再次编译，然后联合ModelSim进行波形<u>门级仿真</u>，四分频电路由两个二分频电路<u>级联</u>得到，而八分频电路由三个二分频电路得到；观察波形仿真结果发现四分频和八分频分别将输入的矩形波进行了<u>四分频和八分频</u>，结果与理论一致，但是输出的不是随输入瞬时变化，而是有一小段<u>延时</u>，这是由于门级水平仿真下<u>各逻辑门存在一定的延时</u>导致的。</p><h2 id="习题3-6"><a href="#习题3-6" class="headerlink" title="习题3.6"></a>习题3.6</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>基于 Quartus Prime，用 74194（4 位双向移位寄存器）设计一个 00011101 序列产生器电路，进 行编译和仿真，查看仿真结果。 参考设计：图 3.72 是序列产生器原理图，序列产生器采用 74194 和 74153（双 4 选 1 数据选择器） 构成。</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924170739029.png" alt="image-20220924170739029"></p><p>​                                图 3.72 00011101 序列产生器原理图</p><h3 id="电路原理图设计-1"><a href="#电路原理图设计-1" class="headerlink" title="电路原理图设计"></a>电路原理图设计</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeqGn.png" alt="SeqGn"></p><h3 id="ModelSim仿真结果-1"><a href="#ModelSim仿真结果-1" class="headerlink" title="ModelSim仿真结果"></a>ModelSim仿真结果</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeGn.png" alt="SeGn"></p><h3 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h3><p>观察仿真结果波形发现输出为周期变化的<strong>00011101序列</strong>，实验结果与预期一致，实现了题目所要求的功能。</p><h2 id="习题3-12"><a href="#习题3-12" class="headerlink" title="习题3.12"></a>习题3.12</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>设计消抖动电路，并对其功能进行仿真。 参考设计：由 4 个触发器和一个 4 输入与门构成的消抖动电路如图 3.73 所示，消抖动电路实质上就是 一个信号过滤器，能够将信号中的毛刺、抖动等都滤除掉，图 3.74 是其仿真波形，从波形可看出，输出信 号实现了消抖动，同时可以发现如下特点：</p><ul><li>输出脉宽变小了，它只等于 CLK 的一个周期的宽度。  </li><li>CLK 的频率不能太低，应至少有 4 个上升沿包含在正常信号脉冲中；CLK 的频率也不能太高，其 周期不能太多地小于干扰或者抖动信号的脉宽。</li><li>增加 D 触发器的数量，可以改善消抖动效果。</li></ul><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924171445232.png" alt="image-20220924171445232"></p><h3 id="电路原理图设计-2"><a href="#电路原理图设计-2" class="headerlink" title="电路原理图设计"></a>电路原理图设计</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EnShake.png" alt="EnShake"></p><h3 id="ModelSim仿真结果-2"><a href="#ModelSim仿真结果-2" class="headerlink" title="ModelSim仿真结果"></a>ModelSim仿真结果</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EmShake.png" alt="EmShake"></p><h3 id="结果分析-2"><a href="#结果分析-2" class="headerlink" title="结果分析"></a>结果分析</h3><p>将输入和输出对比发现，输出没有了输入的<strong>抖动、毛刺</strong>，消除了这些短暂的脉冲，将其过滤掉了，说明该电路有效地实现了消除抖动的功能，与预期相一致。</p>]]></content>
    
    
    <categories>
      
      <category>QuartusII</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QuartusII</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SignalSample</title>
    <link href="/2022/09/22/SignalSample/"/>
    <url>/2022/09/22/SignalSample/</url>
    
    <content type="html"><![CDATA[<h1 id="Signal-Sample-And-Rebuild"><a href="#Signal-Sample-And-Rebuild" class="headerlink" title="Signal Sample And Rebuild"></a>Signal Sample And Rebuild</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；</p><h3 id="Matlab程序设计"><a href="#Matlab程序设计" class="headerlink" title="Matlab程序设计"></a>Matlab程序设计</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 100khz信号的采样与恢复</span><br><span class="hljs-comment">%原信号生成</span><br>clear;<br>fs=<span class="hljs-number">500e3</span>;<span class="hljs-comment">%采样率</span><br>f1=<span class="hljs-number">100e3</span>;<span class="hljs-comment">%信号频率</span><br>T=<span class="hljs-number">10</span>/f1;<span class="hljs-comment">%采样20个周期</span><br>dt=<span class="hljs-number">1</span>/fs;<br>t=<span class="hljs-built_in">linspace</span>(-T,T-dt,<span class="hljs-number">20</span>*<span class="hljs-number">1e3</span>);<span class="hljs-comment">%时域横坐标</span><br>x = <span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*f1*t);<br>subplot(<span class="hljs-number">411</span>);<br><span class="hljs-built_in">plot</span>(t,x);<span class="hljs-comment">%画原始信号时域图</span><br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;100kHz信号时域图&quot;</span>)<br>grid on<br><br><span class="hljs-comment">%进行采样</span><br>n=-T:dt:T-dt;<br>xs=<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*f1*n);<br>subplot(<span class="hljs-number">412</span>);<br>stem(n,xs,<span class="hljs-string">&quot;filled&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;采样信号时域图&quot;</span>)<br>grid on<br><span class="hljs-comment">%快速傅里叶变换绘出频谱图</span><br>f=n*fs/<span class="hljs-built_in">length</span>(xs)+<span class="hljs-number">0.5</span>;<br>X=fft(xs,<span class="hljs-built_in">length</span>(xs));<br>subplot(<span class="hljs-number">413</span>);<br><span class="hljs-built_in">plot</span>(f*fs/<span class="hljs-number">1e3</span>,<span class="hljs-built_in">abs</span>(X));<br>xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>)<br>title(<span class="hljs-string">&quot;采样信号幅频图&quot;</span>)<br>grid on<br><br><span class="hljs-comment">%滤波恢复原信号</span><br>y=[];<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(t)<br>    a=t(<span class="hljs-built_in">i</span>)-n;<br>    Sa=sinc(fs.*a);<br>    g=<span class="hljs-built_in">dot</span>(xs,Sa);<br>    y = [y,g];<br><span class="hljs-keyword">end</span><br>subplot(<span class="hljs-number">414</span>);<br><span class="hljs-built_in">plot</span>(y);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;恢复信号时域图&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><ol><li><p>100kHz原始信号的采样与恢复</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample100.png" alt="sample100"></p></li><li><p>250kHz原始信号的采样与恢复</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample250.png" alt="sample250"></p></li><li><p>400kHz原始信号的采样与恢复</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample400.png" alt="sample400"></p></li></ol><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><ul><li>根据是实验结果观察波形可知，当采样频率固定为500kHz时，对100kHz采样后恢复的信号与原始信号基本一致，依据<strong>奈奎斯特采样定理</strong><u>采样频率需要大于信号的最高频率的两倍</u>可知，此时为<strong>过采样</strong>；对250kHz采样后恢复的信号在边界附近幅度有一定变化但近似可以恢复出原信号，依据奈奎斯特采样定理可知此时为<strong>临界采样</strong>；对400kHz采样后恢复的信号频率为原始信号的四倍发生了<strong>非线性失真</strong>，无法恢复出原始信号，依据奈奎斯特采样定理可知此时为<strong>欠采样</strong>。</li></ul><hr><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><h3 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h3><p>采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。</p><h3 id="Matlab程序设计-1"><a href="#Matlab程序设计-1" class="headerlink" title="Matlab程序设计"></a>Matlab程序设计</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 信号的采样与恢复</span><br>clear all;close;clc;<br><span class="hljs-comment">%% 原信号采样及对比</span><br>[x,fm]=audioread(<span class="hljs-string">&quot;D:/origin.wav&quot;</span>);<br>x=x(:,<span class="hljs-number">1</span>);<span class="hljs-comment">%由于x是双声道，所以取它的左声道</span><br>Fs=<span class="hljs-number">40e3</span>;<br>x = resample(x,Fs,fm);<span class="hljs-comment">%将读取信号重采样为40kHz作为原始信号</span><br>N=<span class="hljs-built_in">length</span>(x); <span class="hljs-comment">%信号的长度</span><br>t=(<span class="hljs-number">0</span>:N<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>);<br>subplot(<span class="hljs-number">421</span>);<br><span class="hljs-built_in">plot</span>(t,x); <span class="hljs-comment">%音频信号时域图</span><br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>Y=fft(x,N);<br>df=Fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<br>Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>subplot(<span class="hljs-number">422</span>);<br><span class="hljs-built_in">plot</span>(f.*Fs./<span class="hljs-number">1e3</span>,Ys); <span class="hljs-comment">%音频信号频谱图</span><br>title(<span class="hljs-string">&quot;原信号音频频谱图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>);<br><span class="hljs-comment">%% 进行过采样、临界采样和欠采样三种采样</span><br><span class="hljs-built_in">i</span>=<span class="hljs-number">3</span>;<br>fso=Fs*<span class="hljs-number">3</span>/<span class="hljs-number">4</span>;<br>fsc=Fs/<span class="hljs-number">2</span>;<br>fsu=Fs/<span class="hljs-number">4</span>;<br><span class="hljs-keyword">for</span> n = [<span class="hljs-number">3</span>/<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">if</span> n==<span class="hljs-number">3</span>/<span class="hljs-number">4</span><br>    yso =  resample(x,fso,Fs);<br><span class="hljs-keyword">elseif</span> n==<span class="hljs-number">2</span><br>    ysc =  resample(x,fsc,Fs);<br><span class="hljs-keyword">else</span><br>    ysu =  resample(x,fsu,Fs);<br><span class="hljs-keyword">end</span><br>subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">i</span>);<br><span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> n==<span class="hljs-number">3</span>/<span class="hljs-number">4</span><br>    tso=<span class="hljs-built_in">linspace</span>(t(<span class="hljs-number">1</span>),t(<span class="hljs-keyword">end</span>),<span class="hljs-built_in">length</span>(yso));<span class="hljs-comment">%时域横坐标</span><br>    <span class="hljs-built_in">plot</span>(tso,yso);<span class="hljs-comment">%画采样信号时域图</span><br>    title(<span class="hljs-string">&quot;过采样采样信号时域图&quot;</span>)<br>    xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>    grid on<br>    Y=fft(yso,<span class="hljs-built_in">length</span>(yso));<br>    subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">i</span>);<br>    <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br>    df=fso/<span class="hljs-built_in">length</span>(tso); <span class="hljs-comment">%计算谱线间隔</span><br>    fo=tso*df;<br>    Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>    <span class="hljs-built_in">plot</span>(fo.*fso./<span class="hljs-number">1e3</span>,Ys,<span class="hljs-string">&#x27;red&#x27;</span>); <span class="hljs-comment">%音频信号频谱图</span><br>    xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>); <br>    title(<span class="hljs-string">&quot;过采样音频频谱图&quot;</span>);<br>    grid on<br><span class="hljs-keyword">elseif</span> n==<span class="hljs-number">2</span><br>    tsc=<span class="hljs-built_in">linspace</span>(t(<span class="hljs-number">1</span>),t(<span class="hljs-keyword">end</span>),<span class="hljs-built_in">length</span>(ysc));<span class="hljs-comment">%时域横坐标</span><br>    <span class="hljs-built_in">plot</span>(tsc,ysc);<span class="hljs-comment">%画采样信号时域图</span><br>    title(<span class="hljs-string">&quot;临界采样采样信号时域图&quot;</span>)<br>    xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>    grid on<br>    Y=fft(ysc,<span class="hljs-built_in">length</span>(ysc));<br>    subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">i</span>);<br>    <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br>    df=fsc/<span class="hljs-built_in">length</span>(tsc); <span class="hljs-comment">%计算谱线间隔</span><br>    fc=tsc*df;<br>    Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>    <span class="hljs-built_in">plot</span>(fc.*fsc./<span class="hljs-number">1e3</span>,Ys,<span class="hljs-string">&#x27;green&#x27;</span>); <span class="hljs-comment">%音频信号频谱图</span><br>    xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>);<br>    title(<span class="hljs-string">&quot;临界采样音频频谱图&quot;</span>);<br>    grid on<br><span class="hljs-keyword">elseif</span> n==<span class="hljs-number">4</span> <br>    tsu=<span class="hljs-built_in">linspace</span>(t(<span class="hljs-number">1</span>),t(<span class="hljs-keyword">end</span>),<span class="hljs-built_in">length</span>(ysu));<span class="hljs-comment">%时域横坐标</span><br>    <span class="hljs-built_in">plot</span>(tsu,ysu);<span class="hljs-comment">%画采样信号时域图</span><br>    title(<span class="hljs-string">&quot;欠采样采样信号时域图&quot;</span>)<br>    xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>    grid on<br>    Y=fft(ysu,<span class="hljs-built_in">length</span>(ysu));<br>    subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">i</span>);<br>    <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br>    df=fsu/<span class="hljs-built_in">length</span>(tsu); <span class="hljs-comment">%计算谱线间隔</span><br>    fu=tsu*df;<br>    Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>    <span class="hljs-built_in">plot</span>(fu.*fsu./<span class="hljs-number">1e3</span>,Ys,<span class="hljs-string">&#x27;blue&#x27;</span>); <span class="hljs-comment">%音频信号频谱图</span><br>    xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>);<br>    title(<span class="hljs-string">&quot;欠采样音频频谱图&quot;</span>);<br>    grid on<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%% 低通滤波恢复原信号</span><br>yo=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">length</span>(x));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(x)<br>        a=t(<span class="hljs-built_in">i</span>)-tso;<br>        Sa=sinc(fso.*a);<br>        g=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(yso)<br>            s = yso(k)*Sa(k);<br>            g=g+s;<br>        <span class="hljs-keyword">end</span><br>        yo(<span class="hljs-built_in">i</span>) = g;<br><span class="hljs-keyword">end</span><br>yc=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">length</span>(x));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(t)<br>        b=t(<span class="hljs-built_in">i</span>)-tsc;<br>        Sb=sinc(fsc.*b);<br>        g=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(ysc)<br>            s = ysc(k)*Sb(k);<br>            g=g+s;<br>        <span class="hljs-keyword">end</span><br>        yc(<span class="hljs-built_in">i</span>) = g;<br><span class="hljs-keyword">end</span><br>yu=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">length</span>(x));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(t)<br>        c=t(<span class="hljs-built_in">i</span>)-tsu;<br>        Sc=sinc(fsu.*c);<br>        g=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(ysu)<br>            s = ysu(k)*Sc(k);<br>            g=g+s;<br>        <span class="hljs-keyword">end</span><br>        yu(<span class="hljs-built_in">i</span>) = g;<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%% 信号对比及保存</span><br><span class="hljs-comment">%画出还原时域图</span><br>m=<span class="hljs-number">2</span>;<br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>);<br>subplot(<span class="hljs-number">421</span>);<br><span class="hljs-built_in">plot</span>(t,x); <br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>grid on<br>s=<span class="hljs-string">&quot;原信号音频频谱图&quot;</span>;<br>FFT(x,N,Fs,t,m,s);<br>m=m+<span class="hljs-number">2</span>;<br>subplot(<span class="hljs-number">423</span>);<br><span class="hljs-built_in">plot</span>(t,yo);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;过采样恢复信号时域图&quot;</span>);<br>grid on<br>so=<span class="hljs-string">&quot;过采样信号音频频谱图&quot;</span>;<br>FFT(yo,<span class="hljs-built_in">length</span>(yo),Fs,t,m,so);<br>m=m+<span class="hljs-number">2</span>;<br>subplot(<span class="hljs-number">425</span>);<br><span class="hljs-built_in">plot</span>(t,yc);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;临界采样恢复信号时域图&quot;</span>);<br>grid on<br>sc=<span class="hljs-string">&quot;临界采样信号音频频谱图&quot;</span>;<br>FFT(yc,<span class="hljs-built_in">length</span>(yc),Fs,t,m,sc);<br>m=m+<span class="hljs-number">2</span>;<br>subplot(<span class="hljs-number">427</span>);<br><span class="hljs-built_in">plot</span>(t,yu);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;欠采样恢复信号时域图&quot;</span>);<br>grid on<br>su=<span class="hljs-string">&quot;欠采样信号音频频谱图&quot;</span>;<br>FFT(yu,<span class="hljs-built_in">length</span>(yu),Fs,t,m,su);<br><span class="hljs-comment">%%</span><br><span class="hljs-comment">%保存信号</span><br>name = [<span class="hljs-string">&quot;over_sampling.wav&quot;</span>,<span class="hljs-string">&quot;critical_sampling.wav&quot;</span>,<span class="hljs-string">&quot;under_sampling.wav&quot;</span>];<br>audiowrite(name(<span class="hljs-number">1</span>),yo,Fs);<br>audiowrite(name(<span class="hljs-number">2</span>),yc,Fs);<br>audiowrite(name(<span class="hljs-number">3</span>),yu,Fs);<br><span class="hljs-comment">%% 傅里叶变换函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FourierTransform</span> = <span class="hljs-title">FFT</span><span class="hljs-params">(signal,N,fs,t,m,s)</span></span><br>Y=fft(signal,N);<br>df=fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<br>Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,m);<br><span class="hljs-built_in">plot</span>(f.*fs./<span class="hljs-number">1e3</span>,Ys); <span class="hljs-comment">%音频信号频谱图</span><br>xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>);<br>title(s);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><ol><li><p>三种采样后的信号与原信号的对比</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample.png" alt="sample"></p></li><li><p>重建信号与原信号的对比</p><p><img src="https://img.gouka.la/i/2022/09/29/xmk5br.webp"></p></li></ol><h3 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h3><ul><li><p>先读取音频信号，matlab默认读取音频时的采样频率为44.1kHz，而人类能够听到的声音的频率为<strong>20~20kHz</strong>左右，为了便于后面的采样将采集的信号重采样为40kHz作为原始信号，然后对其分别进行过采样(频率为30kHz)、临界采样(频率为20kHz)、欠采样(频率为10kHz)，采样后对其进行<strong>插值重建</strong>。</p></li><li><p>对比原始信号与重建信号的时域图和频谱图发现，过采样和临界采样恢复的信号和原始信号基本一致，没有发生较大的畸变，而欠采样信号发生了较大的失真，与原始信号有较大的的区别，由此可知，<strong>采样必须满足奈奎斯特采样定理</strong>才能不失真的恢复出原始信号。</p><p> ​                                                                                                                </p><p> ​                                                                                                                <a href="https://alleyf.github.io/2022/09/22/SignalSample/">原文已上传博客</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Signal</tag>
      
      <tag>Sample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ML_DL</title>
    <link href="/2022/09/11/ML_DL/"/>
    <url>/2022/09/11/ML_DL/</url>
    
    <content type="html"><![CDATA[<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><h2 id="Paddle常用API"><a href="#Paddle常用API" class="headerlink" title="Paddle常用API"></a>Paddle常用API</h2><center><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/index_cn.html">飞浆API</a></center><table><thead><tr><th align="center"></th><th align="left"></th></tr></thead><tbody><tr><td align="center"><strong>目录</strong></td><td align="left"><strong>功能和包含的API</strong></td></tr><tr><td align="center">paddle.*</td><td align="left">paddle 根目录下保留了常用API的别名，包括：paddle.tensor, paddle.framework, paddle.device 目录下的所有API</td></tr><tr><td align="center">paddle.tensor</td><td align="left">Tensor操作相关的API，包括 创建zeros, 矩阵运算matmul, 变换concat, 计算add, 查找argmax等</td></tr><tr><td align="center">paddle.framework</td><td align="left">框架通用API和动态图模式的API，包括 no_grad 、 save 、 load 等。</td></tr><tr><td align="center">paddle.device</td><td align="left">设备管理相关API，包括 set_device, get_device 等。</td></tr><tr><td align="center">paddle.linalg</td><td align="left">线性代数相关API，包括 det, svd 等。</td></tr><tr><td align="center">paddle.fft</td><td align="left">快速傅里叶变换的相关API，包括 fft, fft2 等。</td></tr><tr><td align="center">paddle.amp</td><td align="left">自动混合精度策略，包括 auto_cast 、 GradScaler 等。</td></tr><tr><td align="center">paddle.autograd</td><td align="left">自动求导相关API，包括 backward、PyLayer 等。</td></tr><tr><td align="center">paddle.callbacks</td><td align="left">日志回调类，包括 ModelCheckpoint 、 ProgBarLogger 等。</td></tr><tr><td align="center">paddle.distributed</td><td align="left">分布式相关基础API。</td></tr><tr><td align="center">paddle.distributed.fleet</td><td align="left">分布式相关高层API。</td></tr><tr><td align="center">paddle.hub</td><td align="left">模型拓展相关的API，包括 list、load、help 等。</td></tr><tr><td align="center">paddle.io</td><td align="left">数据输入输出相关API，包括 Dataset, DataLoader 等。</td></tr><tr><td align="center">paddle.jit</td><td align="left">动态图转静态图相关API，包括 to_static、 ProgramTranslator、TracedLayer 等。</td></tr><tr><td align="center">paddle.metric</td><td align="left">评估指标计算相关的API，包括 Accuracy, Auc等。</td></tr><tr><td align="center">paddle.nn</td><td align="left">组网相关的API，包括 Linear 、卷积 Conv2D 、 循环神经网络 RNN 、损失函数 CrossEntropyLoss 、 激活函数 ReLU 等。</td></tr><tr><td align="center">paddle.onnx</td><td align="left">paddle转换为onnx协议相关API，包括 export 等。</td></tr><tr><td align="center">paddle.optimizer</td><td align="left">优化算法相关API，包括 SGD，Adagrad, Adam 等。</td></tr><tr><td align="center">paddle.optimizer.lr</td><td align="left">学习率衰减相关API，包括 NoamDecay 、 StepDecay 、 PiecewiseDecay 等。</td></tr><tr><td align="center">paddle.regularizer</td><td align="left">正则化相关API，包括 L1Decay、L2Decay 等。</td></tr><tr><td align="center">paddle.static</td><td align="left">静态图下基础框架相关API，包括 Variable, Program, Executor等</td></tr><tr><td align="center">paddle.static.nn</td><td align="left">静态图下组网专用API，包括 全连接层 fc 、控制流 while_loop/cond 。</td></tr><tr><td align="center">paddle.text</td><td align="left">NLP领域API，包括NLP领域相关的数据集， 如 Imdb 、 Movielens 。</td></tr><tr><td align="center">paddle.utils</td><td align="left">工具类相关API，包括 CppExtension、CUDAExtension 等。</td></tr></tbody></table><h2 id="飞桨产业级深度学习开源开放平台"><a href="#飞桨产业级深度学习开源开放平台" class="headerlink" title="飞桨产业级深度学习开源开放平台"></a>飞桨产业级深度学习开源开放平台</h2><p>飞桨（PaddlePaddle）以百度多年的深度学习技术研究和业务应用为基础，集深度学习核心训练和推理框架、基础模型库、端到端开发套件、丰富的工具组件于一体，是中国首个自主研发、功能丰富、开源开放的产业级深度学习平台。飞桨于2016 年正式开源，是主流深度学习框架中一款完全国产化的产品。相比国内其他产品，飞桨是一个功能完整的深度学习平台，也是唯一成熟稳定、具备大规模推广条件的深度学习开源开放平台。根据国际权威调查机构IDC报告显示，2021年飞桨已位居中国深度学习平台市场综合份额第一。</p><p>目前，飞桨已凝聚477万开发者，基于飞桨开源深度学习平台创建56万个模型，服务了18万家企事业单位。飞桨助力开发者快速实现AI想法，创新AI应用，作为基础平台支撑越来越多行业实现产业智能化升级，并已广泛应用于智慧城市、智能制造、智慧金融、泛交通、泛互联网、智慧农业等领域，如 <strong>图1</strong> 所示。</p><p>飞桨产业级深度学习开源开放平台包含核心框架、基础模型库、端到端开发套件与工具组件几个部分，各组件使用场景如 <strong>图2</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/e040a31c13924cd5ae004308f73ce50c6979239be95f4f3ebb8c92b1311d77ab" width="1000" ></center><center><br>图2：飞桨开源组件使用场景概览 </br></center>概览图上半部分是从开发、训练到部署的全流程工具；下半部分是预训练模型、封装工具、各领域的开发套件和模型库等模型资源，支持深度学习模型从训练到部署的全流程。<h2 id="模型开发和训练组件"><a href="#模型开发和训练组件" class="headerlink" title="模型开发和训练组件"></a>模型开发和训练组件</h2><p><strong>飞桨核心框架Paddle</strong>支持用户完成基础的模型编写和单机训练功能。除核心框架之外，飞桨还提供了<strong>分布式训练框架FleetAPI</strong>、<strong>云上任务提交工具PaddleCloud</strong>和<strong>多任务学习框架PALM</strong>。</p><h3 id="模型部署组件"><a href="#模型部署组件" class="headerlink" title="模型部署组件"></a>模型部署组件</h3><p>针对不同硬件环境，飞桨提供了丰富的支持方案：</p><ul><li><p><strong>Paddle Inference</strong>：飞桨原生推理库，用于服务器端模型部署，支持Python、C、C++、Go等语言，可将模型融入业务系统。</p></li><li><p><strong>Paddle Serving</strong>：飞桨服务化部署框架，用于云端服务化部署，可将模型作为单独的Web服务。</p></li><li><p><strong>Paddle Lite</strong>：飞桨轻量化推理引擎，用于Mobile、IoT等场景的部署，有着广泛的硬件支持。</p></li><li><p><strong>Paddle.js</strong>：使用JavaScript（Web）语言部署模型，用于在浏览器、小程序等环境快速部署模型。</p></li><li><p><strong>PaddleSlim</strong>：模型压缩工具，获得更小体积的模型和更快的执行性能，通常在模型部署前使用。</p></li><li><p><strong>X2Paddle</strong>：飞桨模型转换工具，将其他框架模型转换成Paddle模型，转换格式后可以方便的使用上述5个工具。</p></li></ul><h3 id="其他全研发流程的辅助工具组件"><a href="#其他全研发流程的辅助工具组件" class="headerlink" title="其他全研发流程的辅助工具组件"></a>其他全研发流程的辅助工具组件</h3><ul><li><p><strong>AutoDL</strong>：飞桨自动化深度学习工具，自动搜索最优的网络结构与超参数，实现网络结构设计。免去用户在诸多网络结构中选择困难的烦恼和人工调参的繁琐工作。</p></li><li><p><strong>VisualDL</strong>：飞桨可视化分析工具，以丰富的图表呈现训练参数变化趋势、模型结构、数据样本、高维数据分布、精度召回曲线等模型关键信息，帮助用户清晰直观地理解深度学习模型训练过程及模型结构，启发优化思路。</p></li><li><p><strong>PaddleFL</strong>：飞桨联邦学习框架，通过PaddleFL复制和比较不同的联邦学习算法，实现大规模分布式集群部署，并且提供丰富的横向和纵向联邦学习策略及其在计算机视觉、自然语言处理、推荐算法等领域的应用。</p></li></ul><h3 id="产业级开源模型库"><a href="#产业级开源模型库" class="headerlink" title="产业级开源模型库"></a>产业级开源模型库</h3><p>飞桨提供了产业级开源模型库，覆盖计算机视觉(PaddleCV)、自然语言处理(PaddleNLP)、推荐(PaddleRec)、语音(PaddleSpeech)四大应用领域，包含经过产业实践长期打磨的主流模型以及在国际竞赛中的夺冠模型。同时，飞桨将主流模型按照领域组织成端到端开发套件，助力快速的产业应用。</p><p><strong>1）预训练模型和封装工具</strong>：通过低代码形式，支持企业POC快速验证、快速实现深度学习算法开发及产业部署。</p><ul><li><p><strong>PaddleHub</strong>：飞桨预训练模型应用工具，提供超过350个预训练模型，覆盖文本、图像、视频、语音四大领域。模型即软件，通过Python API或者命令行工具，一行代码完成预训练模型的预测。结合Fine-tune API，10行代码完成迁移学习，是进行原型验证（POC）的首选。</p></li><li><p><strong>PaddleX</strong>：飞桨全流程开发工具，以低代码的形式支持开发者快速实现深度学习算法开发及产业部署。提供极简Python API和可视化界面Demo两种开发模式，可一键安装。提供CPU、GPU、树莓派等通用硬件高性能部署方案，并通过Maufacture SDK支持用户流程化串联部署任务，极大降低部署成本。</p></li></ul><p><strong>2）开发套件</strong>：针对具体的应用场景提供了全套的研发工具，例如：在图像检测场景不仅提供了预训练模型，还提供了数据增强等工具。开发套件覆盖计算机视觉、自然语言处理、语音、推荐四大主流领域，甚至还包括图神经网络和增强学习。开发套件可以提供一个领域极致优化（State Of The Art）的实现方案，曾有国内团队使用飞桨的开发套件获得了国际建模竞赛的大奖。</p><ul><li><strong>PaddleClas</strong>：飞桨图像分类开发套件，提供通用图像识别系统PP-ShiTu，可高效实现高精度车辆、商品等多种识别任务；同时提供37个系列213个高性能图像分类预训练模型，其中包括10万分类预训练模型、PP-LCNet等明星模型；以及SSLD知识蒸馏等先进算法优化策略，可被广泛应用于高阶视觉任务，辅助产业及科研领域快速解决多类别、高相似度、小样本等业界难点。</li><li><strong>PaddleDetection</strong>：飞桨目标检测开发套件，内置190个主流目标检测、实例分割、跟踪、关键点检测算法，其中包括服务器端和移动端产业级SOTA模型、冠军方案和学术前沿算法，并提供配置化的网络模块组件、十余种数据增强策略和损失函数等高阶优化支持和多种部署方案，在打通数据处理、模型开发、训练、压缩、部署全流程的基础上，提供丰富的案例及教程，加速算法产业落地应用。</li><li><strong>PaddleSeg</strong>：飞桨图像分割套件PaddleSeg，提供语义分割、交互式分割、全景分割、Matting四大图像分割能力，涵盖30+主流分割网络，80+高质量预训练模型。通过模块化的设计，提供了配置化驱动和API调用等两种应用方式，帮助开发者更便捷地完成从训练到部署的全流程图像分割应用，被广泛应用在自动驾驶、遥感、医疗、质检、巡检、互联网娱乐等行业。</li><li><strong>PaddleOCR：</strong> 飞桨文字识别开发套件，旨在打造一套丰富、领先且实用的OCR工具库，开源了基于PP-OCRv2的实用超轻量中英文OCR模型、通用中英文OCR模型，以及德法日韩等80多种多语言OCR模型，并提供上述模型训练方法和多种预测部署方式。同时开源文本风格数据合成工具Style-Text和半自动文本图像标注工具PPOCRLabel，目前已经成为全球知名的OCR开源项目。</li><li><strong>PaddleGAN</strong>：飞桨生成对抗网络开发套件，提供图像生成、风格迁移、超分辨率、影像上色、人脸属性编辑、人脸融合、动作迁移等前沿算法，其模块化设计，便于开发者进行二次研发，同时提供30+预训练模型，助力开发者快速开发丰富的应用。</li><li><strong>PaddleVideo</strong>：飞桨视频模型开发套件，具有高指标的模型算法、全流程可部署、更快训练速度和丰富的应用案例、保姆级教程并在体育、安防、互联网、媒体等行业有广泛应用，如：足球/蓝球动作检测、乒乓球动作识别、花样滑冰动作识别、知识增强的大规模视频分类打标签、智慧安防、内容分析等产业实践案例。</li><li><strong>ERNIEKit</strong>：飞桨语义理解套件，基于持续学习的知识增强语义理解框架实现，内置业界领先的系列ERNE预训练模型，该套件全面升级飞桨框架v2.2，同时支持动态图和静态图，兼顾了开发的便利性与部署的高性能需求。同时还能够支持各类NLP算法任务Fine-tuning,包含保证极速推理的Fast-inference API，灵活部署的ERNIE Service和轻量化解决方案ERNIE Slim，训练过程所见即所得，支持动态debug同时方便二次开发。</li><li><strong>PLSC</strong>：飞桨海量类别分类套件，为用户提供了大规模分类任务从训练到部署的全流程解决方案。提供简洁易用的高层API，通过数行代码即可实现千万类别分类模型的训练，并提供快速部署模型的能力。</li><li><strong>ElasticCTR</strong>：飞桨个性化推荐开发套件，可以实现分布式训练CTR预估任务和基于PaddleServing的在线个性化推荐服务。PaddleServing服务化部署框架具有良好的易用性、灵活性和高性能，可以提供端到端的CTR训练和部署解决方案。ElasticCTR具备产业实践基础、弹性调度能力、高性能和工业级部署等特点。</li><li><strong>Parakeet</strong>：飞桨语音合成套件，提供了灵活、高效、先进的文本到语音合成工具，帮助开发者更便捷高效地完成语音合成模型的开发和应用。</li><li><strong>PGL</strong>：飞桨图学习框架，业界首个提出通用消息并行传递机制，支持万亿级巨图的工业级图学习框架。PGL 原生支持异构图，支持分布式图存储及分布式学习算法，支持 GNNAutoScale实现单卡深度图卷积，覆盖 30+ 图学习模型，并内置 KDDCup 2021 PGL 冠军算法。内置图推荐算法套件 Graph4Rec 以及高效知识表示套件 Graph4KG。历经大量真实工业应用验证，能够灵活、高效地搭建前沿的大规模图学习算法。</li><li><strong>PARL</strong>：飞桨深度强化学习框架，夺得NeurIPS强化学习挑战赛三连冠。具有高灵活性、可扩展性和高性能的特点，可支持实现数千台CPU和GPU的高性能并行，实现了数十种主流强化学习算法的示例，覆盖了从单智能体到多智能体，离散决策到连续控制，离线学习到在线学习等多样化的强化学习支持。此外，飞桨还发布了业界首个通用元智能体训练环境MetaGym，提升算法在不同配置智能体和多种环境中的适应能力，目前包含四轴飞行器、电梯调度、四足机器狗、3D迷宫等多个仿真训练环境。</li><li><strong>Paddle Quantum</strong>：量桨，基于飞桨的量子机器学习工具集，提供组合优化、量子化学等前沿功能，常用量子电路模型，以及丰富的量子机器学习案例，帮助开发者便捷地搭建量子神经网络，开发量子人工智能应用。</li><li><strong>PaddleHelix</strong>：飞桨螺旋桨生物计算平台，面向新药研发、疫苗设计、精准医疗等场景提供AI能力。在新药研发上，提供基于大规模数据预训练的分子表征和蛋白表征模型，助力分子生成、药物筛选、化合物合成等任务，同时提供从分子生成到药物筛选到全流程pipeline。在疫苗设计上，Linear系列算法相比传统方法在RNA折叠上提升了几百上干倍的效率，在mRNA序列设计上其结构紧密性、稳定性、细胞内蛋白表达水平以及动物免疫原性方面超过标准算法设计的基准序列。在精准医疗上,PaddleHelix提供了利用组学信息精准定位药物，进行双药联用提升治愈率的高性能模型。</li></ul><p>开发套件中的大量模型，既可以通过调整配置文件直接使用的模式，也可以定位到模型的源代码文件进行二次研发。</p><blockquote><p>比较几种模型工具，PaddleHub的使用最为简易，二次研发模型源代码的灵活性最好。读者可以参考“使用PaddleHub-&gt;基于配置文件使用各领域的开发套件-&gt;二次研发原始模型代码”的顺序来使用飞桨产业级模型库，在此基础上根据业务需求进行优化，即可达到事半功倍的效果。</p></blockquote><h1 id="深度学习基础"><a href="#深度学习基础" class="headerlink" title="深度学习基础"></a>深度学习基础</h1><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li><p>模型假设</p></li><li><p>优化目标</p></li><li><p>寻解算法</p><ul><li><p>公式法：</p></li><li><p>梯度下降法:  </p><ol><li><p>方向</p></li><li><p>步长</p></li><li><p>特征缩放</p></li><li><p>梯度决定步长   </p></li></ol></li></ul></li></ol><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220912142745507.png" alt="image-20220912142745507"></p><p>激活函数(sigmoid)：</p><p>$$<br>y=\frac{1}{1+e^{-x}}<br>$$</p><p>激活函数(RELU):</p><p>$$<br>y=<br>\begin{cases}<br>0 &amp; x&lt;0\<br>kx &amp; x&gt;=0<br>\end{cases}<br>$$<br><strong>卷积核</strong>就是<strong>提取的特征</strong>，训练过程中通过<strong>反向传播</strong>不断<strong>改变卷积核</strong>，最终得到的卷积核就是识别目标的特征。</p><p>卷积核与输入的卷积结果为特征层</p><p>优化器，学习率，学习策略，模型，预处理方法</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190129721.png" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190439588.png" style="zoom: 50%;" /><h2 id="常用的库"><a href="#常用的库" class="headerlink" title="常用的库"></a>常用的库</h2><ol><li><p><strong>numpy</strong>是Python科学计算库的基础。包含了强大的N维数组对象和向量运算。</p></li><li><p><strong>pandas</strong>是建立在numpy基础上的高效数据分析处理库，是Python的重要数据分析库。</p></li><li><p><strong>Matplotlib</strong>是一个主要用于绘制二维图形的Python库。用途：绘图、可视化</p></li><li><p><strong>PIL</strong>库是一个具有强大图像处理能力的第三方库。用途：图像处理</p></li></ol><hr><h3 id="Numpy库"><a href="#Numpy库" class="headerlink" title="Numpy库"></a>Numpy库</h3><ul><li>可以使用array函数从常规Python<strong>列表或元组</strong>中创建数组。得到的数组的类型是从Python列表中元素的类型推导出来的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment">#将列表转换为二维数组</span><br>array = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>                 [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(array)<br><span class="hljs-comment">#将元组转换为二维数组</span><br>array = np.array(((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<br>                 (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)))<br><span class="hljs-built_in">print</span>(array)<br><span class="hljs-comment">#将列表或元组转为一维数组</span><br>a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]) <br>b = np.array((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a,b)<br></code></pre></td></tr></table></figure><h4 id="1-常用函数"><a href="#1-常用函数" class="headerlink" title="1.常用函数"></a>1.常用函数</h4><ul><li><p>zeros():可以创建指定长度或者形状的全0数组</p></li><li><p>ones():可以创建指定长度或者形状的全1数组</p></li><li><p>empty():创建一个数组，其初始内容是随机的,取决于内存的状态</p></li><li><p>arange():创建一个指定处末位置和步长的数字数组</p></li><li><p>random.random((m,n))：生成0~1之间的m行n列的数组</p></li><li><p>random.randint(a, b, (m,n )):生成a~b之间左开右闭区间m行n列的随机整数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">zeroarray = np.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)<br><span class="hljs-built_in">print</span>(zeroarray)<br>onearray = np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)<br><span class="hljs-built_in">print</span>(onearray)<br>emptyarray = np.empty((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(emptyarray)<br>array = np.arange( <span class="hljs-number">10</span>, <span class="hljs-number">31</span>,<span class="hljs-number">5</span> )<br><span class="hljs-built_in">print</span>(array)<br>randarray = np.random.random((m,n))<br>randint = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, (<span class="hljs-number">1</span>, )).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>输出数组的一些信息，如维度、形状、元素个数、元素类型等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">array = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]])<br><span class="hljs-built_in">print</span>(array)<br><span class="hljs-comment">#数组维度</span><br><span class="hljs-built_in">print</span>(array.ndim)<br><span class="hljs-comment">#数组形状</span><br><span class="hljs-built_in">print</span>(array.shape)<br><span class="hljs-comment">#数组元素个数</span><br><span class="hljs-built_in">print</span>(array.size)<br><span class="hljs-comment">#数组元素类型</span><br><span class="hljs-built_in">print</span>(array.dtype)<br></code></pre></td></tr></table></figure><ul><li>reshape([m,n])重新定义数字的形状为m行n列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">array1 = np.arange(<span class="hljs-number">6</span>).reshape([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<span class="hljs-comment">#重塑为2行3列</span><br><span class="hljs-built_in">print</span>(array1)<br><br><br>array2 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]],dtype=np.int64).reshape([<span class="hljs-number">3</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">#重塑为3行2列</span><br><span class="hljs-built_in">print</span>(array2)<br><br></code></pre></td></tr></table></figure><h4 id="2-数组计算"><a href="#2-数组计算" class="headerlink" title="2.数组计算"></a>2.数组计算</h4><p><strong>注:大小相等的数组之间的任何算术运算都会将运算应用到元素级。同样，数组与标量的算术运算也会将那个标量值传播到各个元素.</strong></p><ol><li><p>矩阵基础运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br>arr2 = np.ones([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],dtype=np.int64)<br><br><span class="hljs-built_in">print</span>(arr1 + arr2)<br><span class="hljs-built_in">print</span>(arr1 - arr2)<br><span class="hljs-built_in">print</span>(arr1 * arr2)<br><span class="hljs-built_in">print</span>(arr1 / arr2)<br><span class="hljs-built_in">print</span>(arr1 ** <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li><p>矩阵乘法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br>arr4 = np.ones([<span class="hljs-number">3</span>,<span class="hljs-number">2</span>],dtype=np.int64)<br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr4)<br><span class="hljs-built_in">print</span>(np.dot(arr3,arr4))<br></code></pre></td></tr></table></figure></li><li><p>矩阵其他运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>(arr3,axis=<span class="hljs-number">1</span>)) <span class="hljs-comment">#axis=1,每一行求和 axie=0,每一列求和</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">max</span>(arr3))<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">min</span>(arr3))<br><span class="hljs-built_in">print</span>(np.mean(arr3))<br><span class="hljs-built_in">print</span>(np.argmax(arr3),axis=<span class="hljs-number">0</span>/<span class="hljs-number">1</span>)<span class="hljs-comment">#axis=1,每一行求最大值的索引 axie=0,每一列求最大值索引</span><br><span class="hljs-built_in">print</span>(np.argmin(arr3),axis=<span class="hljs-number">0</span>/<span class="hljs-number">1</span>)<span class="hljs-comment">#axis=1,每一行求最小值的索引 axie=0,每一列求最小值索引</span><br><span class="hljs-built_in">print</span>(arr3.transpose())<span class="hljs-comment">#求数组的转置矩阵</span><br><span class="hljs-built_in">print</span>(arr3.flatten())<span class="hljs-comment">#将数组降为一维</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="3-数组的索引与切片"><a href="#3-数组的索引与切片" class="headerlink" title="3.数组的索引与切片"></a>3.数组的索引与切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">arr5 = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>).reshape([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(arr5)<br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>])<span class="hljs-comment">#索引第一行</span><br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<span class="hljs-comment">#索引第一行第二列</span><br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">#索引第一行第二列</span><br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>,:])<span class="hljs-comment">#切片第一行</span><br><span class="hljs-built_in">print</span>(arr5[:,<span class="hljs-number">1</span>])<span class="hljs-comment">#切片第一列</span><br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<span class="hljs-comment">#切片第一行第零列开始向后的两个元素，返回一个列表</span><br></code></pre></td></tr></table></figure><hr><h4 id="4-线性代数常用库函数"><a href="#4-线性代数常用库函数" class="headerlink" title="4.线性代数常用库函数"></a>4.线性代数常用库函数</h4><center><img src=https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193010646.png></center><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 矩阵相乘</span><br>a = np.arange(<span class="hljs-number">12</span>)<br>b = a.reshape([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>c = a.reshape([<span class="hljs-number">4</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment"># 矩阵b的第二维大小，必须等于矩阵c的第一维大小</span><br>d = b.dot(c) <span class="hljs-comment"># 等价于 np.dot(b, c)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d))<br><br><span class="hljs-comment"># numpy.linalg  中有一组标准的矩阵分解运算以及诸如求逆和行列式之类的东西</span><br><span class="hljs-comment"># np.linalg.diag 以一维数组的形式返回方阵的对角线（或非对角线）元素，</span><br><span class="hljs-comment"># 或将一维数组转换为方阵（非对角线元素为0）</span><br>e = np.diag(d)<br>f = np.diag(e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(f))<br><br><span class="hljs-comment"># trace, 计算对角线元素的和</span><br>g = np.trace(d)<br>g<br><br><span class="hljs-comment"># det，计算行列式</span><br>h = np.linalg.det(d)<br>h<br><br><span class="hljs-comment"># eig，计算特征值和特征向量</span><br>i = np.linalg.eig(d)<br>i<br><br><span class="hljs-comment"># inv，计算方阵的逆</span><br>tmp = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>j = np.linalg.inv(tmp)<br>j<br></code></pre></td></tr></table></figure><h4 id="5-文件写入和读取"><a href="#5-文件写入和读取" class="headerlink" title="5.文件写入和读取"></a>5.文件写入和读取</h4><ol><li>tofile()和fromfile()</li></ol><ul><li><p>tofile()将数组中的数据以二进制格式写进文件</p></li><li><p>tofile()输出的数据不保存数组形状和元素类型等信息</p></li><li><p>fromfile()函数读回数据时需要用户指定元素类型，并对数组的形状进行适当的修改</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 使用np.fromfile从文本文件&#x27;housing.data&#x27;读入数据</span><br><span class="hljs-comment"># 这里要设置参数sep = &#x27; &#x27;，表示使用空白字符来分隔数据</span><br><span class="hljs-comment"># 空格或者回车都属于空白字符，读入的数据被转化成1维数组</span><br>d = np.fromfile(<span class="hljs-string">&#x27;./work/housing.data&#x27;</span>, sep = <span class="hljs-string">&#x27; &#x27;</span>)<br>d<br></code></pre></td></tr></table></figure><ol start="2"><li>save() 和 load(),savez()</li></ol><p><u>NumPy专用的二进制格式保存数据，它们会自动处理元素类型和形状等信息</u></p><ul><li><p>如果想将多个数组保存到一个文件中，可以使用savez()，savez()的第一个参数是文件名，其后的参数都是需要保存的数组，也可以使用关键字参数为数组起名非关键字参数传递的数组会自动起名为arr_0、arr_1、…。savez()输出的是一个扩展名为npz的压缩文件，其中每个文件都是一个save()保存的npy文件，文件名和数组名相同</p></li><li><p>load()自动识别npz文件，并且返回一个类似于字典的对象，可以通过数组名作为键获取数组的内容</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 产生随机数组a</span><br>a = np.random.rand(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>np.save(<span class="hljs-string">&#x27;a.npy&#x27;</span>, a)<br><br><span class="hljs-comment"># 从磁盘文件&#x27;a.npy&#x27;读入数组</span><br>b = np.load(<span class="hljs-string">&#x27;a.npy&#x27;</span>)<br><br><span class="hljs-comment"># 检查a和b的数值是否一样</span><br>check = (a == b).<span class="hljs-built_in">all</span>()<br>check<br></code></pre></td></tr></table></figure><h4 id="6-统计函数"><a href="#6-统计函数" class="headerlink" title="6.统计函数"></a>6.统计函数</h4><p>可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计计算。主要包括如下统计方法：</p><ul><li><code>mean</code>：计算算术平均数，零长度数组的mean为NaN。</li><li><code>std</code>和<code>var</code>：计算标准差和方差，自由度可调（默认为n）。</li><li><code>sum</code> ：对数组中全部或某轴向的元素求和，零长度数组的sum为0。</li><li><code>max</code>和<code>min</code>：计算最大值和最小值。</li><li><code>argmin</code>和<code>argmax</code>：分别为最大和最小元素的索引。</li><li><code>cumsum</code>：计算所有元素的累加。</li><li><code>cumprod</code>：计算所有元素的累积。</li></ul><hr><p><strong>说明：</strong></p><p>sum、mean以及标准差std等聚合计算既可以当做数组的实例方法调用，也可以当做NumPy函数使用。</p><hr><h4 id="7-随机数np-random"><a href="#7-随机数np-random" class="headerlink" title="7.随机数np.random"></a>7.随机数np.random</h4><p>主要介绍创建ndarray随机数组以及随机打乱顺序、随机选取元素等相关操作的方法。</p><h5 id="7-1-创建随机ndarray数组"><a href="#7-1-创建随机ndarray数组" class="headerlink" title="7.1 创建随机ndarray数组"></a>7.1 创建随机ndarray数组</h5><p>创建随机ndarray数组主要包含设置随机种子、均匀分布和正态分布三部分内容，具体代码如下所示。</p><ul><li><p><strong>设置随机数种子</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 可以多次运行，观察程序输出结果是否一致</span><br><span class="hljs-comment"># 如果不设置随机数种子，观察多次运行输出结果是否一致</span><br>np.random.seed(<span class="hljs-number">10</span>)<br>a = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>a<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>均匀分布</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成均匀分布随机数，随机数取值范围在[0, 1)之间</span><br>a = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>a<br><span class="hljs-comment"># 生成均匀分布随机数，指定随机数取值范围和数组形状</span><br>a = np.random.uniform(low = -<span class="hljs-number">1.0</span>, high = <span class="hljs-number">1.0</span>, size=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))<br>a<br></code></pre></td></tr></table></figure></li></ul><ul><li><strong>正态分布</strong></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 生成标准正态分布随机数</span><br>a = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>a<br><span class="hljs-comment"># 生成正态分布随机数，指定均值loc和方差scale</span><br>a = np.random.normal(loc = <span class="hljs-number">1.0</span>, scale = <span class="hljs-number">1.0</span>, size = (<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br>a<br></code></pre></td></tr></table></figure><h5 id="7-2-随机打乱ndarray数组顺序"><a href="#7-2-随机打乱ndarray数组顺序" class="headerlink" title="7.2 随机打乱ndarray数组顺序"></a>7.2 随机打乱ndarray数组顺序</h5><ul><li>随机打乱1维ndarray数组顺序，发现所有元素位置都被打乱了，代码如下所示。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 生成一维数组</span><br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before random shuffle: &#x27;</span>, a)<br><span class="hljs-comment"># 打乱一维数组顺序</span><br>np.random.shuffle(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after random shuffle: &#x27;</span>, a)<br><span class="hljs-comment"># 生成一维数组</span><br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>)<br><span class="hljs-comment"># 将一维数组转化成2维数组</span><br>a = a.reshape(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before random shuffle: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-comment"># 打乱一维数组顺序</span><br>np.random.shuffle(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after random shuffle: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a))<br></code></pre></td></tr></table></figure><h5 id="7-3-随机选取元素"><a href="#7-3-随机选取元素" class="headerlink" title="7.3 随机选取元素"></a>7.3 随机选取元素</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 随机选取部分元素</span><br>a = np.arange(<span class="hljs-number">30</span>)<br>b = np.random.choice(a, size=<span class="hljs-number">5</span>)<br>b<br></code></pre></td></tr></table></figure><h4 id="8-NumPy应用举例"><a href="#8-NumPy应用举例" class="headerlink" title="8. NumPy应用举例"></a>8. NumPy应用举例</h4><h5 id="5-1-计算激活函数Sigmoid和ReLU"><a href="#5-1-计算激活函数Sigmoid和ReLU" class="headerlink" title="5.1 计算激活函数Sigmoid和ReLU"></a>5.1 计算激活函数Sigmoid和ReLU</h5><p>使用ndarray数组可以很方便的构建数学函数，并利用其底层的矢量计算能力快速实现计算。下面以神经网络中比较常用激活函数Sigmoid和ReLU为例，介绍代码实现过程。</p><ul><li><strong>计算Sigmoid激活函数</strong></li></ul><p>$$<br>y = \frac{1}{1 + e^{-x}}<br>$$</p><ul><li><strong>计算ReLU激活函数</strong></li></ul><p>$$<br>y=\left{<br>\begin{aligned}<br>0 &amp; , &amp; (x&lt;0) \<br>x &amp; , &amp; (x\ge 0)<br>\end{aligned}<br>\right.<br>$$</p><p>使用Numpy计算激活函数Sigmoid和ReLU的值，使用matplotlib画出图形，代码如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># ReLU和Sigmoid激活函数示意图</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>%matplotlib inline<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib.patches <span class="hljs-keyword">as</span> patches<br><br><span class="hljs-comment">#设置图片大小</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-comment"># x是1维数组，数组大小是从-10. 到10.的实数，每隔0.1取一个点</span><br>x = np.arange(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0.1</span>)<br><span class="hljs-comment"># 计算 Sigmoid函数</span><br>s = <span class="hljs-number">1.0</span> / (<span class="hljs-number">1</span> + np.exp(- x))<br><br><span class="hljs-comment"># 计算ReLU函数</span><br>y = np.clip(x, a_min = <span class="hljs-number">0.</span>, a_max = <span class="hljs-literal">None</span>)<br><br><span class="hljs-comment">#########################################################</span><br><span class="hljs-comment"># 以下部分为画图程序</span><br><br><span class="hljs-comment"># 设置两个子图窗口，将Sigmoid的函数图像画在左边</span><br>f = plt.subplot(<span class="hljs-number">121</span>)<br><span class="hljs-comment"># 画出函数曲线</span><br>plt.plot(x, s, color=<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-comment"># 添加文字说明</span><br>plt.text(-<span class="hljs-number">5.</span>, <span class="hljs-number">0.9</span>, <span class="hljs-string">r&#x27;$y=\sigma(x)$&#x27;</span>, fontsize=<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 设置坐标轴格式</span><br>currentAxis=plt.gca()<br>currentAxis.xaxis.set_label_text(<span class="hljs-string">&#x27;x&#x27;</span>, fontsize=<span class="hljs-number">15</span>)<br>currentAxis.yaxis.set_label_text(<span class="hljs-string">&#x27;y&#x27;</span>, fontsize=<span class="hljs-number">15</span>)<br><br><span class="hljs-comment"># 将ReLU的函数图像画在右边</span><br>f = plt.subplot(<span class="hljs-number">122</span>)<br><span class="hljs-comment"># 画出函数曲线</span><br>plt.plot(x, y, color=<span class="hljs-string">&#x27;g&#x27;</span>)<br><span class="hljs-comment"># 添加文字说明</span><br>plt.text(-<span class="hljs-number">3.0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">r&#x27;$y=ReLU(x)$&#x27;</span>, fontsize=<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 设置坐标轴格式</span><br>currentAxis=plt.gca()<br>currentAxis.xaxis.set_label_text(<span class="hljs-string">&#x27;x&#x27;</span>, fontsize=<span class="hljs-number">15</span>)<br>currentAxis.yaxis.set_label_text(<span class="hljs-string">&#x27;y&#x27;</span>, fontsize=<span class="hljs-number">15</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h5 id="5-2-图像翻转和裁剪"><a href="#5-2-图像翻转和裁剪" class="headerlink" title="5.2 图像翻转和裁剪"></a>5.2 图像翻转和裁剪</h5><p>图像是由像素点构成的矩阵，其数值可以用ndarray来表示。将上述介绍的操作用在图像数据对应的ndarray上，可以很轻松的实现图片的翻转、裁剪和亮度调整，具体代码和效果如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 导入需要的包</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 读入图片</span><br>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./work/images/000000001584.jpg&#x27;</span>)<br>image = np.array(image)<br><span class="hljs-comment"># 查看数据形状，其形状是[H, W, 3]，</span><br><span class="hljs-comment"># 其中H代表高度， W是宽度，3代表RGB三个通道</span><br>image.shape<br><span class="hljs-comment"># 原始图片</span><br>plt.imshow(image)<br><span class="hljs-comment"># 垂直方向翻转</span><br><span class="hljs-comment"># 这里使用数组切片的方式来完成，</span><br><span class="hljs-comment"># 相当于将图片最后一行挪到第一行，</span><br><span class="hljs-comment"># 倒数第二行挪到第二行，..., </span><br><span class="hljs-comment"># 第一行挪到倒数第一行</span><br><span class="hljs-comment"># 对于行指标，使用::-1来表示切片，</span><br><span class="hljs-comment"># 负数步长表示以最后一个元素为起点，向左走寻找下一个点</span><br><span class="hljs-comment"># 对于列指标和RGB通道，仅使用:表示该维度不改变</span><br>image2 = image[::-<span class="hljs-number">1</span>, :, :]<br>plt.imshow(image2)<br><span class="hljs-comment"># 水平方向翻转</span><br>image3 = image[:, ::-<span class="hljs-number">1</span>, :]<br>plt.imshow(image3)<br><span class="hljs-comment"># 保存图片</span><br>im3 = Image.fromarray(image3)<br>im3.save(<span class="hljs-string">&#x27;im3.jpg&#x27;</span>)<br><span class="hljs-comment">#  高度方向裁剪</span><br>H, W = image.shape[<span class="hljs-number">0</span>], image.shape[<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 注意此处用整除，H_start必须为整数</span><br>H1 = H // <span class="hljs-number">2</span> <br>H2 = H<br>image4 = image[H1:H2, :, :]<br>plt.imshow(image4)<br><span class="hljs-comment">#  宽度方向裁剪</span><br>W1 = W//<span class="hljs-number">6</span><br>W2 = W//<span class="hljs-number">3</span> * <span class="hljs-number">2</span><br>image5 = image[:, W1:W2, :]<br>plt.imshow(image5)<br><span class="hljs-comment"># 两个方向同时裁剪</span><br>image5 = image[H1:H2, \<br>               W1:W2, :]<br>plt.imshow(image5)<br><span class="hljs-comment"># 调整亮度</span><br>image6 = image * <span class="hljs-number">0.5</span><br>plt.imshow(image6.astype(<span class="hljs-string">&#x27;uint8&#x27;</span>))<br><span class="hljs-comment"># 调整亮度</span><br>image7 = image * <span class="hljs-number">2.0</span><br><span class="hljs-comment"># 由于图片的RGB像素值必须在0-255之间，</span><br><span class="hljs-comment"># 此处使用np.clip进行数值裁剪</span><br>image7 = np.clip(image7, \<br>        a_min=<span class="hljs-literal">None</span>, a_max=<span class="hljs-number">255.</span>)<br>plt.imshow(image7.astype(<span class="hljs-string">&#x27;uint8&#x27;</span>))<br><span class="hljs-comment">#高度方向每隔一行取像素点</span><br>image8 = image[::<span class="hljs-number">2</span>, :, :]<br>plt.imshow(image8)<br><span class="hljs-comment">#宽度方向每隔一列取像素点</span><br>image9 = image[:, ::<span class="hljs-number">2</span>, :]<br>plt.imshow(image9)<br><span class="hljs-comment">#间隔行列采样，图像尺寸会减半，清晰度变差</span><br>image10 = image[::<span class="hljs-number">2</span>, ::<span class="hljs-number">2</span>, :]<br>plt.imshow(image10)<br>image10.shape<br></code></pre></td></tr></table></figure><h4 id="9-Paddle-Tensor"><a href="#9-Paddle-Tensor" class="headerlink" title="9. Paddle.Tensor"></a>9. Paddle.Tensor</h4><p>飞桨使用Tensor数据结构来表示数据，在神经网络中传递的数据均为Tensor。Tensor可以将其理解为多维数组，其可以具有任意多的维度，不同Tensor可以有不同的数据类型 (dtype) 和形状 (shape)。同一Tensor的中所有元素的数据类型均相同。如果你对 Numpy 熟悉，Tensor是类似于Numpy数组（array）的概念。</p><p>飞桨的Tensor高度兼容Numpy数组（array），在基础数据结构和方法上，增加了很多适用于深度学习任务的参数和方法，如：反向计算梯度，更灵活的指定运行硬件等。</p><p>如下述代码声明了两个Tensor类型的向量$x$和$y$，指定CPU为计算运行硬件，要自动反向求导。两个向量除了可以与Numpy类似的做相乘的操作之外，还可以直接获取到每个变量的导数值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br>x = paddle.to_tensor([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>], dtype=<span class="hljs-string">&#x27;float32&#x27;</span>, place=paddle.CPUPlace(), stop_gradient=<span class="hljs-literal">False</span>)<br>y = paddle.to_tensor([<span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>], dtype=<span class="hljs-string">&#x27;float32&#x27;</span>, place=paddle.CPUPlace(), stop_gradient=<span class="hljs-literal">False</span>)<br>z = x * y<br>z.backward()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tensor&#x27;s grad is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(x.grad))<br></code></pre></td></tr></table></figure><blockquote><p>此外，飞桨Tensor还可以与Numpy的数组方便的互转，具体方法如下。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>tensor_to_convert = paddle.to_tensor([<span class="hljs-number">1.</span>,<span class="hljs-number">2.</span>])<br><br><span class="hljs-comment">#通过 Tensor.numpy() 方法，将 Tensor 转化为 Numpy数组</span><br>tensor_to_convert.numpy()<br><br><span class="hljs-comment">#通过paddle.to_tensor() 方法，将 Numpy数组 转化为 Tensor</span><br>tensor_temp = paddle.to_tensor(np.array([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>]))<br></code></pre></td></tr></table></figure><h5 id="推荐优先使用Paddle-Tensor的场景"><a href="#推荐优先使用Paddle-Tensor的场景" class="headerlink" title="推荐优先使用Paddle.Tensor的场景"></a>推荐优先使用Paddle.Tensor的场景</h5><p>虽然Paddle的Tensor可以与Numpy的数组方便的互相转换，但在实际中两者频繁转换会性能消耗。飞桨的Tensor支持的操作已经基本覆盖Numpy并有所加强，所以推荐用户在程序中优先使用飞桨的Tensor完成各种数据处理和组网操作。具体分为如下两种场景：</p><ul><li>场景一：在组网程序中，对网络中向量的处理，务必使用Tensor，而不建议转成Numpy的数组。如果在组网过程中转成Numpy的数组，并使用Numpy的函数会拖慢整体性能；</li><li>场景二：在数据处理和模型后处理等场景，建议优先使用Tensor，主要是飞桨为AI硬件做了大量的适配和性能优化工作，部分情况下会获得更好的使用体验和性能。</li></ul><h3 id="Pandas库"><a href="#Pandas库" class="headerlink" title="Pandas库"></a>Pandas库</h3><p>注：提供高性能易用数据类型和分析工具；</p><p>​        pandas基于numpy实现，常与numpy和matplotlib一同使用。</p><p><strong>Pandas核心数据结构：</strong></p><center><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/a8c80653f39b479dab9f6867a638b64c405e79d6540c4307a22f43c4b0e228bc" alt="img" style="zoom: 67%;" /></center><center><center><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/c8f06f423acc488fb391bca5dcf8f2b02d7444ef526f41599b6b430ae24659c1" alt="img" style="zoom: 50%;" /></center><h4 id="1-Series"><a href="#1-Series" class="headerlink" title="1. Series"></a>1. Series</h4><p>注：Series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类    型）以及一组与之相关的数据标签（即索引）组成.可理解为带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>s = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>])<span class="hljs-comment">#将列表转为series对象</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>注：Series中可以使用index设置索引列表，与字典不同的是，Series允许索引重复。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#与字典不同的是：Series允许索引重复</span><br>s = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>],index=[<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">100</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>])<br><span class="hljs-built_in">print</span>(s)<br>d = &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>pd.Series(d)<br>d = &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>&#125;<span class="hljs-comment">#将字典实例化</span><br>pd.Series(d)<br><span class="hljs-built_in">print</span>(s.values)<span class="hljs-comment">#取键值</span><br><span class="hljs-built_in">print</span>(s.index)<span class="hljs-comment">#取键</span><br><span class="hljs-comment">#与普通numpy数组相比，可以通过索引的方式选取Series中的单个或一组值</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">100</span>])<br><span class="hljs-built_in">print</span>(s[[<span class="hljs-number">400</span>, <span class="hljs-number">500</span>]])<br><span class="hljs-comment">#对应元素求和</span><br><span class="hljs-built_in">print</span>(s+s)<br><span class="hljs-comment">#对应元素乘</span><br><span class="hljs-built_in">print</span>(s*<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>注：Series中最重要的一个功能是它会在算术运算中基于标签自动对齐不同索引的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">obj1 = pd.Series(&#123;<span class="hljs-string">&quot;Ohio&quot;</span>: <span class="hljs-number">35000</span>, <span class="hljs-string">&quot;Oregon&quot;</span>: <span class="hljs-number">16000</span>, <span class="hljs-string">&quot;Texas&quot;</span>: <span class="hljs-number">71000</span>, <span class="hljs-string">&quot;Utah&quot;</span>: <span class="hljs-number">5000</span>&#125;)<br><span class="hljs-built_in">print</span>(obj1)<br>obj2 = pd.Series(&#123;<span class="hljs-string">&quot;California&quot;</span>: np.nan, <span class="hljs-string">&quot;Ohio&quot;</span>: <span class="hljs-number">35000</span>, <span class="hljs-string">&quot;Oregon&quot;</span>: <span class="hljs-number">16000</span>, <span class="hljs-string">&quot;Texas&quot;</span>: <span class="hljs-number">71000</span>&#125;)<br><span class="hljs-built_in">print</span>(obj2)<br><span class="hljs-built_in">print</span>(obj1 + obj2)<br><br><span class="hljs-comment">#可以切片，基础运算时没有匹配的键值会被设为NaN</span><br>s = pd.Series(np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]), index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>])<br><br><span class="hljs-built_in">print</span>(s[<span class="hljs-string">&#x27;a&#x27;</span>])<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">1</span>:])<br><br><span class="hljs-built_in">print</span>(s[:-<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">1</span>:] + s[:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h4 id="2-DataFrame"><a href="#2-DataFrame" class="headerlink" title="2. DataFrame"></a>2. DataFrame</h4><p>注：</p><ul><li>DataFrame是一个表格型的数据结构，类似于Excel或sql表</li></ul><p>它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）</p><p>DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。</p><ul><li><strong>用多维数组字典、列表字典生成 DataFrame。</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#如果指定了列顺序，则DataFrame的列就会按照指定顺序进行排列, 跟原Series一样，如果传入的列在数据中找不到，就会产生NAN值.</span><br>data = &#123;<span class="hljs-string">&#x27;state&#x27;</span>: [<span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Nevada&#x27;</span>, <span class="hljs-string">&#x27;Nevada&#x27;</span>], <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2000</span>, <span class="hljs-number">2001</span>, <span class="hljs-number">2002</span>, <span class="hljs-number">2001</span>, <span class="hljs-number">2002</span>], <span class="hljs-string">&#x27;pop&#x27;</span>: [<span class="hljs-number">1.5</span>, <span class="hljs-number">1.7</span>, <span class="hljs-number">3.6</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">2.9</span>]&#125;<br>frame = pd.DataFrame(data,columns=[<span class="hljs-string">&#x27;year&#x27;</span>, <span class="hljs-string">&#x27;state&#x27;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;debt&#x27;</span>])<br><span class="hljs-built_in">print</span>(frame)<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910232915712.png" alt="image-20220910232915712"  /><ul><li><strong>用 Series 字典或字典生成 DataFrame, 即Series可以作为DataFrame的子集。</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&#x27;one&#x27;</span>: pd.Series([<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]),<br>     <span class="hljs-string">&#x27;two&#x27;</span>: pd.Series([<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])&#125;<br><span class="hljs-built_in">print</span>(pd.DataFrame(d))<br><br><span class="hljs-comment">#通过类似字典标记的方式或属性的方式，可以将DataFrame的列获取为一个Series,返回的Series拥有原DataFrame相同的索引</span><br><span class="hljs-built_in">print</span>(frame2[<span class="hljs-string">&#x27;state&#x27;</span>])<br><br><span class="hljs-comment">#列可以通过赋值的方式进行修改,例如，给那个空的“delt”列赋上一个标量值或一组值</span><br>frame2[<span class="hljs-string">&#x27;debt&#x27;</span>] = <span class="hljs-number">16.5</span><br><span class="hljs-built_in">print</span>(frame2)<br><br><span class="hljs-comment">#新增一个Series</span><br>frame2[<span class="hljs-string">&#x27;new&#x27;</span>] = frame2[<span class="hljs-string">&#x27;debt&#x27;</span> ]* frame2[<span class="hljs-string">&#x27;pop&#x27;</span>] <br><span class="hljs-built_in">print</span>(frame2)<br><br><span class="hljs-comment">#用numpy数组赋值</span><br>frame2[<span class="hljs-string">&#x27;debt&#x27;</span>] = np.arange(<span class="hljs-number">5.</span>)<br><span class="hljs-built_in">print</span>(frame2)<br></code></pre></td></tr></table></figure><h4 id="3-索引对象常用方法"><a href="#3-索引对象常用方法" class="headerlink" title="3. 索引对象常用方法"></a>3. 索引对象常用方法</h4><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193234679.png" alt="image-20220911193234679" style="zoom:50%;" /><h4 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4.常用方法"></a>4.常用方法</h4><ul><li><p>data.<a href="https://so.csdn.net/so/search?q=shape&spm=1001.2101.3001.7020">shape</a>返回的是元组（data必须是浮点数类型）</p><ul><li><p>data.shape[0]是行数</p></li><li><p>data.shape[1]是列数</p></li></ul></li></ul><h3 id="PIL库"><a href="#PIL库" class="headerlink" title="PIL库"></a>PIL库</h3><p>注：</p><ul><li><p>PIL库是一个具有强大图像处理能力的第三方库。</p></li><li><p>在命令行下的安装方法: pip install pillow。</p></li><li><p>在使用过程中的弓|入方法: from PIL import Image。</p></li><li><p>图像的组成：由RGB三原色组成,RGB图像中，一种彩色由R、G、B三原色按照比例混合而成。0-255区分不同亮度的颜色。图像的数组表示：图像是一个由像素组成的矩阵，每个元素是一个RGB值。</p></li><li><p>Image 是 PIL 库中代表一个图像的类（对象）。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment">#显示matplotlib生成的图形</span><br>%matplotlib inline<br><br><span class="hljs-comment">#读取图片</span><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/home/aistudio/work/yushuxin.jpg&#x27;</span>) <br><br><span class="hljs-comment">#显示图片</span><br><span class="hljs-comment">#img.show() #自动调用计算机上显示图片的工具</span><br>plt.imshow(img)  <br>plt.show(img)   <br><br><span class="hljs-comment">#获得图像的模式和大小</span><br>img_mode = img.mode<br><span class="hljs-built_in">print</span>(img_mode)<br>width,height = img.size<br><span class="hljs-built_in">print</span>(width,height)<br><br><span class="hljs-comment">#将图片旋转45度</span><br>img_rotate = img.rotate(<span class="hljs-number">45</span>) <br><br><span class="hljs-comment">#左右镜像</span><br>img3_lr = img3.transpose(Image.FLIP_LEFT_RIGHT)<br><span class="hljs-comment">#上下镜像</span><br>img3_bt = img3.transpose(Image.FLIP_TOP_BOTTOM)<br><br><span class="hljs-comment">#缩放</span><br>width,height = img2.size<br>img2_resize_result = img2.resize((<span class="hljs-built_in">int</span>(width*<span class="hljs-number">0.6</span>),<span class="hljs-built_in">int</span>(height*<span class="hljs-number">0.6</span>)),Image.ANTIALIAS)<br><br><span class="hljs-comment">#剪切 crop()四个参数分别是：(左上角点的x坐标，左上角点的y坐标，右下角点的x坐标，右下角点的y坐标)</span><br>img1_crop_result = img1.crop((<span class="hljs-number">126</span>,<span class="hljs-number">0</span>,<span class="hljs-number">381</span>,<span class="hljs-number">300</span>))<br><span class="hljs-comment">#保存图片</span><br>img1_crop_result.save(<span class="hljs-string">&#x27;path&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="Matplotlib库"><a href="#Matplotlib库" class="headerlink" title="Matplotlib库"></a>Matplotlib库</h3><p>注：</p><ul><li>Matplotlib库由各种可视化类构成，内部结构复杂。</li><li>matplotlib.pylot是绘制各类可视化图形的命令字库。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br><span class="hljs-comment">#显示matplotlib生成的图形</span><br>%matplotlib inline<br><br>x = np.linspace(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>) <span class="hljs-comment">#等差数列，从-1到1生成50个等间距的数的数组</span><br>y1 = <span class="hljs-number">2</span>*x + <span class="hljs-number">1</span><br>y2 = x**<span class="hljs-number">2</span><br><br><span class="hljs-comment">#传入x,y,通过plot()绘制出折线图 </span><br>plt.figure(figsize=(<span class="hljs-number">7</span>,<span class="hljs-number">5</span>))<span class="hljs-comment">#保持图像</span><br>plt.plot(x,y1,color=<span class="hljs-string">&#x27;red&#x27;</span>,linewidth=<span class="hljs-number">1</span>)<span class="hljs-comment">#连续图</span><br>plt.plot(x,y2,color=<span class="hljs-string">&#x27;blue&#x27;</span>,linewidth=<span class="hljs-number">5</span>)<br>plt.legend(handles=[l1,l2],labels=[<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-string">&#x27;bb&#x27;</span>],loc=<span class="hljs-string">&#x27;best&#x27;</span>)<span class="hljs-comment">#图例</span><br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>,fontsize=<span class="hljs-number">20</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>,fontsize=<span class="hljs-number">20</span>)<br>plt.xlim((<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))  <span class="hljs-comment">#x轴只截取一段进行显示</span><br>plt.ylim((<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))  <span class="hljs-comment">#y轴只截取一段进行显示</span><br>plt.show()<span class="hljs-comment">#显示图形</span><br><br><span class="hljs-comment">#绘制离散图</span><br>dots1 =np.random.rand(<span class="hljs-number">50</span>)<br>dots2 =np.random.rand(<span class="hljs-number">50</span>)<br>plt.scatter(dots1,dots2,c=<span class="hljs-string">&#x27;red&#x27;</span>,alpha=<span class="hljs-number">0.5</span>) <span class="hljs-comment">#c表示颜色，alpha表示透明度</span><br>plt.show()<br><br><span class="hljs-comment">#绘制直方图（柱状图）</span><br>x = np.arange(<span class="hljs-number">10</span>)<br>y = <span class="hljs-number">2</span>**x+<span class="hljs-number">10</span><br>plt.bar(x,y,facecolor=<span class="hljs-string">&#x27;#9999ff&#x27;</span>,edgecolor=<span class="hljs-string">&#x27;white&#x27;</span>)<br><span class="hljs-keyword">for</span> ax,ay <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x,y):<span class="hljs-comment">#顶部居中标注纵坐标</span><br>    plt.text(ax,ay,<span class="hljs-string">&#x27;%.1f&#x27;</span> % ay,ha=<span class="hljs-string">&#x27;center&#x27;</span>,va=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="基础图标函数"><a href="#基础图标函数" class="headerlink" title="基础图标函数"></a>基础图标函数</h4><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193426778.png" alt="image-20220911193426778" style="zoom:67%;" /><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png" alt="image-20220911193512661"></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png"></p><hr><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><p>简介：深层神经网络一般都需要大量的训练数据才能获得比较理想的结果。在数据量有限的情况下，可以通过数据增强( Data Augmentation )来增加训练样本的多样性，提高模型鲁棒性。<br>目的：</p><ul><li><p>增加数据量</p></li><li><p>采集更多的图像特征</p></li><li><p>使网络可见更多的数据变化</p></li><li><p>提高模型的泛化能力</p></li></ul><p>增强方式：</p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911194420932.png" alt="image-20220911194420932" style="zoom: 80%;" /><p>下图所示为一些基础的图像增强方法，如果我们发现数据集中的猫均是标准姿势，而真实场景中的猫时常有倾斜身姿的情况，那么在原始图片数据的基础上采用旋转的方法造一批数据加入到数据集会有助于提升模型效果。类似的，如果数据集中均是高清图片，而真实场景中经常有拍照模糊或曝光异常的情况，则采用降采样和调整饱和度的方式造一批数据，有助于提升模型的效果。<br><img src="https://ai-studio-static-online.cdn.bcebos.com/54adf1fa9d7e4dc9a6a23cdf42417fbf624a0b3406564b9990b7852ce8fac9c7"><br>基础的图像增强方法</p><p>下图展示了一些高阶的图像增强方法，裁剪和拼接分别适合于“数据集中物体完整，但实际场景中物体存在遮挡”，以及“数据集中物体背景单一，而实际场景中物体的背景多变”的两种情况。<br><img src="https://ai-studio-static-online.cdn.bcebos.com/16edd4f2b23d48ae8ba699e4cd00d65a75a43e7a8b7e4f8a98513588031f1e32"><br>高阶的数据增强方法</p><p>下图展示了专门针对文本识别的数据增强方法TIA（Text Image augmentation），对应到“数据集中字体多是平面，而真实场景中的字体往往会在曲面上扭曲的情况，比如拿着相机对一张凸凹不平摆放的纸面拍摄的文字就会存在这种情况”。<br><img src="https://ai-studio-static-online.cdn.bcebos.com/3dbcf420c25e4d62b21500fa1278bb17e1c219ebcd96457a8fc5cf10e4c4e360"><br>TIA（Text Image augmentation）：针对文本识别数据增强方法</p><p>下图展示了一种新颖的数据增强技巧，用于很多现实中的文字检测，要面临复杂多样的背景，比如店铺牌匾上的文字，周围的背景可能是非常多样的。将部分文本区域剪辑出来，随机摆放到图片的各种位置来生成新的训练数据。这样的数据会大大提高模型在复杂背景中，检测到文字内容的能力。<br><img src="https://ai-studio-static-online.cdn.bcebos.com/7dd04e92862540b390b11246b2375a828df2237b79a64aed9a698a2272fa7b46"><br>CopyPaste：一种新颖的数据增强技巧</p><h3 id="1-随机旋转"><a href="#1-随机旋转" class="headerlink" title="1. 随机旋转"></a>1. 随机旋转</h3><p>注：<strong>使用numpy+ PIL库进行图像的随机旋转</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate_image</span>(<span class="hljs-params"> img </span>): <br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    图像增强，增加随机旋转角度</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    angle = np.random.randint( -<span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br>    img = img.rotate(angle)<br>    <span class="hljs-keyword">return</span> img<br><br></code></pre></td></tr></table></figure><h3 id="2-随机亮度调整"><a href="#2-随机亮度调整" class="headerlink" title="2. 随机亮度调整"></a>2. 随机亮度调整</h3><p>注：使用numpy+ PIL库进行图像的随机亮度调整</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_brightness</span>(<span class="hljs-params">img</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    图像增强，亮度调整</span><br><span class="hljs-string">    :param img:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    prob = np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> prob &lt; train_parameters[<span class="hljs-string">&#x27;image_enhance_strategy&#x27;</span>][<span class="hljs-string">&#x27;brightness_prob&#x27;</span>]:<br>        brightness_delta = train_parameters[<span class="hljs-string">&#x27;image_enhance_strategy&#x27;</span>][<span class="hljs-string">&#x27;brightness_delta&#x27;</span>] <br>        delta = np.random.uniform(-brightness_delta, brightness_delta) + <span class="hljs-number">1</span><br>        img = ImageEnhance.Brightness(img).enhance(delta)<br>    <span class="hljs-keyword">return</span> img<br></code></pre></td></tr></table></figure><h3 id="3-训练过程可视化"><a href="#3-训练过程可视化" class="headerlink" title="3. 训练过程可视化"></a>3. 训练过程可视化</h3><p>注：使用Matplotlib库绘制深度学习训练过程中,随着数据的增加，误差与准确率的变化趋势,从而对模型效果进行评估。观察到模型的误差相对较低,而准确率较高，接下来可以使用该模型进行预测。</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911195508553.png" alt="image-20220911195508553"></p><h1 id="入门实战深度学习"><a href="#入门实战深度学习" class="headerlink" title="入门实战深度学习"></a>入门实战深度学习</h1><h2 id="1-深度学习模型的基本步骤"><a href="#1-深度学习模型的基本步骤" class="headerlink" title="1.深度学习模型的基本步骤"></a>1.深度学习模型的基本步骤</h2><p><img src="https://ai-studio-static-online.cdn.bcebos.com/9f7cc7174c6f482b9b0d3a1f9bdc1195cf9bf0bc24d140da87aceba2dde4ea5d" alt="step"></p><h2 id="2-实例一“波士顿房价预测”"><a href="#2-实例一“波士顿房价预测”" class="headerlink" title="2.实例一“波士顿房价预测”"></a>2.实例一“波士顿房价预测”</h2><h3 id="2-1-数据处理"><a href="#2-1-数据处理" class="headerlink" title="2.1 数据处理"></a>2.1 数据处理</h3><p>数据处理包含五个部分：数据导入、数据形状变换、数据集划分、数据归一化处理和封装<code>load data</code>函数。数据预处理后，才能被模型调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入需要用到的package</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># 读入训练数据</span><br>datafile = <span class="hljs-string">&#x27;./work/housing.data&#x27;</span><br>data = np.fromfile(datafile, sep=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-1-2-数据形状变换"><a href="#2-1-2-数据形状变换" class="headerlink" title="2.1.2 数据形状变换"></a>2.1.2 数据形状变换</h4><p>由于读入的原始数据是1维的，所有数据都连在一起。因此需要我们将数据的形状进行变换，形成一个2维的矩阵，每行为一个数据样本（14个值），每个数据样本包含13个XX<em>X</em>（影响房价的特征）和一个YY<em>Y</em>（该类型房屋的均价）.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读入之后的数据被转化成1维array，其中array的第0-13项是第一条数据，第14-27项是第二条数据，以此类推.... </span><br><span class="hljs-comment"># 这里对原始数据做reshape，变成N x 14的形式</span><br>feature_names = [ <span class="hljs-string">&#x27;CRIM&#x27;</span>, <span class="hljs-string">&#x27;ZN&#x27;</span>, <span class="hljs-string">&#x27;INDUS&#x27;</span>, <span class="hljs-string">&#x27;CHAS&#x27;</span>, <span class="hljs-string">&#x27;NOX&#x27;</span>, <span class="hljs-string">&#x27;RM&#x27;</span>, <span class="hljs-string">&#x27;AGE&#x27;</span>,<span class="hljs-string">&#x27;DIS&#x27;</span>, <br>                 <span class="hljs-string">&#x27;RAD&#x27;</span>, <span class="hljs-string">&#x27;TAX&#x27;</span>, <span class="hljs-string">&#x27;PTRATIO&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;LSTAT&#x27;</span>, <span class="hljs-string">&#x27;MEDV&#x27;</span> ]<br>feature_num = <span class="hljs-built_in">len</span>(feature_names)<br>data = data.reshape([data.shape[<span class="hljs-number">0</span>] // feature_num, feature_num])<br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-comment"># 查看数据</span><br>x = data[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(x.shape)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h4 id="2-1-3-数据集划分"><a href="#2-1-3-数据集划分" class="headerlink" title="2.1.3 数据集划分"></a>2.1.3 数据集划分</h4><p>将数据集划分成<strong>训练集和测试集</strong>，其中训练集用于确定模型的参数，测试集用于评判模型的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将80%的数据用作训练集，20%用作测试集</span><br>ratio = <span class="hljs-number">0.8</span><br>offset = <span class="hljs-built_in">int</span>(data.shape[<span class="hljs-number">0</span>] * ratio)<br>training_data = data[:offset]<br>training_data.shape<br></code></pre></td></tr></table></figure><h4 id="2-1-4-数据归一化处理"><a href="#2-1-4-数据归一化处理" class="headerlink" title="2.1.4 数据归一化处理"></a>2.1.4 数据归一化处理</h4><p>对每个特征进行归一化处理，使得每个特征的取值缩放到0~1之间。这样做有两个好处：一是模型训练更高效，在本节的后半部分会详细说明；二是特征前的权重大小可以代表该变量对预测结果的贡献度（因为每个特征值本身的范围相同）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算train数据集的最大值，最小值，平均值</span><br>maximums, minimums, avgs = \<br>                     training_data.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>), \<span class="hljs-comment">#按行求各行最大值</span><br>                     training_data.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>), \<br>     training_data.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>) / training_data.shape[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 对数据进行归一化处理</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(feature_num):<br>    <span class="hljs-comment">#print(maximums[i], minimums[i], avgs[i])</span><br>    data[:, i] = (data[:, i] - minimums[i]) / (maximums[i] - minimums[i])<br></code></pre></td></tr></table></figure><h4 id="2-1-5-封装成load-data函数"><a href="#2-1-5-封装成load-data函数" class="headerlink" title="2.1.5 封装成load data函数"></a>2.1.5 封装成load data函数</h4><p>将上述几个数据处理操作封装成<code>load data</code>函数，以便下一步模型的调用，实现方法如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>():<br>    <span class="hljs-comment"># 从文件导入数据</span><br>    datafile = <span class="hljs-string">&#x27;./work/housing.data&#x27;</span><br>    data = np.fromfile(datafile, sep=<span class="hljs-string">&#x27; &#x27;</span>)<br><br>    <span class="hljs-comment"># 每条数据包括14项，其中前面13项是影响因素，第14项是相应的房屋价格中位数</span><br>    feature_names = [ <span class="hljs-string">&#x27;CRIM&#x27;</span>, <span class="hljs-string">&#x27;ZN&#x27;</span>, <span class="hljs-string">&#x27;INDUS&#x27;</span>, <span class="hljs-string">&#x27;CHAS&#x27;</span>, <span class="hljs-string">&#x27;NOX&#x27;</span>, <span class="hljs-string">&#x27;RM&#x27;</span>, <span class="hljs-string">&#x27;AGE&#x27;</span>, \<br>                      <span class="hljs-string">&#x27;DIS&#x27;</span>, <span class="hljs-string">&#x27;RAD&#x27;</span>, <span class="hljs-string">&#x27;TAX&#x27;</span>, <span class="hljs-string">&#x27;PTRATIO&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;LSTAT&#x27;</span>, <span class="hljs-string">&#x27;MEDV&#x27;</span> ]<br>    feature_num = <span class="hljs-built_in">len</span>(feature_names)<br><br>    <span class="hljs-comment"># 将原始数据进行Reshape，变成[N, 14]这样的形状</span><br>    data = data.reshape([data.shape[<span class="hljs-number">0</span>] // feature_num, feature_num])<br><br>    <span class="hljs-comment"># 将原数据集拆分成训练集和测试集</span><br>    <span class="hljs-comment"># 这里使用80%的数据做训练，20%的数据做测试</span><br>    <span class="hljs-comment"># 测试集和训练集必须是没有交集的</span><br>    ratio = <span class="hljs-number">0.8</span><br>    offset = <span class="hljs-built_in">int</span>(data.shape[<span class="hljs-number">0</span>] * ratio)<br>    training_data = data[:offset]<br><br>    <span class="hljs-comment"># 计算训练集的最大值，最小值，平均值</span><br>    maximums, minimums, avgs = training_data.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>), training_data.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>), \<br>                                 training_data.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>) / training_data.shape[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 对数据进行归一化处理</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(feature_num):<br>        <span class="hljs-comment">#print(maximums[i], minimums[i], avgs[i])</span><br>        data[:, i] = (data[:, i] - minimums[i]) / (maximums[i] - minimums[i])<br><br>    <span class="hljs-comment"># 训练集和测试集的划分比例</span><br>    training_data = data[:offset]<br>    test_data = data[offset:]<br><br>    <span class="hljs-keyword">return</span> training_data, test_data<br><span class="hljs-comment"># 获取数据</span><br>training_data, test_data = load_data()<br>x = training_data[:, :-<span class="hljs-number">1</span>]<br>y = training_data[:, -<span class="hljs-number">1</span>:]<br><span class="hljs-comment"># 查看第一个样本的数据</span><br><span class="hljs-built_in">print</span>(x[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(y[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h3 id="2-2-模型设计"><a href="#2-2-模型设计" class="headerlink" title="2.2 模型设计"></a>2.2 模型设计</h3><p>模型设计是深度学习模型关键要素之一，也称为网络结构设计，相当于模型的假设空间，即实现模型“前向计算”（从输入到输出）的过程。</p><p>如果将输入特征和输出预测值均以向量表示，输入特征$x$有13个分量，$y$有1个分量，那么参数权重的形状（shape）是$13 \times 1$。假设我们以如下任意数字赋值参数做初始化：</p><p>$w=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,−0.1,−0.2,−0.3,−0.4,0.0]$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">w = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, -<span class="hljs-number">0.1</span>, -<span class="hljs-number">0.2</span>, -<span class="hljs-number">0.3</span>, -<span class="hljs-number">0.4</span>, <span class="hljs-number">0.0</span>]<br>w = np.array(w).reshape([<span class="hljs-number">13</span>, <span class="hljs-number">1</span>])<span class="hljs-comment">#参数转为列向量进行矩阵乘法</span><br></code></pre></td></tr></table></figure><p>取出第1条样本数据，观察样本的特征向量与参数向量相乘的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x1=x[<span class="hljs-number">0</span>]<br>t = np.dot(x1, w)<br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p>完整的线性回归公式，还需要初始化偏移量$b$，同样随意赋初值-0.2。那么，线性回归模型的完整输出是$z=t+b$，这个从特征和参数计算输出值的过程称为“前向计算”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">b = -<span class="hljs-number">0.2</span><br>z = t + b<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><p>将上述计算预测输出的过程以“类和对象”的方式来描述，类成员变量有参数$w$和$b$。通过写一个<code>forward</code>函数（代表“前向计算”）完成上述从特征和参数到输出预测值的计算过程，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，</span><br>        <span class="hljs-comment"># 此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><span class="hljs-comment">#初始偏移量为0.0</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br></code></pre></td></tr></table></figure><p>基于Network类的定义，模型的计算过程如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">net = Network(<span class="hljs-number">13</span>)<br>x1 = x[<span class="hljs-number">0</span>]<br>y1 = y[<span class="hljs-number">0</span>]<br>z = net.forward(x1)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><p>从上述前向计算的过程可见，线性回归也可以表示成一种简单的神经网络（只有一个神经元，且激活函数为恒等式）。这也是机器学习模型普遍为深度学习模型替代的原因：由于深度学习网络强大的表示能力，很多传统机器学习模型的学习能力等同于相对简单的深度学习模型。</p><h3 id="2-3-训练配置"><a href="#2-3-训练配置" class="headerlink" title="2.3 训练配置"></a>2.3 训练配置</h3><p>模型设计完成后，需要通过训练配置寻找模型的最优值，即通过损失函数来衡量模型的好坏。训练配置也是深度学习模型关键要素之一。</p><p>通过模型计算$x_{1}$表示的影响因素所对应的房价应该是$z$ 但实际数据告诉我们房价是$y$。这时我们需要有某种指标来衡量预测值$z$跟真实值$y$之间的差距。对于回归问题，最常采用的衡量方法是使用均方误差作为评价模型好坏的指标，具体定义如下：</p><p>$$<br>Loss = (y - z)^2<br>$$<br>上式中的$Loss$（简记为: $L$）通常也被称作损失函数，它是衡量模型好坏的指标。读者可能会奇怪：如果要衡量预测房价和真实房价之间的差距，是否将每一个样本的差距的绝对值加和即可？差距绝对值加和是更加直观和朴素的思路，为何要平方加和？ 损失函数的设计不仅要考虑准确衡量问题的“合理性”，通常还要考虑“易于优化求解”。至于这个问题的答案，在介绍完优化算法后再揭示。</p><p>在回归问题中，<strong>均方误差</strong>是一种比较常见的形式，分类问题中通常会采用<strong>交叉熵</strong>作为损失函数，在后续的章节中会更详细的介绍。对一个样本计算损失函数值的实现如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Loss = (y1 - z)*(y1 - z)<br><span class="hljs-built_in">print</span>(Loss)<br></code></pre></td></tr></table></figure><p>因为计算损失函数时需要把每个样本的损失函数值都考虑到，所以我们需要对单个样本的损失函数进行求和，并除以样本总数$N$。<br>$$<br>L= \frac{1}{N}\sum_{i=1}^N{(y_i - z_i)^2}<br>$$</p><p>在Network类下面添加损失函数的计算过程如下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        cost = error * error<br>        cost = np.mean(cost)<br>        <span class="hljs-keyword">return</span> cost<br></code></pre></td></tr></table></figure><p>使用定义的Network类，可以方便的计算预测值和损失函数。需要注意的是，类中的变量$x$, $w$，$b$, $z$, $error$等均是向量。以变量$x$为例，共有两个维度，一个代表特征数量（值为13），一个代表样本数量，代码如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">net = Network(<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 此处可以一次性计算多个样本的预测值和损失函数</span><br>x1 = x[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>y1 = y[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;actuality: &#x27;</span>,y1)<br>z = net.forward(x1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;predict: &#x27;</span>, z)<br>loss = net.loss(z, y1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;loss:&#x27;</span>, loss)<br></code></pre></td></tr></table></figure><h3 id="2-4-训练过程"><a href="#2-4-训练过程" class="headerlink" title="2.4 训练过程"></a>2.4 训练过程</h3><p>上述计算过程描述了如何构建神经网络，通过神经网络完成预测值和损失函数的计算。接下来介绍如何求解参数$w$和$b$的数值，这个过程也称为模型训练过程。训练过程是深度学习模型的关键要素之一，其目标是让定义的损失函数$Loss$尽可能的小，也就是说找到一个参数解$w$和$b$，使得损失函数取得极小值。</p><p>我们先做一个小测试：如 <strong>图5</strong> 所示，基于微积分知识，求一条曲线在某个点的斜率等于函数在该点的导数值。那么大家思考下，当处于曲线的极值点时，该点的斜率是多少？</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/94f0437e6a454a0682f3b831c96a62bdaf40898af25145ec9b5b50bc80391f5c" width="300" hegiht="" ></center><center><br>图5：曲线斜率等于导数值</br></center>这个问题并不难回答，处于曲线极值点时的斜率为0，即函数在极值点的导数为0。那么，让损失函数取极小值的$w$和$b$应该是下述方程组的解：$$\frac{\partial{L}}{\partial{\boldsymbol{w}}}=0$$<p>$$<br>\frac{\partial{L}}{\partial{b}}=0<br>$$</p><p>其中$L$表示的是损失函数的值，$\boldsymbol{w}$为模型权重，$b$为偏置项。$\boldsymbol{w}$和$b$均为要学习的模型参数。</p><p>把损失函数表示成矩阵的形式为</p><p>$$<br>L=\frac{1}{N}||\boldsymbol{y}-(\boldsymbol{X}\boldsymbol{w}+\boldsymbol{b})||^2<br>$$</p><p>($||$为范数，表示向量之间的距离，**$||x||_p = (|x_1|^{p} + |x_2|^{p} + ··· + |x_n|^{p}) ^\frac{1}{p}$**)</p><p>其中$\boldsymbol{y}$为$N$个样本的标签值构成的向量，形状为$N\times 1$；$\boldsymbol{X}$为$N$个样本特征向量构成的矩阵，形状为$N\times D$，$D$为数据特征长度；$\boldsymbol{w}$为权重向量，形状为$D\times 1$；$\boldsymbol{b}$为所有元素都为$b$的向量，形状为$N\times 1$。</p><p>计算公式7对参数$b$的偏导数<br>$$<br>\frac{\partial L}{\partial b} = \boldsymbol{1}^T(\boldsymbol{y}-(\boldsymbol{X}\boldsymbol{w}+\boldsymbol{b}))<br>$$<br>请注意，上述公式忽略了系数$\frac{2}{N}$，并不影响最后结果。其中$\boldsymbol{1}$为$N$维的全1向量。</p><p>令公式8等于0，得到<br>$$<br>b^* = \boldsymbol{\bar{x}}^T\boldsymbol{w}-\bar{y}<br>$$<br>其中$\bar{y}=\frac{1}{N}\boldsymbol{1}^T\boldsymbol{y}$为所有标签的平均值，$\boldsymbol{\bar{x}}=\frac{1}{N}(\boldsymbol{1}^T\boldsymbol{X})^T$为所有特征向量的平均值。将$b^*$带入公式7中并对参数$\boldsymbol{w}$求偏导得到</p><p>$$<br>\frac{\partial L}{\partial \boldsymbol{w}} = (\boldsymbol{X}-\boldsymbol{\bar{x}}^T)^T((\boldsymbol{y}-\bar{y})-(\boldsymbol{X}-\boldsymbol{\bar{x}}^T)\boldsymbol{w})<br>$$</p><p>令公式10等于0，得到最优参数</p><p>$$<br>\boldsymbol{w}^*=((\boldsymbol{X}-\boldsymbol{\bar{x}}^T)^T(\boldsymbol{X}-\boldsymbol{\bar{x}}^T))^{-1}(\boldsymbol{X}-\boldsymbol{\bar{x}}^T)^T(\boldsymbol{y}-\bar{y}) \<br>b^* = \boldsymbol{\bar{x}}^T\boldsymbol{w}^*-\bar{y}<br>$$</p><p>将样本数据$(x, y)$带入上面的公式11和公式12中即可求解出$w$和$b$的值，但是这种方法只对线性回归这样简单的任务有效。如果模型中含有非线性变换，或者损失函数不是均方差这种简单的形式，则很难通过上式求解。为了解决这个问题，下面我们将引入更加普适的数值求解方法：梯度下降法。</p><h4 id="2-4-1-梯度下降法"><a href="#2-4-1-梯度下降法" class="headerlink" title="2.4.1 梯度下降法"></a>2.4.1 梯度下降法</h4><p>在现实中存在大量的函数正向求解容易，但反向求解较难，被称为单向函数，这种函数在密码学中有大量的应用。密码锁的特点是可以迅速判断一个密钥是否是正确的(已知$x$，求$y$很容易)，但是即使获取到密码锁系统，也无法破解出正确得密钥（已知$y$，求$x$很难）。</p><p>这种情况特别类似于一位想从山峰走到坡谷的盲人，他看不见坡谷在哪（无法逆向求解出$Loss$导数为0时的参数值），但可以伸脚探索身边的坡度（当前点的导数值，也称为梯度）。那么，求解Loss函数最小值可以这样实现：从当前的参数取值，一步步的按照下坡的方向下降，直到走到最低点。这种方法笔者称它为“盲人下坡法”。哦不，有个更正式的说法“梯度下降法”。</p><p>训练的关键是找到一组$(w, b)$，使得损失函数$L$取极小值。我们先看一下损失函数$L$只随两个参数$w_5$、$w_9$变化时的简单情形，启发下寻解的思路。<br>$$L=L(w_5, w_9) (公式13)$$<br>这里将$w_0, w_1, …, w_{12}$中除$w_5, w_9$之外的参数和$b$都固定下来，可以用图画出$L(w_5, w_9)$的形式，并在三维空间中画出损失函数随参数变化的曲面图。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py">net = Network(<span class="hljs-number">13</span>)<br>losses = []<br><span class="hljs-comment">#只画出参数w5和w9在区间[-160, 160]的曲线部分，以及包含损失函数的极值</span><br>w5 = np.arange(-<span class="hljs-number">160.0</span>, <span class="hljs-number">160.0</span>, <span class="hljs-number">1.0</span>)<br>w9 = np.arange(-<span class="hljs-number">160.0</span>, <span class="hljs-number">160.0</span>, <span class="hljs-number">1.0</span>)<br>losses = np.zeros([<span class="hljs-built_in">len</span>(w5), <span class="hljs-built_in">len</span>(w9)])<br><br><span class="hljs-comment">#计算设定区域内每个参数取值所对应的Loss</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(w5)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(w9)):<br>        net.w[<span class="hljs-number">5</span>] = w5[i]<br>        net.w[<span class="hljs-number">9</span>] = w9[j]<br>        z = net.forward(x)<br>        loss = net.loss(z, y)<br>        losses[i, j] = loss<br><br><span class="hljs-comment">#使用matplotlib将两个变量和对应的Loss作3D图</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br>fig = plt.figure()<br>ax = Axes3D(fig)<br><br>w5, w9 = np.meshgrid(w5, w9)<br><br>ax.plot_surface(w5, w9, losses, rstride=<span class="hljs-number">1</span>, cstride=<span class="hljs-number">1</span>, cmap=<span class="hljs-string">&#x27;rainbow&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>从图中可以明显观察到有些区域的函数值比周围的点小。需要说明的是：为什么选择$w_5$和$w_9$来画图呢？这是因为选择这两个参数的时候，可比较直观的从损失函数的曲面图上发现极值点的存在。其他参数组合，从图形上观测损失函数的极值点不够直观。</p><p>观察上述曲线呈现出“圆滑”的坡度，这正是我们选择以均方误差作为损失函数的原因之一。<strong>图6</strong> 呈现了只有一个参数维度时，均方误差和绝对值误差（只将每个样本的误差累加，不做平方处理）的损失函数曲线图。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/99487dca6520441db5073d1c154b5d2fb1174b5cf4d946c29f9d80a209bc2687" width="700" hegiht="40" ></center><center><br>图6：均方误差和绝对值误差损失函数曲线图</br></center>由此可见，均方误差表现的“圆滑”的坡度有两个好处：<ul><li>曲线的最低点是可导的。</li><li>越接近最低点，曲线的坡度逐渐放缓，有助于通过当前的梯度来判断接近最低点的程度（是否逐渐减少步长，以免错过最低点）。</li></ul><p>而绝对值误差是不具备这两个特性的，这也是损失函数的设计不仅仅要考虑“合理性”，还要追求“易解性”的原因。</p><p>现在我们要找出一组$[w_5, w_9]$的值，使得损失函数最小，实现梯度下降法的方案如下：</p><ul><li>步骤1：随机的选一组初始值，例如：$[w_5, w_9] = [-100.0, -100.0]$</li><li>步骤2：选取下一个点$[w_5^{‘} , w_9^{‘}]$，使得$L(w_5^{‘} , w_9^{‘}) &lt; L(w_5, w_9)$</li><li>步骤3：重复步骤2，直到损失函数几乎不再下降。</li></ul><p>如何选择$[w_5^{‘} , w_9^{‘}]$是至关重要的，第一要保证$L$是下降的，第二要使得下降的趋势尽可能的快。微积分的基础知识告诉我们：沿着梯度的反方向，是函数值下降最快的方向，如 <strong>图7</strong> 所示。简单理解，函数在某一个点的梯度方向是曲线斜率最大的方向，但梯度方向是向上的，所以下降最快的是梯度的反方向。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/5f8322f6172542dab0f78684b70efe45d819895332af4cabb7c536217ab0bb26" width="400" hegiht="40" ></center><center><br>图7：梯度下降方向示意图</br></center>#### 2.4.2 梯度计算<p>上文已经介绍了损失函数的计算方法，这里稍微改写。为了使梯度计算更加简洁，引入因子$\frac{1}{2}$，定义损失函数如下：</p><p>$$<br>L= \frac{1}{2N}\sum_{i=1}^N{(y_i - z_i)^2}<br>$$<br>其中$z_i$是网络对第$i$个样本的预测值：</p><p>$$<br>z_i = \sum_{j=0}^{12}{x_i^{j}\cdot w_j} + b<br>$$<br>梯度的定义：</p><p>$$<br>𝑔𝑟𝑎𝑑𝑖𝑒𝑛𝑡 = (\frac{\partial{L}}{\partial{w_0}},\frac{\partial{L}}{\partial{w_1}}, … ,\frac{\partial{L}}{\partial{w_{12}}} ,\frac{\partial{L}}{\partial{b}})<br>$$<br>可以计算出$L$对$w$和$b$的偏导数：</p><p>$$<br>\frac{\partial{L}}{\partial{w_j}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)\frac{\partial{z_i}}{\partial{w_j}}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)x_i^{j}}<br>$$</p><p>$$<br>\frac{\partial{L}}{\partial{b}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)\frac{\partial{z_i}}{\partial{b}}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)}<br>$$</p><p>从导数的计算过程可以看出，因子$\frac{1}{2}$被消掉了，这是因为二次函数求导的时候会产生因子$2$，这也是我们将损失函数改写的原因。</p><p>下面我们考虑只有一个样本的情况下，计算梯度：</p><p>$$<br>L= \frac{1}{2}{(y_i - z_i)^2}<br>$$</p><p>$$<br>z_1 = {x_1^{0}\cdot w_0} + {x_1^{1}\cdot w_1} + …  + {x_1^{12}\cdot w_{12}} + b<br>$$</p><p>可以计算出：</p><p>$$<br>L= \frac{1}{2}{({x_1^{0}\cdot w_0} + {x_1^{1}\cdot w_1} + …  + {x_1^{12}\cdot w_{12}} + b - y_1)^2}<br>$$<br>可以计算出$L$对$w$和$b$的偏导数：</p><p>$$<br>\frac{\partial{L}}{\partial{w_0}} = ({x_1^{0}\cdot w_0} + {x_1^{1}\cdot w_1} + …  + {x_1^{12}\cdot w_12} + b - y_1)\cdot x_1^{0}=({z_1} - {y_1})\cdot x_1^{0}<br>$$</p><p>$$<br>\frac{\partial{L}}{\partial{b}} = ({x_1^{0}\cdot w_0} + {x_1^{1}\cdot w_1} + …  + {x_1^{12}\cdot w_{12}} + b - y_1)\cdot 1 = ({z_1} - {y_1}) (公式23)<br>$$</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#查看每个变量的数据和维度</span><br>x1 = x[<span class="hljs-number">0</span>]<br>y1 = y[<span class="hljs-number">0</span>]<br>z1 = net.forward(x1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x1 &#123;&#125;, shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x1, x1.shape))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;y1 &#123;&#125;, shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(y1, y1.shape))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;z1 &#123;&#125;, shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(z1, z1.shape))<br><span class="hljs-comment">#当只有一个样本时，可以计算某个wj，比如w0的梯度</span><br>gradient_w0 = (z1 - y1) * x1[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w0 &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(gradient_w0))<br></code></pre></td></tr></table></figure><h4 id="2-4-3-使用NumPy进行梯度计算"><a href="#2-4-3-使用NumPy进行梯度计算" class="headerlink" title="2.4.3 使用NumPy进行梯度计算"></a>2.4.3 使用NumPy进行梯度计算</h4><p>基于NumPy广播机制（对向量和矩阵计算如同对1个单一变量计算一样），可以更快速的实现梯度计算。计算梯度的代码中直接用$(z_1 - y_1) \cdot x_1$，得到的是一个13维的向量，每个分量分别代表该维度的梯度。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#计算一个样本的所有梯度</span><br>gradient_w = (z1 - y1) * x1<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w_by_sample1 &#123;&#125;, gradient.shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(gradient_w, gradient_w.shape))<br></code></pre></td></tr></table></figure><p>此处可见，计算梯度<code>gradient_w</code>的维度是$3 \times 13$，并且其第1行与上面第1个样本计算的梯度gradient_w_by_sample1一致，第2行与上面第2个样本计算的梯度gradient_w_by_sample2一致，第3行与上面第3个样本计算的梯度gradient_w_by_sample3一致。这里使用矩阵操作，可以更加方便的对3个样本分别计算各自对梯度的贡献。</p><p>那么对于有N个样本的情形，我们可以直接使用如下方式计算出所有样本对梯度的贡献，这就是使用NumPy库广播功能带来的便捷。<br>小结一下这里使用NumPy库的广播功能：</p><ul><li>一方面可以扩展参数的维度，代替for循环来计算1个样本对从$w_0$到$w_{12}$的所有参数的梯度。<code>列表征特征维度</code></li><li>另一方面可以扩展样本的维度，代替for循环来计算样本0到样本403对参数的梯度。<code>行表征样本维度</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">z = net.forward(x)<br>gradient_w = (z - y) * x<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(gradient_w.shape))<br><span class="hljs-built_in">print</span>(gradient_w)<br></code></pre></td></tr></table></figure><p>上面gradient_w的每一行代表了一个样本对梯度的贡献。根据梯度的计算公式，总梯度是对每个样本对梯度贡献的平均值。</p><p>$$<br>\frac{\partial{L}}{\partial{w_j}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)\frac{\partial{z_i}}{\partial{w_j}}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)x_i^{j}}<br>$$<br>可以使用NumPy的均值函数来完成此过程，代码实现如下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># axis = 0 表示把每一列做相加然后再除以总的行数</span><br>gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w &#x27;</span>, gradient_w.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w &#x27;</span>, net.w.shape)<br><span class="hljs-built_in">print</span>(gradient_w)<br><span class="hljs-built_in">print</span>(net.w)<br></code></pre></td></tr></table></figure><p>使用NumPy的矩阵操作方便地完成了gradient的计算，但引入了一个问题，<code>gradient_w</code>的形状是(13,)，而$w$的维度是(13, 1)。导致该问题的原因是使用<code>np.mean</code>函数时消除了第0维。为了加减乘除等计算方便，<code>gradient_w</code>和$w$必须保持一致的形状。因此我们将<code>gradient_w</code>的维度也设置为(13,1)，代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">gradient_w = gradient_w[:, np.newaxis]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w shape&#x27;</span>, gradient_w.shape)<br><span class="hljs-built_in">print</span>(gradient_w)<br></code></pre></td></tr></table></figure><p>梯度计算综合代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">z = net.forward(x)<br>gradient_w = (z - y) * x<br>gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># gradient_w = gradient_w.reshape(13,1)</span><br>gradient_w = gradient_w[:, np.newaxis]<br>gradient_w<br></code></pre></td></tr></table></figure><p>偏置计算综合代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">gradient_b = (z - y)<br>gradient_b = np.mean(gradient_b)<br><span class="hljs-comment"># 此处b是一个数值，所以可以直接用np.mean得到一个标量</span><br>gradient_b<br></code></pre></td></tr></table></figure><p>总结为OOP的函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        num_samples = error.shape[<span class="hljs-number">0</span>]<br>        cost = error * error<br>        cost = np.<span class="hljs-built_in">sum</span>(cost) / num_samples<br>        <span class="hljs-keyword">return</span> cost<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient</span>(<span class="hljs-params">self, x, y</span>):<br>        z = self.forward(x)<br>        gradient_w = (z-y)*x<br>        gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br>        gradient_w = gradient_w[:, np.newaxis]<br>        gradient_b = (z - y)<br>        gradient_b = np.mean(gradient_b)<br>        <br>        <span class="hljs-keyword">return</span> gradient_w, gradient_b<br><span class="hljs-comment">#主函数调用上述方法计算梯度</span><br><span class="hljs-comment"># 调用上面定义的gradient函数，计算梯度</span><br><span class="hljs-comment"># 初始化网络</span><br>net = Network(<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 设置[w5, w9] = [-100., -100.]</span><br>net.w[<span class="hljs-number">5</span>] = -<span class="hljs-number">100.0</span><br>net.w[<span class="hljs-number">9</span>] = -<span class="hljs-number">100.0</span><br><br>z = net.forward(x)<br>loss = net.loss(z, y)<br>gradient_w, gradient_b = net.gradient(x, y)<br>gradient_w5 = gradient_w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>]<br>gradient_w9 = gradient_w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;point &#123;&#125;, loss &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>([net.w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>], net.w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]], loss))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>([gradient_w5, gradient_w9]))<br><br></code></pre></td></tr></table></figure><h4 id="2-4-4-梯度更新"><a href="#2-4-4-梯度更新" class="headerlink" title="2.4.4 梯度更新"></a>2.4.4 梯度更新</h4><p>下面研究更新梯度的方法，确定损失函数更小的点。首先沿着梯度的反方向移动一小步，找到下一个点P1，观察损失函数的变化。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 在[w5, w9]平面上，沿着梯度的反方向移动到下一个点P1</span><br><span class="hljs-comment"># 定义移动步长 eta</span><br>eta = <span class="hljs-number">0.1</span><br><span class="hljs-comment"># 更新参数w5和w9</span><br>net.w[<span class="hljs-number">5</span>] = net.w[<span class="hljs-number">5</span>] - eta * gradient_w5<br>net.w[<span class="hljs-number">9</span>] = net.w[<span class="hljs-number">9</span>] - eta * gradient_w9<br><span class="hljs-comment"># 重新计算z和loss</span><br>z = net.forward(x)<br>loss = net.loss(z, y)<br>gradient_w, gradient_b = net.gradient(x, y)<br>gradient_w5 = gradient_w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>]<br>gradient_w9 = gradient_w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;point &#123;&#125;, loss &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>([net.w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>], net.w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]], loss))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>([gradient_w5, gradient_w9]))<br></code></pre></td></tr></table></figure><p>运行上面的代码，可以发现沿着梯度反方向走一小步，下一个点的损失函数的确减少了。感兴趣的话，大家可以尝试不停的点击上面的代码块，观察损失函数是否一直在变小。</p><p>在上述代码中，每次更新参数使用的语句：<br><code>net.w[5] = net.w[5] - eta * gradient_w5</code></p><ul><li>相减：参数需要向梯度的反方向移动。</li><li>eta：控制每次参数值沿着梯度反方向变动的大小，即每次移动的步长，又称为学习率。</li></ul><p>大家可以思考下，为什么之前我们要做输入特征的归一化，保持尺度一致？这是为了让统一的步长更加合适，使训练更加高效。</p><p>如 <strong>图8</strong> 所示，特征输入归一化后，不同参数输出的Loss是一个比较规整的曲线，学习率可以设置成统一的值 ；特征输入未归一化时，不同特征对应的参数所需的步长不一致，尺度较大的参数需要大步长，尺寸较小的参数需要小步长，导致无法设置统一的学习率。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/903f552bc55b4a5eba71caa7dd86fd2d7b71b8ebb6cb4500a5f5711f465707f3" width="300" hegiht="40" ></center><center><br>图8：未归一化的特征，会导致不同特征维度的理想步长不同</br></center>#### 2.4.5 封装Train函数<p>将上面的循环计算过程封装在<code>train</code>和<code>update</code>函数中，实现方法如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights,<span class="hljs-number">1</span>)<br>        self.w[<span class="hljs-number">5</span>] = -<span class="hljs-number">100.</span><br>        self.w[<span class="hljs-number">9</span>] = -<span class="hljs-number">100.</span><br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        num_samples = error.shape[<span class="hljs-number">0</span>]<br>        cost = error * error<br>        cost = np.<span class="hljs-built_in">sum</span>(cost) / num_samples<br>        <span class="hljs-keyword">return</span> cost<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient</span>(<span class="hljs-params">self, x, y</span>):<br>        z = self.forward(x)<br>        gradient_w = (z-y)*x<br>        gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br>        gradient_w = gradient_w[:, np.newaxis]<br>        gradient_b = (z - y)<br>        gradient_b = np.mean(gradient_b)        <br>        <span class="hljs-keyword">return</span> gradient_w, gradient_b<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, gradient_w5, gradient_w9, eta=<span class="hljs-number">0.01</span></span>):<br>        net.w[<span class="hljs-number">5</span>] = net.w[<span class="hljs-number">5</span>] - eta * gradient_w5<br>        net.w[<span class="hljs-number">9</span>] = net.w[<span class="hljs-number">9</span>] - eta * gradient_w9<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, x, y, iterations=<span class="hljs-number">100</span>, eta=<span class="hljs-number">0.01</span></span>):<br>        points = []<br>        losses = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>            points.append([net.w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>], net.w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]])<br>            z = self.forward(x)<br>            L = self.loss(z, y)<br>            gradient_w, gradient_b = self.gradient(x, y)<br>            gradient_w5 = gradient_w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>]<br>            gradient_w9 = gradient_w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]<br>            self.update(gradient_w5, gradient_w9, eta)<br>            losses.append(L)<br>            <span class="hljs-keyword">if</span> i % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;iter &#123;&#125;, point &#123;&#125;, loss &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, [net.w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>], net.w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]], L))<br>        <span class="hljs-keyword">return</span> points, losses<br><br><span class="hljs-comment"># 获取数据</span><br>train_data, test_data = load_data()<br>x = train_data[:, :-<span class="hljs-number">1</span>]<br>y = train_data[:, -<span class="hljs-number">1</span>:]<br><span class="hljs-comment"># 创建网络</span><br>net = Network(<span class="hljs-number">13</span>)<br>num_iterations=<span class="hljs-number">2000</span><br><span class="hljs-comment"># 启动训练</span><br>points, losses = net.train(x, y, iterations=num_iterations, eta=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-comment"># 画出损失函数的变化趋势</span><br>plot_x = np.arange(num_iterations)<br>plot_y = np.array(losses)<br>plt.plot(plot_x, plot_y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-4-6-训练过程扩展到全部参数"><a href="#2-4-6-训练过程扩展到全部参数" class="headerlink" title="2.4.6 训练过程扩展到全部参数"></a>2.4.6 训练过程扩展到全部参数</h4><p>为了能给读者直观的感受，上文演示的梯度下降的过程仅包含$w_5$和$w_9$两个参数。但房价预测的模型必须要对所有参数$w$和$b$进行求解，这需要将Network中的<code>update</code>和<code>train</code>函数进行修改。由于不再限定参与计算的参数（所有参数均参与计算），修改之后的代码反而更加简洁。</p><p>实现逻辑：“前向计算输出、根据输出和真实值计算Loss、基于Loss和输入计算梯度、根据梯度更新参数值”四个部分反复执行，直到到损失函数最小。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        num_samples = error.shape[<span class="hljs-number">0</span>]<br>        cost = error * error<br>        cost = np.<span class="hljs-built_in">sum</span>(cost) / num_samples<br>        <span class="hljs-keyword">return</span> cost<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient</span>(<span class="hljs-params">self, x, y</span>):<br>        z = self.forward(x)<br>        gradient_w = (z-y)*x<br>        gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br>        gradient_w = gradient_w[:, np.newaxis]<br>        gradient_b = (z - y)<br>        gradient_b = np.mean(gradient_b)        <br>        <span class="hljs-keyword">return</span> gradient_w, gradient_b<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, gradient_w, gradient_b, eta = <span class="hljs-number">0.01</span></span>):<br>        self.w = self.w - eta * gradient_w<br>        self.b = self.b - eta * gradient_b<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, x, y, iterations=<span class="hljs-number">100</span>, eta=<span class="hljs-number">0.01</span></span>):<br>        losses = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>            z = self.forward(x)<br>            L = self.loss(z, y)<br>            gradient_w, gradient_b = self.gradient(x, y)<br>            self.update(gradient_w, gradient_b, eta)<br>            losses.append(L)<br>            <span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>) % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;iter &#123;&#125;, loss &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, L))<br>        <span class="hljs-keyword">return</span> losses<br><br><span class="hljs-comment"># 获取数据</span><br>train_data, test_data = load_data()<br>x = train_data[:, :-<span class="hljs-number">1</span>]<br>y = train_data[:, -<span class="hljs-number">1</span>:]<br><span class="hljs-comment"># 创建网络</span><br>net = Network(<span class="hljs-number">13</span>)<br>num_iterations=<span class="hljs-number">1000</span><br><span class="hljs-comment"># 启动训练</span><br>losses = net.train(x,y, iterations=num_iterations, eta=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-comment"># 画出损失函数的变化趋势</span><br>plot_x = np.arange(num_iterations)<br>plot_y = np.array(losses)<br>plt.plot(plot_x, plot_y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-4-7-随机梯度下降法（-Stochastic-Gradient-Descent）"><a href="#2-4-7-随机梯度下降法（-Stochastic-Gradient-Descent）" class="headerlink" title="2.4.7  随机梯度下降法（ Stochastic Gradient Descent）"></a>2.4.7  随机梯度下降法（ Stochastic Gradient Descent）</h4><p>在上述程序中，每次损失函数和梯度计算都是基于数据集中的全量数据。对于波士顿房价预测任务数据集而言，样本数比较少，只有404个。但在实际问题中，数据集往往非常大，如果每次都使用全量数据进行计算，效率非常低，通俗地说就是“杀鸡焉用牛刀”。由于参数每次只沿着梯度反方向更新一点点，因此方向并不需要那么精确。一个合理的解决方案是每次从总的数据集中随机抽取出小部分数据来代表整体，基于这部分数据计算梯度和损失来更新参数，这种方法被称作随机梯度下降法（Stochastic Gradient Descent，SGD），核心概念如下：</p><ul><li>mini-batch：每次迭代时抽取出来的一批数据被称为一个mini-batch。</li><li>batch_size：一个mini-batch所包含的样本数目称为batch_size。</li><li>epoch：当程序迭代的时候，按mini-batch逐渐抽取出样本，当把整个数据集都遍历到了的时候，则完成了一轮训练，也叫一个epoch。启动训练时，可以将训练的轮数num_epochs和batch_size作为参数传入。</li></ul><p>下面结合程序介绍具体的实现过程，涉及到数据处理和训练过程两部分代码的修改。</p><ul><li><strong>数据处理代码修改</strong></li></ul><p>数据处理需要实现拆分数据批次和样本乱序（为了实现随机抽样的效果）两个功能。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        <span class="hljs-comment">#np.random.seed(0)</span><br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        num_samples = error.shape[<span class="hljs-number">0</span>]<br>        cost = error * error<br>        cost = np.<span class="hljs-built_in">sum</span>(cost) / num_samples<br>        <span class="hljs-keyword">return</span> cost<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient</span>(<span class="hljs-params">self, x, y</span>):<br>        z = self.forward(x)<br>        N = x.shape[<span class="hljs-number">0</span>]<br>        gradient_w = <span class="hljs-number">1.</span> / N * np.<span class="hljs-built_in">sum</span>((z-y) * x, axis=<span class="hljs-number">0</span>)<br>        gradient_w = gradient_w[:, np.newaxis]<br>        gradient_b = <span class="hljs-number">1.</span> / N * np.<span class="hljs-built_in">sum</span>(z-y)<br>        <span class="hljs-keyword">return</span> gradient_w, gradient_b<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, gradient_w, gradient_b, eta = <span class="hljs-number">0.01</span></span>):<br>        self.w = self.w - eta * gradient_w<br>        self.b = self.b - eta * gradient_b<br>            <br>                <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, training_data, num_epochs, batch_size=<span class="hljs-number">10</span>, eta=<span class="hljs-number">0.01</span></span>):<br>        n = <span class="hljs-built_in">len</span>(training_data)<br>        losses = []<br>        <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>            <span class="hljs-comment"># 在每轮迭代开始之前，将训练数据的顺序随机打乱</span><br>            <span class="hljs-comment"># 然后再按每次取batch_size条数据的方式取出</span><br>            np.random.shuffle(training_data)<br>            <span class="hljs-comment"># 将训练数据进行拆分，每个mini_batch包含batch_size条的数据</span><br>            mini_batches = [training_data[k:k+batch_size] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n, batch_size)]<br>            <span class="hljs-keyword">for</span> iter_id, mini_batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(mini_batches):<br>                <span class="hljs-comment">#print(self.w.shape)</span><br>                <span class="hljs-comment">#print(self.b)</span><br>                x = mini_batch[:, :-<span class="hljs-number">1</span>]<br>                y = mini_batch[:, -<span class="hljs-number">1</span>:]<br>                a = self.forward(x)<br>                loss = self.loss(a, y)<br>                gradient_w, gradient_b = self.gradient(x, y)<br>                self.update(gradient_w, gradient_b, eta)<br>                losses.append(loss)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch &#123;:3d&#125; / iter &#123;:3d&#125;, loss = &#123;:.4f&#125;&#x27;</span>.<br>                                 <span class="hljs-built_in">format</span>(epoch_id, iter_id, loss))<br>        <br>        <span class="hljs-keyword">return</span> losses<br><br><span class="hljs-comment"># 获取数据</span><br>train_data, test_data = load_data()<br><br><span class="hljs-comment"># 创建网络</span><br>net = Network(<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 启动训练</span><br>losses = net.train(train_data, num_epochs=<span class="hljs-number">50</span>, batch_size=<span class="hljs-number">100</span>, eta=<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment"># 画出损失函数的变化趋势</span><br>plot_x = np.arange(<span class="hljs-built_in">len</span>(losses))<br>plot_y = np.array(losses)<br>plt.plot(plot_x, plot_y)<br>plt.show()<br></code></pre></td></tr></table></figure><p>观察上述Loss的变化，随机梯度下降加快了训练过程，但由于每次仅基于少量样本更新参数和计算损失，所以损失下降曲线会出现震荡。</p><hr><p><strong>说明：</strong></p><p>由于房价预测的数据量过少，所以难以感受到随机梯度下降带来的性能提升。</p><hr><h3 id="2-5-模型保存"><a href="#2-5-模型保存" class="headerlink" title="2.5 模型保存"></a>2.5 模型保存</h3><p>Numpy提供了save接口，可直接将模型权重数组保存为.npy格式的文件。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">np.save(<span class="hljs-string">&#x27;w.npy&#x27;</span>, net.w)<br>np.save(<span class="hljs-string">&#x27;b.npy&#x27;</span>, net.b)<br></code></pre></td></tr></table></figure><h3 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h3><p>本节我们详细介绍了如何使用NumPy实现梯度下降算法，构建并训练了一个简单的线性模型实现波士顿房价预测，可以总结出，使用神经网络建模房价预测有三个要点：</p><ul><li><p>构建网络，初始化参数$w$和$b$，定义预测和损失函数的计算方法。</p></li><li><p>随机选择初始点，建立梯度的计算方法和参数更新方式。</p></li><li><p>从总的数据集中抽取部分数据作为一个mini_batch，计算梯度并更新参数，不断迭代直到损失函数几乎不再下降。</p></li></ul><h3 id="2-7-框架实现"><a href="#2-7-框架实现" class="headerlink" title="2.7 框架实现"></a>2.7 框架实现</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#加载飞桨、NumPy和相关类库</span><br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> paddle.fluid <span class="hljs-keyword">as</span> fluid<br><span class="hljs-keyword">import</span> paddle.fluid.dygraph <span class="hljs-keyword">as</span> dygraph<br><span class="hljs-keyword">from</span> paddle.fluid.dygraph <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>():<br>    <span class="hljs-comment"># 从文件导入数据</span><br>    datafile = <span class="hljs-string">&#x27;housing.data&#x27;</span><br>    data = np.fromfile(datafile, sep=<span class="hljs-string">&#x27; &#x27;</span>, dtype=np.float32)<br><br>    <span class="hljs-comment"># 每条数据包括14项，其中前面13项是影响因素，第14项是相应的房屋价格中位数</span><br>    feature_names = [ <span class="hljs-string">&#x27;CRIM&#x27;</span>, <span class="hljs-string">&#x27;ZN&#x27;</span>, <span class="hljs-string">&#x27;INDUS&#x27;</span>, <span class="hljs-string">&#x27;CHAS&#x27;</span>, <span class="hljs-string">&#x27;NOX&#x27;</span>, <span class="hljs-string">&#x27;RM&#x27;</span>, <span class="hljs-string">&#x27;AGE&#x27;</span>, \<br>                      <span class="hljs-string">&#x27;DIS&#x27;</span>, <span class="hljs-string">&#x27;RAD&#x27;</span>, <span class="hljs-string">&#x27;TAX&#x27;</span>, <span class="hljs-string">&#x27;PTRATIO&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;LSTAT&#x27;</span>, <span class="hljs-string">&#x27;MEDV&#x27;</span> ]<br>    feature_num = <span class="hljs-built_in">len</span>(feature_names)<br><br>    <span class="hljs-comment"># 将原始数据进行Reshape，变成[N, 14]这样的形状</span><br>    data = data.reshape([data.shape[<span class="hljs-number">0</span>] // feature_num, feature_num])<br><br>    <span class="hljs-comment"># 将原数据集拆分成训练集和测试集</span><br>    <span class="hljs-comment"># 这里使用80%的数据做训练，20%的数据做测试</span><br>    <span class="hljs-comment"># 测试集和训练集必须是没有交集的</span><br>    ratio = <span class="hljs-number">0.8</span><br>    offset = <span class="hljs-built_in">int</span>(data.shape[<span class="hljs-number">0</span>] * ratio)<br>    training_data = data[:offset]<br><br>    <span class="hljs-comment"># 计算train数据集的最大值，最小值</span><br>    maximums, minimums, avgs = training_data.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>), training_data.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>), training_data.mean(axis=<span class="hljs-number">0</span>)<br>    <br>    <span class="hljs-comment"># 记录数据的归一化参数，在预测时对数据做归一化</span><br>    <span class="hljs-keyword">global</span> max_values<br>    <span class="hljs-keyword">global</span> min_values<br>    <span class="hljs-keyword">global</span> avg_values<br>   <br>    max_values = maximums<br>    min_values = minimums<br>    avg_values = avgs<br>    <br>    <span class="hljs-comment"># 对数据进行归一化处理</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(feature_num):<br>        data[:, i] = (data[:, i] - avg_values[i]) / (maximums[i] - minimums[i])<br><br>    <span class="hljs-comment"># 训练集和测试集的划分比例</span><br>    training_data = data[:offset]<br>    test_data = data[offset:]<br>    <span class="hljs-keyword">return</span> training_data, test_data<br>    <br>    <span class="hljs-comment"># 验证数据集读取程序的正确性</span><br>training_dataverify, test_dataverify = load_data()<br><span class="hljs-built_in">print</span>(training_dataverify.shape)<br><span class="hljs-built_in">print</span>(training_dataverify[<span class="hljs-number">0</span>,:])<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Regressor</span>(fluid.dygraph.Layer):<br><br>    <span class="hljs-comment"># self代表类的实例自身</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name_scope</span>):<br>        <span class="hljs-comment"># 初始化父类中的一些参数</span><br>        <span class="hljs-built_in">super</span>(Regressor, self).__init__(name_scope)<br>        name_scope = self.full_name()<br>        <br>        <span class="hljs-comment"># 定义一层全连接层，输入维度是13，输出维度是1</span><br>        self.fc = Linear(input_dim=<span class="hljs-number">13</span>, output_dim=<span class="hljs-number">1</span>,act=<span class="hljs-literal">None</span>)<br>    <br>    <span class="hljs-comment"># 网络的前向计算</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>        x = self.fc(inputs)<br>        <span class="hljs-keyword">return</span> x<br>        <br>        <span class="hljs-comment">#定义飞桨动态图的工作环境</span><br><span class="hljs-keyword">with</span> fluid.dygraph.guard():<br>    <span class="hljs-comment">#声明定义好的线性回归模型</span><br>    model = Regressor(<span class="hljs-string">&quot;Regressor&quot;</span>)<br>    <span class="hljs-comment">#开启模型训练模式</span><br>    model.train()<br>    <span class="hljs-comment">#加载数据</span><br>    training_data, test_data = load_data()<br>    <span class="hljs-comment">#定义优化算法，这里使用随机梯度下降-SGD</span><br>    <span class="hljs-comment">#学习率设置为0.01</span><br>    opt = fluid.optimizer.SGD(learning_rate=<span class="hljs-number">0.01</span>, parameter_list=model.parameters())<br>    <br>    <span class="hljs-keyword">with</span> dygraph.guard(fluid.CPUPlace()):<br>    EPOCH_NUM = <span class="hljs-number">10</span> <span class="hljs-comment">#设置外层循环次数，即数据集遍历次数</span><br>    BATCH_SIZE = <span class="hljs-number">10</span> <span class="hljs-comment">#设置一个批次的数据大小</span><br>    <br>    <span class="hljs-comment">#定义外层循环</span><br>    <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br><span class="hljs-comment">#         在每轮训练之前，将训练数据打乱</span><br>        np.random.shuffle(training_data)<br><span class="hljs-comment">#         将训练数据拆分，每个batch含10个数据（样本）</span><br>        mini_batches = [training_data[k:k+BATCH_SIZE] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(training_data), BATCH_SIZE)]<br><span class="hljs-comment">#         定义内部循环</span><br>        <span class="hljs-keyword">for</span> iter_id, mini_batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(mini_batches):<br>            x = np.array(mini_batch[:,:-<span class="hljs-number">1</span>]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            y = np.array(mini_batch[:,-<span class="hljs-number">1</span>:]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#             将numpy数据转换为飞浆动态图variable格式</span><br>            house_features = dygraph.to_variable(x)<br>            prices = dygraph.to_variable(y)<br>        <span class="hljs-comment">#     调用模型前向计算</span><br>            predicts = model(house_features)<br><br>        <span class="hljs-comment">#     计算损失</span><br>            loss = fluid.layers.square_error_cost(predicts, label=prices)<br>            avg_loss = fluid.layers.mean(loss)<br>            <span class="hljs-keyword">if</span> iter_id%<span class="hljs-number">20</span>==<span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch:&#123;&#125;,iter_id:&#123;&#125;,loss is:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch_id, iter_id, avg_loss.numpy()))<br>        <span class="hljs-comment">#     反向传播</span><br>            avg_loss.backward()<br>        <span class="hljs-comment">#     最小化loss，更新参数</span><br>            opt.minimize(avg_loss)<br>        <span class="hljs-comment">#     清除梯度</span><br>            model.clear_gradients()<br><span class="hljs-comment">#     保存模型</span><br>fluid.save_dygraph(model.state_dict(), <span class="hljs-string">&#x27;LRmodel&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_one_example</span>(<span class="hljs-params">data_dir</span>):<br>    f = <span class="hljs-built_in">open</span>(data_dir,<span class="hljs-string">&quot;r&quot;</span>)<br>    datas = f.readlines()<br><span class="hljs-comment">#     选取倒数第10个数据进行预测</span><br>    tmp = datas[-<span class="hljs-number">9</span>]<br>    tmp = tmp.strip().split()<br>    one_data = [<span class="hljs-built_in">float</span>(v) <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> tmp]<br>    <br><span class="hljs-comment">#     对数据进行归一化处理</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(one_data)-<span class="hljs-number">1</span>):<br>        one_data[i] = (one_data[i]-avg_values[i])/(max_values[i]-min_values[i])<br>        <br>    data = np.reshape(np.array(one_data[:-<span class="hljs-number">1</span>]),[<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]).astype(np.float32)<br>    label = one_data[-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> data, label<br><span class="hljs-keyword">with</span> dygraph.guard():<br>    model_dict, _ = fluid.load_dygraph(<span class="hljs-string">&#x27;LR_model&#x27;</span>)<br>    model.load_dict(model_dict)<br>    model.<span class="hljs-built_in">eval</span>()<br><span class="hljs-comment">#     参数为测试数据集的文件地址</span><br>    test_data, label = load_one_example(<span class="hljs-string">&#x27;housing.data&#x27;</span>)<br><span class="hljs-comment">#     将数据转为variable格式</span><br>    test_data = dygraph.to_variable(test_data)<br>    results = model(test_data)<br>    <br><span class="hljs-comment">#     对结果进行反归一化</span><br>    results = results * (max_values[-<span class="hljs-number">1</span>]-min_values[-<span class="hljs-number">1</span>]) + avg_values[-<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Inference result is &#123;&#125;, the corresponding label is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(results.numpy(), label))<br></code></pre></td></tr></table></figure><h2 id="3-实例二“手写文字识别”"><a href="#3-实例二“手写文字识别”" class="headerlink" title="3.实例二“手写文字识别”"></a>3.实例二“手写文字识别”</h2><h3 id="1-单层网络多元逻辑回归模型"><a href="#1-单层网络多元逻辑回归模型" class="headerlink" title="1.单层网络多元逻辑回归模型"></a>1.单层网络多元逻辑回归模型</h3><h4 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h4><p>在房价预测深度学习任务中，我们使用了单层且没有非线性变换的模型，取得了理想的预测效果。在手写数字识别中，我们依然使用这个模型预测输入的图形数字值。其中，模型的输入为784维（28×28）数据，输出为1维数据，如 <strong>图5</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/9c146e7d9c4a4119a8cd09f7c8b5ee61f2ac1820a221429a80430291728b9c4a" width="500" hegiht="" ></center><center><br>图5：手写数字识别网络模型</br></center><p>输入像素的位置排布信息对理解图像内容非常重要（如将原始尺寸为28×28图像的像素按照7×112的尺寸排布，那么其中的数字将不可识别），因此网络的输入设计为28×28的尺寸，而不是1×784，以便于模型能够正确处理像素之间的空间信息。</p><hr><p><strong>说明：</strong></p><p>事实上，采用只有一层的简单网络（对输入求加权和）时并没有处理位置关系信息，因此可以猜测出此模型的预测效果可能有限。在后续优化环节介绍的卷积神经网络则更好的考虑了这种位置关系信息，模型的预测效果也会有显著提升。</p><hr><p>下面以类的方式组建手写数字识别的网络，实现方法如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 定义mnist数据识别网络结构，同房价预测网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MNIST</span>(paddle.nn.Layer):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MNIST, self).__init__()<br>        <br>        <span class="hljs-comment"># 定义一层全连接层，输出维度是1</span><br>        self.fc = paddle.nn.Linear(in_features=<span class="hljs-number">784</span>, out_features=<span class="hljs-number">1</span>)<br>        <br>    <span class="hljs-comment"># 定义网络结构的前向计算过程</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>        outputs = self.fc(inputs)<br>        <span class="hljs-keyword">return</span> outputs<br></code></pre></td></tr></table></figure><h4 id="训练配置"><a href="#训练配置" class="headerlink" title="训练配置"></a>训练配置</h4><p>训练配置需要先生成模型实例（设为“训练”状态），再设置优化算法和学习率（使用随机梯度下降SGD，学习率设置为0.001），实现方法如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 声明网络结构</span><br>model = MNIST()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    <span class="hljs-comment"># 启动训练模式</span><br>    model.train()<br>    <span class="hljs-comment"># 加载训练集 batch_size 设为 16</span><br>    train_loader = paddle.io.DataLoader(paddle.vision.datasets.MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>), <br>                                        batch_size=<span class="hljs-number">16</span>, <br>                                        shuffle=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 定义优化器，使用随机梯度下降SGD优化器，学习率设置为0.001</span><br>    opt = paddle.optimizer.SGD(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br></code></pre></td></tr></table></figure><h4 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h4><p>训练过程采用二层循环嵌套方式，训练完成后需要保存模型参数，以便后续使用。</p><ul><li>内层循环：负责整个数据集的一次遍历，遍历数据集采用分批次（batch）方式。</li><li>外层循环：定义遍历数据集的次数，本次训练中外层循环10次，通过参数EPOCH_NUM设置。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 图像归一化函数，将数据范围为[0, 255]的图像归一化到[0, 1]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">norm_img</span>(<span class="hljs-params">img</span>):<br>    <span class="hljs-comment"># 验证传入数据格式是否正确，img的shape为[batch_size, 28, 28]</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(img.shape) == <span class="hljs-number">3</span><br>    batch_size, img_h, img_w = img.shape[<span class="hljs-number">0</span>], img.shape[<span class="hljs-number">1</span>], img.shape[<span class="hljs-number">2</span>]<br>    <span class="hljs-comment"># 归一化图像数据</span><br>    img = img / <span class="hljs-number">255</span><br>    <span class="hljs-comment"># 将图像形式reshape为[batch_size, 784]</span><br>    img = paddle.reshape(img, [batch_size, img_h*img_w])<br>    <br>    <span class="hljs-keyword">return</span> img<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br><span class="hljs-comment"># 确保从paddle.vision.datasets.MNIST中加载的图像数据是np.ndarray类型</span><br>paddle.vision.set_image_backend(<span class="hljs-string">&#x27;cv2&#x27;</span>)<br><br><span class="hljs-comment"># 声明网络结构</span><br>model = MNIST()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    <span class="hljs-comment"># 启动训练模式</span><br>    model.train()<br>    <span class="hljs-comment"># 加载训练集 batch_size 设为 16</span><br>    train_loader = paddle.io.DataLoader(paddle.vision.datasets.MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>), <br>                                        batch_size=<span class="hljs-number">16</span>, <br>                                        shuffle=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 定义优化器，使用随机梯度下降SGD优化器，学习率设置为0.001</span><br>    opt = paddle.optimizer.SGD(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br>    EPOCH_NUM = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br>            images = norm_img(data[<span class="hljs-number">0</span>]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            labels = data[<span class="hljs-number">1</span>].astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            <br>            <span class="hljs-comment">#前向计算的过程</span><br>            predicts = model(images)<br>            <br>            <span class="hljs-comment"># 计算损失</span><br>            loss = F.square_error_cost(predicts, labels)<br>            avg_loss = paddle.mean(loss)<br>            <br>            <span class="hljs-comment">#每训练了1000批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch_id: &#123;&#125;, batch_id: &#123;&#125;, loss is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch, batch_id, avg_loss.numpy()))<br>            <br>            <span class="hljs-comment">#后向传播，更新参数的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br>            <br><br>train(model)<br>paddle.save(model.state_dict(), <span class="hljs-string">&#x27;./mnist.pdparams&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>另外，从训练过程中损失所发生的变化可以发现，虽然损失整体上在降低，但到训练的最后一轮，损失函数值依然较高。可以猜测手写数字识别完全复用房价预测的代码，训练效果并不好。接下来我们通过模型测试，获取模型训练的真实效果。</p></blockquote><h4 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h4><p>模型测试的主要目的是验证训练好的模型是否能正确识别出数字，包括如下四步：</p><ul><li>声明实例</li><li>加载模型：加载训练过程中保存的模型参数，</li><li>灌入数据：将测试样本传入模型，模型的状态设置为校验状态（eval），显式告诉框架我们接下来只会使用前向计算的流程，不会计算梯度和梯度反向传播。</li><li>获取预测结果，取整后作为预测标签输出。</li></ul><p>在模型测试之前，需要先从’./work/example_0.png’文件中读取样例图片，并进行归一化处理。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 导入图像读取第三方库</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>train_loader = paddle.io.DataLoader(paddle.vision.datasets.MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>), <br>                                    batch_size=<span class="hljs-number">16</span>, <br>                                    shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># print(data[0][0].shape)</span><br><span class="hljs-comment"># plt.imshow(norm_img(train_data0))</span><br><span class="hljs-comment"># plt.show()</span><br>img_path = <span class="hljs-string">&#x27;./data/data17152/example_0.png&#x27;</span><br><span class="hljs-comment"># 读取原始图像并显示</span><br>im = Image.<span class="hljs-built_in">open</span>(img_path)<br>plt.imshow(im)<br>plt.show()<br><span class="hljs-comment"># 将原始图像转为灰度图</span><br>im = im.convert(<span class="hljs-string">&#x27;L&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原始图像shape: &#x27;</span>, np.array(im).shape)<br><span class="hljs-comment"># 使用Image.ANTIALIAS方式采样原始图片</span><br>im = im.resize((<span class="hljs-number">28</span>, <span class="hljs-number">28</span>), Image.ANTIALIAS)<br>plt.imshow(im)<br>plt.show()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;采样后图片shape: &quot;</span>, np.array(im).shape)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 读取一张本地的样例图片，转变成模型输入的格式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_image</span>(<span class="hljs-params">img_path</span>):<br>    <span class="hljs-comment"># 从img_path中读取图像，并转为灰度图</span><br>    im = Image.<span class="hljs-built_in">open</span>(img_path).convert(<span class="hljs-string">&#x27;L&#x27;</span>)<br>    im = im.resize((<span class="hljs-number">28</span>, <span class="hljs-number">28</span>), Image.ANTIALIAS)<br>    im = np.array(im).reshape(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>).astype(np.float32)<br><br>    <span class="hljs-comment"># 图像归一化，保持和数据集的数据范围一致</span><br>    im =  <span class="hljs-number">1</span> - im / <span class="hljs-number">255</span><br>    <span class="hljs-keyword">return</span> im<br><br><span class="hljs-comment"># 定义预测过程</span><br>model = MNIST()<br>params_file_path = <span class="hljs-string">&#x27;mnist.pdparams&#x27;</span><br>img_path = <span class="hljs-string">&#x27;./data/data17152/example_0.png&#x27;</span><br><span class="hljs-comment"># 加载模型参数</span><br>param_dict = paddle.load(params_file_path)<br><span class="hljs-comment"># 将模型参数加载到模型里</span><br>model.load_dict(param_dict)<br><span class="hljs-comment"># 灌入数据</span><br>model.<span class="hljs-built_in">eval</span>()<br>tensor_img = load_image(img_path)<br>result = model(paddle.to_tensor(tensor_img))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result&#x27;</span>,result)<br><span class="hljs-comment">#  预测输出取整，即为预测的数字，打印结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;本次预测的数字是&quot;</span>, result.numpy().astype(<span class="hljs-string">&#x27;int32&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><strong><u>灰度图：0是黑，255是白</u></strong></p><p><strong>重要函数：</strong></p><ul><li><code>enumerate(train_loader())</code>将迭代器进行迭代</li><li><code>np.reshape(1, -1)</code>将ndtype数组转为1维行向量，**-1为占位符**，列数看有多少列就多少列</li></ul><h3 id="2-多层网络改进模型"><a href="#2-多层网络改进模型" class="headerlink" title="2.多层网络改进模型"></a>2.多层网络改进模型</h3><h4 id="数据同步读取与训练"><a href="#数据同步读取与训练" class="headerlink" title="数据同步读取与训练"></a>数据同步读取与训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据处理部分之前的代码，加入部分数据处理的库</span><br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> gzip<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>(<span class="hljs-params">mode=<span class="hljs-string">&#x27;train&#x27;</span></span>):<br>    datafile = <span class="hljs-string">&#x27;./work/mnist.json.gz&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;loading mnist dataset from &#123;&#125; ......&#x27;</span>.<span class="hljs-built_in">format</span>(datafile))<br>    <span class="hljs-comment"># 加载json数据文件</span><br>    data = json.load(gzip.<span class="hljs-built_in">open</span>(datafile))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mnist dataset load done&#x27;</span>)<br>   <br>    <span class="hljs-comment"># 读取到的数据区分训练集，验证集，测试集</span><br>    train_set, val_set, eval_set = data<br>    <span class="hljs-keyword">if</span> mode==<span class="hljs-string">&#x27;train&#x27;</span>:<br>        <span class="hljs-comment"># 获得训练数据集</span><br>        imgs, labels = train_set[<span class="hljs-number">0</span>], train_set[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;valid&#x27;</span>:<br>        <span class="hljs-comment"># 获得验证数据集</span><br>        imgs, labels = val_set[<span class="hljs-number">0</span>], val_set[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;eval&#x27;</span>:<br>        <span class="hljs-comment"># 获得测试数据集</span><br>        imgs, labels = eval_set[<span class="hljs-number">0</span>], eval_set[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<span class="hljs-comment">#抛出异常</span><br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;mode can only be one of [&#x27;train&#x27;, &#x27;valid&#x27;, &#x27;eval&#x27;]&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集数量: &quot;</span>, <span class="hljs-built_in">len</span>(imgs))<br>    <br>    <span class="hljs-comment"># 校验数据</span><br>    imgs_length = <span class="hljs-built_in">len</span>(imgs)<br><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(imgs) == <span class="hljs-built_in">len</span>(labels), \<br>          <span class="hljs-string">&quot;length of train_imgs(&#123;&#125;) should be the same as train_labels(&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(imgs), <span class="hljs-built_in">len</span>(labels))<br>    <br>    <span class="hljs-comment"># 获得数据集长度</span><br>    imgs_length = <span class="hljs-built_in">len</span>(imgs)<br>    <br>    <span class="hljs-comment"># 定义数据集每个数据的序号，根据序号读取数据</span><br>    index_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(imgs_length))<br>    <span class="hljs-comment"># 读入数据时用到的批次大小</span><br>    BATCHSIZE = <span class="hljs-number">100</span><br>    <br>    <span class="hljs-comment"># 定义数据生成器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">data_generator</span>():<br>        <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;train&#x27;</span>:<br>            <span class="hljs-comment"># 训练模式下打乱数据</span><br>            random.shuffle(index_list)<br>        imgs_list = []<br>        labels_list = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> index_list:<br>            <span class="hljs-comment"># 将数据处理成希望的类型</span><br>            img = np.array(imgs[i]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            label = np.array(labels[i]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            imgs_list.append(img) <br>            labels_list.append(label)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(imgs_list) == BATCHSIZE:<br>                <span class="hljs-comment"># 每获得一个batchsize的数据，就返回</span><br>                <span class="hljs-keyword">yield</span> np.array(imgs_list), np.array(labels_list)<br>                <span class="hljs-comment"># 清空数据读取列表</span><br>                imgs_list = []<br>                labels_list = []<br>    <br>        <span class="hljs-comment"># 如果剩余数据的数目小于BATCHSIZE，</span><br>        <span class="hljs-comment"># 则剩余数据一起构成一个大小为len(imgs_list)的mini-batch</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(imgs_list) &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">yield</span> np.array(imgs_list), np.array(labels_list)<br>    <span class="hljs-keyword">return</span> data_generator<span class="hljs-comment">#返回迭代器</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据处理部分之后的代码，数据读取的部分调用Load_data函数</span><br><span class="hljs-comment"># 定义网络结构，同上一节所使用的网络结构</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MNIST</span>(paddle.nn.Layer):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MNIST, self).__init__()<br>        <span class="hljs-comment"># 定义一层全连接层，输出维度是1</span><br>        self.fc = paddle.nn.Linear(in_features=<span class="hljs-number">784</span>, out_features=<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>        outputs = self.fc(inputs)<br>        <span class="hljs-keyword">return</span> outputs<br><br><span class="hljs-comment"># 训练配置，并启动训练过程</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    model = MNIST()<br>    model.train()<br>    <span class="hljs-comment">#调用加载数据的函数</span><br>    train_loader = load_data(<span class="hljs-string">&#x27;train&#x27;</span>)<br>    opt = paddle.optimizer.SGD(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br>    EPOCH_NUM = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br>            <span class="hljs-comment">#准备数据，变得更加简洁</span><br>            images, labels = data<br>            <span class="hljs-comment">#将ndtype数据转换为模型接受的tensor类型进行输入训练</span><br>            images = paddle.to_tensor(images)<br>            labels = paddle.to_tensor(labels) <br><br>            <span class="hljs-comment">#前向计算的过程</span><br>            predits = model(images)<br>            <br>            <span class="hljs-comment">#计算损失，取一个批次样本损失的平均值</span><br>            loss = F.square_error_cost(predits, labels)<br>            avg_loss = paddle.mean(loss)      <br>            <br>            <span class="hljs-comment">#每训练了200批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">200</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch: &#123;&#125;, loss is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch_id, batch_id, avg_loss.numpy()))<br>            <br>            <span class="hljs-comment">#后向传播，更新参数的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br><br>    <span class="hljs-comment"># 保存模型</span><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;./mnist.pdparams&#x27;</span>)<br><span class="hljs-comment"># 创建模型           </span><br>model = MNIST()<br><span class="hljs-comment"># 启动训练过程</span><br>train(model)<br><br></code></pre></td></tr></table></figure><blockquote><p>上面提到的数据读取采用的是同步数据读取方式。对于样本量较大、数据读取较慢的场景，建议采用异步数据读取方式。异步读取数据时，数据读取和模型训练并行执行，从而加快了数据读取速度，牺牲一小部分内存换取数据读取效率的提升，二者关系如 <strong>图4</strong> 所示。</p></blockquote><center><img src="https://ai-studio-static-online.cdn.bcebos.com/a5fd990c5355426183a71b95aa28a59f979014f6905144ddb415c5a4fe647441" width="500" ></center><center><br>图4：同步数据读取和异步数据读取示意图</br></center>* **同步数据读取**：数据读取与模型训练串行。当模型需要数据时，才运行数据读取函数获得当前批次的数据。在读取数据期间，模型一直等待数据读取结束才进行训练，数据读取速度相对较慢。* **异步数据读取**：数据读取和模型训练并行。读取到的数据不断的放入缓存区，无需等待模型训练就可以启动下一轮数据读取。当模型训练完一个批次后，不用等待数据读取过程，直接从缓存区获得下一批次数据进行训练，从而加快了数据读取速度。* **异步队列**：数据读取和模型训练交互的仓库，二者均可以从仓库中读取数据，它的存在使得两者的工作节奏可以解耦。<p>使用飞桨实现异步数据读取非常简单，只需要两个步骤：</p><ol><li>构建一个继承paddle.io.Dataset类的数据读取器。</li><li>通过paddle.io.DataLoader创建异步数据读取的迭代器。</li></ol><h4 id="数据异步读取与训练"><a href="#数据异步读取与训练" class="headerlink" title="数据异步读取与训练"></a>数据异步读取与训练</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> gzip<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 创建一个类MnistDataset，继承paddle.io.Dataset 这个类</span><br><span class="hljs-comment"># MnistDataset的作用和上面load_data()函数的作用相同，均是构建一个迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MnistDataset</span>(paddle.io.Dataset):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, mode</span>):<br>        datafile = <span class="hljs-string">&#x27;./work/mnist.json.gz&#x27;</span><br>        data = json.load(gzip.<span class="hljs-built_in">open</span>(datafile))<br>        <span class="hljs-comment"># 读取到的数据区分训练集，验证集，测试集</span><br>        train_set, val_set, eval_set = data<br>        <span class="hljs-keyword">if</span> mode==<span class="hljs-string">&#x27;train&#x27;</span>:<br>            <span class="hljs-comment"># 获得训练数据集</span><br>            imgs, labels = train_set[<span class="hljs-number">0</span>], train_set[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;valid&#x27;</span>:<br>            <span class="hljs-comment"># 获得验证数据集</span><br>            imgs, labels = val_set[<span class="hljs-number">0</span>], val_set[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;eval&#x27;</span>:<br>            <span class="hljs-comment"># 获得测试数据集</span><br>            imgs, labels = eval_set[<span class="hljs-number">0</span>], eval_set[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;mode can only be one of [&#x27;train&#x27;, &#x27;valid&#x27;, &#x27;eval&#x27;]&quot;</span>)<br>        <br>        <span class="hljs-comment"># 校验数据</span><br>        imgs_length = <span class="hljs-built_in">len</span>(imgs)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(imgs) == <span class="hljs-built_in">len</span>(labels), \<br>            <span class="hljs-string">&quot;length of train_imgs(&#123;&#125;) should be the same as train_labels(&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(imgs), <span class="hljs-built_in">len</span>(labels))<br>        <br>        self.imgs = imgs<br>        self.labels = labels<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img = np.array(self.imgs[idx]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>        label = np.array(self.labels[idx]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>        <br>        <span class="hljs-keyword">return</span> img, label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.imgs)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 声明数据加载函数，使用MnistDataset数据集</span><br>train_dataset = MnistDataset(mode=<span class="hljs-string">&#x27;train&#x27;</span>)<br><span class="hljs-comment"># print(train_dataset[1][1])</span><br><span class="hljs-comment"># 使用paddle.io.DataLoader 定义DataLoader对象用于加载Python生成器产生的数据，</span><br><span class="hljs-comment"># DataLoader 返回的是一个批次数据迭代器，并且是异步的；</span><br>data_loader = paddle.io.DataLoader(train_dataset, batch_size=<span class="hljs-number">100</span>, shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 迭代的读取数据并打印数据的形状</span><br><span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data_loader()):<br>    images, labels = data<br>    <span class="hljs-built_in">print</span>(i, images.shape, labels.shape)<br>    <span class="hljs-keyword">if</span> i&gt;=<span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    model = MNIST()<br>    model.train()<br>    opt = paddle.optimizer.SGD(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br>    EPOCH_NUM = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data_loader()):<br>            images, labels = data<br>            images = paddle.to_tensor(images)<br>            labels = paddle.to_tensor(labels).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            <br>            <span class="hljs-comment">#前向计算的过程  </span><br>            predicts = model(images)<br><br>            <span class="hljs-comment">#计算损失，取一个批次样本损失的平均值</span><br>            loss = F.square_error_cost(predicts, labels)<br>            avg_loss = paddle.mean(loss)       <br>            <br>            <span class="hljs-comment">#每训练了200批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">200</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch: &#123;&#125;, loss is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch_id, batch_id, avg_loss.numpy()))<br>            <br>            <span class="hljs-comment">#后向传播，更新参数的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br><br>    <span class="hljs-comment">#保存模型参数</span><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;mnist&#x27;</span>)<br><br><span class="hljs-comment">#创建模型</span><br>model = MNIST()<br><span class="hljs-comment">#启动训练过程</span><br>train(model)<br></code></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ol><li><a href="https://so.csdn.net/so/search?q=%E8%BF%AD%E4%BB%A3%E5%99%A8&spm=1001.2101.3001.7020">迭代器</a>迭代器有两个基本的方法：创建迭代器<strong>iter()</strong> 和 访问迭代器**next()**。</li></ol><p>可以直接作用于for循环的对象统称为可迭代对象：Iterable</p><ul><li><p>一类是集合数据类型，如list、tuple、dict、set、str等；</p></li><li><p>一类是generator，包括生成器和带yield的generator function</p></li></ul><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><ol start="2"><li>生成器</li></ol><p>如果列表元素可以按照某种算法推算出来，可以在循环的过程中不断推算出后续的元素，这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p><ol start="3"><li>yield：是一个生成器函数，返回的是一个迭代器</li></ol><p>yield的作用：返回一个可以用来迭代(for循环)的生成器，它的应用场景通常为一个需要返回一系列值的，含有循环的函数中。</p><ol start="4"><li>assert：<code>assert a &gt; 0,&quot;a超出范围&quot;</code><u>如果a&gt;0则顺序执行，否则抛出异常提示a超出范围</u></li></ol>]]></content>
    
    
    <categories>
      
      <category>MachineLearning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Numpy</tag>
      
      <tag>Pandas</tag>
      
      <tag>PIL</tag>
      
      <tag>Matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Html5+Css+Js</title>
    <link href="/2022/09/10/Html5_Css_Js/"/>
    <url>/2022/09/10/Html5_Css_Js/</url>
    
    <content type="html"><![CDATA[<h1 id="Html5"><a href="#Html5" class="headerlink" title="Html5"></a>Html5</h1><h2 id="1-表格标签（可以用对齐）"><a href="#1-表格标签（可以用对齐）" class="headerlink" title="1.表格标签（可以用对齐）"></a>1.表格标签（可以用对齐）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        ···<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    ···<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>tr: 行标签</li><li>td: 单元格标签</li><li>th: 表头标签(自动居中加粗显示)</li><li>thead: 用于定义表格的头部。thead标签内部必须拥有tr标签，一般是位于第一行。</li><li>tbody: 用于定义表格的主体,主要用于放数据本体。</li><li>属性：<img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909192737.png" style="zoom:25%;" /></li></ul><h3 id="合并单元格（td的属性标签）"><a href="#合并单元格（td的属性标签）" class="headerlink" title="合并单元格（td的属性标签）"></a>合并单元格（td的属性标签）</h3><p>跨行合并: rowspan=“合并单元格的个数”<br>跨列合并: colspan=”合并单元格的个数”</p><p>目标单元格: (写合并代码)</p><ul><li>跨行:最上侧单元格为目标单元格,写合并代码</li><li>跨列:最左侧单元格为目标单元格,写合并代码</li></ul><h2 id="2-列表标签"><a href="#2-列表标签" class="headerlink" title="2.列表标签"></a>2.列表标签</h2><h3 id="2-1无序列表"><a href="#2-1无序列表" class="headerlink" title="2.1无序列表"></a>2.1无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>ul为列表标签（<strong>只能嵌套li标签</strong>）</p></li><li><p>li为表项标签（可以放别的标签，相当于一个容器）</p></li></ul><h3 id="2-2有序列表（表项排列有序）"><a href="#2-2有序列表（表项排列有序）" class="headerlink" title="2.2有序列表（表项排列有序）"></a>2.2有序列表（表项排列有序）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>ol标签只能嵌套li标签。</li><li>li标签对相当于一个容器,可以容纳所有元素。</li><li>有序列表会带有自己样式属性,但在实际使用时,我们会使用CSS来设置。</li></ul><h3 id="2-3自定义列表"><a href="#2-3自定义列表" class="headerlink" title="2.3自定义列表"></a>2.3自定义列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>关于我<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>博客<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>发卡网<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>域名分发<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在HTML标签中, dl标签用于定义描述列表(或定义列表) , 该标签会与dt (定义项目/名字)和dd( 描述每一个项目/名字)一起使用。</li></ul><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="3-1表单的组成"><a href="#3-1表单的组成" class="headerlink" title="3.1表单的组成"></a>3.1表单的组成</h3><p>注：<u>在HTML中,一个完整的表单通常由表单域、表单控件(也称为表单元素)和提示信息3个部分构成.</u></p><ol><li><u>表单域</u>： 表单域是一个包含表单元素的区域。在HTML标签中，form标签用于定义表单域,以实现用户信息的收集和传递。form会把它范围内的表单元素信息提交给服务器.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--&gt;各种表单元素控件&lt;/!--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><u>表单元素</u>：在表单域中可以定义各种表单元素,这些表单元素就是允许用户在表单中输入或者选择的内容控件。</li></ol><ul><li><p><strong>input输入表单元素</strong>：</p><ol><li><p>定义：<code>&lt;input type=&quot;属性值&quot; /&gt;</code>    </p></li><li><p>input标签为单标签</p></li><li><p><u>type属性设置不同的属性值用来指定不同的控件类型</u></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914211117537.png" alt="image-20220914211117537"></p></li><li><p>其他属性：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914205332692.png" alt="image-20220914205332692"></p><ul><li><u>name和value是每个表单元素都有的属性值主要给后台人员使用，value为默认值</u>。</li><li><u>name表单元素的名字，要求单选按钮和复选框要有相同的name值。</u></li><li><u>只有单选和复选按钮才有checked属性，网页打开默认选中状态。</u></li><li><u>maxlength规定输入字段中的字符的最大长度。</u></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://fcsy.fit.php&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;翻译&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- text 文本框用户输入任何文字 --&gt;</span><br>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- password 密码框 用户看不见输入的密码 --&gt;</span><br>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- radio 单选按钮 可以实现多选一，name是表单元素的名字，相同名字的单选按钮才可以实现多选一 --&gt;</span><br>        性别：男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;man&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span>  女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;woman&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- checkbox 复选框 可以实现多选 --&gt;</span><br>        爱好：吃饭<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span>睡觉<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span>学习<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- reset 将表单元素的内容全部清空 --&gt;</span><br>        重置：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重新填写&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- submit 提交框 可以将表单提交到服务端 --&gt;</span><br>        翻译：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;免费注册&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 普通按钮 配合JavaScript实现脚本的调用 --&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">javascript</span>=<span class="hljs-string">&quot;index.js&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取短信验证码&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>             <span class="hljs-comment">&lt;!-- file 上传文件到该页面 --&gt;</span><br>        上传头像：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 为文本框添加标签，以便于点击标签就可以选中文本框填写，for的值必须和id的值相等 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>select下拉表单元素</strong></p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-comment">&lt;!--&gt;...&lt;/!--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>select标签中至少包含一对option标签.</code></li><li>在option中定义selected=“selected”时，当前项即为默认选中项。</li></ol><ul><li><strong>textarea文本域元素</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">今日反馈:<br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><br>pink老师,我知道这个反馈留言是textarea来做的<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p><code>通过textarea标签可以轻松地创建多行文本输入框。</code></p></li><li><p>cols= “每行中的字符数” , rows= “显示的行数” ,我们在实际开发中不会使用,都是用CSS来改变大小。</p></li></ol></li></ul></li></ul><h2 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>iframe<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.lvyestudy.com&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;250&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><u>在HTML中，我们可以使用iframe标签来实现一个内嵌框架。内嵌框架，就是在当前页面再嵌入另外一个网页。</u></li></ul><hr><h1 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h1><h2 id="ch1-练气"><a href="#ch1-练气" class="headerlink" title="ch1 练气"></a>ch1 练气</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><ul><li><p>CSS是层叠样式表( Cascading Style Sheets )的简称.有时我们也会称之为CSS样式表或级联样式表。</p></li><li><p>CSS是也是一种标记语言</p></li><li><p>CSS主要用于设置HTML页面中的文本内容(字体、大小对齐方式等)、图片的外形(宽高、边框样式、边距等)以及版面的布局和外观显示样式。</p></li><li><p>CSS让我们的网页更加丰富多彩,布局更加灵活自如。简单理解: CSS可以美化HTML,让HTML更漂亮,让页面布局更简单。</p></li></ul><h4 id="1-1CSS语法规范"><a href="#1-1CSS语法规范" class="headerlink" title="1.1CSS语法规范"></a>1.1CSS语法规范</h4><p><u><strong>CSS规则由两个主要的部分构成:选择器以及一条或多条声明。</strong></u></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220917005326815.png" alt="image-20220917005326815"></p><ul><li><p>选择器是用于指定 CSS样式的HTML标签,花括号内是对该对象设置的具体样式</p></li><li><p>属性和属性值以“键值对”的形式出现</p></li><li><p>属性是对指定的对象设置的样式属性,例如字体大小文本颜色等</p></li><li><p>属性和属性值之间用英文 “:” 分开</p></li><li><p>多个“键值对”之间用英文”;” 进行区分</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS_Introduction<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;css/css.css&quot;&gt; --&gt;</span>外联式<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> &lt;!--内嵌式--&gt;</span><br><span class="language-css">        <span class="hljs-selector-class">.p1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: lightcoral;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>:  <span class="hljs-number">50%</span> Arial,<span class="hljs-number">50%</span> Times New Roman;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.p2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: aqua;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>: Times New Roman;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span> i am real person!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2代码风格"><a href="#1-2代码风格" class="headerlink" title="1.2代码风格"></a>1.2代码风格</h4><ol><li><p>紧凑格式</p><p><code>h3 &#123; color: deeppink; font-size: 20px; &#125;</code></p></li><li><p>展开格式（更直观）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span> &#123;<br><span class="hljs-attribute">color</span>: pink;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>空格规范</p><ul><li><code>属性值前面，冒号后面，保留一个空格</code></li><li><code>选择器（标签）和大括号中间保留空格</code></li></ul></li></ol><h3 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h3><p>作用： <u>选择标签设置格式属性</u></p><h4 id="2-1选择器分类"><a href="#2-1选择器分类" class="headerlink" title="2.1选择器分类"></a>2.1选择器分类</h4><p><strong>选择器分为基础选择器和复合选择器两个大类,我们这里先讲解一下基础选择器。</strong></p><ul><li>基础选择器是由<u>单个选择器组成的</u></li><li>基础选择器包括:<u>标签选择器、类选择器、id 选择器和通配符选择器</u></li><li></li></ul><h5 id="2-1-1标签选择器"><a href="#2-1-1标签选择器" class="headerlink" title="2.1.1标签选择器"></a>2.1.1标签选择器</h5><p>标签选择器(元素选择器)是指用<u>HTML标签名称</u>作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">标签名 &#123;<br>属性1: 属性值1;<br>属性2: 属性值2;<br>属性3 属性值3; ···<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-1-2类选择器"><a href="#2-1-2类选择器" class="headerlink" title="2.1.2类选择器"></a>2.1.2类选择器</h5><p>如果想要差异化选择不同的标签,单独选一个或者某几个标签 ,可以使用类选择器；<u><strong>样式点定义，结构类调用，一个或多个，开发最常用</strong></u></p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">.类名 &#123;<br>属性1：属性值1；<br>···<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多类名语法：</p><p><code>&lt;div class=&quot;name1 name2 ···&quot;&gt;&lt;/div&gt;</code></p><ul><li>在标签class属性中写多个类名,可以同时被调用</li><li><u>多个类名中间必须用空格分开</u></li><li><u>将相同样式放在一个公共样式里，便于调用，提高代码复用率</u></li></ul><h5 id="2-1-3ID选择器"><a href="#2-1-3ID选择器" class="headerlink" title="2.1.3ID选择器"></a>2.1.3ID选择器</h5><ul><li>id选择器可以为标有特定id的HTML元素指定特定的样式。</li><li>HTML元素以<u>id属性来设置id选择器</u>, CSS中id选择器<u>以“#” 来定义</u>。</li><li>id标签格式只能被调用一次，唯一性（常与js使用）</li></ul><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">#ID名 &#123;<br>属性1：属性值1；<br>···<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-1-4通配符选择器"><a href="#2-1-4通配符选择器" class="headerlink" title="2.1.4通配符选择器"></a>2.1.4通配符选择器</h5><ul><li>在CSS中,通配符选择器<code>使用*定义</code>,它表示选取页面中所有元素(标签)。</li><li>标签不需要主动调用，自动会给所有元素设置该格式</li><li>特殊情况才使用,后面讲解使用场景(以下是清除所有的元素标签的内外边距)</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br><span class="hljs-attribute">margin</span>：<span class="hljs-number">0</span>；<br><span class="hljs-attribute">padding</span>：<span class="hljs-number">0</span>；<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-1-5属性选择器"><a href="#2-1-5属性选择器" class="headerlink" title="2.1.5属性选择器"></a>2.1.5属性选择器</h5><ul><li>在CSS中给类选择器**<code>添加属性修饰</code>**以设置该属性的标签的样式</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">.类名<span class="hljs-selector-attr">[name=<span class="hljs-string">&quot;user&quot;</span>]</span> &#123;<br><span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-字体属性"><a href="#3-字体属性" class="headerlink" title="3.字体属性"></a>3.字体属性</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919164322443.png" alt="image-20220919164322443"></p><h4 id="3-1字体类型"><a href="#3-1字体类型" class="headerlink" title="3.1字体类型"></a>3.1字体类型</h4><ul><li>各种字体之间必须使用英文状态下的<u>逗号隔开</u></li><li>一般情况下，如果有<u>空格隔开的多个单词组成的字体加引号</u>.</li><li>尽量使用系统默认自带字体,保证在任何用户的浏览器中都能正确显示</li><li>开发常见字体：<code>‘Microsoft YaHei&#39;,tahoma,arial, &#39;Hiragino Sans GB&#39;</code>;</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.classname</span> &#123;<br><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>,tahoma,arial, <span class="hljs-string">&#x27;Hiragino Sans GB&#x27;</span>;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">font-weight</span>: normal/bold/bolder/lighter/number;<br><span class="hljs-attribute">font-style</span>: normal/italic;<br><span class="hljs-attribute">font</span>: font-styLe font-weight font-size/line-height font-family; <br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2字体大小"><a href="#3-2字体大小" class="headerlink" title="3.2字体大小"></a>3.2字体大小</h4><ul><li><p>px(像素)大小是我们网页的最常用的单位</p></li><li><p>谷歌浏览器默认的文字大小为16px</p></li><li><p>不同浏览器可能默认显示的字号大小不一致,我们尽量给个明确值大小,不要默认大小</p></li><li><p>可以给body指定整个页面文字的大小，但标题标签要单独设置大小</p><h4 id="3-3字体粗细"><a href="#3-3字体粗细" class="headerlink" title="3.3字体粗细"></a>3.3字体粗细</h4></li><li><p>100~900（400 等同于normal,而700等同于bold,注意这个数字后面不跟单位)</p></li><li><p>bold(字体加粗)</p></li><li><p>bolder(字体特粗)</p></li><li><p>lighter(字体变细)</p></li></ul><h4 id="3-4文字样式"><a href="#3-4文字样式" class="headerlink" title="3.4文字样式"></a>3.4文字样式</h4><ul><li>normal默认值，浏览器会显示标准的字体样式font-style: normal;</li><li>italic浏览器会显示斜体的字体样式。</li></ul><h4 id="3-5字体复合属性"><a href="#3-5字体复合属性" class="headerlink" title="3.5字体复合属性"></a>3.5字体复合属性</h4><ul><li>使用font属性时,必须按上面语法格式中的顺序书写，<u><code>不能更换顺序</code></u>，并且各个属性间以<code>空格隔开</code></li><li>不需要设置的属性可以省略(取默认值) , 但<code>必须保留font-size和font-family属性</code>,否则font属性将不起作用</li></ul><h3 id="4-文本属性"><a href="#4-文本属性" class="headerlink" title="4.文本属性"></a>4.文本属性</h3><h4 id="4-1文本颜色"><a href="#4-1文本颜色" class="headerlink" title="4.1文本颜色"></a>4.1文本颜色</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919201737750.png" alt="image-20220919201737750"></p><h4 id="4-2对其文本"><a href="#4-2对其文本" class="headerlink" title="4.2对其文本"></a>4.2对其文本</h4><p><u>以本身所占据的空间进行对其调整</u></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927225953748.png" alt="image-20220927225953748"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3装饰文本"><a href="#4-3装饰文本" class="headerlink" title="4.3装饰文本"></a>4.3装饰文本</h4><p>text-decoration属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>text- decoration: underline;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927231333931.png" alt="image-20220927231333931"></p><h4 id="4-4文本缩进"><a href="#4-4文本缩进" class="headerlink" title="4.4文本缩进"></a>4.4文本缩进</h4><ul><li><p><strong>text-indent</strong>属性用来指定文本的<u>第一行的缩进</u>,通常是将段落的首行缩进。</p></li><li><p><strong>em</strong>是一个相对单位,就是当前元素(font-size) 1个文字的大小，如果当前元素没有设置大小,则会按照父元素的1个文字大小。</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">P</span>&#123;<br><span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;//或者<span class="hljs-number">10px</span> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5行间距"><a href="#4-5行间距" class="headerlink" title="4.5行间距"></a>4.5行间距</h4><p><strong>line-height</strong>属性用于设置行间的距离(行高)。可以控制文字行与行之间的距离.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">26px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927232624388.png" alt="image-20220927232624388"></p><h3 id="5-引入方式"><a href="#5-引入方式" class="headerlink" title="5.引入方式"></a>5.引入方式</h3><h4 id="1-行内式"><a href="#1-行内式" class="headerlink" title="1.行内式"></a>1.行内式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:black;&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;padding:30px;&quot;</span>&gt;</span>Hostinger Tutorials<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;&quot;</span>&gt;</span>Something usefull here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>行内样式表(内联样式表)是在元素标签内部的style属性中设定CSS样式。<strong>适合于修改简单样式</strong>.</li><li>style实就是标签的属性</li><li>在双引号中间,写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li></ul><h4 id="2-内嵌式"><a href="#2-内嵌式" class="headerlink" title="2.内嵌式"></a>2.内嵌式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:white; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> &#123;<span class="hljs-attribute">display</span>: block; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#button-go</span>, <span class="hljs-selector-id">#button-back</span> &#123;<span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> black;&#125;</span><br><span class="language-css"></span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>标签理论上可以放在HTML文档的任何地方,但一般会放在文档的标签中</p></li><li><p>通过此种方式,可以防便控制当前整个页面中的元素样式设置</p></li><li><p>代码结构清晰,但是并没有实现结构与样式完全分离</p></li></ul><h4 id="3-外联式"><a href="#3-外联式" class="headerlink" title="3.外联式"></a>3.外联式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-调试工具"><a href="#6-调试工具" class="headerlink" title="6.调试工具"></a>6.调试工具</h3><ul><li><strong>Ctr|+滚轮</strong> 可以放大开发者工具代码大小。</li><li>左边是HTML元素结构,右边是CSS样式。</li><li>右边CSS样式可以改动数值(<strong>左右箭头</strong>或者<strong>直接输入</strong>)和查看颜色。</li><li><strong>Ctrl + 0</strong>复原浏览器大小。</li><li>如果点击元素,发现右侧没有样式引入，极有可能是类名或者样式引入错误。</li><li>如果有样式,但是样式前面有<strong>黄色叹号</strong>提示,则是样式<strong>属性书写错误</strong>。</li></ul><h3 id="7-综合案例"><a href="#7-综合案例" class="headerlink" title="7.综合案例"></a>7.综合案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"> * @Author: Alleyf 3035581811@qq.com</span><br><span class="hljs-comment"> * @Github: https://github.com/Alleyf</span><br><span class="hljs-comment"> * @QQ: 3035581811</span><br><span class="hljs-comment"> * @Signature: You know more，you know less</span><br><span class="hljs-comment"> * @Date: 2022-10-15 22:52:30</span><br><span class="hljs-comment"> * @LastEditors: Alleyf 3035581811@qq.com</span><br><span class="hljs-comment"> * @LastEditTime: 2022-10-16 00:35:46</span><br><span class="hljs-comment"> * @FilePath: \My_practice\ch3\综合案例\indexdemo.html</span><br><span class="hljs-comment"> * Copyright (c) 2022 by Alleyf 3035581811@qq.com, All Rights Reserved. </span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/index.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">font</span>: <span class="hljs-number">16px</span>/<span class="hljs-number">28px</span> <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>cssdemo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tit&quot;</span>&gt;</span>北方高温明日达鼎盛 京津冀多地地表温度将超60℃<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;t&quot;</span>&gt;</span><br>            2019-07-03 16:31:47 来源:<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://static-3278ff2a-e80b-46df-b1f9-2d88301455e3.bspapp.com/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net&quot;</span>&gt;</span>黑洞<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入查询条件...&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;搜索&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        中国天气网讯 今天（3日），华北、黄淮多地出现高温天气，截至下午2点，北京、天津、郑州等地气温突破35℃。预报显示，今后三天（3-5日），这一带的高温天气将继续发酵，高温范围以及强度将在4日达到鼎盛，预计北京、天津、石家庄、济南等地明天的最高气温有望突破38℃，其中北京和石家庄的最高气温还有望创今年以来的新高。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br>        气温41.4℃！地温66.5！北京强势迎七月首个高温日<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../images/pic.jpeg&quot;</span> /&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        今天，华北、黄淮一带的高温持续发酵，截至今天下午2点，陕西北部、山西西南部、河北南部、北京、天津、山东西部、河南北部最高气温已普遍超过35℃。大城市中，北京、天津、郑州均迎来高温日。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        在阳光暴晒下，地表温度也逐渐走高。今天下午2点，华北黄淮大部地区的地表温度都在50℃以上，部分地区地表温度甚至超过60℃。其中，河北衡水地表温度高达68.3℃，天津站和北京站附近的地表温度分别高达66.6℃和66.5℃。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br>        明日热度再升级！京津冀携手冲击38℃+<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        中国天气网气象分析师王伟跃介绍，明天（4日），华北、黄淮地区35℃以上的高温天气还将继续升级，并进入鼎盛阶段，高温强度和范围都将发展到最强。 明天，北京南部、天津大部、河北中部和南部、山东中部和西部、山西南部局地、河南北部、东北部分地区的最高气温都将达到或超过35℃。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        不过，专家提醒，济南被雨水天气完美绕开，因此未来一周，当地的高温还会天天上岗。在此提醒当地居民注意防暑降温，防范持续高温带来的各种不利影响。（文/张慧 数据支持/王伟跃 胡啸 审核/刘文静 张方丽）<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span><br>        本文来源：中国天气网 责任编辑：刘京_NO5631<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="ch2-筑基"><a href="#ch2-筑基" class="headerlink" title="ch2 筑基"></a>ch2 筑基</h2><h3 id="1-Emmet语法"><a href="#1-Emmet语法" class="headerlink" title="1.Emmet语法"></a>1.Emmet语法</h3><ol><li>快速生成html标签</li></ol><ul><li>生成标签直接输入<strong>标签名按tab键</strong>即可比如div 然后tab键，就可以生成<div> </div></li><li>如果想要生成多个相同标签加上<em>就可以了比如*<em>div*3</em></em> 就可以快速生成3个div</li><li>如果有父子级关系的标签,可以用&gt;比如<strong>ul&gt;li</strong>就可以了</li><li>如果有兄弟关系的标签,用+就可以了比如<strong>div+p</strong></li><li>如果生成带有类名或者id名字的，直接写**.demo<strong>或者</strong>#two** <strong>tab键</strong>就可以了</li><li>如果生成的div类名是有顺序的，可以用<strong>自增符号$</strong></li><li>如果想要在生成的标签**内部写内容可以用{}**表示</li></ul><ol start="2"><li>快速生成css样式</li></ol><p>CSS基本采取<strong>简写形式</strong>即可.</p><blockquote><ul><li>比如w200 按tab可以生成width: 200px;</li></ul></blockquote><blockquote><ul><li>比如Ih26按tab 可以生成line-height: 26px;</li></ul></blockquote><h3 id="2-复合选择器"><a href="#2-复合选择器" class="headerlink" title="2.复合选择器"></a>2.复合选择器</h3><h3 id="3-元素显示模式"><a href="#3-元素显示模式" class="headerlink" title="3.元素显示模式"></a>3.元素显示模式</h3><h3 id="4-背景"><a href="#4-背景" class="headerlink" title="4.背景"></a>4.背景</h3><h3 id="5-三大特性"><a href="#5-三大特性" class="headerlink" title="5.三大特性"></a>5.三大特性</h3><h3 id="6-注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h3><hr><h1 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h1><p><a href="https://github.com/Alleyf">版权归属: Alleyf</a></p>]]></content>
    
    
    <categories>
      
      <category>Front_end_development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>h5</tag>
      
      <tag>css</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NoteBook_notes</title>
    <link href="/2022/09/10/NoteBook/"/>
    <url>/2022/09/10/NoteBook/</url>
    
    <content type="html"><![CDATA[<h1 id="NoteBook"><a href="#NoteBook" class="headerlink" title="NoteBook"></a>NoteBook</h1><h2 id="1-notebook快捷键"><a href="#1-notebook快捷键" class="headerlink" title="1.notebook快捷键"></a>1.notebook快捷键</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><img src="https://ai-studio-static-online.cdn.bcebos.com/3a9f826518cb42e89965641e4eea9a289dbcce74862e4335ba8738d978e37fc2" alt="img" style="zoom: 50%;" /><h3 id="编辑模式快捷键"><a href="#编辑模式快捷键" class="headerlink" title="编辑模式快捷键"></a>编辑模式快捷键</h3><img src="https://ai-studio-static-online.cdn.bcebos.com/968cf800086a47129fdda653891c170a1c9b1248296747aeaa766bb5cef2932c" alt="img" style="zoom: 50%;" /><h2 id="2-持久化安装（安装到外部库文件夹）"><a href="#2-持久化安装（安装到外部库文件夹）" class="headerlink" title="2.持久化安装（安装到外部库文件夹）"></a>2.持久化安装（安装到外部库文件夹）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建文件夹</span><br>mkdir /home/aistudio/external-libraries <br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装BeautifulSoup4包到外部库</span><br>pip install beautifulsoup4 -t /home/aistudio/external-libraries<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">添加环境变量</span><br>import sys<br>sys.path.append(&#x27;/home/aistudio/external-libraries&#x27;)<br></code></pre></td></tr></table></figure><h2 id="3-Magic命令"><a href="#3-Magic命令" class="headerlink" title="3.Magic命令"></a>3.Magic命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#显示全部可用的Magic命令</span><br>%lsmagic<br><span class="hljs-comment">#%env：设置环境变量</span><br>%env OMP_NUM_THREADS=<span class="hljs-number">4</span><br><span class="hljs-comment">#使用Magic命令来统计运行时长</span><br><span class="hljs-keyword">import</span> random<br><br>%%timeit<br><br>prize = <span class="hljs-number">0</span> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    roll = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">if</span> roll%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        prize += roll<br>    <span class="hljs-keyword">else</span>:<br>        prize -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#直接嵌入可视化内容</span><br>%matplotlib inline<br>%config InlineBackend.figure_format = <span class="hljs-string">&#x27;retina&#x27;</span><br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">300</span>)<br><span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>):<br>    plt.plot(x, np.sin(np.pi*x)*np.sin(<span class="hljs-number">2</span>*w*np.pi*x))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#%run或者二!python均可执行指定路径的python文件</span><br>%run <span class="hljs-built_in">print</span>.py<br>!python <span class="hljs-built_in">print</span>.py<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#%%writefile and %pycat: 导出cell内容/显示外部脚本的内容</span><br>%pycat SaveToPythonCode.py <span class="hljs-comment">#将文件打开展示在cell中</span><br>%%writefile SaveToPythonCode.py <span class="hljs-comment">#重写文件为cell中的内容并保存</span><br><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>):<br>    flag=<span class="hljs-number">1</span><br>    k=<span class="hljs-built_in">int</span>(sqrt(i))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,k+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i%j==<span class="hljs-number">0</span>:<br>            flag=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span>(flag):<br>            <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#PDB调试代码</span><br><span class="hljs-comment">#Notebook自带一个调试器, 叫The Python Debugger (pdb)，我们来看看它是如何工作的</span><br>%pdb<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    inputnumber = x.__str__()<br>    reversedStr = inputnumber[::-<span class="hljs-number">1</span>]<br>    strOriLen = <span class="hljs-built_in">len</span>(reversedStr)<br>    result = <span class="hljs-built_in">list</span>()<br>    flag = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, strOriLen):<br>        <span class="hljs-keyword">if</span> i == (strOriLen -<span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> reversedStr[i] == <span class="hljs-string">&#x27;-&#x27;</span> :<br>            flag = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            result.append(reversedStr[i])<br>    outputs = <span class="hljs-string">&#x27;&#x27;</span>.join(result)<br>    outputInt = <span class="hljs-built_in">int</span>(outputs)        <br>     <br>    outputInt = outputInt * flag<br>        <br>    <span class="hljs-keyword">if</span> outputInt &gt; <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)-<span class="hljs-number">1</span>  <span class="hljs-keyword">or</span> outputInt &lt; -<span class="hljs-number">1</span> * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>):<br>        outputInt = <span class="hljs-number">0</span><br>        <br>    <span class="hljs-keyword">return</span> outputInt<br><br><span class="hljs-built_in">print</span>(reverse(<span class="hljs-number">134</span>))<br></code></pre></td></tr></table></figure><h2 id="PDB命令（python3-7及以上自带的调试器，ipdb为彩色的交互）"><a href="#PDB命令（python3-7及以上自带的调试器，ipdb为彩色的交互）" class="headerlink" title="PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）"></a>PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）</h2><ul><li><p><strong>pdb.set_trace():设置断点</strong></p></li><li><p><strong>n（next）:执行下一步</strong></p></li><li><p><strong>p（print）data :打印data</strong></p></li><li><p><strong>l（ls）：显示当前代码</strong></p></li><li><p><strong>q（quit）：强制中断退出</strong></p></li><li><p><strong>b（break）LineNumber：调试中给指定位置设置断点</strong></p></li><li><p><strong>variable = value:动态分配变量</strong></p></li><li><p><strong>c（continue）：继续运行至结束</strong></p></li><li><p><strong>r（return）：运行至子程序结束</strong></p></li><li><p><strong>a（args）：打印当前函数参数</strong></p></li><li><p><strong>ENTER（回车）：重复上次命令</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>PaddleIDE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NoteBook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python_Notes</title>
    <link href="/2022/09/10/Python_Notes/"/>
    <url>/2022/09/10/Python_Notes/</url>
    
    <content type="html"><![CDATA[<hr><p><u>**/**为浮点除，返回一个浮点数</u></p><p><u>**//**为整除，返回一个向下取整的整数</u></p><h1 id="math-模块"><a href="#math-模块" class="headerlink" title="math 模块"></a>math 模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(math.ceil(<span class="hljs-number">4.1</span>))   <span class="hljs-comment">#返回数字的上入整数</span><br><br><span class="hljs-built_in">print</span>(math.floor(<span class="hljs-number">4.9</span>))  <span class="hljs-comment">#返回数字的下舍整数</span><br><br><span class="hljs-built_in">print</span>(math.fabs(-<span class="hljs-number">10</span>))   <span class="hljs-comment">#返回数字的绝对值</span><br><br><span class="hljs-built_in">print</span>(math.sqrt(<span class="hljs-number">9</span>))     <span class="hljs-comment">#返回数字的平方根</span><br><br><span class="hljs-built_in">print</span>(math.exp(<span class="hljs-number">1</span>))      <span class="hljs-comment">#返回e的x次幂</span><br><br></code></pre></td></tr></table></figure><hr><h1 id="random-模块"><a href="#random-模块" class="headerlink" title="random 模块"></a>random 模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>ran = random.random()<span class="hljs-comment">#产生0到1直接的浮点数</span><br><span class="hljs-built_in">print</span>(ran)<br><br><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;------- 设置种子 seed -------&quot;</span>)<br>random.seed(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Random number with seed 10 : &quot;</span>, random.random())<br><span class="hljs-comment"># 生成同一个随机数</span><br>random.seed(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Random number with seed 10 : &quot;</span>, random.random())<br><br><br>ran = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>)<span class="hljs-comment">#生成1到20之间的随机数</span><br><span class="hljs-built_in">print</span>(ran)<br></code></pre></td></tr></table></figure><hr><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;I&#x27;m going to the movies&#x27;&#x27;&#x27;</span>)<br><span class="hljs-comment">#输出结果所见即所得包括所有符号全部打印出来</span><br>html = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span><br><span class="hljs-string">Friends CGI Demo&lt;/TI TLE&gt;&lt;/HEAD&gt;</span><br><span class="hljs-string">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span><br><span class="hljs-string">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span><br><span class="hljs-string">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span><br><span class="hljs-string">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span><br><span class="hljs-string">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(html)<br></code></pre></td></tr></table></figure><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#声明一个空列表</span><br>girls = []<br><br><span class="hljs-comment">#append(),末尾追加</span><br>girls.append(<span class="hljs-string">&#x27;杨超越&#x27;</span>)<br><span class="hljs-built_in">print</span>(girls)<br><span class="hljs-comment">#extend(),一次添加多个。把一个列表添加到另一个列表 ，列表合并。</span><br>models = [<span class="hljs-string">&#x27;刘雯&#x27;</span>,<span class="hljs-string">&#x27;奚梦瑶&#x27;</span>]<br>girls.extend(models)<br><span class="hljs-comment">#girls = girls + models</span><br><span class="hljs-built_in">print</span>(girls)<br><span class="hljs-comment">#insert():指定位置添加</span><br>girls.insert(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;虞书欣&#x27;</span>)<br><span class="hljs-built_in">print</span>(girls)<br><br><span class="hljs-comment">#列表删除</span><br>words = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;pen&#x27;</span>,<span class="hljs-string">&#x27;pencil&#x27;</span>,<span class="hljs-string">&#x27;ruler&#x27;</span>]<br><span class="hljs-keyword">del</span> words[<span class="hljs-number">1</span>]<br>words.remove(<span class="hljs-string">&#x27;cat&#x27;</span>)<span class="hljs-comment">#删除指定元素</span><br>words.pop(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(words)<br><br><span class="hljs-comment">#列表排序</span><br><span class="hljs-comment">#默认升序</span><br>new_list = <span class="hljs-built_in">sorted</span>(random_list)<br><span class="hljs-built_in">print</span>(new_list)<br><span class="hljs-comment">#降序</span><br>new_list = <span class="hljs-built_in">sorted</span>(random_list,reverse =<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(new_list)<br></code></pre></td></tr></table></figure><hr><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p><strong>注意：元组中只有一个元素时，需要在后面加逗号！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple3 = (<span class="hljs-string">&#x27;hello&#x27;</span>,)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(tuple3))<br><br><span class="hljs-comment">#元组修改</span><br>t1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)+(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>t2 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) * <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(t1,t2)<br><br><span class="hljs-comment">#相关方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(random_tuple))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(random_tuple))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(random_tuple))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(random_tuple))<br><span class="hljs-comment">#统计元组中4的个数</span><br><span class="hljs-built_in">print</span>(random_tuple.count(<span class="hljs-number">4</span>))<br><span class="hljs-comment">#元组中4所对应的下标，如果不存在，则会报错</span><br><span class="hljs-built_in">print</span>(random_tuple.index(<span class="hljs-number">4</span>))<br><br><span class="hljs-comment">#元组拆包与装包</span><br><span class="hljs-comment">##当元组中元素个数与变量个数一致时</span><br><span class="hljs-comment">#定义一个元组</span><br>t3 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment">#将元组赋值给变量a,b,c</span><br>a,b,c = t3<br><span class="hljs-comment">#打印a,b,c</span><br><span class="hljs-built_in">print</span>(a,b,c)<br><br><span class="hljs-comment">#当元组中元素个数与变量个数不一致时</span><br><span class="hljs-comment">#定义一个元组，包含5个元素</span><br>t4 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment">#将t4[0],t4[1]分别赋值给a,b;其余的元素装包后赋值给c</span><br>a,b,*c = t4<br><span class="hljs-built_in">print</span>(a,b,c)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(*c)<br></code></pre></td></tr></table></figure><hr><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#list可以转成字典，但前提是列表中元素都要成对出现</span><br>dict3 = <span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;杨超越&#x27;</span>),(<span class="hljs-string">&#x27;weight&#x27;</span>,<span class="hljs-number">45</span>)])<br><span class="hljs-built_in">print</span>(dict3)<br><br><span class="hljs-comment">#字典里的函数 items()  keys() values()</span><br>dict5 = &#123;<span class="hljs-string">&#x27;杨超越&#x27;</span>:<span class="hljs-number">165</span>,<span class="hljs-string">&#x27;虞书欣&#x27;</span>:<span class="hljs-number">166</span>,<span class="hljs-string">&#x27;上官喜爱&#x27;</span>:<span class="hljs-number">164</span>&#125;<br><span class="hljs-built_in">print</span>(dict5.items())<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> dict5.items():<br>    <span class="hljs-keyword">if</span> value &gt; <span class="hljs-number">165</span>:<br>        <span class="hljs-built_in">print</span>(key)<br>        <br>names = dict5.keys()<span class="hljs-comment">#返回一个类</span><br><span class="hljs-built_in">print</span>(names)<br>results = dict5.values()<span class="hljs-comment">#返回一个类</span><br><span class="hljs-built_in">print</span>(results)<br><br><span class="hljs-built_in">print</span>(dict5.get(<span class="hljs-string">&#x27;赵小棠&#x27;</span>,<span class="hljs-number">170</span>)) <span class="hljs-comment">#如果能够取到值，则返回字典中的值，否则返回默认值170</span><br></code></pre></td></tr></table></figure><hr><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li><p><strong>json.dumps(obj)将python对象编码成json字符串</strong></p><p>（可选参数）：</p><p>sort_keys=True表示按照字典排序(a到z)输出。</p><p>indent参数，代表缩进的位数</p><p>separators参数的作用是去掉,和:后面的空格，传输过程中数据越精简越好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>data = [ &#123; <span class="hljs-string">&#x27;b&#x27;</span> : <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span> : <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;c&#x27;</span> : <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;e&#x27;</span> : <span class="hljs-number">5</span> &#125; ]<br>json = json.dumps(data, sort_keys=<span class="hljs-literal">True</span>, indent=<span class="hljs-number">4</span>,separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))<br><span class="hljs-built_in">print</span>(json)<br></code></pre></td></tr></table></figure></li><li><p><strong>json.loads 用于解码JSON数据。该函数返回Python字段的数据类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>jsonData = <span class="hljs-string">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&#x27;</span><br>text = json.loads(jsonData)  <span class="hljs-comment">#将string转换为dict</span><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul><li><strong>try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理</strong></li><li><strong>finally中的内容，退出try时总会执行</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    fh = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;filepath&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>    fh.write(<span class="hljs-string">&quot;这是一个测试文件，用于测试异常!!&quot;</span>)<br><span class="hljs-keyword">except</span> IOError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error: 没有找到文件或读取文件失败&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;内容写入文件成功&#x27;</span>)<br>    fh.close()<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;关闭文件&#x27;</span>)<br>    f.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python,program_study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo_Command</title>
    <link href="/2022/09/10/Synthesis_Command/"/>
    <url>/2022/09/10/Synthesis_Command/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><h2 id="Synthesis-Command-Hexo"><a href="#Synthesis-Command-Hexo" class="headerlink" title="Synthesis_Command_Hexo"></a>Synthesis_Command_Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><h2 id="Synthesis-Command-Git"><a href="#Synthesis-Command-Git" class="headerlink" title="Synthesis_Command_Git"></a>Synthesis_Command_Git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add .或者git add filename<br>$ git commit -m <span class="hljs-string">&quot;推送注释内容&quot;</span><br>$ git push (origin main)(main为分支)<br></code></pre></td></tr></table></figure><h2 id="Synthesis-Command-bash"><a href="#Synthesis-Command-bash" class="headerlink" title="Synthesis_Command_bash"></a>Synthesis_Command_bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#让linux的jyputer notebook服务一直运行</span><br><span class="hljs-built_in">nohup</span> jupyter notebook --allow-root &amp;<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Command</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java_Notes</title>
    <link href="/2022/09/10/Java%20Notes/"/>
    <url>/2022/09/10/Java%20Notes/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章、计算机语言及系统概述"><a href="#第一章、计算机语言及系统概述" class="headerlink" title="第一章、计算机语言及系统概述"></a>第一章、计算机语言及系统概述</h1><p><u><strong>前言：</strong></u></p><blockquote><p>无论学习任何语言都要先理解每个知识点本身，在此基础上勤加练习，只有练习的越多，才能掌握对应的要点，练习实践过程中会发现一些未可知意外的问题，不断发现问题解决问题，从而扩充自己的知识面，本篇笔记仅仅是Java入门基础，还有很多深层次内容需要靠自己进一步学习，在这里祝愿大家都能有所收获，成为一名优秀的开发者！</p></blockquote><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><ol><li><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907091018.png" style="zoom:50%;" /></li><li>特点：<strong>Write once，run anywhere！</strong></li></ol><ul><li><strong>java：java program-&gt;执行编译后的程序</strong></li><li> <strong>javac：java program.java-&gt;编译该程序生成.class文件</strong></li><li> <strong>javadoc：javadoc program-&gt;生成该程序的html文档</strong></li></ul><ol start="3"><li><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135804.png" style="zoom:50%;" /></li><li><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135836.png" style="zoom: 50%;" align="middle" /></li></ol><hr><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="第二章、数据类型及变量"><a href="#第二章、数据类型及变量" class="headerlink" title="第二章、数据类型及变量"></a>第二章、数据类型及变量</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135908.png" style="zoom:33%;"  align="middle"/><blockquote><ul><li><p>标识符必须以**”字母”、下划线”_”、美元符”$”**开头.</p></li><li><p>标识符其它部分可以是字母、下划线“_”、美元符“$”和<strong>数字</strong>的任意组合。</p></li><li><p>Java 标识符<strong>大小写敏感</strong>，且<strong>长度无限制</strong>,但不可以是Java的关键字。</p></li><li><p>Java 采用<strong>16位Unicode</strong>.</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DefineKey</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> _j=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> $k=<span class="hljs-number">2</span>;<br><span class="hljs-comment">//        int 1i=0;(NO)</span><br><span class="hljs-comment">//        int 中国=1;(不建议)</span><br>        <span class="hljs-type">byte</span> a=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">double</span> b=<span class="hljs-number">0.1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221031085020005.png" alt="字符集" style="zoom: 50%;" /><ol><li>ISO8859-1 ——西欧字符集 </li><li>GB2312 ——大陆最早使用的简体中文字符集 </li><li>GBK ——GB2312 的扩展，可以表示繁体字 </li><li>GB18030 ——最新GBK的扩展，中国所有非手持/嵌入式计算机系统的强制性实施标准。可以表示汉字、 维吾尔文、藏文等中华民族字符 </li><li>BIG5 ——台湾的五大码，表示繁体字 </li><li>Unicode ——国际通用字符集</li></ol><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135913.png"  align="middle"/><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><div>    <center>    <p>        <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135920.png" style="zoom:33%;" />       </p>    </br>    <p>        <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135925.png" style="zoom:33%;" />    </p>    </br>    <p>        <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135953.png" style="zoom:33%;" />    </p></center></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">BaseData</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">123</span>;<span class="hljs-comment">//默认十进制</span><br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0123</span>;<span class="hljs-comment">//八进制</span><br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0x123</span>;<span class="hljs-comment">//16进制</span><br>    <span class="hljs-type">long</span> c=<span class="hljs-number">55555</span>;<br>    <span class="hljs-type">long</span> d=<span class="hljs-number">555555555555555L</span>;<br>    <span class="hljs-type">double</span> e=<span class="hljs-number">521e2</span>;<br>    <span class="hljs-type">char</span> f=<span class="hljs-string">&#x27;\u0064&#x27;</span>;<br>    System.out.println(f);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li>Java的整形数据类型<strong>默认为int型</strong>(4字节)，eg: long a = 55555555;<strong>a实际为整形(默认)<strong>，除非后面加</strong>l/L</strong>才为<strong>长整型</strong></li><li>Java的浮点型数据类型<strong>默认为double型</strong>(8字节)，若要用float需要在数值后面<strong>加f/F</strong>，<strong>加d/D</strong>为double型，浮点型都存在<strong>舍入误差</strong></li><li>float尾数可以精确到<strong>7位有效数字</strong>，常用double满足需求</li><li><strong>BigInteger</strong>实现了任意精度的<strong>整数运算</strong>。<strong>BigDecimal</strong> 实现了任意精度的<strong>浮点运算</strong>。</li></ul></blockquote><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135958.png" style="zoom:33%" /></div><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140005.png" style="zoom:33%" align="middle" /></div><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140009.png" style="zoom:33%" align="middle" /></div><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140012.png" style="zoom:33%" align="middle" /></div>> - **Unicode**具有从0到65535之间的编码，他们通常用从’\u0000’到’\uFFFF’ 之间的**十六进制**值来表示（前缀为u表示Unicode）>> - **boolean类型**只有一位，注意不是一个字节！<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140707.png" style="zoom: 53%" align="middle" /></div>**提升转换不丢失精度;(type)var强制类型转换会丢失精度**<p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221031195745491.png" alt="image-20221031195745491"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TypeChange</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">double</span> s=<span class="hljs-number">3.1415</span>;<br>    <span class="hljs-type">int</span> n=(<span class="hljs-type">int</span>)s;<br>    <span class="hljs-type">char</span> b=(<span class="hljs-type">char</span>)n;<br>    <span class="hljs-type">char</span> a=<span class="hljs-string">&#x27;a&#x27;</span>;<br>    String c;<br>    System.out.println(n+b);<br>    <span class="hljs-type">int</span> money=<span class="hljs-number">1000000000</span>;<span class="hljs-comment">//int型为4个字节最大为21亿，超出则异常</span><br>    <span class="hljs-type">int</span> years=<span class="hljs-number">20</span>;<br>    <span class="hljs-type">double</span> total=(<span class="hljs-type">double</span>)(money)*years;<span class="hljs-comment">//提前将其中一个整形转换为浮点型以避免精度缺失</span><br>    System.out.println(total);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><strong>实例</strong>变量：在<strong>堆</strong>中。</li><li><strong>静态</strong>变量：在<strong>方法区</strong>。</li><li><strong>局部</strong>变量：在<strong>栈</strong>中。</li></ul><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907143232.png" style="zoom:33%" align="middle" /><p>以上三大变量中：</p><p><strong>局部变量永远都不会存在线程安全问题。</strong></p><ul><li>因为局部变量不共享。（一个线程一个栈）</li><li>局部变量在<strong>栈</strong>中。所以局部变量永远都不会共享。</li></ul><ol><li>实例变量在堆中，堆只有1个。</li><li>静态变量在方法区中，方法区只有1个。</li></ol><p><strong>堆和方法区都是多线程共享的，所以可能存在线程安全问题。</strong></p><p><strong>总结：</strong></p><ul><li><strong>局部变量+常量</strong>：不会有线程安全问题。</li><li><strong>成员变量（实例+静态）</strong>：可能会有线程安全问题。</li></ul><blockquote><p>最终变量（必须初始化）：<code>final type variable=value；</code>（<strong>定义时初始化或构造函数初始化</strong>）</p></blockquote><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li><strong>只能被初始化一次</strong></li><li><strong>常量名全部大写，单词过多使用下划线</strong></li></ul><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907142721.png" style="zoom:33%" align="middle" /><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907150838.png" style="zoom:33%" align="middle" /><h2 id="输出进制格式化"><a href="#输出进制格式化" class="headerlink" title="输出进制格式化"></a>输出进制格式化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;二进制输出&quot;</span>+Integer.toBinaryString(a));<br>System.out.println(<span class="hljs-string">&quot;八进制输出&quot;</span>+Integer.toOctalString(a));<br>System.out.println(<span class="hljs-string">&quot;十六进制输出&quot;</span>+Integer.toHexString(a));<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><ul><li><p>定义：<strong>type[] arrayname = new type[num] 或  type arrayname[] = new type[num]</strong></p></li><li><p><strong>初始化默认值为零</strong></p></li><li><p><strong>数组直接赋值属于传引用，指向同一个地址空间</strong></p></li></ul><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ul><li>定义：<strong>type[][] arrayname = new type[m] [n]</strong></li><li>可以不规则，给不同行分配不同大小的列</li><li><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909084420.png" style="zoom: 33%;" align="middle"  /></li></ul><h2 id="容器遍历元素"><a href="#容器遍历元素" class="headerlink" title="容器遍历元素"></a>容器遍历元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : fib)<br>/ /vaue获得fib数组每个元素,<br>/ /相当于fib[i]<br>System.out,print(<span class="hljs-string">&quot; &quot;</span> +value);<br></code></pre></td></tr></table></figure><h2 id="方法（递归）"><a href="#方法（递归）" class="headerlink" title="方法（递归）"></a>方法（递归）</h2><ul><li><strong>递归方法适合用于分段函数类型的问题求解，必须有递归头和递归体</strong></li><li><strong>递归和堆栈原理类似，递归也可以通过堆栈实现</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//斐波那契数列第n项</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fib</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        System.out.println(sequence(<span class="hljs-number">10</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sequence</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>|n == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> n;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> sequence(n-<span class="hljs-number">2</span>)+sequence(n - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;Index error&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li><p>字符串常量“abc”</p></li><li><p>String是字符串类,属于引用数据类型</p></li><li><p><code>s.charAt(index)//索引下标的值</code></p></li><li><p>字符串变量及运算</p><ul><li><p>赋值运算</p><p>​    String str = “abc”;</p><p>​    String str2 = str;</p></li><li><p>连接运算+ +=</p><p>​    str = “abc” + “xyz”; //str的值为”abcxyz”</p></li></ul></li><li><p><strong>字符串不是字符数组</strong></p></li><li><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909093029.png" style="zoom:25%" align="middle"/></div></li></ol><h2 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h2><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909092844.png" style="zoom:25%" align="middle" /></div><hr><h1 id="第三章、类的封装、继承和多态"><a href="#第三章、类的封装、继承和多态" class="headerlink" title="第三章、类的封装、继承和多态"></a>第三章、类的封装、继承和多态</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>类的特点：<code>具有封装性，继承性，多态性和抽象性。</code></p><p>对象：<code>类的实例。</code></p><p>注：</p><ul><li>Java中进行方法调用中传递参数时，<strong>遵循值传递的原则</strong>：基本类型传递的是该数据值本身。引用类型传递的是对对象的引用，而不是对象本身。</li><li>与c++类似，类的定义和调用要分开在两个文件中，类的声明与定义在一个文件，类的调用要在另外一个文件的类中定义一个类对象: <code>classname objname=new classname()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的声明</span><br><span class="hljs-keyword">package</span> ch4;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span> &#123;<br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setname</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setage</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的调用</span><br><span class="hljs-keyword">package</span> ch4;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">callpeople</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">people</span> <span class="hljs-variable">zyk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">people</span>();<br>        <span class="hljs-type">people</span> <span class="hljs-variable">fcs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">people</span>();<br>        fcs = zyk;<br>        zyk.setname(<span class="hljs-string">&quot;赵逸坤&quot;</span>);<br>        zyk.setage(<span class="hljs-number">21</span>);<br>        System.out.println(zyk.getname()+<span class="hljs-string">&quot;今年&quot;</span>+zyk.getage()+<span class="hljs-string">&quot;岁了&quot;</span>);<br>        System.out.println(zyk);<br>        System.out.println(fcs);<br><span class="hljs-comment">//        Scanner in = new Scanner(System.in);</span><br><span class="hljs-comment">//        String name = in.next();</span><br><span class="hljs-comment">//        System.out.println(in);</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><h3 id="1构造方法和析构方法"><a href="#1构造方法和析构方法" class="headerlink" title="1构造方法和析构方法"></a>1构造方法和析构方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在类里进行定义构造方法，用this对对象引用，从而避免与形参名的冲突</span><br><span class="hljs-comment">//super为隐式参数，为对父类的引用</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">people</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//析构方法</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 对象的清理工作</span><br>&#125;<br><span class="hljs-comment">//给对象赋值为null，则对象的内存将会释放，但静态方法和变量不会释放</span><br></code></pre></td></tr></table></figure><p><strong>方法的重载：</strong></p><p><code>通过参数列表中参数的类型、个数和顺序的不同进行区别</code></p><h3 id="2对象的引用和运算"><a href="#2对象的引用和运算" class="headerlink" title="2对象的引用和运算"></a>2对象的引用和运算</h3><ul><li>instanceof对象运算符 eg：<code>d instanceof MyDate</code></li><li>super为隐式参数，为对<strong>父类的引用</strong></li><li>this为隐式参数，为对<strong>对象本身的引用</strong></li><li>普通方法中，this总是指向调用该方法的对象; 构造方法中，this总是指向正要初始化的对象；this不能用于static方法；可以在一个构造方法中通过this调用其它构造方法，且必须是构造方法中 的第一条语句</li><li>this不能用于<strong>static方法</strong></li></ul><h3 id="3访问控制-隐藏-封装"><a href="#3访问控制-隐藏-封装" class="headerlink" title="3访问控制-隐藏/封装"></a>3访问控制-隐藏/封装</h3><ul><li>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。</li><li>boolean变量的get方法是is开头；常量或static变量公开</li><li>default：默认访问控制属性，什么都没加就是该控制符。有的书上说 friendly、package，这都是一个意思，都不能真的写出来，如果什么访问修饰符都不加，就是default/friendly/package</li><li>Java的访问控制是停留在编译层，也就是它不会在.class文件中留下任何痕迹，只在编译的时候进行访问控制的检查。其实，通过反射的手段，可以访问任何包下任何类中的成员，例如，访问类中的私有成员也是可以的。说明访问控制是<code>伪封装（类似于python）</code>。</li></ul><h4 id="类的访问权限："><a href="#类的访问权限：" class="headerlink" title="类的访问权限："></a>类的访问权限：</h4><p>  <strong>只有public和缺省两种</strong></p><p>  eg：public class MyDate 或class MyDate_ex</p><h4 id="类成员和函数的访问权限："><a href="#类成员和函数的访问权限：" class="headerlink" title="类成员和函数的访问权限："></a>类成员和函数的访问权限：</h4>  <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914154845348.png" alt="image-20220914154845348" style="zoom:60%" align="middle" /><h4 id="声明set-和get-方法存取对象的属性"><a href="#声明set-和get-方法存取对象的属性" class="headerlink" title="声明set()和get()方法存取对象的属性"></a>声明set()和get()方法存取对象的属性</h4><h3 id="4静态成员"><a href="#4静态成员" class="headerlink" title="4静态成员"></a>4静态成员</h3><ul><li><p>静态成员是属于类本身的公共属性或方法。</p></li><li><p>静态成员变量也叫类属性或类变量，静态成员变量调用时可以对象.类属性或类名.类属性来访问。</p></li><li><p>静态方法调用时可以通过类名.类方法或对象.类方法调用，在调用该方法时，不会将对象的引用（this）传递给它，所以在 static 方法中不可访问非static的成员，静态方法只能访问静态成员变量或静态方法。</p></li><li><p> 父类中是静态方法，子类中不能覆盖为非静态方法；在符合覆盖规则的前提下， 在父子类中，父类中的静态方法可以被子类中的静态方法覆盖，但无多态。（在使用对象调用静态方法时，实则是<strong>调用编译时类型的静态方法</strong>）。</p></li><li><p>父子类中，<strong>静态方法</strong>只能被<strong>静态方法覆盖</strong>，父子类中，<strong>非静态方法</strong>只能被<strong>非静态方法覆盖</strong>。</p></li><li><p><strong>静态方法</strong>只能调用<strong>静态方法和成员</strong>，<strong>非静态方法</strong>可以调用<strong>所有方法和成员</strong>。</p></li></ul><h4 id="静态初始化块-static"><a href="#静态初始化块-static" class="headerlink" title="静态初始化块 static {}"></a>静态初始化块 static {}</h4><blockquote><p>注：如果希望加载后，对整个类进行某些初始化操作，可以使用static初始化块</p></blockquote><ol><li>是在类初始化时执行，不是在创建对象时执行。 </li><li>静态初始化块中不能访问非static成员变量。</li><li>执行顺序：上溯到Object类，先执行Object的静态初始化块，再向下执行子类的静态初始化块，直到我们的类的静态初始化块为止。</li></ol><hr><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><ul><li><u>通过extends父类(单继承)关键词或implements接口(多继承)</u></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span><br>&#123;<br>String speciality;<br><span class="hljs-comment">//专业</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>不支持多继承</strong></p></li><li><p>在java（C++）中类只有单继承，没有像C++那样的多继承。多继承，就是为了实现代码的复用性，却引入了复杂性，使得系统类之间的关系混乱；Java中的多继承，可以通过接口实现</p></li><li><p>如果定义一个类时，没有调用extends，则它的父类是java.lang.Object。Object类是所有java类的根基类。</p></li></ul><h3 id="1-方法的重写"><a href="#1-方法的重写" class="headerlink" title="1.方法的重写"></a>1.方法的重写</h3><ul><li><p>在子类中可以根据需要对父类中继承来的方法进行重写。</p></li><li><p>重写方法(<strong>虚函数</strong>)必须和被重写方法具有<strong>相同方法名称、参数列表、返回值</strong>。通过子类去调用该方法，会调用重写方法而不是被重写方法(叫做重写方法覆盖被重写方法)。</p></li><li><p>可以在子类重写方法中调用被重写方法: <strong>super关键字</strong>。</p></li><li><p>重写方法的<strong>访问权限</strong>，<strong>子类大于等于父类</strong>(由于多态)。</p></li><li><p>重写方法的<strong>返回值类型和声明异常类型</strong>，<strong>子类小于等于父类</strong>。</p></li><li><p>对象.方法() :先在本类内部找是否有该方法，如果没有，到直接父类去找,如果还没有，则一直往上层找，一直找到Object，如果还没有，则报错。</p></li><li><p>子类继承父类的成员变量,子类继承父类除构造方法以外的成员方法,子类不<strong>能继承父类的构造方法</strong>,子类可以增加成员，可以重定义从父类继承来的成员，但不能删除它们。</p></li></ul><h3 id="2-子类对父类的访问权限"><a href="#2-子类对父类的访问权限" class="headerlink" title="2.子类对父类的访问权限"></a>2.子类对父类的访问权限</h3><ul><li><p>子类<strong>不能访问</strong>父类的<strong>私有成员</strong>( private )</p></li><li><p>子类<strong>能够访问</strong>父类的<strong>公有成员</strong>( public)和<strong>保护成员</strong>(protected)和<strong>缺省成员</strong></p></li><li><p>子类对父类的缺省权限成员的访问控制，以包为界分两种情况，可以访问当前包中成员。</p></li></ul><h3 id="3-super引用"><a href="#3-super引用" class="headerlink" title="3.super引用"></a>3.super引用</h3><ol><li><p>调用父类的构造方法：super([参数列表])</p></li><li><p>super是直接父类对象的特征。</p></li><li><p>引用父类同名成员</p><ul><li><p>子类隐藏父类成员变量：super.成员变量</p></li><li><p>子类覆盖父类成员方法：super.成员方法([参数列表])</p></li></ul></li><li><p>构造方法:任何类的构造方法中，若是构造函数的第一行代码<strong>没有显式调用super</strong>(..);那么<strong>Java默认都会调用super()</strong>;作为父类的初始化函数。所以这里的super()加不加都会无所谓。( 内存分析，wrap:new对象的时候采用子类包裹父类的结构)</p></li><li><p>同一个构造方法里面**不能同时调用super()和this()**。</p></li><li><p>在本类构造方法中通过super()调用，会一直上溯到Object()这个构造函数,然后按类层级，依次向下执行各层级构造函数中剩下的代码，直至最低层级的构造函数。同this()一样，super()方法也应该放到构造方法的第一行。</p></li><li><p>new一个类的对象的时候，通过构造方法的从上至下的依次调用，就依次建立了新的根对象、父类对象和自身对象，其中，this指向新建的对象本身，super指向新建的直接父类对象本身。</p></li></ol><h3 id="4-组合VS继承"><a href="#4-组合VS继承" class="headerlink" title="4.组合VS继承"></a>4.组合VS继承</h3><ol><li><p>“is-a”关系使用继承，“has-a”关系使用组合:计算机类、主板类。可以通过在计算机类中增加主板属性来复用主板类的代码。</p></li><li><p>如果仅仅从代码复用的角度考虑，组合完全可以替代继承。</p></li><li><p>所谓组合，就是把要组合的另一个类作为属性放到类里面。</p></li><li><p><strong>是就用继承、有就用组合</strong>。</p></li></ol><h4 id="优缺点对比"><a href="#优缺点对比" class="headerlink" title="优缺点对比"></a>优缺点对比</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916083605738.png" alt="image-20220916083605738"></p><h2 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h2><h3 id="1-子类重定义父类成员"><a href="#1-子类重定义父类成员" class="headerlink" title="1.子类重定义父类成员"></a>1.子类重定义父类成员</h3><ul><li>子类隐藏父类成员变量</li><li>子类覆盖父类成员方法<ul><li>覆盖(override)是指子类声明并实现父类中的同名方法并且参数列表也完全相同。子类继承并重载父类成员方法</li><li>重载.(overload)是指同一个类中的多个方法可以同名但参数列表必须不同。</li></ul></li></ul><h3 id="2-类型的多态"><a href="#2-类型的多态" class="headerlink" title="2.类型的多态"></a>2.类型的多态</h3><ul><li><p>子类对象即是父类对象</p><p><code>new Student() instanceof Person //true</code></p><p><code>new Person() instanceof Student //false</code></p></li><li><p>父类对象引用子类对象</p><p><code>Person p = new Student(); / /赋值相容</code><br><code>Student s = new Person();//语法错误</code><br><code>Object obj = new Person();/ /赋值相容</code></p></li></ul><h3 id="3-编译时的多态和运行时的多态"><a href="#3-编译时的多态和运行时的多态" class="headerlink" title="3.编译时的多态和运行时的多态"></a>3.编译时的多态和运行时的多态</h3><ul><li><p>编译时多态性</p><p><u>方法<strong>重载</strong>都是<strong>编译时多态</strong>。</u></p><p><u>方法覆盖(重写)表现出两种多态性，当<strong>对象引用本类实例</strong>时，为<strong>编译时多态</strong>，否则为<strong>运行时多态</strong>。</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(.....);<br>p.toString()<br><span class="hljs-comment">//执行Person类的toString()</span><br>Student s= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Studen</span>(.....);<br>s.toString()<br><span class="hljs-comment">//执行Student类的toString()</span><br></code></pre></td></tr></table></figure></li><li><p>运行时多态性</p><p><u>自下而上搜索，<strong>有则调用无责溯源</strong></u></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916085315869.png" alt="image-20220916085315869"></p></li></ul><h3 id="4-多态的方法实现"><a href="#4-多态的方法实现" class="headerlink" title="4.多态的方法实现"></a>4.多态的方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">设<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Person p)</span> <br>① 子类若<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Student s)</span> <span class="hljs-comment">//重载</span><br>则s1.equals(p1) <span class="hljs-comment">//继承，执行父类对象比较规则</span><br>s2.equals(s1) <span class="hljs-comment">//重载，执行子类对象比较规则</span><br>结论：不必要，因为Person参数可接受Student实例。<br>② 子类若<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Person p)</span> <span class="hljs-comment">//覆盖</span><br></code></pre></td></tr></table></figure><blockquote><p><code>多态存在条件</code>：</p><p><strong>:one:要有继承</strong>；</p><p><strong>:two:子类要有方法重写</strong>；</p><p><strong>:three:父类引用指向子类对象</strong>。</p></blockquote><h3 id="5-方法的多态性总结"><a href="#5-方法的多态性总结" class="headerlink" title="5. 方法的多态性总结"></a>5. 方法的多态性总结</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921141638509.png" alt="image-20220921141638509"></p><ul><li><p><strong>子类类型的对象地址</strong>可以直接<strong>赋给父类类型</strong>的<strong>引用对象</strong>，这个称为<strong>向上转型</strong>，是实现多态的基础。</p></li><li><p><strong>引用类型的强制转型</strong>，适用于<strong>将父类类型向下强制转换为子类类型</strong>。 不同类型之间不能强制转型（编译不通过）</p></li><li><p>A instanceof B: A对象的类型是否是B类型，只有在A对象的类型和B类型相同，或为父子类型时，编译不报错。而在运行时，只有A对象类型为B类型的子类型或者就是B类型时，结果才返回true。</p></li><li><p>内存分析(例子: myServlet) :调用父类的service(),然后调用子类的doGet() (注意: this关键字指向整个最终包裹对象，即最外层的子对象;而在包裹对象中，每一层对象通过super关键字指向内一层的父对象)。</p></li><li><p><strong>多态指的是方法的多态</strong>(到底调用那个方法，运行时决定)，属性没有多态。</p></li><li><p>针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</p></li><li><p><strong>重写的方法</strong>都是<strong>虚方法</strong>，根据<strong>实际</strong>调用<strong>对象的实例</strong>的类型来<strong>动态决定</strong>的。</p></li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921145517282.png" alt="image-20220921145517282"></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClosedFigure</span><br><span class="hljs-comment">//闭合图形抽象类</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">( )</span>;<br><span class="hljs-comment">//计算面积，抽象方法，以分号&quot;;&quot;结束</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><u><strong>构造方法、静态成员方法</strong></u>不能被声明为<strong>抽象方法</strong>。</li><li>一个<strong>非抽象类</strong>必须<strong>实现</strong>从父类继承来的<strong>所有抽象方法</strong>。</li><li><strong>不能</strong>创建抽象类的<strong>实例</strong>。例如:<code>ClosedFigure g = new ClosedFigure();</code> </li><li><u>abstract修饰方式的初衷就是要求其子类覆盖(实现)这个方法，并且调用时可以以多态方式调用子类覆盖后的方法(抽象类主要和多态技术相结合)</u>，即抽象方法必须在其子类中实现，除非子类本身也是抽象类。<u>abstract不允许修饰成员变量</u>，因为成员变量也没有重写这个概念!</li><li><strong>抽象类</strong>可以<strong>只有具体方法</strong>，也可以<strong>全是抽象方法</strong>，子类继承抽象类也可以是抽象类，但要实例化的类不能是抽象类。</li><li>:star:不能放在一起的修饰符: <u><strong>final和abstract</strong>, <strong>private和abstract</strong>, <strong>static和abstract</strong></u>，因为abstract修饰的方法是必须在其子类中实现(覆盖)，才能以多态方式调用，以上修饰符在修饰方法时期子类都覆盖不了这个方法，<u><strong>final是不可以覆盖</strong></u>，**<u>private是不能</u><u>够继承到子类</u><strong>，所以也就不能覆盖，<u><strong>static是可以覆盖的</strong>，但是在</strong>调用时会调用编译时类型的方法<strong>，因为调用的是父类的方法，而父类的方法又是</strong>抽象的方法<strong>，又</strong>不能够调用**</u>，所以上面的修饰符不能放在一起。</li></ol><h2 id="最终类"><a href="#最终类" class="headerlink" title="最终类"></a>最终类</h2><ol><li><p>声明<strong>最终类</strong>， <strong>不能被继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Math</span><br><span class="hljs-comment">//数学类，最终类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMath</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Math</span><br><span class="hljs-comment">//语法错</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Ellipse</span> / /最终类<br></code></pre></td></tr></table></figure></li><li><p>声明<strong>最终方法</strong>,<strong>不能被子类覆盖</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Ellipse</span><br><br>/ /非最终类<br><br>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">( )</span><br><br><span class="hljs-comment">//最终方法</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="final关键词"><a href="#final关键词" class="headerlink" title="final关键词"></a>final关键词</h3><ol><li>final修饰变量时表示常量。<u>变量被final修饰，就会变成常量</u>(常量应大写)，一旦赋值不能改变(可以在<u><strong>初始化时直接赋值</strong></u>，也可以在<u><strong>构造方法里赋值</strong></u>，只能在这两种方法里二选一，<u>必须为常量赋值</u>) ;final的常量不会有默认初始值，对于直接在初始化时赋值方式，final修饰符常和static修饰符一起使用。</li><li>final修饰方法(最终方法)时表示<u>该方法<strong>不可被子类重写</strong></u>。但是<u><strong>可以被重载</strong></u>。</li><li><u>final修饰类</u>(最终类)时表示修饰的<u>类<strong>不能有子类</strong></u>，<strong>不能被继承</strong>。比如Math、String。 final类中的方法也都是final的。</li></ol><h2 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h2><p><u>如果一个抽象类没有字段，所有方法全部都是抽象方法，就可以将该抽象类改为接口。</u></p><p>类不能多继承类，但可以实现多个接口，一个接口可以继承多个接口。</p><p>接口可以看成<u><strong>狭义抽象</strong></u>，将设计与实现彻底分离。</p><p>通过给类新增接口来改变类，而不影响子类。</p><p><strong>接口不能有构造方法</strong>，抽象类可以有。</p><p>接口可以定义<code>default</code>方法（有方法实体，子类可以不用重写）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> ;<br>String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p>类实现接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//规定下面的编译为重写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; run&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象类和接口的对比"><a href="#抽象类和接口的对比" class="headerlink" title="抽象类和接口的对比"></a>抽象类和接口的对比</h3><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921155545894.png" alt="image-20220921155545894" style="zoom: 80%" align="middle" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Xiao Ming&quot;</span>);<br>        p.run();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot; run&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口与抽象的区别"><a href="#接口与抽象的区别" class="headerlink" title="接口与抽象的区别"></a>接口与抽象的区别</h3><ul><li><p>接口不能有方法体(<strong>除default</strong>)，抽象类可以有。</p></li><li><p>接口<strong>可以有静态方法但必须实现方法体</strong>，抽象类可以有。</p></li><li><p>在接口中凡是变量必须是<strong>public static final</strong>,而在抽象类中没有要求。</p></li><li><p>抽象类本质上还是一个类，子类是用关键字extends来继承它，并扩展的，有非常强的is-a的关系。而接口，是被其他类用关键字implements来实现接口定义的方法的。接口只是定义功能和行为规范，如果一个类实现了一个接口，那么这个类必须遵守这个接口的方法约定，但没有is-a的关系。</p></li></ul><h2 id="内部类和内部接口"><a href="#内部类和内部接口" class="headerlink" title="内部类和内部接口"></a>内部类和内部接口</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923082921856.png" alt="image-20220923082921856"></p><ul><li><p>内嵌类型<strong>不能</strong>与外层类型<strong>同名</strong>。</p></li><li><p><strong>内部类</strong>中可以<strong>声明成员变量和成员方法</strong>。</p></li><li><p>内部类<strong>可以继承父类或实现接口</strong>。</p></li><li><p>可以声明内部类为<strong>抽象类</strong>，该抽象类<strong>必须被其他内部类继承</strong>;<strong>内部接口</strong>必须<strong>被其他内部类实现</strong>。</p></li><li><p>使用点运算符“.”引用内嵌类型:<strong>外层类型.内嵌类型</strong>eg：<code>Pixel.Color</code></p></li><li><p>内嵌类型具有类中成员的4种访问控制权限。当内部类可被访问时，才能考虑内部类中成员的访问控制权限。</p></li><li><p>内嵌类型与其外层类型彼此信任，能访问对方的所有成员</p></li><li><p><strong>内部接口总是静态的</strong>；<strong>内部类</strong>可声明是<strong>静态的或实例的</strong>，<strong>静态内部类</strong><code>能够声明静态成员</code>，但<strong>不能引用外部类的实例成员</strong>;<strong>实例内部类</strong><code>只能声明实例成员，不能声明静态成员</code>。</p></li><li><p>在<strong>实例内部类</strong>中，使用以下格式引用或调用外部类当前实例的成员变量或实例成员方法:</p><p><code>外部类.this.成员变量//引用外部类当前实例的成员变量</code></p><p><code>外部类.this.实例成员方法(参数列表)//调用外部类当前实例的成员方法</code></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221102203811765.png" alt="image-20221102203811765"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="java-lang包中的基础类库"><a href="#java-lang包中的基础类库" class="headerlink" title="java.lang包中的基础类库"></a>java.lang包中的基础类库</h3><h4 id="1-Object类"><a href="#1-Object类" class="headerlink" title="1.Object类"></a>1.Object类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Object</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Object</span><span class="hljs-params">()</span> <span class="hljs-comment">//构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; getClass(); <span class="hljs-comment">//返回当前对象所在的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> <br><span class="hljs-comment">//比较当前对象与obj是否相等</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回当前对象的信息字符串</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable <span class="hljs-comment">//析构方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Math数学类"><a href="#2-Math数学类" class="headerlink" title="2.Math数学类"></a>2.Math数学类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Math</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">E</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.7182818284590452354</span>; <span class="hljs-comment">//常量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14159265358979323846</span>;<span class="hljs-comment">//π </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">abs</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> <span class="hljs-comment">//求绝对值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">random</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回一个0.0~1.0之间的随机数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">pow</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span> <span class="hljs-comment">//返回a的b次幂</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> <span class="hljs-comment">//返回a的平方根值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sin</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> <span class="hljs-comment">//返回a的正弦值</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Comparable可比较接口"><a href="#3-Comparable可比较接口" class="headerlink" title="3.Comparable可比较接口"></a>3.Comparable可比较接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;<br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(T cobj)</span> <span class="hljs-comment">//比较对象大小</span><br>&#125;<br><span class="hljs-comment">//其中，&lt;T&gt;是Comparable接口的参数，表示一个类。</span><br></code></pre></td></tr></table></figure><h4 id="4-基本数据类型的包装类"><a href="#4-基本数据类型的包装类" class="headerlink" title="4.基本数据类型的包装类"></a>4.基本数据类型的包装类</h4><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923083806822.png" alt="image-20220923083806822" style="zoom: 67%;" /><blockquote><p>对应关系：Byte-byte; Boolean-boolean; Short-short; <code>Character-char</code>; <code>Integer-int</code>; Long-long; Float-float; Double-double。</p></blockquote><p><strong>自动裝箱:<strong>基本数据类型就自动的封装到与它相同类型的包装中。如:<code>Integer i = 100</code>;本质上就是编译器编译时自动为我们添加了<code>Integer i = new Integer(100)</code>;<br><strong>自动拆箱</strong>:包装类对象自动转化为基本数据类型。如:<code>int a = new Integer(100)</code>;本质上就是编译器编译时自动为我们添加了<code>int a = new Integer( 100).intValue()</code>;<br><strong>缓存问题:</strong> [-128,127]之间的数对应的包装类对象，仍然当做基本数据类型来处理;一旦遇到一个这个之间的数(默认为这些小的数使用频率会很高)，把他</strong>包装成一个对象</strong>后，就<strong>缓存起来</strong>，下次如果又要包装一个这个数的对象，则去看是否已经有这个对象，有就直接<strong>拿来使用</strong>，这样可以节省内存空间、提高效率(<strong>享元模式</strong>)。<br><strong>享元模式:<strong>有很多小对象，它们的大部分属性相同，这时可以把它们变成一个对象，那些</strong>相同的属性为对象的内部状态</strong>，那些<strong>不同的属性可以变为方法的参数</strong>，由外部传入。例: -128~127 内的相同整数自动装箱为同一个对象。</p><p>:one:Interger类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Integer&gt;<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MIN_VALUE=<span class="hljs-number">0x80000000</span>;<span class="hljs-comment">//最小值-2^31</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_VALUE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7fffffff</span>; <span class="hljs-comment">//最大值2^31-1</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value; <span class="hljs-comment">//私有最终变量，构造时赋值</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Integer</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> <span class="hljs-comment">//构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Integer</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">parseInt</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException <span class="hljs-comment">//将字符串转换为整数，静态方法</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//覆盖Object类中方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toBinaryString</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br><span class="hljs-comment">//将i转换成二进制字符串，i≥时，省略高位0</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toOctalString</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br><span class="hljs-comment">//将i转换成八进制字符串，i≥时，省略高位0</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toHexString</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br><span class="hljs-comment">//将i转换成十六进制字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br><span class="hljs-comment">//覆盖Object类中方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Integer iobj)</span><br><span class="hljs-comment">//比较两个对象值大小，返回1、0或1</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>:two:Double类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Double</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Double&gt;<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Double</span><span class="hljs-params">(<span class="hljs-type">double</span> value)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Double</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">parseDouble</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException <span class="hljs-comment">//将串s转换为浮点数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doubleValue</span><span class="hljs-params">()</span><span class="hljs-comment">//返回当前对象中的浮点数值</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-String字符串类"><a href="#5-String字符串类" class="headerlink" title="5.String字符串类"></a>5.String字符串类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, <br>CharSequence<br>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[]; <span class="hljs-comment">//字符数组，最终变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">String</span><span class="hljs-params">()</span> <span class="hljs-comment">//构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">String</span><span class="hljs-params">(String original)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//覆盖Object类中方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回字符串的长度</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> <span class="hljs-comment">//比较字符串是否相等</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equalsIgnoreCase</span> <span class="hljs-params">(String s)</span><span class="hljs-comment">//忽略字母大小写</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(String s)</span> <span class="hljs-comment">//比较字符串的大小</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareToIgnoreCase</span><span class="hljs-params">(String str)</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-Class类"><a href="#7-Class类" class="headerlink" title="7.Class类"></a>7.Class类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>&lt;T&gt;<br>&#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回当前类名字符串</span><br><span class="hljs-keyword">public</span> Class&lt;? <span class="hljs-built_in">super</span> T&gt; getSuperclass(); <span class="hljs-comment">//返回当前类的父类</span><br><span class="hljs-keyword">public</span> Package <span class="hljs-title function_">getPackage</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回当前类所在的包</span><br>&#125;<br><span class="hljs-built_in">this</span>.getClass().getName()<br><span class="hljs-built_in">this</span>.getClass().getSuperclass().getName()<br><span class="hljs-built_in">this</span>.getClass().getPackage().getName()<br></code></pre></td></tr></table></figure><h4 id="8-System系统类"><a href="#8-System系统类" class="headerlink" title="8.System系统类"></a>8.System系统类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">System</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> nullInputStream();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> nullPrintStream();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">PrintStream</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> nullPrintStream();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arraycopy</span><span class="hljs-params">(Object src, <span class="hljs-type">int</span> src_pos, Object dst, <span class="hljs-type">int</span> dst_pos, <span class="hljs-type">int</span> length)</span> <span class="hljs-comment">//复制数组</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span> <span class="hljs-comment">//结束当前运行的程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">long</span> <span class="hljs-title function_">currentTimeMillis</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获得当前日期和时间，返回从1970-1-1 00:00:00开始至当前时间的累计毫秒数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Properties <span class="hljs-title function_">getProperties</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得系统全部属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getProperty</span><span class="hljs-params">(String key)</span> <span class="hljs-comment">//获得指定系统属性</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-Runtime运行时类"><a href="#9-Runtime运行时类" class="headerlink" title="9.Runtime运行时类"></a>9.Runtime运行时类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Runtime</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runtime <span class="hljs-title function_">getRuntime</span><span class="hljs-params">()</span><span class="hljs-comment">//返回与当前应用程序相联系的运行时环境</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">totalMemory</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回系统内存空间总量</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">freeMemory</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回系统内存剩余空间的大小</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-util包中的工具类库"><a href="#java-util包中的工具类库" class="headerlink" title="java.util包中的工具类库"></a>java.util包中的工具类库</h3><h4 id="1-日期类"><a href="#1-日期类" class="headerlink" title="1.日期类"></a>1.日期类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Cloneable, Comparable&lt;Date&gt;<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Date</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得系统当前日期和时间的Date对象</span><br>&#123;<br><span class="hljs-built_in">this</span>(System.currentTimeMillis());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Date</span><span class="hljs-params">(<span class="hljs-type">long</span> date)</span> <span class="hljs-comment">//以长整型值创建Date对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Date date)</span><span class="hljs-comment">//比较日期大小，返回0、1、-1 </span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Calendar类"><a href="#2-Calendar类" class="headerlink" title="2.Calendar类"></a>2.Calendar类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calendar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, Cloneable, Comparable&lt;Calendar&gt; <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> YEAR <span class="hljs-comment">//年，常量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MONTH <span class="hljs-comment">//月</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DATE <span class="hljs-comment">//日</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> HOUR <span class="hljs-comment">//时</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MINUTE <span class="hljs-comment">//分</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> SECOND <span class="hljs-comment">//秒</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MILLISECOND <span class="hljs-comment">//百分秒</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DAY_OF_WEEK <span class="hljs-comment">//星期</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Calendar <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> <span class="hljs-comment">//创建实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> field)</span> <span class="hljs-comment">//返回日期</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Date <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回对象中的日期和时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTime</span><span class="hljs-params">(Date date)</span> <span class="hljs-comment">//设置对象的日期和时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> date)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> date, <span class="hljs-type">int</span> hour, <span class="hljs-type">int</span> minute)</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-GregorianCalendar类"><a href="#3-GregorianCalendar类" class="headerlink" title="3.GregorianCalendar类"></a>3.GregorianCalendar类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GregorianCalendar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Calendar</span> <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GregorianCalendar</span><span class="hljs-params">()</span> <span class="hljs-comment">//以当前日期时间创建对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GregorianCalendar</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GregorianCalendar</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day, <span class="hljs-type">int</span> hour, <span class="hljs-type">int</span> minute, <span class="hljs-type">int</span> second)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeapYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> <span class="hljs-comment">//判断是否闰年</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Comparator比较器接口"><a href="#Comparator比较器接口" class="headerlink" title="Comparator比较器接口"></a>Comparator比较器接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparator</span>&lt;T&gt;<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>; <span class="hljs-comment">//比较两个比较器对象是否相等</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(T cobj1, T cobj2)</span>; <span class="hljs-comment">//指定比较两个对象大小的规则</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Arrays数组类"><a href="#Arrays数组类" class="headerlink" title="Arrays数组类"></a>Arrays数组类</h3><h4 id="1-排序"><a href="#1-排序" class="headerlink" title="1.排序"></a>1.排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Object[] a)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(T[] a,Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c)</span><br></code></pre></td></tr></table></figure><h4 id="2-二分法-折半-查找"><a href="#2-二分法-折半-查找" class="headerlink" title="2.二分法(折半)查找"></a>2.二分法(折半)查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(Object[] a, Object key)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(T[] a, T key, Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c)</span><br></code></pre></td></tr></table></figure><h2 id="泛型-类的参数"><a href="#泛型-类的参数" class="headerlink" title="泛型(类的参数)"></a>泛型(类的参数)</h2><blockquote><p>类似于C++和Python的<code>模板</code>，他们有模板类和模板函数。</p></blockquote><h3 id="泛型声明"><a href="#泛型声明" class="headerlink" title="泛型声明"></a>泛型声明</h3><p><code>[修饰符] class 类&lt;类型参数列表&gt; [extends父类] [implements 接口列表]</code><br><code>[public] interface 接口 &lt; 类型参数列表&gt; [extends父接口列表]</code><br><code>[public] [static] &lt; 类型参数列表 &gt; 返回值类型方法([参数列表]) [throws 异常类列表]</code> </p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923092011478.png" alt="image-20220923092011478"></p><blockquote><p>:rainbow: 不能使用在基本类型上 </p><p>:tomato: 不能使用在静态属性上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GenericIntercace</span>&lt;T&gt; &#123;<br>T <span class="hljs-title function_">getData</span><span class="hljs-params">()</span>;<span class="hljs-comment">//类似于c++的模板</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p><code>接口</code>中泛型字母只能使用在<code>方法</code>中，不能使用在<code>全局常量</code>中</p></li><li><p>泛型方法可以在<code>非泛型类</code>中</p></li></ul><h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><p>泛型父类:子类为”富二代”:子类的泛型要比父类多</p><ol><li><p>保留父类的泛型–&gt;子类为泛型类</p></li><li><p>不保留父类泛型–&gt;子类按需实现</p></li></ol><ul><li>子类[重写方法]的参数类型–&gt;随父类而定</li><li>子类新增的方法，参数类型随子类而定</li><li>子类中使用父类的[属性] –&gt; 随父类而定</li><li>子类使用自己的属性–&gt;随子类而定</li></ul><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923093134846.png" alt="image-20220923093134846"></p><h3 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h3><ul><li>定义:泛型擦除是指在<strong>继承(实现)<strong>或</strong>使用</strong>时<strong>没有指定具体的类型</strong></li><li>特点:一旦擦除之后按<strong>Object</strong>处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2)没有类型擦除--》Object</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C4</span> &lt;A,B&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Object name)</span> &#123;子类重写方法的参数类型--&gt;随父类而定:<br>Object <br><span class="hljs-built_in">this</span>.age = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<span class="hljs-comment">//Object类型，子类使用父类的[属性]，类型</span><br>随父类而定<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ul><li><strong>T、K、V、E</strong>等泛型字母为有类型，类型参数赋予<strong>具体的值</strong></li><li><strong>?<strong>未知类型类型参数赋予</strong>不确定值</strong>，任意类型</li><li>只能用在<strong>声明类型、方法参数</strong>上，不能用在定义泛型类上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>List&lt;String&gt; name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>List&lt;Integer&gt; age = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>List&lt;Number&gt; number = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Number&gt;();<br>name.add(<span class="hljs-string">&quot;icon&quot;</span>);<br>age.add(<span class="hljs-number">18</span>);<br>number.add(<span class="hljs-number">314</span>);<br>getData(name);<br>getData(age); <br>getData(number);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getData</span><span class="hljs-params">(List&lt;?&gt; data)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;data :&quot;</span> + data.get(<span class="hljs-number">0</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>上限</strong> extends :指定的类型必须是继承某个类，或者实现某个接口(不是用implements)， 即&lt;=如 </p><p><code>– ? extends Fruit </code></p><p><code>– T extends List</code></p><p><strong>下限</strong> super：指定的类型不能小于操作的类 ，即&gt;= 如 </p><p><code>– T super Apple</code> </p><p><code>– ？ super Apple</code></p><hr><h1 id="第四章、异常处理"><a href="#第四章、异常处理" class="headerlink" title="第四章、异常处理"></a>第四章、异常处理</h1><h2 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h2><ul><li>用户输入了非法数据。 </li><li>要打开的文件不存在。 </li><li>网络通信时连接中断，或者JVM内存溢出。</li></ul><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20220928141405830.png" alt="image-20220928141405830"></p><h2 id="异常处理基础"><a href="#异常处理基础" class="headerlink" title="异常处理基础"></a>异常处理基础</h2><ul><li><p>将程序正常代码与错误处理代码分开。</p></li><li><p>使程序具有处理运行错误的能力。</p></li></ul><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>(Error)指程序运行时遇到的硬件、操作系统、虚拟机的错误。 Error错误类。Java程序<strong>不能处理错误</strong>，只能依靠外界干预。</p><ol><li>NoClassDefFoundError类定义未找到错误。没有.class文件，或没有main()方法时。</li><li>OutOfMemoryError内存溢出错误。没有可用内存时。</li><li>StackOverflowError栈溢出错误。当递归函数不能正常结束时。</li></ol><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20220928142730920.png" alt="image-20220928142730920"></p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>（Exception）指在硬件、操作系统、虚拟 机正常时，程序遇到的运行错（语义错）</p><h4 id="异常类（默认java-lang包）"><a href="#异常类（默认java-lang包）" class="headerlink" title="异常类（默认java.lang包）"></a>异常类（默认java.lang包）</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928143014612.png" alt="image-20220928143014612"></p><h4 id="内置异常类"><a href="#内置异常类" class="headerlink" title="内置异常类"></a>内置异常类</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160253693.png"></p><h4 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160326479.png"></p><p>异常类声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Throwable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> <br>&#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得异常信息</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得异常对象的描述信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStackTrace</span><span class="hljs-params">()</span><span class="hljs-comment">//显示异常栈跟踪信息</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exception</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Exception</span><span class="hljs-params">()</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Exception</span><span class="hljs-params">(String message)</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><p><strong>ArithmeticException</strong></p><p> 3/0 //整除，除数为0，算术异常</p><p>3.0/0 //实数除，除数为0，无穷大 </p></li><li><p><strong>NullPointerException</strong> 空对象异常</p><p> int x[] = null;</p><p> x[0] = 1; //对空数组中的元素进行操作</p><p> String str = null;</p><p> str.length() //空对象调用方法</p></li><li><p><strong>ClassCastException</strong> </p><p>Object obj = new Object(); </p><p>String str = (String) obj; //类型强制转换异常</p></li></ol><h2 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h2><ol><li>程序应<code>避免而不捕获</code>的异常，运行异常</li></ol><ul><li> <strong>除数为0</strong>、<strong>数组下标越界</strong>等</li></ul><ol><li><code>必须捕获</code>的异常</li></ol><ul><li><strong>数值格式</strong>异常，如果没有捕获，由Java虚拟机处理。</li><li><strong>文件不存在</strong>、<strong>网络连接中断</strong>、<strong>数据库连接中断</strong>等，必须捕获，否则编译不能通过。</li></ul><h2 id="异常处理措施"><a href="#异常处理措施" class="headerlink" title="异常处理措施"></a>异常处理措施</h2><h3 id="异常处理语句"><a href="#异常处理语句" class="headerlink" title="异常处理语句"></a>异常处理语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span><br>&#123;<br>语句<span class="hljs-number">1</span>； <span class="hljs-comment">//存在潜在异常的代码</span><br>&#125;<br><span class="hljs-keyword">catch</span> (异常类 异常对象)<br>&#123;<br>语句<span class="hljs-number">2</span>； <span class="hljs-comment">//捕获到异常并进行处理的代码</span><br>&#125;<br><span class="hljs-keyword">finally</span><br>&#123;<br>语句<span class="hljs-number">3</span>；<span class="hljs-comment">//最后必须执行的代码，无论是否捕获到异常</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><ol><li><u>方法声明抛出异常的throws字句</u></li></ol><p>eg：[修饰符] 返回值类型 方法([参数列表]) <strong>[throws 异常类列表]</strong></p><ol><li><u>方法内抛出异常</u></li></ol><p>eg：<strong>throw 异常对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//[修饰符] 返回值类型 方法([参数列表])[throws异常类列表]</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">parseInt</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException <span class="hljs-comment">//日期类声明抛出异常的方法与方法调用者处理异常。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <span class="hljs-keyword">throws</span> Exception<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><span class="hljs-built_in">this</span>.set(year, month, day);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception<br></code></pre></td></tr></table></figure><h3 id="throws和throw以及try-catch-finally的区别"><a href="#throws和throw以及try-catch-finally的区别" class="headerlink" title="throws和throw以及try-catch-finally的区别"></a>throws和throw以及try-catch-finally的区别</h3><ul><li>throws为方法<code>声明可能出现的异常</code>，函数调用者不处理异常则继续向下抛出异常直至被处理，否则程序结束。</li><li>throw主要是<code>发现异常并抛出指定的异常对象</code>给调用者，当抛出异常后，后面的语句就不会执行了。</li><li>throw要么和<strong>try-catch-finally</strong>语句配套使用，抛出异常后就用处理异常；要么与<strong>throws</strong>配套使用，方法头声明抛出异常类，方法内抛出异常对象而不处理该异常，直到该方法被调用时调用者处理异常则结束，否则继续抛出该异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowsDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwOne</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Inside throwOne.&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalAccessException</span>(<span class="hljs-string">&quot;demo&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            throwOne();<br>        &#125; <br>        <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught &quot;</span> + e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//日期格式异常类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateFormatException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IllegalArgumentException</span><br><span class="hljs-comment">//MyDate类修改方法，抛出日期格式异常类 ，向调用者传递异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <span class="hljs-keyword">throws</span> DateFormatException<br>&#123; <span class="hljs-keyword">if</span> (……)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateFormatException</span>(<span class="hljs-string">&quot;月份错误&quot;</span>);<br>&#125;<br><span class="hljs-comment">//调用方法处理异常，若不能处理则声明抛出日期格式异常，再向调用者传递异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <span class="hljs-keyword">throws</span> DateFormatException<br>&#123; <br>    <span class="hljs-built_in">this</span>.set(year, month, day);<br>&#125;<br><span class="hljs-comment">//由datestr字符串构造日期，默认日期字符串格式为&quot;yyyy年MM月dd日&quot; </span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(String datestr)</span> <span class="hljs-keyword">throws</span> NumberFormatException, DateFormatException <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> <span class="hljs-keyword">throws</span> NumberFormatException, DateFormatException<br>&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-string">&quot;2017年2月29日&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="第五章、图形用户界面（GUI）"><a href="#第五章、图形用户界面（GUI）" class="headerlink" title="第五章、图形用户界面（GUI）"></a>第五章、图形用户界面（GUI）</h1><h2 id="AWT组件及其属性"><a href="#AWT组件及其属性" class="headerlink" title="AWT组件及其属性"></a>AWT组件及其属性</h2><ul><li><blockquote><p>java.awt包提供抽象窗口工具集（Abstract  Window Tookit，AWT）</p></blockquote></li><li><blockquote><p>javax.swing包提供JDK 1.2的Swing组件， 它扩展了AWT组件的功能</p></blockquote></li></ul><h3 id="AWT组件"><a href="#AWT组件" class="headerlink" title="AWT组件"></a>AWT组件</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220930081159260.png" alt="image-20220930081159260"></p><h3 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h3><h4 id="FlowLayout（流布局管理器）"><a href="#FlowLayout（流布局管理器）" class="headerlink" title="FlowLayout（流布局管理器）"></a>FlowLayout（流布局管理器）</h4><blockquote><p>Panel面板的默认布局管理器.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowLayout</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LayoutManager</span>, <br>java.io.Serializable <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LEFT</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//左对齐，类常量，全部大写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CENTER</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//居中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">//右对齐</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FlowLayout</span><span class="hljs-params">()</span> <span class="hljs-comment">//构造方法，默认居中</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FlowLayout</span><span class="hljs-params">(<span class="hljs-type">int</span> align)</span> <span class="hljs-comment">//align参数指定对齐方式</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BorderLayout（边布局管理器）"><a href="#BorderLayout（边布局管理器）" class="headerlink" title="BorderLayout（边布局管理器）"></a>BorderLayout（边布局管理器）</h4><blockquote><p>Window窗口的默认布局管理器.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorderLayout</span> <span class="hljs-keyword">implements</span> <br><span class="hljs-title class_">LayoutManager2</span>, java.io.Serializable <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORTH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;North&quot;</span>; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SOUTH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;South&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EAST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;East&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WEST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;West&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CENTER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Center&quot;</span>;<br><span class="hljs-comment">//注意，字符串首字母大写</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BorderLayout</span><span class="hljs-params">()</span> <span class="hljs-comment">//构造方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GridLayout（网格布局管理器）"><a href="#GridLayout（网格布局管理器）" class="headerlink" title="GridLayout（网格布局管理器）"></a>GridLayout（网格布局管理器）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GridLayout</span> <span class="hljs-keyword">implements</span> <br><span class="hljs-title class_">LayoutManager</span>, Serializable <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GridLayout</span><span class="hljs-params">(<span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols)</span> <br><span class="hljs-comment">//参数指定行、列</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="颜色和字体"><a href="#颜色和字体" class="headerlink" title="颜色和字体"></a>颜色和字体</h3><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Paint</span>, java.io.Serializable <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Color</span><span class="hljs-params">(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> b)</span> <span class="hljs-comment">//以三元色值构造对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Color</span><span class="hljs-params">(<span class="hljs-type">int</span> rgb)</span> <span class="hljs-comment">//以RGB值构造对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRed</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回红色值</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGreen</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回绿色值</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBlue</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回蓝色值</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRGB</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回颜色的RGB值</span><br><span class="hljs-keyword">public</span> Color <span class="hljs-title function_">brighter</span><span class="hljs-params">()</span> <span class="hljs-comment">//使颜色变浅</span><br><span class="hljs-keyword">public</span> Color <span class="hljs-title function_">darker</span><span class="hljs-params">()</span> <span class="hljs-comment">//使颜色变深</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Font</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PLAIN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//常规</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//粗体</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ITALIC</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">//斜体</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Font</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> style, <span class="hljs-type">int</span> size)</span><span class="hljs-comment">//字体名、字形、字号</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回字体名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回字体大小</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getStyle</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回粗、斜体值</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220930090145928.png"></p><h4 id="事件和事件源"><a href="#事件和事件源" class="headerlink" title="事件和事件源"></a>事件和事件源</h4><blockquote><p><strong>事件（event）</strong>是指一个状态的改变，或者一个活动的发生。 产生事件的组件称为<strong>事件源（event source）</strong> 。</p></blockquote><h4 id="事件类和事件监听器接口"><a href="#事件类和事件监听器接口" class="headerlink" title="事件类和事件监听器接口"></a>事件类和事件监听器接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ActionListener</span> <span class="hljs-keyword">extends</span> <br><span class="hljs-title class_">EventListener</span> <span class="hljs-comment">//动作事件监听器接口</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent ev)</span>;<br><span class="hljs-comment">//动作事件处理方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="窗口事件监听器接口"><a href="#窗口事件监听器接口" class="headerlink" title="窗口事件监听器接口"></a>窗口事件监听器接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WindowListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span><br>&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowOpened</span><span class="hljs-params">(WindowEvent ev)</span>; <span class="hljs-comment">//打开后</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent ev)</span>; <span class="hljs-comment">//关闭时</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosed</span><span class="hljs-params">(WindowEvent ev)</span> ; <span class="hljs-comment">//关闭后</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowIconified</span><span class="hljs-params">(WindowEvent ev)</span>;<span class="hljs-comment">//最小化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowDeiconified</span><span class="hljs-params">(WindowEvent ev)</span>;<span class="hljs-comment">//恢复</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowActivated</span><span class="hljs-params">(WindowEvent ev)</span> ;<span class="hljs-comment">//激活</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowDeactivated</span><span class="hljs-params">(WindowEvent ev)</span> ;<br><span class="hljs-comment">//变为不活动</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组件注册事件监听器对象"><a href="#组件注册事件监听器对象" class="headerlink" title="组件注册事件监听器对象"></a>组件注册事件监听器对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> <br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">Accessibl</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addActionListener</span><span class="hljs-params">(ActionListener l)</span><br><span class="hljs-comment">//注册动作事件监听器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeActionListener</span><span class="hljs-params">(ActionListener l)</span> <br><span class="hljs-comment">//取消注册动作事件监听器</span><br>&#125;<br>button.addActionListener(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><h4 id="窗口对象注册窗口事件监听器"><a href="#窗口对象注册窗口事件监听器" class="headerlink" title="窗口对象注册窗口事件监听器"></a>窗口对象注册窗口事件监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Container</span> <br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">Accessible</span> <span class="hljs-comment">//窗口类</span><br>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addWindowListener</span><span class="hljs-params">(WindowListener l)</span> <br><span class="hljs-comment">//注册窗口事件监听器</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeWindowListener</span><span class="hljs-params">(WindowListener l)</span><br><span class="hljs-comment">//取消窗口事件监听器</span><br>&#125;<br>frame.addWindowListener(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><h2 id="AWT事件类和事件监听器接口"><a href="#AWT事件类和事件监听器接口" class="headerlink" title="AWT事件类和事件监听器接口"></a>AWT事件类和事件监听器接口</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221109222028588.png" alt="image-20221109222028588"></p><h3 id="AWT事件类"><a href="#AWT事件类" class="headerlink" title="AWT事件类"></a>AWT事件类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable <br>&#123;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getSource</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回产生事件的事件源组件</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回事件对象信息</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActionEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AWTEvent</span> <br>&#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getActionCommand</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得按钮的标签</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AWT事件监听器接口"><a href="#AWT事件监听器接口" class="headerlink" title="AWT事件监听器接口"></a>AWT事件监听器接口</h3><ol><li><p>WindowListener 窗口事件 </p></li><li><p>ActionListener 动作事件 </p></li><li><p>MouseMotionListener 鼠标移动事件 </p></li><li><p>MouseListener 鼠标事件 </p></li><li><p>KeyListener 键盘事件 </p></li><li><p>FocusListener 焦点事件</p></li></ol><p><strong>AWT组件类中注册事件监听器的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImageObserver</span>, MenuContainer, <br>Serializable<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addKeyListener</span><span class="hljs-params">(KeyListener l)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMouseListener</span><span class="hljs-params">(MouseListener l)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <br><span class="hljs-title function_">addMouseMotionListener</span><span class="hljs-params">(MouseMotionListener l)</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Swing组件及事件"><a href="#Swing组件及事件" class="headerlink" title="Swing组件及事件"></a>Swing组件及事件</h2><h3 id="1-Swing组件与布局"><a href="#1-Swing组件与布局" class="headerlink" title="1.Swing组件与布局"></a>1.Swing组件与布局</h3><h4 id="Swing组件类关系"><a href="#Swing组件类关系" class="headerlink" title="Swing组件类关系"></a>Swing组件类关系</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220930090437034.png" alt="image-20220930090437034"></p><h4 id="主要类及组件类的继承关系"><a href="#主要类及组件类的继承关系" class="headerlink" title="主要类及组件类的继承关系"></a>主要类及组件类的继承关系</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220930090537860.png" alt="image-20220930090537860"></p><blockquote><p>此处整理不完整，其余内容详见-&gt;<a href="https://xiets.blog.csdn.net/article/details/72814531?spm=1001.2014.3001.5506"><code>Java Swing用法简介</code></a></p></blockquote><hr><h1 id="第六章、多线程编程"><a href="#第六章、多线程编程" class="headerlink" title="第六章、多线程编程"></a>第六章、多线程编程</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>是系统进行<strong>资源分配和保护的基本单位</strong>，指一个内存中运行的应用程序 ，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p><blockquote><p>特点：:one: 动态性 :two: 独立性 :three: 并发性 :four: 共享性 :five: 制约性</p><p>静态特征：程序和数据</p><p>动态特征：进程映像，包括以下4要素</p><ul><li>进程控制块（Process Control Block，PCB）， 用来存储进程的标志信息、现场信息和控制信息， 是进程存在的唯一标识 </li><li>进程程序块</li><li>进程核心栈 </li><li>进程数据块</li></ul></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>是系统<strong>资源调度的基本单位</strong>，进程内部的一个独立执行单元；一个进程可以同时并发的运行多个线程，可以理解为一个进程便相当于一个单 CPU 操作系统，而线程便是这个系统中运行的多个任务。 </p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>进程：有独立的内存空间，进程中的数据存放空间（堆空间和栈空间）是独立的，至少有一个线程。</p><p>线程：<strong>堆内存</strong>和<strong>方法区</strong>是<strong>共享</strong>的，<strong>栈内存</strong>是<strong>独立</strong>的，线程消耗的资源比进程小的多。 </p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p><strong><code>提高系统的资源利用率和程序的处理效率</code></strong></p><h3 id="状态及转换"><a href="#状态及转换" class="headerlink" title="状态及转换"></a>状态及转换</h3><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221007080603796.png"><img src="https://img-blog.csdnimg.cn/20210512173109590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzE1OTQz,size_16,color_FFFFFF,t_70"><h3 id="多线程结构"><a href="#多线程结构" class="headerlink" title="多线程结构"></a>多线程结构</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221007080648065.png" alt="image-20221007080648065"></p><p><img src="https://img-blog.csdnimg.cn/20210512175007490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzE1OTQz,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221007080759956.png" alt="image-20221007080759956"></p><h2 id="Java的线程对象"><a href="#Java的线程对象" class="headerlink" title="Java的线程对象"></a>Java的线程对象</h2><ol><li>通过实现<strong>接口Runnable，实现void run()方法</strong>创建线程对象，是<strong>线程对象</strong>。<ul><li>创建一个实现Runnable接口的类。</li><li>实现类去实现Runnable接口中的抽象方法：run()。</li><li>创建实现类的对象。</li><li>将此对象作为参数传到Thread类的构造器中，创建Thread类的对象。</li><li>通过Thread类的对象调用start()方法。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.broky.multiThread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableThread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建实现类的对象</span><br>        <span class="hljs-type">RunnableThread01</span> <span class="hljs-variable">runnableThread01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableThread01</span>();<br>        <span class="hljs-comment">//创建Thread类的对象,并将实现类的对象当做参数传入构造器</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnableThread01);<br>        <span class="hljs-comment">//使用Thread类的对象去调用Thread类的start()方法:①启动了线程 ②Thread中的run()调用了Runnable中的run()</span><br>        t1.start();<br><br>        <span class="hljs-comment">//在创建一个线程时，只需要new一个Thread类就可,不需要new实现类</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnableThread01);<br>        t2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//RunnableThread01实现Runnable接口的run()抽象方法</span><br><span class="hljs-comment">// 这并不是一个线程类，是一个可运行的类。它还不是一个线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableThread01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:\t&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>通过<strong>继承Thread类并重写void run()<strong>方法创建线程对象，是</strong>线程的目标对象</strong>。<ul><li>创建一个继承于Thread类的子类。</li><li>重写Thread类的run()方法。</li><li>创建Thread类的子类的对象。</li><li>通过此对象调用start()来启动一个线程。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.broky.multiThread.exer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadExerDemo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread01</span>().start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread02</span>().start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:\t&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:\t&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>两种实现方式的比较</strong></p><ul><li><strong>第一种方式</strong>实现接口比较常用，因为一个类实现了接口，它还可以去继承其它的类，更灵活。</li><li>Java中只允许单进程，以卖票程序TiketSales类来说，很有可能这个类本来就有父类，这样一来就不可以继承Thread类来完成多线程了，但是一个类可以实现多个接口，因此实现的方式没有类的单继承性的局限性，用实现Runnable接口的方式来完成多线程更加实用。</li><li>实现Runnable接口的方式天然<strong>具有共享数据的特性</strong>（不用static变量）。因为继承Thread的实现方式，需要创建多个子类的对象来进行多线程，如果子类中有变量A，而不使用static约束变量的话，每个子类的对象都会有自己独立的变量A，只有static约束A后，子类的对象才共享变量A。而实现Runnable接口的方式，只需要创建一个实现类的对象，要将这个对象传入Thread类并创建多个Thread类的对象来完成多线程，而这多个Thread类对象实际上就是调用一个实现类对象而已。实现的方式更适合来处理多个线程有共享数据的情况。</li><li>联系：Thread类中也实现了Runnable接口；两种方式都需要重写run()方法，线程的执行逻辑都在run()方法中</li></ul><ol start="3"><li>实现Callable接口<ul><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.broky.multiThread;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建线程的方式三：实现Callable接口。 ---JDK5新特性</span><br><span class="hljs-comment"> * 如何理解Callable比Runnable强大？</span><br><span class="hljs-comment"> * 1.call()可以有返回值</span><br><span class="hljs-comment"> * 2.call()可以抛出异常被外面的操作捕获</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//1.创建一个实现Callable的实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt;&#123;<br>    <span class="hljs-comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                sum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadNew</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//3.创建Callable接口实现类的对象</span><br>        <span class="hljs-type">NumThread</span> <span class="hljs-variable">numThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumThread</span>();<br>        <span class="hljs-comment">//4.将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask对象</span><br>        FutureTask&lt;Integer&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(numThread);<br>        <span class="hljs-comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//6.获取Callable中Call方法的返回值</span><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> futureTask.get();<br>            System.out.println(<span class="hljs-string">&quot;总和为&quot;</span>+sum);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li><p>线程池</p><ul><li><strong>背景：</strong></li></ul><p> 经常创建和销毁、使用量特别大的资源、比如并发情况下的线程、对性能影响很大。</p><ul><li><strong>思路：</strong></li></ul><p> 提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><ul><li><strong>优点：</strong></li></ul><p> 提高响应速度（减少了创建新线程的时间）</p><p> 降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p><p> 便于线程管理</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.broky.multiThread;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建线程的方式四：使用线程池</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 面试题：创建多线程有几种方式</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 13roky</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021-04-22 21:49</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:\t&quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1.提供指定线程数量的线程池</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">service1</span> <span class="hljs-operator">=</span> (ThreadPoolExecutor) service;<br>        <span class="hljs-comment">//设置线程池的属性</span><br>        <span class="hljs-comment">//        System.out.println(service.getClass());</span><br>        <span class="hljs-comment">//        service1.setCorePoolSize(15);</span><br>        <span class="hljs-comment">//        service1.setKeepAliveTime();</span><br><br>        <span class="hljs-comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象。</span><br>        service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberThread</span>()); <span class="hljs-comment">//适合用于Runnable</span><br>        <span class="hljs-comment">//        service.submit(); 适合适用于Callable</span><br>        <span class="hljs-comment">//关闭线程池</span><br>        service.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Thread类的常用方法"><a href="#Thread类的常用方法" class="headerlink" title="Thread类的常用方法"></a>Thread类的常用方法</h3><ul><li><p>start() : 启动当前线程, 调用当前线程的run()方法</p></li><li><p>run() : 通常需要重写Thread类中的此方法, 将创建的线程要执行的操作声明在此方法中</p></li><li><p>currentThread() : 静态方法, 返回当前代码执行的线程</p></li><li><p>getName() : 获取当前线程的名字</p></li><li><p>setName() : 设置当前线程的名字</p></li><li><p>yield() : <strong>释放当前CPU的执行权</strong>，回到<strong>就绪状态</strong>，在回到就绪之后，<strong>有可能还会再次抢到</strong>,抢到后接着运行（让位）。</p></li><li><p>join(long millis, int nanos) : 在<strong>线程a中调用线程b的join()</strong>, 此时<strong>线程a进入阻塞状态, 直到线程b完全执行完以后</strong>（等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒）, 线程a<strong>才结束阻塞状态</strong></p></li><li><p>stop() : 已过时. 当执行此方法时,强制结束当前线程.</p></li><li><p>sleep(long militime) : 让线程睡眠指定的毫秒数后回到就绪态抢夺CPU时间片，在指定时间内，线程是<strong>定时等待状态</strong>,可以实现线程定时执行。</p></li><li><p>isAlive() ：判断当前线程是否存活</p></li><li><p>interrupt() ：设置中断标记</p></li><li><p>isInterrupted() ：判断是否中断</p></li></ul><p><strong>join用法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable7</span>());<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">//合并线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            t.join(); <span class="hljs-comment">// t合并到当前线程中，当前线程受阻塞，t线程执行直到结束。</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable7</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>线程正常结束模板</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">thread10</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyRunable4</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunable4</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">// 模拟5秒</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 终止线程</span><br>        <span class="hljs-comment">// 你想要什么时候终止t的执行，那么你把标记修改为false，就结束了。</span><br>        r.run = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunable4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 打一个布尔标记</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(run)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// return就结束了，你在结束之前还有什么没保存的。</span><br>                <span class="hljs-comment">// 在这里可以保存呀。</span><br>                <span class="hljs-comment">//save....</span><br><br>                <span class="hljs-comment">//终止当前线程</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>JDk中用Thread.State类定义了线程的几种状态想要实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在他的一个完整的生命周期中通常要经历如下的<strong>五种状态</strong>：</p></blockquote><ol><li>新建：当一个Thread类或其子类的对象被声明并创建时，新的线程对象处于新建状态。</li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源。</li><li>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run()方法定义了线程的操作和功能。</li><li>阻塞：在某种特殊情况下，被认为挂起或执行输入输出操作时，让出CPU并临时中止自己的执行，进入阻塞状态。</li><li>死亡：线程完成了它的全部工作或线程被提前强制性的中止或出现异常导致结束。<div align="center"> <img src='https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/qiV0by.png'></div>## 线程的调度</li></ol><h3 id="调度种类"><a href="#调度种类" class="headerlink" title="调度种类"></a>调度种类</h3><ul><li><strong>抢占式</strong>调度模型：<br>哪个线程的优先级比较高，抢到的CPU时间片的概率就高一些/多一些。<br><strong>java采用的就是抢占式调度模型</strong>。</li><li><strong>均分式</strong>调度模型：<br>平均分配CPU时间片。每个线程占有的CPU时间片时间长度一样。<br>平均分配，一切平等。<br>有一些编程语言，线程调度模型采用的是这种方式。</li></ul><h3 id="CPU的调度策略"><a href="#CPU的调度策略" class="headerlink" title="CPU的调度策略"></a>CPU的调度策略</h3><ul><li><strong>时间片：</strong>cpu正常情况下的调度策略。即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。而不会造成CPU资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</li><li><strong>抢占式：</strong>高优先级的线程抢占cpu。</li></ul><h3 id="Java的调度算法："><a href="#Java的调度算法：" class="headerlink" title="Java的调度算法："></a>Java的调度算法：</h3><ul><li>同优先级线程组成先进先出队列（先到先服务），使用时间片策略。</li><li>堆高优先级，使用优先调度的抢占式策略。</li></ul><p><strong>线程的优先级等级</strong>（一共有10挡）</p><ul><li>MAX_PRIORITY：10</li><li>MIN_PRIORITY：1</li><li>NORM_PRIORITY：5 (默认优先级)</li></ul><p><strong>获取和设置当前线程的优先级</strong></p><ul><li><code>getPriority();</code> 获取</li><li><code>setPriority(int p);</code> 设置</li></ul><blockquote><p><strong>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有高优先级的线程执行完成以后，低优先级的线程才执行。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.coding.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Threadtest11</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最高优先级：&quot;</span> + Thread.MAX_PRIORITY);<span class="hljs-comment">//最高优先级：10</span><br>        System.out.println(<span class="hljs-string">&quot;最低优先级:&quot;</span> + Thread.MIN_PRIORITY);<span class="hljs-comment">//最低优先级:1</span><br>        System.out.println(<span class="hljs-string">&quot;默认优先级:&quot;</span> + Thread.NORM_PRIORITY);<span class="hljs-comment">//默认优先级:5</span><br>        <br>        <span class="hljs-comment">// main线程的默认优先级是：5</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程的默认优先级是：&quot;</span> + Thread.currentThread().getPriority());<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable5</span>());<br>        t.setPriority(<span class="hljs-number">10</span>);<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">// 优先级较高的，只是抢到的CPU时间片相对多一些。</span><br>        <span class="hljs-comment">// 大概率方向更偏向于优先级比较高的。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h3 id="安全问题出现的条件"><a href="#安全问题出现的条件" class="headerlink" title="安全问题出现的条件"></a>安全问题出现的条件</h3><p><strong>满足三个条件：</strong></p><ol><li>条件1：<strong>多线程并发</strong>。</li><li>条件2：<strong>有共享数据</strong>。</li><li>条件3：<strong>共享数据有修改的行为</strong>。</li></ol><blockquote><p>满足以上3个条件之后，就会存在线程安全问题。</p></blockquote><h3 id="两个专业术语"><a href="#两个专业术语" class="headerlink" title="两个专业术语"></a>两个专业术语</h3><p><strong>异步编程模型：</strong><br>线程t1和线程t2，各自执行各自的，t1不管t2，t2不管t1，谁也不需要等谁，这种编程模型叫做异步编程模型。</p><blockquote><p>实质：多线程并发（效率较高）,<strong>异步就是并发。</strong></p></blockquote><p><strong>同步编程模型：</strong><br>线程t1和线程t2，在线程t1执行的时候，必须等待t2线程执行结束，或者说在t2线程执行的时候，必须等待t1线程执行结束，两个线程之间发生了等待关系，这就是同步编程模型。</p><blockquote><p>实质：线程排队执行，效率较低,<strong>同步就是排队。</strong></p></blockquote><h3 id="线程安全和非线程安全的类的选择"><a href="#线程安全和非线程安全的类的选择" class="headerlink" title="线程安全和非线程安全的类的选择"></a>线程安全和非线程安全的类的选择</h3><ul><li><p>StringBuffer是线程安全的类，但效率低。</p></li><li><p>StringBuilder是非线程安全的类，用于代替StringBuffer。</p></li><li><p>ArrayList是非线程安全的，用于代替Vector。</p></li><li><p>Vector是线程安全的。</p></li><li><p>HashMap HashSet是非线程安全的，用于代替Hashtable。</p></li><li><p>Hashtable是线程安全的。</p></li></ul><blockquote><p>线程安全的类的方法都是<strong>同步方法</strong>，效率低，因此这些类是安全的，线程非安全的类效率高但是不安全，可以用作<strong>局部变量</strong>以避免线程安全问题。</p></blockquote><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><blockquote><p>是一上来就选择线程同步吗？synchronized</p><p>不是，synchronized会让程序的执行效率降低，用户体验不好。<br>系统的用户吞吐量降低。用户体验差。在不得已的情况下再选择线程同步机制。</p></blockquote><ul><li>第一种方案：尽量使用<strong>局部变量</strong> <em>代替</em> “<strong>实例变量</strong>和<strong>静态变量</strong>”。</li><li>第二种方案：<strong>如果必须是实例变量</strong>，那么可以考虑<strong>创建多个对象</strong>，这样实例变量的内存就不共享了。（一个线程对应1个对象，100个线程对应100个对象，对象不共享，就没有数据安全问题了。）</li><li>第三种方案：如果不能使用局部变量，对象也不能创建多个，这个时候就只能选择<strong>synchronized</strong>了。<strong>线程同步机制</strong>。</li></ul><h2 id="synchronized-线程同步"><a href="#synchronized-线程同步" class="headerlink" title="synchronized-线程同步"></a>synchronized-线程同步</h2><p>线程同步机制的<strong>语法</strong>是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>()&#123;<br><span class="hljs-comment">// 线程同步代码块。</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重点：</strong><br>synchronized后面<strong>小括号()</strong> 中传的这个“数据”是相当关键的。这个数据必须是 <strong><code>多线程共享</code></strong> 的数据。才能达到多线程排队。</p><p><strong>注意：</strong></p><blockquote><p>在java语言中，任何一个对象都有“一把锁”，其实这把锁就是标记。（只是把它叫做锁）<br><strong>100个对象，100把锁。1个对象1把锁。</strong></p></blockquote><h3 id="同步的执行原理"><a href="#同步的执行原理" class="headerlink" title="同步的执行原理"></a>同步的执行原理</h3><p>1、假设t1和t2线程并发，开始执行以下代码的时候，肯定有一个先一个后。</p><p>2、假设t1先执行了，遇到了<strong>synchronized</strong>，这个时候自动找“后面<strong>共享对象</strong>”的<strong>对象锁</strong>，找到之后，并<strong>占有这把锁</strong>，然后<strong>执行同步代码块</strong>中的程序，在程序执行过程中一直都是<strong>占有这把锁</strong>的。<strong>直到同步代码块代码结束，这把锁才会释放。</strong></p><p>3、假设t1已经占有这把锁，此时t2也遇到synchronized关键字，也会去占有后面共享对象的这把锁，结果这把锁被t1占有，t2只能在同步代码块外面<strong>等待t1的结束</strong>(阻塞态)，直到t1把同步代码块执行结束了，t1会归还这把锁，此时t2终于等到这把锁，然后t2占有这把锁之后，进入同步代码块执行程序。</p><p>4、这样就达到了<strong>线程排队</strong>执行。</p><p><strong>重中之重：</strong></p><blockquote><p><code>“锁”</code>即该对象的<strong>控制权</strong>，有锁才能修改该对象；这个共享对象一定要选好了。这个共享对象一定是你需要排队执行的这些线程对象所共享的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String actno;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance; <span class="hljs-comment">//实例变量。</span><br><br>    <span class="hljs-comment">//对象</span><br>    Object o= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <span class="hljs-comment">// 实例变量。（Account对象是多线程共享的，Account对象中的实例变量obj也是共享的。）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String actno, <span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.actno = actno;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getActno</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> actno;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setActno</span><span class="hljs-params">(String actno)</span> &#123;<br>        <span class="hljs-built_in">this</span>.actno = actno;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-comment">//取款的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 以下可以共享,金额不会出错</span><br><span class="hljs-comment">         * 以下这几行代码必须是线程排队的，不能并发。</span><br><span class="hljs-comment">         * 一个线程把这里的代码全部执行结束之后，另一个线程才能进来。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-comment">//synchronized(actno) &#123;</span><br>        <span class="hljs-comment">//synchronized(o) &#123;</span><br>        <span class="hljs-comment">//必须同步实例对象，不能同步变量</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 以下不共享，金额会出错</span><br><span class="hljs-comment">         */</span><br>  <span class="hljs-comment">/*Object obj = new Object();</span><br><span class="hljs-comment">        synchronized(obj) &#123; // 这样编写就不安全了。因为obj2不是共享对象。</span><br><span class="hljs-comment">        synchronized(null) &#123;//编译不通过</span><br><span class="hljs-comment">        String s = null;</span><br><span class="hljs-comment">        synchronized(s) &#123;//java.lang.NullPointerException*/</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">before</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getBalance();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">after</span> <span class="hljs-operator">=</span> before - money;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-built_in">this</span>.setBalance(after);<br>        <span class="hljs-comment">//&#125;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 两个线程必须共享同一个账户对象。</span><br>    <span class="hljs-keyword">private</span> Account act;<br><br>    <span class="hljs-comment">// 通过构造方法传递过来账户对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AccountThread</span><span class="hljs-params">(Account act)</span> &#123;<br>        <span class="hljs-built_in">this</span>.act = act;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>        act.withdraw(money);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;对&quot;</span>+act.getActno()+<span class="hljs-string">&quot;取款&quot;</span>+money+<span class="hljs-string">&quot;成功，余额&quot;</span> + act.getBalance());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建账户对象（只创建1个）</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">act</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;act-001&quot;</span>, <span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">// 创建两个线程，共享同一个对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountThread</span>(act);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountThread</span>(act);<br><br>        t1.setName(<span class="hljs-string">&quot;t1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;t2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>以上代码锁<strong>this、实例变量actno、实例变量o</strong>都可以！因为这三个是线程共享且都是对象！</p></blockquote><h3 id="同步方法-synchronized"><a href="#同步方法-synchronized" class="headerlink" title="同步方法-synchronized"></a>同步方法-synchronized</h3><p><strong>同步方法</strong>:就是把synchronized关键字加到方法上</p><p>格式:</p><p><code>修饰符 synchronized 返回值类型 方法名(方法参数)&#123; &#125;</code></p><blockquote><p><strong>同步方法</strong>的锁对象是什么呢?  :arrow_forward: <code>this</code></p></blockquote><p><strong>同步静态方法</strong>:就是把synchronized关键字加到静态方法上</p><p>格式:</p><p><code>修饰符 static synchronized 返回值类型 方法名(方法参数)&#123; &#125;</code></p><blockquote><p><strong>同步静态方法</strong>的锁对象是什么呢? :arrow_forward: <code>类名.class</code></p></blockquote><p>注意：</p><blockquote><p>synchronized出现在实例方法上，一定锁的是**<code>this</code><strong>; 没得挑。只能是this。不能是其他的对象了。所以这种方式</strong>不灵活**。</p></blockquote><ol><li>缺点</li></ol><p>synchronized出现在实例方法上，表示<strong>整个方法体都需要同步</strong>，可能会无故<strong>扩大同步的范围</strong>，导致程序的<strong>执行效率降低</strong>。所以这种方式<strong>不常用</strong>。</p><ol start="2"><li>优点</li></ol><p>代码写的少了，节俭了。</p><ol start="3"><li> 总结</li></ol><p>如果共享的对象就是<strong>this</strong>，并且需要<strong>同步的代码块是整个方法体</strong>，建议使用这种方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">before</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getBalance();<br>    <span class="hljs-type">double</span> <span class="hljs-variable">after</span> <span class="hljs-operator">=</span> before - money;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-built_in">this</span>.setBalance(after);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在方法调用处synchronized"><a href="#在方法调用处synchronized" class="headerlink" title="在方法调用处synchronized"></a>在方法调用处synchronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>    <span class="hljs-comment">// 取款</span><br>    <span class="hljs-comment">// 多线程并发执行这个方法。</span><br>    <span class="hljs-comment">//synchronized (this) &#123; //这里的this是AccountThread对象，这个对象不共享！</span><br>    <span class="hljs-keyword">synchronized</span> (act) &#123; <span class="hljs-comment">// 这种方式也可以，只不过扩大了同步的范围，效率更低了。</span><br>        act.withdraw(money);<br>    &#125;<br><br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;对&quot;</span>+act.getActno()+<span class="hljs-string">&quot;取款&quot;</span>+money+<span class="hljs-string">&quot;成功，余额&quot;</span> + act.getBalance());<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式也可以，只不过<strong>扩大了同步的范围</strong>，效率更低了。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>synchronized有三种写法：</strong></p><ol><li><code>同步代码块</code></li></ol><p>特点：<strong>灵活</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(线程共享对象)&#123;<br>同步代码块;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><code>在实例方法上使用synchronized</code></li></ol><p>表示<strong>共享对象(临界资源)<strong>一定是 <strong><code>this</code></strong> 并且同步代码块是</strong>整个方法体</strong>。</p><ol start="3"><li><code>在静态方法上使用synchronized</code></li></ol><p>表示找 <strong><code>类锁</code><strong>。</strong>类锁永远只有1把</strong>。</p><p><strong>就算创建了100个对象，那类锁也只有1把。</strong></p><p><strong>注意区分：</strong></p><blockquote><ul><li>对象锁：1个对象1把锁，100个对象100把锁，不唯一。</li><li>类锁：100个对象，也可能只是1把类锁，唯一。</li></ul></blockquote><h2 id="LOCK锁"><a href="#LOCK锁" class="headerlink" title="LOCK锁"></a>LOCK锁</h2><blockquote><p>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作</p></blockquote><p>Lock中提供了<strong>获得锁和释放锁</strong>的方法</p><ul><li><p><code>void lock()</code>:获得锁</p></li><li><p><code>void unlock()</code>:释放锁</p></li></ul><p>Lock是接口不能直接实例化，这里采用它的实现类<strong>ReentrantLock</strong>来实例化</p><ul><li><p><code>Reentrantlock</code>的构造方法</p></li><li><p><code>ReentrantLock()</code>: 创建一个ReentrantLock的实例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch6;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Locktest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">sellticket</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sellticket</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t, <span class="hljs-string">&quot;t1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t, <span class="hljs-string">&quot;t2&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t, <span class="hljs-string">&quot;t3&quot;</span>);<br>        t1.start();<br>        t2.start();<br>        t3.start();<br><span class="hljs-comment">//        System.out.println(Thread.currentThread().getName());</span><br>    &#125;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">selltickets</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tickets;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    selltickets(<span class="hljs-type">int</span> tickets) &#123;<br>        <span class="hljs-built_in">this</span>.tickets = tickets;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                sell();<br>            &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//                            Thread.yield();</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在出售第&quot;</span> + <span class="hljs-built_in">this</span>.tickets + <span class="hljs-string">&quot;张票&quot;</span>);<br>                tickets--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h3><table><thead><tr><th align="center">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">void wait()</td><td align="left">导致当前线程等待，直到另一个线程调用该对象的notify()方法或notifyAll()方法</td></tr><tr><td align="center">void notify()</td><td align="left">唤醒正在等待对象监视器的单个线程</td></tr><tr><td align="center">void notifyAll()</td><td align="left">唤醒正在等待对象监视器的所有线程</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch7;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 生产者消费者案例</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T6_ProCus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            Food food=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Food</span>();<br>            Producter p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Producter</span>(food);<br>            Customers s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Customers</span>(food);<br>            Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(p);<br>            Thread t2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(s);<br>            t1.start();<br>            t2.start();<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*生产者*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Food food;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producter</span><span class="hljs-params">(Food food)</span>&#123;<br>        <span class="hljs-built_in">this</span>.food=food;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br>                food.pro(<span class="hljs-string">&quot;番茄炒蛋&quot;</span>, <span class="hljs-string">&quot;酸甜&quot;</span>);<br>            &#125;<br>                <span class="hljs-keyword">else</span><br>                food.pro(<span class="hljs-string">&quot;辣子鸡丁&quot;</span>,<span class="hljs-string">&quot;麻辣口味&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><span class="hljs-comment">/*消费者*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customers</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Food food;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customers</span><span class="hljs-params">(Food food)</span>&#123;<br>        <span class="hljs-built_in">this</span>.food=food;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            food.get();<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*食物*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;  <span class="hljs-comment">//true表示生产，false表示消费</span><br><br>    <span class="hljs-comment">/*生产产品*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pro</span><span class="hljs-params">(String name,String desc)</span>&#123;<br>       <span class="hljs-comment">//不能生产</span><br>        <span class="hljs-keyword">if</span> (!flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//线程进入等待状态，释放监视器的所有权（对象锁）</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.setName(name);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-built_in">this</span>.setDesc(desc);<br>        flag=<span class="hljs-literal">false</span>;    <span class="hljs-comment">//利用Flag标签来交替执行</span><br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br>    <span class="hljs-comment">/*消费产品*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        不能消费</span><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+<span class="hljs-built_in">this</span>.getDesc());<br>        flag=<span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesc</span><span class="hljs-params">(String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Food&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="死锁（DeadLock）和饥饿"><a href="#死锁（DeadLock）和饥饿" class="headerlink" title="死锁（DeadLock）和饥饿"></a>死锁（DeadLock）和饥饿</h2><blockquote><p><strong>死锁</strong>: <u>一组线程因争夺资源陷入永远等待状态</u></p><p><strong>饥饿</strong>: <u>一个可运行线程由于其他线程总是优先于它而被调度程序无限期地拖延而不能被执行</u></p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221107233342841.png"></p><img src="https://img-blog.csdnimg.cn/20210512224504688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzE1OTQz,size_16,color_FFFFFF,t_70,t_70, #pic_center"><p><u>代码示例</u>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比如：t1想先穿衣服在穿裤子</span><br><span class="hljs-comment"> *       t2想先穿裤子在传衣服</span><br><span class="hljs-comment"> * 此时：t1拿到衣服，t2拿到裤子；</span><br><span class="hljs-comment"> * 由于t1拿了衣服，t2找不到衣服；t2拿了裤子，t1找不到裤子</span><br><span class="hljs-comment"> * 就会导致死锁的发生！</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_DeadLock</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dress</span> <span class="hljs-variable">dress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dress</span>();<br>        <span class="hljs-type">Trousers</span> <span class="hljs-variable">trousers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trousers</span>();<br>        <span class="hljs-comment">//t1、t2共享dress和trousers。</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable1</span>(dress, trousers), <span class="hljs-string">&quot;t1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable2</span>(dress, trousers), <span class="hljs-string">&quot;t2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    Dress dress;<br>    Trousers trousers;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable1</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable1</span><span class="hljs-params">(Dress dress, Trousers trousers)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dress = dress;<br>        <span class="hljs-built_in">this</span>.trousers = trousers;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span>(dress)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (trousers)&#123;<br>                System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    Dress dress;<br>    Trousers trousers;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable2</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable2</span><span class="hljs-params">(Dress dress, Trousers trousers)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dress = dress;<br>        <span class="hljs-built_in">this</span>.trousers = trousers;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span>(trousers)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (dress)&#123;<br>                System.out.println(<span class="hljs-string">&quot;。。。。。。。。。。。。。。&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dress</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trousers</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="交互线程的协作与同步"><a href="#交互线程的协作与同步" class="headerlink" title="交互线程的协作与同步"></a>交互线程的协作与同步</h2><h3 id="交互线程的协作与同步-1"><a href="#交互线程的协作与同步-1" class="headerlink" title="交互线程的协作与同步"></a>交互线程的协作与同步</h3><p><u>生产者-消费者问题</u> </p><blockquote><p>有n个生产者进程和m个消费者进程并发执行，生产者进程要将所生产的产品提供给消费者进程。设置具有k个存储单元的缓冲区</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221107233616159.png" alt="image-20221107233616159"></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221107233647995.png" alt="image-20221107233647995"></p><ul><li><blockquote><p>问题：线程通信，发送线程与接收线程，存在可导致错误的缺陷</p></blockquote></li><li><blockquote><p>错误原因：发送线程与接收线程，没有约定在传送 数据时协同工作的步调</p></blockquote></li></ul><h3 id="协作关系"><a href="#协作关系" class="headerlink" title="协作关系"></a>协作关系</h3><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><blockquote><p>完成共同任务的并发线程，协调一致地运行，约定执行次序，协作制约关系。</p></blockquote><h3 id="线程阻塞和唤醒"><a href="#线程阻塞和唤醒" class="headerlink" title="线程阻塞和唤醒"></a>线程阻塞和唤醒</h3><p><strong>实现方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java.lang.Object类声明以下线程阻塞和唤醒方法，用于管程。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException <span class="hljs-comment">//等待</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">()</span><br><span class="hljs-comment">//唤醒一个等待当前临界资源的线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyAll</span><span class="hljs-params">()</span><br><span class="hljs-comment">//唤醒所有等待当前临界资源的线程</span><br></code></pre></td></tr></table></figure><h2 id="管程-集中控制"><a href="#管程-集中控制" class="headerlink" title="管程(集中控制)"></a>管程(集中控制)</h2><ol><li><strong>管程（monitor）</strong>是指代表<strong>共享资源的数据结构</strong>及并发线程在其上执行的<strong>一组操作</strong>。</li><li>管程被<strong>请求和释放资源</strong>的线程所调用。 </li><li>管程机制包含三部分：</li></ol><ul><li><p><code>条件变量</code>，分配临界资源的条件； </p></li><li><p><code>wait原语</code>，请求临界资源而不满足时，阻塞线程；</p></li><li><p><code>signal原语</code>，唤醒等待该临界资源的一个阻塞线程</p></li></ul><p><strong>生产者和消费者线程同步案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch7;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 生产者消费者案例</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T6_ProCus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            Food food=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Food</span>();<br>            Producter p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Producter</span>(food);<br>            Customers s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Customers</span>(food);<br>            Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(p);<br>            Thread t2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(s);<br>            t1.start();<br>            t2.start();<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*生产者*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Food food;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producter</span><span class="hljs-params">(Food food)</span>&#123;<br>        <span class="hljs-built_in">this</span>.food=food;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br>                food.pro(<span class="hljs-string">&quot;番茄炒蛋&quot;</span>, <span class="hljs-string">&quot;酸甜&quot;</span>);<br>            &#125;<br>                <span class="hljs-keyword">else</span><br>                food.pro(<span class="hljs-string">&quot;辣子鸡丁&quot;</span>,<span class="hljs-string">&quot;麻辣口味&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><span class="hljs-comment">/*消费者*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customers</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Food food;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customers</span><span class="hljs-params">(Food food)</span>&#123;<br>        <span class="hljs-built_in">this</span>.food=food;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            food.get();<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*食物*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;  <span class="hljs-comment">//true表示生产，false表示消费</span><br><br>    <span class="hljs-comment">/*生产产品*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pro</span><span class="hljs-params">(String name,String desc)</span>&#123;<br>       <span class="hljs-comment">//不能生产</span><br>        <span class="hljs-keyword">if</span> (!flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//线程进入等待状态，释放监视器的所有权（对象锁）</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.setName(name);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-built_in">this</span>.setDesc(desc);<br>        flag=<span class="hljs-literal">false</span>;    <span class="hljs-comment">//利用Flag标签来交替执行</span><br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br>    <span class="hljs-comment">/*消费产品*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        不能消费</span><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+<span class="hljs-built_in">this</span>.getDesc());<br>        flag=<span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesc</span><span class="hljs-params">(String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Food&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><h3 id="线程的分类"><a href="#线程的分类" class="headerlink" title="线程的分类"></a>线程的分类</h3><ul><li>一类是：<strong>用户线程</strong></li><li>一类是：<strong>守护线程</strong>（<strong>后台线程</strong>）</li></ul><p>其中具有代表性的就是：<strong>垃圾回收线程（守护线程）</strong>。</p><h4 id="守护线程的特点"><a href="#守护线程的特点" class="headerlink" title="守护线程的特点"></a>守护线程的特点</h4><p>一般守护线程是一个<strong>死循环</strong>，<strong>所有的用户线程只要结束，守护线程自动结束</strong>。</p><p>注意：<strong>主线程main</strong>方法是一个<strong>用户线程</strong>。</p><h4 id="守护线程用法"><a href="#守护线程用法" class="headerlink" title="守护线程用法"></a>守护线程用法</h4><p>每天00:00的时候系统数据自动备份。<br>这个需要使用到定时器，并且我们可以将定时器设置为守护线程。<br>一直在那里看着，没到00:00的时候就备份一次。所有的用户线程如果结束了，守护线程自动退出，没有必要进行数据备份了。</p><table><thead><tr><th>void setDaemon(boolean on)</th><th>on为true表示把线程设置为守护线程</th></tr></thead></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest14</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BakDataThread</span>();<br>        t.setName(<span class="hljs-string">&quot;备份数据的线程&quot;</span>);<br><br>        <span class="hljs-comment">// 启动线程之前，将线程设置为守护线程</span><br>        t.setDaemon(<span class="hljs-literal">true</span>);<br><br>        t.start();<br><br>        <span class="hljs-comment">// 主线程：主线程是用户线程</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BakDataThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 即使是死循环，但由于该线程是守护者，当用户线程结束，守护线程自动终止。</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + (++i));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="第七章、数据IO流操作"><a href="#第七章、数据IO流操作" class="headerlink" title="第七章、数据IO流操作"></a>第七章、数据IO流操作</h1><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221111142439616.png" alt="image-20221111142439616"></p><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221111144227047.png" alt="image-20221111144227047"></p><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221111144202203.png" alt="image-20221111144202203"></p><h2 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>数据流是 Java 进行 I/O 操作的对象，它按照不同的标准可以分为不同的类别。</p><ul><li>按照流的方向主要分为<strong>输入流和输出流</strong>两大类。</li><li>数据流按照数据单位的不同分为<strong>字节流和字符流</strong>。</li><li>按照功能可以划分为<strong>节点流和处理流</strong>。</li></ul><p>数据流的处理只能按照数据序列的顺序来进行，即前一个数据处理完之后才能处理后一个数据。数据流以输入流的形式被程序获取，再以输出流的形式将数据输出到其它设备。图 1 为输入流模式，图 2 为输出流模式。</p><blockquote><p>输入输出是针对程序而言的，输入即从外部源读取数据到程序，输出即将程序中的信息写入到目的地（包括显示器）。</p></blockquote><p><img src="http://c.biancheng.net/uploads/allimg/200115/5-200115142HWK.png"></p><p><img src="http://c.biancheng.net/uploads/allimg/200115/5-200115142K1644.png" alt="输入流模式"></p><h4 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h4><p>Java 流相关的类都封装在 java.io 包中，而且每个数据流都是一个对象。所有输入流类都是 InputStream 抽象类（字节输入流）和 Reader 抽象类（字符输入流）的子类。其中 InputStream 类是字节输入流的抽象类，是所有字节输入流的父类，其层次结构如图 3 所示。</p><div align="center">    <img src="http://c.biancheng.net/uploads/allimg/200115/5-200115145253550.png"></div><p>InputStream 类中所有方法遇到错误时都会引发 <strong>IOException 异常</strong>。如下是该类中包含的常用方法。</p><table><thead><tr><th align="left">名称</th><th>作用</th></tr></thead><tbody><tr><td align="left"><code>int read()</code></td><td>从输入流读入一个字节的数据，将它转换成一个 0~ 255 的整数，返回一个整数，如果遇到输入流的结尾返回 -1</td></tr><tr><td align="left"><code>int read(byte[] b)</code></td><td>从输入流读取若干字节的数据保存到参数 b 指定的字节数组中，返回的字节数表示读取的字节数，如果遇到输入流的结尾返回 -1</td></tr><tr><td align="left"><code>int read(byte[] b,int off,int len)</code></td><td>从输入流读取若干字节的数据保存到参数 b 指定的字节数组中，其中 off 是指在数组中开始保存数据位置的起始下标，len 是指读取字节的位数。返回的是实际读取的字节数，如果遇到输入流的结尾则返回 -1</td></tr><tr><td align="left"><code>void close()</code></td><td>关闭数据流，当完成对数据流的操作之后需要关闭数据流</td></tr><tr><td align="left"><code>int available()</code></td><td>返回可以从数据源读取的数据流的字节数。</td></tr><tr><td align="left">skip(long n)</td><td>从输入流跳过参数 n 指定的字节数目</td></tr><tr><td align="left">boolean markSupported()</td><td>判断输入流是否可以重复读取，如果可以就返回 true</td></tr><tr><td align="left">void mark(int readLimit)</td><td>如果输入流可以被重复读取，从流的当前位置开始设置标记，readLimit 指定可以设置标记的字节数</td></tr><tr><td align="left">void reset()</td><td>使输入流重新定位到刚才被标记的位置，这样可以重新读取标记过的数据</td></tr></tbody></table><p>上述最后 3 个方法一般会结合在一起使用，首先使用 markSupported() 判断，如果可以重复读取，则使用 mark(int readLimit) 方法进行标记，标记完成之后可以使用 read() 方法读取标记范围内的字节数，最后使用 reset() 方法使输入流重新定位到标记的位置，继而完成重复读取操作。</p><p>Java 中的字符是 Unicode 编码，即双字节的，而 InputerStream 是用来处理单字节的，在处理字符文本时不是很方便。这时可以使用 Java 的文本输入流 Reader 类，该类是字符输入流的抽象类，即所有字符输入流的实现都是它的子类，该类的方法与 InputerSteam 类的方法类似，这里不再介绍。</p><h4 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h4><p>在 Java 中所有输出流类都是 OutputStream 抽象类（字节输出流）和 Writer 抽象类（字符输出流）的子类。其中 OutputStream 类是字节输出流的抽象类，是所有字节输出流的父类，其层次结构如图 4 所示。</p><div align="center">    <img src="http://c.biancheng.net/uploads/allimg/200115/5-200115151G3J0.png"></div><p>OutputStream 类是所有字节输出流的超类，用于以二进制的形式将数据写入目标设备，该类是抽象类，不能被实例化。OutputStream 类提供了一系列跟数据输出有关的方法，如下所示。</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>int write(b)</code></td><td>将指定字节的数据写入到输出流</td></tr><tr><td><code>int write (byte[] b)</code></td><td>将指定字节数组的内容写入输出流</td></tr><tr><td><code>int write (byte[] b,int off,int len)</code></td><td>将指定字节数组从 off 位置开始的 len 字节的内容写入输出流</td></tr><tr><td>close()</td><td>关闭数据流，当完成对数据流的操作之后需要关闭数据流</td></tr><tr><td><code>flush()</code></td><td>刷新输出流，强行将缓冲区的内容写入输出流</td></tr></tbody></table><p>每个Java程序运行时都带有一个系统流，系统流对应的类为 java.lang.System。Sytem 类封装了 Java 程序运行时的 3 个系统流，分别通过 in、out 和 err 变量来引用。这 3 个系统流如下所示：</p><ul><li>System.in：标准输入流，默认设备是键盘。</li><li>System.out：标准输出流，默认设备是控制台。</li><li>System.err：标准错误流，默认设备是控制台。</li></ul><p>Java 中常见编码说明如下：</p><ul><li>ISO8859-1：属于单字节编码，最多只能表示 0~255 的字符范围。</li><li>GBK/GB2312：中文的国标编码，用来表示汉字，属于双字节编码。GBK 可以表示简体中文和繁体中文，而 GB2312 只能表示简体中文。GBK 兼容 GB2312。</li><li>Unicode：是一种编码规范，是为解决全球字符通用编码而设计的。UTF-8 和 UTF-16 是这种规范的一种实现，此编码不兼容 ISO8859-1 编码。Java 内部采用此编码。</li><li>UTF：UTF 编码兼容了 ISO8859-1 编码，同时也可以用来表示所有的语言字符，不过 UTF 编码是不定长编码，每一个字符的长度为 1~6 个字节不等。一般在中文网页中使用此编码，可以节省空间。</li></ul><p>在程序中如果处理不好字符编码，就有可能出现乱码问题。例如现在本机的默认编码是 GBK，但在程序中使用了 ISO8859-1 编码，则就会出现字符的乱码问题。就像两个人交谈，一个人说中文，另外一个人说英语，语言不同就无法沟通。为了避免产生乱码，程序编码应与本地的默认编码保持一致。</p><p>本地的默认编码可以使用 System 类查看。Java 中 System 类可以取得与系统有关的信息，所以直接使用此类可以找到系统的默认编码。方法如下所示：</p><p><code>public static Properties getProperty()</code></p><p>使用上述方法可以查看 JVM 的默认编码，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;    <span class="hljs-comment">// 获取当前系统编码    </span><br>    System.out.println(<span class="hljs-string">&quot;系统默认编码：&quot;</span> + System.getProperty(<span class="hljs-string">&quot;file.encoding&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><p>InputStream 类及其子类的对象表示字节输入流，InputStream 类的常用子类如下。</p><ul><li>ByteArrayInputStream 类：将字节数组转换为字节输入流，从中读取字节。</li><li>FileInputStream 类：从文件中读取数据。</li><li>PipedInputStream 类：连接到一个 PipedOutputStream（管道输出流）。</li><li>SequenceInputStream 类：将多个字节输入流串联成一个字节输入流。</li><li>ObjectInputStream 类：将对象反序列化。</li></ul><p>使用 InputStream 类的方法可以从流中读取一个或一批字节。表 1 列出了 InputStream 类的常用方法。</p><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>int read()</td><td>从输入流中读取一个 8 位的字节，并把它转换为 0~255 的整数，最后返回整数。 如果返回 -1，则表示已经到了输入流的末尾。为了提高 I/O 操作的效率，建议尽量 使用 read() 方法的另外两种形式</td></tr><tr><td>int read(byte[] b)</td><td>从输入流中读取若干字节，并把它们保存到参数 b 指定的字节数组中。 该方法返回 读取的字节数。如果返回 -1，则表示已经到了输入流的末尾</td></tr><tr><td>int read(byte[] b, int off, int len)</td><td>从输入流中读取若干字节，并把它们保存到参数 b 指定的字节数组中。其中，off 指 定在字节数组中开始保存数据的起始下标；len 指定读取的字节数。该方法返回实际 读取的字节数。如果返回 -1，则表示已经到了输入流的末尾</td></tr><tr><td>void close()</td><td>关闭输入流。在读操作完成后，应该关闭输入流，系统将会释放与这个输入流相关 的资源。注意，InputStream 类本身的 close() 方法不执行任何操作，但是它的许多 子类重写了 close() 方法</td></tr><tr><td>int available()</td><td>返回可以从输入流中读取的字节数</td></tr><tr><td>long skip(long n)</td><td>从输入流中跳过参数 n 指定数目的字节。该方法返回跳过的字节数</td></tr><tr><td>void mark(int readLimit)</td><td>在输入流的当前位置开始设置标记，参数 readLimit 则指定了最多被设置标记的字 节数</td></tr><tr><td>boolean markSupported()</td><td>判断当前输入流是否允许设置标记，是则返回 true，否则返回 false</td></tr><tr><td>void reset()</td><td>将输入流的指针返回到设置标记的起始处</td></tr></tbody></table><blockquote><p>注意：在使用 <strong>mark() 方法和 reset() 方法</strong>之前，需要判断该文件系统是否支持这两个方法，以避免对程序造成影响。</p></blockquote><h4 id="DataInputStream和DataOutputStream"><a href="#DataInputStream和DataOutputStream" class="headerlink" title="DataInputStream和DataOutputStream"></a>DataInputStream和DataOutputStream</h4><blockquote><p>如果要进行基于Java基本数据类型(如整数或浮点数等)的输入/输出，则要用到过滤流FilterInputStream类和FilterOutputStream类的各种子类。</p></blockquote><p>常用类方法</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221108115307889.png" alt="image-20221108115307889"></p><p>例题：<strong>求100以内的所有素数，并把结果写入D盘的data.dat文件中，最后再以每行10个数的方式显示出data.dat文件内容</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch8;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeList</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//用于统计素数数目</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;d:/data.dat&quot;</span>);<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(fos);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (isPrime(i)) &#123;<br>                    dos.writeInt(i);<br>                    count++;<br>                &#125;<br>            &#125;<br>            fos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d:/data.dat&quot;</span>);<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(fis);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) System.out.println();<span class="hljs-comment">//每行只显示10个数</span><br>                System.out.printf(<span class="hljs-string">&quot;%5d&quot;</span>, dis.readInt());<br>            &#125;<br>            fis.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="BufferedInputStream和BufferedOutputStream"><a href="#BufferedInputStream和BufferedOutputStream" class="headerlink" title="BufferedInputStream和BufferedOutputStream"></a>BufferedInputStream和BufferedOutputStream</h4><blockquote><p>这两个类称之为字节缓冲流。如果文件的读写数据量较多时，使用<strong>字节缓冲流类对象</strong>可以提高文件读写操作的效率。字节缓冲流对象会建立一个<strong>内部缓冲区</strong>，输入/输出数据首先会读写到缓冲区进行操作，当缓冲区满或关闭字节缓冲流时一次性输出到对应流，也可使用<strong>flush()<strong>方法主动将缓冲区数据输出到对应流，这样可以极大地减少磁盘读写次数，提高了文件</strong>操作效率</strong>。</p></blockquote><p><strong>BufferedInputStream类的构造方法:</strong></p><ul><li>BufferedInputStream(InputStream in):创建缓冲输入流对象，保存in流对象，并创建一个内部缓冲区来保存输入数据。</li><li>BufferedInputStream(InputStream in, int size):创建缓冲输入流对象，保存in流对象，并创建一个指定大小为size个字节的内部缓冲区来保存输入数据。</li></ul><p><strong>BufferedOutputStream类的构造方法:</strong></p><ul><li><p>BufferedOutputStream(OutputStream out):创建输出缓冲流对象，并创建一个默认大小为512个字节的内部缓冲区，写数据到参数所指定的输出流out对象。</p></li><li><p>BufferedOutputStream(OutputStream out, int size):创建输出缓冲流对象，并创建一个指定大小为size个字节的内部缓冲区，写数据到参数所指定的输出流out对象。</p></li></ul><blockquote><p>flush()方法用于在程序结束之前<strong>主动将缓冲区</strong>里的数据<strong>输出到对应的输入/输出流</strong>。可以通过输入/输出缓冲流对象进行显示调用。<br>BufferedInputStream类提供了与FileInputStream类同样的读文件操作方法，BufferedOutputStream类提供了与FileOutputStream类同样的写文件操作方法，唯一的区别是所有读写操作的数据首先进入到缓冲区，在必要时(<strong>缓冲区满、关闭流或调用flush()方法</strong>)才输出到对应的流中。</p></blockquote><h4 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h4><blockquote><p>PrintStream类提供了把Java的<strong>任何类型数据转换为字符串类型数据输出</strong>的功能。输出时，经常使用的方法有<code>print()、println()和printf()</code>。创建PrintStream类的对象时，需要在OutputStream类对象的基础上进行。</p><p>PrintStream类的构造方法有:<code>PrintStream(OutputStream out)</code>:创建一个打印流对象。</p></blockquote><p>示例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch8;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStreamTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:/info.dat&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;hello java 123&quot;</span>;<br>    ps.printf(<span class="hljs-string">&quot;%s&quot;</span>,msg);<br>    ps.close();<br>&#125;&#125;<br></code></pre></td></tr></table></figure><p>示例2：写入九九乘法表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch8;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NineNineMul</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;d:/data.dat&quot;</span>);<br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                    ps.printf(<span class="hljs-string">&quot; %8s&quot;</span>, i + <span class="hljs-string">&quot;*&quot;</span> + j + <span class="hljs-string">&quot;=&quot;</span> + (i * j));<br>                &#125;<br>                ps.println();<br>            &#125;<br>            ps.close();<br>            os.close();<br>        &#125;<br>            <span class="hljs-keyword">catch</span>(IOException e)&#123;<br>                System.out.println(e.toString());<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><p>OutputStream 类及其子类的对象表示一个字节输出流。OutputStream 类的常用子类如下。</p><ul><li>ByteArrayOutputStream 类：向内存缓冲区的字节数组中写数据。</li><li>FileOutputStream 类：向文件中写数据。</li><li>PipedOutputStream 类：连接到一个 PipedlntputStream（管道输入流）。</li><li>ObjectOutputStream 类：将对象序列化。</li></ul><p>利用 OutputStream 类的方法可以从流中写入一个或一批字节。表 2 列出了 OutputStream 类的常用方法。</p><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>void write(int b)</td><td>向输出流写入一个字节。这里的参数是 int 类型，但是它允许使用表达式，而不用强制转换成 byte 类型。为了提高 I/O 操作的效率，建议尽量使用 write() 方法的另外两种形式</td></tr><tr><td>void write(byte[] b)</td><td>把参数 b 指定的字节数组中的所有字节写到输出流中</td></tr><tr><td>void write(byte[] b,int off,int len)</td><td>把参数 b 指定的字节数组中的若干字节写到输出流中。其中，off 指定字节数组中的起始下标，len表示元素个数</td></tr><tr><td>void close()</td><td>关闭输出流。写操作完成后，应该关闭输出流。系统将会释放与这个输出流相关的资源。注意，OutputStream 类本身的 close() 方法不执行任何操作，但是它的许多子类重写了close() 方法</td></tr><tr><td>void flush()</td><td>为了提高效率，在向输出流中写入数据时，数据一般会先保存到内存缓冲区中，只有当缓冲区中的数据达到一定程度时，缓冲区中的数据才会被写入输出流中。使用 flush() 方法则可以强制将缓冲区中的数据写入输出流， 并清空缓冲区</td></tr></tbody></table><h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3><blockquote><p>Reader 类是所有字符流输入类的父类，该类定义了许多方法，这些方法对所有子类都是有效的。</p></blockquote><p>Reader类的常用子类如下。</p><ul><li>CharArrayReader 类：将字符数组转换为字符输入流，从中读取字符。</li><li>StringReader 类：将字符串转换为字符输入流，从中读取字符。</li><li><strong>BufferedReader</strong> 类：为其他字符输入流提供读缓冲区。</li><li>PipedReader 类：连接到一个 PipedWriter。</li><li><strong>InputStreamReader</strong> 类：将字节输入流转换为字符输入流，可以指定字符编码。</li></ul><blockquote><p>与 InputStream 类相同，在 Reader 类中也包含 close()、mark()、skip() 和 reset() 等方法，这些方法可以参考 InputStream 类的方法。下面主要介绍 Reader 类中的 read() 方法，如表 1 所示。</p></blockquote><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td><code>int read()</code></td><td>从输入流中读取一个字符，并把它转换为 0~65535 的整数。如果返回 -1， 则表示已经到了输入流的末尾。为了提高 I/O 操作的效率，建议尽量使用下面两种 read() 方法</td></tr><tr><td><code>int read(char[] cbuf)</code></td><td>从输入流中读取若干个字符，并把它们保存到参数 cbuf 指定的字符数组中。 该方法返回读取的字符数，如果返回 -1，则表示已经到了输入流的末尾</td></tr><tr><td><code>int read(char[] cbuf,int off,int len)</code></td><td>从输入流中读取若干个字符，并把它们保存到参数 cbuf 指定的字符数组中。其中， off 指定在字符数组中开始保存数据的起始下标，len 指定读取的字符数。该方法返 回实际读取的字符数，如果返回 -1，则表示已经到了输入流的末尾</td></tr></tbody></table><h4 id="字符文件输入流"><a href="#字符文件输入流" class="headerlink" title="字符文件输入流"></a>字符文件输入流</h4><p>为了读取方便，Java 提供了用来读取字符文件的便捷类——FileReader。该类的构造方法有如下两种重载形式。</p><ol><li>FileReader(File file)：在给定要读取数据的文件的情况下创建一个新的 FileReader 对象。其中，file 表示要从中读取数据的文件。</li><li>FileReader(String fileName)：在给定从中读取数据的文件名的情况下创建一个新 FileReader 对象。其中，fileName 表示要从中读取数据的文件的名称，表示的是一个文件的完整路径。</li></ol><blockquote><p>在用该类的构造方法创建 FileReader 读取对象时，默认的字符编码及字节缓冲区大小都是由系统设定的。要自己指定这些值，可以在 FilelnputStream 上构造一个 InputStreamReader。</p></blockquote><blockquote><p>注意：在创建 FileReader 对象时可能会引发一个 FileNotFoundException 异常，因此需要使用 try catch 语句捕获该异常。</p><p>字符流和字节流的操作步骤相同，都是首先创建输入流或输出流对象，即建立连接管道，建立完成后进行读或写操作，最后关闭输入/输出流通道。</p></blockquote><p>实例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test12</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;D:/myJava/HelloJava.java&quot;</span>); <span class="hljs-comment">// 创建FileReader对象</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            System.out.println(<span class="hljs-string">&quot;D:\\myJava\\HelloJava.java文件内容如下：&quot;</span>);<br>            <span class="hljs-keyword">while</span> ((i = fr.read()) != -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 循环读取</span><br>                System.out.print((<span class="hljs-type">char</span>) i); <span class="hljs-comment">// 将读取的内容强制转换为char类型</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.print(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fr.close(); <span class="hljs-comment">// 关闭对象</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch8;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriterTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:/data.dat&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello java 521&quot;</span>;<br>        fw.write(s);<br>        fw.close();<br>        System.out.println(<span class="hljs-string">&quot;写入成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如上述代码，首先创建了 FileReader 字符输入流对象 fr，该对象指向 D:\myJava\HelloJava.java 文件，然后定义变量 i 来接收调用 read() 方法的返回值，即读取的字符。在 while 循环中，每次读取一个字符赋给整型变量 i，直到读取到文件末尾时退出循环（当输入流读取到文件末尾时，会返回值 -1）.</p></blockquote><h4 id="字符缓冲区输入流"><a href="#字符缓冲区输入流" class="headerlink" title="字符缓冲区输入流"></a>字符缓冲区输入流</h4><blockquote><p>BufferedReader 类主要用于辅助其他字符输入流，它带有缓冲区，可以先将一批数据读到内存缓冲区。接下来的读操作就可以直接从缓冲区中获取数据，而不需要每次都从数据源读取数据并进行字符编码转换，这样就可以提高数据的读取效率。</p></blockquote><blockquote><p>BufferedReader 类的构造方法有如下两种重载形式。</p></blockquote><ol><li>BufferedReader(Reader in)：创建一个 BufferedReader 来修饰参数 in 指定的字符输入流。</li><li>BufferedReader(Reader in,int size)：创建一个 BufferedReader 来修饰参数 in 指定的字符输入流，参数 size 则用于指定缓冲区的大小，单位为字符。</li></ol><blockquote><p>除了可以为字符输入流提供缓冲区以外，BufferedReader 还提供了 <code>readLine()</code> 方法，该方法<strong>返回包含该行内容的字符串</strong>，但该字符串中不包含任何终止符，如果已到达流末尾，则返回 null。readLine() 方法表示<strong>每次读取一行文本内容</strong>，当遇到换行（\n）、回车（\r）或回车后直接跟着换行标记符即可认为某行已终止。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;D:\\myJava\\book.txt&quot;</span>); <span class="hljs-comment">// 创建 FileReader 对象</span><br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr); <span class="hljs-comment">// 创建 BufferedReader 对象</span><br>            System.out.println(<span class="hljs-string">&quot;D:\\myJava\\book.txt 文件中的内容如下：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">strLine</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span> ((strLine = br.readLine()) != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 循环读取每行数据</span><br>                System.out.println(strLine);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e1) &#123;<br>            e1.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fr.close(); <span class="hljs-comment">// 关闭 FileReader 对象</span><br>                br.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如上述代码，首先分别创建了名称为 fr 的 FileReader 对象和名称为 br 的 BufferedReader 对象，然后调用 BufferedReader 对象的 readLine() 方法逐行读取文件中的内容。如果读取的文件内容为 Null，即表明已经读取到文件尾部，此时退出循环不再进行读取操作。最后将字符文件输入流和带缓冲的字符输入流关闭.</p></blockquote><h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><blockquote><p>与 Reader 类相反，Writer 类是所有字符输出流的父类，该类中有许多方法，这些方法对继承该类的所有子类都是有效的。</p></blockquote><p>Writer 类的常用子类如下。</p><ul><li>CharArrayWriter 类：向内存缓冲区的字符数组写数据。</li><li>StringWriter 类：向内存缓冲区的字符串（StringBuffer）写数据。</li><li>BufferedWriter 类：为其他字符输出流提供写缓冲区。</li><li>PipedWriter 类：连接到一个 PipedReader。</li><li>OutputStreamReader 类：将字节输出流转换为字符输出流，可以指定字符编码。</li></ul><blockquote><p>与 OutputStream 类相同，Writer 类也包含 close()、flush() 等方法，这些方法可以参考 OutputStream 类的方法。下面主要介绍 Writer 类中的 write() 方法和 append() 方法，如表 2 所示。</p></blockquote><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>void write(int c)</td><td>向输出流中写入一个字符</td></tr><tr><td><code>void write(char[] cbuf)</code></td><td>把参数 cbuf 指定的字符数组中的所有字符写到输出流中</td></tr><tr><td><code>void write(char[] cbuf,int off,int len)</code></td><td>把参数 cbuf 指定的字符数组中的若干字符写到输出流中。其中，off 指定 字符数组中的起始下标，len 表示元素个数</td></tr><tr><td><code>void write(String str)</code></td><td>向输出流中写入一个字符串</td></tr><tr><td><code>void write(String str, int off,int len)</code></td><td>向输出流中写入一个字符串中的部分字符。其中，off 指定字符串中的起始偏移量，len 表示字符个数</td></tr><tr><td><code>append(char c)</code></td><td>将参数 c 指定的字符添加到输出流中</td></tr><tr><td>append(charSequence esq)</td><td>将参数 esq 指定的字符序列添加到输出流中</td></tr><tr><td>append(charSequence esq,int start,int end)</td><td>将参数 esq 指定的字符序列的子序列添加到输出流中。其中，start 指定 子序列的第一个字符的索引，end 指定子序列中最后一个字符后面的字符 的索引，也就是说子序列的内容包含 start 索引处的字符，但不包括 end 索引处的字符</td></tr></tbody></table><blockquote><p>注意：Writer 类所有的方法在出错的情况下都会引发 <strong>IOException</strong> 异常。关闭一个流后，再对其进行任何操作都会产生错误。</p></blockquote><h4 id="字符文件输出流"><a href="#字符文件输出流" class="headerlink" title="字符文件输出流"></a>字符文件输出流</h4><blockquote><p>Java 提供了写入字符文件的便捷类——FileWriter，该类的构造方法有如下 4 种重载形式。</p></blockquote><ol><li>FileWriter(File file)：在指定 File 对象的情况下构造一个 FileWriter 对象。其中，file 表示要写入数据的 File 对象。</li><li>FileWriter(File file,boolean append)：在指定 File 对象的情况下构造一个 FileWriter 对象，如果 append 的值为 true，则将字节写入文件末尾，而不是写入文件开始处。</li><li>FileWriter(String fileName)：在指定文件名的情况下构造一个 FileWriter 对象。其中，fileName 表示要写入字符的文件名，表示的是完整路径。</li><li>FileWriter(String fileName,boolean append)：在指定文件名以及要写入文件的位置的情况下构造 FileWriter 对象。其中，append 是一个 boolean 值，如果为 true，则将数据写入文件末尾，而不是文件开始处。</li></ol><blockquote><p>在创建 FileWriter 对象时，默认字符编码和默认字节缓冲区大小都是由系统设定的。要自己指定这些值，可以在 FileOutputStream 上构造一个 OutputStreamWriter 对象。FileWriter 类的创建不依赖于文件存在与否，如果关联文件不存在，则会自动生成一个新的文件。在创建文件之前，FileWriter 将在创建对象时打开它作为输出。如果试图打开一个只读文件，将引发一个 IOException 异常。</p></blockquote><blockquote><p>注意：在创建 FileWriter 对象时可能会引发 IOException 或 SecurityException 异常，因此需要使用 try catch 语句捕获该异常。编写一个程序，将用户输入的 4 个字符串保存到 D:\myJava\book.txt 文件中。在这里使用 FileWriter 类中的 write() 方法循环向指定文件中写入数据，实现代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\myJava\\book.txt&quot;</span>); <span class="hljs-comment">// 创建FileWriter对象</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个字符串：&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> input.next(); <span class="hljs-comment">// 读取输入的名称</span><br>                fw.write(name + <span class="hljs-string">&quot;\r\n&quot;</span>); <span class="hljs-comment">// 循环写入文件</span><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;录入完成！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fw.close(); <span class="hljs-comment">// 关闭对象</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如上述代码，首先创建了一个指向 D:\myJava\book.txt 文件的字符文件输出流对象 fw，然后使用 for 循环录入 4 个字符串，并调用 write() 方法将字符串写入到指定的文件中。最后在 finally 语句中关闭字符文件输出流。</p></blockquote><h4 id="字符缓冲区输出流"><a href="#字符缓冲区输出流" class="headerlink" title="字符缓冲区输出流"></a>字符缓冲区输出流</h4><blockquote><p>BufferedWriter 类主要用于辅助其他字符输出流，它同样带有缓冲区，可以先将一批数据写入缓冲区，当缓冲区满了以后，再将缓冲区的数据一次性写到字符输出流，其目的是为了提高数据的写效率。</p></blockquote><p>BufferedWriter 类的构造方法有如下两种重载形式。</p><ol><li>BufferedWriter(Writer out)：创建一个 BufferedWriter 来修饰参数 out 指定的字符输出流。</li><li>BufferedWriter(Writer out,int size)：创建一个 BufferedWriter 来修饰参数 out 指定的字符输出流，参数 size 则用于指定缓冲区的大小，单位为字符。</li></ol><blockquote><p>该类除了可以给字符输出流提供缓冲区之外，还提供了一个新的方法 <code>newLine()</code>，该方法用于写入一个行分隔符。行分隔符字符串由系统属性 line.separator 定义，并且不一定是单个新行（\n）符。</p><p>提示：BufferedWriter 类的使用与 FileWriter 类相同，这里不再重述。</p></blockquote><h3 id="文件随机读写"><a href="#文件随机读写" class="headerlink" title="文件随机读写"></a>文件随机读写</h3><p>建立随机访问文件流对象RandomAccessFile类的构造方法有:</p><ul><li><p><code>RandomAccess File(File file, String mode)</code>:</p><p>使用文件对象file和访问方式mode创建随机访问文件对象。</p></li><li><p><code>RandomAccessFile(String filename, String mode)</code>:</p><p>使用文件绝对名称filename和访问方式mode创建随机访问文件对象。</p><blockquote><p>其中，mode为文件访问的方式，主要有<strong>“r”和“rw”</strong>两种形式。如果mode值为<strong>“r”</strong>，则文件<strong>只能读</strong>，对此文件的任何写操作都会引发<strong>IOException</strong>异常;如果mode值为“<strong>rw</strong>”，且文件已存在，则可以对该文件进行<strong>读/写操作</strong>，如果文件不存在，则会新建一个文件。</p></blockquote></li></ul><h4 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h4><p>在<strong>RandomAccessFile</strong>类中同时提供了文件的读和写操作方法，主要包括<strong>读/写基本数据类型的数据</strong>、<strong>读取一行文本或读取指定长度的字节数</strong>等。</p><h4 id="文件指针操作"><a href="#文件指针操作" class="headerlink" title="文件指针操作"></a>文件指针操作</h4><p>文件指针决定了对文件进行读/写操作的位置，文件指针位置的改变通常有两种方式:<strong>隐式移动</strong>和<strong>显示移动</strong>。通常的读/写操作会隐式移动文件指针，显示移动可通过以下一些方法实现:</p><ol><li>public long <code>getFilePointer()</code> throws IOException:<strong>返回</strong>文件指针的<strong>当前字节位置</strong>。</li><li>public void <code>seek(long pos)</code> throws I0Exception:将文件指针<strong>定位到一个绝对位置pos字节处</strong>。</li><li>public long <code>length()</code> throws IOException:<strong>返回</strong>文件的<strong>长度</strong>，单位<strong>字节</strong>。</li><li>public int <code>skipBytes(int n)</code> throws IOException:将文件指针相对于当前位置<strong>向文件尾方向移动n个字节</strong>，若<strong>n为负值</strong>，则<strong>不移动</strong>。</li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:/info.dat&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(sFile, <span class="hljs-string">&quot;rw&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                rf.writeDouble(i * <span class="hljs-number">1.414</span>);<br>            rf.close();<br>            rf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(sFile, <span class="hljs-string">&quot;rw&quot;</span>);<br><span class="hljs-comment">//移动文件指针到写入的第6个数据位置，重新写入数据47.0001</span><br>            rf.seek(<span class="hljs-number">5</span> * <span class="hljs-number">8</span>);<br>            rf.writeDouble(<span class="hljs-number">47.0001</span>);<br>            rf.close();<br>            rf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(sFile, <span class="hljs-string">&quot;r&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                System.out.println(<span class="hljs-string">&quot;Value &quot;</span> + i + <span class="hljs-string">&quot;: &quot;</span> + rf.readDouble());<br>            rf.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="目录和文件管理"><a href="#目录和文件管理" class="headerlink" title="目录和文件管理"></a>目录和文件管理</h2><blockquote><p>在 <a href="http://alleyf.github.io/">Java</a> 中，File 类是 java.io 包中唯一代表磁盘文件本身的对象，也就是说，如果希望在程序中操作文件和目录，则都可以通过 File 类来完成。File 类定义了一些方法来操作文件，如新建、删除、重命名文件和目录等。</p></blockquote><blockquote><p>File 类不能访问文件内容本身，如果需要访问文件内容本身，则需要使用输入/输出流。File 类提供了如下三种形式构造方法。</p></blockquote><ol><li>File(String path)：如果 path 是实际存在的路径，则该 File 对象表示的是目录；如果 path 是文件名，则该 File 对象表示的是文件。</li><li>File(String path, String name)：path 是路径名，name 是文件名。</li><li>File(File dir, String name)：dir 是路径对象，name 是文件名。</li></ol><p>使用任意一个构造方法都可以创建一个 File 对象，然后调用其提供的方法对文件进行操作。在表 1 中列出了 File 类的常用方法及说明。</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean canRead()</td><td>测试应用程序是否能从指定的文件中进行读取</td></tr><tr><td>boolean canWrite()</td><td>测试应用程序是否能写当前文件</td></tr><tr><td>boolean delete()</td><td>删除当前对象指定的文件</td></tr><tr><td>boolean exists()</td><td>测试当前 File 是否存在</td></tr><tr><td>String getAbsolutePath()</td><td>返回由该对象表示的文件的绝对路径名</td></tr><tr><td>String getName()</td><td>返回表示当前对象的文件名或路径名（如果是路径，则返回最后一级子路径名）</td></tr><tr><td>String getParent()</td><td>返回当前 File 对象所对应目录（最后一级子目录）的父目录名</td></tr><tr><td>boolean isAbsolute()</td><td>测试当前 File 对象表示的文件是否为一个绝对路径名。该方法消除了不同平台的差异，可以直接判断 file 对象是否为绝对路径。在 UNIX/Linux/BSD 等系统上，如果路径名开头是一条斜线<code>/</code>，则表明该 File 对象对应一个绝对路径；在 Windows 等系统上，如果路径开头是盘符，则说明它是一个绝对路径。</td></tr><tr><td>boolean isDirectory()</td><td>测试当前 File 对象表示的文件是否为一个路径</td></tr><tr><td>boolean isFile()</td><td>测试当前 File 对象表示的文件是否为一个“普通”文件</td></tr><tr><td>long lastModified()</td><td>返回当前 File 对象表示的文件最后修改的时间</td></tr><tr><td>long length()</td><td>返回当前 File 对象表示的文件长度</td></tr><tr><td>String[] list()</td><td>返回当前 File 对象指定的路径文件列表</td></tr><tr><td>String[] list(FilenameFilter)</td><td>返回当前 File 对象指定的目录中满足指定过滤器的文件列表</td></tr><tr><td>boolean mkdir()</td><td>创建一个目录，它的路径名由当前 File 对象指定</td></tr><tr><td>boolean mkdirs()</td><td>创建一个目录，它的路径名由当前 File 对象指定</td></tr><tr><td>boolean renameTo(File)</td><td>将当前 File 对象指定的文件更名为给定参数 File 指定的路径名</td></tr></tbody></table><p>File 类中有以下两个常用常量：</p><ul><li>public static final String pathSeparator：指的是分隔连续多个路径字符串的分隔符，Windows 下指<code>;</code>。例如 <code>java -cp test.jar;abc.jar HelloWorld</code>。</li><li>public static final String separator：用来分隔同一个路径字符串中的目录的，Windows 下指<code>/</code>。例如 <code>C:/Program Files/Common Files</code>。</li></ul><blockquote><p>注意：可以看到 File 类的常量定义的命名规则不符合标准命名规则，常量名没有全部大写，这是因为 Java 的发展经过了一段相当长的时间，而命名规范也是逐步形成的，File 类出现较早，所以当时并没有对命名规范有严格的要求，这些都属于 Java 的历史遗留问题。</p></blockquote><blockquote><p>Windows 的路径分隔符使用反斜线“\”，而 Java 程序中的反斜线表示转义字符，所以如果需要在 Windows 的路径下包括反斜线，则应该使用两条反斜线或直接使用斜线“/”也可以。Java 程序支持将斜线当成平台无关的路径分隔符。</p></blockquote><p>假设在 Windows 操作系统中有一文件 <code>D:\javaspace\hello.java</code>，在 Java 中使用的时候，其路径的写法应该为 <code>D:/javaspace/hello.java</code> 或者 <code>D:\\javaspace\\hello.java</code>。</p><blockquote><p>java.io包中的File类提供了与具体平台无关的用于管理文件和目录(文件夹)的操作方法，通过调用这些方法可以用来<strong>获取路径、目录及文件的相关信息</strong>，并对它们进行<strong>创建、删除、重命名</strong>等管理工作。</p></blockquote><ol><li>目录管理</li></ol><ul><li><code>public boolean mkdir()</code>:根据抽象路径名<strong>创建目录</strong>。</li><li><code>public String [] list()</code>:<strong>返回</strong>当前抽象路径下的<strong>文件名和目录名</strong>。</li></ul><ol start="2"><li>文件管理</li></ol><p>（1）<strong>创建</strong>一个<strong>新的文件对象</strong></p><blockquote><p>File类提供了用来创建文件或目录对象的构造方法:</p></blockquote><p>​    <code>public File(String path)</code>:通过给定的路径名来创建文件对象。</p><p>​    public File(String path, String name):使用父路径(目录)字符串和子抽象路径(子目录)字符串创建文件对象。</p><p>（2）有关<strong>文件名和目录名</strong>的操作<br>    public String <code>getName()</code>:返回文件的名称。<br>    public String <code>getPath()</code>:返回文件的路径名。<br>    public String <code>getAbsolutePath()</code>:返回文件绝对路径名。<br>    public String <code>getParent()</code>:返回当前文件的上一级目录名。<br>    public boolean <code>renameTo(File dest)</code>:将抽象路径文件名重命名为给定的新文件名。</p><p>（3）<strong>获取文件属性</strong>信息<br>    public boolean <code>exists()</code>:测试抽象路径表示的文件是否存在。<br>    public boolean <code>canRead()</code>:测试抽象路径表示的文件是否可读。<br>    public boolean <code>canWrite()</code>:测试抽象路径表示的文件是否可写。</p><p>​    public boolean <code>isFile()</code>:测试抽象路径表示的文件是否为正常文件(非目录).<br>​    public boolean <code>isDirectory()</code>:测试抽象路径表示的是否为目录。<br>​    public long <code>lastModified()</code>:返回抽象路径表示的文件最近一次被修改的时间。</p><p>（4）<strong>删除</strong>文件<br>    public boolean <code>delete()</code>:删除抽象路径表示的文件或目录。如果<strong>删除的是目录，则要求目录为空，否则无法删除</strong>。</p><p>示例：重命名目录下的所有文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rename</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/mydir&quot;</span>);<br>        File cur, dest;<br>        String temp;<br>        <span class="hljs-keyword">if</span> (dir.isDirectory()) &#123;<br>            String[] list = dir.list();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.length; i++) &#123;<br>                cur = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, list[i]);<br>                <span class="hljs-keyword">if</span> (cur.isFile()) &#123;<br>                    temp = cur.getName();<br>                    dest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, temp + <span class="hljs-string">&quot;.bak&quot;</span>);<br>                    <span class="hljs-keyword">if</span>(cur.renameTo(dest))<br>                        System.out.println(<span class="hljs-string">&quot;Finished!&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="第八章、网络编程"><a href="#第八章、网络编程" class="headerlink" title="第八章、网络编程"></a>第八章、网络编程</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote><p>Java语言是运用于网络环境的一种编程语言，Java的程序要能在网络上的不同地方运行，这样就要求Java程序执行时，必须有能力取得网络上的各种资源和数据，和服务器建立各种传输通道，把自己的数据传输到网络各处。Java为我们提供了强有力的网络功能。Java所提供的网络功能可以分为三类:用<strong>URL访问网络资源、Socket方式、数据报方式</strong>。</p></blockquote><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p><strong>网络资源定位器</strong>(URL, Uniform ResourceLocator)可以指向网络上的各种资源。通过网络资源定位器可以获取网络上的资源。</p><p>网络资源不仅可以包括网络上各种简单对象:例如网络上的路径和文件(Web页、文本文件、图形(像)文件、声音片断)等;还可以是一些复杂的对象:如<strong>数据库或搜索引擎</strong>。<br>URL:是WWW资源统一资源定位器的缩写。他规范了WWW资源网络定位地址的表示方法。</p><p>网络资源定位器通常有5个部分组成:<code>协议、主机名、端口号、文件和引用</code>。<br>URL的基本表示格式是:<br><code>Protocol://hos tname:/resourcename#anchor</code><br>Protocol：使用的协议，它可以是<strong>http、ftp、news、telnet</strong>等。<br>Hostname:主机名，指定域名服务器(DNS)能访问到的WWW服务的计算机，例<a href="http://www.sun.com/">www.sun.com</a> </p><p>Port:是可选的，表示所连接的端口号，如缺省，将连接到协议缺省的端口（80）。<br>Resourcename:资源名，是主机上能访问到的目录或文件。<br>Anchor:标记，是可选的。他指定文件中有特定标记的位置。</p><h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><p>TCP，<strong>传输控制协议</strong>(Transmission ControlProtocol)，是<strong>面向连接</strong>的通信协议。使用TCP协议进行数据传输时，两个进程之间会建立一个连接，数据以流的形式顺序传输。<br>UDP，<strong>用户数据协议</strong>(User Datagram Protocol) ，是<strong>无连接</strong>通信协议。使用UDP协议进行数据传输时，两个进程之间不建立特定的连接，不对数据到达的顺序进行检查。</p><blockquote><p>在互联网上进行数据传输，多用TCP和UDP协议，它们传输的都是一个<strong>byte stream/ 字节型</strong>的数据流。</p></blockquote><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ul><li><p>Socket是网络驱动层提供给应用程序编程的<strong>接口和一种机制</strong>;</p></li><li><p>Socket在应用程序中创建，通过一种绑定机制与驱动程序建立关系，告诉自己所对应的<strong>IP和Port</strong>。</p><blockquote><p>可以把Socket比喻成一个港口码头，应用程序只要把货物放到港口码头上，就算完成了货物的运送。应用程序只需等待货物到达码头后，将货物取走;</p></blockquote></li></ul><p><code>Socket数据发送过程</code></p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221108164721552.png" alt="image-20221108164721552" style="zoom:50%;" /><p><code>Socket数据接收过程</code></p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221108164806405.png" alt="image-20221108164806405" style="zoom:50%;" /><blockquote><p>Java中网络编程类位于java. net包中。很多应用程序需要可靠的、按顺序的数据传输，也有的应用程序不需要，因此在设计网络程序时应正确选择网络类。</p></blockquote><p><code>URL、URLConnection、 Socket和ServerSocket</code>类是基于TCP协议的;<br><strong>Socket</strong>类用于TCP通信的<strong>服务器和和客户端</strong>。<br><strong>ServerSocket</strong>类用于TCP通信的<strong>服务器端</strong>。<br><code>DatagramPacket、DatagramSocket</code>和<code>MulticastSocket</code> 类是基于UDP协议的。<br><strong>DatagramSocket</strong>类用于<strong>UDP通信</strong>。</p><h2 id="TCP网络程序的工作原理"><a href="#TCP网络程序的工作原理" class="headerlink" title="TCP网络程序的工作原理"></a>TCP网络程序的工作原理</h2><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108165622839.png" alt="image-20221108165622839" style="zoom:50%;" /><h3 id="服务端和客户端交互过程"><a href="#服务端和客户端交互过程" class="headerlink" title="服务端和客户端交互过程"></a>服务端和客户端交互过程</h3><ol><li><strong>服务器端</strong>创建一个<strong>ServerSocket</strong>,然后调用<strong>accept方法</strong>等待客户来连接;</li><li><strong>客户端</strong>程序创建一个<strong>Socket</strong>并请求与服务器建立连接;</li><li><strong>服务器端</strong>接收客户的连接请求，并<strong>创建</strong>一个新的<strong>Socket</strong>与该客户建立专线连接;</li><li>建立了连接的两个Socket在一个<strong>单独的线程</strong>(<strong>由服务器程序创建</strong>)上对话;</li><li><strong>服务器</strong>开始等待新的连接请求，当新的连接请求到达时，重复步骤2-5的过程。</li></ol><h4 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h4><p>InetAddress是用于表示计算机IP地址的一个类，而在日常应用中的计算机地址是用“192.168. 0.1”、www. sina. com. cn等字符串格式来表示的。<br><code>getByName (String host)</code> 方法:</p><p>通过<strong>域名</strong>来构造类InetAddress的实例对象<br><code>getByAddress (byte[] addr)</code> 方法：</p><p>通过<strong>4个字节的网络地址</strong>构造类InetAddress的实例对象</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch9;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InetAddressTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;fcsy.fit&quot;</span>;<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">ts</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ts = InetAddress.getByName(dname);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            System.err.println(e);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ts != <span class="hljs-literal">null</span>)<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;The IP address is :&quot;</span> + ts.getHostAddress());<br>            System.out.println(<span class="hljs-string">&quot;The host address is :&quot;</span>+ts.getHostName());<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;can not access &quot;</span>+ dname);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ServerSocket"><a href="#ServerSocket" class="headerlink" title="ServerSocket"></a>ServerSocket</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>public <code>ServerSocket()</code> ;<br>public <code>ServerSocket(int port)</code> ;绑定到指定端口，连接队列默认为50<br>public <code>ServerSocket (int port, int backlog)</code> ;指定最大连接队列<br>public ServerSocket(int port, int backlog, inetAddress bindAddr) ;<br><code>close()</code>方法;<br><code>accept ()</code>方法;</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108171917963.png" alt="image-20221108171917963" style="zoom:50%;" /><h4 id="ServerSocket常用方法"><a href="#ServerSocket常用方法" class="headerlink" title="ServerSocket常用方法"></a>ServerSocket常用方法</h4><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108172034904.png" alt="image-20221108172034904" style="zoom:50%;" /><h3 id="Socket-1"><a href="#Socket-1" class="headerlink" title="Socket"></a>Socket</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p><code>Socket()</code> ;<br><code>Socket (String host, int port)</code> ;<br><code>Socket (InetAddress addr, int port)</code> ; .<br><code>Socket (String host, int port, InetAddress localaddr, int localPort)</code> ;<br>Socket (InetAddress addr, int port, InetAddress localaddr, int localPort) ;<br><code>getInputStream</code>和<code>getOutputStream</code>方法</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108172711073.png" alt="image-20221108172711073" style="zoom:50%;" /><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108172233442.png" alt="image-20221108172233442" style="zoom:50%;" /><p>示例：</p><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch9;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">5250</span>);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> s.accept();<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>                <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>                dos.writeUTF(<span class="hljs-string">&quot;你好，客户端地址信息：&quot;</span>+socket.getInetAddress()+<br>                        <span class="hljs-string">&quot;\t客户端通信端口号：&quot;</span>+socket.getPort());<br>                dos.writeUTF(<span class="hljs-string">&quot;再见!&quot;</span>);<br>                dos.close();<br>                socket.close();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.err.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch9;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">5250</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> c.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            System.out.println(dis.readUTF());<br>            System.out.println(dis.readUTF());<br>            dis.close();<br>            c.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.err.println(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TCP实战演练"><a href="#TCP实战演练" class="headerlink" title="TCP实战演练"></a>TCP实战演练</h2><ol><li><strong>简单一对一聊天室（单线程）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">package</span> ch9;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> s.getInputStream();<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> s.getOutputStream();<br>            <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>            String info;<br><br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                info = dis.readUTF();<br>                System.out.println(<span class="hljs-string">&quot;对方说：&quot;</span> + info);<br>                <span class="hljs-keyword">if</span> (info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;<br>                info = br.readLine();<br>                dos.writeUTF(info);<br>                <span class="hljs-keyword">if</span> (info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;&#125;<br>            dis.close();<br>            dos.close();<br>            s.close();<br>            serverSocket.close();<br>        &#125;<span class="hljs-keyword">catch</span>(SocketException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;网络连接异常，程序退出&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.err.println(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">package</span> ch9;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8888</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">ic</span> <span class="hljs-operator">=</span> c.getInputStream();<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">oc</span> <span class="hljs-operator">=</span> c.getOutputStream();<br>            <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">icr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(ic);<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(oc);<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(icr);<br>            String info;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                info = br.readLine();<br>                doc.writeUTF(info);<br>                <span class="hljs-keyword">if</span> (info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;<br>                info = dic.readUTF();<br>                System.out.println(<span class="hljs-string">&quot;对方说：&quot;</span> + info);<br>                <span class="hljs-keyword">if</span> (info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            dic.close();<br>            doc.close();<br>            c.close();<br>        &#125;<span class="hljs-keyword">catch</span>(SocketException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;网络连接异常，程序退出&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>自由聊天室（多线程）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">package</span> ch10;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatRoomServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> s.accept();<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(s1.getOutputStream());<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(s1.getInputStream());<br><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReader</span>(dis), <span class="hljs-string">&quot;reader&quot;</span>);<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SeverWriter</span>(dos),<span class="hljs-string">&quot;writer&quot;</span>);<br>            reader.start();<br>            writer.start();<br><br><br>        &#125;<span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;网络连接失败&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> DataInputStream dis;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReader</span><span class="hljs-params">(DataInputStream dis)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dis = dis;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        String info;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                info = dis.readUTF();<br>                System.out.println(<span class="hljs-string">&quot;女朋友说：&quot;</span>+info);<br>                <span class="hljs-keyword">if</span>(info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                &#123;<br>                    System.out.println(<span class="hljs-string">&quot;你的臭宝已下线，拜拜了您&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeverWriter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> DataOutputStream dos;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SeverWriter</span><span class="hljs-params">(DataOutputStream dos)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dos = dos;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>        String info;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                info = br.readLine();<br>                dos.writeUTF(info);<br>                <span class="hljs-keyword">if</span>(info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                &#123;<br>                    System.out.println(<span class="hljs-string">&quot;自己下线，拜拜了您&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;e.printStackTrace();&#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">package</span> ch10;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatRoomClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">8888</span>);<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(c.getOutputStream());<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(c.getInputStream());<br><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientReader</span>(dis),<span class="hljs-string">&quot;reader&quot;</span>);<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientWriter</span>(dos),<span class="hljs-string">&quot;writer&quot;</span>);<br>            reader.start();<br>            writer.start();<br><br>        &#125;<span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;网络连接失败&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientReader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    DataInputStream dis;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientReader</span><span class="hljs-params">(DataInputStream dis)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dis = dis;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        String info;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                info = dis.readUTF();<br>                System.out.println(<span class="hljs-string">&quot;男朋友说：&quot;</span>+info);<br>                <span class="hljs-keyword">if</span>(info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                &#123;<br>                    System.out.println(<span class="hljs-string">&quot;您的臭宝已下线，拜拜了您&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientWriter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    DataOutputStream dos;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientWriter</span><span class="hljs-params">(DataOutputStream dos)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dos = dos;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">icr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(icr);<br>        String info;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                info = br.readLine();<br>                dos.writeUTF(info);<br>                <span class="hljs-keyword">if</span>(info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                &#123;<br>                    System.out.println(<span class="hljs-string">&quot;自己下线，拜拜了您&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;e.printStackTrace();&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在TCP网络上传递对象"><a href="#在TCP网络上传递对象" class="headerlink" title="在TCP网络上传递对象"></a>在TCP网络上传递对象</h2><p><code>Object InputStream</code>和<code>0bject OutputStream</code>可以使用<code>0bject InputStream</code>和<code>Object OutputStream</code>来包装底层网络字节流，TCP服务器和TCP客户端之间就可以<strong>传递对象类型的数据</strong>，实现从<strong>底层输入流</strong>中<strong>读取对象类型的数据</strong>和将对象类型的数据<strong>写入到底层输出流</strong>。<code>RMI (remote method invocation)</code> 编程:是java进行分布式编程的基础。</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108214605083.png" alt="image-20221108214605083" style="zoom:50%;" /><h2 id="UDP网络程序的工作原理"><a href="#UDP网络程序的工作原理" class="headerlink" title="UDP网络程序的工作原理"></a>UDP网络程序的工作原理</h2><blockquote><p><strong>用户数据报协议UDP (user datagram protocol)<strong>是一个</strong>无连接的、发送独立数据包</strong>的协议，它不保证数据按顺序传送和正确到达。<strong>数据报Socket</strong>又称为<strong>UDP套接字</strong>，它无需建立、拆除连接，而是直接将信息打包传向指定的目的地，使用简单，占用资源少，适合于断续、非实时通信。利用UDP通信的<code>两个程序是平等的</code>，<code>没有主次之分</code>，两个程序的代码可以完全一样。</p></blockquote><h3 id="DatagramSocket类"><a href="#DatagramSocket类" class="headerlink" title="DatagramSocket类"></a>DatagramSocket类</h3><p>构造函数:<br>Public <code>DatagramSocket ()</code>；<br>Public <code>DatagramSocket(int port)</code> ;<br>Public <code>DatagramSocket(int port, InetAddress laddr)</code> ;<br><code>Close()</code>方法;<br><code>Send (DatagramPacket p)</code>方法；<br><code>Receive (DatagramPacket p)</code> 方法；</p><h3 id="DatagramPacket类"><a href="#DatagramPacket类" class="headerlink" title="DatagramPacket类"></a>DatagramPacket类</h3><blockquote><p>如果把<code>DatagramSocket</code>比作创建的<strong>港口码头</strong>，那么<code>DatagramPacket</code>就是发送和接收数据的<strong>集装箱</strong>。</p></blockquote><p>构造函数</p><p>Public <code>DatagramPacket (byte[] buf, int length)</code> ;<br>Public <code>DatagramPacket (byte[] buf, int length, InetAddress address, int port)</code> ;<br><code>getInetAddress ()</code>和<code>getPort()</code>方法;<br><code>Byte[] getData ()</code>和<code>getLength()</code>方法;</p><h3 id="UDP网络程序的编写步骤"><a href="#UDP网络程序的编写步骤" class="headerlink" title="UDP网络程序的编写步骤"></a>UDP网络程序的编写步骤</h3><p>第一步：服务端和客户端创建<strong>DatagramSocket实例对象</strong>，服务端（接受方）需要指定<strong>监听端口号</strong>，并且<strong>创建字节接收缓存数组</strong>；定义服务端的<strong>发送内容</strong>；</p><p>第二步：服务端和客户端创建<strong>DatagramPacket实例对象</strong>，构造函数指定各自参数（包括<strong>发送/接收字节缓存数组、字节长度</strong>），客户端还要传入发送目标的<strong>主机号/域名（实例化为InetAddress对象）和端口号</strong>；</p><p>第三步：调用客户端的**send()<strong>和服务端的</strong>receive()**方法：<br><code>DatagramSocket.send (DatagramPacket p)</code>;<br><code>DatagramSocket.receive (DatagramPacket p)</code>;<br>第四步：<code>DatagramSocket.close()</code>;</p><h2 id="UDP实战演练"><a href="#UDP实战演练" class="headerlink" title="UDP实战演练"></a>UDP实战演练</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//服务端（接收方）</span><br><span class="hljs-keyword">package</span> ch10;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpRecv</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8888</span>);<br>            <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf,buf.length);<br>            ds.receive(dp);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">strrecv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(dp.getData(),<span class="hljs-number">0</span>,dp.getLength()) + <span class="hljs-string">&quot; from &quot;</span> + dp.getAddress().getHostAddress()<br>                    + <span class="hljs-string">&quot;:&quot;</span> + dp.getPort();<br>            System.out.println(strrecv);<br>            ds.close();<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//客户端（发送方）</span><br><span class="hljs-keyword">package</span> ch10;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpSend</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java is so interesting &quot;</span>;<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(msg.getBytes(),msg.length(), InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">8888</span>);<br>            ds.send(dp);<br>            ds.close();<br>        &#125;<span class="hljs-keyword">catch</span>(IOException e)&#123;<br>            System.err.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote><p>冒泡排序分为<strong>升序和降序</strong>两种方式，核心思想是<strong>两层for循环比较相邻</strong>前后的两个<strong>元素并交换次序</strong>，<strong>升序</strong>则将<strong>大</strong>的放在<strong>后面</strong>，<strong>降序</strong>则将<strong>小的</strong>放<strong>后面</strong>，<strong>内层循环上界</strong>随着<strong>外层循环变量</strong>的<strong>增大而减小</strong>。</p></blockquote><p><code>核心代码</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//升序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;i&lt; arr.length -<span class="hljs-number">1</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j&lt;arr.length-<span class="hljs-number">1</span>-i; j++)&#123;<br><span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>temp = arr[j];<br>arr[j] = arr[j+<span class="hljs-number">1</span>];<br>arr[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//降序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;i&lt; arr.length -<span class="hljs-number">1</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j&lt;arr.length-<span class="hljs-number">1</span>-i; j++)&#123;<br><span class="hljs-keyword">if</span>(arr[j]&lt;arr[j+<span class="hljs-number">1</span>])&#123;<br>temp = arr[j];<br>arr[j] = arr[j+<span class="hljs-number">1</span>];<br>arr[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch11;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubleSortTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Integer&gt; n = BubleSort();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : n)&#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">BubleSort</span><span class="hljs-params">()</span>&#123;<br>        ArrayList&lt;Integer&gt; n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            n.add(i);<br>            n.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt()%<span class="hljs-number">10</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n.size()-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n.size()-i-<span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span>(n.get(j)&gt;n.get(j+<span class="hljs-number">1</span>))<span class="hljs-comment">//升序</span><br>              <span class="hljs-comment">//if(n.get(j)&gt;n.get(j+1))降序</span><br>                &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> n.get(j);<br>                    n.set(j,n.get(j+<span class="hljs-number">1</span>));<br>                    n.set(j+<span class="hljs-number">1</span>,temp);<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

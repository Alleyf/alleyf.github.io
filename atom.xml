<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alleyf</title>
  
  
  <link href="https://alleyf.github.io/atom.xml" rel="self"/>
  
  <link href="https://alleyf.github.io/"/>
  <updated>2023-10-19T08:20:48.940Z</updated>
  <id>https://alleyf.github.io/</id>
  
  <author>
    <name>alleyf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>司法领域大模型调研一</title>
    <link href="https://alleyf.github.io/2023/10/c114fe139aab.html"/>
    <id>https://alleyf.github.io/2023/10/c114fe139aab.html</id>
    <published>2023-10-18T01:55:23.000Z</published>
    <updated>2023-10-19T08:20:48.940Z</updated>
    
    <content type="html"><![CDATA[<p>调研来源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://github.com/HqWu-HITCS/Awesome-Chinese-LLM#4-llm%E8%AE%AD%E7%BB%83%E5%BE%AE%E8%B0%83%E6%A1%86%E6%9E%B6<br>title: &quot;GitHub - HqWu-HITCS/Awesome-Chinese-LLM: 整理开源的中文大语言模型，以规模较小、可私有化部署、训练成本较低的模型为主，包括底座模型，垂直领域微调及应用，数据集与教程等。&quot;<br>description: &quot;整理开源的中文大语言模型，以规模较小、可私有化部署、训练成本较低的模型为主，包括底座模型，垂直领域微调及应用，数据集与教程等。 - GitHub - HqWu-HITCS/Awesome-Chinese-LLM: 整理开源的中文大语言模型，以规模较小、可私有化部署、训练成本较低的模型为主，包括底座模型，垂直领域微调及应用，数据集与教程等。&quot;<br>host: github.com<br>favicon: https://github.githubassets.com/favicons/favicon.svg<br>image: https://opengraph.githubassets.com/132594c1c3b2385a7b04bb0778a027b442296804625747ac9ba2e8dec643aa52/HqWu-HITCS/Awesome-Chinese-LLM<br></code></pre></td></tr></table></figure><h1 id="研究现状"><a href="#研究现状" class="headerlink" title="研究现状"></a>研究现状</h1><h2 id="1-ChatLaw系列模型"><a href="#1-ChatLaw系列模型" class="headerlink" title="1.ChatLaw系列模型"></a><a href="https://github.com/PKU-YuanGroup/ChatLaw#chatlaw%E7%B3%BB%E5%88%97%E6%A8%A1%E5%9E%8B">1.ChatLaw系列模型</a></h2><blockquote><p>来源：<a href="https://arxiv.org/pdf/2306.16092.pdf">arXiv: ChatLaw</a><br>由北大开源的一系列法律领域的大模型，并针对<strong>LLM 和知识库</strong>的结合问题给出了法律场景下合理的解决方案。</p></blockquote><ul><li><a href="https://huggingface.co/JessyTsu1/ChatLaw-13B">ChatLaw-13B</a>，此版本为学术 demo 版，基于姜子牙 <a href="https://huggingface.co/IDEA-CCNL/Ziya-LLaMA-13B-v1">Ziya-LLaMA-13B-v1</a> 训练而来，<strong>中文各项表现很好</strong>，但是<strong>逻辑复杂的法律问答效果不佳</strong>，需要用更大参数的模型来解决。</li><li><a href="https://huggingface.co/JessyTsu1/ChatLaw-33B">ChatLaw-33B</a>，此版本为学术 demo 版，基于 <a href="https://github.com/lyogavin/Anima">Anima-33B</a> 训练而来，<strong>逻辑推理能力大幅提升</strong>，但是因为 Anima 的<strong>中文语料过少</strong>，导致问答<strong>时常会出现英文数据</strong>。</li><li><a href="https://huggingface.co/chestnutlzj/ChatLaw-Text2Vec">ChatLaw-Text2Vec</a>，使用 93 w 条判决案例做成的数据集基于 BERT 训练了一个<strong>相似度匹配模型</strong>，可将用户<strong>提问信息和对应的法条相匹配</strong>。</li></ul><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p>数据主要由<strong>论坛、新闻、法条、司法解释、法律咨询、法考题、判决文书</strong>组成，随后经过清洗、数据增强等来构造对话数据。</p><h3 id="参考价值"><a href="#参考价值" class="headerlink" title="参考价值"></a>参考价值</h3><ol><li>提出了一种将 <strong>LLM 与矢量知识数据库相结合</strong>的新方法，并且将<strong>矢量数据库检索与关键词检索</strong>相结合，有效降低了单纯依赖矢量数据库检索的不准确性，克服模型<strong>幻觉问题</strong>。</li><li>传统使用<strong>司法选择题</strong>来衡量司法大模型<strong>性能</strong>，但准确率普遍较低参考意义不大，借鉴电子竞技中的<strong>匹配机制和聊天机器人竞技场</strong>（Chatbot Arena）的设计，建立了模型竞逐 <strong>Elo</strong> 积分的评估机制，以更有效地评估模型处理法律多选题的能力。<br> <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310182125959.png" alt="image.png"></li></ol><hr><h2 id="2-智海-录问"><a href="#2-智海-录问" class="headerlink" title="2.智海-录问"></a><a href="https://github.com/zhihaiLLM/wisdomInterrogatory#%E6%99%BA%E6%B5%B7-%E5%BD%95%E9%97%AE">2.智海-录问</a></h2><blockquote><p>智海-录问 (wisdomInterrogatory)是由浙江大学、阿里巴巴达摩院以及华院计算三家单位共同设计研发的法律大模型。核心思想：以“普法共享和司法效能提升”为目标，从推动法律智能化体系入司法实践、数字化案例建设、虚拟法律咨询服务赋能等方面提供支持，形成数字化和智能化的司法基座能力。</p></blockquote><h3 id="数据集-1"><a href="#数据集-1" class="headerlink" title="数据集"></a>数据集</h3><ul><li>模型基座是 <a href="https://github.com/baichuan-inc/baichuan-7B">Baichuan-7B</a>，在此基础上，进行了二次预训练目的是给通用的大模型注入法律领域的知识。预训练的数据包括<strong>法律文书、司法案例以及法律问答数据</strong>。再进行指令微调训练。</li><li>微调训练数据类别包括<strong>法考题、司法咨询、法律情景问答、触犯法律与罪名预测、刑期预测、法院意见、案件摘要提取</strong>等。</li></ul><h3 id="参考价值-1"><a href="#参考价值-1" class="headerlink" title="参考价值"></a>参考价值</h3><p>构建<strong>司法知识库</strong>从中进行<strong>知识检索并融合</strong>，然后与用户输入共同输入到大模型中达到<strong>知识增强</strong>的目的，从而更好地完成各项任务。<br>    <img src="https://github.com/zhihaiLLM/wisdomInterrogatory/raw/main/pics/%E7%9F%A5%E8%AF%86%E5%BA%93%E6%9E%84%E5%BB%BA.png" alt="知识库|450"><br>    共收集了 6 种类型的知识库，包括<strong>法条类、案例类、模板类、书籍类、法律考试类、法律日常问答类</strong>。<br>    <img src="https://github.com/zhihaiLLM/wisdomInterrogatory/raw/main/pics/%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%BC%BA_2.png" alt="智海录问原理图|700"><br>    知识融合作为知识增强中的核心部分，将检索到的不同来源的知识融合后输入给法律大模型，让问题本身<strong>附带更多的司法信息</strong>，从而优化提高模型回答的效果。比如询问一个案例如何判罚时，意图识别阶段识别出应在法条库和类案库做检索，我们把和知识库名和其下检索到的知识拼接，再和问题拼接，共同输入到模型生成答案：<br>    - 可参考的知识：<strong>法条：知识 1，知识 2 类案：知识 1，知识 2 问题：XXX，请问这个案例应该如何判罚？</strong></p><hr><h2 id="3-LexiLaw-中文法律大模型"><a href="#3-LexiLaw-中文法律大模型" class="headerlink" title="3. LexiLaw - 中文法律大模型"></a><a href="https://github.com/CSHaitao/LexiLaw#lexilaw---%E4%B8%AD%E6%96%87%E6%B3%95%E5%BE%8B%E5%A4%A7%E6%A8%A1%E5%9E%8B">3. LexiLaw - 中文法律大模型</a></h2><p>LexiLaw 是一个<strong>经过微调的中文法律大模型</strong>，它基于 <strong>ChatGLM-6 B</strong> 架构，通过在法律领域的数据集上进行微调，使其在提供<strong>法律咨询和支持</strong>方面具备更高的性能和专业性。</p><h3 id="数据集-2"><a href="#数据集-2" class="headerlink" title="数据集"></a>数据集</h3><p><strong>通用司法领域相关数据集+知识库</strong></p><ol><li>通用领域数据：通用领域文本数据集 <strong><a href="https://github.com/LianjiaTech/BELLE">BELLE</a></strong> 1.5 M，其中包括不同指令类型、不同领域的文本。</li><li>专业法律数据：常见法律问题和相应的答案。这些问答数据涵盖了多个法律领域，如合同法、劳动法、知识产权等。**<a href="https://github.com/LawRefBook/Laws">法律法规</a>** 包含刑法、民法、宪法、司法解释等法律法规。**<a href="https://jecqa.thunlp.org/">法律参考书籍</a>** JEC-QA 数据集提供的法律参考书籍<ul><li><strong><a href="https://github.com/LiuHC0428/LAW-GPT">LawGPT_zh</a></strong> : 52 k 单轮问答数据和 92 k 带有法律依据的情景问答</li><li><strong><a href="https://github.com/AndrewZhe/lawyer-llama">Lawyer LLaMA</a></strong> : 法考数据和法律指令微调数据</li><li><strong><a href="https://www.66law.cn/">华律网问答数据</a></strong> : 20 k 高质量华律网问答数据</li><li><strong><a href="https://github.com/murufeng/ChineseNlpCorpus/blob/master/datasets/lawzhidao/intro.ipynb">法律知道</a></strong> : 百度知道收集的 36 k 条法律问答数据</li></ul></li><li>法律文书：<br> 使用了包括<strong>判决书、法院裁定书和法律文件</strong>等在内的法律文书。这些文书涵盖了各种法律领域和案件类型，从法律裁判文书网收集 50 k 法律文书，使用正则匹配提取文书的事实部分和裁判分析过程部分。<h3 id="参考价值-2"><a href="#参考价值-2" class="headerlink" title="参考价值"></a>参考价值</h3></li><li>数据集构建可以使用<strong>通用司法数据集</strong>（开源法律数据集、法律文书、司法案例）+<strong>知识库</strong>（法律法规、法律书籍）。</li><li><strong>类案检索设计</strong>的结构感知预训练语言模型 <a href="https://github.com/CSHaitao/SAILER">SAILER</a>。<pre><code class="hljs"> 1. 优点：     (1) SAILER 充分利用**法律案例文档中包含的结构信息**，更加关注关键**法律要素**，类似于法律专家浏览法律案例文档的方式。     (2) SAILER 采用**非对称编码器-解码器架构**，整合了多个不同的预训练目标。这样，跨任务的丰富语义信息就会被编码成**密集向量**。     (3) 即使没有任何法律注释数据，SAILER 也具有强大的判别能力。它能**准确区分不同指控**的法律案件。</code></pre><ol start="2"><li>展望：<br>“In the future, we would like to explore incorporating more expert knowledge such as legal knowledge graphs and law articles into pre-trained language models for better legal case retrieval.”<em>未来，我们希望探索将更多的专家知识（如<strong>法律知识图谱和法律文章</strong>）纳入预训练语言模型，以便更好地进行法律案件检索</em>。</li></ol></li></ol><hr><h2 id="4-DISC-LawLLM"><a href="#4-DISC-LawLLM" class="headerlink" title="4.DISC-LawLLM"></a><a href="https://github.com/FudanDISC/DISC-LawLLM">4.DISC-LawLLM</a></h2><p>DISC-LawLLM 是一个旨在为用户提供专业、智能、全面的<strong>法律服务</strong>的法律领域大模型，由<a href="http://fudan-disc.com/">复旦大学数据智能与社会计算实验室 (Fudan-DISC)</a> 开发并开源。<br>您可以通过访问这个<a href="https://law.fudan-disc.com/">链接</a>来在线体验我们的 DISC-LawLLM。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310191047973.png" alt="image.png"></p><h3 id="数据集-3"><a href="#数据集-3" class="headerlink" title="数据集"></a>数据集</h3><p>不同场景下的法律智能应用通常需要<strong>结合法律文本理解和生成</strong>的多种基本能力。为此，我们构建了一个高质量的监督微调数据集 DISC-Law-SFT，包括法律信息提取、判决预测、文档摘要和法律问题解答，确保覆盖不同司法应用场景。DISC-Law-SFT 包括两个子集，即 <strong>DISC-Law-SFT-Pair</strong> 和 D<strong>ISC-Law-SFT-Triplet（<a href="https://huggingface.co/datasets/ShengbinYue/DISC-Law-SFT">下载地址</a>）</strong>。前者旨在为 LLM 引入<strong>法律推理能力</strong>，后者则有助于<strong>提高模型利用外部知识的能力</strong></p><table><thead><tr><th>数据集</th><th>对应任务/来源</th><th>样本量</th><th>对应情境</th><th></th><th></th></tr></thead><tbody><tr><td>DISC-Law-SFT-Pair</td><td>司法要素提取</td><td>32 K</td><td>法律专业人员助手</td><td></td><td></td></tr><tr><td></td><td>司法事件检测</td><td>27 K</td><td></td><td></td><td></td></tr><tr><td></td><td>案件分类</td><td>20 K</td><td></td><td></td><td></td></tr><tr><td></td><td>判决预测</td><td>11 K</td><td></td><td></td><td></td></tr><tr><td></td><td>类案匹配</td><td>8 K</td><td></td><td></td><td></td></tr><tr><td></td><td>司法摘要</td><td>9 K</td><td></td><td></td><td></td></tr><tr><td></td><td>舆情摘要</td><td>6 K</td><td></td><td></td><td></td></tr><tr><td></td><td>法律问答</td><td>93 K</td><td>法律咨询服务</td><td></td><td></td></tr><tr><td></td><td>司法阅读理解</td><td>38 K</td><td>法律考试助手</td><td></td><td></td></tr><tr><td></td><td>法律考试</td><td>12 K</td><td></td><td></td><td></td></tr><tr><td>DISC-Law-SFT-Triplet</td><td>判决预测</td><td>16 K</td><td>法律专业人员助手</td><td></td><td></td></tr><tr><td></td><td>法律问答</td><td>23 K</td><td>法律咨询服务</td><td></td><td></td></tr><tr><td>General</td><td>Alpaca-GPT 4</td><td>48 K</td><td>通用场景</td><td></td><td></td></tr><tr><td></td><td>Firefly</td><td>60 K</td><td></td><td></td><td></td></tr><tr><td>总计</td><td>403 K</td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="参考价值-3"><a href="#参考价值-3" class="headerlink" title="参考价值"></a>参考价值</h3><ol><li>采用法律逻辑提示策略构建中国司法领域的监督微调数据集，并微调具有法律推理能力的 LLM。我们为 LLM 增加了<strong>检索模块（开源检索框架 <a href="https://github.com/chatchat-space/Langchain-Chatchat">Langchain-Chatchat</a>）</strong>，以增强模型获取和利用外部法律知识的能力。<br> <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310191117205.png"></li><li>提出了一个全面的法律基准–<strong>DISC-Law-Eval</strong>，通过<strong>司法评价数据集</strong>（<em>一系列中国法律标准化考试和知识竞赛的单选和多选</em>题）以及<strong>问答题形式</strong>（<em>法律咨询、在线论坛、与司法相关的出版物和法律文件中手工构建了一个高质量的测试集</em>），从客观和主观两个维度对智能法律系统进行评估.<br> <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310191120327.png" alt="image.png"></li></ol><hr><h1 id="核心问题"><a href="#核心问题" class="headerlink" title="核心问题"></a>核心问题</h1><h2 id="1-性能评估"><a href="#1-性能评估" class="headerlink" title="1. 性能评估"></a>1. 性能评估</h2><h3 id="1-1-逻辑推理能力"><a href="#1-1-逻辑推理能力" class="headerlink" title="1.1 逻辑推理能力"></a>1.1 逻辑推理能力</h3><p>与医疗、教育、金融等垂直领域不同的是，法律场景的<strong>真实问答</strong>通常涉及很<strong>复杂的逻辑推理</strong>，这要求模型自身有<strong>很强的逻辑能力</strong>。</p><h4 id="1-1-1-解决思路"><a href="#1-1-1-解决思路" class="headerlink" title="1.1.1 解决思路"></a>1.1.1 解决思路</h4><p>可以结合 AutoGPT 将输入的<strong>复杂逻辑问题</strong>进行分解为<strong>多个逻辑简单明确的子问题</strong>，分别对各个子问题进行分析处理。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310181042436.jpg" alt="Autogpt回答.jpg"></p><blockquote><p>[!NOTE] <strong>AutoGPT</strong><br>自主运行的 GPT，其运行过程无需或少需人工干预，能够根据 GPT 自主决策结果并结合外部资源执行相应操作，通过循环评估策略实时评估目标达成程度，来决定任务是否完成。<br><img src="https://pic1.zhimg.com/80/v2-c9833275b2304aacaa46423af3faee10_1440w.webp" alt="autogpt原理图"><br>主要特点</p><ol><li>🌐分配要自动处理的任务/目标，直到完成</li><li>💾将多个 GPT-4 链接在一起以协作完成任务</li><li>🔗互联网访问和读/写文件的能力</li><li>🗃️上下文联动记忆性</li></ol></blockquote><hr><h2 id="2-模型幻觉"><a href="#2-模型幻觉" class="headerlink" title="2. 模型幻觉"></a>2. 模型幻觉</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://zhuanlan.zhihu.com/p/651507945<br>title: &quot;七问大模型幻觉｜LLM Hallucination&quot;<br>description: &quot;在语言模型的背景下，幻觉指的是 一本正经的胡说八道：看似流畅自然的表述，实则不符合事实或者是错误的。幻觉现象的存在严重影响LLM应用的可靠性，本文将探讨大型语言模型(LLMs)的幻觉问题，以及解决幻觉现象的一…&quot;<br>host: zhuanlan.zhihu.com<br>image: https://picx.zhimg.com/v2-8fcec54b8e6a07a5c1eaae4575388082_720w.jpg?source=172ae18b<br></code></pre></td></tr></table></figure><p>在语言模型的背景下，幻觉指的是<strong>一本正经的胡说八道</strong>：看似流畅自然的表述，实则不符合事实或者是错误的，实际上就是模型本身<strong>没有自知之明</strong>的觉悟，幻觉现象的存在严重影响 LLM 应用的<strong>可靠性</strong>。</p><h3 id="2-1-解决思路（如何让模型知之为知之，不知为不知）"><a href="#2-1-解决思路（如何让模型知之为知之，不知为不知）" class="headerlink" title="2.1 解决思路（如何让模型知之为知之，不知为不知）"></a>2.1 解决思路（如何让模型知之为知之，不知为不知）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://www.zhihu.com/question/613263212/answer/3202893895<br>title: &quot;如何解决LLM大语言模型的幻觉问题？ - 知乎&quot;<br>description: &quot;幻觉（Hallucination）一直大模型比较头疼的问题，为了探索大模型有没有可能知道自己「知道哪些知识」，…&quot;<br>host: www.zhihu.com<br></code></pre></td></tr></table></figure><ul><li>幻觉检测：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://arxiv.org/abs/2303.08896<br>title: &quot;SelfCheckGPT: Zero-Resource Black-Box Hallucination Detection for Generative Large Language Models&quot;<br>description: &quot;Generative Large Language Models (LLMs) such as GPT-3 are capable of generating highly fluent responses to a wide variety of user prompts. However, LLMs are known to hallucinate facts and make non-factual statements which can undermine trust in their output. Existing fact-checking approaches either require access to the output probability distribution (which may not be available for systems such as ChatGPT) or external databases that are interfaced via separate, often complex, modules. In this work, we propose \&quot;SelfCheckGPT\&quot;, a simple sampling-based approach that can be used to fact-check the responses of black-box models in a zero-resource fashion, i.e. without an external database. SelfCheckGPT leverages the simple idea that if an LLM has knowledge of a given concept, sampled responses are likely to be similar and contain consistent facts. However, for hallucinated facts, stochastically sampled responses are likely to diverge and contradict one another. We investigate this approach by using GPT-3 to generate passages about individuals from the WikiBio dataset, and manually annotate the factuality of the generated passages. We demonstrate that SelfCheckGPT can: i) detect non-factual and factual sentences; and ii) rank passages in terms of factuality. We compare our approach to several baselines and show that our approach has considerably higher AUC-PR scores in sentence-level hallucination detection and higher correlation scores in passage-level factuality assessment compared to grey-box methods.&quot;<br>host: arxiv.org<br>favicon: https://static.arxiv.org/static/browse/0.3.4/images/icons/favicon-32x32.png<br>image: https://static.arxiv.org/static/browse/0.3.4/images/arxiv-logo-fb.png<br></code></pre></td></tr></table></figure></li><li>幻觉检测，评估，消除：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://arxiv.org/abs/2305.15852<br>title: &quot;Self-contradictory Hallucinations of Large Language Models: Evaluation, Detection and Mitigation&quot;<br>description: &quot;Large language models (large LMs) are susceptible to producing text that contains hallucinated content. An important instance of this problem is self-contradiction, where the LM generates two contradictory sentences within the same context. In this work, we present a comprehensive investigation into self-contradiction for various instruction-tuned LMs, covering evaluation, detection, and mitigation. Our analysis reveals the prevalence of self-contradictions when LMs generate text for open-domain topics, e.g., in 17.7% of all sentences produced by ChatGPT. Self-contradiction also complements retrieval-based methods, as a large portion of them (e.g., 35.8% for ChatGPT) cannot be verified using Wikipedia. We then propose a novel prompting-based framework designed to effectively detect and mitigate self-contradictions. Our detector achieves high accuracy, e.g., around 80% F1 score when prompting ChatGPT. The mitigation algorithm iteratively refines the generated text to remove contradictory information while preserving text fluency and informativeness. Importantly, our entire framework is applicable to black-box LMs and does not require external grounded knowledge. Our approach is practically effective and has been released as a push-button tool to benefit the public, available at https://chatprotect.ai/.&quot;<br>host: arxiv.org<br>favicon: https://static.arxiv.org/static/browse/0.3.4/images/icons/favicon-32x32.png<br>image: https://static.arxiv.org/static/browse/0.3.4/images/arxiv-logo-fb.png<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="3-隐私安全"><a href="#3-隐私安全" class="headerlink" title="3. 隐私安全"></a>3. 隐私安全</h2><p>如何在保证数据隐私性的前提下，利用私有数据训练大语言模型，从而满足在垂直领域中的应用需求。<br><u>eg：三星通过 ChatGPT 泄露了自己的秘密</u></p><p>（1）<strong>差分隐私</strong>（Differential Privacy）<br>    差分隐私是一种数据隐私保护技术，通过向数据<strong>引入噪声</strong>来隐藏个体数据，以防止从模型的输出中反推个人信息。差分隐私可用于在保护数据的同时进行大规模数据分析。<br>（2）<strong>联邦学习</strong><br>    联邦学习（Federated learning，FL）是一种机器学习环境，在这种环境下，多个客户端（如移动设备或整个组织）在<strong>中央服务器</strong>（如服务提供商）的协调下<strong>协同训练一个模型</strong>，同时<strong>保持训练数据的分散性</strong>。FL 体现了<strong>集中数据收集和最小化</strong>的原则，可以减轻传统的集中式机器学习和数据科学方法带来的许多隐私、安全性风险和成本。因此，FL 是一种有效的<strong>高性能计算范式</strong>，也被看作是满足数据隐私性要求的<strong>分布式训练方法</strong>，可以用来解决司法领域大模型的隐私安全问题。<br>    1. <em>分散的数据存储</em>：<br>        联邦学习允许<strong>法院、执法机构和其他司法实体将敏感数据保留在本地，而不需要将数据集中存储在一个地方</strong>。这减少了中心化数据存储的风险，降低了数据泄露的潜在威胁。<br>    2. <em>隐私保护的模型训练</em>：<br>        联邦学习<strong>允许在本地设备上进行模型训练，同时避免直接访问或暴露个人数据。每个本地设备只共享模型参数的更新</strong>，而不是原始数据，这有助于保护数据隐私。<br>    3. <em>安全的模型聚合</em>：<br>        在联邦学习中，<strong>中央服务器负责聚合和整合来自本地设备的模型参数更新</strong>。这一过程经过安全的加密和验证，以确保模型更新的完整性和隐私性。<br>    4. <em>差分隐私</em>：<br>        差分隐私技术可以与联邦学习结合，以进一步增强数据隐私保护。通过<strong>向模型参数的更新引入噪声，可以在保持模型性能的同时，提供更高级别的个人数据保护</strong>。</p><hr><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><ol><li><p>目前司法大模型的研究现状综合来看普遍采用<span style="background:#d3f8b6"><font color="#ff0000">微调模型+知识库</font></span>来实现大模型的司法领域垂直应用<br> （1）<strong>微调模型</strong></p><pre><code class="hljs"> 采用***LLM通用预训练模型+司法数据集***（法律法规，法律书籍，司法试题，论坛咨询和司法文书、案例等）</code></pre><p> （2）<strong>知识库</strong></p><pre><code class="hljs"> 采用法条、案例、文书、题库、问答等建立司法知识库，借助开源检索框架（ [Langchain-Chatchat](https://github.com/chatchat-space/Langchain-Chatchat)）对用户输入进行知识检索获得更多关联信息作为**辅助指导**输入到推理模实现知识增强的效果，从而克服一些模型性能和幻觉问题。</code></pre><blockquote><p>[!NOTE] 思考<br>个人认为在知识库的基础上可以利用<strong>信息抽取技术</strong>将其构建为<strong>知识图谱</strong>，去除冗余信息保留关键实体和关系，再结合<strong>图嵌入机制</strong>将知识图谱实体和关系映射到<strong>低维向量空间</strong>中，从而更好地理解和利用知识图谱的信息，便于实现<strong>图谱融合</strong>，也可结合<strong>矢量和关键词检索</strong>进行知识增强，进而完成下游任务（如<strong>法律咨询、法条检索和类案检索</strong>等）。</p></blockquote></li><li><p>司法大模型<strong>性能评估</strong>方面可以参考上述中的<em>Elo积分评估机制</em>和<em>DISC的客观选择题及主观问答题形式</em>进行模型效果评估。</p></li><li><p>隐私安全方面，<strong>联邦学习</strong>可以是一个考虑的方向，目前已经有部分学者在做相关研究（如<strong>FedLLM：在专有数据上建立你自己的大型语言模型</strong>），但是联邦学习用于大模型的适用性还有待考证。</p></li></ol><hr><h1 id="会议记录"><a href="#会议记录" class="headerlink" title="会议记录"></a>会议记录</h1><ol><li>深度挖掘科学问题的研究，具体有哪些科学研究需要解决？</li><li>数据集构建的目的，如何为后续知识图谱的构建提供便利</li><li>如何构建一个高质量与时俱进的专业领域大模型数据集</li><li>知识图谱中实体对齐和实体链接是两个核心问题</li><li>大模型生成的虚拟数据不能用于自己训练，但是可以用于其他的任务</li><li>大模型的知识检索性能可以用于评估知识图谱</li><li>知识图谱提供指导参考辅助大模型，大模型也可以反哺知识图谱的构建融合</li></ol>]]></content>
    
    
    <summary type="html">some overview about law LLM。</summary>
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="NLP" scheme="https://alleyf.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>残差神经网络</title>
    <link href="https://alleyf.github.io/2023/10/153052cac26f.html"/>
    <id>https://alleyf.github.io/2023/10/153052cac26f.html</id>
    <published>2023-10-18T01:54:31.000Z</published>
    <updated>2023-10-18T01:54:58.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文提出了一个残差学习框架，用于训练深度神经网络。通过引入残差块，可以让网络更深，同时避免了梯度消失和梯度弥散的问题。在多个视觉识别任务中，残差网络都取得了比传统网络更好的结果。</p><hr><h2 id="背景介绍（相关研究）"><a href="#背景介绍（相关研究）" class="headerlink" title="背景介绍（相关研究）"></a>背景介绍（相关研究）</h2><p>在近些年中，深度网络逐渐往更深的方向发展，但是更深的网络训练更加困难，因为梯度消失和梯度弥散的问题会导致网络难以收敛。之前的研究提出了一些方法，如使用更好的初始化方法、使用更好的激活函数等，但是这些方法并不能完全解决问题。本文提出了一种新的方法，即残差学习框架，通过引入残差块来解决梯度消失和梯度弥散的问题。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211604278.png" alt="image.png|500"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211613960.png" alt="image.png|500"></p><hr><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="Identity-Mapping-by-Shortcuts"><a href="#Identity-Mapping-by-Shortcuts" class="headerlink" title="Identity Mapping by Shortcuts"></a>Identity Mapping by Shortcuts</h3><p>$$y=F(x, \left{ W_{i}\right})+x$$</p><hr><p>$$y=F(x, \left{ W_{i}\right})+W_{s}x$$</p><blockquote><p>若残差块输入输出维度一致，则直接短接即可；<br>   若唯独不一致，则对输入进行降维增维处理将输入输出维度统一。</p></blockquote><h3 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211621589.png" alt="image.png|450"></p><blockquote><p>实现为等维直接短接，虚线为异维进行 A (0 填充) /B（投影快捷映射）</p></blockquote><hr><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="ImageNet"><a href="#ImageNet" class="headerlink" title="ImageNet"></a>ImageNet</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211631231.png" alt="image.png"></p><h3 id="CIFAR-10"><a href="#CIFAR-10" class="headerlink" title="CIFAR-10"></a>CIFAR-10</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211631353.png" alt="image.png|450"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211632281.png" alt="image.png"><br>上图左边指的是 Plain Net, 然而 deeper 的时候，会出现明显的 <strong>degradation</strong>。当深度达到 100+的时候，plain Net 的错误率达到了 60%以上。<br>上图中间这是 ResNet，可以看到当 deeper 的时候，错误率也在降低，并没有出现所谓的 degradation。<br>然而右边则显示 <strong>1202 layers</strong> 的 ResNet 的错误率比 <strong>101 layers</strong> 的<strong>错误率高</strong>，作者认为这<strong>不是 degradation 导致</strong>，而是由于这么<strong>大的参数量在 cifar 10 这个小数据集上过拟合</strong>导致。</p><hr><h2 id="重点总结"><a href="#重点总结" class="headerlink" title="重点总结"></a>重点总结</h2><h3 id="1-残差块"><a href="#1-残差块" class="headerlink" title="1. 残差块"></a>1. 残差块</h3><p>作者发现，当加深模型深度时，模型的测试效果没有变好，反而变差。不符合所想的结果，因为浅层的网络应该是深层网络的一个子集，深层网络不应该比浅层网络表现的不好。然而实验的结果表明，当在浅层网络后加恒等映射层，深层网络的效果反而没有浅层网络好。为什么会出现这种原因呢？作者猜想，可能是因为深层网络难以训练。那么为什么会难以训练呢？可能是因为深层网络的最后面的层难以学习到恒等映射，因为浅层网络已经有很好的表现效果了，最后面的层如果找不到更好的表示效果就需要学习恒等映射，而让网络去学习恒等映射是很困难的。</p><blockquote><p>为了解决网络学习恒等映射困难的问题，作者就想，既然学习恒等映射困难，我们就让网络学习 $f(x)=0$ 这个映射。也就引出了参差学习块。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200221174711860.png" alt="20200221174711860.png|400"><br>正常网络的输入是 x ，输出是 f (x)，如果我们要学习恒等映射，也就是让网络的部分学会 f (x)=x，即图中 f (x) 的部分学会一个 f (x) = x 的映射关系，但是我们说直接让网络去学习恒等映射很困难，怎么办？</p><blockquote><p>假设网络的输出是 h (x)，那么不加 shortcut connection 的网络的输出就是 h (x)=f (x)=x，为了让网络更好拟合恒等映射，我们让 h (x)=f (x)+x，那么我们看网络要学习的映射 f (x)，就变为了 f (x)=h (x)−x，这时我们发现，如果直接让 f (x)=0，那么 h (x)=x，也就是说我们让网络输出的结果和恒等映射相同，而网络只学习了 f (x)=0 这个映射，这个映射要比 f (x)=x 恒等映射更好学习，即模型会更好训练，而不受深层的影响，因为深层中多余的层我们可以都学恒等映射，最起码结果不会比浅层的结果差。然而实验结果表明，加上 shortcut connection 的深层网络比不加 shortcut connection 的浅层网络效果还好，这也就说明了深层网络所能提取的信息更高，抽象能力更强。</p></blockquote><h3 id="2-恒等快捷映射和投影快捷映射"><a href="#2-恒等快捷映射和投影快捷映射" class="headerlink" title="2. 恒等快捷映射和投影快捷映射"></a>2. 恒等快捷映射和投影快捷映射</h3><p>当 shortcut 的输入通道数和输出通道数相同时，我们可以使用恒等映射即 $f (x)=x$，也就是将 shortcut 的输出直接加上输入即可（恒等快捷映射）。<br>但是，当 shortcut connection 的输入不等于输出的时候怎么办？（两种方法）</p><blockquote><p>① 将输入数据扩充维度，多余的维度的数据用 0 填充。<br>② 使用 1 x 1 的卷积扩充维度（投影快捷映射）</p><p>我们实际上有三种方式组合：<br>① 零填充快捷连接用来增加维度，所有的快捷连接是没有参数的。<br>② 投影快捷连接用来增加维度，其它的快捷连接是恒等的。<br>③ 所有的快捷连接都是投影。<br>以上三种情况都比没有加 shortcut connection 的好，效果 ③ &gt; ② &gt; ①，但是 ③ 的计算量太大，提升的效果也不大，所以我们一般不用，我们一般用的最多的是 ②。</p></blockquote><p>投影快捷映射：</p><ul><li>当输入和输出的维度不匹配时，使用一个额外的卷积层来进行维度匹配。</li><li>可以用于解决深度残差网络中的维度不匹配问题，从而提高网络的性能。</li><li>在 ResNet 中，投影快捷映射是指使用一个 1 x 1 的卷积层来进行维度匹配。<h3 id="3-Deeper-Bottleneck-Architectures"><a href="#3-Deeper-Bottleneck-Architectures" class="headerlink" title="3. Deeper Bottleneck Architectures"></a>3. Deeper Bottleneck Architectures</h3><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211610964.png" alt="image.png"><blockquote><p>先用 1 x 1 降维，3 x 3 进行卷积，再用 1 x 1 进行升维。<br> 事实上，deeper 左边这种结构也能获得很好的效果。那么为什么要用右边这种结构呢？ 主要是源自于<strong>practical</strong>，因为<strong>左边</strong>这种结构在<strong>训练时间上要比右边结构长的多</strong>。</p></blockquote></li></ul><p align="justify">当换成上图右边这种 Bottleneck 结构的时候，可以发现 152 层的 ResNet 竟然比 VGG 16/19 都要少的复杂度</p>]]></content>
    
    
    <summary type="html">some overview about NLP papers。</summary>
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV" scheme="https://alleyf.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>Spring核心学习</title>
    <link href="https://alleyf.github.io/2023/10/4977175f9574.html"/>
    <id>https://alleyf.github.io/2023/10/4977175f9574.html</id>
    <published>2023-10-16T04:00:17.000Z</published>
    <updated>2023-10-20T00:10:53.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><h2 id="数据库定义语言（DDL）"><a href="#数据库定义语言（DDL）" class="headerlink" title="数据库定义语言（DDL）"></a>数据库定义语言（DDL）</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>我们可以通过 <code>create database</code> 来创建一个数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> create database 数据库名<br></code></pre></td></tr></table></figure><p>为了能够支持中文，我们在创建时可以设定编码格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> CREATE DATABASE IF NOT EXISTS 数据库名 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;<br></code></pre></td></tr></table></figure><p>如果我们创建错误了，我们可以将此数据库删除，通过使用 <code>drop database</code> 来删除一个数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> drop database 数据库名<br></code></pre></td></tr></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>数据库创建完成后，我们一般通过 <code>create table</code> 语句来创建一张表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> create table 表名(列名 数据类型[列级约束条件],  <br>              列名 数据类型[列级约束条件],  <br>              ...  <br>              [,表级约束条件])<br></code></pre></td></tr></table></figure><h3 id="SQL-数据类型"><a href="#SQL-数据类型" class="headerlink" title="SQL 数据类型"></a>SQL 数据类型</h3><p><strong>（1）字符串存储：</strong></p><ul><li>char (n)可以存储任意字符串，但是是固定长度为 n，如果插入的长度小于定义长度时，则用空格填充。</li><li>varchar (n)也可以存储任意数量字符串，长度不固定，但不能超过 n，不会用空格填充。</li></ul><p><strong>（2）存储数字：</strong></p><ul><li>smallint 用于存储小的整数，范围在 (-32768，32767)</li><li>int 用于存储一般的整数，范围在 (-2147483648，2147483647)</li><li>bigint 用于存储大型整数，范围在 (-9,223,372,036,854,775,808，9,223,372,036,854,775,807)</li><li>float 用于存储单精度小数</li><li>double 用于存储双精度的小数</li></ul><p><strong>（3）存储时间：</strong></p><ul><li>date 存储日期</li><li>time 存储时间</li><li>year 存储年份</li><li>datetime 用于混合存储日期+时间</li></ul><h3 id="列级约束条件"><a href="#列级约束条件" class="headerlink" title="列级约束条件"></a>列级约束条件</h3><p>列级约束有六种：主键 Primary key、外键 foreign key 、唯一 unique、检查 check （MySQL 不支持）、默认 default 、非空/空值 not null/ null</p><h3 id="表级约束条件"><a href="#表级约束条件" class="headerlink" title="表级约束条件"></a>表级约束条件</h3><p>表级约束有四种：主键、外键、唯一、检查<br>现在我们通过 SQL 语句来创建我们之前提到的三张表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> [CONSTRAINT &lt;外键名&gt;] FOREIGN KEY 字段名 [，字段名2，…] REFERENCES &lt;主表名&gt; 主键列1 [，主键列2，…]<br></code></pre></td></tr></table></figure><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><p>如果我们想修改表结构，我们可以通过 <code>alter table</code> 来进行修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> ALTER TABLE 表名[ADD 新列名 数据类型[列级约束条件]]  <br>                              [DROP COLUMN 列名[restrict|cascade]]  <br>                              [ALTER COLUMN 列名 新数据类型]<br></code></pre></td></tr></table></figure><p>我们可以通过 ADD 来添加一个新的列，通过 DROP 来删除一个列，不过我们可以添加 restrict 或 cascade，默认是 restrict，表示如果此列作为其他表的约束或视图引用到此列时，将无法删除，而 cascade 会强制连带引用此列的约束、视图一起删除。还可以通过 ALTER 来修改此列的属性。</p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>我们可以通过 <code>drop table</code> 来删除一个表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> DROP TABLE 表名[restrict|cascade]<br></code></pre></td></tr></table></figure><p>其中 restrict 和 cascade 上面的效果一致。</p><hr><h2 id="数据库操纵语言（DML）"><a href="#数据库操纵语言（DML）" class="headerlink" title="数据库操纵语言（DML）"></a>数据库操纵语言（DML）</h2><p>前面我们已经学习了如何使用 SQL 语句来创建、修改、删除数据库以及表，而如何向数据库中插入、删除、更新数据，将是本版块讨论的重点。</p><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>通过使用 <code>insert into</code> 语句来向数据库中插入一条数据（一条记录）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> INSERT INTO 表名 VALUES(值1, 值2, 值3)<br></code></pre></td></tr></table></figure><p>如果插入的<strong>数据与列一一对应</strong>，那么可以<strong>省略列名</strong>，但是如果希望向指定列上插入数据，就需要给出列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> INSERT INTO 表名(列名1, 列名2) VALUES(值1, 值2)<br></code></pre></td></tr></table></figure><p>我们也可以一次性向数据库中插入多条数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> INSERT INTO 表名(列名1, 列名2) VALUES(值1, 值2), (值1, 值2), (值1, 值2)<br></code></pre></td></tr></table></figure><p>我们来试试看向我们刚刚创建的表中添加三条数据。</p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>我们可以通过 <code>update</code> 语句来更新表中的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> UPDATE 表名 SET 列名=值,... WHERE 条件<br></code></pre></td></tr></table></figure><p>注意，SQL 语句中的等于判断是 <code>=</code><br>**警告：如果忘记添加 <code>WHERE</code> 字句来限定条件，将使得整个表中此列的所有数据都被修改！</p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>我们可以通过使用 <code>delete</code> 来删除表中的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> DELETE FROM 表名<br></code></pre></td></tr></table></figure><p>通过这种方式，将删除表中全部数据，我们也可以使用 <code>where</code> 来添加条件，只删除指定的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> DELETE FROM 表名 WHERE 条件<br></code></pre></td></tr></table></figure><hr><h2 id="数据库查询语言（DQL）"><a href="#数据库查询语言（DQL）" class="headerlink" title="数据库查询语言（DQL）"></a>数据库查询语言（DQL）</h2><p>数据库的查询是我们整个数据库学习中的重点内容，面对数据库中庞大的数据，该如何去寻找我们想要的数据，就是我们主要讨论的问题。</p><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><p>单表查询是最简单的一种查询，我们只需要在一张表中去查找数据即可，通过使用 <code>select</code> 语句来进行单表查询：<br> – 指定查询某一列数据  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT 列名[,列名] FROM 表名  <br></code></pre></td></tr></table></figure><p> – 会以别名显示此列  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT 列名 别名 FROM 表名  <br></code></pre></td></tr></table></figure><p> – 查询所有的列数据  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表名  <br></code></pre></td></tr></table></figure><p> – 只查询不重复的值  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT DISTINCT 列名 FROM 表名<br></code></pre></td></tr></table></figure><p>我们也可以添加 <code>where</code> 字句来限定查询目标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表名 WHERE 条件<br></code></pre></td></tr></table></figure><h3 id="常用查询条件"><a href="#常用查询条件" class="headerlink" title="常用查询条件"></a>常用查询条件</h3><ul><li>一般的比较运算符，包括=、&gt;、&lt;、&gt;=、&lt;=、!=等。</li><li>是否在集合中：in、not in</li><li>字符模糊匹配：like，not like</li><li>多重条件连接查询：and、or、not</li></ul><p>我们来尝试使用一下上面这几种条件。</p><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><p>我们可以通过 <code>order by</code> 来将查询结果进行排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表名 WHERE 条件 ORDER BY 列名 ASC|DESC<br></code></pre></td></tr></table></figure><p>使用 ASC 表示升序排序，使用 DESC 表示降序排序，默认为升序。<br>我们也可以可以同时添加多个排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表名 WHERE 条件 ORDER BY 列名1 ASC|DESC, 列名2 ASC|DESC<br></code></pre></td></tr></table></figure><p>这样会先按照列名 1 进行排序，每组列名 1 相同的数据再按照列名 2 排序。</p><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p>聚集函数一般用作统计，包括：</p><ul><li><code>count([distinct]*)</code> 统计所有的行数（distinct 表示去重再统计，下同）</li><li><code>count([distinct]列名)</code> 统计某列的值总和</li><li><code>sum([distinct]列名)</code> 求一列的和（注意必须是数字类型的）</li><li><code>avg([distinct]列名)</code> 求一列的平均值（注意必须是数字类型）</li><li><code>max([distinct]列名)</code> 求一列的最大值</li><li><code>min([distinct]列名)</code> 求一列的最小值</li></ul><p>一般聚集函数是这样使用的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT count(distinct 列名) FROM 表名 WHERE 条件 <br></code></pre></td></tr></table></figure><h3 id="分组和分页查询"><a href="#分组和分页查询" class="headerlink" title="分组和分页查询"></a>分组和分页查询</h3><p>通过使用 <code>group by</code> 来对查询结果进行分组，它需要结合聚合函数一起使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT sum(*) FROM 表名 WHERE 条件 GROUP BY 列名<br></code></pre></td></tr></table></figure><p>我们还可以添加 <code>having</code> 来限制分组条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT sum(*) FROM 表名 WHERE 条件 GROUP BY 列名 HAVING 约束条件<br></code></pre></td></tr></table></figure><p>我们可以通过 <code>limit</code> 来限制查询的数量，只取前 n 个结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表名 LIMIT 数量<br></code></pre></td></tr></table></figure><p>我们也可以进行分页：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表名 LIMIT 起始位置,数量<br></code></pre></td></tr></table></figure><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>多表查询是同时查询的两个或两个以上的表，多表查询会提通过连接转换为单表查询。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表1, 表2<br></code></pre></td></tr></table></figure><p>直接这样查询会得到两张表的笛卡尔积，也就是每一项数据和另一张表的每一项数据都结合一次，会产生庞大的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表1, 表2 WHERE 条件<br></code></pre></td></tr></table></figure><p>这样，只会从笛卡尔积的结果中得到满足条件的数据。<br>**注意：如果两个表中都带有此属性吗，需要添加表名前缀来指明是哪一个表的数据。</p><h3 id="自身连接查询"><a href="#自身连接查询" class="headerlink" title="自身连接查询"></a>自身连接查询</h3><p>自身连接，就是将表本身和表进行笛卡尔积计算，得到结果，但是由于表名相同，因此要先起一个别名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表名 别名1, 表名 别名2<br></code></pre></td></tr></table></figure><p>其实自身连接查询和前面的是一样的，只是连接对象变成自己和自己了。</p><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>外连接就是专门用于联合查询情景的，比如现在有一个存储所有用户的表，还有一张用户详细信息的表，我希望将这两张表结合到一起来查看完整的数据，我们就可以通过使用外连接来进行查询，外连接有三种方式：</p><ul><li>通过使用 <code>inner join</code> 进行内连接，只会返回<strong>两个表满足条件的交集部分</strong>：</li><li>通过使用 <code>left join</code> 进行左连接，不仅会返回两个表满足条件的<strong>交集部分</strong>，也会返回<strong>左边表中的全部数据</strong>，而在右表中缺失的数据会使用 <code>null</code> 来代替（右连接 <code>right join</code> 同理，只是反过来而已，这里就不再介绍了）：<h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3>我们可以将查询的结果作为另一个查询的条件，比如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SELECT * FROM 表名 WHERE 列名 = (SELECT 列名 FROM 表名 WHERE 条件)<br></code></pre></td></tr></table></figure>我们来再次尝试编写一下在最开始我们查找某教师所有学生的 SQL 语句。</li></ul><hr><h2 id="数据库控制语言（DCL）"><a href="#数据库控制语言（DCL）" class="headerlink" title="数据库控制语言（DCL）"></a>数据库控制语言（DCL）</h2><p>庞大的数据库不可能由一个人来管理，我们需要更多的用户来一起管理整个数据库。</p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>我们可以通过 <code>create user</code> 来创建用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> CREATE USER 用户名 identified by 密码;<br></code></pre></td></tr></table></figure><p>也可以不带密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> CREATE USER 用户名;<br></code></pre></td></tr></table></figure><p>我们可以通过@来限制用户登录的登录 IP 地址，<code>%</code> 表示匹配所有的 IP 地址，默认使用的就是任意 IP 地址。</p><h3 id="登陆用户"><a href="#登陆用户" class="headerlink" title="登陆用户"></a>登陆用户</h3><p>首先需要添加一个环境变量，然后我们通过 cmd 去登陆 mysql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> mysql -u 用户名 -p<br></code></pre></td></tr></table></figure><p>输入密码后即可登陆此用户，我们输入以下命令来看看能否访问所有数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> show databases;<br></code></pre></td></tr></table></figure><p>我们发现，虽然此用户能够成功登录，但是并不能查看完整的数据库列表，这是因为此用户还没有权限！</p><h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><p>我们可以通过使用 <code>grant</code> 来为一个数据库用户进行授权：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> grant all|权限1,权限2...(列1,...) on 数据库.表 to 用户 [with grant option]<br></code></pre></td></tr></table></figure><p>其中 all 代表授予所有权限，当数据库和表为 <code>*</code>，代表为所有的数据库和表都授权。如果在最后添加了 <code>with grant option</code>，那么被授权的用户还能将已获得的授权继续授权给其他用户。<br>我们可以使用 <code>revoke</code> 来收回一个权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> revoke all|权限1,权限2...(列1,...) on 数据库.表 from 用户<br></code></pre></td></tr></table></figure><hr><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图本质就是一个查询的结果，不过我们每次都可以通过打开视图来按照我们想要的样子查看数据。既然视图本质就是一个查询的结果，那么它本身就是一个虚表，并不是真实存在的，数据实际上还是存放在原来的表中。<br>我们可以通过 <code>create view</code> 来创建视图;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> CREATE VIEW 视图名称(列名) as 子查询语句 [WITH CHECK OPTION];<br></code></pre></td></tr></table></figure><p>WITH CHECK OPTION 是指当创建后，如果更新视图中的数据，是否要满足子查询中的条件表达式，不满足将无法插入，创建后，我们就可以使用 <code>select</code> 语句来直接查询视图上的数据了，因此，还能在视图的基础上，导出其他的视图。</p><ol><li>若视图是由两个以上基本表导出的，则此视图不允许更新。</li><li>若视图的字段来自字段表达式或常数，则不允许对此视图执行 INSERT 和 UPDATE 操作，但允许执行 DELETE 操作。</li><li>若视图的字段来自集函数，则此视图不允许更新。</li><li>若视图定义中含有 GROUP BY 子句，则此视图不允许更新。</li><li>若视图定义中含有 DISTINCT 短语，则此视图不允许更新。</li><li>若视图定义中有嵌套查询，并且内层查询的 FROM 子句中涉及的表也是导出该视图的基本表，则此视图不允许更新。例如将成绩在平均成绩之上的元组定义成一个视图 GOOD_SC： CREATE VIEW GOOD_SC AS SELECT Sno, Cno, Grade FROM SC WHERE Grade &gt; (SELECT AVG (Grade) FROM SC); 　　导出视图 GOOD_SC 的基本表是 SC，内层查询中涉及的表也是 SC，所以视图 GOOD_SC 是不允许更新的。</li><li>一个不允许更新的视图上定义的视图也不允许更新<br>通过 <code>drop</code> 来删除一个视图：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> drop view apptest<br></code></pre></td></tr></table></figure> </li></ol><hr><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>在数据量变得非常庞大时，通过创建索引，能够大大提高我们的查询效率，就像 Hash 表一样，它能够快速地定位元素存放的位置，我们可以通过下面的命令创建索引：<br> – 创建索引  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> CREATE INDEX 索引名称 ON 表名 (列名)  <br></code></pre></td></tr></table></figure><p> – 查看表中的索引  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> show INDEX FROM student<br></code></pre></td></tr></table></figure><p>我们也可以通过下面的命令删除一个索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> drop index 索引名称 on 表名<br></code></pre></td></tr></table></figure><p>虽然添加索引后会使得查询效率更高，但是我们不能过度使用索引，索引为我们带来高速查询效率的同时，也会在<strong>数据更新时产生额外建立索引的开销</strong>，同时也会<strong>占用磁盘资源</strong>。</p><hr><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器就像其名字一样，在某种条件下会自动触发，在 <code>select</code> / <code>update</code> / <code>delete</code> 时，会自动执行我们预先设定的内容，触发器通常用于检查内容的安全性，相比直接添加约束，触发器显得更加灵活。<br>触发器所依附的表称为基本表，当触发器表上发生 <code>select</code> / <code>update</code> / <code>delete</code> 等操作时，会自动生成两个临时的表（new 表和 old 表，只能由触发器使用）<br>比如在 <code>insert</code> 操作时，新的内容会被插入到 new 表中；在 <code>delete</code> 操作时，旧的内容会被移到 old 表中，我们仍可在 old 表中拿到被删除的数据；在 <code>update</code> 操作时，旧的内容会被移到 old 表中，新的内容会出现在 new 表中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> CREATE TRIGGER 触发器名称 [BEFORE|AFTER] [INSERT|UPDATE|DELETE] ON 表名/视图名 FOR EACH ROW DELETE FROM student WHERE student.sno = new.sno<br></code></pre></td></tr></table></figure><p>FOR EACH ROW 表示针对每一行都会生效，无论哪行进行指定操作都会执行触发器！<br>通过下面的命令来查看触发器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SHOW TRIGGERS<br></code></pre></td></tr></table></figure><p>如果不需要，我们就可以删除此触发器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> DROP TRIGGER 触发器名称<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>当我们要进行的操作非常多时，比如要依次删除很多个表的数据，我们就需要执行大量的 SQL 语句来完成，这些数据库操作语句就可以构成一个事务！只有 <strong>Innodb</strong> 引擎支持事务，我们可以这样来查看支持的引擎：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> SHOW ENGINES;<br></code></pre></td></tr></table></figure><p>MySQL 默认采用的是 Innodb 引擎，我们也可以去修改为其他的引擎。<br>事务具有以下特性 ACID：</p><ul><li>**原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li>**一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li>**隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li>**持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。<br>我们通过以下例子来探究以下事务：<br> begin;   #开始事务<br> …<br> rollback;  #回滚事务<br> savepoint 回滚点;  #添加回滚点<br> rollback to 回滚点; #回滚到指定回滚点<br> …<br> commit; #提交事务<br> – 一旦提交，就无法再进行回滚了！ </li></ul><hr><h2 id="选学内容"><a href="#选学内容" class="headerlink" title="选学内容"></a>选学内容</h2><p><strong>函数</strong>和<strong>存储过程</strong>并没有包含在我们的教程当中，但是这并不代表它们就不重要，通过学习它们能够让你的数据库管理能力更上一层楼，它们能够捆绑一组 SQL 语句运行，并且可以反复使用，大大提高工作效率。</p><h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><p>通过（<code>@Data，@Getter，@Setter，@AllArgsConstructor等</code>）注解简化传统繁琐的 <code>get/set</code> 和<strong>构造</strong>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span> <br><span class="hljs-meta">@AllArgsConstructor</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123; <br><span class="hljs-keyword">private</span> Integer sid; <br><span class="hljs-keyword">private</span> String name; <br><span class="hljs-keyword">private</span> String sex; <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用 Lombok 之后，只需要添加几个注解，就能够解决掉我们之前长长的一串代码！</p></blockquote><h2 id="配置-Lombok"><a href="#配置-Lombok" class="headerlink" title="配置 Lombok"></a>配置 Lombok</h2><ul><li>首先我们需要<strong>导入 Lombok 的 jar 依赖</strong>，和 jdbc 依赖是一样的，放在项目目录下直接导入就行了。可以在这里进行下载：<a href="https://projectlombok.org/download">Lombok</a></li><li>然后我们要安装一下 Lombok 插件，由于 IDEA<strong>默认都安装了 Lombok 的插件</strong>，因此直接导入依赖后就可以使用了。</li><li>重启 IDEA</li></ul><p>Lombok 是一种插件化注解 API，是通过添加注解来实现的，然后在<strong>javac</strong>进行编译的时候，进行处理。<br>Java 的编译过程可以分成三个阶段：<br><img src="https://image.itbaima.net/markdown/2023/03/06/fUEondmywKNucOW.png"></p><ol><li>所有源文件会被解析成语法树。</li><li>调用注解处理器。如果注解处理器产生了新的源文件，新文件也要进行编译。</li><li>最后，语法树会被分析并转化成类文件。</li></ol><p>实际上在上述的第二阶段，会执行 <a href="https://github.com/rzwitserloot/lombok/blob/master/src/core/lombok/core/AnnotationProcessor.java">lombok.core.AnnotationProcessor</a>，它所做的工作就是我们上面所说的，修改语法树。</p><h2 id="使用-Lombok"><a href="#使用-Lombok" class="headerlink" title="使用 Lombok"></a>使用 Lombok</h2><ol><li><code>@Getter</code> 和 <code>@Setter</code> 来为当前类的所有字段生成 <code>get/set方法</code>，他们可以添加到类或是字段上，注意<strong>静态字段不会生成，final 字段无法生成 set 方法</strong>。<ul><li>我们还可以使用 <code>@Accessors</code> 来控制生成 Getter 和 Setter 的<strong>样式</strong>。</li></ul></li><li><code>@ToString</code> 来为当前类生成预设的<strong>toString 方法</strong>。</li><li><code>@EqualsAndHashCode</code> 来快速生成<strong>比较和哈希值方法</strong>。</li><li><code>@AllArgsConstructor</code> 和 <code>@NoArgsConstructor</code> 来快速生成<strong>全参构造和无参构造</strong>。</li><li><code>@RequiredArgsConstructor</code> 来快速生成参数只包含 <code>final</code> 或被标记为 <code>@NonNull</code> 的成员字段。</li><li><code>@Data</code> 能代表 <code>@Setter</code>、<code>@Getter</code>、<code>@RequiredArgsConstructor</code>、<code>@ToString</code>、<code>@EqualsAndHashCode</code> 全部注解。<ul><li>一旦使用 <code>@Data</code> 就<strong>不建议此类有继承关系</strong>，因为 <code>equal</code> 方法可能不符合预期结果（尤其是仅比较子类属性）。</li></ul></li><li><code>@Value</code> 与 <code>@Data</code> 类似，但是并<strong>不会生成 setter</strong>并且<strong>成员属性都是 final 的</strong>。</li><li><code>@SneakyThrows</code> 来自动生成<strong>try-catch</strong>代码块。</li><li><code>@Cleanup</code> 作用与局部变量，在最后自动调用其 <code>close()</code> 方法（可以自由更换）</li><li><code>@Builder</code> 来快速生成建造者模式。<ul><li>通过使用 <code>@Builder.Default</code> 来指定默认值。</li><li>通过使用 <code>@Builder.ObtainVia</code> 来指定默认值的获取方式。</li></ul></li></ol><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs (Plain Ordinary Java Object, 普通的 Java 对象)映射成数据库中的记录。</p><h2 id="XML-语言概述"><a href="#XML-语言概述" class="headerlink" title="XML 语言概述"></a>XML 语言概述</h2><p>XML 语言发明最初是用于数据的存储和传输:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">outer</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿伟<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">desc</span>&gt;</span>怎么又在玩电动啊<span class="hljs-tag">&lt;/<span class="hljs-name">desc</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">inner</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">sex</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">sex</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">inner</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">outer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>HTML主要用于通过编排来展示数据，而XML主要是存放数据，它更像是一个配置文件！<br>一个XML文件存在以下的格式规范：</p><ul><li>必须存在一个<strong>根节点</strong>，将所有的子标签全部包含。</li><li>可以但不必须包含一个<strong>头部声明</strong>（主要是可以设定编码格式）</li><li>所有的<strong>标签必须成对出现</strong>，可以嵌套但不能交叉嵌套</li><li>区分大小写。</li><li>标签中<strong>可以存在属性</strong>，比如上面的<code>type=&quot;1&quot;</code>就是<code>inner</code>标签的一个属性，属性的值由单引号或双引号包括。</li></ul><p>XML文件也可以使用注释：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!-- 注释内容 --&gt;</span><br></code></pre></td></tr></table></figure><p>XML的转义字符:<br><img src="https://image.itbaima.net/markdown/2023/03/06/j5WEDVxYJ8KSkHt.jpg"><br>可以使用<code>CD</code>来快速创建不解析区域：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>&lt;![CDATA[我看你&lt;&gt;&lt;&gt;&lt;&gt;是一点都不懂哦&gt;&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JDK为我们内置了一个叫做<code>org.w3c</code>的XML解析库来进行XML文件内容解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">// 创建DocumentBuilderFactory对象  </span><br> <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();  <br> <span class="hljs-comment">// 创建DocumentBuilder对象  </span><br> <span class="hljs-keyword">try</span> &#123;  <br>     <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> factory.newDocumentBuilder();  <br>     <span class="hljs-type">Document</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> builder.parse(<span class="hljs-string">&quot;file:mappers/test.xml&quot;</span>);  <br>     <span class="hljs-comment">// 每一个标签都作为一个节点  </span><br>     <span class="hljs-type">NodeList</span> <span class="hljs-variable">nodeList</span> <span class="hljs-operator">=</span> d.getElementsByTagName(<span class="hljs-string">&quot;test&quot;</span>);  <span class="hljs-comment">// 可能有很多个名字为test的标签  </span><br>     <span class="hljs-type">Node</span> <span class="hljs-variable">rootNode</span> <span class="hljs-operator">=</span> nodeList.item(<span class="hljs-number">0</span>); <span class="hljs-comment">// 获取首个  </span><br> ​  <br>     <span class="hljs-type">NodeList</span> <span class="hljs-variable">childNodes</span> <span class="hljs-operator">=</span> rootNode.getChildNodes(); <span class="hljs-comment">// 一个节点下可能会有很多个节点，比如根节点下就囊括了所有的节点  </span><br>     <span class="hljs-comment">//节点可以是一个带有内容的标签（它内部就还有子节点），也可以是一段文本内容  </span><br> ​  <br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; childNodes.getLength(); i++) &#123;  <br>         <span class="hljs-type">Node</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> childNodes.item(i);  <br>         <span class="hljs-keyword">if</span>(child.getNodeType() == Node.ELEMENT_NODE)  <span class="hljs-comment">//过滤换行符之类的内容，因为它们都被认为是一个文本节点  </span><br>         System.out.println(child.getNodeName() + <span class="hljs-string">&quot;：&quot;</span> +child.getFirstChild().getNodeValue());  <br>         <span class="hljs-comment">// 输出节点名称，也就是标签名称，以及标签内部的文本（内部的内容都是子节点，所以要获取内部的节点）  </span><br>     &#125;  <br> &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>     e.printStackTrace();  <br> &#125;<br></code></pre></td></tr></table></figure><p>当然，学习和使用XML只是为了更好地去认识Mybatis的工作原理，以及如何使用XML来作为Mybatis的配置文件，这是在开始之前必须要掌握的内容（需要知道Mybatis就是通过这种方式来读取配置文件的）<br>不仅仅是Mybatis，包括后面的Spring等众多框架都会用到XML来作为框架的配置文件！</p><h2 id="初次使用Mybatis"><a href="#初次使用Mybatis" class="headerlink" title="初次使用Mybatis"></a>初次使用Mybatis</h2><p>那么我们首先来感受一下Mybatis给我们带来的便捷，就从搭建环境开始，中文文档网站：<a href="https://mybatis.org/mybatis-3/zh/configuration.html">https://mybatis.org/mybatis-3/zh/configuration.html</a><br>我们需要导入Mybatis的依赖，Jar包需要在github上下载，同样地放入到项目的根目录下，右键作为依赖即可！（依赖变多之后，我们可以将其放到一个单独的文件夹，不然会很繁杂）<br>依赖导入完成后，我们就可以编写Mybatis的配置文件了（现在不是在Java代码中配置了，而是通过一个XML文件去配置，这样就使得硬编码的部分大大减少，项目后期打包成Jar运行不方便修复，但是通过配置文件，我们随时都可以去修改，就变得很方便了，同时代码量也大幅度减少，配置文件填写完成后，我们只需要关心项目的业务逻辑而不是如何去读取配置文件）我们按照官方文档给定的提示，在项目根目录下新建名为<code>mybatis-config.xml</code>的文件，并填写以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span>  <br> <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span>  </span><br><span class="hljs-meta">   <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span><br><span class="hljs-meta">   <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <br>   <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>  <br>       <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>  <br>       <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;驱动类（含包名）&#125;&quot;</span>/&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;数据库连接URL&#125;&quot;</span>/&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;用户名&#125;&quot;</span>/&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;密码&#125;&quot;</span>/&gt;</span>  <br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>  <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最上方还引入了一个叫做DTD（文档类型定义）的东西，它提前帮助我们规定了一些标签，我们就需要使用Mybatis提前帮助我们规定好的标签来进行配置（因为只有这样Mybatis才能正确识别我们配置的内容）<br>通过进行配置，我们就告诉了Mybatis我们链接数据库的一些信息，包括URL、用户名、密码等，这样Mybatis就知道该链接哪个数据库、使用哪个账号进行登陆了（也可以不使用配置文件）<br>配置文件完成后，我们需要在Java程序启动时，让Mybatis对配置文件进行读取并得到一个<code>SqlSessionFactory</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;  <br>     <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>))&#123;  <br>             <span class="hljs-comment">//暂时还没有业务  </span><br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>直接运行即可，虽然没有干什么事情，但是不会出现错误，如果之前的配置文件编写错误，直接运行会产生报错！那么现在我们来看看，<code>SqlSessionFactory</code>对象是什么东西：<br><img src="https://s2.loli.net/2023/03/06/67AJEFCsKoin3Hd.jpg" alt="img"><br>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的，我们可以通过<code>SqlSessionFactory</code>来创建多个新的会话，<code>SqlSession</code>对象，每个会话就相当于我不同的地方登陆一个账号去访问数据库，你也可以认为这就是之前JDBC中的<code>Statement</code>对象，会话之间相互隔离，没有任何关联。<br>而通过<code>SqlSession</code>就可以完成几乎所有的数据库操作，我们发现这个接口中定义了大量数据库操作的方法，因此，现在我们只需要通过一个对象就能完成数据库交互了，极大简化了之前的流程。<br>我们来尝试一下直接读取实体类，读取实体类肯定需要一个映射规则，比如类中的哪个字段对应数据库中的哪个字段，在查询语句返回结果后，Mybatis就会自动将对应的结果填入到对象的对应字段上。首先编写实体类，，直接使用Lombok是不是就很方便了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">import</span> lombok.Data;  <br> ​  <br> <span class="hljs-meta">@Data</span>  <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;  <br>     <span class="hljs-type">int</span> sid;   <span class="hljs-comment">//名称最好和数据库字段名称保持一致，不然可能会映射失败导致查询结果丢失  </span><br>     String name;  <br>     String sex;  <br> &#125;<br></code></pre></td></tr></table></figure><p>在根目录下重新创建一个mapper文件夹，新建名为<code>TestMapper.xml</code>的文件作为我们的映射器，并填写以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span>  <br> <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span>  </span><br><span class="hljs-meta">         <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span><br><span class="hljs-meta">         <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;TestMapper&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudent&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.test.entity.Student&quot;</span>&gt;</span>  <br>         select * from student  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中namespace就是命名空间，每个Mapper都是唯一的，因此需要用一个命名空间来区分，它还可以用来绑定一个接口。我们在里面写入了一个select标签，表示添加一个select操作，同时id作为操作的名称，resultType指定为我们刚刚定义的实体类，表示将数据库结果映射为<code>Student</code>类，然后就在标签中写入我们的查询语句即可。<br>编写好后，我们在配置文件中添加这个Mapper映射器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:mappers/TestMapper.xml&quot;</span>/&gt;</span>  <br>     <span class="hljs-comment">&lt;!--    这里用的是url，也可以使用其他类型，我们会在后面讲解    --&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后在程序中使用我们定义好的Mapper即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;  <br>     <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>))&#123;  <br>         List&lt;Student&gt; student = sqlSession.selectList(<span class="hljs-string">&quot;selectStudent&quot;</span>);  <br>         student.forEach(System.out::println);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>我们会发现，Mybatis非常智能，我们只需要告诉一个映射关系，就能够直接将查询结果转化为一个实体类！</p><h2 id="配置Mybatis"><a href="#配置Mybatis" class="headerlink" title="配置Mybatis"></a>配置Mybatis</h2><p>在了解了Mybatis为我们带来的便捷之后，现在我们就可以正式地去学习使用Mybatis了！<br>由于<code>SqlSessionFactory</code>一般只需要创建一次，因此我们可以创建一个工具类来集中创建<code>SqlSession</code>，这样会更加方便一些：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtil</span> &#123;  <br> ​  <br>     <span class="hljs-comment">//在类加载时就进行创建  </span><br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;  <br>     <span class="hljs-keyword">static</span> &#123;  <br>         <span class="hljs-keyword">try</span> &#123;  <br>             sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));  <br>         &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;  <br>             e.printStackTrace();  <br>         &#125;  <br>     &#125;  <br> ​  <br>     <span class="hljs-comment">/**  </span><br><span class="hljs-comment">      * 获取一个新的会话  </span><br><span class="hljs-comment">      * <span class="hljs-doctag">@param</span> autoCommit 是否开启自动提交（跟JDBC是一样的，如果不自动提交，则会变成事务操作）  </span><br><span class="hljs-comment">      * <span class="hljs-doctag">@return</span> SqlSession对象  </span><br><span class="hljs-comment">      */</span>  <br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSession</span><span class="hljs-params">(<span class="hljs-type">boolean</span> autoCommit)</span>&#123;  <br>         <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(autoCommit);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>现在我们只需要在main方法中这样写即可查询结果了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>         List&lt;Student&gt; student = sqlSession.selectList(<span class="hljs-string">&quot;selectStudent&quot;</span>);  <br>         student.forEach(System.out::println);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>之前我们演示了，如何创建一个映射器来将结果快速转换为实体类，但是这样可能还是不够方便，我们每次都需要去找映射器对应操作的名称，而且还要知道对应的返回类型，再通过<code>SqlSession</code>来执行对应的方法，能不能再方便一点呢？<br>现在，我们可以通过<code>namespace</code>来绑定到一个接口上，利用接口的特性，我们可以直接指明方法的行为，而实际实现则是由Mybatis来完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestMapper</span> &#123;  <br>     List&lt;Student&gt; <span class="hljs-title function_">selectStudent</span><span class="hljs-params">()</span>;  <br> &#125;<br></code></pre></td></tr></table></figure><p>将Mapper文件的命名空间修改为我们的接口，建议同时将其放到同名包中，作为内部资源：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.test.mapper.TestMapper&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudent&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.test.entity.Student&quot;</span>&gt;</span>  <br>         select * from student  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>作为内部资源后，我们需要修改一下配置文件中的mapper定义，不使用url而是resource表示是Jar内部的文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/test/mapper/TestMapper.xml&quot;</span>/&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在我们就可以直接通过<code>SqlSession</code>获取对应的实现类，通过接口中定义的行为来直接获取结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>         <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br>         List&lt;Student&gt; student = testMapper.selectStudent();  <br>         student.forEach(System.out::println);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>那么肯定有人好奇，TestMapper明明是一个我们自己定义接口啊，Mybatis也不可能提前帮我们写了实现类啊，那这接口怎么就出现了一个实现类呢？我们可以通过调用<code>getClass()</code>方法来看看实现类是个什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br> System.out.println(testMapper.getClass());<br></code></pre></td></tr></table></figure><p>我们发现，实现类名称很奇怪，名称为<code>com.sun.proxy.$Proxy4</code>，它是通过<strong>动态代理</strong>生成的，相当于动态生成了一个实现类，而不是预先定义好的，有关Mybatis这一部分的原理，我们放在最后一节进行讲解。<br>接下来，我们再来看配置文件，之前我们并没有对配置文件进行一个详细的介绍：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>  <br>             <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>  <br>             <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>  <br>                 <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  <br>                 <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/study&quot;</span>/&gt;</span>  <br>                 <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span>  <br>                 <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span>  <br>             <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>  <br>         <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/test/mapper/TestMapper.xml&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先就从<code>environments</code>标签说起，一般情况下，我们在开发中，都需要指定一个数据库的配置信息，包含连接URL、用户、密码等信息，而<code>environment</code>就是用于进行这些配置的！实际情况下可能会不止有一个数据库连接信息，比如开发过程中我们一般会使用本地的数据库，而如果需要将项目上传到服务器或是防止其他人的电脑上运行时，我们可能就需要配置另一个数据库的信息，因此，我们可以提前定义好所有的数据库信息，该什么时候用什么即可！<br>在<code>environments</code>标签上有一个default属性，来指定默认的环境，当然如果我们希望使用其他环境，可以修改这个默认环境，也可以在创建工厂时选择环境：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"> sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>()  <br>         .build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>), <span class="hljs-string">&quot;环境ID&quot;</span>);<br></code></pre></td></tr></table></figure><p>我们还可以给类型起一个别名，以简化Mapper的编写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- 需要在environments的上方 --&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.test.entity.Student&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Student&quot;</span>/&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在Mapper就可以直接使用别名了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.test.mapper.TestMapper&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudent&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <br>         select * from student  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>如果这样还是很麻烦，我们也可以直接让Mybatis去扫描一个包，并将包下的所有类自动起别名（别名为首字母小写的类名）</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.test.entity&quot;</span>/&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以为指定实体类添加一个注解，来指定别名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Data</span>  <br> <span class="hljs-meta">@Alias(&quot;lbwnb&quot;)</span>  <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;  <br>     <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sid;  <br>     <span class="hljs-keyword">private</span> String name;  <br>     <span class="hljs-keyword">private</span> String sex;  <br> &#125;<br></code></pre></td></tr></table></figure><p>当然，Mybatis也包含许多的基础配置，通过使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p>在前面我们演示了如何快速进行查询，我们只需要编写一个对应的映射器既可以了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.test.mapper.TestMapper&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <br>         select * from student  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然，如果你不喜欢使用实体类，那么这些属性还可以被映射到一个Map上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudent&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Map&quot;</span>&gt;</span>  <br>     select * from student  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestMapper</span> &#123;  <br>     List&lt;Map&gt; <span class="hljs-title function_">selectStudent</span><span class="hljs-params">()</span>;  <br> &#125;<br></code></pre></td></tr></table></figure><p>Map中就会以键值对的形式来存放这些结果了。<br>通过设定一个<code>resultType</code>属性，让Mybatis知道查询结果需要映射为哪个实体类，要求字段名称保持一致。那么如果我们不希望按照这样的规则来映射呢？我们可以自定义<code>resultMap</code>来设定映射规则：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Test&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过指定映射规则，我们现在名称和性别一栏就发生了交换，因为我们将其映射字段进行了交换。<br>如果一个类中存在多个构造方法，那么很有可能会出现这样的错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> ### Exception in thread <span class="hljs-string">&quot;main&quot;</span> org.apache.ibatis.exceptions.PersistenceException:   <br> ### Error querying database.  Cause: org.apache.ibatis.executor.ExecutorException: No constructor found in com.test.entity.Student matching [java.lang.Integer, java.lang.String, java.lang.String]  <br> ### The error may exist in com/test/mapper/TestMapper.xml  <br> ### The error may involve com.test.mapper.TestMapper.getStudentBySid  <br> ### The error occurred <span class="hljs-keyword">while</span> handling results  <br> ### SQL: select * from student <span class="hljs-type">where</span> <span class="hljs-variable">sid</span> <span class="hljs-operator">=</span> ?  <br> ### Cause: org.apache.ibatis.executor.ExecutorException: No constructor found in com.test.entity.Student matching [java.lang.Integer, java.lang.String, java.lang.String]  <br>     at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:<span class="hljs-number">30</span>)  <br>     ...<br></code></pre></td></tr></table></figure><p>这时就需要使用<code>constructor</code>标签来指定构造方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">constructor</span>&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Integer&quot;</span>/&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;String&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">constructor</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>值得注意的是，<strong>指定构造方法后，若此字段被填入了构造方法作为参数，将不会通过反射给字段单独赋值，而构造方法中没有传入的字段，依然会被反射赋值</strong><br>如果数据库中存在一个带下划线的字段，我们可以通过设置让其映射为以驼峰命名的字段，比如<code>my_test</code>映射为<code>myTest</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果不设置，默认为不开启，也就是默认需要名称保持一致。<br>我们接着来看看条件查询，既然是条件查询，那么肯定需要我们传入查询条件，比如现在我们想通过sid字段来通过学号查找信息：<br> <code>Student getStudentBySid(int sid);</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentBySid&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <br>     select * from student where sid = #&#123;sid&#125;  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们通过使用<code>#&#123;xxx&#125;</code>或是<code>$&#123;xxx&#125;</code>来填入我们给定的属性，实际上Mybatis本质也是通过<code>PreparedStatement</code>首先进行一次预编译，有效地防止SQL注入问题，但是如果使用<code>$&#123;xxx&#125;</code>就不再是通过预编译，而是直接传值，因此我们一般都使用<code>#&#123;xxx&#125;</code>来进行操作。<br>使用<code>parameterType</code>属性来指定参数类型（非必须，可以不用，推荐不用）<br>接着我们来看插入、更新和删除操作，其实与查询操作差不多，不过需要使用对应的标签，比如插入操作：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addStudent&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <br>     insert into student(name, sex) values(#&#123;name&#125;, #&#123;sex&#125;)  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <code>int addStudent(Student student);</code><br>我们这里使用的是一个实体类，我们可以直接使用实体类里面对应属性替换到SQL语句中，只需要填写属性名称即可，和条件查询是一样的。</p><h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><p>一个老师可以教授多个学生，那么能否一次性将老师的学生全部映射给此老师的对象呢，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Data</span>  <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;  <br>     <span class="hljs-type">int</span> tid;  <br>     String name;  <br>     List&lt;Student&gt; studentList;  <br> &#125;<br></code></pre></td></tr></table></figure><p>映射为Teacher对象时，同时将其教授的所有学生一并映射为List列表，显然这是一种一对多的查询，那么这时就需要进行复杂查询了。而我们之前编写的都非常简单，直接就能完成映射，因此我们现在需要使用<code>resultMap</code>来自定义映射规则：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacherByTid&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;asTeacher&quot;</span>&gt;</span>  <br>         select *, teacher.name as tname from student inner join teach on student.sid = teach.sid  <br>                               inner join teacher on teach.tid = teacher.tid where teach.tid = #&#123;tid&#125;  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;asTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;studentList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到，我们的查询结果是一个多表联查的结果，而联查的数据就是我们需要映射的数据（比如这里是一个老师有N个学生，联查的结果也是这一个老师对应N个学生的N条记录），其中<code>id</code>标签用于在多条记录中辨别是否为同一个对象的数据，比如上面的查询语句得到的结果中，<code>tid</code>这一行始终为<code>1</code>，因此所有的记录都应该是<code>tid=1</code>的教师的数据，而不应该变为多个教师的数据，如果不加id进行约束，那么会被识别成多个教师的数据！<br>通过使用 <code>collection</code> 来表示将得到的所有结果合并为一个集合，比如上面的数据中每个学生都有单独的一条记录，因此tid相同的全部学生的记录就可以最后合并为一个List，得到最终的映射结果，当然，为了区分，最好也设置一个id，只不过这个例子中可以当做普通的<code>result</code>使用。<br>了解了一对多，那么多对一又该如何查询呢，比如每个学生都有一个对应的老师，现在Student新增了一个Teacher对象，那么现在又该如何去处理呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Data</span>  <br> <span class="hljs-meta">@Accessors(chain = true)</span>  <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;  <br>     <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sid;  <br>     <span class="hljs-keyword">private</span> String name;  <br>     <span class="hljs-keyword">private</span> String sex;  <br>     <span class="hljs-keyword">private</span> Teacher teacher;  <br> &#125;  <br> ​  <br> <span class="hljs-meta">@Data</span>  <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;  <br>     <span class="hljs-type">int</span> tid;  <br>     String name;  <br> &#125;<br></code></pre></td></tr></table></figure><p>现在我们希望的是，每次查询到一个Student对象时都带上它的老师，同样的，我们也可以使用<code>resultMap</code>来实现（先修改一下老师的类定义，不然会很麻烦）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span>  <br>         <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>  <br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>  <br>     select *, teacher.name as tname from student left join teach on student.sid = teach.sid  <br>                                                  left join teacher on teach.tid = teacher.tid  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过使用<code>association</code>进行关联，形成多对一的关系，实际上和一对多是同理的，都是对查询结果的一种处理方式罢了。</p><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><p>我们可以在获取<code>SqlSession</code>关闭自动提交来开启事务模式，和JDBC其实都差不多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">false</span>))&#123;  <br>         <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br> ​  <br>         testMapper.addStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>().setSex(<span class="hljs-string">&quot;男&quot;</span>).setName(<span class="hljs-string">&quot;小王&quot;</span>));  <br> ​  <br>         testMapper.selectStudent().forEach(System.out::println);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>我们发现，在关闭自动提交后，我们的内容是没有进入到数据库的，现在我们来试一下在最后提交事务：<br> <code>sqlSession.commit();</code><br>在事务提交后，我们的内容才会被写入到数据库中。现在我们来试试看回滚操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">false</span>))&#123;  <br>     <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br> ​  <br>     testMapper.addStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>().setSex(<span class="hljs-string">&quot;男&quot;</span>).setName(<span class="hljs-string">&quot;小王&quot;</span>));  <br> ​  <br>     testMapper.selectStudent().forEach(System.out::println);  <br>     sqlSession.rollback();  <br>     sqlSession.commit();  <br> &#125;<br></code></pre></td></tr></table></figure><p>回滚操作也印证成功。</p><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><p>MyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。<br>其实缓存机制我们在之前学习IO流的时候已经提及过了，我们可以提前将一部分内容放入缓存，下次需要获取数据时，我们就可以直接从缓存中读取，这样的话相当于直接从内存中获取而不是再去向数据库索要数据，效率会更高。<br>因此Mybatis内置了一个缓存机制，我们查询时，如果缓存中存在数据，那么我们就可以直接从缓存中获取，而不是再去向数据库进行请求。<br><img src="https://s2.loli.net/2023/03/06/612LxT98tskrnCz.png" alt="image-20230306163638882"><br>Mybatis存在一级缓存和二级缓存，我们首先来看一下一级缓存，默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存（一级缓存无法关闭，只能调整），我们来看看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>         <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br>         <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> testMapper.getStudentBySid(<span class="hljs-number">1</span>);  <br>         <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> testMapper.getStudentBySid(<span class="hljs-number">1</span>);  <br>         System.out.println(student1 == student2);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>我们发现，两次得到的是同一个Student对象，也就是说我们第二次查询并没有重新去构造对象，而是直接得到之前创建好的对象。如果还不是很明显，我们可以修改一下实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Data</span>  <br> <span class="hljs-meta">@Accessors(chain = true)</span>  <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;  <br> ​  <br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span>&#123;  <br>         System.out.println(<span class="hljs-string">&quot;我被构造了&quot;</span>);  <br>     &#125;  <br> ​  <br>     <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sid;  <br>     <span class="hljs-keyword">private</span> String name;  <br>     <span class="hljs-keyword">private</span> String sex;  <br> &#125;<br></code></pre></td></tr></table></figure><p>我们通过前面的学习得知Mybatis在映射为对象时，在只有一个构造方法的情况下，无论你构造方法写成什么样子，都会去调用一次构造方法，如果存在多个构造方法，那么就会去找匹配的构造方法。我们可以通过查看构造方法来验证对象被创建了几次。<br>结果显而易见，<strong>只创建了一次</strong>，也就是说当第二次进行同样的查询时，会直接使用第一次的结果，因为<strong>第一次的结果已经被缓存了</strong>。<br>那么如果我修改了数据库中的内容，缓存还会生效吗：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>         <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br>         <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> testMapper.getStudentBySid(<span class="hljs-number">1</span>);  <br>         testMapper.addStudent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>().setName(<span class="hljs-string">&quot;小李&quot;</span>).setSex(<span class="hljs-string">&quot;男&quot;</span>));  <br>         <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> testMapper.getStudentBySid(<span class="hljs-number">1</span>);  <br>         System.out.println(student1 == student2);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>我们发现，当我们进行了插入操作后，缓存就没有生效了，我们再次进行查询得到的是一个新创建的对象。<br>也就是说，<strong>一级缓存，在进行DML操作后，会使得缓存失效</strong>，也就是说Mybatis知道我们对数据库里面的数据进行了修改，所以之前缓存的内容可能就不是当前数据库里面最新的内容了。还有一种情况就是，当前会话结束后，也会清理全部的缓存，因为已经不会再用到了。但是一定注意，<strong>一级缓存只针对于单个会话，多个会话之间不相通</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>         <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br> ​  <br>         Student student2;  <br>         <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>             <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(TestMapper.class);  <br>             student2 = testMapper2.getStudentBySid(<span class="hljs-number">1</span>);  <br>         &#125;  <br> ​  <br>         <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> testMapper.getStudentBySid(<span class="hljs-number">1</span>);  <br>         System.out.println(student1 == student2);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>**注意：一个会话DML操作只会重置当前会话的缓存，不会重置其他会话的缓存，也就是说，其他会话缓存是不会更新的！<br>一级缓存给我们提供了很高速的访问效率，但是它的作用范围实在是有限，如果一个会话结束，那么之前的缓存就全部失效了，但是我们希望缓存能够扩展到所有会话都能使用，因此我们可以通过二级缓存来实现，二级缓存默认是关闭状态，要开启二级缓存，我们需要在映射器XML文件中添加：<br> <code>&lt;cache/&gt;</code><br>可见二级缓存是Mapper级别的，也就是说，当一个会话失效时，它的缓存依然会存在于二级缓存中，因此如果我们再次创建一个新的会话会直接使用之前的缓存，我们首先根据官方文档进行一些配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">cache</span>  </span><br><span class="hljs-tag">   <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span>  </span><br><span class="hljs-tag">   <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span>  </span><br><span class="hljs-tag">   <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span>  </span><br><span class="hljs-tag">   <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>我们来编写一个代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>     Student student;  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>         <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br>         student = testMapper.getStudentBySid(<span class="hljs-number">1</span>);  <br>     &#125;  <br> ​  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>         <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(TestMapper.class);  <br>         <span class="hljs-type">Student</span> <span class="hljs-variable">student2</span> <span class="hljs-operator">=</span> testMapper2.getStudentBySid(<span class="hljs-number">1</span>);  <br>         System.out.println(student2 == student);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>我们可以看到，上面的代码中首先是第一个会话在进行读操作，完成后会结束会话，而第二个操作重新创建了一个新的会话，再次执行了同样的查询，我们发现得到的依然是缓存的结果。<br>那么如果我不希望某个方法开启缓存呢？我们可以添加useCache属性来关闭缓存：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentBySid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">useCache</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>  <br>     select * from student where sid = #&#123;sid&#125;  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们也可以使用<code>flushCache=&quot;false&quot;</code>在每次执行后都清空缓存，通过这这个我们还可以控制DML操作完成之后不清空缓存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentBySid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">flushCache</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>  <br>     select * from student where sid = #&#123;sid&#125;  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加了二级缓存之后，<strong>会先从二级缓存中查找数据</strong>，当二级缓存中没有时，<strong>才会从一级缓存中获取</strong>，当一级缓存中都还没有数据时，才会请求数据库，因此我们再来执行上面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>     <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>         <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br> ​  <br>         Student student2;  <br>         <span class="hljs-keyword">try</span>(<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession2</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>             <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper2</span> <span class="hljs-operator">=</span> sqlSession2.getMapper(TestMapper.class);  <br>             student2 = testMapper2.getStudentBySid(<span class="hljs-number">1</span>);  <br>         &#125;  <br> ​  <br>         <span class="hljs-type">Student</span> <span class="hljs-variable">student1</span> <span class="hljs-operator">=</span> testMapper.getStudentBySid(<span class="hljs-number">1</span>);  <br>         System.out.println(student1 == student2);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>得到的结果就会是同一个对象了，因为现在是优先从二级缓存中获取。<br>读取顺序：<strong>二级缓存 =&gt; 一级缓存 =&gt; 数据库</strong><br><img src="https://s2.loli.net/2023/03/06/f2slhXr68k3WpIM.png" alt="image-20230306163717033"><br>虽然缓存机制给我们提供了很大的性能提升，但是缓存存在一个问题，我们之前在<code>计算机组成原理</code>中可能学习过缓存一致性问题，也就是说当多个CPU在操作自己的缓存时，可能会出现各自的缓存内容不同步的问题，而Mybatis也会这样，我们来看看这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;  <br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> MybatisUtil.getSession(<span class="hljs-literal">true</span>))&#123;  <br>        <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);  <br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;  <br>            Thread.sleep(<span class="hljs-number">3000</span>);  <br>            System.out.println(testMapper.getStudentBySid(<span class="hljs-number">1</span>));  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>我们现在循环地每三秒读取一次，而在这个过程中，我们使用IDEA手动修改数据库中的数据，将1号同学的学号改成100，那么理想情况下，下一次读取将无法获取到小明，因为小明的学号已经发生变化了。<br>但是结果却是依然能够读取，并且sid并没有发生改变，这也证明了Mybatis的缓存在生效，因为我们是从外部进行修改，Mybatis不知道我们修改了数据，所以依然在使用缓存中的数据，但是这样很明显是不正确的，因此，<strong>如果存在多台服务器或者是多个程序都在使用Mybatis操作同一个数据库，并且都开启了缓存，需要解决这个问题，要么就得关闭Mybatis的缓存来保证一致性</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentBySid&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">useCache</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">flushCache</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>  <br>     select * from student where sid = #&#123;sid&#125;  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要么就需要实现缓存共用，也就是让所有的Mybatis都使用同一个缓存进行数据存取，在后面，我们会继续学习Redis、Ehcache、Memcache等缓存框架，通过使用这些工具，就能够很好地解决缓存一致性问题。</p><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>在之前的开发中，我们已经体验到Mybatis为我们带来的便捷了，我们只需要编写对应的映射器，并将其绑定到一个接口上，即可直接通过该接口执行我们的SQL语句，极大的简化了我们之前JDBC那样的代码编写模式。那么，能否实现无需xml映射器配置，而是直接使用注解在接口上进行配置呢？答案是可以的，也是现在推荐的一种方式（也不是说XML就不要去用了，由于Java 注解的表达能力和灵活性十分有限，可能相对于XML配置某些功能实现起来会不太好办，但是在大部分场景下，直接使用注解开发已经绰绰有余了）<br>首先我们来看一下，使用XML进行映射器编写时，我们需要现在XML中定义映射规则和SQL语句，然后再将其绑定到一个接口的方法定义上，然后再使用接口来执行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addStudent&quot;</span>&gt;</span>  <br>     insert into student(name, sex) values(#&#123;name&#125;, #&#123;sex&#125;)  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p> <code>int addStudent(Student student);</code><br>而现在，我们可以直接使用注解来实现，每个操作都有一个对应的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Insert(&quot;insert into student(name, sex) values(#&#123;name&#125;, #&#123;sex&#125;)&quot;)</span>  <br> <span class="hljs-type">int</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span>;<br></code></pre></td></tr></table></figure><p>当然，我们还需要修改一下配置文件中的映射器注册：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.test.mapper.MyMapper&quot;</span>/&gt;</span>  <br>     <span class="hljs-comment">&lt;!--  也可以直接注册整个包下的 &lt;package name=&quot;com.test.mapper&quot;/&gt;  --&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过直接指定Class，来让Mybatis知道我们这里有一个通过注解实现的映射器。<br>我们接着来看一下，如何使用注解进行自定义映射规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Results(&#123;  </span><br><span class="hljs-meta">         @Result(id = true, column = &quot;sid&quot;, property = &quot;sid&quot;),  </span><br><span class="hljs-meta">         @Result(column = &quot;sex&quot;, property = &quot;name&quot;),  </span><br><span class="hljs-meta">         @Result(column = &quot;name&quot;, property = &quot;sex&quot;)  </span><br><span class="hljs-meta"> &#125;)</span>  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Select(&quot;select * from student&quot;)</span>  <br> List&lt;Student&gt; <span class="hljs-title function_">getAllStudent</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>直接通过<code>@Results</code>注解，就可以直接进行配置了，此注解的value是一个<code>@Result</code>注解数组，每个<code>@Result</code>注解都是一个单独的字段配置，其实就是我们之前在XML映射器中写的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>      <br>     <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>  <br> <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在我们就可以通过注解来自定义映射规则了。那么如何使用注解来完成复杂查询呢？我们还是使用一个老师多个学生的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Results(&#123;  </span><br><span class="hljs-meta">         @Result(id = true, column = &quot;tid&quot;, property = &quot;tid&quot;),  </span><br><span class="hljs-meta">         @Result(column = &quot;name&quot;, property = &quot;name&quot;),  </span><br><span class="hljs-meta">         @Result(column = &quot;tid&quot;, property = &quot;studentList&quot;, many =  </span><br><span class="hljs-meta">             @Many(select = &quot;getStudentByTid&quot;)  </span><br><span class="hljs-meta">         )  </span><br><span class="hljs-meta"> &#125;)</span>  <br> <span class="hljs-meta">@Select(&quot;select * from teacher where tid = #&#123;tid&#125;&quot;)</span>  <br> Teacher <span class="hljs-title function_">getTeacherBySid</span><span class="hljs-params">(<span class="hljs-type">int</span> tid)</span>;  <br> ​  <br> <span class="hljs-meta">@Select(&quot;select * from student inner join teach on student.sid = teach.sid where tid = #&#123;tid&#125;&quot;)</span>  <br> List&lt;Student&gt; <span class="hljs-title function_">getStudentByTid</span><span class="hljs-params">(<span class="hljs-type">int</span> tid)</span>;<br></code></pre></td></tr></table></figure><p>我们发现，多出了一个子查询，而这个子查询是单独查询该老师所属学生的信息，而子查询结果作为<code>@Result</code>注解的一个many结果，代表子查询的所有结果都归入此集合中（也就是之前的collection标签）<br> <resultMap id="asTeacher" type="Teacher"><br>     <id column="tid" property="tid"/><br>     <result column="tname" property="name"/><br>     <collection property="studentList" ofType="Student"><br>         <id property="sid" column="sid"/><br>         <result column="name" property="name"/><br>         <result column="sex" property="sex"/><br>     </collection><br> </resultMap><br>同理，<code>@Result</code>也提供了<code>@One</code>子注解来实现一对一的关系表示，类似于之前的<code>assocation</code>标签：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Results(&#123;  </span><br><span class="hljs-meta">         @Result(id = true, column = &quot;sid&quot;, property = &quot;sid&quot;),  </span><br><span class="hljs-meta">         @Result(column = &quot;sex&quot;, property = &quot;name&quot;),  </span><br><span class="hljs-meta">         @Result(column = &quot;name&quot;, property = &quot;sex&quot;),  </span><br><span class="hljs-meta">         @Result(column = &quot;sid&quot;, property = &quot;teacher&quot;, one =  </span><br><span class="hljs-meta">             @One(select = &quot;getTeacherBySid&quot;)  </span><br><span class="hljs-meta">         )  </span><br><span class="hljs-meta"> &#125;)</span>  <br> <span class="hljs-meta">@Select(&quot;select * from student&quot;)</span>  <br> List&lt;Student&gt; <span class="hljs-title function_">getAllStudent</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>如果现在我希望直接使用注解编写SQL语句但是我希望映射规则依然使用XML来实现，这时该怎么办呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@ResultMap(&quot;test&quot;)</span>  <br> <span class="hljs-meta">@Select(&quot;select * from student&quot;)</span>  <br> List&lt;Student&gt; <span class="hljs-title function_">getAllStudent</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>提供了<code>@ResultMap</code>注解，直接指定ID即可，这样我们就可以使用XML中编写的映射规则了，这里就不再演示了。<br>那么如果出现之前的两个构造方法的情况，且没有任何一个构造方法匹配的话，该怎么处理呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Data</span>  <br> <span class="hljs-meta">@Accessors(chain = true)</span>  <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;  <br> ​  <br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> sid)</span>&#123;  <br>         System.out.println(<span class="hljs-string">&quot;我是一号构造方法&quot;</span>+sid);  <br>     &#125;  <br> ​  <br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> sid, String name)</span>&#123;  <br>         System.out.println(<span class="hljs-string">&quot;我是二号构造方法&quot;</span>+sid+name);  <br>     &#125;  <br> ​  <br>     <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sid;  <br>     <span class="hljs-keyword">private</span> String name;  <br>     <span class="hljs-keyword">private</span> String sex;  <br> &#125;<br></code></pre></td></tr></table></figure><p>我们可以通过<code>@ConstructorArgs</code>注解来指定构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@ConstructorArgs(&#123;  </span><br><span class="hljs-meta">         @Arg(column = &quot;sid&quot;, javaType = int.class),  </span><br><span class="hljs-meta">         @Arg(column = &quot;name&quot;, javaType = String.class)  </span><br><span class="hljs-meta"> &#125;)</span>  <br> <span class="hljs-meta">@Select(&quot;select * from student where sid = #&#123;sid&#125; and sex = #&#123;sex&#125;&quot;)</span>  <br> Student <span class="hljs-title function_">getStudentBySidAndSex</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;sid&quot;)</span> <span class="hljs-type">int</span> sid, <span class="hljs-meta">@Param(&quot;sex&quot;)</span> String sex)</span>;<br></code></pre></td></tr></table></figure><p>得到的结果和使用<code>constructor</code>标签效果一致，这里就不多做讲解了。<br>我们发现，当参数列表中出现两个以上的参数时，会出现错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Select(&quot;select * from student where sid = #&#123;sid&#125; and sex = #&#123;sex&#125;&quot;)</span>  <br> Student <span class="hljs-title function_">getStudentBySidAndSex</span><span class="hljs-params">(<span class="hljs-type">int</span> sid, String sex)</span>;<br> Exception in thread <span class="hljs-string">&quot;main&quot;</span> org.apache.ibatis.exceptions.PersistenceException:   <br> ### Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter <span class="hljs-string">&#x27;sid&#x27;</span> not found. Available parameters are [arg1, arg0, param1, param2]  <br> ### Cause: org.apache.ibatis.binding.BindingException: Parameter <span class="hljs-string">&#x27;sid&#x27;</span> not found. Available parameters are [arg1, arg0, param1, param2]  <br>     at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:<span class="hljs-number">30</span>)  <br>     at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="hljs-number">153</span>)  <br>     at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="hljs-number">145</span>)  <br>     at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:<span class="hljs-number">140</span>)  <br>     at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:<span class="hljs-number">76</span>)  <br>     at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:<span class="hljs-number">87</span>)  <br>     at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:<span class="hljs-number">145</span>)  <br>     at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:<span class="hljs-number">86</span>)  <br>     at com.sun.proxy.$Proxy6.getStudentBySidAndSex(Unknown Source)  <br>     at com.test.Main.main(Main.java:<span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>原因是Mybatis不明确到底哪个参数是什么，因此我们可以添加<code>@Param</code>来指定参数名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Select(&quot;select * from student where sid = #&#123;sid&#125; and sex = #&#123;sex&#125;&quot;)</span>  <br> Student <span class="hljs-title function_">getStudentBySidAndSex</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;sid&quot;)</span> <span class="hljs-type">int</span> sid, <span class="hljs-meta">@Param(&quot;sex&quot;)</span> String sex)</span>;<br></code></pre></td></tr></table></figure><p>**探究：要是我两个参数一个是基本类型一个是对象类型呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"> System.out.println(testMapper.addStudent(<span class="hljs-number">100</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>().setName(<span class="hljs-string">&quot;小陆&quot;</span>).setSex(<span class="hljs-string">&quot;男&quot;</span>)));<br> <span class="hljs-meta">@Insert(&quot;insert into student(sid, name, sex) values(#&#123;sid&#125;, #&#123;name&#125;, #&#123;sex&#125;)&quot;)</span>  <br> <span class="hljs-type">int</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;sid&quot;)</span> <span class="hljs-type">int</span> sid, <span class="hljs-meta">@Param(&quot;student&quot;)</span>  Student student)</span>;<br></code></pre></td></tr></table></figure><p>那么这个时候，就出现问题了，Mybatis就不能明确这些属性是从哪里来的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"> ### SQL: insert into <span class="hljs-title function_">student</span><span class="hljs-params">(sid, name, sex)</span> values(?, ?, ?)  <br> ### Cause: org.apache.ibatis.binding.BindingException: Parameter <span class="hljs-string">&#x27;name&#x27;</span> not found. Available parameters are [student, param1, sid, param2]  <br>     at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:<span class="hljs-number">30</span>)  <br>     at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:<span class="hljs-number">196</span>)  <br>     at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:<span class="hljs-number">181</span>)  <br>     at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:<span class="hljs-number">62</span>)  <br>     at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:<span class="hljs-number">145</span>)  <br>     at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:<span class="hljs-number">86</span>)  <br>     at com.sun.proxy.$Proxy6.addStudent(Unknown Source)  <br>     at com.test.Main.main(Main.java:<span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>那么我们就通过参数名称.属性的方式去让Mybatis知道我们要用的是哪个属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Insert(&quot;insert into student(sid, name, sex) values(#&#123;sid&#125;, #&#123;student.name&#125;, #&#123;student.sex&#125;)&quot;)</span>  <br> <span class="hljs-type">int</span> <span class="hljs-title function_">addStudent</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;sid&quot;)</span> <span class="hljs-type">int</span> sid, <span class="hljs-meta">@Param(&quot;student&quot;)</span>  Student student)</span>;<br></code></pre></td></tr></table></figure><p>那么如何通过注解控制缓存机制呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@CacheNamespace(readWrite = false)</span>  <br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyMapper</span> &#123;  <br> ​  <br>     <span class="hljs-meta">@Select(&quot;select * from student&quot;)</span>  <br>     <span class="hljs-meta">@Options(useCache = false)</span>  <br>     List&lt;Student&gt; <span class="hljs-title function_">getAllStudent</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p>使用<code>@CacheNamespace</code>注解直接定义在接口上即可，然后我们可以通过使用<code>@Options</code>来控制单个操作的缓存启用。</p><h2 id="探究Mybatis的动态代理机制"><a href="#探究Mybatis的动态代理机制" class="headerlink" title="探究Mybatis的动态代理机制"></a>探究Mybatis的动态代理机制</h2><p>在探究动态代理机制之前，我们要先聊聊什么是代理：其实顾名思义，就好比我开了个大棚，里面栽种的西瓜，那么西瓜成熟了是不是得去卖掉赚钱，而我们的西瓜非常多，一个人肯定卖不过来，肯定就要去多找几个开水果摊的帮我们卖，这就是一种代理。实际上是由水果摊老板在帮我们卖瓜，我们只告诉老板卖多少钱，而至于怎么卖的是由水果摊老板决定的。<br><img src="https://s2.loli.net/2023/03/06/f2slhXr68k3WpIM.png" alt="img"><br>那么现在我们来尝试实现一下这样的类结构，首先定义一个接口用于规范行为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Shopper</span> &#123;  <br> ​       <span class="hljs-comment">//卖瓜行为  </span><br>     <span class="hljs-keyword">void</span> <span class="hljs-title function_">saleWatermelon</span><span class="hljs-params">(String customer)</span>;  <br> &#125;<br></code></pre></td></tr></table></figure><p>然后需要实现一下卖瓜行为，也就是我们要告诉老板卖多少钱，这里就直接写成成功出售：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shopper</span>&#123;  <br> ​  <br>     <span class="hljs-comment">//卖瓜行为的实现  </span><br>     <span class="hljs-meta">@Override</span>  <br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saleWatermelon</span><span class="hljs-params">(String customer)</span> &#123;  <br>         System.out.println(<span class="hljs-string">&quot;成功出售西瓜给 ===&gt; &quot;</span>+customer);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>最后老板代理后肯定要用自己的方式去出售这些西瓜，成交之后再按照我们告诉老板的价格进行出售：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopperProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Shopper</span>&#123;  <br> ​  <br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Shopper impl;  <br> ​  <br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopperProxy</span><span class="hljs-params">(Shopper impl)</span>&#123;  <br>         <span class="hljs-built_in">this</span>.impl = impl;  <br>     &#125;  <br> ​  <br>     <span class="hljs-comment">//代理卖瓜行为  </span><br>     <span class="hljs-meta">@Override</span>  <br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saleWatermelon</span><span class="hljs-params">(String customer)</span> &#123;  <br>         <span class="hljs-comment">//首先进行 代理商讨价还价行为  </span><br>         System.out.println(customer + <span class="hljs-string">&quot;：哥们，这瓜多少钱一斤啊？&quot;</span>);  <br>         System.out.println(<span class="hljs-string">&quot;老板：两块钱一斤。&quot;</span>);  <br>         System.out.println(customer + <span class="hljs-string">&quot;：你这瓜皮子是金子做的，还是瓜粒子是金子做的？&quot;</span>);  <br>         System.out.println(<span class="hljs-string">&quot;老板：你瞅瞅现在哪有瓜啊，这都是大棚的瓜，你嫌贵我还嫌贵呢。&quot;</span>);  <br>         System.out.println(customer + <span class="hljs-string">&quot;：给我挑一个。&quot;</span>);  <br> ​  <br>         impl.saleWatermelon(customer);   <span class="hljs-comment">//讨价还价成功，进行我们告诉代理商的卖瓜行为  </span><br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>现在我们来试试看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;  <br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>         <span class="hljs-type">Shopper</span> <span class="hljs-variable">shopper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopperProxy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopperImpl</span>());  <br>         shopper.saleWatermelon(<span class="hljs-string">&quot;小强&quot;</span>);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>这样的操作称为<strong>静态代理</strong>，也就是说我们需要<strong>提前知道接口的定义并进行实现</strong>才可以完成代理，而Mybatis这样的是无法预知代理接口的，我们就需要用到动态代理。<br>JDK提供的反射框架就为我们很好地解决了动态代理的问题，在这里相当于对JavaSE阶段反射的内容进行一个补充。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopperProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;  <br> ​  <br>     Object target;  <br>     <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopperProxy</span><span class="hljs-params">(Object target)</span>&#123;  <br>         <span class="hljs-built_in">this</span>.target = target;  <br>     &#125;  <br> ​  <br>     <span class="hljs-meta">@Override</span>  <br>     <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>         <span class="hljs-type">String</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> (String) args[<span class="hljs-number">0</span>];  <br>         System.out.println(customer + <span class="hljs-string">&quot;：哥们，这瓜多少钱一斤啊？&quot;</span>);  <br>         System.out.println(<span class="hljs-string">&quot;老板：两块钱一斤。&quot;</span>);  <br>         System.out.println(customer + <span class="hljs-string">&quot;：你这瓜皮子是金子做的，还是瓜粒子是金子做的？&quot;</span>);  <br>         System.out.println(<span class="hljs-string">&quot;老板：你瞅瞅现在哪有瓜啊，这都是大棚的瓜，你嫌贵我还嫌贵呢。&quot;</span>);  <br>         System.out.println(customer + <span class="hljs-string">&quot;：行，给我挑一个。&quot;</span>);  <br>         <span class="hljs-keyword">return</span> method.invoke(target, args);  <br>     &#125;  <br> &#125;<br></code></pre></td></tr></table></figure><p>通过实现 <code>InvocationHandler</code> 来成为一个动态代理，我们发现它提供了一个invoke方法，用于调用被代理对象的方法并完成我们的代理工作。现在就可以通过<code>Proxy.newProxyInstance</code>来生成一个动态代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>     <span class="hljs-type">Shopper</span> <span class="hljs-variable">impl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopperImpl</span>();  <br>     <span class="hljs-type">Shopper</span> <span class="hljs-variable">shopper</span> <span class="hljs-operator">=</span> (Shopper) Proxy.newProxyInstance(impl.getClass().getClassLoader(),  <br>             impl.getClass().getInterfaces(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopperProxy</span>(impl));  <br>     shopper.saleWatermelon(<span class="hljs-string">&quot;小强&quot;</span>);  <br>     System.out.println(shopper.getClass());  <br> &#125;<br></code></pre></td></tr></table></figure><p>通过打印类型我们发现，就是我们之前看到的那种奇怪的类：<code>class com.sun.proxy.$Proxy0</code>，因此Mybatis其实也是这样的来实现的（肯定有人问了：Mybatis是直接代理接口啊，你这个不还是要把接口实现了吗？）那我们来改改，现在我们不代理任何类了，直接做接口实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopperProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;  <br> ​  <br>     <span class="hljs-meta">@Override</span>  <br>     <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;  <br>         <span class="hljs-type">String</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> (String) args[<span class="hljs-number">0</span>];  <br>         System.out.println(customer + <span class="hljs-string">&quot;：哥们，这瓜多少钱一斤啊？&quot;</span>);  <br>         System.out.println(<span class="hljs-string">&quot;老板：两块钱一斤。&quot;</span>);  <br>         System.out.println(customer + <span class="hljs-string">&quot;：你这瓜皮子是金子做的，还是瓜粒子是金子做的？&quot;</span>);  <br>         System.out.println(<span class="hljs-string">&quot;老板：你瞅瞅现在哪有瓜啊，这都是大棚的瓜，你嫌贵我还嫌贵呢。&quot;</span>);  <br>         System.out.println(customer + <span class="hljs-string">&quot;：行，给我挑一个。&quot;</span>);  <br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>     &#125;  <br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>     <span class="hljs-type">Shopper</span> <span class="hljs-variable">shopper</span> <span class="hljs-operator">=</span> (Shopper) Proxy.newProxyInstance(Shopper.class.getClassLoader(),  <br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123; Shopper.class &#125;,   <span class="hljs-comment">//因为本身就是接口，所以直接用就行  </span><br>             <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShopperProxy</span>());  <br>     shopper.saleWatermelon(<span class="hljs-string">&quot;小强&quot;</span>);  <br>     System.out.println(shopper.getClass());  <br> &#125;<br></code></pre></td></tr></table></figure><p>可以去看看Mybatis的源码。<br>Mybatis的学习差不多就到这里为止了，不过，同样类型的框架还有很多，Mybatis属于半自动框架，SQL语句依然需要我们自己编写，虽然存在一定的麻烦，但是会更加灵活，而后面我们还会学习JPA，它是全自动的框架，你几乎见不到SQL的影子！</p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</p><p>通过Maven，可以帮助我们做：</p><ul><li>项目的自动构建，包括代码的编译、测试、打包、安装、部署等操作。</li><li>依赖管理，项目使用到哪些依赖，可以快速完成导入。</li></ul><p>我们之前并没有讲解如何将我们的项目打包为Jar文件运行，同时，我们导入依赖的时候，每次都要去下载对应的Jar包，这样其实是很麻烦的，并且还有可能一个Jar包依赖于另一个Jar包，就像之前使用JUnit一样，因此我们需要一个更加方便的包管理机制。</p><p>Maven也需要安装环境，但是IDEA已经自带了Maven环境，因此我们不需要再去进行额外的环境安装（无IDEA也能使用Maven，但是配置过程很麻烦，并且我们现在使用的都是IDEA的集成开发环境，所以这里就不讲解Maven命令行操作了）我们直接创建一个新的Maven项目即可。</p><h2 id="Maven项目结构"><a href="#Maven项目结构" class="headerlink" title="Maven项目结构"></a>Maven项目结构</h2><p>我们可以来看一下，一个Maven项目和我们普通的项目有什么区别：</p><p><img src="https://s2.loli.net/2023/03/06/tYh7BGvZHu6ncdf.jpg" alt="img"></p><p>那么首先，我们需要了解一下POM文件，它相当于是我们整个Maven项目的配置文件，它也是使用XML编写的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MavenTest<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以看到，Maven的配置文件是以<code>project</code>为根节点，而<code>modelVersion</code>定义了当前模型的版本，一般是4.0.0，我们不用去修改。</p><p><code>groupId</code>、<code>artifactId</code>、<code>version</code>这三个元素合在一起，用于唯一区别每个项目，别人如果需要将我们编写的代码作为依赖，那么就必须通过这三个元素来定位我们的项目，我们称为一个项目的基本坐标，所有的项目一般都有自己的Maven坐标，因此我们通过Maven导入其他的依赖只需要填写这三个基本元素就可以了，无需再下载Jar文件，而是Maven自动帮助我们下载依赖并导入。</p><ul><li><code>groupId</code> 一般用于指定组名称，命名规则一般和包名一致，比如我们这里使用的是<code>org.example</code>，一个组下面可以有很多个项目。</li><li><code>artifactId</code> 一般用于指定项目在当前组中的唯一名称，也就是说在组中用于区分于其他项目的标记。</li><li><code>version</code> 代表项目版本，随着我们项目的开发和改进，版本号也会不断更新，就像LOL一样，每次赛季更新都会有一个大版本更新，我们的Maven项目也是这样，我们可以手动指定当前项目的版本号，其他人使用我们的项目作为依赖时，也可以根本版本号进行选择（这里的SNAPSHOT代表快照，一般表示这是一个处于开发中的项目，正式发布项目一般只带版本号）</li></ul><p><code>properties</code>中一般都是一些变量和选项的配置，我们这里指定了JDK的源代码和编译版本为1.8，无需进行修改。</p><h2 id="Maven依赖导入"><a href="#Maven依赖导入" class="headerlink" title="Maven依赖导入"></a>Maven依赖导入</h2><p>现在我们尝试使用Maven来帮助我们快速导入依赖，我们需要导入之前的JDBC驱动依赖、JUnit依赖、Mybatis依赖、Lombok依赖，那么如何使用Maven来管理依赖呢？</p><p>我们可以创建一个<code>dependencies</code>节点：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    //里面填写的就是所有的依赖<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么现在就可以向节点中填写依赖了，那么我们如何知道每个依赖的坐标呢？我们可以在：[mavenrepository](<a href="https://mvnrepository.com/[Fetching">https://mvnrepository.com/[Fetching</a> Data#5mce](<a href="https://mvnrepository.com/">https://mvnrepository.com/</a>)) 进行查询（可能打不开，建议用流量，或是直接百度某个项目的Maven依赖），我们直接搜索lombok即可，打开后可以看到已经给我们写出了依赖的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们直接将其添加到<code>dependencies</code>节点中即可，现在我们来编写一个测试用例看看依赖导入成功了没有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(student);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p>项目运行成功，表示成功导入了依赖。那么，Maven是如何进行依赖管理呢，以致于如此便捷的导入依赖，我们来看看Maven项目的依赖管理流程：</p><p><img src="https://s2.loli.net/2023/03/06/XYNMU5WCrZv9cwy.jpg" alt="img"></p><p>通过流程图我们得知，一个项目依赖一般是存储在中央仓库中，也有可能存储在一些其他的远程仓库（私服），几乎所有的依赖都被放到了中央仓库中，因此，Maven可以直接从中央仓库中下载大部分的依赖（Maven第一次导入依赖是需要联网的），远程仓库中下载之后 ，会暂时存储在本地仓库，我们会发现我们本地存在一个<code>.m2</code>文件夹，这就是Maven本地仓库文件夹，默认建立在C盘，如果你C盘空间不足，会出现问题！</p><p>在下次导入依赖时，如果Maven发现本地仓库中就已经存在某个依赖，那么就不会再去远程仓库下载了。</p><p>可能在导入依赖时，小小伙伴们会出现卡顿的问题，我们建议配置一下IDEA自带的Maven插件远程仓库地址，我们打开IDEA的安装目录，找到<code>安装根目录/plugins/maven/lib/maven3/conf</code>文件夹，找到<code>settings.xml</code>文件，打开编辑：</p><p>找到mirros标签，添加以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>这样，我们就将默认的远程仓库地址（国外），配置为国内的阿里云仓库地址了（依赖的下载速度就会快起来了）</p><h2 id="Maven依赖作用域"><a href="#Maven依赖作用域" class="headerlink" title="Maven依赖作用域"></a>Maven依赖作用域</h2><p>除了三个基本的属性用于定位坐标外，依赖还可以添加以下属性：</p><ul><li><strong>type</strong>：依赖的类型，对于项目坐标定义的packaging。大部分情况下，该元素不必声明，其默认值为jar</li><li><strong>scope</strong>：<strong>依赖的范围</strong>（作用域，着重讲解）</li><li><strong>optional</strong>：标记依赖是否可选</li><li><strong>exclusions</strong>：用来排除传递性依赖（一个项目有可能依赖于其他项目，就像我们的项目，如果别人要用我们的项目作为依赖，那么就需要一起下载我们项目的依赖，如Lombok）</li></ul><p>我们着重来讲解一下<code>scope</code>属性，它决定了依赖的作用域范围：</p><ul><li><strong>compile</strong> ：为<strong>默认的依赖有效范围</strong>。如果在定义依赖关系的时候，没有明确指定依赖有效范围的话，则默认采用该依赖有效范围。此种依赖，在编译、运行、测试时均有效。</li><li><strong>provided</strong> ：在<strong>编译、测试时有效</strong>，但是在运行时无效，也就是说，项目在运行时，不需要此依赖，比如我们上面的Lombok，我们只需要在编译阶段使用它，编译完成后，实际上已经转换为对应的代码了，因此Lombok不需要在项目运行时也存在。</li><li><strong>runtime</strong> ：在<strong>运行、测试时有效</strong>，但是在编译代码时无效。比如我们如果需要自己写一个JDBC实现，那么肯定要用到JDK为我们指定的接口，但是实际上在运行时是不用自带JDK的依赖，因此只保留我们自己写的内容即可。</li><li><strong>test</strong> ：只<strong>在测试时有效</strong>，例如：JUnit，我们一般只会在测试阶段使用JUnit，而实际项目运行时，我们就用不到测试了，那么我们来看看，导入JUnit的依赖：</li></ul><p>同样的，我们可以在网站上搜索Junit的依赖，我们这里导入最新的JUnit5作为依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们所有的测试用例全部编写到Maven项目给我们划分的test目录下，位于此目录下的内容不会在最后被打包到项目中，只用作开发阶段测试使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;测试&quot;</span>);<br>      <span class="hljs-comment">//Assert在JUnit5时名称发生了变化Assertions</span><br>        Assertions.assertArrayEquals(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，一般仅用作测试的依赖如JUnit只保留在测试中即可，那么现在我们再来添加JDBC和Mybatis的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们发现，Maven还给我们提供了一个<code>resource</code>文件夹，我们可以将一些静态资源，比如配置文件，放入到这个文件夹中，项目在打包时会将资源文件夹中文件一起打包的Jar中，比如我们在这里编写一个Mybatis的配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;JDK_LOGGING&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 需要在environments的上方 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.test.entity&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/study&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.test.mapper.TestMapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在我们创建一下测试用例，顺便带大家了解一下Junit5的一些比较方便的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainTest</span> &#123;<br><br>    <span class="hljs-comment">//因为配置文件位于内部，我们需要使用Resources类的getResourceAsStream来获取内部的资源文件</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory;<br><br>    <span class="hljs-comment">//在JUnit5中@Before被废弃，它被细分了：</span><br>    <span class="hljs-meta">@BeforeAll</span> <span class="hljs-comment">// 一次性开启所有测试案例只会执行一次 (方法必须是static)</span><br>    <span class="hljs-comment">// @BeforeEach 一次性开启所有测试案例每个案例开始之前都会执行一次</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>()<br>                .build(Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>));<br>    &#125;<br><br><br>    <span class="hljs-meta">@DisplayName(&quot;Mybatis数据库测试&quot;)</span>  <span class="hljs-comment">//自定义测试名称</span><br>    <span class="hljs-meta">@RepeatedTest(3)</span>  <span class="hljs-comment">//自动执行多次测试</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>))&#123;<br>            <span class="hljs-type">TestMapper</span> <span class="hljs-variable">testMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TestMapper.class);<br>            System.out.println(testMapper.getStudentBySid(<span class="hljs-number">1</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么就有人提问了，如果我需要的依赖没有上传的远程仓库，而是只有一个Jar怎么办呢？我们可以使用第四种作用域：</p><ul><li><strong>system</strong>：作用域和provided是一样的，但是它不是从远程仓库获取，而是直接导入本地Jar包：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.jntm<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lbwnb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>system<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">systemPath</span>&gt;</span>C://学习资料/4K高清无码/test.jar<span class="hljs-tag">&lt;/<span class="hljs-name">systemPath</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>比如上面的例子，如果scope为system，那么我们需要添加一个systemPath来指定jar文件的位置，这里就不再演示了。</p><h2 id="Maven可选依赖"><a href="#Maven可选依赖" class="headerlink" title="Maven可选依赖"></a>Maven可选依赖</h2><p>当项目中的某些依赖不希望被使用此项目作为依赖的项目使用时，我们可以给依赖添加<code>optional</code>标签表示此依赖是可选的，默认在导入依赖时，不会导入可选的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br></code></pre></td></tr></table></figure><p>比如Mybatis的POM文件中，就存在大量的可选依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> ...<br></code></pre></td></tr></table></figure><p>由于Mybatis要支持多种类型的日志，需要用到很多种不同的日志框架，因此需要导入这些依赖来做兼容，但是我们项目中并不一定会使用这些日志框架作为Mybatis的日志打印器，因此这些日志框架仅Mybatis内部做兼容需要导入使用，而我们可以选择不使用这些框架或是选择其中一个即可，也就是说我们导入Mybatis之后想用什么日志框架再自己加就可以了。</p><h2 id="Maven排除依赖"><a href="#Maven排除依赖" class="headerlink" title="Maven排除依赖"></a>Maven排除依赖</h2><p>我们了解了可选依赖，现在我们可以让使用此项目作为依赖的项目默认不使用可选依赖，但是如果存在那种不是可选依赖，但是我们导入此项目又不希望使用此依赖该怎么办呢，这个时候我们就可以通过排除依赖来防止添加不必要的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们这里演示了排除JUnit的一些依赖，我们可以在外部库中观察排除依赖之后和之前的效果。</p><h2 id="Maven继承关系"><a href="#Maven继承关系" class="headerlink" title="Maven继承关系"></a>Maven继承关系</h2><p>一个Maven项目可以继承自另一个Maven项目，比如多个子项目都需要父项目的依赖，我们就可以使用继承关系来快速配置。</p><p>我们右键左侧栏，新建一个模块，来创建一个子项目：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MavenTest<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ChildModel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以看到，IDEA默认给我们添加了一个parent节点，表示此Maven项目是父Maven项目的子项目，子项目直接继承父项目的<code>groupId</code>，子项目会直接继承父项目的所有依赖，除非依赖添加了optional标签，我们来编写一个测试用例尝试一下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.extern.java.Log;<br><br><span class="hljs-meta">@Log</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;我是日志信息&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，子项目也成功继承了Lombok依赖。</p><p>我们还可以让父Maven项目统一管理所有的依赖，包括版本号等，子项目可以选取需要的作为依赖，而版本全由父项目管理，我们可以将<code>dependencies</code>全部放入<code>dependencyManagement</code>节点，这样父项目就完全作为依赖统一管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们发现，子项目的依赖失效了，因为现在父项目没有依赖，而是将所有的依赖进行集中管理，子项目需要什么再拿什么即可，同时子项目无需指定版本，所有的版本全部由父项目决定，子项目只需要使用即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然，父项目如果还存在dependencies节点的话，里面的内依赖依然是直接继承：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      ...<br></code></pre></td></tr></table></figure><h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><p>我们可以看到在IDEA右上角Maven板块中，每个Maven项目都有一个生命周期，实际上这些是Maven的一些插件，每个插件都有各自的功能，比如：</p><ul><li><code>clean</code>命令，执行后会清理整个<code>target</code>文件夹，在之后编写Springboot项目时可以解决一些缓存没更新的问题。</li><li><code>validate</code>命令可以验证项目的可用性。</li><li><code>compile</code>命令可以将项目编译为.class文件。</li><li><code>install</code>命令可以将当前项目安装到本地仓库，以供其他项目导入作为依赖使用</li><li><code>verify</code>命令可以按顺序执行每个默认生命周期阶段（<code>validate</code>，<code>compile</code>，<code>package</code>等）</li></ul><h2 id="Maven测试项目"><a href="#Maven测试项目" class="headerlink" title="Maven测试项目"></a>Maven测试项目</h2><p>通过使用<code>test</code>命令，可以一键测试所有位于test目录下的测试案例，请注意有以下要求：</p><ul><li>测试类的名称必须是以<code>Test</code>结尾，比如<code>MainTest</code></li><li>测试方法上必须标注<code>@Test</code>注解，实测<code>@RepeatedTest</code>无效</li></ul><p>这是由于JUnit5比较新，我们需要重新配置插件升级到高版本，才能完美的兼容Junit5：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- JUnit 5 requires Surefire version 2.22.0 or higher --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在<code>@RepeatedTest</code>、<code>@BeforeAll</code>也能使用了。</p><h2 id="Maven打包项目"><a href="#Maven打包项目" class="headerlink" title="Maven打包项目"></a>Maven打包项目</h2><p>我们的项目在编写完成之后，要么作为Jar依赖，供其他模型使用，要么就作为一个可以执行的程序，在控制台运行，我们只需要直接执行<code>package</code>命令就可以直接对项目的代码进行打包，生成jar文件。</p><p>当然，以上方式仅适用于作为Jar依赖的情况，如果我们需要打包一个可执行文件，那么我不仅需要将自己编写的类打包到Jar中，同时还需要将依赖也一并打包到Jar中，因为我们使用了别人为我们提供的框架，自然也需要运行别人的代码，我们需要使用另一个插件来实现一起打包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRefs</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRef</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">descriptorRefs</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.test.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在打包之前也会执行一次test命令，来保证项目能够正常运行，当测试出现问题时，打包将无法完成，我们也可以手动跳过，选择<code>执行Maven目标</code>来手动执行Maven命令，输入<code>mvn package -Dmaven.test.skip=true </code>来以跳过测试的方式进行打包。</p><p>最后得到我们的Jar文件，在同级目录下输入<code>java -jar xxxx.jar</code>来运行我们打包好的Jar可执行程序（xxx代表文件名称）</p><ul><li><code>deploy</code>命令用于发布项目到本地仓库和远程仓库，一般情况下用不到，这里就不做讲解了。</li><li><code>site</code>命令用于生成当前项目的发布站点，暂时不需要了解。</li></ul><p>我们之前还讲解了多模块项目，那么多模块下父项目存在一个<code>packing</code>打包类型标签，所有的父级项目的packing都为pom，packing默认是jar类型，如果不作配置，maven会将该项目打成jar包。作为父级项目，还有一个重要的属性，那就是modules，通过modules标签将项目的所有子项目引用进来，在build父级项目时，会根据子模块的相互依赖关系整理一个build顺序，然后依次build。</p><hr><h1 id="使用Maven创建Web项目"><a href="#使用Maven创建Web项目" class="headerlink" title="使用Maven创建Web项目"></a>使用Maven创建Web项目</h1><p>虽然我们已经可以在Tomcat上部署我们的前端页面了，但是依然只是一个静态页面（每次访问都是同样的样子），那么如何向服务器请求一个动态的页面呢（比如显示我们访问当前页面的时间）这时就需要我们编写一个Web应用程序来实现了，我们需要在用户向服务器发起页面请求时，进行一些处理，再将结果发送给用户的浏览器。</p><p>**注意：这里需要使用终极版IDEA，如果你的还是社区版，就很难受了。</p><p>我们打开IDEA，新建一个项目，选择Java Enterprise（社区版没有此选项！）项目名称随便，项目模板选择Web应用程序，然后我们需要配置Web应用程序服务器，将我们的Tomcat服务器集成到IDEA中。配置很简单，首先点击新建，然后设置Tomcat主目录即可，配置完成后，点击下一步即可，依赖项使用默认即可，然后点击完成，之后IDEA会自动帮助我们创建Maven项目。</p><p>创建完成后，直接点击右上角即可运行此项目了，但是我们发现，有一个Servlet页面不生效。</p><p>需要注意的是，Tomcat10以上的版本比较新，Servlet API包名发生了一些变化，因此我们需要修改一下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意包名全部从javax改为jakarta，我们需要手动修改一下。</p><p>感兴趣的可以了解一下为什么名称被修改了：</p><blockquote><p>Eclipse基金会在2019年对 Java EE 标准的每个规范进行了重命名，阐明了每个规范在Jakarta EE平台未来的角色。</p><p>新的名称Jakarta EE是Java EE的第二次重命名。2006年5月，“J2EE”一词被弃用，并选择了Java EE这个名称。在YouTube还只是一家独立的公司的时候，数字2就就从名字中消失了，而且当时冥王星仍然被认为是一颗行星。同样，作为Java SE 5（2004）的一部分，数字2也从J2SE中删除了，那时谷歌还没有上市。</p><p><strong>因为不能再使用javax名称空间，Jakarta EE提供了非常明显的分界线。</strong></p><ul><li>Jakarta 9（2019及以后）使用jakarta命名空间。</li><li>Java EE 5（2005）到Java EE 8（2017）使用javax命名空间。</li><li>Java EE 4使用javax命名空间。</li></ul></blockquote><p>我们可以将项目直接打包为war包（默认），打包好之后，放入webapp文件夹，就可以直接运行我们通过Java编写的Web应用程序了，访问路径为文件的名称。</p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>前面我们已经完成了基本的环境搭建，那么现在我们就可以开始来了解我们的第一个重要类——Servlet。</p><p>它是Java EE的一个标准，大部分的Web服务器都支持此标准，包括Tomcat，就像之前的JDBC一样，由官方定义了一系列接口，而具体实现由我们来编写，最后交给Web服务器（如Tomcat）来运行我们编写的Servlet。</p><p>那么，它能做什么呢？我们可以通过实现Servlet来进行动态网页响应，使用Servlet，不再是直接由Tomcat服务器发送我们编写好的静态网页内容（HTML文件），而是由我们通过Java代码进行动态拼接的结果，它能够很好地实现动态网页的返回。</p><p>当然，Servlet并不是专用于HTTP协议通信，也可以用于其他的通信，但是一般都是用于HTTP。</p><h3 id="创建Servlet"><a href="#创建Servlet" class="headerlink" title="创建Servlet"></a>创建Servlet</h3><p>那么如何创建一个Servlet呢，非常简单，我们只需要实现<code>Servlet</code>类即可，并添加注解<code>@WebServlet</code>来进行注册。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>...实现接口方法<br>&#125;<br></code></pre></td></tr></table></figure><p>现在就可以去访问一下我们的页面：<a href="http://localhost:8080/test/test">http://localhost:8080/test/test</a></p><p>我们发现，直接访问此页面是没有任何内容的，这是因为我们还没有为该请求方法编写实现，这里先不做讲解，后面我们会对浏览器的请求处理做详细的介绍。</p><p>除了直接编写一个类，我们也可以在<code>web.xml</code>中进行注册，现将类上<code>@WebServlet</code>的注解去掉：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.webtest.TestServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/test<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样的方式也能注册Servlet，但是显然直接使用<strong>注解更加方便</strong>，因此之后我们一律使用注解进行开发。只有比较新的版本才支持此注解，老的版本是不支持的哦。</p><p>实际上，Tomcat服务器会为我们提供一些默认的Servlet，也就是说在服务器启动后，即使我们什么都不编写，<strong>Tomcat也自带了几个默认的Servlet</strong>，他们编写在conf目录下的<code>web.xml</code>中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- The mapping for the default servlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- The mappings for the JSP servlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>jsp<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jspx<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>我们发现，默认的Servlet实际上可以帮助我们去访问一些<em>静态资源</em>，这也是为什么我们启动Tomcat服务器之后，能够直接访问webapp目录下的静态页面。</p><p>我们可以将之前编写的页面放入到webapp目录下，来测试一下是否能直接访问。</p><h3 id="探究Servlet的生命周期"><a href="#探究Servlet的生命周期" class="headerlink" title="探究Servlet的生命周期"></a>探究Servlet的生命周期</h3><p>我们已经了解了如何注册一个Servlet，那么我们接着来看看，一个Servlet是如何运行的。</p><p>首先我们需要了解，Servlet中的方法各自是在什么时候被调用的，我们先编写一个打印语句来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TestServlet</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是构造方法！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是init&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是getServletConfig&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是service&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是getServletInfo&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是destroy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们首先启动一次服务器，然后访问我们定义的页面，然后再关闭服务器，得到如下的顺序：</p><blockquote><p>我是构造方法！<br>我是init<br>我是service<br>我是service（出现两次是因为浏览器请求了2次，是因为有一次是请求favicon.ico，浏览器通病）<br>我是destroy</p></blockquote><p>我们可以多次尝试去访问此页面，但是<strong>init和构造方法只会执行一次</strong>，而每次访问都会执行的是<code>service</code>方法，因此，一个Servlet的生命周期为：</p><ul><li>首先执行构造方法完成 Servlet 初始化</li><li>Servlet 初始化后调用 <strong>init ()</strong> 方法。</li><li>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求。</li><li>Servlet 销毁前调用 <strong>destroy()</strong> 方法。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><p>现在我们发现，实际上在Web应用程序运行时，每当浏览器向服务器发起一个请求时，都会创建一个线程执行一次<code>service</code>方法，来让我们处理用户的请求，并将结果响应给用户。</p><p>我们发现<code>service</code>方法中，还有两个参数，<code>ServletRequest</code>和<code>ServletResponse</code>，实际上，用户发起的HTTP请求，就被Tomcat服务器封装为了一个<code>ServletRequest</code>对象，我们得到是其实是Tomcat服务器帮助我们创建的一个实现类，HTTP请求报文中的所有内容，都可以从<code>ServletRequest</code>对象中获取，同理，<code>ServletResponse</code>就是我们需要返回给浏览器的HTTP响应报文实体类封装。</p><p>那么我们来看看<code>ServletRequest</code>中有哪些内容，我们可以获取请求的一些信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//首先将其转换为HttpServletRequest（继承自ServletRequest，一般是此接口实现）</span><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>        <br>        System.out.println(request.getProtocol());  <span class="hljs-comment">//获取协议版本</span><br>        System.out.println(request.getRemoteAddr());  <span class="hljs-comment">//获取访问者的IP地址</span><br>    System.out.println(request.getMethod());   <span class="hljs-comment">//获取请求方法</span><br>        <span class="hljs-comment">//获取头部信息</span><br>        Enumeration&lt;String&gt; enumeration = request.getHeaderNames();<br>        <span class="hljs-keyword">while</span> (enumeration.hasMoreElements())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> enumeration.nextElement();<br>            System.out.println(name + <span class="hljs-string">&quot;: &quot;</span> + request.getHeader(name));<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，整个HTTP<strong>请求报文中的所有内容</strong>，都可以通过<code>HttpServletRequest</code>对象来获取，当然，它的作用肯定不仅仅是获取头部信息，我们还可以使用它来完成更多操作，后面会一一讲解。</p><p>那么我们再来看看<code>ServletResponse</code>，这个是服务端的响应内容，我们可以在这里填写我们想要发送给浏览器显示的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//转换为HttpServletResponse（同上）</span><br><span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse) servletResponse;<br><span class="hljs-comment">//设定内容类型以及编码格式（普通HTML文本使用text/html，之后会讲解文件传输）</span><br>response.setHeader(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><span class="hljs-comment">//获取Writer直接写入内容</span><br>response.getWriter().write(<span class="hljs-string">&quot;我是响应内容！&quot;</span>);<br><span class="hljs-comment">//所有内容写入完成之后，再发送给浏览器</span><br></code></pre></td></tr></table></figure><p>现在我们在浏览器中打开此页面，就能够收到服务器发来的响应内容了。其中，响应头部分，是由Tomcat帮助我们生成的一个默认响应头。</p><p><img src="https://s2.loli.net/2023/03/06/OpTzXU5b8VjkSiB.jpg" alt="点击查看源网页"></p><p>因此，实际上整个流程就已经很清晰明了了。</p><h3 id="解读和使用HttpServlet"><a href="#解读和使用HttpServlet" class="headerlink" title="解读和使用HttpServlet"></a>解读和使用HttpServlet</h3><p>前面我们已经学习了如何创建、注册和使用Servlet，那么我们继续来深入学习Servlet接口的一些实现类。</p><p>首先<code>Servlet</code>有一个直接实现抽象类<code>GenericServlet</code>，那么我们来看看此类做了什么事情。</p><p>我们发现，这个类完善了配置文件读取和Servlet信息相关的的操作，但是依然没有去实现service方法，因此此类仅仅是用于完善一个Servlet的基本操作，那么我们接着来看<code>HttpServlet</code>，它是遵循HTTP协议的一种Servlet，继承自<code>GenericServlet</code>，它根据HTTP协议的规则，完善了service方法。</p><p>在阅读了HttpServlet源码之后，我们发现，其实我们只需要继承HttpServlet来编写我们的Servlet就可以了，并且它已经帮助我们提前实现了一些操作，这样就会给我们省去很多的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Log</span><br><span class="hljs-meta">@WebServlet(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;恭喜你解锁了全新玩法&lt;/h1&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们只需要重写对应的请求方式，就可以快速完成Servlet的编写。</p><h3 id="WebServlet注解详解"><a href="#WebServlet注解详解" class="headerlink" title="@WebServlet注解详解"></a>@WebServlet注解详解</h3><p>我们接着来看WebServlet注解，我们前面已经得知，可以直接使用此注解来快速注册一个Servlet，那么我们来想细看看此注解还有什么其他的玩法。</p><p>首先name属性就是Servlet名称，而urlPatterns和value实际上是同样功能，就是代表当前Servlet的访问路径，它不仅仅可以是一个固定值，还可以进行通配符匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/test/*&quot;)</span><br></code></pre></td></tr></table></figure><p>上面的路径表示，所有匹配<code>/test/随便什么</code>的路径名称，都可以访问此Servlet，我们可以在浏览器中尝试一下。</p><p>也可以进行某个扩展名称的匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;*.js&quot;)</span><br></code></pre></td></tr></table></figure><p>这样的话，获取任何以js结尾的文件，都会由我们自己定义的Servlet处理。</p><p>那么如果我们的路径为<code>/</code>呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/&quot;)</span><br></code></pre></td></tr></table></figure><p>此路径和Tomcat默认为我们提供的Servlet冲突，会直接替换掉默认的，而使用我们的，此路径的意思为，如果没有找到匹配当前访问路径的Servlet，那么久会使用此Servlet进行处理。</p><p>我们还可以为一个Servlet配置多个访问路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&#123;&quot;/test1&quot;, &quot;/test2&quot;&#125;)</span><br></code></pre></td></tr></table></figure><p>我们接着来看loadOnStartup属性，此属性决定了是否在Tomcat启动时就加载此Servlet，默认情况下，Servlet只有在被访问时才会加载，它的默认值为-1，表示不在启动时加载，我们可以将其修改为大于等于0的数，来开启启动时加载。并且数字的大小决定了此Servlet的启动优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Log</span><br><span class="hljs-meta">@WebServlet(value = &quot;/test&quot;, loadOnStartup = 1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-built_in">super</span>.init();<br>        log.info(<span class="hljs-string">&quot;我被初始化了！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;恭喜你解锁了全新玩法&lt;/h1&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他内容都是Servlet的一些基本配置，这里就不详细讲解了。</p><h3 id="使用POST请求完成登陆"><a href="#使用POST请求完成登陆" class="headerlink" title="使用POST请求完成登陆"></a>使用POST请求完成登陆</h3><p>我们前面已经了解了如何使用Servlet来处理HTTP请求，那么现在，我们就结合前端，来实现一下登陆操作。</p><p>我们需要修改一下我们的Servlet，现在我们要让其能够接收一个POST请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Log</span><br><span class="hljs-meta">@WebServlet(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.getParameterMap().forEach((k, v) -&gt; &#123;<br>            System.out.println(k + <span class="hljs-string">&quot;: &quot;</span> + Arrays.toString(v));<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ParameterMap</code>存储了我们发送的POST请求所携带的表单数据，我们可以直接将其遍历查看，浏览器发送了什么数据。</p><p>现在我们再来修改一下前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录到系统<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过修改form标签的属性，现在我们点击登录按钮，会自动向后台发送一个POST请求，请求地址为当前地址+/login（注意不同路径的写法），也就是我们上面编写的Servlet路径。</p><p>运行服务器，测试后发现，在点击按钮后，确实向服务器发起了一个POST请求，并且携带了表单中文本框的数据。</p><p>现在，我们根据已有的基础，将其与数据库打通，我们进行一个真正的用户登录操作，首先修改一下Servlet的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-comment">//首先设置一下响应类型</span><br>    resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    <span class="hljs-comment">//获取POST请求携带的表单数据</span><br>    Map&lt;String, String[]&gt; map = req.getParameterMap();<br>    <span class="hljs-comment">//判断表单是否完整</span><br>    <span class="hljs-keyword">if</span>(map.containsKey(<span class="hljs-string">&quot;username&quot;</span>) &amp;&amp; map.containsKey(<span class="hljs-string">&quot;password&quot;</span>)) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br><br>        <span class="hljs-comment">//权限校验（待完善）</span><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;错误，您的表单数据不完整！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们再去编写Mybatis的依赖和配置文件，创建一个表，用于存放我们用户的账号和密码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;驱动类（含包名）&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;数据库连接URL&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;用户名&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;密码&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.27<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置完成后，在我们的Servlet的init方法中编写Mybatis初始化代码，因为它只需要初始化一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSessionFactory factory;<br><span class="hljs-meta">@SneakyThrows</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>    factory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们创建一个实体类以及Mapper来进行用户信息查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    String username;<br>    String password;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from users where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span><br>    User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>好了，现在完事具备，只欠东风了，我们来完善一下登陆验证逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//登陆校验（待完善）</span><br><span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>))&#123;<br>    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUser(username, password);<br>    <span class="hljs-comment">//判断用户是否登陆成功，若查询到信息则表示存在此用户</span><br>    <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;登陆成功！&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;登陆失败，请验证您的用户名或密码！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在再去浏览器上进行测试吧！</p><p>注册界面其实是同理的，这里就不多做讲解了。</p><h3 id="上传和下载文件"><a href="#上传和下载文件" class="headerlink" title="上传和下载文件"></a>上传和下载文件</h3><p>首先我们来看看比较简单的下载文件，首先将我们的icon.png放入到resource文件夹中，接着我们编写一个Servlet用于处理文件下载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>      resp.setContentType(<span class="hljs-string">&quot;image/png&quot;</span>);  <br>      <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;icon.png&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了更加快速地编写IO代码，我们可以引入一个工具库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用此类库可以快速完成IO操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.setContentType(<span class="hljs-string">&quot;image/png&quot;</span>);<br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;icon.png&quot;</span>);<br><span class="hljs-comment">//直接使用copy方法完成转换</span><br>IOUtils.copy(inputStream, outputStream);<br></code></pre></td></tr></table></figure><p>现在我们在前端页面添加一个链接，用于下载此文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">download</span>=<span class="hljs-string">&quot;icon.png&quot;</span>&gt;</span>点我下载高清资源<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下载文件搞定，那么如何上传一个文件呢？</p><p>首先我们编写前端部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test-file&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意必须添加<code>enctype=&quot;multipart/form-data&quot;</code>，来表示此表单用于文件传输。</p><p>现在我们来修改一下Servlet代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MultipartConfig</span><br><span class="hljs-meta">@WebServlet(&quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;/Users/nagocoler/Documents/IdeaProjects/WebTest/test.png&quot;</span>))&#123;<br>            <span class="hljs-type">Part</span> <span class="hljs-variable">part</span> <span class="hljs-operator">=</span> req.getPart(<span class="hljs-string">&quot;test-file&quot;</span>);<br>            IOUtils.copy(part.getInputStream(), stream);<br>            resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>            resp.getWriter().write(<span class="hljs-string">&quot;文件上传成功！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，必须添加<code>@MultipartConfig</code>注解来表示此Servlet用于处理文件上传请求。</p><p>现在我们再运行服务器，并将我们刚才下载的文件又上传给服务端。</p><h3 id="使用XHR请求数据"><a href="#使用XHR请求数据" class="headerlink" title="使用XHR请求数据"></a>使用XHR请求数据</h3><p>现在我们希望，网页中的部分内容，可以动态显示，比如网页上有一个时间，旁边有一个按钮，点击按钮就可以刷新当前时间。</p><p>这个时候就需要我们在网页展示时向后端发起请求了，并根据后端响应的结果，动态地更新页面中的内容，要实现此功能，就需要用到JavaScript来帮助我们，首先在js中编写我们的XHR请求，并在请求中完成动态更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateTime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;time&quot;</span>).<span class="hljs-property">innerText</span> = xhr.<span class="hljs-property">responseText</span><br>        &#125;<br>    &#125;;<br>    xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-literal">true</span>);<br>    xhr.<span class="hljs-title function_">send</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>接着修改一下前端页面，添加一个时间显示区域：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;updateTime()&quot;</span>&gt;</span>更新数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>    updateTime()<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后创建一个Servlet用于处理时间更新请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/time&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">dateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> dateFormat.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        resp.getWriter().write(date);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在点击按钮就可以更新了。</p><p>GET请求也能传递参数，这里做一下演示。</p><h3 id="重定向与请求转发"><a href="#重定向与请求转发" class="headerlink" title="重定向与请求转发"></a>重定向与请求转发</h3><p>当我们希望用户登录完成之后，直接跳转到网站的首页，那么这个时候，我们就可以使用重定向来完成。当浏览器收到一个重定向的响应时，会按照重定向响应给出的地址，再次向此地址发出请求。</p><p>实现重定向很简单，只需要调用一个方法即可，我们修改一下登陆成功后执行的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">resp.sendRedirect(<span class="hljs-string">&quot;time&quot;</span>);<br></code></pre></td></tr></table></figure><p>调用后，响应的状态码会被设置为302，并且响应头中添加了一个Location属性，此属性表示，需要重定向到哪一个网址。</p><p>现在，如果我们成功登陆，那么服务器会发送给我们一个重定向响应，这时，我们的浏览器会去重新请求另一个网址。这样，我们在登陆成功之后，就可以直接帮助用户跳转到用户首页了。</p><p>那么我们接着来看请求转发，请求转发其实是一种服务器内部的跳转机制，我们知道，重定向会使得浏览器去重新请求一个页面，而请求转发则是服务器内部进行跳转，它的目的是，直接将本次请求转发给其他Servlet进行处理，并由其他Servlet来返回结果，因此它是在进行内部的转发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">req.getRequestDispatcher(<span class="hljs-string">&quot;/time&quot;</span>).forward(req, resp);<br></code></pre></td></tr></table></figure><p>现在，在登陆成功的时候，我们将请求转发给处理时间的Servlet，注意这里的路径规则和之前的不同，我们需要填写Servlet上指明的路径，并且请求转发只能转发到此应用程序内部的Servlet，不能转发给其他站点或是其他Web应用程序。</p><p>现在再次进行登陆操作，我们发现，返回结果为一个405页面，证明了，我们的请求现在是被另一个Servlet进行处理，并且请求的信息全部被转交给另一个Servlet，由于此Servlet不支持POST请求，因此返回405状态码。</p><p>那么也就是说，该请求包括请求参数也一起被传递了，那么我们可以尝试获取以下POST请求的参数。</p><p>现在我们给此Servlet添加POST请求处理，直接转交给Get请求处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-built_in">this</span>.doGet(req, resp);<br>&#125;<br></code></pre></td></tr></table></figure><p>再次访问，成功得到结果，但是我们发现，浏览器只发起了一次请求，并没有再次请求新的URL，也就是说，这一次请求直接返回了请求转发后的处理结果。</p><p>那么，请求转发有什么好处呢？它可以携带数据！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">req.setAttribute(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;我是请求转发前的数据&quot;</span>);<br>req.getRequestDispatcher(<span class="hljs-string">&quot;/time&quot;</span>).forward(req, resp);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(req.getAttribute(<span class="hljs-string">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure><p>通过<code>setAttribute</code>方法来给当前请求添加一个附加数据，在请求转发后，我们可以直接获取到该数据。</p><p>重定向属于2次请求，因此无法使用这种方式来传递数据，那么，如何在重定向之间传递数据呢？我们可以使用即将要介绍的ServletContext对象。</p><p>最后总结，两者的区别为：</p><ul><li>请求转发是一次请求，重定向是两次请求</li><li>请求转发地址栏不会发生改变， 重定向地址栏会发生改变</li><li>请求转发可以共享请求参数 ，重定向之后，就获取不了共享参数了</li><li>请求转发只能转发给内部的Servlet</li></ul><h3 id="了解ServletContext对象"><a href="#了解ServletContext对象" class="headerlink" title="了解ServletContext对象"></a>了解ServletContext对象</h3><p>ServletContext全局唯一，它是属于整个Web应用程序的，我们可以通过<code>getServletContext()</code>来获取到此对象。</p><p>此对象也能设置附加值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getServletContext();<br>context.setAttribute(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;我是重定向之前的数据&quot;</span>);<br>resp.sendRedirect(<span class="hljs-string">&quot;time&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(getServletContext().getAttribute(<span class="hljs-string">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure><p>因为无论在哪里，无论什么时间，获取到的ServletContext始终是同一个对象，因此我们可以随时随地获取我们添加的属性。</p><p>它不仅仅可以用来进行数据传递，还可以做一些其他的事情，比如请求转发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">context.getRequestDispatcher(<span class="hljs-string">&quot;/time&quot;</span>).forward(req, resp);<br></code></pre></td></tr></table></figure><p>它还可以获取根目录下的资源文件（注意是webapp根目录下的，不是resource中的资源）</p><h3 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h3><p>初始化参数类似于初始化配置需要的一些值，比如我们的数据库连接相关信息，就可以通过初始化参数来给予Servlet，或是一些其他的配置项，也可以使用初始化参数来实现。</p><p>我们可以给一个Servlet添加一些初始化参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(value = &quot;/login&quot;, initParams = &#123;</span><br><span class="hljs-meta">        @WebInitParam(name = &quot;test&quot;, value = &quot;我是一个默认的初始化参数&quot;)</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></td></tr></table></figure><p>它也是以键值对形式保存的，我们可以直接通过Servlet的<code>getInitParameter</code>方法获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(getInitParameter(<span class="hljs-string">&quot;test&quot;</span>));<br></code></pre></td></tr></table></figure><p>但是，这里的初始化参数仅仅是针对于此Servlet，我们也可以定义全局初始化参数，只需要在web.xml编写即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>lbwnb<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>我是全局初始化参数<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们需要使用ServletContext来读取全局初始化参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServletContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> getServletContext();<br>System.out.println(context.getInitParameter(<span class="hljs-string">&quot;lbwnb&quot;</span>));<br></code></pre></td></tr></table></figure><p>有关ServletContext其他的内容，我们需要完成后面内容的学习，才能理解。</p><hr><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>什么是Cookie？不是曲奇，它可以在浏览器中保存一些信息，并且在下次请求时，请求头中会携带这些信息。</p><p>我们可以编写一个测试用例来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;yyds&quot;</span>);<br>resp.addCookie(cookie);<br>resp.sendRedirect(<span class="hljs-string">&quot;time&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Cookie cookie : req.getCookies()) &#123;<br>    System.out.println(cookie.getName() + <span class="hljs-string">&quot;: &quot;</span> + cookie.getValue());<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以观察一下，在<code>HttpServletResponse</code>中添加Cookie之后，浏览器的响应头中会包含一个<code>Set-Cookie</code>属性，同时，在重定向之后，我们的请求头中，会携带此Cookie作为一个属性，同时，我们可以直接通过<code>HttpServletRequest</code>来快速获取有哪些Cookie信息。</p><p><img src="https://s2.loli.net/2023/03/06/3JcLpr9GYMnbBHw.jpg" alt="点击查看源网页"></p><p>还有这么神奇的事情吗？那么我们来看看，一个Cookie包含哪些信息：</p><ul><li>name   -   Cookie的名称，Cookie一旦创建，名称便不可更改</li><li>value  -   Cookie的值，如果值为Unicode字符，需要为字符编码。如果为二进制数据，则需要使用BASE64编码</li><li>maxAge  -  Cookie失效的时间，单位秒。如果为正数，则该Cookie在maxAge秒后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示删除该Cookie。默认为-1。</li><li>secure  -  该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。</li><li>path  -  Cookie的使用路径。如果设置为“/sessionWeb/”，则只有contextPath为“/sessionWeb”的程序可以访问该Cookie。如果设置为“/”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“/”。</li><li>domain  -  可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”。</li><li>comment  -  该Cookie的用处说明，浏览器显示Cookie信息的时候显示该说明。</li><li>version  -  Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范</li></ul><p>我们发现，最关键的其实是<code>name</code>、<code>value</code>、<code>maxAge</code>、<code>domain</code>属性。</p><p>那么我们来尝试修改一下maxAge来看看失效时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cookie.setMaxAge(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><p>设定为20秒，我们可以直接看到，响应头为我们设定了20秒的过期时间。20秒内访问都会携带此Cookie，而超过20秒，Cookie消失。</p><p>既然了解了Cookie的作用，我们就可以通过使用Cookie来实现记住我功能，我们可以将用户名和密码全部保存在Cookie中，如果访问我们的首页时携带了这些Cookie，那么我们就可以直接为用户进行登陆，如果登陆成功则直接跳转到首页，如果登陆失败，则清理浏览器中的Cookie。</p><p>那么首先，我们先在前端页面的表单中添加一个勾选框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;记住我&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember-me&quot;</span>&gt;</span><br>        记住我<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着，我们在登陆成功时进行判断，如果用户勾选了记住我，那么就讲Cookie存储到本地：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(map.containsKey(<span class="hljs-string">&quot;remember-me&quot;</span>))&#123;   <span class="hljs-comment">//若勾选了勾选框，那么会此表单信息</span><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie_username</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, username);<br>    cookie_username.setMaxAge(<span class="hljs-number">30</span>);<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie_password</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;password&quot;</span>, password);<br>    cookie_password.setMaxAge(<span class="hljs-number">30</span>);<br>    resp.addCookie(cookie_username);<br>    resp.addCookie(cookie_password);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，我们修改一下默认的请求地址，现在一律通过<code>http://localhost:8080/yyds/login</code>进行登陆，那么我们需要添加GET请求的相关处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    Cookie[] cookies = req.getCookies();<br>    <span class="hljs-keyword">if</span>(cookies != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-keyword">if</span>(cookie.getName().equals(<span class="hljs-string">&quot;username&quot;</span>)) username = cookie.getValue();<br>            <span class="hljs-keyword">if</span>(cookie.getName().equals(<span class="hljs-string">&quot;password&quot;</span>)) password = cookie.getValue();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(username != <span class="hljs-literal">null</span> &amp;&amp; password != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//登陆校验</span><br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession(<span class="hljs-literal">true</span>))&#123;<br>                <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserMapper.class);<br>                <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.getUser(username, password);<br>                <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;<br>                    resp.sendRedirect(<span class="hljs-string">&quot;time&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;   <span class="hljs-comment">//直接返回</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    req.getRequestDispatcher(<span class="hljs-string">&quot;/&quot;</span>).forward(req, resp);   <span class="hljs-comment">//正常情况还是转发给默认的Servlet帮我们返回静态页面</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在，30秒内都不需要登陆，访问登陆页面后，会直接跳转到time页面。</p><p>现在已经离我们理想的页面越来越接近了，但是仍然有一个问题，就是我们的首页，无论是否登陆，所有人都可以访问，那么，如何才可以实现只有登陆之后才能访问呢？这就需要用到Session了。</p><hr><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>由于HTTP是无连接的，那么如何能够辨别当前的请求是来自哪个用户发起的呢？Session就是用来处理这种问题的，每个用户的会话都会有一个自己的Session对象，来自同一个浏览器的所有请求，就属于同一个会话。</p><p>但是HTTP协议是无连接的呀，那Session是如何做到辨别是否来自同一个浏览器呢？Session实际上是基于Cookie实现的，前面我们了解了Cookie，我们知道，服务端可以将Cookie保存到浏览器，当浏览器下次访问时，就会附带这些Cookie信息。</p><p>Session也利用了这一点，它会给浏览器设定一个叫做<code>JSESSIONID</code>的Cookie，值是一个随机的排列组合，而此Cookie就对应了你属于哪一个对话，只要我们的浏览器携带此Cookie访问服务器，服务器就会通过Cookie的值进行辨别，得到对应的Session对象，因此，这样就可以追踪到底是哪一个浏览器在访问服务器。</p><p><img src="https://s2.loli.net/2023/03/06/wCYHNg39tFcK76M.gif" alt="点击查看源网页"></p><p>那么现在，我们在用户登录成功之后，将用户对象添加到Session中，只要是此用户发起的请求，我们都可以从<code>HttpSession</code>中读取到存储在会话中的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br></code></pre></td></tr></table></figure><p>同时，如果用户没有登录就去访问首页，那么我们将发送一个重定向请求，告诉用户，需要先进行登录才可以访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>) &#123;<br>    resp.sendRedirect(<span class="hljs-string">&quot;login&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在访问的过程中，注意观察Cookie变化。</p><p>Session并不是永远都存在的，它有着自己的过期时间，默认时间为30分钟，若超过此时间，Session将丢失，我们可以在配置文件中修改过期时间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们也可以在代码中使用<code>invalidate</code>方法来使Session立即失效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">session.invalidate();<br></code></pre></td></tr></table></figure><p>现在，通过Session，我们就可以更好地控制用户对于资源的访问，只有完成登陆的用户才有资格访问首页。</p><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>有了Session之后，我们就可以很好地控制用户的登陆验证了，只有授权的用户，才可以访问一些页面，但是我们需要一个一个去进行配置，还是太过复杂，能否一次性地过滤掉没有登录验证的用户呢？</p><p>过滤器相当于在所有访问前加了一堵墙，来自浏览器的所有访问请求都会首先经过过滤器，只有过滤器允许通过的请求，才可以顺利地到达对应的Servlet，而过滤器不允许的通过的请求，我们可以自由地进行控制是否进行重定向或是请求转发。并且过滤器可以添加很多个，就相当于添加了很多堵墙，我们的请求只有穿过层层阻碍，才能与Servlet相拥，像极了爱情。</p><p><img src="https://s2.loli.net/2023/03/06/md9X75EToshnH8I.jpg" alt="点击查看源网页"></p><p>添加一个过滤器非常简单，只需要实现Filter接口，并添加<code>@WebFilter</code>注解即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span>   <span class="hljs-comment">//路径的匹配规则和Servlet一致，这里表示匹配所有请求</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就成功地添加了一个过滤器，那么添加一句打印语句看看，是否所有的请求都会经过此过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) servletRequest;<br>System.out.println(request.getRequestURL());<br></code></pre></td></tr></table></figure><p>我们发现，现在我们发起的所有请求，一律需要经过此过滤器，并且所有的请求都没有任何的响应内容。</p><p>那么如何让请求可以顺利地到达对应的Servlet，也就是说怎么让这个请求顺利通过呢？我们只需要在最后添加一句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">filterChain.doFilter(servletRequest, servletResponse);<br></code></pre></td></tr></table></figure><p>那么这行代码是什么意思呢？</p><p>由于我们整个应用程序可能存在多个过滤器，那么这行代码的意思实际上是将此请求继续传递给下一个过滤器，当没有下一个过滤器时，才会到达对应的Servlet进行处理，我们可以再来创建一个过滤器看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFilter2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是2号过滤器&quot;</span>);<br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于过滤器的过滤顺序是按照类名的自然排序进行的，因此我们将第一个过滤器命名进行调整。</p><p>我们发现，在经过第一个过滤器之后，会继续前往第二个过滤器，只有两个过滤器全部经过之后，才会到达我们的Servlet中。</p><p><img src="https://s2.loli.net/2023/03/06/LaDmPMWEtAB1HVF.jpg" alt="点击查看源网页"></p><p>实际上，当<code>doFilter</code>方法调用时，就会一直向下直到Servlet，在Servlet处理完成之后，又依次返回到最前面的Filter，类似于递归的结构，我们添加几个输出语句来判断一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是2号过滤器&quot;</span>);<br>    filterChain.doFilter(servletRequest, servletResponse);<br>    System.out.println(<span class="hljs-string">&quot;我是2号过滤器，处理后&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是1号过滤器&quot;</span>);<br>    filterChain.doFilter(servletRequest, servletResponse);<br>    System.out.println(<span class="hljs-string">&quot;我是1号过滤器，处理后&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后验证我们的结论。</p><p>同Servlet一样，Filter也有对应的HttpFilter专用类，它针对HTTP请求进行了专门处理，因此我们可以直接使用HttpFilter来编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GenericFilter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7478463438252262094L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpFilter</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-keyword">if</span> (req <span class="hljs-keyword">instanceof</span> HttpServletRequest &amp;&amp; res <span class="hljs-keyword">instanceof</span> HttpServletResponse) &#123;<br>            <span class="hljs-built_in">this</span>.doFilter((HttpServletRequest)req, (HttpServletResponse)res, chain);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(<span class="hljs-string">&quot;non-HTTP request or response&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        chain.doFilter(req, res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么现在，我们就可以给我们的应用程序添加一个过滤器，用户在未登录情况下，只允许静态资源和登陆页面请求通过，登陆之后畅行无阻：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL().toString();<br>        <span class="hljs-comment">//判断是否为静态资源</span><br>        <span class="hljs-keyword">if</span>(!url.endsWith(<span class="hljs-string">&quot;.js&quot;</span>) &amp;&amp; !url.endsWith(<span class="hljs-string">&quot;.css&quot;</span>) &amp;&amp; !url.endsWith(<span class="hljs-string">&quot;.png&quot;</span>))&#123;<br>            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User) session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>            <span class="hljs-comment">//判断是否未登陆</span><br>            <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span> &amp;&amp; !url.endsWith(<span class="hljs-string">&quot;login&quot;</span>))&#123;<br>                res.sendRedirect(<span class="hljs-string">&quot;login&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//交给过滤链处理</span><br>        chain.doFilter(req, res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在，我们的页面已经基本完善为我们想要的样子了。</p><p>当然，可能跟着教程编写的项目比较乱，大家可以自己花费一点时间来重新编写一个Web应用程序，加深对之前讲解知识的理解。我们也会在之后安排一个编程实战进行深化练习。</p><hr><h1 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h1><p>监听器并不是我们学习的重点内容，那么什么是监听器呢？</p><p>如果我们希望，在应用程序加载的时候，或是Session创建的时候，亦或是在Request对象创建的时候进行一些操作，那么这个时候，我们就可以使用监听器来实现。</p><p><img src="https://s2.loli.net/2023/03/06/xl4hzgOaSCdXHcu.png" alt="img"></p><p>默认为我们提供了很多类型的监听器，我们这里就演示一下监听Session的创建即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpSessionListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;有一个Session被创建了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>有关监听器相关内容，了解即可。</p><hr><h1 id="了解JSP页面与加载规则"><a href="#了解JSP页面与加载规则" class="headerlink" title="了解JSP页面与加载规则"></a>了解JSP页面与加载规则</h1><p>前面我们已经完成了整个Web应用程序生命周期中所有内容的学习，我们已经完全了解，如何编写一个Web应用程序，并放在Tomcat上部署运行，以及如何控制浏览器发来的请求，通过Session+Filter实现用户登陆验证，通过Cookie实现自动登陆等操作。到目前为止，我们已经具备编写一个完整Web网站的能力。</p><p>在之前的教程中，我们的前端静态页面并没有与后端相结合，我们前端页面所需的数据全部需要单独向后端发起请求获取，并动态进行内容填充，这是一种典型的前后端分离写法，前端只负责要数据和显示数据，后端只负责处理数据和提供数据，这也是现在更流行的一种写法，让前端开发者和后端开发者各尽其责，更加专一，这才是我们所希望的开发模式。</p><p>JSP并不是我们需要重点学习的内容，因为它已经过时了，使用JSP会导致前后端严重耦合，因此这里只做了解即可。</p><p>JSP其实就是一种模板引擎，那么何谓模板引擎呢？顾名思义，它就是一个模板，而模板需要我们填入数据，才可以变成一个页面，也就是说，我们可以直接在前端页面中直接填写数据，填写后生成一个最终的HTML页面返回给前端。</p><p>首先我们来创建一个新的项目，项目创建成功后，删除Java目录下的内容，只留下默认创建的jsp文件，我们发现，在webapp目录中，存在一个<code>index.jsp</code>文件，现在我们直接运行项目，会直接访问这个JSP页面。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;JSP - Hello World&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;&lt;%= <span class="hljs-string">&quot;Hello World!&quot;</span> %&gt;<br>&lt;/h1&gt;<br>&lt;br/&gt;<br>&lt;a href=<span class="hljs-string">&quot;hello-servlet&quot;</span>&gt;Hello Servlet&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>但是我们并没有编写对应的Servlet来解析啊，那么为什么这个JSP页面会被加载呢？</p><p>实际上，我们一开始提到的两个Tomcat默认的Servlet中，一个是用于请求静态资源，还有一个就是用于处理jsp的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- The mappings for the JSP servlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>jsp<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jspx<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么，JSP和普通HTML页面有什么区别呢，我们发现它的语法和普通HTML页面几乎一致，我们可以直接在JSP中编写Java代码，并在页面加载的时候执行，我们随便找个地方插入：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%<br>    System.out.println(<span class="hljs-string">&quot;JSP页面被加载&quot;</span>);<br>%&gt;<br></code></pre></td></tr></table></figure><p>我们发现，请求一次页面，页面就会加载一次，并执行我们填写的Java代码。也就是说，我们可以直接在此页面中执行Java代码来填充我们的数据，这样我们的页面就变成了一个动态页面，使用<code>&lt;%=  %&gt;</code>来填写一个值：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;h1&gt;&lt;%= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() %&gt;&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p>现在访问我们的网站，每次都会创建一个新的Date对象，因此每次访问获取的时间都不一样，我们的网站已经算是一个动态的网站的了。</p><p>虽然这样在一定程度上上为我们提供了便利，但是这样的写法相当于整个页面既要编写前端代码，也要编写后端代码，随着项目的扩大，整个页面会显得难以阅读，并且现在都是前后端开发人员职责非常明确的，如果要编写JSP页面，那就必须要招一个既会前端也会后端的程序员，这样显然会导致不必要的开销。</p><p>那么我们来研究一下，为什么JSP页面能够在加载的时候执行Java代码呢？</p><p>首先我们将此项目打包，并在Tomcat服务端中运行，生成了一个文件夹并且可以正常访问。</p><p>我们现在看到<code>work</code>目录，我们发现这个里面多了一个<code>index_jsp.java</code>和<code>index_jsp.class</code>，那么这些东西是干嘛的呢，我们来反编译一下就啥都知道了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">index_jsp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">org</span>.apache.jasper.runtime.HttpJspBase  <span class="hljs-comment">//继承自HttpServlet</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">org</span>.apache.jasper.runtime.JspSourceDependent,<br>                 org.apache.jasper.runtime.JspSourceImports &#123;<br><br> ...<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspService</span><span class="hljs-params">(<span class="hljs-keyword">final</span> jakarta.servlet.http.HttpServletRequest request, <span class="hljs-keyword">final</span> jakarta.servlet.http.HttpServletResponse response)</span><br>      <span class="hljs-keyword">throws</span> java.io.IOException, jakarta.servlet.ServletException &#123;<br><br>    <span class="hljs-keyword">if</span> (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;<br>      <span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">String</span> <span class="hljs-variable">_jspx_method</span> <span class="hljs-operator">=</span> request.getMethod();<br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;OPTIONS&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;GET&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;POST&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;HEAD&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="hljs-string">&quot;JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> jakarta.servlet.jsp.PageContext pageContext;<br>    jakarta.servlet.http.<span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">final</span> jakarta.servlet.ServletContext application;<br>    <span class="hljs-keyword">final</span> jakarta.servlet.ServletConfig config;<br>    jakarta.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">Object</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>    jakarta.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">_jspx_out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    jakarta.servlet.jsp.<span class="hljs-type">PageContext</span> <span class="hljs-variable">_jspx_page_context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><br>    <span class="hljs-keyword">try</span> &#123;<br>      response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>      pageContext = _jspxFactory.getPageContext(<span class="hljs-built_in">this</span>, request, response,<br>             <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-literal">true</span>);<br>      _jspx_page_context = pageContext;<br>      application = pageContext.getServletContext();<br>      config = pageContext.getServletConfig();<br>      session = pageContext.getSession();<br>      out = pageContext.getOut();<br>      _jspx_out = out;<br><br>      out.write(<span class="hljs-string">&quot;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;html&gt;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;head&gt;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;    &lt;title&gt;JSP - Hello World&lt;/title&gt;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;/head&gt;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;body&gt;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;h1&gt;&quot;</span>);<br>      out.print( <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() );<br>      out.write(<span class="hljs-string">&quot;&lt;/h1&gt;\n&quot;</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;JSP页面被加载&quot;</span>);<br><br>      out.write(<span class="hljs-string">&quot;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;br/&gt;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;a href=\&quot;hello-servlet\&quot;&gt;Hello Servlet&lt;/a&gt;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;/body&gt;\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (java.lang.Throwable t) &#123;<br>      <span class="hljs-keyword">if</span> (!(t <span class="hljs-keyword">instanceof</span> jakarta.servlet.jsp.SkipPageException))&#123;<br>        out = _jspx_out;<br>        <span class="hljs-keyword">if</span> (out != <span class="hljs-literal">null</span> &amp;&amp; out.getBufferSize() != <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (response.isCommitted()) &#123;<br>              out.flush();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              out.clearBuffer();<br>            &#125;<br>          &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;&#125;<br>        <span class="hljs-keyword">if</span> (_jspx_page_context != <span class="hljs-literal">null</span>) _jspx_page_context.handlePageException(t);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(t);<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      _jspxFactory.releasePageContext(_jspx_page_context);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现，它是继承自<code>HttpJspBase</code>类，我们可以反编译一下jasper.jar（它在tomcat的lib目录中）来看看:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.jasper.runtime;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.ServletConfig;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletException;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> jakarta.servlet.jsp.HttpJspPage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> org.apache.jasper.compiler.Localizer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpJspBase</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpJspPage</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">HttpJspBase</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-built_in">super</span>.init(config);<br>        <span class="hljs-built_in">this</span>.jspInit();<br>        <span class="hljs-built_in">this</span>._jspInit();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Localizer.getMessage(<span class="hljs-string">&quot;jsp.engine.info&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;3.0&quot;</span>&#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.jspDestroy();<br>        <span class="hljs-built_in">this</span>._jspDestroy();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>._jspService(request, response);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jspInit</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspInit</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jspDestroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspDestroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspService</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="hljs-keyword">throws</span> ServletException, IOException;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上，Tomcat在加载JSP页面时，会将其动态转换为一个java类并编译为class进行加载，而生成的Java类，正是一个Servlet的子类，而页面的内容全部被编译为输出字符串，这便是JSP的加载原理，因此，JSP本质上依然是一个Servlet！</p><p><img src="https://s2.loli.net/2023/03/06/UGJBqvOTDeX5SuM.png" alt="image-20230306164106712"></p><hr><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1>]]></content>
    
    
    <summary type="html">Web—study about Spring(IOC,Di,AOP)</summary>
    
    
    
    <category term="Backend_development" scheme="https://alleyf.github.io/categories/Backend-development/"/>
    
    
    <category term="Spring" scheme="https://alleyf.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://alleyf.github.io/2023/10/55d044931cdb.html"/>
    <id>https://alleyf.github.io/2023/10/55d044931cdb.html</id>
    <published>2023-10-13T15:32:06.032Z</published>
    <updated>2023-10-20T04:04:12.114Z</updated>
    
    <content type="html"><![CDATA[<ol><li>[[#2023-10-15（项目例会）|2023-10-15（项目例会）]]</li><li>[[#2023-10-20（学术例会）|2023-10-20（学术例会）]]<ol><li>[[#2023-10-20（学术例会）#1. 知识图谱综述（张龙）|1. 知识图谱综述（张龙）]]<ol><li>[[#1. 知识图谱综述（张龙）#文章来源|文章来源]]</li><li>[[#1. 知识图谱综述（张龙）#阅读理由|阅读理由]]</li><li>[[#1. 知识图谱综述（张龙）#注意事项|注意事项]]</li><li>[[#1. 知识图谱综述（张龙）#主要研究方向|主要研究方向]]</li></ol></li><li>[[#2023-10-20（学术例会）#大模型数据集研究（何雨欣）|大模型数据集研究（何雨欣）]]</li><li>[[#2023-10-20（学术例会）#国自然科学基金|国自然科学基金]]</li></ol></li></ol><h2 id="2023-10-15（项目例会）"><a href="#2023-10-15（项目例会）" class="headerlink" title="2023-10-15（项目例会）"></a>2023-10-15（项目例会）</h2><ol><li>已学内容<ul><li>学习 Java 初级中级和高级知识点（多态，Lambda 表达式，反射，注解，JDBC，多线程等）</li><li>学习 Idea 和 Navicat 的使用（熟悉 Java 程序编写和数据库软件的常见操作）</li><li>了解国家自然科学基金面上项目研究内容（了解研究背景，研究内容，技术路线等）</li></ul></li><li>下周计划<ul><li>学习 Spring 相关知识点</li><li>阅读实验室研究方向相关学术综述论文</li></ul></li><li>思考感悟<ul><li>类对象非静态方法才存在多态，类方法（即静态方法）不存在多态（被子类重写叫隐藏）。</li><li>IO 中有很多输入输出流，包括字节流、字符流、缓存流、数据流和对象流等要注意区分。</li><li>泛型提高复用性，对类、方法等使用泛型可以提高泛化能力，减少重复逻辑实现。</li><li>Lambda 表达式即匿名方法，通过作用域函数型接口代替匿名类来简化代码，通常结合 Stream 流使用提高开发效率。</li><li>Stream 流是函数型接口的具体实践为集合类流水线的方式处理其中元素，首先将集合转换为 Stream 然后经过中间一系列筛选或转换，最后得到需要的结果。</li><li>多线程可以充分利用 CPU 进行多任务并行执行，但要注意线程安全，可以通过 Synchronized 和 Lock 锁实现同步效果，多线程开发中应当使用 Vector、HashTable 等线程安全的容器，内部已经实现了同步保证线程安全。</li><li>JDBC 是实现 Java 与数据库进行交互的方式，可以在 Java 中使用 SQL 语句完成数据库的相关操作，实现持久存储的特定任务。</li><li>反射通过获取唯一的类对象从而创建实例或者获取类的属性和方法并对其进行操作，可以通过反射解析获取到注解中的信息，基于此他们在 Spring 框架的原理实现当中发挥着重要作用</li></ul></li></ol><p>指导建议：</p><ol><li>idea 调试方法，lambda 调试方法</li><li>学习过程中做 Demo</li><li>学习 Spring 框架，核心是 IOC 和 AOP</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://zhuanlan.zhihu.com/p/75307407#二、有哪些图神经网络？<br>title: &quot;图神经网络（Graph Neural Networks，GNN）综述&quot;<br>description: &quot;本篇文章是我在2019年8月阅读完论文“ Wu, Zonghan , et al. &amp;#34;A Comprehensive Survey on Graph Neural Networks.&amp;#34; (2019).“”后的翻译与笔记，写下这篇文章后不久便意外地转换了研究方向，如今已不再研…&quot;<br>host: zhuanlan.zhihu.com<br>image: https://pic1.zhimg.com/v2-ca0a86e8f4730d6a07127b687ad1bf7a_720w.jpg?source=172ae18b<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/75307407#%E4%BA%8C%E3%80%81%E6%9C%89%E5%93%AA%E4%BA%9B%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9F">图神经网络（Graph Neural Networks，GNN）综述 - 知乎</a></p><h2 id="2023-10-20（学术例会）"><a href="#2023-10-20（学术例会）" class="headerlink" title="2023-10-20（学术例会）"></a>2023-10-20（学术例会）</h2><h3 id="1-知识图谱综述（张龙）"><a href="#1-知识图谱综述（张龙）" class="headerlink" title="1. 知识图谱综述（张龙）"></a>1. 知识图谱综述（张龙）</h3><h4 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源"></a>文章来源</h4><p>标题：<a href="https://arxiv.org/pdf/2002.00388.pdf">A Survey on Knowledge Graphs: Representation, Acquisition, and Applications</a><br>期刊：AAAI 2020<br>作者：Shaoxiong Ji, Shirui Pan, Erik Cambria, Pekka Marttinen, Philip S. Yu</p><h4 id="阅读理由"><a href="#阅读理由" class="headerlink" title="阅读理由"></a>阅读理由</h4><p>阅读该论文的理由，该论文有什么值得看的价值，可以获取到哪些有用的信息，我需要从中学习到的东西（<strong>创新点、研究方向、领域背景、方法论等</strong>）<br><strong>推荐理由</strong>：本文详细介绍了知识图谱表示学习、知识获取与完成、时间知识图谱、知识感知应用等方面的技术和未来的研究方向。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>梳理各个重点的作用，相互联系</li><li>绘制相应流程图</li><li>不需要详细阐述具体某个原理性知识，聚焦综述</li><li>多个参考文献则写在最后，并在文中引用<h4 id="主要研究方向"><a href="#主要研究方向" class="headerlink" title="主要研究方向"></a>主要研究方向</h4></li></ul><ol><li><p>知识获取<br>从非结构化文本和其他结构化或半结构化源中构建知识图谱</p><ol><li>知识图谱补全：用于扩展现有知识图谱<ul><li>基于嵌入的排序</li><li>关系路径推理</li><li>逻辑规则推理</li><li>元关系学习</li></ul></li><li>实体识别/获取/发现：用于从又本中友现面可头体的新知识。 <ul><li>实体识别</li><li>消除歧义</li><li>实体类型</li><li>实体对齐</li></ul></li><li>关系提取</li></ol></li><li><p>知识表示学习</p><ol><li>表示空间<ul><li>点态空间、流形、复向量空间、高斯分布和离散空间</li></ul></li><li>评分函数<ul><li>基于距离和相似性匹配的评分函数</li></ul></li><li>编码模型<ul><li>对事实的语义交互建立模型：线性/双线性模型、因子分解和神经网络</li></ul></li><li>嵌入辅助信息<ul><li>外部信息：文本、视觉和类型信息</li></ul></li></ol></li><li><p>时间知识图谱</p></li><li><p>知识感知应用</p></li></ol><h3 id="大模型数据集研究（何雨欣）"><a href="#大模型数据集研究（何雨欣）" class="headerlink" title="大模型数据集研究（何雨欣）"></a>大模型数据集研究（何雨欣）</h3><p>[[司法领域大模型调研一]]</p><ol><li>CIFA 数据集</li><li>复旦大学 DISC 数据集<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310201112594.png" alt="image.png"><blockquote><p>大模型数据集存在什么问题</p></blockquote></li></ol><h3 id="国自然科学基金"><a href="#国自然科学基金" class="headerlink" title="国自然科学基金"></a>国自然科学基金</h3><p>几个大部分（科学问题）</p><ol><li>知识图谱构建</li><li>双图谱融合协同增强</li><li>大模型与图谱双向促进</li></ol><blockquote><p>每个科学问题其中可以阐述一些应用。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;[[#2023-10-15（项目例会）|2023-10-15（项目例会）]]&lt;/li&gt;
&lt;li&gt;[[#2023-10-20（学术例会）|2023-10-20（学术例会）]]&lt;ol&gt;
&lt;li&gt;[[#2023-10-20（学术例会）#1. 知识图谱综述（张龙）|1.</summary>
      
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://alleyf.github.io/2023/10/e2861ffb109d.html"/>
    <id>https://alleyf.github.io/2023/10/e2861ffb109d.html</id>
    <published>2023-10-12T07:52:02.816Z</published>
    <updated>2023-10-15T03:36:34.698Z</updated>
    
    <content type="html"><![CDATA[<hr><p>创建者：<br>创建时间： <code>.action&#123;now | date &quot;2006-01-02&quot;&#125;</code>​<br>论文名称：<br>期刊/会议名：</p><hr><h2 id="第一遍阅读，略读（5-10分钟）"><a href="#第一遍阅读，略读（5-10分钟）" class="headerlink" title="第一遍阅读，略读（5-10分钟）"></a>第一遍阅读，略读（5-10分钟）</h2><ol><li><p>读<strong>title, abstract, and introduction</strong>，并做记录</p><p> 此处填写</p></li><li><p>读 <strong>section 和 sub-section ​</strong>开头, 但是忽略其他</p><p> 此处填写</p></li><li><p>读 conclusions</p><p> 此处填写</p></li><li><p>浏览参考文献，圈出已经读过的和没读的</p><p> 此处填写</p></li><li><p>粗略总结阅读的内容</p><ol><li>这个文章是什么类型。</li><li>和什么其他文章相关？理论基础？</li><li>假设是否有效？</li><li>主要贡献？</li><li>是否写的有条理？</li></ol></li></ol><p>‍</p><hr><h2 id="第二遍阅读，细读但不读细节（1小时）"><a href="#第二遍阅读，细读但不读细节（1小时）" class="headerlink" title="第二遍阅读，细读但不读细节（1小时）"></a>第二遍阅读，细读但不读细节（1小时）</h2><ol><li><p>关注图表和结论，判断是否有读的价值</p></li><li><p>了解背景，必要的话补充相关知识</p><p> 此处填写</p></li><li><p>阅读文章核心点，理解<strong>观点、假设、方法、实验、结论</strong></p><p> 此处填写</p></li></ol><p>‍</p><hr><h2 id="第三遍细致阅读，并尝试复现论文（长时间）"><a href="#第三遍细致阅读，并尝试复现论文（长时间）" class="headerlink" title="第三遍细致阅读，并尝试复现论文（长时间）"></a>第三遍细致阅读，并尝试复现论文（长时间）</h2><ol><li><p>理论部分推导</p><p> 此处填写</p></li><li><p>实验复现或代码复现</p><p> 此处填写</p></li><li><p>对文章进行最后总结并保存相关内容</p><p> 此处填写</p><p> 链接</p></li></ol><blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;创建者：&lt;br&gt;创建时间： &lt;code&gt;.action&amp;#123;now | date &amp;quot;2006-01-02&amp;quot;&amp;#125;&lt;/code&gt;​&lt;br&gt;论文名称：&lt;br&gt;期刊/会议名：&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第一遍阅读，略读（5-10分</summary>
      
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>后端开发学习</title>
    <link href="https://alleyf.github.io/2023/10/6cd2e75537d2.html"/>
    <id>https://alleyf.github.io/2023/10/6cd2e75537d2.html</id>
    <published>2023-10-08T05:29:26.000Z</published>
    <updated>2023-10-15T08:41:29.997Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://how2j.cn/">How2J 的 Java教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://how2j.cn/<br>title: &quot;How2J 的 Java教程&quot;<br>description: &quot;How2J的Java教程, 内容涵盖J2SE、WEB前端、J2EE、框架技术等全面的Java内容。 基于实例代码和视频讲解的学习方式为Java职业生涯打下坚实的基础&quot;<br>host: how2j.cn<br></code></pre></td></tr></table></figure><h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h2><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h3><p>从小到大自动转，从大到小强制转（精度丢失，值可能不正确）</p><blockquote><p>Java 中进行二元与运算类型的提升规则 </p><ol><li>整数运算： 如果两个操作数有一个为 long，则结果也为 long；没有 long 时，结果为 int。即使操作数全为 short、byte，结果也是 int。 </li><li>浮点运算： 如果两个操作数有一个为 double，则结果为 double；只有两个操作数都是 float，则结果才为 float。注意：int 与 float 运算，结果为 float。</li></ol></blockquote><h3 id="2-命名规则"><a href="#2-命名规则" class="headerlink" title="2. 命名规则"></a>2. 命名规则</h3><ul><li>变量命名只能使用<strong>字母数字 $ _</strong>  </li><li>变量第一个字符只能使用字母 $ _  </li><li>变量第一个字符不能使用数字，不能使用关键字  <blockquote><p>注：_ 是下划线，不是-减号或者—— 破折号</p></blockquote></li></ul><p>java 关键字：<br><img src="https://stepimagewm.how2j.cn/523.png" alt="|300"><br><img src="https://stepimagewm.how2j.cn/522.png" alt="|300"></p><h3 id="3-final-修饰词"><a href="#3-final-修饰词" class="headerlink" title="3. final 修饰词"></a>3. final 修饰词</h3><p>当形参被 final 修饰时不能对形参再次赋值，如果形参是对象可以改变内部的属性</p><ol><li>final 修饰类<ul><li>当 final 修饰类时，该类无法被继承</li></ul></li><li>final 修饰方法<ul><li>被 final 修饰的方法不能被重写</li></ul></li><li>final 修饰基本类型变量<ul><li>当一个变量被 final 修饰的时候，该变量只有一次赋值的机会</li></ul></li><li>final 修饰引用<ul><li>被 final 修饰的引用只能指向一次对象</li></ul></li><li>final 修饰常量<ul><li>常量值不变</li></ul></li></ol><ul><li></li></ul><h3 id="4-操作符-Scanner"><a href="#4-操作符-Scanner" class="headerlink" title="4. 操作符 Scanner"></a>4. 操作符 Scanner</h3><p>使用 Scanner 类，需要在最前面加上<br><code>import java.util.Scanner;</code></p><blockquote><p>如果在通过 <code>nextInt()</code> 读取了整数后，再接着读取字符串，读出来的是回车换行: <strong>“\r\n”</strong>, 因为 nextInt 仅仅读取数字信息，而不会读取回车换行”\r\n”.<br>    所以，如果在业务上需要读取了整数后，接着读取字符串，那么就应该**连续执行两次 nextLine ()**，第一次是取走回车换行，第二次才是读取真正的字符串</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> s.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;读取的整数是&quot;</span>+ i);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rn</span> <span class="hljs-operator">=</span> s.nextLine();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> s.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;读取的字符串是：&quot;</span>+a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h3><p>数组是一个<strong>固定长度</strong>，包含了<strong>相同类型数据</strong>的<strong>容器</strong><br><code>int[] a; 和 int a[]</code> 都声明了一个数组变量，仅仅声明并没有创建分配空间。<br>创建一个长度是 5 的数组，并且使用<strong>引用 a 指向该数组</strong>，a 是一个地址，占据 <strong>4</strong> 个字节<br><code>a = new int[5];</code><br>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String Arrays.toString(数组)                 将数组拼接成一个字符串<br><span class="hljs-type">int</span> Arrays.binarySearch(数组，查找的元素)            二分法查护元素<br><span class="hljs-type">int</span>[] Arrays.copyOf(原数组，新数组长度)              拷贝数组<br><span class="hljs-type">int</span>[]Arrays.copyOfRange(原数组，起始索引，结束索引)   拷贝数组（指定范围）<br><span class="hljs-keyword">void</span> Arrays.fill(数组，元素)                        使用同一元素填充数组<br><span class="hljs-keyword">void</span> Arrays.sort(数组)                              对数组进行排序，也可按照自己自定义的规则<br><span class="hljs-type">boolean</span> Arrays.equals(数组a，数组b)                  返回两个数组是否元素相等的结果<br></code></pre></td></tr></table></figure><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;  <br><span class="hljs-keyword">import</span> java.util.Comparator;  <br><span class="hljs-keyword">import</span> java.util.Random;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArray</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-comment">//声明一个引用  </span><br>        Integer[] a;  <br>        <span class="hljs-comment">//创建一个长度是5的数组，并且使用引用a指向该数组  </span><br>        a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">5</span>];  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;  <br>            a[i]= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">5</span>);  <br>        &#125;  <br>        Arrays.sort(a,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;()&#123;  <br>            <span class="hljs-meta">@Override</span>  <br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1,Integer o2)</span> &#123;  <br>                <span class="hljs-comment">// 降序  </span><br>                <span class="hljs-keyword">return</span> o2-o1;  <br>        &#125;&#125;);  <br>        System.out.println(Arrays.toString(a));  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]<br>分配空间，同时赋值<br>写法一： 分配空间同时赋值<br><code>int[] a = new int[]&#123;100,102,444,836,3236&#125;;</code></p><p>写法二： 省略了 new int[], 效果一样<br><code>int[] b = &#123;100,102,444,836,3236&#125;;</code></p></blockquote><p>数组排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySort</span> &#123;  <br>    <span class="hljs-type">int</span> [] a;  <br>    MySort(<span class="hljs-type">int</span> []array )&#123;  <br>        <span class="hljs-built_in">this</span>.a = array;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ChoseSort</span><span class="hljs-params">(<span class="hljs-type">int</span> [] array)</span>&#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; array.length; j++) &#123;  <br>                <span class="hljs-keyword">if</span> (array[i]&gt; array[j]) &#123;  <br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[i];  <br>                    array[i] = array[j];  <br>                    array[j] = temp;  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> [] array)</span>&#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length-<span class="hljs-number">1</span>-i; j++) &#123;  <br>                <span class="hljs-keyword">if</span> (array[j]&gt; array[j+<span class="hljs-number">1</span>]) &#123;  <br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[j];  <br>                    array[j] = array[j+<span class="hljs-number">1</span>];  <br>                    array[j+<span class="hljs-number">1</span>] = temp;  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">MySort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySort</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;);  <br>        sort.ChoseSort(sort.a);  <br>        sort.BubbleSort(sort.a);  <br>        System.out.println(Arrays.toString(sort.a));  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>增强型 for 循环遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> each : values) &#123;<br>    System.out.println (each);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化二维数组，</span><br>     <span class="hljs-type">int</span>[][] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]; <span class="hljs-comment">//有两个一维数组，每个一维数组的长度是3</span><br>     a[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">5</span>;  <span class="hljs-comment">//可以直接访问一维数组，因为已经分配了空间</span><br>     <span class="hljs-comment">//只分配了二维数组</span><br>     <span class="hljs-type">int</span>[][] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][]; <span class="hljs-comment">//有两个一维数组，每个一维数组的长度暂未分配</span><br>     b[<span class="hljs-number">0</span>]  =<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">//必须事先分配长度，才可以访问</span><br>     b[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">5</span>;<br>     <span class="hljs-comment">//指定内容的同时，分配空间</span><br>     <span class="hljs-type">int</span>[][] c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;<br>             &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;,<br>             &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,<br>             &#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>     &#125;;<br></code></pre></td></tr></table></figure><h3 id="6-类和对象"><a href="#6-类和对象" class="headerlink" title="6. 类和对象"></a>6. 类和对象</h3><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>引用的概念，如果一个变量的类型是类类型，而非基本类型，那么该变量又叫做引用。<br><code>Hero h = new Hero();</code><br><img src="https://stepimagewm.how2j.cn/618.png"></p><blockquote><p>引用 h 指向 Hero 对象<br><img src="https://stepimagewm.how2j.cn/617.png"><br>多个引用指向同一个对象<br><img src="https://stepimagewm.how2j.cn/619.png"><br>一个引用只能指向一个对象</p></blockquote><h3 id="7-包-package"><a href="#7-包-package" class="headerlink" title="7. 包 (package)"></a>7. 包 (package)</h3><ul><li>把比较接近的类，规划在同一个包下</li><li>在最开始的地方声明该类所处于的包名</li><li>使用同一个包下的其他类，直接使用即可  </li><li>但是要使用其他包下的类，必须 import<h3 id="8-访问修饰符"><a href="#8-访问修饰符" class="headerlink" title="8. 访问修饰符"></a>8. 访问修饰符</h3>成员变量有四种修饰符：<br><span style="background:rgba(240, 200, 0, 0.2)">1. private 私有的  </span><br><span style="background:rgba(240, 200, 0, 0.2)">2. package/friendly/default 不写  </span><br><span style="background:rgba(240, 200, 0, 0.2)">3. protected 受保护的  </span><br><span style="background:rgba(240, 200, 0, 0.2)">4. public 公共的</span><br><img src="https://stepimagewm.how2j.cn/604.png"><br><img src="https://stepimagewm.how2j.cn/610.png"><br><img src="https://stepimagewm.how2j.cn/611.png"><br><img src="https://stepimagewm.how2j.cn/612.png"><blockquote><p>[!NOTE]<br>那么什么情况该用什么修饰符呢？<br>从作用域来看，public 能够使用所有的情况。但是大家在工作的时候，又不会真正全部都使用 public, 那么到底什么情况该用什么修饰符呢？</p><ol><li>属性通常使用 private 封装起来</li><li>方法一般使用 public 用于被调用</li><li>会被子类继承的方法，通常使用 protected</li><li>package 用的不多，一般新手会用 package, 因为还不知道有修饰符这个东西</li></ol><p>再就是作用范围最小原则<br>简单说，能用 private 就用 private，不行就放大一级，用 package, 再不行就用 protected，最后用 public。这样就能把数据尽量的封装起来，没有必要露出来的，就不用露出来了</p></blockquote><h3 id="9-类属性（static-变量）"><a href="#9-类属性（static-变量）" class="headerlink" title="9. 类属性（static 变量）"></a>9. 类属性（static 变量）</h3></li></ul><ol><li>当一个属性被 <strong>static</strong> 修饰的时候，就叫做<strong>类属性</strong>，又叫做<strong>静态属性</strong>  </li><li>当一个属性被声明成类属性，那么<strong>所有的对象，都共享一个值</strong><br>访问方式：</li><li>对象. 类属性</li><li>类. 类属性<br>对象属性初始化：</li><li>声明该属性的时候初始化  </li><li>构造方法中初始化  </li><li>初始化块<br>静态属性初始化：</li><li>声明该属性的时候初始化  </li><li>静态初始化块<blockquote><p>初始化顺序：<font color="#ff0000">静态属性声明&gt;静态初始化块&gt;对象属性声明&gt;对象属性初始化块&gt;构造方法</font></p></blockquote><h3 id="10-类方法（static-方法）"><a href="#10-类方法（static-方法）" class="headerlink" title="10. 类方法（static 方法）"></a>10. 类方法（static 方法）</h3></li></ol><ul><li>类方法： 又叫做<strong>静态方法</strong></li><li>对象方法： 又叫<strong>实例方法</strong>，非静态方法  <blockquote><p>访问一个对象方法，必须建立在<strong>有一个对象的前提</strong>的基础上<br>访问类方法，不需要对象的存在，直接就访问<br>静态方法只能调用静态方法和静态属性，不能调用对象属性和方法</p></blockquote><h3 id="11-单例模式"><a href="#11-单例模式" class="headerlink" title="11. 单例模式"></a>11. 单例模式</h3>单例模式又叫做 Singleton 模式，指的是一个类，在一个 JVM 里，<strong>只有一个实例存在</strong>。</li></ul><p><em>单例模式的设计目的是确保一个类只有一个实例，并提供全局访问点以供其他对象使用。因此，在传统的单例模式中，不允许继承该类，因为继承会导致类的实例数量增多。</em></p><h4 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h4><p>单例模式的类应该只有一个示例，通过<strong>私有化其构造方法</strong>，使得外部无法通过 new 得到新的实例。<br>这种单例模式又叫做<em>饿汉式单例模式</em>，无论如何都会创建一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GiantDragon</span> &#123;<br>    <span class="hljs-comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">GiantDragon</span><span class="hljs-params">()</span>&#123;<br>&#125;<br><span class="hljs-comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">GiantDragon</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GiantDragon</span>();<br><span class="hljs-comment">//public static 方法，提供给调用者获取12行定义的对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GiantDragon <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h4><p><strong>懒汉式</strong>单例模式与<strong>饿汉式</strong>单例模式不同，只有在调用 getInstance 的时候，才会创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GiantDragon</span> &#123;<br>    <span class="hljs-comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">GiantDragon</span><span class="hljs-params">()</span>&#123;        <br>    &#125;<br>    <span class="hljs-comment">//准备一个类属性，用于指向一个实例化对象，但是暂时指向null</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> GiantDragon instance;<br>    <span class="hljs-comment">//public static 方法，返回实例对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GiantDragon <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>==instance)&#123;<br>    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GiantDragon</span>();<br>    &#125;<br>    <span class="hljs-comment">//返回 instance指向的对象</span><br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]<br><strong>什么时候使用饿汉式，什么时候使用懒汉式？</strong><br>饿汉式，是<strong>立即加载</strong>的方式，无论是否会用到这个对象，都会加载。<br>如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。</p><p>懒汉式，是<strong>延迟加载</strong>的方式，只有使用的时候才会加载。并且有线程安全的考量 (鉴于同学们学习的进度，暂时不对线程的章节做展开)。<br>使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。</p><p>看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式</p></blockquote><h4 id="单例模式的三要素"><a href="#单例模式的三要素" class="headerlink" title="单例模式的三要素"></a>单例模式的三要素</h4><p>什么是单例模式？</p><ol><li>构造方法私有化  </li><li>静态属性指向实例  </li><li>public static 的 getInstance 方法，返回第二步的静态属性<h3 id="12-枚举（enum）"><a href="#12-枚举（enum）" class="headerlink" title="12. 枚举（enum）"></a>12. 枚举（enum）</h3>枚举 enum 是一种特殊的类 (还是类)，使用枚举可以很方便的定义常量<br>eg：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season</span> &#123;<br>SPRING,SUMMER,AUTUMN,WINTER<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Season</span> <span class="hljs-variable">season</span> <span class="hljs-operator">=</span> Season.SPRING;<br><span class="hljs-keyword">switch</span> (season) &#123;<br><span class="hljs-keyword">case</span> SPRING:<br>System.out.println(<span class="hljs-string">&quot;春天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> SUMMER:<br>System.out.println(<span class="hljs-string">&quot;夏天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> AUTUMN:<br>System.out.println(<span class="hljs-string">&quot;秋天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WINTER:<br>System.out.println(<span class="hljs-string">&quot;冬天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>借助增强型 for 循环，可以很方便的遍历一个枚举都有哪些常量：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span> (Season s : Season.values()) &#123;<br>System.out.println(s);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="13-接口与继承"><a href="#13-接口与继承" class="headerlink" title="13. 接口与继承"></a>13. 接口与继承</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口就像是一种约定，对类进行约束规范，便于顶层设计规范化<br>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Healer</span> &#123;  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">heal</span><span class="hljs-params">(<span class="hljs-type">int</span> healAmount)</span>;  <br>&#125;<br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Support</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Healer</span> &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heal</span><span class="hljs-params">(<span class="hljs-type">int</span> healAmount)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setHp(<span class="hljs-built_in">this</span>.getHp() + healAmount);  <br>        System.out.println(<span class="hljs-string">&quot;当前英雄的血量为&quot;</span> + <span class="hljs-built_in">this</span>.getHp() + <span class="hljs-string">&quot;点&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h4><h5 id="子类转父类（向上转型）"><a href="#子类转父类（向上转型）" class="headerlink" title="子类转父类（向上转型）"></a>子类转父类（向上转型）</h5><p>引用类型和对象类型不一致时，需要进行类型转换，类型转换有时候会成功，有时候会失败。<br><em>转换是否成功判别方法：<strong>把右边的当做左边来用，看是否能说通</strong></em></p><blockquote><p>子类向父类转型（向上转型）一般都是可以的，父类引用指向子类对象<br><img src="https://stepimagewm.how2j.cn/624.png"></p></blockquote><h5 id="父类转子类-向下转型"><a href="#父类转子类-向下转型" class="headerlink" title="父类转子类 (向下转型)"></a>父类转子类 (向下转型)</h5><p>父类转子类，有的时候行，有的时候不行，所以必须进行<strong>强制转换</strong>。强制转换的意思就是转换有风险，风险自担。<br>转换总结：<br><img src="https://stepimagewm.how2j.cn/625.png"></p><blockquote><p>10 行： 把 ad 当做 Hero 使用，一定可以，转换之后，h 引用指向一个 ad 对象<br>11 行： h 引用有可能指向一个 ad 对象，也有可能指向一个 support 对象，所以把 h 引用转换成 AD 类型的时候，就有可能成功，有可能失败，因此要进行强制转换，换句话说转换后果自负，到底能不能转换成功，要看引用 h 到底指向的是哪种对象<br>在这个例子里，<strong>h 指向的是一个 ad 对象</strong>，所以转换成 ADHero 类型，是可以的<br>12 行：把一个 support 对象当做 Hero 使用，一定可以，转换之后，<strong>h 引用指向一个 support 对象</strong><br>13 行：这个时候，h 指向的是一个 <strong>support</strong> 对象，所以转换成 <strong>ADHero</strong> 类型，会失败。失败的表现形式是抛出异常 ClassCastException 类型转换异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">import</span> charactor1.Support;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-type">Support</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Support</span>();<br>        h = ad;<br>        ad = (ADHero) h;<br>        h = s;<br>        ad = (ADHero)h;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]<br><img src="https://stepimagewm.how2j.cn/626.png"><br><strong>没有继承关系</strong>的两个类，互相转换一定会失败，抛出异常</p></blockquote><h5 id="实现类转换成接口-向上转型"><a href="#实现类转换成接口-向上转型" class="headerlink" title="实现类转换成接口 (向上转型)"></a>实现类转换成接口 (向上转型)</h5><p>类似于子类转父类，一样可行。<br><img src="https://stepimagewm.how2j.cn/627.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-type">AD</span> <span class="hljs-variable">adi</span> <span class="hljs-operator">=</span> ad;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="接口转换成实现类-向下转型"><a href="#接口转换成实现类-向下转型" class="headerlink" title="接口转换成实现类 (向下转型)"></a>接口转换成实现类 (向下转型)</h5><p><img src="https://stepimagewm.how2j.cn/628.png"></p><blockquote><p>7 行： ad 引用指向 ADHero，而 adi 引用是接口类型：AD，实现类转换为接口，是向上转型，所以无需强制转换，并且一定能成功<br>8 行: <strong>adi</strong> 实际上是<strong>指向</strong>一个 <strong>ADHero</strong> 的，所以能够转换成功<br>9 行： adi 引用所指向的对象是一个 ADHero，要转换为 ADAPHero 就会失败。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-type">AD</span> <span class="hljs-variable">adi</span> <span class="hljs-operator">=</span> ad;<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">adHero</span> <span class="hljs-operator">=</span> (ADHero) adi;<br>        <span class="hljs-type">ADAPHero</span> <span class="hljs-variable">adapHero</span> <span class="hljs-operator">=</span> (ADAPHero) adi;<br>        adapHero.magicAttack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h5><p><code>a instanceof className</code> 判断一个引用所指向的对象，是否是类的对象，或者子类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-type">APHero</span> <span class="hljs-variable">ap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APHero</span>();<br>        Hero h1= ad;<br>        Hero h2= ap;<br>        <span class="hljs-comment">//判断引用h1指向的对象，是否是ADHero类型</span><br>        System.out.println(h1 <span class="hljs-keyword">instanceof</span> ADHero);<br>        <span class="hljs-comment">//判断引用h2指向的对象，是否是APHero类型</span><br>        System.out.println(h2 <span class="hljs-keyword">instanceof</span> APHero);<br>        <span class="hljs-comment">//判断引用h1指向的对象，是否是Hero的子类型</span><br>        System.out.println(h1 <span class="hljs-keyword">instanceof</span> Hero);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>子类可以继承父类的对象方法，在继承后，重复提供该方法，就叫做方法的重写，又叫覆盖 override</p><blockquote><p>调用子类的方法首先调用重写的方法，如果没有再调用父类方法。</p></blockquote><hr><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>操作符的多态  </p><ul><li>可以作为算数运算，也可以作为字符串连接<br>类的多态</li></ul><ul><li>父类引用指向子类对象</li></ul><hr><h5 id="操作符多态"><a href="#操作符多态" class="headerlink" title="操作符多态"></a>操作符多态</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i+j; <span class="hljs-comment">//如果+号两侧都是整型，那么+代表 数字相加</span><br>    System.out.println(k);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a+b; <span class="hljs-comment">//如果+号两侧，任意一个是字符串，那么+代表字符串连接</span><br>    System.out.println(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="类多态"><a href="#类多态" class="headerlink" title="类多态"></a>类多态</h5><p>父类引用指向子类，调用父类引用被重写的方法，优先执行指向的子类的重写方法，即同类型调用同一方法，呈现不同的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> property;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br>String name;<br><span class="hljs-type">int</span> price;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;购买&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">effect</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;物品使用后，可以有效果 &quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Item i1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">LifePotion</span>();<br><span class="hljs-type">Item</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MagicPotion</span>();<br>System.out.print(<span class="hljs-string">&quot;i1是Item类型，执行effect打印:&quot;</span>);<br>i1.effect();<br>System.out.print(<span class="hljs-string">&quot;i2也是Item类型，执行effect打印:&quot;</span>);<br>i2.effect();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] <strong>类的多态条件</strong></p><ol><li>父类（接口）引用指向子类对象  </li><li>调用重写的方法</li></ol></blockquote><h5 id="使用类多态-VS-不使用类多态"><a href="#使用类多态-VS-不使用类多态" class="headerlink" title="使用类多态 VS 不使用类多态"></a>使用类多态 VS 不使用类多态</h5><p>不使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">import</span> property.LifePotion;<br><span class="hljs-keyword">import</span> property.MagicPotion;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useLifePotion</span><span class="hljs-params">(LifePotion lp)</span>&#123;<br>    lp.effect();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useMagicPotion</span><span class="hljs-params">(MagicPotion mp)</span>&#123;<br>    mp.effect();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">garen</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br>        garen.name = <span class="hljs-string">&quot;盖伦&quot;</span>;<br>    <span class="hljs-type">LifePotion</span> <span class="hljs-variable">lp</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">LifePotion</span>();<br>    <span class="hljs-type">MagicPotion</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MagicPotion</span>();<br>    garen.useLifePotion(lp);<br>    garen.useMagicPotion(mp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">import</span> property.Item;<br><span class="hljs-keyword">import</span> property.LifePotion;<br><span class="hljs-keyword">import</span> property.MagicPotion;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useItem</span><span class="hljs-params">(Item i)</span>&#123;<br>    i.effect();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">garen</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br>        garen.name = <span class="hljs-string">&quot;盖伦&quot;</span>;<br>    <span class="hljs-type">LifePotion</span> <span class="hljs-variable">lp</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">LifePotion</span>();<br>    <span class="hljs-type">MagicPotion</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MagicPotion</span>();<br>    garen.useItem(lp);<br>    garen.useItem(mp);    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由此可知，使用类多态可以简化设计，减少冗余的相同逻辑方法的设计实现，提高开发效率。</p></blockquote><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><ul><li>immortal 是不朽的，不死的意思</li><li>mortal 就是终有一死的，凡人的意思<blockquote><ol><li>设计一个接口<br>接口叫做 Mortal, 其中有一个方法叫做 die</li><li>实现接口<br>分别让 ADHero, APHero, ADAPHero 这三个类，实现 Mortal 接口，不同的类实现 die 方法的时候，都打印出不一样的字符串</li><li>为 Hero 类，添加一个方法, 在这个方法中调用 m 的 die 方法。<br>public void kill (Mortal m)</li><li>在主方法中<br>首先实例化出一个 Hero 对象: 盖伦<br>然后实例化出 3 个对象，分别是 ADHero, APHero, ADAPHero 的实例<br>然后让盖伦 kill 这 3 个对象</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Hero</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> hp;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> armor;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">garLen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();  <br>        garLen.setName(<span class="hljs-string">&quot;Garlen&quot;</span>);  <br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">adHero</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();  <br>        adHero.setName(<span class="hljs-string">&quot;ADHero&quot;</span>);  <br>        <span class="hljs-type">APHero</span> <span class="hljs-variable">apHero</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APHero</span>();  <br>        apHero.setName(<span class="hljs-string">&quot;APHero&quot;</span>);  <br>        <span class="hljs-type">ADAPHero</span> <span class="hljs-variable">adapHero</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADAPHero</span>();  <br>        adapHero.setName(<span class="hljs-string">&quot;ADAPHero&quot;</span>);  <br>        garLen.kill(adHero, apHero, adapHero);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">kill</span><span class="hljs-params">(Mortal... ms)</span> &#123;  <br>        <span class="hljs-keyword">for</span> (Mortal m : ms) &#123;  <br>            m.die();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getHp</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> hp;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHp</span><span class="hljs-params">(<span class="hljs-type">float</span> hp)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.hp = hp;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getArmor</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> armor;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArmor</span><span class="hljs-params">(<span class="hljs-type">int</span> armor)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.armor = armor;  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">//Mortal</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mortal</span> &#123;  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span>;  <br>&#125;<br><span class="hljs-comment">//ADHero</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ADHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AD</span>, Mortal &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">physicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;ADHero 物理攻击&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;阵亡&quot;</span>);  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">//APHero</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">APHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AP</span>, Mortal &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">magicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;AP Hero magic attack!&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;阵亡&quot;</span>);  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">//ADAPHero</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ADAPHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AD</span>, AP, Mortal &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">physicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;进行物理攻击&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">magicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;进行魔法攻击&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;阵亡&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h4 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h4><p>与<strong>重写</strong>类似，方法的重写是<strong>子类覆盖父类</strong>的<strong>对象方法</strong>，<strong>隐藏</strong>，就是<strong>子类覆盖父类</strong>的<strong>类方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> hp;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> armor;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">battle</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;Hero battleWin&quot;</span>);  <br>    &#125; <br>&#125;<br><span class="hljs-comment">//子类隐藏父类的类方法</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ADHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AD</span>, Mortal &#123;  <br>    <span class="hljs-comment">//隐藏父类的battleWin方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">battle</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;ad hero battle win&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Hero.battle();  <br>        ADHero.battle();  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">physicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;ADHero 物理攻击&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;阵亡&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 父类引用指向子类调用隐藏方法（<strong>类方法不存在多态</strong>）？<br>在 Java 中，对于类方法（静态方法），编译时会根据引用类型（即变量类型）来决定调用的方法。实际上，类方法并不具有多态性，也不会被子类的重写所影响。由于 h 是父类类型的引用，即使它指向一个子类对象（ADHero），编译器仍然会<strong>根据引用类型</strong>（Hero）来<strong>决定调用的方法</strong>。</p></blockquote><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>实例化子类对象时，其父类的构造方法也会被调用，并且是<strong>父类构造方法先调用</strong>，子类构造方法会<strong>默认调用父类的无参的构造方法</strong><br>（1）使用关键字 super <strong>显式调用父类带参的构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ADHero</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        System.out.println(<span class="hljs-string">&quot;AD Hero的构造方法&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>（2）通过 super 调用父类属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMoveSpeed2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.moveSpeed;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）通过 super 调用父类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重写useItem，并在其中调用父类的userItem方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useItem</span><span class="hljs-params">(Item i)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;adhero use item&quot;</span>);<br><span class="hljs-built_in">super</span>.useItem(i);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="Object-超类"><a href="#Object-超类" class="headerlink" title="Object 超类"></a>Object 超类</h4><p>Object 类是所有类的父类，即基类，声明一个类的时候，默认是继承了 Object</p><ol><li>Object 类提供一个 <strong>toString 方法</strong>，所以所有的类都有 toString 方法<br>toString ()的意思是返回当前对象的<strong>字符串表达</strong></li><li>当一个对象<strong>没有任何引用指向它</strong>的时候，它就满足垃圾回收的条件，当它被垃圾回收的时候，它的 <strong>finalize ()</strong> 方法就会被调用。finalize () 不是开发人员主动调用的方法，而是由虚拟机 JVM 调用的。</li><li><strong>equals ()</strong> 用于判断两个对象的内容是否相同，假设，当两个英雄的 hp 相同的时候，我们就认为这两个英雄相同</li><li><code>==</code> 这不是 Object 的方法，但是用于判断两个对象是否相同，更准确的讲，用于判断两个引用，是否指向了同一个对象</li><li><strong>hashCode 方法</strong>返回一个对象的<strong>哈希值</strong>，但是在了解哈希值的意义之前，讲解这个方法没有意义。</li><li>Object 还提供<strong>线程同步</strong>相关方法：<strong>wait ()，notify ()，notifyAll ()</strong></li><li>getClass ()会返回一个对象的类对象，属于<strong>反射</strong>原理。</li></ol><hr><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>在类中声明一个方法，这个方法<strong>没有方法体</strong>，是一个“空”方法，这样的方法就叫<strong>抽象方法</strong>，使用修饰符“<strong>abstract</strong>“，当一个类有抽象方法的时候，该类必须被声明为<strong>抽象类</strong>，不能被实例化。<br>抽象类可以没有抽象方法，也可以有具体方法</p><blockquote><p>[!NOTE] 抽象类和接口的区别</p><ol><li>区别 1：  </li></ol><ul><li>子类<strong>只能继承一个抽象类</strong>，不能继承多个  </li><li>子类<strong>可以实现多个接口</strong></li></ul><ol start="2"><li>区别 2：  </li></ol><ul><li>抽象类可以定义 public, protected, package, private 静态和非静态属性，final 和非 final 属性  </li><li>但是接口中声明的属性，只能是 public 静态 final 的，即便没有显式的声明<br>注: <strong>抽象类和接口都可以有实体方法</strong>。 <strong>接口</strong>中的实体方法，叫做<strong>默认方法</strong></li></ul></blockquote><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>分类：</p><ul><li>非静态内部类  </li><li>静态内部类  </li><li>匿名类  </li><li>本地类<h5 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h5>非静态内部类可以直接在一个类里面定义，当外部类对象存在时内部类才有意义。<br>语法: <code>new 外部类().new 内部类()</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 姓名</span><br><span class="hljs-type">float</span> hp; <span class="hljs-comment">// 血量</span><br><span class="hljs-type">float</span> armor; <span class="hljs-comment">// 护甲</span><br><span class="hljs-type">int</span> moveSpeed; <span class="hljs-comment">// 移动速度</span><br><span class="hljs-comment">// 非静态内部类，只有一个外部类对象存在的时候，才有意义</span><br><span class="hljs-comment">// 战斗成绩只有在一个英雄对象存在的时候才有意义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BattleScore</span> &#123;<br><span class="hljs-type">int</span> kill;<br><span class="hljs-type">int</span> die;<br><span class="hljs-type">int</span> assit;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">legendary</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (kill &gt;= <span class="hljs-number">8</span>)<br>System.out.println(name + <span class="hljs-string">&quot;超神！&quot;</span>);<br><span class="hljs-keyword">else</span><br>System.out.println(name + <span class="hljs-string">&quot;尚未超神！&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Hero</span> <span class="hljs-variable">garen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br>garen.name = <span class="hljs-string">&quot;盖伦&quot;</span>;<br><span class="hljs-comment">// 实例化内部类</span><br><span class="hljs-comment">// BattleScore对象只有在一个英雄对象存在的时候才有意义</span><br><span class="hljs-comment">// 所以其实例化必须建立在一个外部类对象的基础之上</span><br><span class="hljs-type">BattleScore</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> garen.<span class="hljs-keyword">new</span> <span class="hljs-title class_">BattleScore</span>();<br>score.kill = <span class="hljs-number">9</span>;<br>score.legendary();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5>与<strong>非静态内部类</strong>不同，静态内部类水晶类的实例化<strong>不需要一个外部类的实例为基础</strong>，可以<strong>直接实例化</strong><br>语法：<code>new 外部类.静态内部类()</code>;<br>因为没有一个外部类的实例，所以在<strong>静态内部类里面不可以访问外部类的实例属性和方法</strong>，除了可以访问外部类的<strong>私有静态成员</strong>外，静态内部类和普通类没什么大的区别<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp; <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">battleWin</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;battle win&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//敌方的水晶</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnemyCrystal</span>&#123;<br>    <span class="hljs-type">int</span> hp=<span class="hljs-number">5000</span>;<br>    <span class="hljs-comment">//如果水晶的血量为0，则宣布胜利</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkIfVictory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(hp==<span class="hljs-number">0</span>)&#123;<br>    Hero.battleWin();<br>    <span class="hljs-comment">//静态内部类不能直接访问外部类的对象属性</span><br>    System.out.println(name + <span class="hljs-string">&quot; win this game&quot;</span>);<br>    &#125;<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//实例化静态内部类</span><br>    Hero.<span class="hljs-type">EnemyCrystal</span> <span class="hljs-variable">crystal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>.EnemyCrystal();<br>    crystal.checkIfVictory();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h5>匿名类指的是在<strong>声明一个类的同时实例化它</strong>，使代码更加简洁精练<br>通常情况下，要使用一个接口或者抽象类，都必须创建一个子类<br>有的时候，为了快速使用，<strong>直接实例化一个抽象类，并“当场”实现其抽象方法</strong>。<br>既然实现了抽象方法，那么就是一个新的类，只是这个类，没有命名。这样的类，叫做<strong>匿名类</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">float</span> hp; <span class="hljs-comment">//血量</span><br>    <span class="hljs-type">float</span> armor; <span class="hljs-comment">//护甲</span><br>    <span class="hljs-type">int</span> moveSpeed; <span class="hljs-comment">//移动速度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ADHero adh=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-comment">//通过打印adh，可以看到adh这个对象属于ADHero类</span><br>        adh.attack();<br>        System.out.println(adh);<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>()&#123;<br>            <span class="hljs-comment">//当场实现attack方法</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;新的进攻手段&quot;</span>);<br>            &#125;<br>        &#125;;<br>        h.attack();<br>        <span class="hljs-comment">//通过打印h，可以看到h这个对象属于Hero$1这么一个系统自动分配的类名</span><br>        System.out.println(h);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>在匿名类中使用外部的局部变量，外部的局部变量必须修饰为 final，否则报错（jdk 8 中不需要强制用 final 修饰，因为编译器会自动加上）</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//在匿名类中使用外部的局部变量，外部的局部变量必须修饰为final</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">damage</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span> &#123;<br>                System.out.printf(<span class="hljs-string">&quot;新的进攻手段，造成%d点伤害&quot;</span>,damage );<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="本地类"><a href="#本地类" class="headerlink" title="本地类"></a>本地类</h5>本地类可以理解为有名字的匿名类  </li></ul><p><strong>内部类与匿名类</strong>不一样的是，<strong>内部类必须声明在成员的位置</strong>，即与属性和方法平等的位置。本地类和匿名类一样，<strong>直接声明在代码块里面</strong>，可以是主方法，for 循环里等等地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">float</span> hp; <span class="hljs-comment">//血量</span><br>    <span class="hljs-type">float</span> armor; <span class="hljs-comment">//护甲</span><br>    <span class="hljs-type">int</span> moveSpeed; <span class="hljs-comment">//移动速度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//与匿名类的区别在于，本地类有了自定义的类名</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span> &#123;<br>                System.out.println( name+ <span class="hljs-string">&quot; 新的进攻手段&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">SomeHero</span> <span class="hljs-variable">h</span>  <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">SomeHero</span>();<br>        h.name =<span class="hljs-string">&quot;地卜师&quot;</span>;<br>        h.attack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><p>jdk 8 新特性，指接口也可以提供具体方法，不单单只能提供抽象方法<br>Mortal 这个接口，增加了一个默认方法 revive，这个方法有实现体，并且必须被声明为 <strong>default</strong>，实现接口功能扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mortal</span> &#123;  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span>;  <br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">revive</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;我又回来啦&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p>UML-Unified Module Language 统一建模语言，可以很方便的用于描述类的属性，方法，以及类和类之间的关系。<br><img src="https://stepimagewm.how2j.cn/2305.png"><br><img src="https://stepimagewm.how2j.cn/2318.png"><br><img src="https://stepimagewm.how2j.cn/2319.png"></p><blockquote><p>带箭头的实线，表示 Spider，Cat, Fish 都继承于 Animal 这个父类.<br><img src="https://stepimagewm.how2j.cn/2320.png"><br>表示 Fish 实现了 Pet 这个接口<br><img src="https://stepimagewm.how2j.cn/2321.png"> </p></blockquote><h3 id="数字与字符串"><a href="#数字与字符串" class="headerlink" title="数字与字符串"></a>数字与字符串</h3><h4 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h4><p>数字封装类有<br><strong>Byte, Short, Integer, Long, Float, Double</strong><br>这些类都是抽象类<strong>Number</strong>的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本类型转换成封装类型</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span> (i);<br>        <span class="hljs-comment">//封装类型转换成基本类型</span><br>        <span class="hljs-type">int</span> i <span class="hljs-number">2</span> = it.intValue ();<br></code></pre></td></tr></table></figure><ol><li>自动装箱：<ul><li>不需要调用构造方法，通过 <code>=</code> 符号自动把基本类型转换为类类型就叫装箱</li><li><code>int i = 5;//自动转换就叫装箱 Integer it 2 = i;</code></li></ul></li><li>自动拆箱<ul><li>不需要调用 Integer 的 intValue 方法，通过=就自动转换成 int 类型，就叫拆箱</li><li><code> int i = 5; Integer it = new Integer (i);//封装类型转换成基本类型 int i 2 = it. intValue ();//自动转换就叫拆箱 int i 3 = it;</code></li></ul></li></ol><ul><li>int 的最大值可以通过其对应的封装类 <strong>Integer. MAX_VALUE</strong> 获取</li><li>int 的最小值可以通过其对应的封装类 <strong>Integer. MIN_VALUE</strong> 获取<h4 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h4><h5 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h5></li></ul><ol><li>方法 1： 使用 String 类的静态方法 <strong>valueOf</strong>  </li><li>方法 2： 先把基本类型装箱为对象，然后调用对象的<strong>toString</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> NumberString;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumToStr</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;  <br><span class="hljs-comment">//        方法 1  </span><br>        String s <span class="hljs-number">1</span> = String.valueOf (i);  <br><span class="hljs-comment">//        方法 2  </span><br>        Integer i <span class="hljs-number">1</span> = i;  <br>        String s <span class="hljs-number">2</span> = i <span class="hljs-number">1.</span>toString ();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h5>调用 Integer 的<strong>静态方法 parseInt</strong><br><code>int i 3 = Integer.parseInt (s 1);</code><h4 id="数学-Math-包"><a href="#数学-Math-包" class="headerlink" title="数学 Math 包"></a>数学 Math 包</h4>java. lang. Math 提供了一些常用的数学运算方法，并且都是以静态方法的形式存在</li></ol><p><strong>四舍五入, 随机数，开方，次方，π，自然常数：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUse</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">float</span> f <span class="hljs-number">1</span> = <span class="hljs-number">3.4</span> f;  <br>        <span class="hljs-type">float</span> f <span class="hljs-number">2</span> = <span class="hljs-number">3.5</span> f;  <br>        System.out.printf (<span class="hljs-string">&quot;%d, %d&quot;</span>, Math.round (f <span class="hljs-number">1</span>), Math.round (f <span class="hljs-number">2</span>));  <br>        <span class="hljs-comment">//得到一个 0-1 之间的随机浮点数（取不到 1）  </span><br>        System.out.println (Math.random ());  <br>        <span class="hljs-comment">//得到一个 0-10 之间的随机整数 （取不到 10）  </span><br>        System.out.println ((<span class="hljs-type">int</span>) (Math.random () * <span class="hljs-number">10</span>));  <br>        <span class="hljs-comment">//开方  </span><br>        System.out.println (Math.sqrt (<span class="hljs-number">9</span>));  <br>        <span class="hljs-comment">//次方（2 的 4 次方）  </span><br>        System.out.println (Math.pow (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>));  <br>        <span class="hljs-comment">//π  </span><br>        System.out.println (Math. PI);  <br>        <span class="hljs-comment">//自然常数  </span><br>        System.out.println (Math. E);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>如果不使用格式化输出，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐<br>使用格式化输出，就可以简洁明了  </p><ul><li>%s 表示字符串  </li><li>%d 表示数字  </li><li>%n 表示换行<br>printf 和 format 格式化输出效果一样，printf 中调用了 format<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用格式化输出  </span><br><span class="hljs-comment">//%s 表示字符串，%d 表示数字,%n 表示换行  </span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;亚瑟&quot;</span>;  <br><span class="hljs-type">String</span> <span class="hljs-variable">sentenceFormat</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n&quot;</span>;  <br><span class="hljs-type">int</span> <span class="hljs-variable">kill</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <br><span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;超神&quot;</span>;  <br>System. out. printf (sentenceFormat, name, kill, title);<br>System. out. format (sentenceFormat, name, kill, title);<br></code></pre></td></tr></table></figure></li><li><strong>换行符</strong>就是<strong>另起一行</strong> — ‘\n’ 换行（newline）  </li><li><strong>回车符</strong>就是<strong>回到一行的开头</strong> — ‘\r’ 回车（return）<h4 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h4>immutable 是指不可改变的, 比如创建了一个字符串对象, String garen =”盖伦”;</li></ul><p><strong>不可改变</strong>的具体含义是指：</p><ul><li>不能增加长度</li><li>不能减少长度</li><li>不能插入字符</li><li>不能删除字符</li><li>不能修改字符<br>一旦创建好这个字符串，里面的内容永远不能改变, String 的表现就像是一个<strong>常量</strong><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">简介</th><th></th></tr></thead><tbody><tr><td align="center">charAt</td><td align="center">获取字符</td><td></td></tr><tr><td align="center">toCharArray</td><td align="center">获取对应的字符数组</td><td></td></tr><tr><td align="center">subString</td><td align="center">截取子字符串</td><td></td></tr><tr><td align="center">split</td><td align="center">分隔</td><td></td></tr><tr><td align="center">trim</td><td align="center">去掉首尾空格</td><td></td></tr><tr><td align="center">toLowerCase  <br>toUpperCase</td><td align="center">大小写</td><td></td></tr><tr><td align="center">indexOf  <br>lastIndexOf  <br>contains</td><td align="center">定位</td><td></td></tr><tr><td align="center">replaceAll  <br>replaceFirst</td><td align="center">替换</td><td></td></tr></tbody></table><h4 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h4></li></ul><ol><li>是否是同一个对象<br><code>==</code> 用于用于判断两个字符串对象是否相同（不是内容是否相同）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String str <span class="hljs-number">1</span> = <span class="hljs-string">&quot;the light&quot;</span>;<br>        String str <span class="hljs-number">2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (str <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//==用于判断是否是同一个字符串对象</span><br>        System. out. println ( str <span class="hljs-number">1</span>  ==  str <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure>特例：str 3 与 str 1 内容完全一样，复用之前的对象并未创建新 String 对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String str <span class="hljs-number">1</span> = <span class="hljs-string">&quot;the light&quot;</span>;<br>      String str <span class="hljs-number">3</span> = <span class="hljs-string">&quot;the light&quot;</span>;<br>      System. out. println ( str <span class="hljs-number">1</span>  ==  str <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure></li><li>是否内容相同<br>使用 <strong>equals</strong> 进行字符串内容的比较，必须大小写一致  </li></ol><p><strong>equalsIgnoreCase</strong>，忽略大小写判断内容是否一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System. out. println (str <span class="hljs-number">1.</span> equals (str <span class="hljs-number">3</span>));<span class="hljs-comment">//大小写不一样，返回 false</span><br>      System. out. println (str <span class="hljs-number">1.</span> equalsIgnoreCase (str <span class="hljs-number">3</span>));<span class="hljs-comment">//忽略大小写的比较，返回 true</span><br></code></pre></td></tr></table></figure><ol start="3"><li>是否以子字符串开始或者结束</li></ol><p><strong>startsWith</strong> //以… 开始，<strong>endsWith</strong> //以… 结束</p><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p>StringBuffer 是<strong>可变长</strong>的字符串<br>| 关键字                       | 描述                |     |<br>| —————————- | ——————- | — |<br>| append delete insert reverse | 追加删除插入反转 |     |<br>| length capacity              | 长度容量            |     |</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> NumberString;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStringBuffer</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        String str <span class="hljs-number">1</span> = <span class="hljs-string">&quot;let there &quot;</span>;  <br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span> (str <span class="hljs-number">1</span>); <span class="hljs-comment">//根据 str 1 创建一个 StringBuffer 对象  </span><br>        sb. append (<span class="hljs-string">&quot;be light&quot;</span>); <span class="hljs-comment">//在最后追加  </span><br>        System. out. println (sb);  <br>        sb. delete (<span class="hljs-number">4</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//删除 4-10 之间的字符  </span><br>        System. out. println (sb);  <br>        sb. insert (<span class="hljs-number">4</span>, <span class="hljs-string">&quot;there &quot;</span>);<span class="hljs-comment">//在 4 这个位置插入 there  </span><br>        System. out. println (sb);  <br>        sb. reverse (); <span class="hljs-comment">//反转  </span><br>        System. out. println (sb);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>StringBuffer 性能明显优于<strong>字符串拼接</strong></p></blockquote><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>时间原点概念：</p><blockquote><p>所有的数据类型，无论是整数，布尔，浮点数还是字符串，最后都需要以数字的形式表现出来。<br>日期类型也不例外，换句话说，一个日期，比如 2020 年 10 月 1 日，在计算机里，会用一个数字来代替。<br>那么最特殊的一个数字，就是零. 零这个数字，就代表 Java 中的时间原点，其对应的日期是 1970 年 1 月 1 日 8 点 0 分 0 秒。 (为什么是 8 点，因为中国的太平洋时区是 UTC-8，刚好和格林威治时间差 8 个小时)<br>为什么对应 1970 年呢？ 因为 1969 年发布了第一个 UNIX 版本：AT&amp;T，综合考虑，当时就把 1970 年当做了时间原点。<br>所有的日期，都是以为这个 0 点为基准，每过一毫秒，就+1。</p></blockquote><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><h5 id="创建日期对象"><a href="#创建日期对象" class="headerlink" title="创建日期对象"></a>创建日期对象</h5><p><code>import java. util. Date</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java. util. Date;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDate</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> ();  <br><span class="hljs-comment">//        输出当前系统时间  </span><br>        System. out. println (date);  <br>        Date date <span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> (<span class="hljs-number">10000</span> L);  <br><span class="hljs-comment">//        输出距离 1970-1-1 08:00:00过了 10000 毫秒的时间  </span><br>        System. out. println (date <span class="hljs-number">1</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>getTime () 获得一个长整型距离 1970-1-1 08:00:00所经过的毫秒数</li><li>System. currentTimeMillis ()效果与 getTime（）相同，可能有几十毫秒误差。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当前日期的毫秒数</span><br>        System. out. println (<span class="hljs-string">&quot;Date. getTime () \t\t\t 返回值: &quot;</span>+now. getTime ());<br>        <span class="hljs-comment">//通过 System. currentTimeMillis ()获取当前日期的毫秒数</span><br>        System. out. println (<span class="hljs-string">&quot;System. currentTimeMillis () \t 返回值: &quot;</span>+System. currentTimeMillis ());<br></code></pre></td></tr></table></figure><h5 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h5><blockquote><p>y 代表年<br>M 代表月<br>d 代表日<br>H 代表 24 进制的小时<br>h 代表 12 进制的小时<br>m 代表分钟<br>s 代表秒<br>S 代表毫秒</p></blockquote><h6 id="日期转字符串"><a href="#日期转字符串" class="headerlink" title="日期转字符串"></a>日期转字符串</h6><code>SimpleDateFormat</code> 类对象通过 <code>format</code> 方法对日期进行格式化为字符串<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span> (<span class="hljs-string">&quot;yyyy-MM-dd HH:mm: ss SSS&quot;</span>);  <br><span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> ();  <br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sdf. format (d);  <br>System. out. println (<span class="hljs-string">&quot;当前时间通过 yyyy-MM-dd HH:mm: ss SSS 格式化后的输出: &quot;</span> + str);  <br>SimpleDateFormat sdf <span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span> (<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);  <br>Date d <span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> ();  <br>String str <span class="hljs-number">1</span> = sdf <span class="hljs-number">1.</span> format (d <span class="hljs-number">1</span>);  <br>System. out. println (<span class="hljs-string">&quot;当前时间通过 yyyy-MM-dd 格式化后的输出: &quot;</span> + str <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h6 id="字符串转日期"><a href="#字符串转日期" class="headerlink" title="字符串转日期"></a>字符串转日期</h6><code>SimpleDateFormat</code> 格式（yyyy/MM/dd HH:mm:ss）需要和<strong>字符串格式保持一致</strong>，如果不一样就会抛出解析异常 ParseException，通过调用 SimpleDateFormat 对象的 <code>parse</code> 方法将字符串转为日期。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span> (<span class="hljs-string">&quot;yyyy-MM-dd HH:mm: ss&quot;</span>);  <br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2016-1-5 12:12:12&quot;</span>;  <br><span class="hljs-keyword">try</span> &#123;  <br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf. parse (str);  <br>    System. out. printf (<span class="hljs-string">&quot;字符串 %s 通过格式  yyyy/MM/dd HH:mm: ss %n 转换为日期对象: %s&quot;</span>, str, d.toString ());  <br>&#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;  <br>    <span class="hljs-comment">// TODO Auto-generated catch block  </span><br>    e.printStackTrace ();  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4>Calendar 类即<strong>日历类</strong>，常用于进行“翻日历”，比如下个月的今天是多久<br>采用<a href="https://how2j.cn/k/class-object/class-object-singleton/349.html">单例模式</a>获取日历对象 <code>Calendar. getInstance ()</code>;<br>日历对象的 <code>getTime</code> 方法获取当前日期，<code>setTime</code> 方法设置日历日期。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//采用单例模式获取日历对象 Calendar. getInstance ();  </span><br><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar. getInstance ();  <br><span class="hljs-comment">//通过日历对象得到日期对象  </span><br><span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c.getTime ();  <br>System. out. println (d);  <br>Date d <span class="hljs-number">2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> (<span class="hljs-number">0</span>);  <br>c.setTime (d <span class="hljs-number">2</span>); <span class="hljs-comment">//把这个日历，调成日期 : 1970.1.1 08:00:00  </span><br>System. out. println (c.getTime ());<br></code></pre></td></tr></table></figure><h5 id="翻日历"><a href="#翻日历" class="headerlink" title="翻日历"></a>翻日历</h5></li></ul><ol><li><code>add</code> 方法，在原日期上增加年/月/日  </li><li><code>set</code> 方法，直接设置年/月/日<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java. text. SimpleDateFormat;  <br><span class="hljs-keyword">import</span> java. util. Calendar;  <br><span class="hljs-keyword">import</span> java. util. Date;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCalendar</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span> (<span class="hljs-string">&quot;yyyy-MM-dd HH:mm: ss&quot;</span>);  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar. getInstance ();  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> c.getTime ();  <br>        <span class="hljs-comment">// 当前日期  </span><br>        System. out. println (<span class="hljs-string">&quot;当前日期：\t&quot;</span> + format (c.getTime ()));  <br>        <span class="hljs-comment">// 下个月的今天  </span><br>        c.setTime (now);  <br>        c.add (Calendar. MONTH, <span class="hljs-number">1</span>);  <br>        System. out. println (<span class="hljs-string">&quot;下个月的今天:\t&quot;</span> + format (c.getTime ()));  <br>        <span class="hljs-comment">// 去年的今天  </span><br>        c.setTime (now);  <br>        c.add (Calendar. YEAR, -<span class="hljs-number">1</span>);  <br>        System. out. println (<span class="hljs-string">&quot;去年的今天:\t&quot;</span> + format (c.getTime ()));  <br>        <span class="hljs-comment">// 上个月的第三天  </span><br>        c.setTime (now);  <br>        c.add (Calendar. MONTH, -<span class="hljs-number">1</span>);  <br>        c.set (Calendar. DATE, <span class="hljs-number">3</span>);  <br>        System. out. println (<span class="hljs-string">&quot;上个月的第三天:\t&quot;</span> + format (c.getTime ()));  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">format</span> <span class="hljs-params">(Date time)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sdf. format (time);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]<br>对日期需要<strong>修改</strong>的时候<strong>用 Calendar</strong>，直接获取当前日期用 Date</p></blockquote><h2 id="Java-中级"><a href="#Java-中级" class="headerlink" title="Java 中级"></a>Java 中级</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h4><img src="https://stepimagewm.how2j.cn/2412.png"><br>可查异常，运行时异常和错误 3 种，其中，运行时异常和错误又叫非可查异常<h5 id="可查异常：-CheckedException"><a href="#可查异常：-CheckedException" class="headerlink" title="可查异常： CheckedException"></a>可查异常： CheckedException</h5>可查异常即必须进行处理的异常，<strong>要么 try catch 住, 要么往外抛，谁调用，谁处理</strong>，比如 FileNotFoundException ，如果不处理，编译器，就不让你通过<h5 id="运行时异常：RuntimeException"><a href="#运行时异常：RuntimeException" class="headerlink" title="运行时异常：RuntimeException"></a>运行时异常：RuntimeException</h5></li></ol><p><strong>不是必须进行 try catch 的异常</strong>  ，但是运行会报错。<br>常见运行时异常:<br>    - 除数不能为 0 异常: ArithmeticException<br>    - 下标越界异常: ArrayIndexOutOfBoundsException<br>    - 空指针异常:NullPointerException</p><h5 id="错误：Error"><a href="#错误：Error" class="headerlink" title="错误：Error"></a>错误：Error</h5><p>错误 Error，指的是系统级别的异常，通常是内存用光了，在默认设置下，一般 java 程序启动的时候，最大可以使用 16 m 的内存，如例不停的给 StringBuffer 追加字符，很快就把内存使用光了。抛出 OutOfMemoryError<br>与运行时异常一样，错误也是不要求强制捕捉的，并且无法人为处理。</p><h4 id="try-catch-finally-捕捉处理异常"><a href="#try-catch-finally-捕捉处理异常" class="headerlink" title="try catch finally 捕捉处理异常"></a>try catch finally 捕捉处理异常</h4><ol><li>将可能抛出 FileNotFoundException 文件不存在异常的代码放在 try 里  </li><li>如果文件存在，就会顺序往下执行，并且不执行 catch 块中的代码</li><li>如果文件不存在，try 里的代码会立即终止，程序流程会运行到对应的 catch 块中  </li><li>e. <code>printStackTrace</code> (); 会打印出方法的调用痕迹，如此例，会打印出异常开始于 TestException 的第 16 行，这样就便于定位和分析到底哪里出了异常</li><li>无论是否出现异常，<strong>finally 中的代码都会被执行</strong><h4 id="多异常捕捉办法"><a href="#多异常捕捉办法" class="headerlink" title="多异常捕捉办法"></a>多异常捕捉办法</h4></li><li>分别进行 catch</li><li>把多个异常，放在一个 catch 里统一捕捉 <code>catch (FileNotFoundException | ParseException e) &#123;&#125;</code><h4 id="throw-和-throws-的区别"><a href="#throw-和-throws-的区别" class="headerlink" title="throw 和 throws 的区别"></a>throw 和 throws 的区别</h4>throws 与 throw 这两个关键字接近，不过意义不一样，有如下区别：  </li><li><strong>throws</strong> 出现在<strong>方法声明上</strong>，而 <strong>throw</strong> 通常都出现在<strong>方法体内</strong>。  </li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw 则是抛出了异常，执行 throw 则一定抛出了某个异常对象。<h4 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h4>Throwable 是类，Exception 和 Error 都继承了该类, 所以在捕捉的时候，也可以使用 Throwable 进行捕捉<br>如图： 异常分 Error 和 Exception<br>Exception 里又分运行时异常和可查异常。<br><img src="https://stepimagewm.how2j.cn/742.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> exception;  <br><span class="hljs-keyword">import</span> java. io. File;  <br><span class="hljs-keyword">import</span> java. io. FileInputStream;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThrowable</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;d:/LOL. exe&quot;</span>);  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span> (f);  <br>            <span class="hljs-comment">//使用 Throwable 进行异常捕捉  </span><br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;  <br>            <span class="hljs-comment">// TODO Auto-generated catch block  </span><br>            t.printStackTrace ();  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4>Java 中的异常是通过<strong>继承 Throwable 类</strong>来实现的。因此，要<strong>自定义异常类</strong>，只需创建一个<strong>继承 Exception 或 RuntimeException 的类</strong>即可<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">import</span> exception. EnemyHeroIsDeadException;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Mortal</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> hp;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> armor;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span> <span class="hljs-params">(String name, <span class="hljs-type">float</span> hp, <span class="hljs-type">int</span> armor)</span> &#123;  <br>        System. out. println (<span class="hljs-built_in">this</span>. getName () + <span class="hljs-string">&quot; is born&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span> <span class="hljs-params">()</span> &#123;  <br>        System. out. println (<span class="hljs-string">&quot;Hero 构造&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">garLen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">yase</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        garLen. setName (<span class="hljs-string">&quot;Garlen&quot;</span>);  <br>        yase. setName (<span class="hljs-string">&quot;Yase&quot;</span>);  <br>        yase. setHp (<span class="hljs-number">0</span>);  <br>        <span class="hljs-type">Item</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span> () &#123;  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">disposable</span> <span class="hljs-params">()</span> &#123;  <br>                System. out. println (garLen. getName () + <span class="hljs-string">&quot;的物品毁坏&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        item. disposable ();  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            garLen. attack (yase);  <br>        &#125; <span class="hljs-keyword">catch</span> (EnemyHeroIsDeadException e) &#123;  <br>            System. out. println (e.getMessage ());  <br>        &#125; <br>    &#125; <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span> <span class="hljs-params">(Hero hero)</span> <span class="hljs-keyword">throws</span> EnemyHeroIsDeadException &#123;  <br>        <span class="hljs-keyword">if</span> (hero. hp == <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-type">EnemyHeroIsDeadException</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnemyHeroIsDeadException</span> (hero. getName () + <span class="hljs-string">&quot;挂了&quot;</span>);  <br>            <span class="hljs-keyword">throw</span> exception;  <br>        &#125;  <br>    &#125; <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span> <span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. name = name;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getHp</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> hp;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHp</span> <span class="hljs-params">(<span class="hljs-type">float</span> hp)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. hp = hp;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getArmor</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> armor;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArmor</span> <span class="hljs-params">(<span class="hljs-type">int</span> armor)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. armor = armor;  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><h4 id="File"><a href="#File" class="headerlink" title="File"></a>File</h4>常用方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;d:/LOLFolder/skin/garen. ski&quot;</span>);<br>        <span class="hljs-comment">// 以字符串数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span><br>        f.list ();<br>        <span class="hljs-comment">// 以文件数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span><br>        File[]fs= f.listFiles ();<br>        <span class="hljs-comment">// 以字符串形式返回获取所在文件夹</span><br>        f.getParent ();<br>        <span class="hljs-comment">// 以文件形式返回获取所在文件夹</span><br>        f.getParentFile ();<br>        <span class="hljs-comment">// 创建文件夹，如果父文件夹 skin 不存在，创建就无效</span><br>        f.mkdir ();<br>        <span class="hljs-comment">// 创建文件夹，如果父文件夹 skin 不存在，就会创建父文件夹</span><br>        f.mkdirs ();<br>        <span class="hljs-comment">// 创建一个空文件, 如果父文件夹 skin 不存在，就会抛出异常</span><br>        f.createNewFile ();<br>        <span class="hljs-comment">// 所以创建一个空文件之前，通常都会创建父目录</span><br>        f.getParentFile (). mkdirs ();<br>        <span class="hljs-comment">// 列出所有的盘符 c: d: e: 等等</span><br>        f.listRoots ();<br>        <span class="hljs-comment">// 刪除文件</span><br>        f.delete ();<br>        <span class="hljs-comment">// JVM 结束的时候，刪除文件，常用于临时文件的删除</span><br>        f.deleteOnExit ();<br></code></pre></td></tr></table></figure>eg：获取文件夹中最大和最小文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;C:\\WINDOWS&quot;</span>);  <br>File[] files = file. listFiles ();  <br><span class="hljs-type">File</span> <span class="hljs-variable">minFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br><span class="hljs-type">File</span> <span class="hljs-variable">maxFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br><span class="hljs-keyword">for</span> (File f : files) &#123;  <br>    <span class="hljs-keyword">if</span> (f.length () != <span class="hljs-number">0</span>) &#123;  <br>        <span class="hljs-keyword">if</span> (minFile == <span class="hljs-literal">null</span> || f.length () &lt; minFile. length ())  <br>            minFile = f;  <br>        <span class="hljs-keyword">if</span> (maxFile == <span class="hljs-literal">null</span> || f.length () &gt; maxFile. length ())  <br>            maxFile = f;  <br>    &#125;  <br>&#125;  <br>System. out. println (<span class="hljs-string">&quot;minFile: &quot;</span> + minFile. getName () + <span class="hljs-string">&quot; &quot;</span> + minFile. length () + <span class="hljs-string">&quot; bytes&quot;</span>);  <br>System. out. println (<span class="hljs-string">&quot;maxFile: &quot;</span> + maxFile. getName () + <span class="hljs-string">&quot; &quot;</span> + maxFile. length () / <span class="hljs-number">1</span> e <span class="hljs-number">6</span> + <span class="hljs-string">&quot;Mbytes&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="Stream（流）"><a href="#Stream（流）" class="headerlink" title="Stream（流）"></a>Stream（流）</h4>当不同的介质之间有数据交互的时候，JAVA 就使用流来实现。<br>数据源可以是文件，还可以是数据库，网络甚至是其他的程序<br><img src="https://stepimagewm.how2j.cn/5678.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;D:\\Java\\JavaSE\\src\\MyIO\\test. txt&quot;</span>);  <br><span class="hljs-keyword">try</span> &#123;  <br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span> (f);  <br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;  <br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4>InputStream 字节输入流，OutputStream 字节输出流，用于以字节的形式读取和写入数据<br>ASCII 码：<blockquote><p><strong>所有的数据</strong>存放在计算机中都是以<strong>数字的形式存放</strong>的。所以<strong>字母就需要转换为数字</strong>才能够存放。<br>比如 A 就对应的数字 65，a 对应的数字 97. 不同的字母和符号对应不同的数字，就是一张码表。<br>ASCII 是这样的一种码表。只包含简单的<strong>英文字母，符号，数字</strong>等等。不包含中文，德文，俄语等复杂的。</p></blockquote></li></ol><p><strong>InputStream 是字节输入流，同时也是抽象类</strong>，只提供方法声明，不提供方法的具体实现。 <strong>FileInputStream</strong> 是 InputStream<strong>子类</strong>，<strong>read</strong> 方法进行读文件数据到（字节数组）内存为 <strong>ASCII 码</strong>，以 FileInputStream 为例进行文件读取<br><strong>OutputStream 是字节输出流</strong>，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<strong>FileOutputStream</strong> 是 OutputStream<strong>子类</strong>,<strong>write</strong>方法将字节数组数据写入到文件中, 如果<strong>写入数字即转为对应 ASCII 码字符</strong>，如<strong>写入字符则无变化</strong>，以 FileOutputStream 为例向文件写出数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyIO;  <br><span class="hljs-keyword">import</span> java. io.*;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStream</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;D:\\testFios. txt&quot;</span>);  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span> (f);  <br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span> (f);  <br>            <span class="hljs-type">byte</span>[] out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">64</span>, <span class="hljs-number">65</span>, <span class="hljs-number">66</span>&#125;;  <br>            <span class="hljs-type">byte</span>[] in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">3</span>];  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                fos. write (out);  <br>                fis. read (in);  <br>                fis. close ();  <br>                fos. close ();  <br>                System. out. println (<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (in));  <br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>关闭流：<br>把<strong>流定义在 try ()里</strong>, try, catch 或者 finally 结束的时候，会<strong>自动关闭</strong><br>这种编写代码的方式叫做 <strong>try-with-resources</strong>，这是从 JDK 7 开始支持的技术<br>所有的流，都实现了一个接口叫做 <strong>AutoCloseable</strong>，任何类实现了这个接口，都可以在 try ()中进行实例化。并且在 try, catch, finally 结束的时候自动关闭，回收相关资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;d:/lol. txt&quot;</span>);<br>        <span class="hljs-comment">//把流定义在 try ()里, try, catch 或者 finally 结束的时候，会自动关闭</span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span> (f)) &#123;<br>            <span class="hljs-type">byte</span>[] all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>) f.length ()];<br>            fis. read (all);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : all) &#123;<br>                System. out. println (b);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace ();<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><p><strong>Reader</strong> 字符输入流，<strong>Writer</strong> 字符输出流，专门用于字符的形式读取和写入数据</p><ul><li>FileReader 是 Reader 子类，以 FileReader 为例进行文件读取</li><li>FIleWriter 是 Writer 子类，以 FileWriter 为例进行文件写入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyIO;  <br><span class="hljs-keyword">import</span> java. io.*;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestReaderAndWriter</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;D:/testrw. txt&quot;</span>);  <br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span> (f)) &#123;  <br>            <span class="hljs-type">char</span>[] rw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;<span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-string">&#x27;国&#x27;</span>&#125;;  <br>            fw. write (rw);  <br>            System. out. println (<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (rw));  <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>        &#125;  <br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span> (f)) &#123;  <br>            <span class="hljs-type">char</span>[] rc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[(<span class="hljs-type">int</span>) f.length ()];  <br>            fr. read (rc);  <br>            System. out. println (<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (rc));  <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><span style="background:rgba(240, 200, 0, 0.2)">Java 采用的是 Unicode</span><br>工作后经常接触的编码方式有如下几种：  <blockquote><p>ISO-8859-1 ASCII 数字和西欧字母<br>GBK GB 2312 BIG 5 中文<br>UNICODE (统一码，万国码)<br>其中<br>ISO-8859-1 包含 ASCII<br>GB 2312 是简体中文，BIG 5 是繁体中文，GBK 同时包含简体和繁体以及日文。<br>UNICODE 包括了所有的文字，无论中文，英文，藏文，法文，世界所有的文字都包含<br><img src="https://stepimagewm.how2j.cn/2482.png"><br>UNICODE 对所有字符采用 <strong>2 个字节</strong>浪费空间，于是出现各种减肥子编码, 比如 UTF-8 对<strong>数字和字母</strong>就使用<strong>一个字节</strong>，而对<strong>汉字</strong>就使用<strong>3 个字节</strong>，从而达到了减肥还能保证健康的效果，UTF-8，UTF-16 和 UTF-32 针对不同类型的数据有不同的减肥效果，一般说来 UTF-8 是比较常用的方式<br>UTF-8 编码的字节转中文：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;(<span class="hljs-type">byte</span>) <span class="hljs-number">0</span> xE <span class="hljs-number">5</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span> xB <span class="hljs-number">1</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0</span> x <span class="hljs-number">8</span> C&#125;;  <br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span> (bs, StandardCharsets. UTF_8);  <br>System. out. println (s);<br></code></pre></td></tr></table></figure><h4 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h4>避免字节流、字符流每次读写都频繁访问磁盘，严重增加磁盘压力，为了减少 IO 操作，采用缓存流对待读写的内容放到<strong>缓存中</strong>进行临时存储，结束读写时一次性读写磁盘。<blockquote><p><strong>缓存流必须建立在一个存在的流（FileReader，FileWriter 等）的基础上</strong></p></blockquote><h5 id="缓存流读取数据"><a href="#缓存流读取数据" class="headerlink" title="缓存流读取数据"></a>缓存流读取数据</h5>缓存字符输入流 <code>BufferedReader</code> 可以<strong>一次读取一行数据</strong><h5 id="缓存流写出数据"><a href="#缓存流写出数据" class="headerlink" title="缓存流写出数据"></a>缓存流写出数据</h5><code>PrintWriter</code> 缓存字符输出流，可以<strong>一次写出一行数据</strong><blockquote><p>[!NOTE] BufferWriter 和 PrintWriter 对比<br><code>BufferedWriter</code>: 将文本写入字符输出流，缓冲各个字符从而提供单个字符，数组和字符串的高效写入。通过 write ()方法可以将获取到的字符输出，然后通过 newLine ()进行换行操作。BufferedWriter 中的字符流必须通过<strong>调用 flush 方法才能将其刷出去</strong>。并且 BufferedWriter <strong>只能对字符流进行操作</strong>。如果要对字节流操作，则使用 BufferedInputStream。<br><code>PrintWriter</code>: 向文本输出流打印对象的格式化表示形式 (Prints formatted representations of objects to a text-output stream)。PrintWriter 相对于 BufferedWriter 的好处在于，如果 PrintWriter 开启了<strong>自动刷新</strong>，那么当 PrintWriter 调用 println，prinlf 或 format 方法时，输出流中的数据就会自动刷新出去。PrintWriter 不但能接收字符流，<strong>也能接收字节流</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;D:/testbr. txt&quot;</span>);  <br><span class="hljs-comment">//        逐行写入字符到磁盘  </span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span> (f)) &#123;  <br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span> (fw);  <br>            pw. println (<span class="hljs-string">&quot;Hello, World!&quot;</span>);  <br>            pw. println (<span class="hljs-string">&quot;Writer StringLine!&quot;</span>);  <br><span class="hljs-comment">//            提前刷新缓存将数据写入磁盘  </span><br>            pw. flush ();  <br>            pw. println (<span class="hljs-string">&quot;Success!&quot;</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>        &#125;  <br><span class="hljs-comment">//        逐行读文件到内存  </span><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span> (f)) &#123;  <br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span> (fr);  <br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <br>                <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> br. readLine ();  <br>                <span class="hljs-keyword">if</span> (line == <span class="hljs-literal">null</span>)  <br>                    <span class="hljs-keyword">break</span>;  <br>                System. out. println (line);  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4></li><li><code>DataInputStream</code> 数据输入流  </li><li><code>DataOutputStream</code> 数据输出流<blockquote><p>[!NOTE] 注<br>要用 DataInputStream 读取一个文件，这个文件必须是由 DataOutputStream 写出的，否则会出现 EOFException，因为 DataOutputStream 在写出的时候会做一些特殊标记，只有 DataInputStream 才能成功的读取。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyIO;  <br><span class="hljs-keyword">import</span> java. io.*;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataStream</span> &#123;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;D:/testds. txt&quot;</span>);  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span> (f)) &#123;  <br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span> (fs);  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">utfs</span> <span class="hljs-operator">=</span> ds. readUTF ();  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ds. readInt ();  <br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ds. readBoolean ();  <br>            System. out. println (utfs);  <br>            System. out. println (i);  <br>            System. out. println (b);  <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>            e.printStackTrace ();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span> (f)) &#123;  <br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span> (fo);  <br>            dos. writeUTF (<span class="hljs-string">&quot;hello&quot;</span>);  <br>            dos. writeInt (<span class="hljs-number">100</span>);  <br>            dos. writeBoolean (<span class="hljs-literal">true</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        write ();  <br>        read ();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h4>对象流指的是可以<strong>直接把一个对象以流的形式传输给其他的介质</strong>，比如硬盘<br>一个<strong>对象以流的形式进行传输</strong>，叫做<strong>序列化</strong>。该对象所对应的类，必须是实现 <code>Serializable</code> 接口，并且使用 <code>ObjectOutputStream</code> 和 <code>ObjectInputStream</code> 对流对象使用 <code>writeObject</code> 和 <code>readObject</code> 方法进行写读。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Hero. java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;  <br>    <span class="hljs-comment">//表示这个类当前的版本，如果有了变化，比如新设计了属性，就应该修改这个版本号  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> L;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> hp;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> armor;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span> <span class="hljs-params">(String name, <span class="hljs-type">float</span> hp, <span class="hljs-type">int</span> armor)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. name = name;  <br>        <span class="hljs-built_in">this</span>. hp = hp;  <br>        <span class="hljs-built_in">this</span>. armor = armor;  <br>        System. out. println (<span class="hljs-built_in">this</span>. getName () + <span class="hljs-string">&quot; is born&quot;</span>);  <br>    &#125;<br>&#125;    <br><span class="hljs-comment">//TestSerializable. java</span><br><span class="hljs-keyword">package</span> MyIO;  <br><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">import</span> java. io.*;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSerializable</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">garlen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;Garlen&quot;</span>, (<span class="hljs-type">float</span>) (Math. random () * <span class="hljs-number">100</span>), <span class="hljs-number">100</span>);  <br>        Hero[] heroes = &#123;garlen, garlen, garlen, garlen, garlen&#125;;  <br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span> (<span class="hljs-string">&quot;D:\\garlen. txt&quot;</span>);  <br>        <span class="hljs-keyword">try</span> (  <br>                <span class="hljs-comment">//创建对象输出流  </span><br>                <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span> (f);  <br>                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span> (fos);  <br><span class="hljs-comment">//            创建对象输入流  </span><br>                <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span> (f);  <br>                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span> (fis)  <br>        ) &#123;  <br>            oos. writeObject (heroes);  <br>            Hero[] heros = (Hero[]) ois. readObject ();  <br>            <span class="hljs-keyword">for</span> (Hero hero : heros) &#123;  <br>                System. out. println (hero. getName () + <span class="hljs-string">&quot;信息为：\n&quot;</span> + hero. getHp () + <span class="hljs-string">&quot;血量，护甲为：&quot;</span> + hero. getArmor ());  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">catch</span> (IOException | ClassNotFoundException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="系统输入输出流"><a href="#系统输入输出流" class="headerlink" title="系统输入输出流"></a>系统输入输出流</h4></li><li><code>System. out</code> 是常用的在控制台输出数据的  </li><li><code>System. in</code> 可以从控制台输入数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyIO;  <br><span class="hljs-keyword">import</span> java. io. IOException;  <br><span class="hljs-keyword">import</span> java. io. InputStream;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSystemIO</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> System. in;  <br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-comment">/*  </span><br><span class="hljs-comment">                  敲入 a, 然后敲回车可以看到                                   97 10                                   97 是 a 的 ASCII 码                                  10 分别对应回车换行                  */</span>  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> is. read ();  <br>                System. out. println (i);  <br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Scanner-读取字符串"><a href="#Scanner-读取字符串" class="headerlink" title="Scanner 读取字符串"></a>Scanner 读取字符串</h5>使用 <strong>System. in. read</strong> 虽然可以读取数据，但是很不方便，使用 <code>Scanner</code> 就可以<strong>逐行读取</strong>了<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanner</span> <span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span> (System. in);  <br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;  <br>        String s <span class="hljs-number">1</span> = s.next ();  <br>        <span class="hljs-keyword">if</span> (s <span class="hljs-number">1.</span> equals (<span class="hljs-string">&quot;exit&quot;</span>))  <br>            <span class="hljs-keyword">break</span>;  <br>        System. out. println (s <span class="hljs-number">1</span>);  <br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4>ArrayList 相当于 C++里的 Vector，动态数组，可以自动扩容<br>ArrayList 实现了 List 接口，通常会定义 List 引用指向 ArrayList 对象，便于多态。<table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">add</td><td align="center">增加</td></tr><tr><td align="center">contains</td><td align="center">判断是否存在</td></tr><tr><td align="center">get</td><td align="center">获取指定位置的对象</td></tr><tr><td align="center">indexOf</td><td align="center">获取对象所处的位置</td></tr><tr><td align="center">remove</td><td align="center">删除</td></tr><tr><td align="center">set</td><td align="center">替换</td></tr><tr><td align="center">size</td><td align="center">获取大小</td></tr><tr><td align="center">toArray</td><td align="center">转换为数组</td></tr><tr><td align="center">addAll</td><td align="center">把另一个容器所有对象都加进来</td></tr><tr><td align="center">clear</td><td align="center">清空</td></tr><tr><td align="center">eg：toArray</td><td align="center"></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Myvector;  <br><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">import</span> java. util. ArrayList;  <br><span class="hljs-keyword">import</span> java. util. HashMap;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayList</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        ArrayList&lt;Hero&gt; heroList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;() &#123;  <br>            &#123;  <br><span class="hljs-comment">//                匿名内部类 ArrayList 对象初始化块  </span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;  <br>                    <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;  <br>                    add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;() &#123;  <br>                        <span class="hljs-comment">//                        匿名内部类 Hero 对象初始化块  </span><br>                        &#123;  <br>                            put (<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span> + finalI);  <br>                            put (<span class="hljs-string">&quot;hp&quot;</span>, (<span class="hljs-type">float</span>) Math. random () * <span class="hljs-number">100</span>);  <br>                            put (<span class="hljs-string">&quot;armor&quot;</span>, <span class="hljs-number">10</span>);  <br>                        &#125;  <br>                    &#125;));  <br>                &#125;  <br>            &#125;  <br>        &#125;;  <br>        <span class="hljs-keyword">for</span> (Object o : heroList. toArray ()) &#123;  <br>            System. out. println (o.toString ());  <br>        &#125;  <br>        heroList. clear ();  <br>        System. out. println (heroList. size ());  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泛型-Generic"><a href="#泛型-Generic" class="headerlink" title="泛型 Generic"></a>泛型 Generic</h4></li><li>不指定泛型的容器，可以存放任何类型的元素</li><li>指定了泛型的容器，只能存放指定类型的元素以及其子类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对于不使用泛型的容器，可以往里面放英雄，也可以往里面放物品</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">heros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span> ();<br>        heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;盖伦&quot;</span>));<br>        <span class="hljs-comment">//本来用于存放英雄的容器，现在也可以存放物品了</span><br>        heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span> (<span class="hljs-string">&quot;冰杖&quot;</span>));<br>        <span class="hljs-comment">//对象转型会出现问题</span><br>        Hero h <span class="hljs-number">1</span>=  (Hero) heros. get (<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//尤其是在容器里放的对象太多的时候，就记不清楚哪个位置放的是哪种类型的对象了</span><br>        Hero h <span class="hljs-number">2</span>=  (Hero) heros. get (<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//引入泛型 Generic</span><br>        <span class="hljs-comment">//声明容器的时候，就指定了这种容器，只能放 Hero，放其他的就会出错</span><br>        List&lt;Hero&gt; genericheros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Hero&gt;();<br>        genericheros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;盖伦&quot;</span>));<br>        <span class="hljs-comment">//如果不是 Hero 类型，根本就放不进去</span><br>        <span class="hljs-comment">//genericheros. add (new Item (&quot;冰杖&quot;));</span><br>        <span class="hljs-comment">//除此之外，还能存放 Hero 的子类</span><br>        genericheros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">APHero</span> ());<br>        <span class="hljs-comment">//并且在取出数据的时候，不需要再进行转型了，因为里面肯定是放的 Hero 或者其子类</span><br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> genericheros. get (<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><blockquote><p><code>List&lt;Hero&gt; genericheros = new ArrayList&lt;Hero&gt;();</code> 可以简写为 <code>List&lt;Hero&gt; genericheros 2 = new ArrayList&lt;&gt;();</code><br>ArrayList 容器有迭代器，可以通过迭代器进行遍历全部元素，<code>iterator</code> 方法得到迭代器, 迭代器通过 <code>hasNext</code> 方法进行迭代并自动更新位置。<br><img src="https://stepimagewm.how2j.cn/806.png"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Hero&gt; heros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Hero&gt;();<br><span class="hljs-comment">//放 5 个 Hero 进入容器</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero name &quot;</span> +i));<br>&#125;<br><span class="hljs-comment">//第二种遍历，使用迭代器</span><br>System. out. println (<span class="hljs-string">&quot;--------使用 while 的 iterator-------&quot;</span>);<br>Iterator&lt;Hero&gt; it= heros. iterator ();<br><span class="hljs-comment">//从最开始的位置判断&quot;下一个&quot;位置是否有数据</span><br><span class="hljs-comment">//如果有就通过 next 取出来，并且把指针向下移动</span><br><span class="hljs-comment">//直到&quot;下一个&quot;位置没有数据</span><br><span class="hljs-keyword">while</span> (it. hasNext ())&#123;<br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> it. next ();<br>    System. out. println (h);<br>&#125;<br><span class="hljs-comment">//迭代器的 for 写法</span><br>System. out. println (<span class="hljs-string">&quot;--------使用 for 的 iterator-------&quot;</span>);<br><span class="hljs-keyword">for</span> (Iterator&lt;Hero&gt; iterator = heros. iterator (); iterator. hasNext ();) &#123;<br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> (Hero) iterator. next ();<br>    System. out. println (hero);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其他集合"><a href="#其他集合" class="headerlink" title="其他集合"></a>其他集合</h4>序列分先进先出 FIFO, 先进后出 FILO  <ul><li>FIFO 在 Java 中又叫 Queue 队列  </li><li>FILO 在 Java 中又叫 Stack 栈<h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5>LinkedList 也实现了 List 接口，诸如 add, remove, contains 等等方法<h6 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h6>除了实现了 List 接口外，LinkedList 还实现了双向链表结构 <code>Deque</code>，可以很方便的在<strong>头尾插入删除数据</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//LinkedList 是一个双向链表结构的 list</span><br>        LinkedList&lt;Hero&gt; ll =<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Hero&gt;();<br>        <span class="hljs-comment">//所以可以很方便的在头部和尾部插入数据</span><br>        <span class="hljs-comment">//在最后插入新的英雄</span><br>        ll. addLast (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero 1&quot;</span>));<br>        ll. addLast (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero 2&quot;</span>));<br>        ll. addLast (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero 3&quot;</span>));<br>        System. out. println (ll);<br>        <span class="hljs-comment">//在最前面插入新的英雄</span><br>        ll. addFirst (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;heroX&quot;</span>));<br>        System. out. println (ll);<br>        <span class="hljs-comment">//查看最前面的英雄</span><br>        System. out. println (ll. getFirst ());<br>        <span class="hljs-comment">//查看最后面的英雄</span><br>        System. out. println (ll. getLast ());<br>        <span class="hljs-comment">//查看不会导致英雄被删除</span><br>        System. out. println (ll);<br>        <span class="hljs-comment">//取出最前面的英雄</span><br>        System. out. println (ll. removeFirst ());<br>        <span class="hljs-comment">//取出最后面的英雄</span><br>        System. out. println (ll. removeLast ());<br>        <span class="hljs-comment">//取出会导致英雄被删除</span><br>        System. out. println (ll);<br></code></pre></td></tr></table></figure><h6 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h6>LinkedList 除了实现了 List 和 Deque 外，还实现了 <strong>Queue 接口</strong> (队列)。<br>Queue 是先进先出队列 FIFO，常用方法：  <blockquote><ol><li><code>offer</code> 在最后添加元素  </li><li><code>poll</code> 取出第一个元素  </li><li><code>peek</code> 查看第一个元素</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//和 ArrayList 一样，LinkedList 也实现了 List 接口</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">ll</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Hero&gt;();<br>        <span class="hljs-comment">//所不同的是 LinkedList 还实现了 Deque，进而又实现了 Queue 这个接口</span><br>        <span class="hljs-comment">//Queue 代表 FIFO 先进先出的队列</span><br>        Queue&lt;Hero&gt; q= <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Hero&gt;();<br>        <span class="hljs-comment">//加在队列的最后面</span><br>        System. out. print (<span class="hljs-string">&quot;初始化队列：\t&quot;</span>);<br>        q.offer (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;Hero 1&quot;</span>));<br>        q.offer (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;Hero 2&quot;</span>));<br>        q.offer (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;Hero 3&quot;</span>));<br>        q.offer (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;Hero 4&quot;</span>));<br>        System. out. println (q);<br>        System. out. print (<span class="hljs-string">&quot;把第一个元素取 poll ()出来:\t&quot;</span>);<br>        <span class="hljs-comment">//取出第一个 Hero，FIFO 先进先出</span><br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> q.poll ();<br>        System. out. println (h);<br>        System. out. print (<span class="hljs-string">&quot;取出第一个元素之后的队列:\t&quot;</span>);<br>        System. out. println (q);<br>        <span class="hljs-comment">//把第一个拿出来看一看，但是不取出来</span><br>        h=q.peek ();<br>        System. out. print (<span class="hljs-string">&quot;查看 peek ()第一个元素:\t&quot;</span>);<br>        System. out. println (h);<br>        System. out. print (<span class="hljs-string">&quot;查看并不会导致第一个元素被取出来:\t&quot;</span>);<br>        System. out. println (q);<br></code></pre></td></tr></table></figure><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5>二叉树由各种节点组成<br>二叉树特点：  <blockquote><ul><li>每个节点都可以有<strong>左子节点</strong>，<strong>右子节点</strong>  </li><li>每一个节点都有一个<strong>值</strong><br><img src="https://stepimagewm.how2j.cn/1008.png"></li></ul></blockquote><h6 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> collection;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-comment">// 左子节点</span><br>    <span class="hljs-keyword">public</span> Node leftNode;<br>    <span class="hljs-comment">// 右子节点</span><br>    <span class="hljs-keyword">public</span> Node rightNode;<br>    <span class="hljs-comment">// 值</span><br>    <span class="hljs-keyword">public</span> Object value;<br>    <span class="hljs-comment">// 插入数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">(Object v)</span> &#123;<br>        <span class="hljs-comment">// 如果当前节点没有值，就把数据放在当前节点上</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == value)<br>            value = v;<br>        <span class="hljs-comment">// 如果当前节点有值，就进行判断，新增的值与当前值的大小关系</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 新增的值，比当前值小或者相同</span><br>            <span class="hljs-keyword">if</span> ((Integer) v -((Integer) value) &lt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == leftNode)<br>                    leftNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span> ();<br>                leftNode. add (v);<br>            &#125;<br>            <span class="hljs-comment">// 新增的值，比当前值大</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == rightNode)<br>                    rightNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span> ();<br>                rightNode. add (v);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> randoms[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123; <span class="hljs-number">67</span>, <span class="hljs-number">7</span>, <span class="hljs-number">30</span>, <span class="hljs-number">73</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">78</span>, <span class="hljs-number">81</span>, <span class="hljs-number">10</span>, <span class="hljs-number">74</span> &#125;;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">roots</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span> ();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> number : randoms) &#123;<br>            roots. add (number);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h6>二叉树的遍历分左序，中序，右序  <blockquote><ol><li>左序即： 中间的数遍历后放在左边  </li><li>中序即： 中间的数遍历后放在中间  </li><li>右序即： 中间的数遍历后放在右边<br>eg：中序遍历（递归）</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 中序遍历所有的节点</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">values</span> <span class="hljs-params">()</span> &#123;<br>        List&lt;Object&gt; values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">// 左节点的遍历结果</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != leftNode)<br>            values. addAll (leftNode. values ());<br>        <span class="hljs-comment">// 当前节点</span><br>        values. add (value);<br>        <span class="hljs-comment">// 右节点的遍历结果</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != rightNode)<br>            values. addAll (rightNode. values ());<br>        <span class="hljs-keyword">return</span> values;<br>    &#125;<br></code></pre></td></tr></table></figure>eg：英雄 tree<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Myvector;  <br><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">import</span> java. util. ArrayList;  <br><span class="hljs-keyword">import</span> java. util. HashMap;  <br><span class="hljs-keyword">import</span> java. util. List;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroTree</span> &#123;  <br>    <span class="hljs-type">HeroTree</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>    <span class="hljs-type">HeroTree</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  <br>    Hero value;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">HeroTree</span> <span class="hljs-variable">heroTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroTree</span> () &#123;  <br>            &#123;  <br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  <br>                    <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;  <br>                    add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;() &#123;  <br>                        &#123;  <br>                            put (<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span> + finalI);  <br>                            put (<span class="hljs-string">&quot;hp&quot;</span>, (<span class="hljs-type">float</span>) Math. random () * <span class="hljs-number">100</span>);  <br>                            put (<span class="hljs-string">&quot;armor&quot;</span>, <span class="hljs-number">10</span>);  <br>                        &#125;  <br>                    &#125;));  <br>                &#125;  <br>            &#125;  <br>        &#125;;  <br>        inorderTraversal (heroTree);  <br><span class="hljs-comment">//        System. out. println (heroTree. values ());  </span><br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inorderTraversal</span> <span class="hljs-params">(HeroTree tree)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (tree != <span class="hljs-literal">null</span>) &#123;  <br>            inorderTraversal (tree. left);  <br>            System. out. println (tree. value. toString ());  <br>            inorderTraversal (tree. right);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-comment">// 中序遍历所有的节点  </span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">values</span> <span class="hljs-params">()</span> &#123;  <br>        List&lt;Object&gt; values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-comment">// 左节点的遍历结果  </span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != left)  <br>            values. addAll (left. values ());  <br>        <span class="hljs-comment">// 当前节点  </span><br>        values. add (value);  <br>        <span class="hljs-comment">// 右节点的遍历结果  </span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != right)  <br>            values. addAll (right. values ());  <br>        <span class="hljs-keyword">return</span> values;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">(Hero hero)</span> &#123;  <br><span class="hljs-comment">//        添加根节点  </span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>. value == <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-built_in">this</span>. value = hero;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">if</span> (hero. getHp () &lt;= <span class="hljs-built_in">this</span>. value. getHp ()) &#123;  <br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>. left == <span class="hljs-literal">null</span>) &#123;  <br>                    <span class="hljs-built_in">this</span>. left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroTree</span> ();  <br>                &#125;  <br>                <span class="hljs-built_in">this</span>. left. add (hero);  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>. right == <span class="hljs-literal">null</span>) &#123;  <br>                    <span class="hljs-built_in">this</span>. right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroTree</span> ();  <br>                &#125;  <br>                <span class="hljs-built_in">this</span>. right. add (hero);  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5>HashMap 储存数据的方式是—— 键值对<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String,String&gt; dictionary = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        dictionary. put (<span class="hljs-string">&quot;adc&quot;</span>, <span class="hljs-string">&quot;物理英雄&quot;</span>);<br>        dictionary. put (<span class="hljs-string">&quot;apc&quot;</span>, <span class="hljs-string">&quot;魔法英雄&quot;</span>);<br>        dictionary. put (<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;坦克&quot;</span>);<br></code></pre></td></tr></table></figure>（1）<strong>键唯一，值可重复</strong><br>对于 HashMap 而言，key 是唯一的，不可以重复的。<br>所以，以相同的 key 把不同的 value 插入到 Map 中会导致旧元素被覆盖，只留下最后插入的元素。<br>不过，同一个对象可以作为值插入到 map 中，只要对应的 key 不一样<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String,Hero&gt; heroMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Hero&gt;();<br>        heroMap. put (<span class="hljs-string">&quot;gareen&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;gareen 1&quot;</span>));<br>        System. out. println (heroMap);<br>        <span class="hljs-comment">//key 为 gareen 已经有 value 了，再以 gareen 作为 key 放入数据，会导致原英雄，被覆盖</span><br>        <span class="hljs-comment">//不会增加新的元素到 Map 中</span><br>        heroMap. put (<span class="hljs-string">&quot;gareen&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;gareen 2&quot;</span>));<br>        System. out. println (heroMap);<br>        <span class="hljs-comment">//清空 map</span><br>        heroMap. clear ();<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">gareen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;gareen&quot;</span>);<br>        <span class="hljs-comment">//同一个对象可以作为值插入到 map 中，只要对应的 key 不一样</span><br>        heroMap. put (<span class="hljs-string">&quot;hero 1&quot;</span>, gareen);<br>        heroMap. put (<span class="hljs-string">&quot;hero 2&quot;</span>, gareen);<br>        System. out. println (heroMap);<br></code></pre></td></tr></table></figure><h6 id="HashMap-性能卓越的原因"><a href="#HashMap-性能卓越的原因" class="headerlink" title="HashMap 性能卓越的原因"></a>HashMap 性能卓越的原因</h6><blockquote><p><strong>哈希计算数组索引，同哈希值采用链表进行延长存储。</strong></p></blockquote></li></ul></li></ul><ol><li><strong>hashcode 概念</strong><br>所有的对象，都有一个对应的 hashcode（散列值）<br>比如字符串“gareen”对应的是 1001 (实际上不是，这里是方便理解，假设的值)<br>比如字符串“temoo”对应的是 1004<br>比如字符串“db”对应的是 1008<br>比如字符串“annie”对应的也是 1008  </li><li><strong>保存数据</strong><br>准备一个数组，其长度是 2000，并且设定特殊的 hashcode 算法，使得所有字符串对应的 hashcode，都会落在 0-1999 之间<br>要存放名字是”gareen”的英雄，就把该英雄和名称组成一个键值对，存放在数组的 1001 这个位置上<br>要存放名字是”temoo”的英雄，就把该英雄存放在数组的 1004 这个位置上<br>要存放名字是”db”的英雄，就把该英雄存放在数组的 1008 这个位置上<br>要存放名字是”annie”的英雄，然而 “annie”的 hashcode 1008 对应的位置已经有 db 英雄了，那么就在这里创建一个链表，接在 db 英雄后面存放 annie  </li><li><strong>查找数据</strong><br>比如要查找 gareen，首先计算”gareen”的 hashcode 是 1001，根据 1001 这个下标，到数组中进行定位，（根据数组下标进行定位，是非常快速的） 发现 1001 这个位置就只有一个英雄，那么该英雄就是 gareen.<br>比如要查找 annie，首先计算”annie”的 hashcode 是 1008，根据 1008 这个下标，到数组中进行定位，发现 1008 这个位置有两个英雄，那么就对两个英雄的名字进行逐一比较 (equals)，因为此时需要比较的量就已经少很多了，很快也就可以找出目标英雄，这就是使用 hashmap 进行查询，非常快原理。<h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5>（1）<strong>元素不能重复</strong><br>Set 中的元素，不能重复<br>（2）<strong>没有顺序</strong><br>Set 中的元素，没有顺序。<br>严格的说，是没有按照元素的插入顺序排列<br>HashSet 的具体顺序，既不是按照插入顺序，也不是按照 hashcode 的顺序。<br>（3）<strong>遍历</strong><br>Set 不提供 get ()来获取指定位置的元素<br>所以遍历需要用到<strong>迭代器</strong>，或者<strong>增强型 for 循环</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//遍历 Set 可以采用迭代器 iterator</span><br>        <span class="hljs-keyword">for</span> (Iterator&lt;Integer&gt; iterator = numbers. iterator (); iterator. hasNext ();) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (Integer) iterator. next ();<br>            System. out. println (i);<br>        &#125;<br>        <span class="hljs-comment">//或者采用增强型 for 循环</span><br>        <span class="hljs-keyword">for</span> (Integer i : numbers) &#123;<br>            System. out. println (i);<br>        &#125;<br></code></pre></td></tr></table></figure>（4）<strong>HashSet 和 HashMap 的关系</strong><br>通过观察 HashSet 的源代码（<a href="https://how2j.cn/k/helloworld/helloworld-eclipse-tips/300.html#step706">如何查看源代码</a>）<br>可以发现 HashSet 自身并没有独立的实现，而是在里面<strong>封装了一个 Map</strong>.<br>HashSet 是作为<strong>Map 的 key</strong>而存在的<br>而 value 是一个命名为 PRESENT 的 static 的 Object 对象，因为是一个类属性，所以只会有一个。<h5 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h5>Collection 是一个<strong>接口</strong></li></ol><ul><li>Collection 是 Set List Queue 和 Deque 的接口  </li><li>Queue: 先进先出队列  </li><li>Deque: 双向链表  <blockquote><p>注：Collection 和 Map 之间没有关系，Collection 是放一个一个对象的，Map 是放键值对的<br>注：Deque 继承 Queue, 间接的继承了 Collection<br><img src="https://stepimagewm.how2j.cn/830.png"></p></blockquote><h5 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h5>Collections 是一个类，<strong>容器的工具类</strong>, 就如同 Arrays 是数组的工具类<br>|关键字|简介|示例代码|<br>|:—:|:—:|<br>|reverse|反转|<br>|shuffle|混淆|<br>|sort|排序|<br>|swap|交换|<br>|rotate|滚动|<br>|synchronizedList|线程安全化|<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections. reverse (numbers);<br>Collections. shuffle (numbers);<br>Collections. sort (numbers);<br>Collections. swap (numbers, <span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br>Collections. rotate (numbers, <span class="hljs-number">2</span>);<span class="hljs-comment">//把集合向右滚动 2 个单位</span><br>List&lt;Integer&gt; synchronizedNumbers = (List&lt;Integer&gt;) Collections. synchronizedList (numbers);<span class="hljs-comment">//把非线程安全的 List 转换为线程安全的 List</span><br></code></pre></td></tr></table></figure><h4 id="ArrayList-和-LinkedList-的区别"><a href="#ArrayList-和-LinkedList-的区别" class="headerlink" title="ArrayList 和 LinkedList 的区别"></a>ArrayList 和 LinkedList 的区别</h4>ArrayList: 有顺序, 可重复<br>HashSet: 无顺序，不可重复<h4 id="HashMap-和-Hashtable-的区别"><a href="#HashMap-和-Hashtable-的区别" class="headerlink" title="HashMap 和 Hashtable 的区别"></a>HashMap 和 Hashtable 的区别</h4>HashMap 和 Hashtable 都实现了 Map 接口，都是键值对保存数据的方式  <blockquote><ol><li>区别 1：<br>HashMap 可以存放 <strong>null</strong><br>Hashtable 不能存放 null  </li><li>区别 2：<br>HashMap 不是<a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step793">线程安全的类</a><br>Hashtable 是<strong>线程安全的类</strong></li></ol></blockquote><h4 id="HashSet-LinkedHashSet-TreeSet"><a href="#HashSet-LinkedHashSet-TreeSet" class="headerlink" title="HashSet LinkedHashSet TreeSet"></a>HashSet LinkedHashSet TreeSet</h4>HashSet： 无序<br>LinkedHashSet： 按照插入顺序<br>TreeSet： 从小到大排序<h4 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h4><h5 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h5>Comparator 是一个用于比较对象的类，通过重写该类的 compare 方法按照指定规则对类对象进行比较实现排序，<code>compare</code> 方法中<strong>返回正数</strong>表示<strong>第一个形参大于第二个形参</strong>，返回<strong>负数则相反</strong>，<strong>返回 0 则相等</strong>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Hero&gt; heroes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  <br>            heroes. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero&quot;</span> + i, r.nextFloat (), r.nextInt ()));  <br>        &#125;  <br>        System. out. println (<span class="hljs-string">&quot;初始化后的集合：&quot;</span>);  <br>        System. out. println (heroes);  <br>        Collections. sort (heroes, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Hero&gt;() &#123;  <br>            <span class="hljs-meta">@Override</span>  <br><span class="hljs-comment">//            正数表示 h 1 比 h 2 要大  </span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span> <span class="hljs-params">(Hero h <span class="hljs-number">1</span>, Hero h <span class="hljs-number">2</span>)</span> &#123;  <br>                <span class="hljs-keyword">if</span> (h <span class="hljs-number">1.</span> getHp () &gt; h <span class="hljs-number">2.</span> getHp ())  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (h <span class="hljs-number">1.</span> getHp () &lt; h <span class="hljs-number">2.</span> getHp ()) &#123;  <br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;  <br>                &#125;  <br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>            &#125;  <br>        &#125;);  <br>        System. out. println (<span class="hljs-string">&quot;按照血量排序后的集合：&quot;</span>);  <br>        System. out. println (heroes);<br></code></pre></td></tr></table></figure><h5 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h5>类实现 <strong>Comparable</strong> 接口重写 <code>compareTo</code> 方法，在类里面提供<strong>比较算法</strong><br><code>Collections. sort</code> 就有足够的信息进行排序了，也<strong>无需额外提供比较器 Comparator</strong>   <blockquote><p>注： <strong>如果返回-1, 就表示当前的更小，否则就是更大</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Hero. java 实现 Comparable 接口重写 compareTo 方法</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">import</span> exception. EnemyHeroIsDeadException;  <br><span class="hljs-keyword">import</span> java. io. Serializable;  <br><span class="hljs-keyword">import</span> java. util. Map;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Mortal</span>, Serializable, Comparable&lt;Hero&gt; &#123;  <br>    <span class="hljs-comment">//表示这个类当前的版本，如果有了变化，比如新设计了属性，就应该修改这个版本号  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> L;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> hp;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> armor;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span> <span class="hljs-params">()</span> &#123;  <br>        System. out. println (<span class="hljs-string">&quot;Hero 构造&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Hero</span> <span class="hljs-params">(String name, <span class="hljs-type">float</span> hp, <span class="hljs-type">int</span> armor)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. name = name;  <br>        <span class="hljs-built_in">this</span>. hp = hp;  <br>        <span class="hljs-built_in">this</span>. armor = armor;  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-built_in">super</span>. toString ();  <br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;的血量是 &quot;</span> + hp;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span> <span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. name = name;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getHp</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> hp;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHp</span> <span class="hljs-params">(<span class="hljs-type">float</span> hp)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. hp = hp;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getArmor</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> armor;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArmor</span> <span class="hljs-params">(<span class="hljs-type">int</span> armor)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. armor = armor;  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span> <span class="hljs-params">(Hero h)</span> &#123;  <br>        <span class="hljs-keyword">if</span> (hp &lt; h.getHp ())  <br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">//TestComparable. java</span><br>List&lt;Hero&gt; heroes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  <br>            heroes. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero&quot;</span> + i, r.nextFloat (), r.nextInt ()));  <br>        &#125;  <br>        System. out. println (<span class="hljs-string">&quot;初始化后的集合：&quot;</span>);  <br>        System. out. println (heroes);<br>        System. out. println (<span class="hljs-string">&quot;按照血量排序后的集合：&quot;</span>);  <br>        System. out. println (heroes);<br></code></pre></td></tr></table></figure><h4 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h4>JDK 8 之后，引入了<strong>对集合的聚合操作</strong>，可以非常容易的<strong>遍历，筛选，比较</strong>集合中的元素。用好聚合的前提是必须先掌握 <a href="https://how2j.cn/k/lambda/lambda-lamdba-tutorials/697.html">Lambda表达式</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span>heros<br>.stream ()<br>.sorted ((h <span class="hljs-number">1</span>, h <span class="hljs-number">2</span>)-&gt;h <span class="hljs-number">1.</span> hp&gt;h <span class="hljs-number">2.</span> hp?-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>)<br>.skip (<span class="hljs-number">2</span>)<br>.map (h-&gt;h.getName ())<br>.findFirst ()<br>.get ();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();<br>        List&lt;Hero&gt; heros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Hero&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero &quot;</span> + i, r.nextInt (<span class="hljs-number">1000</span>), r.nextInt (<span class="hljs-number">100</span>)));<br>        &#125;<br>        System. out. println (<span class="hljs-string">&quot;初始化集合后的数据 (最后一个数据重复)：&quot;</span>);<br>        System. out. println (heros);<br>        <span class="hljs-comment">//传统方式</span><br>        Collections. sort (heros, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Hero&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span> <span class="hljs-params">(Hero o <span class="hljs-number">1</span>, Hero o <span class="hljs-number">2</span>)</span> &#123;<br>                <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (o <span class="hljs-number">2.</span> hp-o <span class="hljs-number">1.</span> hp);<br>            &#125;<br>        &#125;);<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> heros. get (<span class="hljs-number">2</span>);<br>        System. out. println (<span class="hljs-string">&quot;通过传统方式找出来的 hp 第三高的英雄名称是: &quot;</span> + hero. name);<br>        <span class="hljs-comment">//聚合方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span>heros<br>            .stream ()<br>            .sorted ((h <span class="hljs-number">1</span>, h <span class="hljs-number">2</span>)-&gt;h <span class="hljs-number">1.</span> hp&gt;h <span class="hljs-number">2.</span> hp?-<span class="hljs-number">1</span>:<span class="hljs-number">1</span>)<br>            .skip (<span class="hljs-number">2</span>)<br>            .map (h-&gt;h.getName ())<br>            .findFirst ()<br>            .get ();<br>        System. out. println (<span class="hljs-string">&quot;通过聚合操作找出来的 hp 第三高的英雄名称是: &quot;</span> + name);<br></code></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="容器的泛型"><a href="#容器的泛型" class="headerlink" title="容器的泛型"></a>容器的泛型</h4>优点：  <blockquote><ul><li>泛型的用法是在容器后面添加 <code>&lt;Type&gt;</code>  </li><li>Type 可以是类，抽象类，接口  </li><li>泛型表示这种容器，只能存放指定的类型。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;APHero&gt; heros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;APHero&gt;();<br>        <span class="hljs-comment">//只有 APHero 可以放进去    </span><br>        heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">APHero</span> ());<br>        <span class="hljs-comment">//ADHero 甚至放不进去</span><br>        <span class="hljs-comment">//heros. add (new ADHero ());</span><br>        <span class="hljs-comment">//获取的时候也不需要进行转型，因为取出来一定是 APHero</span><br>        <span class="hljs-type">APHero</span> <span class="hljs-variable">apHero</span> <span class="hljs-operator">=</span>  heros. get (<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h4 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h4>设计一个支持泛型的栈 MyStack<br>设计这个类的时候，在类的声明上，加上一个 <code>&lt;T&gt;</code>，表示该类支持泛型。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Generics;  <br><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">import</span> MyCharacter. Item;  <br><span class="hljs-keyword">import</span> java. util. LinkedList;  <br><span class="hljs-keyword">import</span> java. util. Random;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span>&lt;T&gt; &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> LinkedList&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        MyStack&lt;Hero&gt; heroMyStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyStack</span>&lt;&gt;();  <br>        heroMyStack. push (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;Hero 1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> (). nextFloat (), <span class="hljs-number">100</span>));  <br>        MyStack&lt;Item&gt; itemMyStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyStack</span>&lt;&gt;();  <br>        itemMyStack. push (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Item</span> () &#123;  <br>            <span class="hljs-meta">@Override</span>  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">disposable</span> <span class="hljs-params">()</span> &#123;  <br>                System. out. println (<span class="hljs-string">&quot;物品销毁了&quot;</span>);  <br>            &#125;  <br>        &#125;);  <br>        System. out. println (heroMyStack. peek ());  <br>        System. out. println (itemMyStack. peek ());  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span> <span class="hljs-params">(T t)</span> &#123;  <br>        list. addLast (t);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pull</span> <span class="hljs-params">()</span> &#123;  <br>        list. removeLast ();  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">peek</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> list. getLast ();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><h5 id="extends"><a href="#extends" class="headerlink" title="? extends"></a>? extends</h5><code>ArrayList heroList&lt;? extends Hero&gt;</code> 表示这是一个 Hero 泛型或者<strong>其子类</strong>泛型</li><li>heroList 的泛型可能是 Hero  </li><li>heroList 的泛型可能是 APHero  </li><li>heroList 的泛型可能是 ADHero<br>所以可以确凿的是，从 heroList 取出来的对象，一定是可以转型成 Hero 的, 但是，不能往里面放东西，因为  </li><li>放 APHero 就不满足 <code>&lt;ADHero&gt;</code>  </li><li>放 ADHero 又不满足 <code>&lt;APHero&gt;</code><br><img src="https://stepimagewm.how2j.cn/837.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;APHero&gt; apHeroList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;APHero&gt;();  <br>apHeroList. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">APHero</span> ());  <br>ArrayList&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span>&gt; heroList = apHeroList;  <br><span class="hljs-comment">//? extends Hero 表示这是一个 Hero 泛型的子类泛型  </span><br><span class="hljs-comment">//heroList 的泛型可以是 Hero  </span><br><span class="hljs-comment">//heroList 的泛型可以使 APHero  </span><br><span class="hljs-comment">//heroList 的泛型可以使 ADHero  </span><br><span class="hljs-comment">//可以确凿的是，从 heroList 取出来的对象，一定是可以转型成 Hero 的  </span><br><span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> heroList. get (<span class="hljs-number">0</span>);  <br><span class="hljs-comment">//但是，不能往里面放东西, 编译错误  </span><br>heroList. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span> ()); <span class="hljs-comment">//编译错误，因为 heroList 的泛型有可能是 APHero</span><br></code></pre></td></tr></table></figure><h5 id="super-1"><a href="#super-1" class="headerlink" title="? super"></a>? super</h5><code>ArrayList heroList&lt;? super Hero&gt;</code> 表示这是一个 Hero 泛型或者其<strong>父类泛型</strong></li><li>heroList 的泛型可能是 Hero  </li><li>heroList 的泛型可能是 Object  <blockquote><p>可以往里面插入 Hero 以及 Hero 的子类<br>但是取出来有风险，因为不确定取出来是 Hero 还是 Object<br><img src="https://stepimagewm.how2j.cn/838.png"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;? <span class="hljs-built_in">super</span> Hero&gt; heroList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();  <br><span class="hljs-comment">//? super Hero 表示 heroList 的泛型是 Hero 或者其父类泛型  </span><br><span class="hljs-comment">//heroList 的泛型可以是 Hero  </span><br><span class="hljs-comment">//heroList 的泛型可以是 Object  </span><br><span class="hljs-comment">//所以就可以插入 Hero  </span><br>heroList. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ());  <br><span class="hljs-comment">//也可以插入 Hero 的子类  </span><br>heroList. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">APHero</span> ());  <br>heroList. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span> ());  <br><span class="hljs-comment">//但是，不能从里面取数据出来, 因为其泛型可能是 Object, 而 Object 是强转 Hero 会失败  </span><br><span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> heroList. get (<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h5 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符?"></a>泛型通配符?</h5>泛型通配符? 代表<strong>任意泛型</strong>  ，这个容器什么泛型都有可能 ,所以只能以 <strong>Object</strong> 的形式取出来 ,并且<strong>不能往里面放对象</strong>，因为不知道到底是一个什么泛型的容器<br><img src="https://stepimagewm.how2j.cn/836.png"><blockquote><ol><li>如果希望只取出，不插入，就使用? extends Hero  </li><li>如果希望只插入，不取出，就使用? super Hero  </li><li>如果希望，又能插入，又能取出，就不要用通配符？</li></ol></blockquote><h5 id="泛型转型"><a href="#泛型转型" class="headerlink" title="泛型转型"></a>泛型转型</h5><h6 id="子类泛型转父类泛型"><a href="#子类泛型转父类泛型" class="headerlink" title="子类泛型转父类泛型"></a>子类泛型转父类泛型</h6><blockquote><p><strong>子类泛型无法转为父类泛型</strong><br><img src="https://stepimagewm.how2j.cn/835.png"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Hero&gt; hs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>ArrayList&lt;ADHero&gt; adhs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br><span class="hljs-comment">//子类泛型转父类泛型  </span><br>hs = adhs;<br></code></pre></td></tr></table></figure><h6 id="父类泛型转子类泛型"><a href="#父类泛型转子类泛型" class="headerlink" title="父类泛型转子类泛型"></a>父类泛型转子类泛型</h6><blockquote><p><strong>父类泛型不可以转子类泛型</strong><br>[!NOTE]<br><strong>引用类型</strong>决定容器<strong>取出元素的类型</strong>，引用指向的<strong>对象的类型</strong>决定容器可以<strong>操作（增删改查）的类型</strong></p></blockquote><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://zhuanlan.zhihu.com/p/593602322<br>title: &quot;万字长文详解Java lambda表达式&quot;<br>description: &quot;简介： 详细介绍java lambda的各种使用方式以及lambda的实行原理和序列化原理 本文的脉络如下 Lambda介绍何为lambda咱们首先来说说 Lambda 这个名字，Lambda 并不是一个什么的缩写，它是希腊第十一个字母 λ 的读…&quot;<br>host: zhuanlan.zhihu.com<br>image: https://pic1.zhimg.com/v2-1d5b8bd96ea9c5504d75317a26522be1_720w.jpg?source=172ae18b<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/593602322">万字长文详解Java lambda表达式 - 知乎</a><br>它们要么返回一个值要么执行一段方法<br>缺点：</p><ol><li>可读性差，与啰嗦的但是清晰的匿名类代码结构比较起来，Lambda 表达式一旦变得比较长，就难以理解  </li><li>不便于调试，很难在 Lambda 表达式中增加调试信息，比如日志  </li><li>版本支持，Lambda 表达式在 JDK 8 版本中才开始支持，如果系统使用的是以前的版本，考虑系统的稳定性等原因，而不愿意升级，那么就无法使用。<h4 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h4>使用一个普通方法，在 for 循环遍历中进行条件判断，筛选出满足条件的数据<br>==hp&gt;100 &amp;&amp; damage&lt;50==<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();<br>    List&lt;Hero&gt; heros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Hero&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero &quot;</span> + i, r.nextInt (<span class="hljs-number">1000</span>), r.nextInt (<span class="hljs-number">100</span>)));<br>    &#125;<br>    System. out. println (<span class="hljs-string">&quot;初始化后的集合：&quot;</span>);<br>    System. out. println (heros);<br>    System. out. println (<span class="hljs-string">&quot;筛选出 hp&gt;100 &amp;&amp; damange&lt;50 的英雄&quot;</span>);<br>    filter (heros);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">filter</span> <span class="hljs-params">(List&lt;Hero&gt; heros)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Hero hero : heros) &#123;<br>        <span class="hljs-keyword">if</span> (hero. hp&gt;<span class="hljs-number">100</span> &amp;&amp; hero. damage&lt;<span class="hljs-number">50</span>)<br>            System. out. print (hero);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="匿名类方式"><a href="#匿名类方式" class="headerlink" title="匿名类方式"></a>匿名类方式</h4>首先准备一个接口 HeroChecker，提供一个 test (Hero)方法，然后通过匿名类的方式，实现这个接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();<br>    List&lt;Hero&gt; heros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Hero&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero &quot;</span> + i, r.nextInt (<span class="hljs-number">1000</span>), r.nextInt (<span class="hljs-number">100</span>)));<br>    &#125;<br>    System. out. println (<span class="hljs-string">&quot;初始化后的集合：&quot;</span>);<br>    System. out. println (heros);<br>    System. out. println (<span class="hljs-string">&quot;使用匿名类的方式，筛选出 hp&gt;100 &amp;&amp; damange&lt;50 的英雄&quot;</span>);<br>    <span class="hljs-type">HeroChecker</span> <span class="hljs-variable">checker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroChecker</span> () &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span> <span class="hljs-params">(Hero h)</span> &#123;<br>            <span class="hljs-keyword">return</span> (h.hp&gt;<span class="hljs-number">100</span> &amp;&amp; h.damage&lt;<span class="hljs-number">50</span>);<br>        &#125;<br>    &#125;;<br>    filter (heros, checker);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">filter</span> <span class="hljs-params">(List&lt;Hero&gt; heros, HeroChecker checker)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Hero hero : heros) &#123;<br>        <span class="hljs-keyword">if</span> (checker. test (hero))<br>            System. out. print (hero);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Lambda-方式"><a href="#Lambda-方式" class="headerlink" title="Lambda 方式"></a>Lambda 方式</h4>使用 Lambda 方式筛选出数据<br><code>filter (heros, (h)-&gt;h.hp&gt;100 &amp;&amp; h.damage&lt;50);</code><br>同样是调用 <code>filter</code> 方法，从上一步的传递匿名类对象，变成了传递一个 Lambda 表达式进去<br><code>h-&gt;h.hp&gt;100 &amp;&amp; h.damage&lt;50</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//TestLambda. java</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();  <br>        List&lt;Hero&gt; heros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Hero&gt;();  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;  <br>            heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero &quot;</span> + i, r.nextFloat (<span class="hljs-number">1000</span>), r.nextInt (<span class="hljs-number">100</span>)));  <br>        &#125;  <br>        System. out. println (<span class="hljs-string">&quot;初始化后的集合：&quot;</span>);  <br>        System. out. println (heros);  <br>        System. out. println (<span class="hljs-string">&quot;使用 Lamdba 的方式，筛选出 hp&gt;100 &amp;&amp; damange&lt;50 的英雄&quot;</span>);  <br>        filter (heros, h -&gt; h.getHp () &gt; <span class="hljs-number">100</span> &amp;&amp; h.getArmor () &lt; <span class="hljs-number">50</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">filter</span> <span class="hljs-params">(List&lt;Hero&gt; heros, HeroChecker checker)</span> &#123;  <br>        <span class="hljs-keyword">for</span> (Hero hero : heros) &#123;  <br>            <span class="hljs-keyword">if</span> (checker. test (hero))  <br>                System. out. print (hero);  <br>        &#125;  <br>    &#125;<br><span class="hljs-comment">//HeroChecker. java</span><br><span class="hljs-keyword">package</span> Lambda;  <br><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HeroChecker</span> &#123;  <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span> <span class="hljs-params">(Hero h)</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="匿名类-gt-Lambda-表达式"><a href="#匿名类-gt-Lambda-表达式" class="headerlink" title="匿名类-&gt;Lambda 表达式"></a>匿名类-&gt;Lambda 表达式</h4></li><li>匿名类的正常写法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">HeroChecker c <span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroChecker</span> () &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span> <span class="hljs-params">(Hero h)</span> &#123;<br><span class="hljs-keyword">return</span> (h.hp&gt;<span class="hljs-number">100</span> &amp;&amp; h.damage&lt;<span class="hljs-number">50</span>);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>把外面的壳子去掉<br>只保留方法参数和方法体<br>参数和方法体之间加上符号 -&gt;  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">HeroChecker c <span class="hljs-number">2</span> = (Hero h) -&gt;&#123;<br><span class="hljs-keyword">return</span> h.hp&gt;<span class="hljs-number">100</span> &amp;&amp; h.damage&lt;<span class="hljs-number">50</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li>把 return 和{}去掉<br><code>HeroChecker c 3 = (Hero h) -&gt;h.hp&gt;100 &amp;&amp; h.damage&lt;50;</code></li><li>把参数类型和圆括号去掉 (只有一个参数的时候，才可以去掉圆括号)<br><code>HeroChecker c 4 = h -&gt;h.hp&gt;100 &amp;&amp; h.damage&lt;50;</code></li><li>把 c 4 作为参数传递进去<br><code>filter (heros, c 4);</code></li><li>直接把表达式传递进去<br><code>filter (heros, h -&gt; h.hp &gt; 100 &amp;&amp; h.damage &lt; 50);</code><blockquote><p>[!NOTE]<br>与<a href="https://how2j.cn/k/interface-inheritance/interface-inheritance-inner-class/322.html#step687">匿名类</a> 概念相比较，<br>Lambda 其实就是<strong>匿名方法</strong>，这是一种把<strong>方法作为参数进行传递</strong>的编程思想。</p></blockquote><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><h5 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h5>首先为 TestLambda 添加一个静态方法：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">testHero</span> <span class="hljs-params">(Hero h)</span> &#123;<br><span class="hljs-keyword">return</span> h.hp&gt;<span class="hljs-number">100</span> &amp;&amp; h.damage&lt;<span class="hljs-number">50</span>;<br>&#125;<br></code></pre></td></tr></table></figure>Lambda 表达式：<br><code>filter (heros, h-&gt;h.hp&gt;100 &amp;&amp; h.damage&lt;50);</code><br>在 Lambda 表达式中调用这个静态方法：<br><code>filter (heros, h -&gt; TestLambda. testHero (h) );</code><br>调用静态方法还可以改写为：<br><code>filter (heros, TestLambda::testHero);</code><h5 id="引用对象方法"><a href="#引用对象方法" class="headerlink" title="引用对象方法"></a>引用对象方法</h5>与引用静态方法很类似，只是传递方法的时候，需要一个对象的存在<br><code>TestLambda testLambda = new TestLambda ();</code><br><code>filter (heros, testLambda::testHero);</code><h5 id="引用容器中的对象的方法"><a href="#引用容器中的对象的方法" class="headerlink" title="引用容器中的对象的方法"></a>引用容器中的对象的方法</h5>首先为 Hero 添加一个方法  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matched</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>. hp&gt;<span class="hljs-number">100</span> &amp;&amp; <span class="hljs-built_in">this</span>. damage&lt;<span class="hljs-number">50</span>;<br>&#125;<br></code></pre></td></tr></table></figure>使用 Lambda 表达式<br><code>filter (heros, h-&gt; h.hp&gt;100 &amp;&amp; h.damage&lt;50 );</code><br>在 Lambda 表达式中调用容器中的对象 Hero 的方法 matched<br><code>filter (heros, h-&gt; h.matched () );</code><br>matched 恰好就是容器中的对象 Hero 的方法，那就可以进一步改写为<br><code>filter (heros, Hero::matched);</code><h5 id="用构造器"><a href="#用构造器" class="headerlink" title="用构造器"></a>用构造器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Lambda;  <br><span class="hljs-keyword">import</span> java. util. ArrayList;  <br><span class="hljs-keyword">import</span> java. util. List;  <br><span class="hljs-keyword">import</span> java. util. function. Supplier;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestConstructor</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        Supplier&lt;List&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Supplier</span>&lt;List&gt;() &#123;  <br>            <span class="hljs-keyword">public</span> List <span class="hljs-title function_">get</span> <span class="hljs-params">()</span> &#123;  <br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span> ();  <br>            &#125;  <br>        &#125;;  <br>        <span class="hljs-comment">//匿名类  </span><br>        List list <span class="hljs-number">1</span> = getList (s);  <br>        <span class="hljs-comment">//Lambda 表达式  </span><br>        List list <span class="hljs-number">2</span> = getList (() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span> ());  <br>        <span class="hljs-comment">//引用构造器  </span><br>        List list <span class="hljs-number">3</span> = getList (ArrayList::<span class="hljs-keyword">new</span>);  <br>        System. out. println (list <span class="hljs-number">1.</span> hashCode ());  <br>        System. out. println (list <span class="hljs-number">2.</span> hashCode ());  <br>        System. out. println (list <span class="hljs-number">3.</span> hashCode ());  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List <span class="hljs-title function_">getList</span> <span class="hljs-params">(Supplier&lt;List&gt; s)</span> &#123;  <br>        <span class="hljs-keyword">return</span> s.get ();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="聚合操作-1"><a href="#聚合操作-1" class="headerlink" title="聚合操作"></a>聚合操作</h4><h5 id="传统方式与聚合操作方式遍历数据"><a href="#传统方式与聚合操作方式遍历数据" class="headerlink" title="传统方式与聚合操作方式遍历数据"></a>传统方式与聚合操作方式遍历数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();  <br>List&lt;Hero&gt; heros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Hero&gt;();  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;  <br>    heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero &quot;</span> + i, r.nextInt (<span class="hljs-number">1000</span>), r.nextInt (<span class="hljs-number">100</span>)));  <br>&#125;  <br>System. out. println (<span class="hljs-string">&quot;初始化后的集合：&quot;</span>);  <br>System. out. println (heros);  <br>System. out. println (<span class="hljs-string">&quot;查询条件：hp&gt;100 &amp;&amp; damage&lt;50&quot;</span>);  <br>System. out. println (<span class="hljs-string">&quot;通过传统操作方式找出满足条件的数据：&quot;</span>);  <br><span class="hljs-keyword">for</span> (Hero h : heros) &#123;  <br>    <span class="hljs-keyword">if</span> (h.getHp () &gt; <span class="hljs-number">100</span> &amp;&amp; h.getArmor () &lt; <span class="hljs-number">50</span>)  <br>        System. out. println (h.getName ());  <br>&#125;  <br>System. out. println (<span class="hljs-string">&quot;通过聚合操作方式找出满足条件的数据：&quot;</span>);  <br>heros  <br>        .stream ()  <br>        .filter (h -&gt; h.getHp () &gt; <span class="hljs-number">100</span> &amp;&amp; h.getArmor () &lt; <span class="hljs-number">50</span>)  <br>        .forEach (h -&gt; System. out. println (h.getName ()));<br></code></pre></td></tr></table></figure><h5 id="Stream-和管道的概念"><a href="#Stream-和管道的概念" class="headerlink" title="Stream 和管道的概念"></a>Stream 和管道的概念</h5>要了解聚合操作，首先要建立 Stream 和管道的概念<blockquote><p><strong>Stream</strong> 和 <strong>Collection</strong> 结构化的数据不一样，Stream 是<strong>一系列的元素</strong>，就像是生产线上的罐头一样，一串串的出来。<br><strong>管道</strong>指的是<strong>一系列的聚合操作</strong>。<br>管道又分 3 个部分： </p><ol><li><strong>管道源</strong>：在这个例子里，源是一个 List  </li><li><strong>中间操作</strong>： 每个中间操作，又会返回一个 Stream，比如. filter ()又返回一个 Stream, <strong>中间操作是“懒”操作，并不会真正进行遍历</strong>。  </li><li><strong>结束操作</strong>：当这个操作执行后，流就被使用“光”了，<strong>无法再被操作</strong>。所以这必定是流的最后一个操作。结束操作不会返回 Stream，但是会返回 int、float、String、 Collection 或者像 forEach，什么都不返回, <strong>结束操作才进行真正的遍历行为</strong>，在遍历的时候，才会去进行中间操作的相关判断<br>（1）管道源<br>把 Collection 切换成管道源很简单，调用 <code>stream ()</code> 就行了。<br><code>heros. stream ()</code><br>但是<strong>数组</strong>却<strong>没有 stream ()方法</strong>，需要使用<br><code>Arrays. stream (hs)</code> 或者 <code>Stream. of (hs)</code><br>（2）中间操作<br>中间操作比较多，主要分两类<br>对元素进行<strong>筛选和转换</strong>为其他形式的流  </li></ol></blockquote></li></ol><ul><li>==对元素进行筛选==：  <blockquote><ol><li>filter 匹配  </li><li>distinct 去除重复 (根据 equals 判断)  </li><li>sorted 自然排序  </li><li>sorted (<code>Comparator&lt;T&gt;</code>) 指定排序  </li><li>limit 保留  </li><li>skip 忽略  </li></ol></blockquote></li><li>==转换为其他形式的流==  <blockquote><ol><li>mapToDouble 转换为 double 的流  </li><li>map 转换为任意类型的流</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();  <br>List&lt;Hero&gt; heros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Hero&gt;();  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;  <br>    heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero &quot;</span> + i, r.nextFloat (<span class="hljs-number">1000</span>), r.nextInt (<span class="hljs-number">100</span>)));  <br>&#125;  <br><span class="hljs-comment">//制造一个重复数据  </span><br>heros. add (heros. get (<span class="hljs-number">0</span>));  <br>System. out. println (<span class="hljs-string">&quot;初始化集合后的数据 (最后一个数据重复)：&quot;</span>);  <br>System. out. println (heros);  <br>System. out. println (<span class="hljs-string">&quot;满足条件 getgetHp ()()&gt;100&amp;&amp;damage&lt;50 的数据&quot;</span>);  <br>heros  <br>        .stream ()  <br>        .filter (h -&gt; h.getHp () &gt; <span class="hljs-number">100</span> &amp;&amp; h.getArmor () &lt; <span class="hljs-number">50</span>)  <br>        .forEach (h -&gt; System. out. print (h));  <br>System. out. println (<span class="hljs-string">&quot;去除重复的数据，去除标准是看 equals&quot;</span>);  <br>heros  <br>        .stream ()  <br>        .distinct ()  <br>        .forEach (h -&gt; System. out. print (h));  <br>System. out. println (<span class="hljs-string">&quot;按照血量排序&quot;</span>);  <br>heros  <br>        .stream ()  <br>        .sorted ((h <span class="hljs-number">1</span>, h <span class="hljs-number">2</span>) -&gt; h <span class="hljs-number">1.</span> getHp () &gt;= h <span class="hljs-number">2.</span> getHp () ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>)  <br>        .forEach (h -&gt; System. out. print (h));  <br>System. out. println (<span class="hljs-string">&quot;保留 3 个&quot;</span>);  <br>heros  <br>        .stream ()  <br>        .limit (<span class="hljs-number">3</span>)  <br>        .forEach (h -&gt; System. out. print (h));  <br>System. out. println (<span class="hljs-string">&quot;忽略前 3 个&quot;</span>);  <br>heros  <br>        .stream ()  <br>        .skip (<span class="hljs-number">3</span>)  <br>        .forEach (h -&gt; System. out. print (h));  <br>System. out. println (<span class="hljs-string">&quot;转换为 double 的 Stream&quot;</span>);  <br>heros  <br>        .stream ()  <br>        .mapToDouble (Hero::getHp)  <br>        .forEach (h -&gt; System. out. println (h));  <br>System. out. println (<span class="hljs-string">&quot;转换任意类型的 Stream&quot;</span>);  <br>heros  <br>        .stream ()  <br>        .map ((h) -&gt; h.getName () + <span class="hljs-string">&quot; - &quot;</span> + h.getHp () + <span class="hljs-string">&quot; - &quot;</span> + h.getArmor ())  <br>        .forEach (h -&gt; System. out. println (h));<br></code></pre></td></tr></table></figure>（3）结束操作<br>结束操作才真正进行遍历行为，前面的中间操作也在这个时候，才真正的执行。<br>常见结束操作如下：  <blockquote><ol><li>forEach () 遍历每个元素  </li><li>toArray () 转换为数组  </li><li>min (<code>Comparator&lt;T&gt;</code>) 取最小的元素  </li><li>max (<code>Comparator&lt;T&gt;</code>) 取最大的元素  </li><li>count () 总数  </li><li>findFirst () 第一个元素</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span> ();  <br>List&lt;Hero&gt; heros = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Hero&gt;();  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;  <br>    heros. add (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;hero &quot;</span> + i, r.nextFloat (<span class="hljs-number">1000</span>), r.nextInt (<span class="hljs-number">100</span>)));  <br>&#125;  <br>System. out. println (<span class="hljs-string">&quot;遍历集合中的每个数据&quot;</span>);  <br>heros  <br>        .stream ()  <br>        .forEach (h -&gt; System. out. print (h));  <br>System. out. println (<span class="hljs-string">&quot;返回一个数组&quot;</span>);  <br>Object[] hs = heros  <br>        .stream ()  <br>        .toArray ();  <br>System. out. println (Arrays. toString (hs));  <br>System. out. println (<span class="hljs-string">&quot;返回护甲最低的那个英雄&quot;</span>);  <br><span class="hljs-type">Hero</span> <span class="hljs-variable">minDamageHero</span> <span class="hljs-operator">=</span>  <br>        heros  <br>                .stream ()  <br>                .min ((h <span class="hljs-number">1</span>, h <span class="hljs-number">2</span>) -&gt; h <span class="hljs-number">1.</span> getArmor () - h <span class="hljs-number">2.</span> getArmor ())  <br>                .get ();  <br>System. out. print (minDamageHero);  <br>System. out. println (<span class="hljs-string">&quot;返回护甲最高的那个英雄&quot;</span>);  <br><span class="hljs-type">Hero</span> <span class="hljs-variable">mxnDamageHero</span> <span class="hljs-operator">=</span>  <br>        heros  <br>                .stream ()  <br>                .max ((h <span class="hljs-number">1</span>, h <span class="hljs-number">2</span>) -&gt; h <span class="hljs-number">1.</span> getArmor () - h <span class="hljs-number">2.</span> getArmor ())  <br>                .get ();  <br>System. out. print (mxnDamageHero);  <br>System. out. println (<span class="hljs-string">&quot;流中数据的总数&quot;</span>);  <br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> heros  <br>        .stream ()  <br>        .count ();  <br>System. out. println (count);  <br>System. out. println (<span class="hljs-string">&quot;第一个英雄&quot;</span>);  <br><span class="hljs-type">Hero</span> <span class="hljs-variable">firstHero</span> <span class="hljs-operator">=</span>  <br>        heros  <br>                .stream ()  <br>                .findFirst ()  <br>                .get ();  <br>System. out. println (firstHero);<br></code></pre></td></tr></table></figure><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4>获取本机 IP 地址：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InetAddress</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> InetAddress. getLocalHost ();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span>host. getHostAddress ();<br>        System. out. println (<span class="hljs-string">&quot;本机 ip 地址：&quot;</span> + ip);<br></code></pre></td></tr></table></figure><h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4>使用 Socket (套接字)进行不同的程序之间的通信<h5 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h5></li></ul><ol><li>服务端开启 8888 端口，并监听着，时刻等待着客户端的连接请求  </li><li>客户端知道服务端的 ip 地址和监听端口号，发出请求到服务端<br>客户端的端口地址是系统分配的，通常都会大于 1024<br>一旦建立了连接，<strong>服务端</strong>会得到一个新的<strong>Socket 对象</strong>，该对象负责与客户端进行通信。  <blockquote><p>注意： 在开发调试的过程中，如果修改过了服务器 Server 代码，要关闭启动的 Server, 否则新的 Server 不能启动，因为 8888 端口被占用了<br><img src="https://stepimagewm.how2j.cn/882.png"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Server. java</span><br><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. net. ServerSocket;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span>  &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//服务端打开端口 8888</span><br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span> (<span class="hljs-number">8888</span>);<br>            <span class="hljs-comment">//在 8888 端口上监听，看是否有连接请求过来</span><br>            System. out. println (<span class="hljs-string">&quot;监听在端口号: 8888&quot;</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span>  ss. accept ();<br>            System. out. println (<span class="hljs-string">&quot;有连接过来&quot;</span> + s);<br>            s.close ();<br>            ss. close ();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Client. java</span><br><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">import</span> java. net. UnknownHostException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span>  &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//连接到本机的 8888 端口</span><br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span> (<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>            System. out. println (s);<br>            s.close ();<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="收发数字"><a href="#收发数字" class="headerlink" title="收发数字"></a>收发数字</h5>一旦建立了连接，服务端和客户端就可以通过 Socket 进行通信了  </li><li>客户端打开输出流，并发送数字 110  </li><li>服务端打开输入流，接受数字 110，并打印<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Server. java</span><br><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. io. InputStream;<br><span class="hljs-keyword">import</span> java. net. ServerSocket;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span> (<span class="hljs-number">8888</span>);<br>            System. out. println (<span class="hljs-string">&quot;监听在端口号: 8888&quot;</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ss. accept ();<br>            <span class="hljs-comment">//打开输入流</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> s.getInputStream ();<br>            <span class="hljs-comment">//读取客户端发送的数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> is. read ();<br>            <span class="hljs-comment">//打印出来</span><br>            System. out. println (msg);<br>            is. close ();<br>            s.close ();<br>            ss. close ();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Client. java</span><br><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. io. OutputStream;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">import</span> java. net. UnknownHostException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span> (<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>            <span class="hljs-comment">// 打开输出流</span><br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> s.getOutputStream ();<br>            <span class="hljs-comment">// 发送数字 110 到服务端</span><br>            os. write (<span class="hljs-number">110</span>);<br>            os. close ();<br>            s.close ();<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="收发字符串"><a href="#收发字符串" class="headerlink" title="收发字符串"></a>收发字符串</h5>直接使用字节流收发字符串比较麻烦，使用<a href="https://how2j.cn/k/io/io-datastream/350.html#step771">数据流</a>对字节流进行封装，这样收发字符串就容易了  </li><li>把输出流封装在 <strong>DataOutputStream</strong> 中<br>使用 <strong>writeUTF</strong> 发送字符串 “Legendary!”  </li><li>把输入流封装在 <strong>DataInputStream</strong><br>使用 <strong>readUTF</strong> 读取字符串, 并打印<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Server. java</span><br><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. DataInputStream;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. io. InputStream;<br><span class="hljs-keyword">import</span> java. net. ServerSocket;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span> (<span class="hljs-number">8888</span>);<br>            System. out. println (<span class="hljs-string">&quot;监听在端口号: 8888&quot;</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ss. accept ();<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> s.getInputStream ();<br>            <span class="hljs-comment">//把输入流封装在 DataInputStream</span><br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span> (is);<br>            <span class="hljs-comment">//使用 readUTF 读取字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> dis. readUTF ();<br>            System. out. println (msg);<br>            dis. close ();<br>            s.close ();<br>            ss. close ();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Client. java</span><br><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. DataOutputStream;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. io. OutputStream;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">import</span> java. net. UnknownHostException;<br><span class="hljs-keyword">import</span> java. util. Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span> (<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> s.getOutputStream ();<br>            <span class="hljs-comment">//把输出流封装在 DataOutputStream 中</span><br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span> (os);<br>            <span class="hljs-comment">//使用 writeUTF 发送字符串</span><br>            dos. writeUTF (<span class="hljs-string">&quot;Legendary!&quot;</span>);<br>            dos. close ();<br>            s.close ();<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用-Scanner"><a href="#使用-Scanner" class="headerlink" title="使用 Scanner"></a>使用 Scanner</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. DataOutputStream;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. io. OutputStream;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">import</span> java. net. UnknownHostException;<br><span class="hljs-keyword">import</span> java. util. Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span> (<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> s.getOutputStream ();<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span> (os);<br>            <span class="hljs-comment">//使用 Scanner 读取控制台的输入，并发送到服务端</span><br>            <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span> (System. in);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc. next ();<br>            dos. writeUTF (str);<br>            dos. close ();<br>            s.close ();<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多线程聊天"><a href="#多线程聊天" class="headerlink" title="多线程聊天"></a>多线程聊天</h4>为了实现<strong>同时收发消息</strong>，就需要用到多线程<br>因为接受和发送都在主线程中，不能同时进行。为了实现同时收发消息，基本设计思路是把收发分别放在不同的线程中进行  <blockquote><ol><li>SendThread 发送消息线程  </li><li>RecieveThread 接受消息线程  </li><li>Server 一旦接受到连接，就启动收发两个线程  </li><li>Client 一旦建立了连接，就启动收发两个线程<br>（1）SendThread. java</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. DataOutputStream;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. io. OutputStream;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">import</span> java. util. Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> Socket s;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SendThread</span> <span class="hljs-params">(Socket s)</span>&#123;<br>        <span class="hljs-built_in">this</span>. s = s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> s.getOutputStream ();<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span> (os);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span> (System. in);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sc. next ();<br>                dos. writeUTF (str);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>(2) RecieveThread. java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. DataInputStream;<br><span class="hljs-keyword">import</span> java. io. DataOutputStream;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. io. InputStream;<br><span class="hljs-keyword">import</span> java. io. OutputStream;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">import</span> java. util. Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecieveThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Socket s;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RecieveThread</span> <span class="hljs-params">(Socket s)</span> &#123;<br>        <span class="hljs-built_in">this</span>. s = s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> s.getInputStream ();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span> (is);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> dis. readUTF ();<br>                System. out. println (msg);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>(3) Server. java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. net. ServerSocket;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">ss</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span> (<span class="hljs-number">8888</span>);<br>            System. out. println (<span class="hljs-string">&quot;监听在端口号: 8888&quot;</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ss. accept ();<br>            <span class="hljs-comment">//启动发送消息线程</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendThread</span> (s). start ();<br>            <span class="hljs-comment">//启动接受消息线程</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecieveThread</span> (s). start ();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>(4) Server. java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> socket;<br><span class="hljs-keyword">import</span> java. io. IOException;<br><span class="hljs-keyword">import</span> java. net. Socket;<br><span class="hljs-keyword">import</span> java. net. UnknownHostException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span> (<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8888</span>);<br>            <span class="hljs-comment">// 启动发送消息线程</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendThread</span> (s). start ();<br>            <span class="hljs-comment">// 启动接受消息线程</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecieveThread</span> (s). start ();<br>        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h4>3 种方式：</li><li>继承 Thread 类，重写 run 方法</li><li>实现 Runnable 接口</li><li>匿名类<br>（1）继承 Thread 类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MutiThreads;  <br><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">import</span> exception. EnemyHeroIsDeadException;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Hero h <span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Hero h <span class="hljs-number">2</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTread</span> <span class="hljs-params">(Hero h <span class="hljs-number">1</span>, Hero h <span class="hljs-number">2</span>)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. h <span class="hljs-number">1</span> = h <span class="hljs-number">1</span>;  <br>        <span class="hljs-built_in">this</span>. h <span class="hljs-number">2</span> = h <span class="hljs-number">2</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">while</span> (! h <span class="hljs-number">2.</span> isDead ()) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                h <span class="hljs-number">1.</span> attack (h <span class="hljs-number">2</span>, <span class="hljs-number">40.0</span> f);  <br>            &#125; <span class="hljs-keyword">catch</span> (EnemyHeroIsDeadException e) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">//test</span><br><span class="hljs-keyword">package</span> MutiThreads;  <br><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMyThread</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">galen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;盖伦&quot;</span>, <span class="hljs-number">320.0</span> f, <span class="hljs-number">100</span>);  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">timo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;提莫&quot;</span>, <span class="hljs-number">200.0</span> f, <span class="hljs-number">120</span>);  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">libai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;李白&quot;</span>, <span class="hljs-number">210.0</span> f, <span class="hljs-number">100</span>);  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">hanxin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> (<span class="hljs-string">&quot;韩信&quot;</span>, <span class="hljs-number">220.0</span> f, <span class="hljs-number">110</span>);  <br>        MyTread killThread <span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTread</span> (galen, timo);  <br>        MyTread killThread <span class="hljs-number">2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTread</span> (libai, hanxin);  <br>        killThread <span class="hljs-number">1.</span> start ();  <br>        killThread <span class="hljs-number">2.</span> start ();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>（2）实现 Runnab 接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MutiThreads;  <br><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">import</span> exception. EnemyHeroIsDeadException;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Battle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Hero h <span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Hero h <span class="hljs-number">2</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Battle</span> <span class="hljs-params">(Hero h <span class="hljs-number">1</span>, Hero h <span class="hljs-number">2</span>)</span> &#123;  <br>        <span class="hljs-built_in">this</span>. h <span class="hljs-number">1</span> = h <span class="hljs-number">1</span>;  <br>        <span class="hljs-built_in">this</span>. h <span class="hljs-number">2</span> = h <span class="hljs-number">2</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">while</span> (! h <span class="hljs-number">2.</span> isDead ()) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                h <span class="hljs-number">1.</span> attack (h <span class="hljs-number">2</span>, h <span class="hljs-number">1.</span> getDamage ());  <br>            &#125; <span class="hljs-keyword">catch</span> (EnemyHeroIsDeadException e) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">//test</span><br><span class="hljs-keyword">package</span> MutiThreads;  <br><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">import</span> exception. EnemyHeroIsDeadException;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBattle</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">gareen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        gareen. setName (<span class="hljs-string">&quot;盖伦&quot;</span>);  <br>        gareen. setHp (<span class="hljs-number">616</span>);  <br>        gareen. setDamage (<span class="hljs-number">50</span>);  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">teemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        teemo. setName (<span class="hljs-string">&quot;提莫&quot;</span>);  <br>        teemo. setHp (<span class="hljs-number">300</span>);  <br>        teemo. setDamage (<span class="hljs-number">30</span>);  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">bh</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        bh. setName (<span class="hljs-string">&quot;赏金猎人&quot;</span>);  <br>        bh. setHp (<span class="hljs-number">500</span>);  <br>        bh. setDamage (<span class="hljs-number">65</span>);  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">leesin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        leesin. setName (<span class="hljs-string">&quot;盲僧&quot;</span>);  <br>        leesin. setHp (<span class="hljs-number">455</span>);  <br>        leesin. setDamage (<span class="hljs-number">80</span>);  <br>        Battle battle <span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Battle</span> (gareen, teemo);  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span> (battle <span class="hljs-number">1</span>). start ();  <br>        Battle battle <span class="hljs-number">2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Battle</span> (bh, leesin);  <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span> (battle <span class="hljs-number">2</span>). start ();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>（3）匿名类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> MyCharacter. Hero;  <br><span class="hljs-keyword">import</span> exception. EnemyHeroIsDeadException;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">anonymousThread</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">gareen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        gareen. setName (<span class="hljs-string">&quot;盖伦&quot;</span>);  <br>        gareen. setHp (<span class="hljs-number">616</span>);  <br>        gareen. setDamage (<span class="hljs-number">50</span>);  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">teemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        teemo. setName (<span class="hljs-string">&quot;提莫&quot;</span>);  <br>        teemo. setHp (<span class="hljs-number">300</span>);  <br>        teemo. setDamage (<span class="hljs-number">30</span>);  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">bh</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        bh. setName (<span class="hljs-string">&quot;赏金猎人&quot;</span>);  <br>        bh. setHp (<span class="hljs-number">500</span>);  <br>        bh. setDamage (<span class="hljs-number">65</span>);  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">leesin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();  <br>        leesin. setName (<span class="hljs-string">&quot;盲僧&quot;</span>);  <br>        leesin. setHp (<span class="hljs-number">455</span>);  <br>        leesin. setDamage (<span class="hljs-number">80</span>);  <br>        <span class="hljs-comment">//匿名类  </span><br>        Thread t <span class="hljs-number">1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span> () &#123;  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> &#123;  <br>                <span class="hljs-comment">//匿名类中用到外部的局部变量 teemo，必须把 teemo 声明为 final  </span><br>                <span class="hljs-comment">//但是在 JDK 7 以后，就不是必须加 final 的了                while (! teemo. isDead ()) &#123;  </span><br>                    <span class="hljs-keyword">try</span> &#123;  <br>                        gareen. attack (teemo, gareen. getDamage ());  <br>                    &#125; <span class="hljs-keyword">catch</span> (EnemyHeroIsDeadException e) &#123;  <br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>                    &#125;  <br>                &#125;  <br>            &#125;  <br>        &#125;;  <br>        t <span class="hljs-number">1.</span> start ();  <br>        Thread t <span class="hljs-number">2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span> () &#123;  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span> <span class="hljs-params">()</span> &#123;  <br>                <span class="hljs-keyword">while</span> (! leesin. isDead ()) &#123;  <br>                    <span class="hljs-keyword">try</span> &#123;  <br>                        bh. attack (leesin, bh. getDamage ());  <br>                    &#125; <span class="hljs-keyword">catch</span> (EnemyHeroIsDeadException e) &#123;  <br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span> (e);  <br>                    &#125;  <br>                &#125;  <br>            &#125;  <br>        &#125;;  <br>        t <span class="hljs-number">2.</span> start ();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注： 启动线程是 <code>start</code> ()方法，<code>run</code> ()并不能启动一个新的线程</p></blockquote><h4 id="常见线程方法"><a href="#常见线程方法" class="headerlink" title="常见线程方法"></a>常见线程方法</h4><table><thead><tr><th>关键字</th><th>简介</th><th>示例代码</th></tr></thead><tbody><tr><td>sleep</td><td>当前线程暂停</td><td><a href="https://how2j.cn/k/thread/thread-methods/354.html#step781">示例代码</a></td></tr><tr><td>join</td><td>加入到当前线程中</td><td><a href="https://how2j.cn/k/thread/thread-methods/354.html#step782">示例代码</a></td></tr><tr><td>setPriority</td><td>线程优先级</td><td><a href="https://how2j.cn/k/thread/thread-methods/354.html#step783">示例代码</a></td></tr><tr><td>yield</td><td>临时暂停</td><td><a href="https://how2j.cn/k/thread/thread-methods/354.html#step784">示例代码</a></td></tr><tr><td>setDaemon</td><td>守护线程</td><td><a href="https://how2j.cn/k/thread/thread-methods/354.html#step2403">示例代码</a></td></tr><tr><td>守护线程的概念是： 当一个进程里，所有的线程都是守护线程的时候，结束当前进程。</td><td></td><td></td></tr></tbody></table><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4>多线程的同步问题指的是多个线程同时修改一个数据的时候，可能导致的问题，多线程的问题，<strong>又叫 Concurrency</strong> 问题<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://how2j.cn/k/thread/thread-synchronized/355.html<br>title: &quot;多线程系列教材 （三）- Java 多线程同步 synchronized  详解&quot;<br>description: &quot;多线程的同步问题指的是多个线程同时修改一个数据的时候，可能导致的问题, 多线程的问题，又叫 Concurrency, 问题; 演示同步问题, 假设盖伦有 10000 滴血，并且在基地里，同时又被对方多个英雄攻击, 就是有多个线程在减少盖伦的 hp, 同时又有多个线程在回复盖伦的 hp, 假设线程的数量是一样的，并且每次改...&quot;<br>host: how 2 j. cn<br></code></pre></td></tr></table></figure><a href="https://how2j.cn/k/thread/thread-synchronized/355.html">多线程系列教材 （三）- Java 多线程同步 synchronized 详解</a><h5 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h5><blockquote><p>synchronized 表示当前线程，独占对象 someObject<br>当前线程独占了对象 someObject，如果有其他线程试图占有对象 someObject，就会等待，直到当前线程释放对 someObject 的占用。<br>someObject 又叫同步对象，所有的对象，都可以作为同步对象<br>为了达到同步的效果，必须使用同一个同步对象</p></blockquote><h5 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h5>与 synchronized 类似的，lock 也能够达到同步的效果<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4>每一个线程的启动和结束都是比较消耗时间和占用资源的。<br>如果在系统中用到了很多的线程，大量的启动和结束动作会导致系统的性能变卡，响应变慢。<br>为了解决这个问题，引入线程池这种设计思想。<br>线程池的模式很像<a href="https://how2j.cn/k/thread/thread-wait-notify/358.html#step2591">生产者消费者模式</a>，消费的对象是一个一个的能够运行的任务<h4 id="原子访问"><a href="#原子访问" class="headerlink" title="原子访问"></a>原子访问</h4>所谓的原子性操作即不可中断的操作，比如赋值操作<br><code>int i = 5;</code><br>原子性操作本身是线程安全的<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://how2j.cn/k/thread/thread-atomic-access/683.html<br>title: &quot;多线程系列教材 （九）- 原子访问&quot;<br>description: &quot;; 原子性操作概念, 所谓的原子性操作即不可中断的操作，比如赋值操作 int, i,=, 5; 原子性操作本身是线程安全的, 但是, i++, 这个行为，事实上是有 3 个原子性操作组成的。步骤, 1., 取, i, 的值步骤, 2., i,+, 1 步骤, 3., 把新的值赋予 i 这三个步骤，每一步都是一个原子操作，但是合在一起，就不是原子...&quot;<br>host: how 2 j. cn<br></code></pre></td></tr></table></figure><a href="https://how2j.cn/k/thread/thread-atomic-access/683.html">多线程系列教材 （九）- 原子访问</a><h5 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h5>JDK 6 以后，新增加了一个包<strong>java. util. concurrent. atomic</strong>，里面有各种原子类，比如 AtomicInteger。<br>而 AtomicInteger 提供了各<strong>种自增，自减</strong>等方法，这些方法都是原子性的。换句话说，自增方法 <strong>incrementAndGet 是线程安全</strong>的，同一个时间，只有一个线程可以调用这个方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> multiplethread;<br><span class="hljs-keyword">import</span> java. util. concurrent. atomic. AtomicInteger;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicI</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span> ();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> atomicI.decrementAndGet ();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> atomicI.incrementAndGet ();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> atomicI.addAndGet (<span class="hljs-number">3</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://how2j.cn/k/jdbc/jdbc-mysql/386.html<br>title: &quot;JDBC 系列教材 （一）- Java 使用 JDBC 之前，先要准备 mysql&quot;<br>description: &quot;JDBC, (Java, DataBase, Connection), 是通过 JAVA 访问数据库, 所以需要对数据库有基本的理解和应用; MySQL, Mysql 是常见的数据库, 在中小型网站经常被使用, 如果以前没有接触过 Mysql, 请参考, MySQL 入门, 章节的学习, 其中包含了 mysql, 服务器安装，客户端...&quot;<br>host: how 2 j. cn<br></code></pre></td></tr></table></figure><a href="https://how2j.cn/k/jdbc/jdbc-mysql/386.html">JDBC系列教材 （一）- Java 使用JDBC之前，先要准备mysql</a><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Jdbc;  <br><span class="hljs-keyword">import</span> java. sql.*;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestConnection</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span> <span class="hljs-params">(Statement s, String sql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;  <br>        s.execute (sql);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            Class.forName (<span class="hljs-string">&quot;com. mysql. jdbc. Driver&quot;</span>);  <br>            <span class="hljs-comment">/*  </span><br><span class="hljs-comment">             建立与数据库的 Connection 连接这里需要提供：             数据库所处于的 ip: 127.0.0.1 (本机)             数据库的端口号： 3306 （mysql 专用端口号）             数据库名称 how 2 java             编码方式 UTF-8             账号 root             密码 123456             */</span>            <span class="hljs-keyword">try</span> (  <br>                    <span class="hljs-type">Connection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> DriverManager  <br>                            .getConnection (  <br>                                    <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/how 2 java? characterEncoding=UTF-8&quot;</span>,  <br>                                    <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);  <br>                    <span class="hljs-type">Statement</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> c.createStatement ()  <br>            ) &#123;  <br>                <span class="hljs-comment">// 准备 sql 语句  </span><br>                <span class="hljs-comment">// 注意： 字符串要用单引号&#x27;//                String sql = &quot;insert into hero values (&quot; + null + &quot;,&quot; + &quot;&#x27;李白&#x27;&quot; + &quot;,&quot; + 100 + &quot;,&quot; + 313 + &quot;,&quot; + 200.0 f + &quot;)&quot;; //增  </span><br><span class="hljs-comment">//                String sql = &quot;delete from hero where id = 1&quot;; //删  </span><br><span class="hljs-comment">//                String sql = &quot;update hero set damage = 120 where id = 2&quot;; //改  </span><br><span class="hljs-comment">//                execute (s, sql);  </span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from hero&quot;</span>; <span class="hljs-comment">//查  </span><br>                <span class="hljs-comment">// 执行查询语句，并把结果集返回给 ResultSet                ResultSet rs = s.executeQuery (sql);  </span><br>                <span class="hljs-keyword">while</span> (rs.next ()) &#123;  <br>                    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt (<span class="hljs-string">&quot;id&quot;</span>);<span class="hljs-comment">// 可以使用字段名  </span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString (<span class="hljs-number">2</span>);<span class="hljs-comment">// 也可以使用字段的顺序  </span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">armor</span> <span class="hljs-operator">=</span> rs.getInt (<span class="hljs-string">&quot;armor&quot;</span>);  <br>                    <span class="hljs-type">float</span> <span class="hljs-variable">hp</span> <span class="hljs-operator">=</span> rs.getFloat (<span class="hljs-string">&quot;hp&quot;</span>);  <br>                    <span class="hljs-type">int</span> <span class="hljs-variable">damage</span> <span class="hljs-operator">=</span> rs.getInt (<span class="hljs-number">4</span>);  <br>                    System.out.printf (<span class="hljs-string">&quot;%d\t%s\t%d\t%f\t%d%n&quot;</span>, id, name, armor, hp, damage);  <br>                &#125;  <br>                System.out.println (<span class="hljs-string">&quot;执行查询语句成功&quot;</span>);  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;  <br>            <span class="hljs-comment">// TODO Auto-generated catch block  </span><br>            e.printStackTrace ();  <br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;  <br>            <span class="hljs-comment">// TODO Auto-generated catch block  </span><br>            e.printStackTrace ();  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="预编译-PreparedStatement"><a href="#预编译-PreparedStatement" class="headerlink" title="预编译 PreparedStatement"></a>预编译 PreparedStatement</h4>和 Statement 一样，PreparedStatement 也是用来<strong>执行 sql 语句</strong>的<br>与创建 Statement 不同的是，需要<strong>根据 sql 语句创建 PreparedStatement</strong><br>除此之外，还能够通过<strong>设置参数，指定相应的值</strong>，而不是 Statement 那样使用字符串拼接<br>注： 这是 JAVA 里唯二的基 1 的地方，另一个是<a href="https://how2j.cn/k/jdbc/jdbc-resultset/390.html#step866">查询语句</a>中的 ResultSet 也是基 1 的。<br>优点：</li><li>参数设置<ul><li>Statement 需要进行字符串拼接，可读性和维护性比较差<br><code>String sql = &quot;insert into hero values (null,&quot;+&quot;&#39;提莫&#39;&quot;+&quot;,&quot;+313.0 f+&quot;,&quot;+50+&quot;)&quot;;</code></li><li>PreparedStatement 使用参数设置，可读性好，不易犯错<br><code>String sql = &quot;insert into hero values (null,?,?,?)&quot;;</code></li></ul></li><li>性能表现<ul><li>PreparedStatement 有预编译机制，性能比 Statement 更快<ol><li>Statement 执行 10 次，需要 10 次把 SQL 语句传输到数据库端<br>数据库要对<strong>每一次来的 SQL 语句进行编译</strong>处理</li><li>PreparedStatement 执行 10 次，只需要<strong>1 次</strong>把 SQL 语句传输到数据库端<br>数据库对带? 的 SQL 进行预编译<br>每次执行，只需要<strong>传输参数</strong>到数据库端<ul><li><strong>网络传输量</strong>比 Statement 更小</li><li>数据库<strong>不需要再进行编译</strong>，响应更快</li></ul></li></ol></li></ul></li><li>防止 SQL 注入式攻击<br>假设 name 是用户提交来的数据<br>String name = “‘盖伦’ OR 1=1”;<br>使用 Statement 就需要进行<strong>字符串拼接</strong>，拼接出来的语句是：select * from hero where name = ‘盖伦’ OR 1=1，因为有 OR 1=1，这是恒成立的，那么就会把所有的英雄都查出来，而不只是盖伦如果 Hero 表里的数据是海量的，比如几百万条，把这个表里的数据全部查出来，会让<strong>数据库负载变高</strong>，CPU 100%，内存消耗光，响应变得极其缓慢，而 PreparedStatement 使用的是参数设置，就不会有这个问题<h4 id="execute-和-executeUpdate"><a href="#execute-和-executeUpdate" class="headerlink" title="execute 和 executeUpdate"></a>execute 和 executeUpdate</h4></li><li>相同点：<br>都可以执行<strong>增加，删除，修改</strong></li><li>不同点<ul><li>不同 1：<br>execute 可以<strong>执行查询</strong>语句，然后通过 <code>getResultSet</code>，把结果集取出来<br>executeUpdate 不能执行查询语句</li><li>不同 2：<br>execute 返回<strong>boolean 类型</strong>，<strong>true</strong> 表示执行的是<strong>查询语句</strong>，<strong>false</strong> 表示执行的是<strong>insert, delete, update</strong>等等<br>executeUpdate 返回的是<strong>int</strong>，表示<strong>有多少条数据受到了影响</strong><h4 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h4><h5 id="获取自增长-id"><a href="#获取自增长-id" class="headerlink" title="获取自增长 id"></a>获取自增长 id</h5>在 Statement 通过 execute 或者 executeUpdate 执行完插入语句后，MySQL 会为新插入的数据分配一个自增长 id，(前提是这个表的 id 设置为了自增长, 在 Mysql 创建表的时候，AUTO_INCREMENT 就表示自增长)，需要通过 Statement 的 getGeneratedKeys 获取该 id<br><code>PreparedStatement ps = c.prepareStatement (sql, Statement. RETURN_GENERATED_KEYS);</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在执行完插入语句后，MySQL 会为新插入的数据分配一个自增长 id</span><br>           <span class="hljs-comment">// JDBC 通过 getGeneratedKeys 获取该 id</span><br>           <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> ps.getGeneratedKeys ();<br>           <span class="hljs-keyword">if</span> (rs.next ()) &#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt (<span class="hljs-number">1</span>);<br>               System.out.println (id);<br>           &#125;<br></code></pre></td></tr></table></figure><h5 id="获取表的元数据"><a href="#获取表的元数据" class="headerlink" title="获取表的元数据"></a>获取表的元数据</h5>元数据概念：<br>和数据库服务器相关的数据，比如数据库版本，有哪些表，表有哪些字段，字段类型是什么等等。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;  <br>    Class.forName (<span class="hljs-string">&quot;com. mysql. jdbc. Driver&quot;</span>);  <br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;  <br>    e.printStackTrace ();  <br>&#125;  <br><span class="hljs-keyword">try</span> (<span class="hljs-type">Connection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> DriverManager.getConnection (<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/how 2 java? characterEncoding=UTF-8&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>))  <br><span class="hljs-comment">// 查看数据库层面的元数据  </span><br><span class="hljs-comment">// 即数据库服务器版本，驱动版本，都有哪些数据库等等  </span><br>&#123;  <br>    <span class="hljs-type">DatabaseMetaData</span> <span class="hljs-variable">dbmd</span> <span class="hljs-operator">=</span> c.getMetaData ();  <br>    <span class="hljs-comment">// 获取数据库服务器产品名称  </span><br>    System.out.println (<span class="hljs-string">&quot;数据库产品名称:\t&quot;</span> + dbmd.getDatabaseProductName ());  <br>    <span class="hljs-comment">// 获取数据库服务器产品版本号  </span><br>    System.out.println (<span class="hljs-string">&quot;数据库产品版本:\t&quot;</span> + dbmd.getDatabaseProductVersion ());  <br>    <span class="hljs-comment">// 获取数据库服务器用作类别和表名之间的分隔符如 test. user  </span><br>    System.out.println (<span class="hljs-string">&quot;数据库和表分隔符:\t&quot;</span> + dbmd.getCatalogSeparator ());  <br>    <span class="hljs-comment">// 获取驱动版本  </span><br>    System.out.println (<span class="hljs-string">&quot;驱动版本:\t&quot;</span> + dbmd.getDriverVersion ());  <br>    System.out.println (<span class="hljs-string">&quot;可用的数据库列表：&quot;</span>);  <br>    <span class="hljs-comment">// 获取数据库名称  </span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> dbmd.getCatalogs ();  <br>    <span class="hljs-keyword">while</span> (rs.next ()) &#123;  <br>        System.out.println (<span class="hljs-string">&quot;数据库名称:\t&quot;</span> + rs.getString (<span class="hljs-number">1</span>));  <br>    &#125;  <br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;  <br>    <span class="hljs-comment">// TODO Auto-generated catch block  </span><br>    e.printStackTrace ();  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实务"><a href="#实务" class="headerlink" title="实务"></a>实务</h4>四大特性：ACID（原子性 (Atomicity)、一致性 (Consistency)、隔离性 (Isolation)、持久性 (Durability)）</li></ul></li><li>不使用事务的情况<br>没有事务的前提下  <blockquote><p>假设业务操作是：加血，减血各做一次<br>结束后，英雄的血量不变<br>而减血的 SQL<br>不小心写错写成了 updata (而非 update)<br>那么最后结果是血量增加了，而非期望的不变</p></blockquote></li><li>使用事务<br>在事务中的多个操作，<strong>要么都成功，要么都失败</strong>  <blockquote><p>通过 c.setAutoCommit (false); 关闭自动提交<br>使用 c.commit (); 进行手动提交<br>在 22 行-35 行之间的数据库操作，就处于同一个事务当中，要么都成功，要么都失败<br>所以，虽然第一条 SQL 语句是可以执行的，但是第二条 SQL 语句有错误，其结果就是两条 SQL 语句都没有被提交。除非两条 SQL 语句都是正确的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 有事务的前提下</span><br>            <span class="hljs-comment">// 在事务中的多个操作，要么都成功，要么都失败</span><br>            c.setAutoCommit (<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 加血的 SQL</span><br>            String sql <span class="hljs-number">1</span> = <span class="hljs-string">&quot;update hero set hp = hp +1 where id = 22&quot;</span>;<br>            s.execute (sql <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 减血的 SQL</span><br>            <span class="hljs-comment">// 不小心写错写成了 updata (而非 update)</span><br>            String sql <span class="hljs-number">2</span> = <span class="hljs-string">&quot;updata hero set hp = hp -1 where id = 22&quot;</span>;<br>            s.execute (sql <span class="hljs-number">2</span>);<br>            <span class="hljs-comment">// 手动提交</span><br>            c.commit ();<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]<br>MYSQL 表的类型必须是 <strong>INNODB</strong> 才支持事务<br>在 Mysql 中，只有当表的类型是 INNODB 的时候，才支持事务，所以需要把表的类型设置为 INNODB, 否则无法观察到事务.<br>修改表的类型为 INNODB 的 SQL：<br><code>alter table hero ENGINE = innodb;</code><br>查看表的类型的 SQL<br><code>show table status from how 2 java;</code></p></blockquote><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4></li></ol><p><strong>ORM=Object Relationship Database Mapping</strong><br>对象和关系数据库的映射，简单说，<strong>一个对象</strong>，对应数据库里的<strong>一条记录</strong><br>eg：根据 id 返回一个 Hero 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Hero. java</span><br><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-comment">//增加 id 属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> damage;<br>&#125;<br><span class="hljs-comment">//TestORM</span><br><span class="hljs-keyword">package</span> jdbc;<br><span class="hljs-keyword">import</span> java. sql. Connection;<br><span class="hljs-keyword">import</span> java. sql. DriverManager;<br><span class="hljs-keyword">import</span> java. sql. ResultSet;<br><span class="hljs-keyword">import</span> java. sql. SQLException;<br><span class="hljs-keyword">import</span> java. sql. Statement;<br><span class="hljs-keyword">import</span> charactor. Hero;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJDBC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hero <span class="hljs-title function_">get</span> <span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName (<span class="hljs-string">&quot;com. mysql. jdbc. Driver&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace ();<br>        &#125;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Connection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> DriverManager.getConnection (<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/how 2 java? characterEncoding=UTF-8&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>);<br>            <span class="hljs-type">Statement</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> c.createStatement ();) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from hero where id = &quot;</span> + id;<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> s.executeQuery (sql);<br>            <span class="hljs-comment">// 因为 id 是唯一的，ResultSet 最多只能有一条记录</span><br>            <span class="hljs-comment">// 所以使用 if 代替 while</span><br>            <span class="hljs-keyword">if</span> (rs.next ()) &#123;<br>                hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span> ();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString (<span class="hljs-number">2</span>);<br>                <span class="hljs-type">float</span> <span class="hljs-variable">hp</span> <span class="hljs-operator">=</span> rs.getFloat (<span class="hljs-string">&quot;hp&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">damage</span> <span class="hljs-operator">=</span> rs.getInt (<span class="hljs-number">4</span>);<br>                hero. name = name;<br>                hero. hp = hp;<br>                hero. damage = damage;<br>                hero. id = id;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace ();<br>        &#125;<br>        <span class="hljs-keyword">return</span> hero;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> get (<span class="hljs-number">22</span>);<br>        System.out.println (h.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h4><p><strong>DAO=DataAccess Object</strong> 数据访问对象<br>实际上就是运用了<a href="https://how2j.cn/k/jdbc/jdbc-orm/391.html#step2641">练习-ORM</a> 中的思路，把数据库相关的操作都封装在这个类里面，其他地方看不到 JDBC 的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://how2j.cn/k/jdbc/jdbc-dao/392.html#nowhere<br>title: &quot;JDBC 系列教材 （十）- 基于 JDBC 设计 DAO 的实例&quot;<br>description: &quot;DAO=Database, Access, Object, 数据库访问对象, 和数据库相关的操作都被封装在这个类里面，其他地方看不到 JDBC 的代码; DAO 接口,; HeroDAO, 设计类 HeroDAO，实现接口 DAO;&quot;<br>host: how 2 j. cn<br></code></pre></td></tr></table></figure><p><a href="https://how2j.cn/k/jdbc/jdbc-dao/392.html#nowhere">JDBC系列教材 （十）- 基于JDBC设计DAO的实例</a></p><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><p><a href="https://how2j.cn/k/jdbc/jdbc-connection-pool/610.html">JDBC系列教材 （十一）- 数据库连接池</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://how2j.cn/k/jdbc/jdbc-connection-pool/610.html<br>title: &quot;JDBC 系列教材 （十一）- 数据库连接池&quot;<br>description: &quot;设计一个类：ConnectionPool, 构造方法 ConnectionPool (int, min, int, max, long, idle),,ConnectionPool.getConnection ();&quot;<br>host: how 2 j. cn<br></code></pre></td></tr></table></figure><p>与<a href="https://how2j.cn/k/thread/thread-threadpool/357.html">线程池</a>类似的，数据库也有一个数据库连接池。不过他们的实现思路是不一样的。</p><ol><li>传统连接方式<br><img src="https://stepimagewm.how2j.cn/2654.png"></li><li>连接池方式<br><img src="https://stepimagewm.how2j.cn/2655.png"></li></ol><h2 id="Java高级"><a href="#Java高级" class="headerlink" title="Java高级"></a>Java高级</h2><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h4><p>实例对象之间的区别：</p><ul><li>属性不同<br>类之间的区别：</li><li>属性和方法不同</li></ul><h4 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h4><p>获取类对象的 3 种方式：</p><ol><li><strong>Class. forName</strong>  </li><li><strong>Hero. class</strong>  </li><li><strong>new Hero (). getClass ()</strong></li></ol><blockquote><p>在一个 JVM 中，<strong>一种类</strong>，<strong>只会有一个类对象</strong>存在。所以以上三种方式取出来的类对象，都是一样的。<br>准确的讲是一个 <strong>ClassLoader</strong> 下，一种类，只会有一个类对象存在。通常一个 JVM 下，只会有一个 ClassLoader。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflect;  <br><span class="hljs-keyword">import</span> MyCharacter.Hero;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestGetClassObj</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MyCharacter.Hero&quot;</span>;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            <span class="hljs-type">Class</span> <span class="hljs-variable">pClass1</span> <span class="hljs-operator">=</span> Class.forName(className);  <br>            <span class="hljs-type">Class</span> <span class="hljs-variable">pClass2</span> <span class="hljs-operator">=</span> Hero.class;  <br>            <span class="hljs-type">Class</span> <span class="hljs-variable">pClass3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>().getClass();  <br>            System.out.println(pClass1 == pClass2);  <br>            System.out.println(pClass1 == pClass3);  <br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;  <br>            <span class="hljs-comment">// TODO Auto-generated catch block  </span><br>            e.printStackTrace();  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意<br>获取类对象的时候，会导致类属性被初始化<br>为 Hero 增加一个静态属性, 并且在静态初始化块里进行初始化，参考 <a href="https://how2j.cn/k/class-object/class-object-init/297.html#step589">类属性初始化</a>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> String copyright;<br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;初始化 copyright&quot;</span>);<br>copyright = <span class="hljs-string">&quot;版权由Riot Games公司所有&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>无论什么途径获取类对象，都会导致<strong>静态属性被初始化</strong>，而且<strong>只会执行一次</strong>。（除了直接使用 <code>Class c = Hero.class</code> 这种方式，这种方式<strong>不会导致静态属性被初始化</strong>）</p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>与传统的通过 new 来获取对象的方式不同，反射机制，会<strong>先拿到</strong> Hero 的“<strong>类对象</strong>”, 然后通过类对象获取“<strong>构造器对象</strong>”  ，再通过构造器对象<strong>创建一个对象</strong></p><ol><li>获取<strong>类对象</strong>（类锁，3 种方式）</li><li>获取构造器对象 <code>getConstructor</code> </li><li>创建一个对象 <code>newInstance</code></li></ol><p>（1）通过反射机制创建一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;  <br>    <span class="hljs-comment">//使用反射的方式创建对象  </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MyCharacter.Hero&quot;</span>;  <br>    <span class="hljs-comment">//类对象  </span><br>    <span class="hljs-type">Class</span> <span class="hljs-variable">hClass</span> <span class="hljs-operator">=</span> Class.forName(className);  <br>    <span class="hljs-comment">//构造器  </span><br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> hClass.getConstructor();  <br>    <span class="hljs-comment">//通过构造器实例化  </span><br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> (Hero) c.newInstance();  <br>    h2.setName(<span class="hljs-string">&quot;gareen&quot;</span>);  <br>    System.out.println(h2);  <br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>    <span class="hljs-comment">// TODO Auto-generated catch block  </span><br>    e.printStackTrace();  <br>&#125;<br></code></pre></td></tr></table></figure><p>（2）通过配置文件获取对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Reflect;  <br><span class="hljs-keyword">import</span> MyCharacter.Hero;  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;  <br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetCObjByFile</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hero <span class="hljs-title function_">getHero</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:/hero.config&quot;</span>;  <br>        save(path, <span class="hljs-string">&quot;MyCharacter.ADHero&quot;</span>);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> read(path);  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(className);  <br>        Constructor&lt;Hero&gt; constructor = c.getConstructor();  <br>        <span class="hljs-keyword">return</span> constructor.newInstance();  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException &#123;  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> getHero();  <br>        hero.setName(<span class="hljs-string">&quot;韩信&quot;</span>);  <br>        System.out.println(hero);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(String path, String className)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;  <br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);  <br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(f))  <br>        ) &#123;  <br>            dos.writeUTF(className);  <br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);  <br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(f))) &#123;  <br>            <span class="hljs-keyword">return</span> dis.readUTF();  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h4><p>通过反射机制修改对象的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();  <br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> hero.getClass().getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);  <br><span class="hljs-comment">//        对于private属性需要先设置可访问修改，对于public属性可直接访问修改  </span><br>        name.setAccessible(<span class="hljs-literal">true</span>);  <br>        name.set(hero, <span class="hljs-string">&quot;zhaoyun&quot;</span>);  <br>        System.out.println(hero.getName());<br></code></pre></td></tr></table></figure><h5 id="getField-和-getDeclaredField-的区别"><a href="#getField-和-getDeclaredField-的区别" class="headerlink" title="getField 和 getDeclaredField 的区别"></a>getField 和 getDeclaredField 的区别</h5><p>这两个方法都是<strong>用于获取字段</strong>  </p><ul><li><code>getField</code> 只能获取 <strong>public</strong> 的，<strong>包括从父类继承</strong>来的字段。  </li><li><code>getDeclaredField</code> 可以获取<strong>本类所有的字段，包括 private</strong> 的，但是<strong>不能获取继承来的字段</strong>。 (注： 这里只能获取到 private 的字段，但并不能访问该 private 字段的值, 除非加上 <code>setAccessible(true)</code>)</li></ul><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><p>通过反射机制，调用一个对象的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Hero</span> <span class="hljs-variable">hero</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();  <br><span class="hljs-keyword">try</span> &#123;  <br>    <span class="hljs-type">Method</span> <span class="hljs-variable">setName</span> <span class="hljs-operator">=</span> hero.getClass().getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class);  <br>    setName.invoke(hero, <span class="hljs-string">&quot;李白&quot;</span>);  <br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) hero.getClass().getMethod(<span class="hljs-string">&quot;getName&quot;</span>).invoke(hero);  <br>    System.out.println(name);  <br>    <span class="hljs-comment">//            System.out.println(hero.getName());  </span><br>&#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;  <br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>反射非常强大，在学习了 <a href="https://how2j.cn/k/spring/spring-ioc-di/87.html">Spring</a> 的依赖注入，反转控制之后，才会对反射有更好的理解。</p></blockquote><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><h4 id="基本内置注解"><a href="#基本内置注解" class="headerlink" title="基本内置注解"></a>基本内置注解</h4><h5 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h5><p>@Override 用在方法上，表示这个方法<strong>重写了父类的方法</strong>，如 toString ()。如果父类没有这个方法，那么就无法编译通过。</p><h5 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h5><p>@Deprecated 表示这个<strong>方法已经过期</strong>，<strong>不建议开发者使用</strong>。(暗示在将来某个不确定的版本，就有可能会取消掉)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hackMap</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h5><p>@SuppressWarnings Suppress 英文的意思是抑制的意思，这个注解的用处是<strong>忽略警告信息</strong>。<br><code>@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unused&quot; &#125;)</code><br>就对这些警告进行了抑制，即忽略掉这些警告信息。<br>@SuppressWarnings 有常见的值，分别对应如下意思  </p><ol><li>deprecation：使用了不赞成使用的类或方法时的警告 (使用@Deprecated 使得编译器产生的警告)；  </li><li>unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型; 关闭编译器警告  </li><li>fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;  </li><li>path：在类路径、源文件路径等中有不存在的路径时的警告;  </li><li>serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告;  </li><li>finally：任何 finally 子句不能正常完成时的警告;  </li><li>rawtypes 泛型类型未指明  </li><li>unused 引用定义了，但是没有被使用  </li><li>all：关于以上所有情况的警告。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unused&quot; &#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">heros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a>@SafeVarargs</h5>@SafeVarargs 这是 1.7 之后新加入的基本注解. 如例所示，当使用<a href="https://how2j.cn/k/class-object/class-object-overload/291.html#step705">可变数量的参数</a>的时候，而参数的类型又是泛型 T 的话，就会出现警告。这个时候，就使用@SafeVarargs 来去掉这个警告<br>@SafeVarargs 注解<strong>只能用在参数长度可变的方法或构造方法上</strong>，且方法必须声明为<strong>static 或 final</strong>，否则会出现编译错误。一个方法使用@SafeVarargs 注解的前提是，开发人员必须确保这个方法的实现中<strong>对泛型类型参数的处理不会引发类型安全问题</strong>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SafeVarargs</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getFirstOne</span><span class="hljs-params">(T... elements)</span> &#123;<br>        <span class="hljs-keyword">return</span> elements.length &gt; <span class="hljs-number">0</span> ? elements[<span class="hljs-number">0</span>] : <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h5>@FunctionalInterface 这是 Java 1.8 新增的注解，用于<strong>约定函数式接口</strong>。  <blockquote><p>函数式接口概念： 如果接口中<strong>只有一个抽象方法</strong>（可以包含多个<strong>默认方法或多个 static 方法</strong>），该接口称为函数式接口。函数式接口其存在的意义，主要是配合 <a href="https://how2j.cn/k/lambda/lambda-lamdba-tutorials/697.html">Lambda 表达式</a> 来使用。</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//可注解函数接口，仅有一个抽象方法</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adAttack</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//不可注解函数接口，有两个抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apAttack</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apAttack2</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><h5 id="自定义注解-JDBCConfig"><a href="#自定义注解-JDBCConfig" class="headerlink" title="自定义注解@JDBCConfig"></a>自定义注解@JDBCConfig</h5><ol><li>创建注解类型的时候即不使用 class 也不使用 interface, 而是使用 <code>@interface</code><br><code>public @interface JDBCConfig</code></li><li>元注解<br><code>@Target(&#123;METHOD,TYPE&#125;)</code> 表示这个注解可以用<strong>用在类/接口</strong>上，还可以<strong>用在方法</strong>上<br><code>@Retention(RetentionPolicy.RUNTIME)</code> 表示这是一个<strong>运行时注解</strong>，即运行起来之后，才获取注解中的相关信息，而不像基本注解如 <a href="https://how2j.cn/k/annotation/annotation-system/1060.html#step4028">@Override</a> 那种不用运行，在编译时 eclipse 就可以进行相关工作的编译时注解。<br><code>@Inherited</code> 表示这个<strong>注解可以被子类继承</strong><br><code>@Documented</code> 表示当<strong>执行 javadoc</strong>的时候，<strong>本注解会生成相关文档</strong>  </li><li>注解元素，这些注解元素就用于<strong>存放注解信息</strong>，在解析的时候获取出来</li></ol><ul><li>String ip ();</li><li>int port () default 3306;</li><li>String database ();</li><li>String encoding ();</li><li>String loginName ();</li><li>String password ();</li></ul><h5 id="注解方式-DBUtil"><a href="#注解方式-DBUtil" class="headerlink" title="注解方式 DBUtil"></a>注解方式 DBUtil</h5><p>有了<a href="https://how2j.cn/k/annotation/annotation-customize/1056.html#step4035">自定义注解@JDBCConfig</a> 之后，我们就把<a href="https://how2j.cn/k/annotation/annotation-customize/1056.html#step4034">非注解方式DBUtil</a> 改造成为注解方式 DBUtil。<br>如例所示，数据库相关配置信息本来是<strong>以属性的方式存放</strong>的，现在改为了以注解的方式，提供这些信息了。  </p><blockquote><p>注： 目前只是以注解的方式提供这些信息，但是<strong>还没有解析</strong>，接下来进行解析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Annotation;  <br><span class="hljs-meta">@JDBCConfig(ip = &quot;127.0.0.1&quot;, database = &quot;how2java&quot;, encoding = &quot;UTF-8&quot;, loginName = &quot;root&quot;, password = &quot;123456&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DBUtil</span> &#123;  <br>    <span class="hljs-keyword">static</span> &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h5><p>通过<strong>反射</strong>，<strong>获取这个 DBUtil 这个类上的注解对象</strong><br><code>JDBCConfig config = DBUtil.class.getAnnotation(JDBCConfig.class);</code><br>拿到注解对象之后，通过其方法，<strong>获取各个注解元素的值</strong>：  </p><ul><li>String ip = config. ip ();</li><li>int port = config. port ();</li><li>String database = config. database ();</li><li>String encoding = config. encoding ();</li><li>String loginName = config. loginName ();</li><li>String password = config. password ();<br>后续就一样了，根据这些配置信息得到一个数据库连接<strong>Connection 实例</strong>。  <blockquote><p>注： 运行需要用到连接 mysql 的 jar 包，如果没有，可在右侧下载</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Annotation;  <br><span class="hljs-keyword">import</span> java.sql.Connection;  <br><span class="hljs-keyword">import</span> java.sql.DriverManager;  <br><span class="hljs-keyword">import</span> java.sql.SQLException;  <br><span class="hljs-meta">@JDBCConfig(ip = &quot;127.0.0.1&quot;, database = &quot;how2java&quot;, encoding = &quot;UTF-8&quot;, loginName = &quot;root&quot;, password = &quot;123456&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DBUtil</span> &#123;  <br>    <span class="hljs-keyword">static</span> &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, SecurityException &#123;  <br>        <span class="hljs-type">JDBCConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> DBUtil.class.getAnnotation(JDBCConfig.class);  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> config.ip();  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> config.port();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">database</span> <span class="hljs-operator">=</span> config.database();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">encoding</span> <span class="hljs-operator">=</span> config.encoding();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> config.loginName();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> config.password();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;jdbc:mysql://%s:%d/%s?characterEncoding=%s&quot;</span>, ip, port, database, encoding);  <br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, loginName, password);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, SecurityException, SQLException &#123;  <br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getConnection();  <br>        System.out.println(c);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>元数据在英语中对应单词 <strong>metadata</strong>, <a href="https://en.wikipedia.org/wiki/Metadata">metadata在wiki中的解释</a>是：Metadata is data [information] that provides information about other data，为其他数据提供信息的数据<br>元注解 meta annotation<strong>用于注解自定义注解的注解</strong>。<br>元注解有这么几种：  </p><ul><li>@Target  </li><li>@Retention  </li><li>@Inherited  </li><li>@Documented  </li><li>@Repeatable (java 1.8 新增)  </li></ul><h5 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h5><p>@Target 表示这个注解能放在什么位置上，是只能放在类上？还是即可以放在方法上，又可以放在属性上。<a href="https://how2j.cn/k/annotation/annotation-customize/1056.html#step4035">自定义注解@JDBCConfig</a> 这个注解上的@Target 是：@Target ({METHOD, TYPE})，表示他可以用在方法和类型上（类和接口），但是不能放在属性等其他位置。可以选择的位置列表如下：  </p><ul><li>ElementType. TYPE：能修饰<strong>类、接口或枚举类型</strong>  </li><li>ElementType. FIELD：能修饰<strong>成员变量</strong>  </li><li>ElementType. METHOD：能修饰<strong>方法</strong></li><li>ElementType. PARAMETER：能修饰<strong>参数</strong>  </li><li>ElementType. CONSTRUCTOR：能修饰<strong>构造器</strong>  </li><li>ElementType. LOCAL_VARIABLE：能修饰<strong>局部变量</strong>  </li><li>ElementType. ANNOTATION_TYPE：能修饰<strong>注解</strong>  </li><li>ElementType. PACKAGE：能修饰<strong>包</strong></li></ul><h5 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h5><p>@Retention 表示<strong>生命周期</strong>，<a href="https://how2j.cn/k/annotation/annotation-customize/1056.html#step4035">自定义注解@JDBCConfig</a> 上的值是 RetentionPolicy. RUNTIME, 表示可以在运行的时候依然可以使用。 @Retention 可选的值有 3 个：  </p><ul><li><strong>RetentionPolicy. SOURCE</strong>： 注解只在源代码中存在，编译成 class 之后，就没了。<a href="https://how2j.cn/k/annotation/annotation-system/1060.html#step4028">@Override</a> 就是这种注解。  </li><li><strong>RetentionPolicy. CLASS</strong>： 注解在 java 文件编程成. class 文件后，依然存在，但是运行起来后就没了。@Retention 的默认值，即当没有显式指定@Retention 的时候，就会是这种类型。  </li><li><strong>RetentionPolicy. RUNTIME</strong>： 注解在<strong>运行起来之后依然存在，程序可以通过反射获取这些信息</strong>，<a href="https://how2j.cn/k/annotation/annotation-customize/1056.html#step4035">自定义注解@JDBCConfig</a> 就是这样。</li></ul><h5 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h5><p>@Inherited 表示该注解<strong>具有继承性</strong>。如例，设计一个 DBUtil 的子类，其 getConnection 2 方法，可以获取到父类 DBUtil 上的注解信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> util;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> anno.JDBCConfig;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DBUtilChild</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DBUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException, NoSuchMethodException, SecurityException &#123;<br>        <span class="hljs-type">JDBCConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> DBUtilChild.class.getAnnotation(JDBCConfig.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> config.ip();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> config.port();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">database</span> <span class="hljs-operator">=</span> config.database();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encoding</span> <span class="hljs-operator">=</span> config.encoding();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> config.loginName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> config.password();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;jdbc:mysql://%s:%d/%s?characterEncoding=%s&quot;</span>, ip, port, database, encoding);<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, loginName, password);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, SecurityException, SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getConnection2();<br>        System.out.println(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h5><p>@Documented 如图所示，在用 javadoc 命令生成 API 文档后，DBUtil 的文档里会出现该注解说明。</p><h5 id="Repeatable-java-1-8-新增"><a href="#Repeatable-java-1-8-新增" class="headerlink" title="@Repeatable (java 1.8 新增)"></a>@Repeatable (java 1.8 新增)</h5><p>当<strong>没有@Repeatable 修饰</strong>的时候，注解在同一个位置，<strong>只能出现一次</strong>，如例所示：<br>@JDBCConfig (ip = “127.0.0.1”, database = “test”, encoding = “UTF-8”, loginName = “root”, password = “admin”)<br>@JDBCConfig (ip = “127.0.0.1”, database = “test”, encoding = “UTF-8”, loginName = “root”, password = “admin”)<br>重复做两次就会报错了。<br>使用@Repeatable 之后，再配合一些其他动作，就可以在同一个地方<strong>使用多次</strong>了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> annotation;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.ElementType.METHOD;<br><span class="hljs-keyword">import</span> java.lang.annotation.Repeatable;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FindFiles</span> &#123;<br>    <span class="hljs-meta">@Target( METHOD)</span><br>    <span class="hljs-meta">@Retention( RetentionPolicy.RUNTIME )</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> FileTypes &#123;<br>        FileType[] value();<br>    &#125;<br>    <span class="hljs-meta">@Target(  METHOD )</span><br>    <span class="hljs-meta">@Retention( RetentionPolicy.RUNTIME )</span><br>    <span class="hljs-meta">@Repeatable( FileTypes.class )</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> FileType &#123;<br>        String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>    &#125;;<br>    <span class="hljs-meta">@FileType( &quot;.java&quot; )</span><br>    <span class="hljs-meta">@FileType( &quot;.html&quot; )</span><br>    <span class="hljs-meta">@FileType( &quot;.css&quot; )</span><br>    <span class="hljs-meta">@FileType( &quot;.js&quot; )</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">work</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            FileType[] fileTypes= <span class="hljs-built_in">this</span>.getClass().getMethod(<span class="hljs-string">&quot;work&quot;</span>).getAnnotationsByType(FileType.class);<br>            System.out.println(<span class="hljs-string">&quot;将从如下后缀名的文件中查找文件内容&quot;</span>);<br>            <span class="hljs-keyword">for</span> (FileType fileType : fileTypes) &#123;<br>                System.out.println(fileType.value());<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;查找过程略。。。&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException | SecurityException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">FindFiles</span>().work();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h4><h5 id="按照作用域分"><a href="#按照作用域分" class="headerlink" title="按照作用域分"></a>按照作用域分</h5><p>根据注解的作用域@Retention，注解分为:</p><ul><li>RetentionPolicy. SOURCE： Java 源文件上的注解  </li><li>RetentionPolicy. CLASS： Class 类文件上的注解  </li><li>RetentionPolicy. RUNTIME： 运行时的注解</li></ul><h5 id="按照来源分"><a href="#按照来源分" class="headerlink" title="按照来源分"></a>按照来源分</h5><p>按照注解的来源，也是分为 3 类:</p><ol><li>内置注解如@Override，@Deprecated 等等  </li><li>第三方注解，如 Hibernate, Struts 等等  </li><li>自定义注解，如<a href="https://how2j.cn/k/annotation/annotation-like-hibernate/1058.html#step4046">仿hibernate的自定义注解</a></li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="hutool"><a href="#hutool" class="headerlink" title="hutool"></a>hutool</h3><ul><li>包含多种工具类：</li><li>日期与字符串转换  </li><li>文件操作  </li><li>转码与反转码  </li><li>随机数生成  </li><li>压缩与解压  </li><li>编码与解码  </li><li>CVS文件操作  </li><li>缓存处理  </li><li>加密解密  </li><li>定时任务  </li><li>邮件收发  </li><li>二维码创建  </li><li>FTP 上传与下载  </li><li>图形验证码生成</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cardlink">url: https://hutool.cn/<br>title: &quot;Hutool — 🍬A set of tools that keep Java sweet.&quot;<br>description: &quot;Hutool: A set of tools that keep Java sweet. Java工具集、类库&quot;<br>host: hutool.cn<br>favicon: https://plus.hutool.cn/images/logo_484.png<br></code></pre></td></tr></table></figure><p><a href="https://hutool.cn/">Hutool — 🍬A set of tools that keep Java sweet.</a></p>]]></content>
    
    
    <summary type="html">Web—study about Java、Mysql、Redis、Linux</summary>
    
    
    
    <category term="Backend_development" scheme="https://alleyf.github.io/categories/Backend-development/"/>
    
    
    <category term="Java" scheme="https://alleyf.github.io/tags/Java/"/>
    
    <category term="Mysql" scheme="https://alleyf.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>深度学习论文阅读总结</title>
    <link href="https://alleyf.github.io/2023/10/777b5316f710.html"/>
    <id>https://alleyf.github.io/2023/10/777b5316f710.html</id>
    <published>2023-10-05T07:42:18.703Z</published>
    <updated>2023-10-20T03:29:39.857Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">序号</th><th>作者</th><th>来源</th><th align="center">标题</th><th>关键词</th><th>研究对象</th><th>主要实验方法</th><th>结论</th><th>阅读日期</th></tr></thead><tbody><tr><td align="center">1</td><td>Kaiming He</td><td>2015-CVPR</td><td align="center">[[Deep residual learning for image recognition]]</td><td>深度神经网络，残差，短接</td><td>网络深度</td><td>提出层之间跳跃短接的残差块</td><td>解决深层网络退化问题，并提升了网络效果，是后续深层网络的基石</td><td>2023-08-10 16:06:07</td></tr><tr><td align="center">2</td><td>Ashish Vaswani</td><td>2017-NIPS</td><td align="center">[[Attention is All you Need  ]]</td><td>Transformer，注意力机制，编码器，解码器</td><td>网络架构，特称提取</td><td></td><td></td><td></td></tr><tr><td align="center">3</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td align="center">4</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td align="center">5</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td align="center">6</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td align="center">7</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">some overview about NLP papers。</summary>
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="NLP" scheme="https://alleyf.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://alleyf.github.io/2023/10/e8c7910f93b8.html"/>
    <id>https://alleyf.github.io/2023/10/e8c7910f93b8.html</id>
    <published>2023-10-05T07:29:23.218Z</published>
    <updated>2023-10-05T07:48:32.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-论文主要有那些组成部分及其相应的作用？"><a href="#1-论文主要有那些组成部分及其相应的作用？" class="headerlink" title="1. 论文主要有那些组成部分及其相应的作用？"></a>1. 论文主要有那些组成部分及其相应的作用？</h2><ol><li>论文标题：所有工作的凝练总结</li><li>摘要：包括研究目的，研究方法，研究结果等关键信息</li><li>引言：领域重要性 (研究背景)，国内外研究现状，现存问题，提出的解决方法</li><li>方法论：解决问题所采用的具体实施的方法</li><li>结果：根据方法得到的结果</li><li>引用：文章中对别人文章内容的引用</li></ol><h2 id="2-哪些是重点需要阅读的？"><a href="#2-哪些是重点需要阅读的？" class="headerlink" title="2. 哪些是重点需要阅读的？"></a>2. 哪些是重点需要阅读的？</h2><ol><li>标题：提炼<strong>核心关键词</strong></li><li>摘要：提炼<strong>研究目的，研究方法，研究结果</strong>等</li><li>方法论：提炼<strong>具体解决思路、方法</strong></li><li>结果：提炼<strong>最终研究结果、未来改进和存在的缺陷</strong>等</li></ol><h2 id="3-什么时候泛读，什么时候精读，怎么读？"><a href="#3-什么时候泛读，什么时候精读，怎么读？" class="headerlink" title="3. 什么时候泛读，什么时候精读，怎么读？"></a>3. 什么时候泛读，什么时候精读，怎么读？</h2><blockquote><p>[!NOTE] 什么时候泛（精）读？</p><ol><li>确定课题前：对课题组的研究<strong>大方向相关领域</strong>的论文进行大范围泛读了解<strong>整个领域的研究进程和研究热点及趋势</strong></li><li>确定课题后：对确定的课题对应的<strong>细分研究领域</strong>的相关论文，选择<strong>引用高且较著名的论文进行精读汇报总结</strong></li></ol></blockquote><blockquote><p>[!NOTE] 怎么读？</p><ol><li><strong>泛读</strong>：重点阅读论文<strong>标题，摘要，方法论和结果</strong>，不需要完整通读全文，泛读的时间要求，中文或简单的英文，可能需要花10-15分钟阅读，记录和列表用15分钟；再复杂一点的中文文献，30分也就够了。</li><li><strong>精读</strong>：除了完成泛读的要求，还要<strong>了解研究背景、国内外发展现状、现存问题</strong>，并详细阅读<strong>具体实施方法</strong>，学习运用该方法，可以<strong>尝试复现</strong>对比实验结果，<strong>总结创新点并形成阅读报告</strong>。</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-论文主要有那些组成部分及其相应的作用？&quot;&gt;&lt;a href=&quot;#1-论文主要有那些组成部分及其相应的作用？&quot; class=&quot;headerlink&quot; title=&quot;1. 论文主要有那些组成部分及其相应的作用？&quot;&gt;&lt;/a&gt;1. 论文主要有那些组成部分及其相应的作用？</summary>
      
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>DeepLearing</title>
    <link href="https://alleyf.github.io/2023/05/0950da3fc570.html"/>
    <id>https://alleyf.github.io/2023/05/0950da3fc570.html</id>
    <published>2023-05-31T06:27:39.000Z</published>
    <updated>2023-08-12T06:53:00.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h1><p><img src="https://s2.loli.net/2023/05/31/mlfBuXI7pt2eCic.png" alt="image.png|400"></p><blockquote><p>特征工程的作用：<br>    - 数据特征决定了模型的上限<br>    - 预处理和特征提取是最核心的<br>    - 算法与参数选择决定了如何逼近这个上限</p></blockquote><h2 id="1-1反向传播"><a href="#1-1反向传播" class="headerlink" title="1.1反向传播"></a>1.1反向传播</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251455407.png"/><h2 id="1-2正则化"><a href="#1-2正则化" class="headerlink" title="1.2正则化"></a>1.2正则化</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251607343.png" alt="image.png"></p><h2 id="1-3神经元"><a href="#1-3神经元" class="headerlink" title="1.3神经元"></a>1.3神经元</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251610745.png" alt="image.png"></p><h2 id="1-4激活函数"><a href="#1-4激活函数" class="headerlink" title="1.4激活函数"></a>1.4激活函数</h2><blockquote><p>引入<strong>非线性特性</strong>，从而逼近任何分布结果。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251611276.png" alt="image.png"></p></blockquote><p>激活函数对比：</p><blockquote><p><strong>Relu 为为主流，Sigmoid 会出现梯度消失现象</strong><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251616218.png" alt="image.png"></p></blockquote><h2 id="1-5数据预处理"><a href="#1-5数据预处理" class="headerlink" title="1.5数据预处理"></a>1.5数据预处理</h2><blockquote><p>不同的预处理结果会使得模型的效果发生很大的差异！<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308012100980.png" alt="image.png"></p></blockquote><ol><li>参数初始化</li></ol><ul><li>参数初始化同样非常重要！</li><li>通常我们都使用随机策略来进行参数初始化<br>$$W = 0.01*np.random.randn (D, H)$$</li></ul><h2 id="1-6Drop-Out"><a href="#1-6Drop-Out" class="headerlink" title="1.6Drop-Out"></a>1.6Drop-Out</h2><blockquote><p>过拟合是神经网络非常头疼的一个大问题！<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308012106533.png" alt="image.png"></p></blockquote><h2 id="1-7卷积"><a href="#1-7卷积" class="headerlink" title="1.7卷积"></a>1.7卷积</h2><blockquote><p>计算过程如下图所示：</p><ul><li>分别计算三个通道输入与卷积核进行内积，再将三通道结果求和得到输出（特征图）</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021949385.png" alt="image.png"></p><blockquote><p>特征图的个数（深度）等于卷积核的个数，如上图所见两个卷积核进行多尺度特征提取得到两个特征图。</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121103471.png" alt="image.png"></p><h3 id="1-7-1步长"><a href="#1-7-1步长" class="headerlink" title="1.7.1步长"></a>1.7.1步长</h3><blockquote><p>步长就是卷积时滑动窗口的距离，一般为 1/2.</p></blockquote><h3 id="1-7-2边缘填充"><a href="#1-7-2边缘填充" class="headerlink" title="1.7.2边缘填充"></a>1.7.2边缘填充</h3><blockquote><p>边缘填充是在原输入的数据上加上一层 0 填充，不仅增加了原始边缘数据的卷积次数还保证了 0 填充填充不影响特征提取。</p></blockquote><h3 id="1-7-3卷积计算结果"><a href="#1-7-3卷积计算结果" class="headerlink" title="1.7.3卷积计算结果"></a>1.7.3卷积计算结果</h3><p>长度：$$H_{2}= \frac{H_{1}-F_{H}+2P}{S}+1$$<br>宽度： $$W_{2}= \frac{W_{1}-F_{W}+2P}{S}+1$$</p><blockquote><p>其中 W 1、H 1 表示输入的宽度、长度；W 2、H 2 表示输出特征图的宽度、长度；F 表示卷积核长和宽的大小；S 表示滑动窗口的步长; P 表示边界填充 (加几圈 0)。</p></blockquote><h2 id="1-8池化"><a href="#1-8池化" class="headerlink" title="1.8池化"></a>1.8池化</h2><h3 id="最大池化"><a href="#最大池化" class="headerlink" title="最大池化"></a>最大池化</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121141086.png" alt="image.png"></p><blockquote><p>在原始特征图上<strong>分块</strong>选择<strong>最大（最重要）的特征值</strong>，从而对特征图进行<strong>下采样压缩大小</strong>，但<strong>特征图个数不变</strong></p></blockquote><h2 id="1-9总体架构"><a href="#1-9总体架构" class="headerlink" title="1.9总体架构"></a>1.9总体架构</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121153214.png" alt="image.png"></p><blockquote><p>只有带参数的才能称之为一层，卷积层和全连接层属于，而激活函数和池化层不属于。</p></blockquote><p><strong>特征图变化：</strong><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121157274.png" alt="image.png"></p><h2 id="1-10感受野"><a href="#1-10感受野" class="headerlink" title="1.10感受野"></a>1.10感受野</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121438899.png" alt="image.png"></p><blockquote><p>卷积后的特征图中的特征值能够感受到的从原始输入数据的大小</p></blockquote><blockquote><p>[!NOTE] Problem</p><ul><li>P:如果堆叠 3 个 3*3 的卷积层，并且保持滑动窗口步长为 1，其感受野就是 7*7 的,<br>这跟一个使用 7*7 卷积核的结果是一样的，那为什么非要堆叠 3 个小卷积呢？</li><li>A: <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121452977.png" alt="image.png"></li></ul></blockquote>]]></content>
    
    
    <summary type="html">Deep_learning</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV，NLP" scheme="https://alleyf.github.io/tags/CV%EF%BC%8CNLP/"/>
    
  </entry>
  
  <entry>
    <title>Machinelearning DeepLearing</title>
    <link href="https://alleyf.github.io/2023/05/14870b008a81.html"/>
    <id>https://alleyf.github.io/2023/05/14870b008a81.html</id>
    <published>2023-05-31T06:27:39.000Z</published>
    <updated>2023-07-04T14:04:11.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>机器学习主要分为以下两种：</p><p><span style="background:#affad1">1. 监督学习（supervised learning）</span><br><span style="background:#affad1">2. 无监督学习（unsupervised learning）</span></p><h1 id="2-监督学习"><a href="#2-监督学习" class="headerlink" title="2. 监督学习"></a>2. 监督学习</h1><p>分类：</p><p>回归，分类</p><h1 id="3-无监督学习"><a href="#3-无监督学习" class="headerlink" title="3. 无监督学习"></a>3. 无监督学习</h1><p>分类：<br>聚类（clustering）</p>]]></content>
    
    
    <summary type="html">Machine and Deep learning</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AIGC" scheme="https://alleyf.github.io/tags/AIGC/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch快速入门</title>
    <link href="https://alleyf.github.io/2023/05/891ff30b7b9b.html"/>
    <id>https://alleyf.github.io/2023/05/891ff30b7b9b.html</id>
    <published>2023-05-31T06:27:39.000Z</published>
    <updated>2023-08-26T08:35:18.348Z</updated>
    
    <content type="html"><![CDATA[<ol><li>[[#1.python|1.python]]</li><li>[[#1.数据加载|1.数据加载]]<ol><li>[[#1.数据加载#1.1DataSet|1.1DataSet]]</li></ol></li><li>[[#2.TensorBoard|2.TensorBoard]]<ol><li>[[#2.TensorBoard#2.1 绘图|2.1 绘图]]</li><li>[[#2.TensorBoard#2.2 添加图片|2.2 添加图片]]</li></ol></li><li>[[#3.Transforms|3.Transforms]]<ol><li>[[#3.Transforms#3.1 ToTensor|3.1 ToTensor]]</li><li>[[#3.Transforms#3.2 Compose|3.2 Compose]]</li></ol></li></ol><h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><hr><h2 id="1-python"><a href="#1-python" class="headerlink" title="1. python"></a>1. python</h2><blockquote><p>Python 类中的双下划线 (double underscore)开头的方法通常被称为”魔法方法” (magic methods)。这些方法可以实现一些特殊的功能或对类进行修改。以下是一些常见的双下划线方法及其作用:</p></blockquote><ul><li><p><strong>init</strong>(): 构造函数, 用于初始化类的实例。</p></li><li><p><strong>str</strong>(): 当使用 print 输出对象时, 打印该方法的返回值。</p></li><li><p><strong>repr</strong>(): 返回对象的机器可读字符串表示形式。</p></li><li><p><strong>del</strong>(): 析构函数, 删除对象时被调用。</p></li><li><p><strong>call</strong>(): 允许将对象视为函数调用。</p></li><li><p><strong>getitem</strong>(): 通过索引访问元素的方法, 使得对象可以像列表那样进行切片。</p></li><li><p><strong>len</strong>(): 返回对象长度的方法, 使得对象可以对 len () 函数生效。</p></li><li><p><strong>eq</strong>(): 判断两个对象是否相等的方法, 使得对象可以使用 == 进行比较。</p></li><li><p><strong>lt</strong>(): 小于比较的方法, 可以使用 &lt; 进行比较。</p></li><li><p><strong>add</strong>(): 实现对象的加法运算。</p></li><li><p><strong>iter</strong>(): 实现迭代器接口, 使得对象可以被用于 for 循环。</p></li><li><p><strong>metaclass</strong>: 元类, 用于创建类对象。</p></li></ul><blockquote><p>所以双下划线方法主要是实现一些内置的功能或魔法方法, 让 Python 类拥有一些特殊的行为。我们自己编写类时, 如果需要实现某些特殊功能, 可以通过编写双下划线方法来实现。</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><hr><h2 id="1-数据加载"><a href="#1-数据加载" class="headerlink" title="1. 数据加载"></a>1. 数据加载</h2><h3 id="1-1-DataSet"><a href="#1-1-DataSet" class="headerlink" title="1.1 DataSet"></a>1.1 DataSet</h3><blockquote><p>继承 DataSet 类并重写__getitem__和 <strong>len</strong> 方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 快捷键ctrl+B快速打开关闭文件编辑区</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir,label_dir</span>):<br>        self.root_dir = root_dir<br>        self.label_dir = label_dir<br>        self.path = os.path.join(self.root_dir,self.label_dir)<br>        self.img_path = os.listdir(self.path)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-comment"># 根据索引index获取数据和标签</span><br>        img_name = self.img_path[index]<br>        img_item_path = os.path.join(self.path,img_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        label = self.label_dir<br>        <span class="hljs-keyword">return</span> img,label<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 返回数据集的长度</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img_path)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">root_dir = <span class="hljs-string">&#x27;dataset/train&#x27;</span><br>ants_label_dir = <span class="hljs-string">&#x27;ants_image&#x27;</span><br>bees_label_dir = <span class="hljs-string">&#x27;bees_image&#x27;</span><br>ants_dataset = CustomDataset(root_dir,ants_label_dir)<br>bees_dataset = CustomDataset(root_dir,bees_label_dir)<br></code></pre></td></tr></table></figure><blockquote><p><strong>小数据集可以通过➕叠加为大数据集</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">img,label = ants_dataset[<span class="hljs-number">1</span>]<br>img.show()<br>img,label = bees_dataset[<span class="hljs-number">0</span>]<br>img.show()<br>train_dataset = ants_dataset+bees_dataset<br>img,label = train_dataset[<span class="hljs-number">124</span>]<br>img.show()<br></code></pre></td></tr></table></figure><blockquote><p>加载或下载数据集</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br>dataset_trans = torchvision.transforms.Compose([<br>    torchvision.transforms.ToTensor()<br>])<br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">True</span>, transform=dataset_trans, download=<span class="hljs-literal">False</span>)<br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>, transform=dataset_trans, download=<span class="hljs-literal">False</span>)<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img_tensor, target = test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test_set&quot;</span>, img_tensor, i)<br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="1-2-DataLoder"><a href="#1-2-DataLoder" class="headerlink" title="1.2 DataLoder"></a>1.2 DataLoder</h3><blockquote><p>加载数据集将多个数据 Tensor 和和标签分别打包成一个大的整体 batch</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>,train=<span class="hljs-literal">True</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">False</span>)<br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">False</span>)<br>test_loder = DataLoader(dataset=test_set,batch_size=<span class="hljs-number">64</span>,shuffle=<span class="hljs-literal">True</span>,num_workers=<span class="hljs-number">0</span>,drop_last=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># for data in test_loder:</span><br><span class="hljs-comment">#   imgs,target = data</span><br><span class="hljs-comment">#   print(imgs.shape,target)</span><br><span class="hljs-comment">#   print(type(imgs))</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>  step = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loder:<br>      imgs,targets = data<br>      <span class="hljs-comment"># imgs = imgs.permute(0, 2, 3, 1)</span><br>      writer.add_image(<span class="hljs-string">&quot;epoch_&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch), imgs, step, dataformats=<span class="hljs-string">&#x27;NCHW&#x27;</span>)<br>      step+=<span class="hljs-number">1</span><br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308172314315.png" alt="image.png|400"></p><blockquote><p>[!NOTE] Tip</p><ul><li><code>shuttle = true</code>，则每轮打包成 batch 的数据顺序不同，提高训练效果</li><li><code>writer.add_image(&quot;epoch_&#123;&#125;&quot;.format(epoch), imgs, step, dataformats=&#39;NCHW&#39;)</code> 需要指定图片数据类型 <code>dataformats</code></li></ul></blockquote><h2 id="2-TensorBoard"><a href="#2-TensorBoard" class="headerlink" title="2. TensorBoard"></a>2. TensorBoard</h2><blockquote><p>TensorBoard 是一个用于可视化和监控机器学习模型训练过程的工具。它可以帮助您跟踪实验指标（如损失和准确率）、呈现模型计算图以及将嵌入向量投影到较低维度的空间等[1]。以下是使用 TensorBoard 的一般步骤：</p></blockquote><ol><li><p>安装 TensorBoard：您可以使用 pip 安装 TensorBoard，例如 <code>pip install tensorboard</code>。</p></li><li><p>导入 TensorBoard：在 Python 代码中，导入 TensorBoard 库，例如 <code>import tensorflow as tf</code>。</p></li><li><p>在代码中添加 TensorBoard 回调：在您的机器学习模型训练代码中，添加 TensorBoard 回调函数。这将允许 TensorBoard 在训练过程中记录指定的指标和数据。</p></li><li><p>启动 TensorBoard 服务器：在终端中，使用命令 <code>tensorboard --logdir=&lt;log_directory&gt;</code> 启动 TensorBoard 服务器。其中，<code>&lt;log_directory&gt;</code> 是您保存 TensorBoard 日志文件的目录。</p></li><li><p>在浏览器中查看 TensorBoard：在浏览器中输入 <code>http://localhost:6006</code>，您将能够查看 TensorBoard 的可视化界面。</p></li></ol><blockquote><p>在 TensorBoard 界面中，您可以查看训练过程中的损失曲线、准确率曲线等指标图表。您还可以查看模型计算图、嵌入向量的投影等[1]。</p></blockquote><h3 id="2-1-绘图"><a href="#2-1-绘图" class="headerlink" title="2.1 绘图"></a>2.1 绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br>writer  = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y=x&quot;</span>,i,i)<br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308161754456.png" alt="image.png|500"></p><h3 id="2-2-添加图片"><a href="#2-2-添加图片" class="headerlink" title="2.2 添加图片"></a>2.2 添加图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>writer  = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>img_path = <span class="hljs-string">&quot;dataset/train/ants_image/1030023514_aad5c608f9.jpg&quot;</span><br>img_pil = Image.<span class="hljs-built_in">open</span>(img_path)<br>img_array = np.array(img_pil)<br>writer.add_image(<span class="hljs-string">&quot;ant_test&quot;</span>,img_array,<span class="hljs-number">2</span>,dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>)<br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308161755844.png" alt="image.png|400"></p><h2 id="3-Transforms"><a href="#3-Transforms" class="headerlink" title="3. Transforms"></a>3. Transforms</h2><h3 id="3-1-ToTensor"><a href="#3-1-ToTensor" class="headerlink" title="3.1 ToTensor"></a>3.1 ToTensor</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308162052347.png" alt="image.png|500"></p><blockquote><p>通过 transforms. ToTensor 去看两个问题</p><ol><li>transforms 该如何使用 (python)？</li><li>为什么我们需要 Tensor 数据类型？</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> cv2<br>img_path = <span class="hljs-string">&quot;./dataset/train/ants_image/0013035.jpg&quot;</span><br>img_PIL=Image.<span class="hljs-built_in">open</span>(img_path)<br>img_cv = cv2.imread(img_path)<br>transform_tensor = transforms.ToTensor()<br>img_tensor = transform_tensor(img_cv)<br><span class="hljs-built_in">print</span>(img_tensor.shape)<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>writer.add_image(<span class="hljs-string">&quot;tensor_image&quot;</span>,img_tensor)<br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308171038445.png" alt="image.png|400"></p><blockquote><p>[!NOTE] Tips</p><ol><li><strong>cv 2 的 imread</strong> 读取的图片类型为 <code>ndarray</code></li><li><strong>PIL 的 Image. open</strong> 读取的图片类型为 <code>JpegImageFile</code></li></ol></blockquote><h3 id="3-2-Compose"><a href="#3-2-Compose" class="headerlink" title="3.2 Compose"></a>3.2 Compose</h3><blockquote><p>Compose 类是将多种 transforms 操作叠加在一起, 初始化 compose 类后, 执行__call__​​方法循环执行组合操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">transform_compose = transforms.Compose([transforms.CenterCrop(<span class="hljs-number">10</span>),transforms.ToTensor(),transforms.ConvertImageDtype(torch.<span class="hljs-built_in">float</span>),])<br>img_compose = transform_compose(img_PIL)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_compose))<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>writer.add_image(<span class="hljs-string">&quot;compose_tensor_image&quot;</span>,img_compose)<br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="3-3-Normalize"><a href="#3-3-Normalize" class="headerlink" title="3.3 Normalize"></a>3.3 Normalize</h3><blockquote><p>对图像进行正则化, 传参包括各通道均值和标准差</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">trans_normalize = transforms.Normalize([<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>],[<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>])<br>img_norm = trans_normalize(img_tensor)<br><span class="hljs-built_in">print</span>(img_norm[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>writer.add_image(<span class="hljs-string">&quot;Normalize&quot;</span>,img_norm)<br></code></pre></td></tr></table></figure><p><img src="!%5B%5D(https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308171425731.png)" alt="image"></p><h3 id="3-4-Resize"><a href="#3-4-Resize" class="headerlink" title="3.4 Resize"></a>3.4 Resize</h3><blockquote><p>改变 PILImage 图像尺寸</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-comment"># 将图像缩放到256x256</span><br>trans_resize= transforms.Resize(<span class="hljs-number">256</span>) <br><span class="hljs-comment"># 将图像按比例缩放,短边为256</span><br>trans_resize= transforms.Resize(size=(<span class="hljs-number">256</span>, <span class="hljs-number">256</span>), interpolation=Image.BICUBIC)<br><span class="hljs-comment"># 最长边不超过256,短边按2:1的比例缩放 </span><br>trans_resize= transforms.Resize(max_size=<span class="hljs-number">256</span>, ratio=<span class="hljs-number">2</span>)<br>img_resize = trans_resize(img_tensor)<br><span class="hljs-built_in">print</span>(img_resize.shape)<br></code></pre></td></tr></table></figure><h3 id="3-5-RandomCrop"><a href="#3-5-RandomCrop" class="headerlink" title="3.5 RandomCrop"></a>3.5 RandomCrop</h3><blockquote><p>随机裁剪图像, 指定裁剪后的图像大小进行随机裁剪, 支持输入格式为 PILImage 和 Tensor​​</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">trans_randomcrop = transforms.RandomCrop(<span class="hljs-number">512</span>)<br>img_randomcrop = trans_randomcrop(img_tensor)<br><span class="hljs-built_in">print</span>(img_randomcrop.shape)<br>writer.add_image(<span class="hljs-string">&quot;randomcrop&quot;</span>,img_randomcrop)<br></code></pre></td></tr></table></figure><p>​​ <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308171458436.png" alt="|400"> ​<br>​​</p><h2 id="神经网络基本骨架"><a href="#神经网络基本骨架" class="headerlink" title="神经网络基本骨架"></a>神经网络基本骨架</h2><h3 id="4-1-nn-module"><a href="#4-1-nn-module" class="headerlink" title="4.1 nn_module"></a>4.1 nn_module</h3><blockquote><p>module 是是所有网络模块的<strong>基类</strong>，必须继承该类并重写部分方法，构造方法、前向传播等</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Simple_Nn</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:  <br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):  <br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span>  <br>        <span class="hljs-keyword">return</span> output  <br>simple_nn = Simple_Nn()  <br><span class="hljs-built_in">input</span> = torch.tensor(<span class="hljs-number">1.0</span>)  <br>output = simple_nn(<span class="hljs-built_in">input</span>)  <br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h3 id="4-2-nn-Conv2d（卷积）"><a href="#4-2-nn-Conv2d（卷积）" class="headerlink" title="4.2 nn.Conv2d（卷积）"></a>4.2 nn.Conv2d（卷积）</h3><blockquote><p>卷积层的使用，Conv2d是神经网络结构中的二维卷积结构，也是最常用的模块之一。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">import</span> torchvision  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, ReLU  <br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader  <br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter  <br>  <br>test_sets = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>,  <br>                                         transform=torchvision.transforms.ToTensor(),  <br>                                         download=<span class="hljs-literal">True</span>)  <br>dataloader = DataLoader(test_sets, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>)  <br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">My_Cnn</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, </span>):  <br>        <span class="hljs-built_in">super</span>(My_Cnn, self).__init__()  <br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)  <br>        <span class="hljs-comment"># self.maxpool1 = MaxPool2d(6, stride=2, padding=0)  </span><br>        <span class="hljs-comment"># self.nonlinear1 = ReLU()  </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):  <br>        map1 = self.conv1(x)  <br>        output = self.nonlinear1(map1)  <br>        <span class="hljs-keyword">return</span> output  <br>  <br>  <br>mycnn = My_Cnn()  <br><span class="hljs-built_in">print</span>(mycnn)  <br>step = <span class="hljs-number">0</span>  <br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)  <br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:  <br>    imgs, targets = data  <br>    output = mycnn(imgs)  <br>    output = torch.reshape(output, [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>])  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Batch:&quot;</span> + <span class="hljs-built_in">str</span>(step), imgs.shape)  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Batch:&quot;</span> + <span class="hljs-built_in">str</span>(step), output.shape)  <br>    writer.add_image(<span class="hljs-string">&quot;input_img&quot;</span>, imgs, step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    writer.add_image(<span class="hljs-string">&quot;output_img&quot;</span>, output, step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    step += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p><strong>Tensorboard结果：</strong></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308261350971.png" alt="|350"></p><hr><h3 id="4-3-nn-MaxPool2d（最大池化）"><a href="#4-3-nn-MaxPool2d（最大池化）" class="headerlink" title="4.3 nn.MaxPool2d（最大池化）"></a>4.3 nn.MaxPool2d（最大池化）</h3><blockquote><p>最大池化保持特征图通道数不变的前提下，大小减少约一半左右，起到减小网络参数，提取关键特征，加快收敛速度（本身不具备特征提取作用）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">import</span> torchvision  <br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader  <br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter  <br>  <br>test_sets = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>,  <br>                                         transform=torchvision.transforms.ToTensor(),  <br>                                         download=<span class="hljs-literal">True</span>)  <br>dataloader = DataLoader(test_sets, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>)  <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NiuMa</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-built_in">super</span>(NiuMa, self).__init__()  <br>        self.maxpool = MaxPool2d(<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">True</span>)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):  <br>        <span class="hljs-keyword">return</span> self.maxpool(<span class="hljs-built_in">input</span>)  <br>  <br>  <br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)  <br>niuma = NiuMa()  <br>step = <span class="hljs-number">0</span>  <br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:  <br>    imgs, targets = data  <br>    output = niuma(imgs)  <br>    writer.add_image(<span class="hljs-string">&quot;input_maxpool&quot;</span>, imgs, step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    writer.add_image(<span class="hljs-string">&quot;output_maxpool&quot;</span>, output, step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;batch:&quot;</span> + <span class="hljs-built_in">str</span>(step), imgs.shape, output.shape)  <br>    step += <span class="hljs-number">1</span>  <br>  <br>writer.close()<br><br></code></pre></td></tr></table></figure><p><strong>Tensorboard结果：</strong><br><em>输入图像</em><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308261448451.png" alt="image.png | 225"><br><em>最大池化输出图像</em><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308261448510.png" alt="image.png | 250"></p><hr><h3 id="4-4-非线性激活"><a href="#4-4-非线性激活" class="headerlink" title="4.4 非线性激活"></a>4.4 非线性激活</h3><blockquote><p>非线性激活对输入进行非线性处理，从而拟合出需要的模型，非线性越多拟合效果越好，但容易过拟合，<code>ReLU激活函数</code>是最常用的非线性激活函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">import</span> torchvision.datasets  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU, Sigmoid  <br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader  <br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter  <br>    <br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>,  <br>                                       transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)  <br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>)  <br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NiuMa</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-built_in">super</span>(NiuMa, self).__init__()  <br>        self.relu = ReLU()  <br>        self.sigmoid = Sigmoid()  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):  <br>        <span class="hljs-keyword">return</span> self.sigmoid(<span class="hljs-built_in">input</span>)  <br>  <br>  <br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)  <br>niuma = NiuMa()  <br>step = <span class="hljs-number">0</span>  <br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:  <br>    imgs, targets = data  <br>    output = niuma(imgs)  <br>    writer.add_image(<span class="hljs-string">&quot;output_sigmoid&quot;</span>, output, global_step=step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    step += <span class="hljs-number">1</span>  <br>writer.close()<br><br></code></pre></td></tr></table></figure><p><strong>TensorBoard结果：</strong></p><p><em>Sigmoid非线性激活</em><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308261517218.png" alt="image.png|350"></p><h3 id="4-5-线性层"><a href="#4-5-线性层" class="headerlink" title="4.5 线性层"></a>4.5 线性层</h3><blockquote><p>线性层一般为网络最后的全连接层，分类问题则经过softmax得到各个类别的概率。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">import</span> torchvision.datasets  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Linear  <br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader  <br>  <br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>,  <br>                                       transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)  <br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>, drop_last=<span class="hljs-literal">True</span>)  <br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NiuMa</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-built_in">super</span>(NiuMa, self).__init__()  <br>        <span class="hljs-comment"># Linear的参数为输入特征数和输出特征数  </span><br>        self.linear = Linear(<span class="hljs-number">196608</span>, <span class="hljs-number">10</span>)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):  <br>        <span class="hljs-keyword">return</span> self.linear(<span class="hljs-built_in">input</span>)  <br>  <br>  <br>niuma = NiuMa()  <br>  <br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:  <br>    imgs, targets = data  <br>    imgs = torch.flatten(imgs)  <br>    <span class="hljs-built_in">print</span>(imgs.shape)  <br>    output = niuma(imgs)  <br>    <span class="hljs-built_in">print</span>(output.shape, output)<br><br></code></pre></td></tr></table></figure><h1 id="常用函数手册"><a href="#常用函数手册" class="headerlink" title="常用函数手册"></a>常用函数手册</h1><p>![[pytorch常用函数手册.pdf]]</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.bilibili.com/video/BV1hE411t7RN?p=6&vd_source=9c896fa9c3f9023797e8efe7be0c113e">PyTorch快速入门（小土堆）</a></p>]]></content>
    
    
    <summary type="html">Machine and Deep learning</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="DL" scheme="https://alleyf.github.io/tags/DL/"/>
    
  </entry>
  
  <entry>
    <title>OS</title>
    <link href="https://alleyf.github.io/2023/05/8e2ac1a55f44.html"/>
    <id>https://alleyf.github.io/2023/05/8e2ac1a55f44.html</id>
    <published>2023-05-21T12:24:20.000Z</published>
    <updated>2023-07-04T14:08:44.088Z</updated>
    
    
    <summary type="html">Some knowledge about os.</summary>
    
    
    
    <category term="CS" scheme="https://alleyf.github.io/categories/CS/"/>
    
    
    <category term="CS" scheme="https://alleyf.github.io/tags/CS/"/>
    
    <category term="OS" scheme="https://alleyf.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot启示录</title>
    <link href="https://alleyf.github.io/2023/04/218510a8c5b9.html"/>
    <id>https://alleyf.github.io/2023/04/218510a8c5b9.html</id>
    <published>2023-04-28T08:37:54.000Z</published>
    <updated>2023-10-05T07:25:50.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-开发环境热部署"><a href="#1-开发环境热部署" class="headerlink" title="1.开发环境热部署"></a>1.开发环境热部署</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><blockquote><ol><li>在实际的项目开发调试过程中会频繁地修改后台类文件，导致需要重新编译、重新启动，整个过程非常麻烦，影响开发效率。</li><li>Spring Boot 提供了 spring-boot-devtools 组件，使得无须手动重启 SpringBoot 应用即可重新编译、启动项目，大大缩短编译启动的时间。devtools 会监听 classpath 下的文件变动，触发 Restart 类加载器重新加载该类,从而实现类文件和属性文件的热部署。</li><li>并不是所有的更改都需要重启应用 (如静态资源、视图模板)，可以通过设置spring. devtools. restart. exclude 属性来指定一些文件或目录的修改不用重启应用</li></ol></blockquote><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><blockquote><p>在 <strong>pom. xml</strong> 配置文件中添加 <strong>dev-tools 依赖</strong>。<br>使用 <strong>optional=true</strong> 表示依赖<strong>不会传递</strong>，即该项目依赖 devtools; 其他项目如果引入此项目生成的 JAR 包，则不会包含 devtools</p></blockquote><h3 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom. xml"></a>1.pom. xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>&lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2. application. properties"></a>2. application. properties</h3><blockquote><p>在 application. properties 中配置 <strong>devtools.</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">#热部署生效<br>spring.devtools.restart.enabLed=<span class="hljs-literal">true</span><br>#设置重启目录<br>spring.devtooLs.restart.additional-paths=src/main/java<br>#设置classpath目录下的 WEB-INF 文件夹内容修改不重启<br>spring.devtooLs.restart.exclude=<span class="hljs-keyword">static</span><span class="hljs-comment">/**</span><br></code></pre></td></tr></table></figure><ul><li>如果使用了<span style="background:rgba(240, 200, 0, 0.2)"> Eclipse</span>, 那么在修改完代码并保存之后，项目将自动编译并触发重启，而如果使用了 <span style="background:rgba(160, 204, 246, 0.55)">IntelliJ IDEA</span>, 还需要配置项目自动编译。</li><li>打开<font color="#245bdb"> Settings </font>页面，在左边的菜单栏依次找到Build, Execution, Deployment-→Compile, 勾选 <font color="#ffc000">Build project automatically</font></li><li>按 <font color="#4bacc6">Ctrl+ Shift+ Alt+ /</font>快捷键调出 Maintenance 页面，单击 <font color="#9bbb59">Registry</font>, 勾选<font color="#8064a2">compiler.automake.allow.when.app.running </font>复选框 (可能找不到，修改设置为下图即可解决)。</li><li>做完这两步配置之后，若开发者再次在 IntelliJ IDEA 中修改代码，则项目会自动重启。</li></ul><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230428173445.png" alt="image.png|425"></p><h1 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2. 控制器"></a>2. 控制器</h1><blockquote><ol><li>Spring Boot 提供了<font color="#f79646">@Controller</font> 和<font color="#c0504d">@RestController</font> 两种注解来标识此类负责<span style="background:rgba(240, 107, 5, 0.2)">接收和处理 HTTP 请求</span>。</li><li>如果请求的是<font color="#00b0f0">页面和数据</font>，使用<font color="#0070c0">@Controller </font>注解即可; 如果只是请求<font color="#ff0000">数据</font>,则可以使用<font color="#c00000">@RestController </font>注解。</li></ol></blockquote><h2 id="1-demo"><a href="#1-demo" class="headerlink" title="1.demo"></a>1.demo</h2><p>@ RestController 的用法<br>默认情况下，@RestController 注解会将返回的对象数据转换为 <strong>JSON 格式</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">&quot;/user&quot;</span>)<br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setUsername (<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>user.setPassword (<span class="hljs-string">&quot;123&quot;</span>) ;<br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-路由映射"><a href="#2-路由映射" class="headerlink" title="2.路由映射"></a>2.路由映射</h2><blockquote><p>@RequestMapping 注解主要负责 URL 的路由映射。它可以添加Controller类或者具体的方法上。<br>如果添加在 Controller 类上，则这个 Controller 中的所有路由映射都将会加上此映射规则，如果添加在方法上，则只对当前方法生效。<br>@RequestMapping 注解包含很多属性参数来定义 HTTP 的请求映射规则。常用的属性参数如下:<br><span style="background:#d3f8b6">- value: 请求 URL 的路径, 支持 URL 模板、正则表达式</span><br><span style="background:#d3f8b6">- method: HTTP 请求方法</span></p></blockquote><ul><li>consumes:请求的媒体类型 (Content- Type)，如 application/json</li><li>produces: 响应的媒体类型<br><span style="background:#d3f8b6">- params, headers: 请求的参数及请求头的值</span></li></ul><h3 id="1-路由规则"><a href="#1-路由规则" class="headerlink" title="1. 路由规则"></a>1. 路由规则</h3><ol><li>@RequestMapping 的 <font color="#0070c0">value </font>属性用于<font color="#0070c0">匹配 URL 映射</font>，value 支持简单表达式</li><li>@RequestMapping (“/user”)</li><li>@RequestMapping 支持使用通配符匹配 URL，用于统一映射某些 URL 规则类似的请求: @RequestMapping (“/getJson/*. json”), 当在浏览器中请求/getJson/a.json 或者/getJson/b.json 时都会匹配到后台的 Json 方法</li><li>@RequestMapping 的通配符匹配非常简单实用，支持**<span style="background:#b1ffff">“*“  “?” “**“</span>** 等通配符</li><li>符号<font color="#ffc000"> “*“ </font>匹配<font color="#ffc000">任意字符</font>，符号 <font color="#00b050">“**“</font> 匹配<font color="#00b050">任意路径</font>，符号<font color="#00b0f0"> “?” </font>匹配<font color="#0070c0">单个字符</font>。有通配符的优先级低于没有通配符的，比如/user/addjson 比/user/* .json 优先匹配。有“**” 通配符的优先级低于有”*“ 通配符的。</li></ol><h3 id="2-Method-匹配"><a href="#2-Method-匹配" class="headerlink" title="2. Method 匹配"></a>2. Method 匹配</h3><ul><li>HTTP 请求 Method 有 <span style="background:#affad1">GET、POST、 PUT、DELETE </span>等方式。HTTP 支持的全部Method</li><li>@RequestMapping 注解提供了 method 参数指定请求的 Method 类型，包括<span style="background:rgba(205, 244, 105, 0.55)">RequestMethod. GET、RequestMethod. POST、RequestMethod.DELETE、RequestMethod. PUT</span> 等值，分别对应 HTTP 请求的 Method<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">&quot;/getData&quot;</span> , method = RequestMethod.GET)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>Method 匹配也可以使用<span style="background:rgba(3, 135, 102, 0.2)">@GetMapping、@PostMapping </span>等注解代替。</li></ul><h3 id="3-参数传递"><a href="#3-参数传递" class="headerlink" title="3. 参数传递"></a>3. 参数传递</h3><h4 id="1-get-请求"><a href="#1-get-请求" class="headerlink" title="1. get 请求"></a>1. get 请求</h4><blockquote><p>视图函数定义 query_params 路由参数，函数体内可以直接获取该参数。</p></blockquote><p>demo：</p><p>方式 1 同参（参数可有可无都能成功响应）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;  <br><span class="hljs-comment">// get注解  </span><br><span class="hljs-meta">@RequestMapping(value = &quot;/index1&quot;,method = RequestMethod.GET)</span><br><span class="hljs-comment">// @GetMapping(&quot;/index1&quot;)  </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello1</span><span class="hljs-params">(String name)</span>&#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;欢迎您：&quot;</span>+name;  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>方式 2 不同参（参数必须携带，否则 400 错误响应）</p><blockquote><p>将参数 usrname 映射为 name，默认<font color="#0070c0"> require=true</font>（必须携带参数否则报错），设置为 false 可以<font color="#6425d0">不携带参数访问</font><br><code>public String hello2(@RequestParam(value = &quot;usrname&quot;,required = false) String name)</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/index2&quot;,method = RequestMethod.GET)</span>  <br><span class="hljs-comment">// @GetMapping(&quot;/index&quot;)  </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;usrname&quot;)</span> String name)</span>&#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;欢迎您：&quot;</span>+name;  <br>&#125;<br></code></pre></td></tr></table></figure><p>通配符匹配路由：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;test/*&quot;)</span>  <span class="hljs-comment">// 匹配同级任何路由</span><br><span class="hljs-meta">@GetMapping(&quot;test/**&quot;)</span>  <span class="hljs-comment">// 匹配任何路由（包括子级）</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;匹配同级任意路径&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Post-请求"><a href="#2-Post-请求" class="headerlink" title="2.Post 请求"></a>2.Post 请求</h4><h5 id="1-urlencode-格式数据"><a href="#1-urlencode-格式数据" class="headerlink" title="1. urlencode 格式数据"></a>1. urlencode 格式数据</h5><p>方式 1 直接传数据：</p><blockquote><p>适合参数少的情景</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String name,String pwd)</span>&#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span>+name);  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span>+pwd);  <br><span class="hljs-keyword">return</span> name!=<span class="hljs-literal">null</span> &amp;&amp; pwd!=<span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>方式 2 对象传数据：</p><blockquote><p>适合参数多的情景，<font color="#6425d0">User 为实体类</font></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login2/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login2</span><span class="hljs-params">(User user)</span> &#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + user.getUsername());  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span> + user.getPassword());  <br>System.out.println(user);  <br><span class="hljs-keyword">return</span> user.getUsername() != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword() != <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br><span style="background:#ff4d4f">上述两种方式，发送的 data 数据必须经过 urlencode 编码，否则接收不到。</span></p></blockquote><h5 id="2-json-格式数据"><a href="#2-json-格式数据" class="headerlink" title="2. json 格式数据"></a>2. json 格式数据</h5><blockquote><p>需要给视图函数形参中添加注解<font color="#245bdb">@RequestBody</font>，且 json data 中的参数键名需要与后端中的实体类的属性并一致。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login3/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login3</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + user.getUsername());  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span> + user.getPassword());  <br>System.out.println(user);  <br><span class="hljs-keyword">return</span> user.getUsername() != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword() != <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230428185132.png" alt="image.png|500"></p><h1 id="3-文件上传"><a href="#3-文件上传" class="headerlink" title="3. 文件上传"></a>3. 文件上传</h1><h2 id="1-静态资源访问"><a href="#1-静态资源访问" class="headerlink" title="1. 静态资源访问"></a>1. 静态资源访问</h2><ol><li>使用 IDEA 创建 Spring Boot 项目，会默认创建出 <font color="#245bdb">classpath:/static/</font>目录, 静态资源一般放在这个目录下即可。</li><li>如果默认的静态资源过滤策略不能满足开发需求，也可以自定义静态资源过滤策略。</li><li>在 <span style="background:#d3f8b6">application. properties </span>中直接定义过滤规则和静态资源位置: </li></ol><ul><li><code>spring.mvc.static-path-pattern=/static/\*\*</code> </li><li><code>spring.web.resources.static-locations=classpath:/static/</code></li></ul><ol start="4"><li>过滤规则为<font color="#00b0f0">/static/**</font>，静态资源位置为<font color="#00b0f0"> classpath:/static/</font></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#设置静态路径过滤规则  </span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">images/**  </span><br><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/static/images/</span><br></code></pre></td></tr></table></figure><h2 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2. 文件上传"></a>2. 文件上传</h2><h3 id="1-文件上传原理"><a href="#1-文件上传原理" class="headerlink" title="1. 文件上传原理"></a>1. 文件上传原理</h3><ul><li>表单的<font color="#ffff00"> enctype 属性</font>规定在发送到服务器之前对表单数据的<font color="#ffff00">编码方式</font>。</li><li>当表单的 enctype=”<font color="#ffc000">application/x-www-form-urlencoded</font>“ (默认)时,<br>form 表单中的数据格式为: <font color="#ffc000">key=value&amp;key=value</font></li><li>当表单的 enctype=”<font color="#00b0f0">multipart/form-data</font>“时，其传输数据形式如下：<br><img src="https://s2.loli.net/2023/04/28/jh6pWVrx2yZSB43.png" alt="image.png|425"></li></ul><h3 id="2-配置文件大小"><a href="#2-配置文件大小" class="headerlink" title="2. 配置文件大小"></a>2. 配置文件大小</h3><ul><li>Spring Boot 工程嵌入的 tomcat 限制了请求的文件大小，每个文件的配置最大为 1 Mb，单次请求的文件的总数不能大于 10 Mb.</li><li>要更改这个默认值需要在配置文件 (如<font color="#00b0f0"> application.properties</font>) 中加入两个配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.servlet.multipart.max-file-size=10MB<br>spring.servlet.multipart.max-request-size=10MB<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>当表单的 enctype= “<font color="#9bbb59">multipart/form-data</font>“时, 可以使用<font color="#9bbb59"> MultipartFile </font>获取上传的文件数据，再通过 <font color="#9bbb59">transferTo </font>方法将其写入到磁盘中</p></blockquote><p>demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.controller;  <br>  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServlet;  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;  <br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;  <br>  <br><span class="hljs-keyword">import</span> java.io.File;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br>  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController</span> &#123;  <br><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(String name, MultipartFile avatar, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>System.out.println(name);  <br>System.out.println(<span class="hljs-string">&quot;filename:&quot;</span> + avatar.getOriginalFilename());  <br><span class="hljs-comment">// 获取文件类型  </span><br>System.out.println(avatar.getContentType());  <br><span class="hljs-comment">// 获取当前程序运行路径，部署时动态改变  </span><br><span class="hljs-comment">// String path = request.getServletContext().getRealPath(&quot;/upload/&quot;);  </span><br><span class="hljs-comment">// 固定为本地地址便于测试</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\IDEAProjects\\helloworld\\src\\main\\resources\\static\\images\\&quot;</span>;  <br>System.out.println(path);  <br>saveFile(avatar, path);  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功&quot;</span>;  <br>&#125;  <br>  <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveFile</span><span class="hljs-params">(MultipartFile avatar, String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br><span class="hljs-comment">// 获取上传文件夹  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);  <br><span class="hljs-comment">// 判断文件夹是否存在，不存在则创建  </span><br><span class="hljs-keyword">if</span> (!dir.exists()) &#123;  <br>dir.mkdir();  <br>&#125;  <br><span class="hljs-comment">// 实例化上传文件  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + avatar.getOriginalFilename());  <br>System.out.println(file.getPath());  <br><span class="hljs-comment">// 保存上传的文件  </span><br>avatar.transferTo(file);  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-拦截器"><a href="#3-拦截器" class="headerlink" title="3. 拦截器"></a>3. 拦截器</h2><p>简介：</p><blockquote><ol><li>拦截器在 Web 系统中非常常见，对于某些全局统一-的操作，我们可以把它提取到拦截器中实现。总结起来，拦截器大致有以下几种使用场景:</li><li><font color="#7030a0">权限检查:</font> 如登录检测，进入处理程序检测是否登录，如果没有，则直接返回登录页面。<br>3<font color="#7030a0">. 性能监控: </font>有时系统在某段时间莫名其妙很慢，可以通过拦截器在进入处理程序之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间</li><li><font color="#548dd4">通用行为: </font>读取 cookie 得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有提取 Locale、Theme 信息等，只要是多个处理程序都需要的，即可使用拦截器实现。</li></ol></blockquote><blockquote><p>[!NOTE] tips</p><ol><li>Spring Boot 定义了 <span style="background:#d2cbff">HandlerInterceptor 接口</span>来实现自定义拦截器的功能</li><li>HandlerInterceptor 接口定义了<span style="background:#40a9ff"> preHandle、postHandle、 afterCompletion</span> 三种方法，通过重写这三种方法实现请求前、请求后等操作<br><img src="https://s2.loli.net/2023/04/29/dvnpCAF81RxlBK5.png" alt="image.png|375"></li></ol></blockquote><h3 id="1-拦截器定义"><a href="#1-拦截器定义" class="headerlink" title="1. 拦截器定义"></a>1. 拦截器定义</h3><blockquote><p>类似于 django 的<font color="#4bacc6"> Midleware </font>中间件，控制请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">pub1ic <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*在请求处理之前进行调用(Control1er方法调用之前)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@override</span><br>pub1ic <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServ1etRequest request, HttpServ1etResponse response, object handTer)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (条件) &#123;<br>System.out.print1n(<span class="hljs-string">&quot;通过&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.print1n(<span class="hljs-string">&quot;不通过&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>返回为 true 则进入下一个拦截器，否则拒绝通过。</p></blockquote><h3 id="2-拦截器注册"><a href="#2-拦截器注册" class="headerlink" title="2. 拦截器注册"></a>2. 拦截器注册</h3><ul><li><span style="background:#affad1"> addPathPatterns </span>方法定义拦截的地址</li><li><span style="background:#b1ffff">excludePathPatterns </span>定义排除某些地址不被拦截</li><li>添加的一个拦截器没有 addPathPattern 任何一个 url 则<font color="#92d050">默认拦截所有请求</font></li><li>如果没有 excludePathPatterns 任何一个请求，则<font color="#92cddc">默认不放过任何一个请求</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;  <br><span class="hljs-comment">// 只拦截user路由下的所有路由  </span><br><span class="hljs-comment">// registry.addInterceptor(new LoginInterceptor()).addPathPatterns(&quot;/admin/**&quot;);  </span><br><span class="hljs-comment">// 拦截所有路由  </span><br>registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>());  <br>  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-RESTful"><a href="#4-RESTful" class="headerlink" title="4. RESTful"></a>4. RESTful</h1><h2 id="1-RESTful-介绍"><a href="#1-RESTful-介绍" class="headerlink" title="1.RESTful 介绍"></a>1.RESTful 介绍</h2><ol><li>HTTP 提供了<font color="#4bacc6"> POST、GET、 PUT、DELETE</font> 等操作类型对某个 Web 资源进行 <font color="#4bacc6">Create、Read、 Update 和 Delete </font>操作。</li><li>一个 HTTP 请求除了利用 URI 标志目标资源之外，还需要通过 HTTP Method 指定针对该资源的操作类型，一些常见的 HTTP 方法及其在 RESTful 风格下的使用:</li></ol><p><img src="https://s2.loli.net/2023/04/29/wokjgHNQVc4TCSW.png" alt="image.png|425"></p><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><ul><li>HTTP 状态码就是服务向用户返回的状态码和提示信息，客户端的每一次请求，服务都必须给出回应，回应包括<font color="#8064a2"> HTTP 状态码和数据</font>两部分。</li><li>HTTP 定义了 40 个标准状态码，可用于传达客户端请求的结果。状态码分为以下<br><font color="#f79646">5 个类别:</font><blockquote><p>1 xx: 信息，通信传输协议级信息<br>2 xx: 成功，表示客户端的请求已成功接受<br>3 xx: 重定向，表示客户端必须执行一些其他操作才能完成其请求<br>4 xx: 客户端错误，此类错误状态码指向客户端<br>5 xx: 服务器错误，服务器负责这写错误状态码</p></blockquote></li></ul><h2 id="2-构建-RESTful-应用接口"><a href="#2-构建-RESTful-应用接口" class="headerlink" title="2. 构建 RESTful 应用接口"></a>2. 构建 RESTful 应用接口</h2><p>Spring Boot 提供的<span style="background:rgba(240, 107, 5, 0.2)"> spring-boot-starter-web </span>组件完全支持开发 RESTful API, 提供了与 REST 操作方式 (GET、POST、 PUT、DELETE) 对应的注解。</p><ol><li><code>@GetMapping:</code> 处理 GET 请求，获取资源。</li><li><code>@PostMapping:</code> 处理 POST 请求，新增资源。</li><li><code>@PutMapping:</code> 处理 PUT 请求，更新资源。</li><li><code>@DeleteMapping:</code> 处理 DELETE 请求，删除资源。</li><li><code>@PatchMapping:</code> 处理 PATCH 请求，用于部分更新资源。</li></ol><blockquote><p>类似于 django 的视图装饰器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> cLass UserController &#123;<br><span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;根据ID获取用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@PostMapping(&quot;/user&quot; )</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@PutMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;更新用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; 根据ID删除用户&quot;</span>;<br><span class="hljs-number">1</span>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-Swagger-生成-API-接口文档"><a href="#3-Swagger-生成-API-接口文档" class="headerlink" title="3. Swagger 生成 API 接口文档"></a>3. Swagger 生成 API 接口文档</h2><blockquote><ol><li>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务，是非常流行的 API 表达工具。</li><li>Swagger 能够自动生成完善的 RESTful API 文档，同时并根据后台代码的修改同步更新，同时提供完整的测试页面来调试 APl。</li></ol></blockquote><p><font color="#f79646">pom. xml 依赖配置:</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- swagger依赖--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.config;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;  <br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;  <br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;  <br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;  <br>  <br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//告诉Spring容器， 这个类是一个配置类  </span><br><span class="hljs-meta">@EnableSwagger2</span> <span class="hljs-comment">//启用Swagger2功能  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;  <br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)  <br>.apiInfo(apiInfo())  <br>.select()  <br><span class="hljs-comment">// com 包下所有API都交给Swagger2管理  </span><br>.apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com&quot;</span>))  <br>.paths(PathSelectors.any()).build();  <br>&#125;  <br>  <br><span class="hljs-comment">// API文档页面显示信息  </span><br><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()  <br>.title(<span class="hljs-string">&quot;演示项目API&quot;</span>) <span class="hljs-comment">//标题  </span><br>.description(<span class="hljs-string">&quot;学习Swagger2的演示项目&quot;</span>) <span class="hljs-comment">//描述  </span><br>.version(<span class="hljs-string">&quot;1.0&quot;</span>)  <br>.build();  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>spring 3 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring3版本的swagger依赖--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.config;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br>  <br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.OpenAPI;  <br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.info.Info;  <br>  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenApiConfig</span> &#123;  <br>  <br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">springOpenAPI</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>().info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>() <span class="hljs-comment">//  </span><br>.title(<span class="hljs-string">&quot;SpringDoc API Test&quot;</span>) <span class="hljs-comment">//  </span><br>.description(<span class="hljs-string">&quot;SpringDoc Simple Application Test&quot;</span>) <span class="hljs-comment">//  </span><br>.version(<span class="hljs-string">&quot;0.0.1&quot;</span>));  <br>&#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-注解"><a href="#1-注解" class="headerlink" title="1.注解"></a>1.注解</h3><p>swagger 常用注解如下图所示：</p><p><img src="https://s2.loli.net/2023/05/02/sgfWcYZxHa2rJKm.png" alt="image.png|375"></p><p>从 Springfox 迁移过来的，需要修改注解：</p><p><span style="background:rgba(3, 135, 102, 0.2)">&gt; 1. @Api → @Tag</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 2. @ApiIgnore → @Parameter (hidden = true) or @Operation (hidden = true) or @Hidden</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 3. @ApiImplicitParam → @Parameter</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 4. @ApiImplicitParams → @Parameters</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 5. @ApiModel → @Schema</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 6. @ApiModelProperty (hidden = true) → @Schema (accessMode = READ_ONLY)</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 7. @ApiModelProperty → @Schema</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 8. @ApiOperation (value = “foo”, notes = “bar”) → @Operation (summary = “foo”, description = “bar”)</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 9. @ApiParam → @Parameter</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 10. @ApiResponse (code = 404, message = “foo”) → @ApiResponse (responseCode = “404”, description = “foo”)</span></p><h3 id="2-访问-swagger"><a href="#2-访问-swagger" class="headerlink" title="2.访问 swagger"></a>2.访问 swagger</h3><ol><li>swagger 2： <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></li><li>swagger 3: <ul><li><a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></li><li><a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></li></ul></li></ol><h1 id="5-MybatisPlus"><a href="#5-MybatisPlus" class="headerlink" title="5. MybatisPlus"></a>5. MybatisPlus</h1><h2 id="1-ORM-介绍"><a href="#1-ORM-介绍" class="headerlink" title="1.ORM 介绍"></a>1.ORM 介绍</h2><ul><li><p>ORM，（Object Relational Mapping，对象关系映射）是为了解决面向对象与关系数据库存在的互不匹配现象的一种技术。</p></li><li><p>ORM 通过使用描述对象和数据库之间映射的元数据将程序中的对象自动持久化到关系数据库中。</p></li><li><p>ORM 框架的本质是简化编程中操作数据库的编码。</p></li></ul><p><img src="https://s2.loli.net/2023/05/29/PcG5L8ZYouWhyp6.png" alt="image.png|350"></p><h2 id="2-MyBatis-Plus-介绍"><a href="#2-MyBatis-Plus-介绍" class="headerlink" title="2.MyBatis-Plus 介绍"></a>2.MyBatis-Plus 介绍</h2><ul><li>MyBatis 是一款优秀的数据持久层 ORM 框架，被广泛地应用于应用系统。</li><li>MyBatis 能够非常灵活地实现动态 SQL，可以使用 XML 或注解来配置和映射原生信息，能够轻松地将 Java 的 POJO（PlainOrdinaryJavaObject，普通的Java 对象）与数据库中的表和字段进行映射关联。</li><li>MyBatis-Plus 是一个 MyBatis 的增强工具，在 MyBatis 的基础上做了增强，简化了开发。</li></ul><p><font color="#8db3e2">添加依赖：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;! MyBatisPlus依赖<br>&lt;dependency&gt;<br>   &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!--mysql驱动依赖<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.47</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!-- 数据连接池druid<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><font color="#f79646">全局配置：</font></p><ul><li>配置数据库相关信息（application.properties）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.datasource.type=com.alibaba.druid.pool.DruidDatasource<br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br>spring.datasource.ur1=jdbc:mysql:<span class="hljs-comment">//1ocalhost:3306/mydb?usessL=false</span><br>spring.datasource.username=root<br>spring.datasource.password=<span class="hljs-number">123456</span><br>mybatis-plus.configuration.1og-impl=org.apache.ibatis.logging.stdout.stdoutImp1<br><br></code></pre></td></tr></table></figure><ul><li>添加@MapperScan 注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@springBootApplication</span><br><span class="hljs-meta">@Mapperscan(&quot;com.xx.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusDemoApplication</span> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(string[] args)</span>&#123;<br>       SpringApplication.run(MybatisplusDemoApplication.class,args);<br><br></code></pre></td></tr></table></figure><p>Mybitis CRUD 注解：<br>注解功能<br><font color="#00b0f0">@Insert     实现插入</font><br><font color="#00b0f0">@Update   实现更新</font><br><font color="#00b0f0">@Delete    实现删除</font><br><font color="#00b0f0">@Select    实现查询</font><br><font color="#00b0f0">@Result    实现结果集封装</font><br><font color="#00b0f0">@Results  可以与@Result 一起使用，封装多个结果集</font><br><font color="#00b0f0">@One       实现一对一结果集封装</font><br><font color="#00b0f0">@Many     实现一对多结果集封装</font></p><h2 id="3-MyBatis-Plus-CRUD-操作"><a href="#3-MyBatis-Plus-CRUD-操作" class="headerlink" title="3.MyBatis-Plus CRUD 操作"></a>3.MyBatis-Plus CRUD 操作</h2><p><font color="#ffc000">mybatis 的 Mapper 操作方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>   <span class="hljs-meta">@Insert(&quot;insert into user values(#&#123;id),#(username&#125;,#(password),#(birthday)&quot;)//id,username等属性为user对象的属性</span><br><span class="hljs-meta">    int add(User user);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @update(&quot;update user set username=#(username&#125;,password=#(password),birthday=#(birthday&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-meta">    int update(User user);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @Delete(&quot;delete from user where id=#(id&quot;)</span><br><span class="hljs-meta">    int delete(int id);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @select(&quot;select * from user where id=#(id&quot;)</span><br><span class="hljs-meta">   User findByid(int id);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @select(&quot;select * from user&quot;)</span><br><span class="hljs-meta">   List&lt;User&gt; getA11();</span><br></code></pre></td></tr></table></figure><p><font color="#ff0000">mybatis-plus 的操作方法</font></p><blockquote><p>BaseMapper 泛型类里已经实现了基本的增删改查任务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意<br>Mybatis-plus 有一些对 entity 里的实体类的<strong>注解</strong>，标识对应的表名、主键和字段名等，如果不进行注解则实体类的类名必须与数据表名一致，属性必须与数据表的字段名一致。<br><a href="https://baomidou.com/pages/24112f/#%E7%89%B9%E6%80%A7">注解细节</a></p></blockquote><h2 id="4-多表查询"><a href="#4-多表查询" class="headerlink" title="4. 多表查询"></a>4. 多表查询</h2><blockquote><p>实现复杂关系映射，可以使用@Results 注解，@Result 注解，@One 注解，<br>@Many 注解组合完成复杂关系的配置。</p></blockquote><p><img src="https://s2.loli.net/2023/06/01/Z6TuNLREyqGFazH.png" alt="注解说明|325"></p><p>示例：<br><strong>任务表</strong></p><p>entity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.entity;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;  <br>  <br><span class="hljs-keyword">import</span> java.sql.Date;  <br><span class="hljs-keyword">import</span> java.time.LocalDateTime;  <br>  <br><span class="hljs-meta">@TableName(value = &quot;u_task&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;  <br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> String content;  <br>    <span class="hljs-meta">@TableField(value = &quot;b_date&quot;)</span>  <br>    <span class="hljs-keyword">private</span> LocalDateTime b_date;  <br>    <span class="hljs-meta">@TableField(value = &quot;e_date&quot;)</span>  <br>    <span class="hljs-keyword">private</span> LocalDateTime e_date;  <br>    <span class="hljs-meta">@TableField(exist = false)</span>  <br>    <span class="hljs-keyword">private</span> User user;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TaskMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Task&gt; &#123;  <br>    <span class="hljs-meta">@Select(&quot;select * from task where uid = #&#123;uid&#125;&quot;)</span>  <br>    List&lt;Task&gt; <span class="hljs-title function_">selectByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;  <br><br><span class="hljs-meta">@Select(&quot;select * from task&quot;)</span>  <br><span class="hljs-meta">@Results(  </span><br><span class="hljs-meta">        &#123;  </span><br><span class="hljs-meta">                @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;name&quot;, property = &quot;name&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;content&quot;, property = &quot;content&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;b_date&quot;, property = &quot;b_date&quot;, javaType = LocalDateTime.class, jdbcType = JdbcType.TIMESTAMP),  </span><br><span class="hljs-meta">                @Result(column = &quot;e_date&quot;, property = &quot;e_date&quot;, javaType = LocalDateTime.class, jdbcType = JdbcType.TIMESTAMP),  </span><br><span class="hljs-meta">                @Result(column = &quot;uid&quot;, property = &quot;user&quot;, javaType = User.class,  </span><br><span class="hljs-meta">                        one = @One(select = &quot;com.alleyf.airesume.mapper.UserMapper.selectById&quot;)),  </span><br><span class="hljs-meta">        &#125;  </span><br><span class="hljs-meta">)</span>  <br>List&lt;Task&gt; <span class="hljs-title function_">queryAllTaskAndUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用户表</strong></p><p>entity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.entity;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;  <br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <br>    <span class="hljs-keyword">private</span> String username;  <br>    <span class="hljs-keyword">private</span> String password;  <br>    <span class="hljs-meta">@TableField(exist = false)</span>  <br>    <span class="hljs-keyword">private</span> List&lt;Task&gt; tasks;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>  <br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>  <br>    <span class="hljs-meta">@Results(  </span><br><span class="hljs-meta">            &#123;  </span><br><span class="hljs-meta">                    @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;username&quot;, property = &quot;username&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;password&quot;, property = &quot;password&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;id&quot;, property = &quot;tasks&quot;, javaType = List.class,  </span><br><span class="hljs-meta">                            many = @Many(select = &quot;com.alleyf.airesume.mapper.TaskMapper.selectByUid&quot;)),  </span><br><span class="hljs-meta">            &#125;  </span><br><span class="hljs-meta">    )</span>  <br>    List&lt;User&gt; <span class="hljs-title function_">queryAllUserAndTasks</span><span class="hljs-params">()</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意<br>查询用户的同时查出与用户相关联的所有任务<br>Result 中的 column 的字段为查询到的数据库字段值，用来赋值给后面类对象的属性 property，对应的属性与字段相同，含有不存在的属性则使用外键间接查询。</p></blockquote><h2 id="5-条件查询"><a href="#5-条件查询" class="headerlink" title="5. 条件查询"></a>5. 条件查询</h2><p><span style="background:#affad1">Mybatis 实现：</span></p><blockquote><p>在 mapper 的接口中写 sql 语句进行条件查询。</p></blockquote><p>示例：<br>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 按照任务名查询用户 * * <span class="hljs-doctag">@param</span> username 用户名  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 所有用户列表  </span><br><span class="hljs-comment"> */</span><span class="hljs-meta">@Select(&quot;select * from user where username = #&#123;username&#125;&quot;)</span>  <br><span class="hljs-meta">@Results(&#123;  </span><br><span class="hljs-meta">        @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;username&quot;, property = &quot;username&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;password&quot;, property = &quot;password&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;id&quot;, property = &quot;tasks&quot;, javaType = List.class,  </span><br><span class="hljs-meta">                many = @Many(select = &quot;com.alleyf.airesume.mapper.TaskMapper.selectByUid&quot;)),  </span><br><span class="hljs-meta">&#125;)</span>  <br>User <span class="hljs-title function_">selectByName</span><span class="hljs-params">(String username)</span>;<br><br></code></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.selectByName(username);  <br>    &#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:rgba(136, 49, 204, 0.2)">Mybatis-Plus 实现：</span></p><blockquote><ul><li>使用 <strong>QueryWrapper</strong> （条件查询）和 <strong>UpdateWrapper</strong>（条件更新） 两个条件查询类进行条件查询。</li><li>可选条件有：eq（等于），lt（大于），st（小于），le（大于等于），se（小于等于）等</li></ul></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户(MP)&quot;)</span>  <br><span class="hljs-meta">@GetMapping(&quot;/queryByMPName&quot;)</span>  <br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMPName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br>    <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6. 分页查询"></a>6. 分页查询</h2><p>编写配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.config;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaginationConfig</span> &#123;  <br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();  <br>        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">paginationInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);  <br>        interceptor.addInnerInterceptor(paginationInterceptor);  <br>        <span class="hljs-keyword">return</span> interceptor;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询所有用户：1oca1host：8080/findA11</span><br><span class="hljs-meta">@GetMapping(&quot;findAll&quot;)</span><br><span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">findAl1</span><span class="hljs-params">()</span>t<br>   <span class="hljs-comment">//设置起始值及每页条数</span><br>   Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">return</span> userMapper.selectPage(page,nul1);<br><br><span class="hljs-meta">@ApiOperation(&quot;按照页码查询用户(MP)&quot;)</span>  <br><span class="hljs-meta">@GetMapping(&quot;/queryByPage/&#123;page&#125;&quot;)</span>  <br><span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;  <br>    Page&lt;User&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>);  <br>    <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> userMapper.selectPage(page1, <span class="hljs-literal">null</span>);  <br>    <span class="hljs-keyword">return</span> iPage;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="6-JWT-跨域认证"><a href="#6-JWT-跨域认证" class="headerlink" title="6. JWT 跨域认证"></a>6. JWT 跨域认证</h1><h2 id="1-Session-认证"><a href="#1-Session-认证" class="headerlink" title="1. Session 认证"></a>1. Session 认证</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p><blockquote><ul><li>用户向服务器发送<strong>用户名和密码</strong>。</li><li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等。</li><li>服务器向用户返回一个 session_id，写入用户的 Cookie。</li><li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</li><li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</li></ul></blockquote><p>session 认证流程：<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311353929.png" alt="|350"><br>session 认证的方式应用非常普遍，但也存在一些问题，扩展性不好，如果是服务<br>器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能<br>够读取 session，针对此种问题一般有两种方案:</p><blockquote><ol><li><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。</p></li><li><p>一种方案是服务器不再保存 session 数据，所有数据都保存在客户端，每次请求都发回服务器。Token 认证就是这种方案的一个代表。</p></li></ol></blockquote><h2 id="2-Token-认证"><a href="#2-Token-认证" class="headerlink" title="2. Token 认证"></a>2. Token 认证</h2><p>Token 是在服务端产生的一串字符串, 是客户端访问资源接口（API) 时所需要的资<br>源凭证，流程如下：</p><blockquote><ul><li>客户端使用用户名跟密码请求登录，服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端</li><li>客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 token，如果验证成功，就向客户端返回请求的数据</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311410745.png" alt="image.png|350"></p><ul><li><p>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放<br>token 数据。</p></li><li><p>用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力<br>减少频繁的查询数据库</p></li><li><p>token 完全由应用管理，所以它可以避开同源策略</p></li></ul><hr><h2 id="3-JWT-的使用"><a href="#3-JWT-的使用" class="headerlink" title="3. JWT 的使用"></a>3. JWT 的使用</h2><blockquote><p>JSON Web Token（简称 JWT）是一个 token 的具体实现方式，是目前最流行<br>的跨域认证解决方案。<br>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，具体如下:</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;姓名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;角色&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;管理员&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;到期时间&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2018 年 7 月 1 日 0 点 0 分&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。<br>为了防止用户篡改数据，服务器在生成这个对象的时候，会加上<strong>签名</strong>。</p></blockquote><blockquote><p>JWT 的由三个部分组成，依次如下：<br>  <em><strong>Header (头部)<br>  Payload (负载)<br>  Signature  (签名)</strong></em><br>  三部分最终组合为完整的字符串，中间使用·分隔，如下：<br>  Header.Payload.Signature<br>           <code>eyJhbGci0iJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdwIi0iIxMjMoNTY30DkwIiwibmFtzsI6IkpvaG4 gRG91IiwiaXNTb2NpYWwiOnRydwV9. 4pcPyMD09o1PSyXnrXCjTwXyr4BsezdI1AVTmud2fU4</code></p></blockquote><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><blockquote><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;H256&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>alg 属性表示签名的算法（<strong>algorithm</strong>），默认是 HMAC SHA 256 (写成</li></ul><p><strong>HS256</strong>)</p><ul><li>typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT</li><li>最后，将上面的 JSON 对象使用 Base 64 URL 算法转成字符串。</li></ul><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><blockquote><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了 7 个官方字段，供选用。</p></blockquote><ul><li>iss (issuer)：签发人</li><li>exp (expiration time): 过期时间</li><li>sub (subject): 主题</li><li>aud (audience): 受众</li><li>nbf (Not Before): 生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (WT ID): 编号</li></ul><blockquote><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在个部分。<br>   这个 JSON 对象也要使用 <strong>Base 64 URL</strong> 算法转成字符串。</p></blockquote><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><blockquote><p> Signature 部分是对前两部分的签名，防止数据篡改。<br>    首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户; 然后，使用 Header 里面指定的签名算法 （默认是 HMAC SHA 256），按照下面的公式产生签名。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">HMACSHA <span class="hljs-number">256</span> (<br>base64UrlEncode (header) + <span class="hljs-string">&quot;.&quot;</span> +<br>base64UrlEncode (payload)<span class="hljs-punctuation">,</span><br>secret)<br></code></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（’.’）分隔，就可以返回给用户。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311433682.png" alt="image.png|450"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</li><li>客户端每次与服务器通信，都要带上这个 JWT，可以把它放在 Cookie 里面自动发送，但是这样不能跨域。</li><li>更好的做法是放在 HTTP 请求的头信息’Authorization’字段里面，单独发送。</li></ul><h3 id="请求认证"><a href="#请求认证" class="headerlink" title="请求认证"></a>请求认证</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202309262023932.png" alt="image.png|525"></p><h3 id="JWT验证拦截器"><a href="#JWT验证拦截器" class="headerlink" title="JWT验证拦截器"></a>JWT验证拦截器</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202309272236587.png" alt="image.png|250"></p><p>定义拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSON;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.utils.Result;  <br><span class="hljs-keyword">import</span> com.alleyf.common.JwtUtils;  <br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;  <br>  <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;  <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;  <br>  <br><span class="hljs-meta">@Component</span>  <br><span class="hljs-meta">@Slf4j</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtValidateInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> JwtUtils jwtUtils;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;X-Token&quot;</span>);  <br>        log.debug(request.getRequestURI() + <span class="hljs-string">&quot;待验证：&quot;</span> + token);  <br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                jwtUtils.getClaimsByToken(token);  <br>                log.debug(request.getRequestURI() + <span class="hljs-string">&quot; 验证通过&quot;</span>);  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>        &#125;  <br>        log.debug(request.getRequestURI() + <span class="hljs-string">&quot; 禁止访问&quot;</span>);  <br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);  <br>        response.getWriter().write(JSON.toJSONString(Result.error().message(<span class="hljs-string">&quot;jwt令牌无效，请重新登录&quot;</span>)));  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置使用拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.config.JwtValidateInterceptor;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> JwtValidateInterceptor jwtValidateInterceptor;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;  <br>        <span class="hljs-type">InterceptorRegistration</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> registry.addInterceptor(jwtValidateInterceptor);  <br>        registration.addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(  <br>                <span class="hljs-string">&quot;/user/login&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/register&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/logout&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/info&quot;</span>,  <br>                <span class="hljs-string">&quot;/error&quot;</span>  <br>        );  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Swagger授权配置"><a href="#Swagger授权配置" class="headerlink" title="Swagger授权配置"></a>Swagger授权配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 5 - 29 20:33 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.CookieValue;  <br><span class="hljs-keyword">import</span> org.springframework.web.context.request.async.DeferredResult;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;  <br><span class="hljs-keyword">import</span> springfox.documentation.service.*;  <br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;  <br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;  <br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;  <br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;  <br>  <br><span class="hljs-keyword">import</span> java.util.Collections;  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-meta">@EnableKnife4j</span>  <br><span class="hljs-meta">@EnableOpenApi</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;  <br>  <br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">Api</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)  <br>                .enable(<span class="hljs-literal">true</span>)<span class="hljs-comment">//是否启用：注意生产环境需要关闭  </span><br>                .groupName(<span class="hljs-string">&quot;spring-boot-2.7.12&quot;</span>)  <br>                .genericModelSubstitutes(DeferredResult.class)  <br>                .useDefaultResponseMessages(<span class="hljs-literal">false</span>)  <br>                .forCodeGeneration(<span class="hljs-literal">true</span>)  <br>                .ignoredParameterTypes(CookieValue.class)  <br>                .apiInfo(apiInfo())  <br>                .select()  <br>                <span class="hljs-comment">//以下拦截配置可以三选一，根据需要进行添加,选择扫描哪些接口  </span><br><span class="hljs-comment">//                .apis(RequestHandlerSelectors.basePackage(&quot;com.alleyf.*.controller&quot;))  </span><br>                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))  <br><span class="hljs-comment">//                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))  </span><br>                .paths(PathSelectors.any())  <br>                .build()  <br>                .securitySchemes(Collections.singletonList(securityScheme()))  <br>                .securityContexts(Collections.singletonList(securityContext()));  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> SecurityScheme <span class="hljs-title function_">securityScheme</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-comment">//return new ApiKey(&quot;Authorization&quot;, &quot;Authorization&quot;,&quot;header&quot;);  </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiKey</span>(<span class="hljs-string">&quot;X-Token&quot;</span>, <span class="hljs-string">&quot;X-Token&quot;</span>, <span class="hljs-string">&quot;header&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> SecurityContext <span class="hljs-title function_">securityContext</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> SecurityContext.builder()  <br>                .securityReferences(defaultAuth())  <br>                .forPaths(PathSelectors.regex(<span class="hljs-string">&quot;^(?!auth).*$&quot;</span>))  <br>                .build();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> List&lt;SecurityReference&gt; <span class="hljs-title function_">defaultAuth</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">AuthorizationScope</span> <span class="hljs-variable">authorizationScope</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>(<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;accessEverything&quot;</span>);  <br>        AuthorizationScope[] authorizationScopes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>[<span class="hljs-number">1</span>];  <br>        authorizationScopes[<span class="hljs-number">0</span>] = authorizationScope;  <br>        <span class="hljs-keyword">return</span> Collections.singletonList(  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityReference</span>(<span class="hljs-string">&quot;X-Token&quot;</span>, authorizationScopes));  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()  <br>                .title(<span class="hljs-string">&quot;WHUT leave Go-Swagger3接口文档&quot;</span>)  <br>                .description(<span class="hljs-string">&quot;WHUT leave Go-前后端分离的接口文档&quot;</span>)  <br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)  <br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;alleyf&quot;</span>, <span class="hljs-string">&quot;https://fcsy.com&quot;</span>, <span class="hljs-string">&quot;alleyf@qq.com&quot;</span>))  <br>                .build();  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h3><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="生成-Token"><a href="#生成-Token" class="headerlink" title="生成 Token"></a>生成 Token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//7 天过期</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800</span>;<br><span class="hljs-comment">//32 位秘钥</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;<br><br><span class="hljs-comment">//生成 token</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span>&#123;<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> (now.getTime() + <span class="hljs-number">1000</span> * expire);<br>   <span class="hljs-keyword">return</span> Jwts.builder ()<br>            .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>)<br>            .setSubject(username)<br>            .setIssuedAt(now)<br>            .setExpiration(expiration)<br>            .signWith(SignatureAlgorithm.HS512, secret)<br>            .compact();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解析-token"><a href="#解析-token" class="headerlink" title="解析 token"></a>解析 token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>    <span class="hljs-keyword">return</span> Jwts.parser()  <br>            .setSigningKey(secret)  <br>            .parseClaimsJws(token)  <br>            .getBody();  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后端完整部分"><a href="#后端完整部分" class="headerlink" title="后端完整部分"></a>后端完整部分</h4><p><code>UserController. java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 6 - 1 19:56 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.controller;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.entity.User;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.mapper.UserMapper;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.JwtUtils;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.Result;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@Api(tags = &quot;用户&quot;, value = &quot;用户&quot;)</span>  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@CrossOrigin</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    UserMapper userMapper;  <br><br>    <span class="hljs-meta">@ApiOperation(&quot;用户登录&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtils.generateToken(user.getUsername());  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;token&quot;</span>, token);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;获取用户信息&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/info&quot;)</span>  <span class="hljs-comment">//&quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">info</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> JwtUtils.getClaimsByToken(token).getSubject();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://img2.baidu.com/it/u=1325995315,4158780794&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;</span>;  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;name&quot;</span>, username).data(<span class="hljs-string">&quot;avatar&quot;</span>, url);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;注销&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span> <span class="hljs-comment">// &quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> Result.ok();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;查询所有用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryAll&quot;)</span>  <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryAllUser</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.queryAllUserAndTask();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.selectByName(username);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMPName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMPName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名路径查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPMPName/&#123;username&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByPMPName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照页码查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPage/&#123;page&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;  <br>        Page&lt;User&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>);  <br>        <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> userMapper.selectPage(page1, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-keyword">return</span> iPage;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;添加用户&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.insert(user) &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;添加成功&quot;</span> : <span class="hljs-string">&quot;添加失败&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Result.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 5 - 29 &#125;9:52 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;  <br>    <span class="hljs-keyword">private</span> Boolean success;  <br>    <span class="hljs-keyword">private</span> Integer code;  <br>    <span class="hljs-keyword">private</span> String message;  <br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Success);  <br>        r.setSuccess(<span class="hljs-literal">true</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;成功&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Error);  <br>        r.setSuccess(<span class="hljs-literal">false</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;失败&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setSuccess(success);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">message</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setMessage(message);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">code</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setCode(code);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(String key, Object value)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data.put(key, value);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setData(map);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getSuccess</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.success = success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.code = code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.message = message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> data;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Map&lt;String, Object&gt; data)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data = data;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>JwtUtils.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;  <br>  <br><span class="hljs-keyword">import</span> java.util.Date;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;  <br>    <span class="hljs-comment">//7 天过期  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800L</span>;  <br>    <span class="hljs-comment">//32 位秘钥  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;  <br>  <br>    <span class="hljs-comment">//生成 token  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span> &#123;  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(now.getTime() + <span class="hljs-number">1000</span> * expire);  <br>        <span class="hljs-keyword">return</span> Jwts.builder()  <br>                .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>)  <br>                .setSubject(username)  <br>                .setIssuedAt(now)  <br>                .setExpiration(expiration)  <br>                .signWith(SignatureAlgorithm.HS512, secret)  <br>                .compact();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-keyword">return</span> Jwts.parser()  <br>                .setSigningKey(secret)  <br>                .parseClaimsJws(token)  <br>                .getBody();  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="项目实战-角色管理"><a href="#项目实战-角色管理" class="headerlink" title="项目实战-角色管理"></a>项目实战-角色管理</h1><h2 id="1-预览效果"><a href="#1-预览效果" class="headerlink" title="1.预览效果"></a>1.预览效果</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310011258914.png" alt="image.png"></p><h2 id="2-前端"><a href="#2-前端" class="headerlink" title="2.前端"></a>2.前端</h2><p><font color="#ff0000">role.vue:</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;  <br>&lt;div&gt;  <br>&lt;!-- 添加角色--&gt;  <br>&lt;el-dialog  <br>:title=&quot;dialogTitle&quot;  <br>:visible.sync=&quot;dialogFormVisible&quot;  <br>center  <br>width=&quot;32%&quot;  <br>@close=&quot;clearForm&quot;  <br>&gt;  <br>&lt;el-form  <br>ref=&quot;roleForm&quot;  <br>:model=&quot;roleForm&quot;  <br>:rules=&quot;rules&quot;  <br>show-message  <br>status-icon  <br>&gt;  <br>&lt;el-form-item label=&quot;角色名&quot; label-width=&quot;80px&quot; prop=&quot;roleName&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;roleForm.roleName&quot;  <br>clearable  <br>prefix-icon=&quot;el-icon-user&quot;  <br>/&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;el-form-item label=&quot;角色描述&quot; label-width=&quot;80px&quot; prop=&quot;roleDesc&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;roleForm.roleDesc&quot;  <br>clearable  <br>prefix-icon=&quot;el-icon-key&quot;  <br>/&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;/el-form&gt;  <br>&lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;  <br>&lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;  <br>&lt;el-button type=&quot;primary&quot; @click=&quot;saveRole(&#x27;roleForm&#x27;)&quot;&gt;确 定  <br>&lt;/el-button&gt;  <br>&lt;/div&gt;  <br>&lt;/el-dialog&gt;  <br>&lt;!-- 角色检索--&gt;  <br>&lt;el-card id=&quot;search&quot; shadow=&quot;hover&quot;&gt;  <br>&lt;el-row :gutter=&quot;5&quot;&gt;  <br>&lt;el-col :span=&quot;18&quot;&gt;  <br>&lt;div class=&quot;grid-content bg-purple&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;searchModel.queryContent&quot;  <br>clearable  <br>placeholder=&quot;请输入用户名&quot;  <br>suffix-icon=&quot;el-icon-user&quot;  <br>&gt;  <br>&lt;el-button  <br>slot=&quot;append&quot;  <br>icon=&quot;el-icon-search&quot;  <br>type=&quot;success&quot;  <br>@click=&quot;getRoles&quot;  <br>/&gt;  <br>&lt;/el-input&gt;  <br>&lt;/div&gt;  <br>&lt;/el-col&gt;  <br>&lt;el-col :span=&quot;6&quot; align=&quot;right&quot;&gt;  <br>&lt;div class=&quot;grid-content bg-purple&quot;&gt;  <br>&lt;el-button  <br>icon=&quot;el-icon-plus&quot;  <br>size=&quot;medium&quot;  <br>type=&quot;success&quot;  <br>@click=&quot;addRole&quot;  <br>/&gt;  <br>&lt;/div&gt;  <br>&lt;/el-col&gt;  <br>&lt;/el-row&gt;  <br>&lt;/el-card&gt;  <br>&lt;!-- 用户信息--&gt;  <br>&lt;el-card shadow=&quot;hover&quot;&gt;  <br>&lt;el-table  <br>v-loading=&quot;loading&quot;  <br>:cell-style=&quot;&#123; &#x27;text-align&#x27;: &#x27;center&#x27; &#125;&quot;  <br>:data=&quot;tableData&quot;  <br>:default-sort=&quot;&#123; prop: &#x27;id&#x27;, order: &#x27;ascending&#x27; &#125;&quot;  <br>:header-cell-style=&quot;&#123; &#x27;text-align&#x27;: &#x27;center&#x27; &#125;&quot;  <br>border  <br>max-height=&quot;520&quot;  <br>style=&quot;width: 100%&quot;  <br>&gt;  <br>&lt;el-table-column label=&quot;#&quot; type=&quot;index&quot; width=&quot;80&quot;&gt;  <br>&lt;template slot-scope=&quot;scope&quot;&gt;  <br>&lt;!-- (pageNum-1)*pageSize+index+1--&gt;  <br>&#123;&#123;  <br>(searchModel.pageNum - 1) * searchModel.pageSize + scope.$index + 1  <br>&#125;&#125;  <br>&lt;/template&gt;  <br>&lt;/el-table-column&gt;  <br>&lt;el-table-column label=&quot;角色id&quot; prop=&quot;roleId&quot; sortable width=&quot;200&quot;/&gt;  <br>&lt;el-table-column  <br>class=&quot;name-wrapper&quot;  <br>label=&quot;角色名称&quot;  <br>prop=&quot;roleName&quot;  <br>width=&quot;260&quot;  <br>/&gt;  <br>&lt;el-table-column label=&quot;角色描述&quot; prop=&quot;roleDesc&quot; resizable width=&quot;280&quot;/&gt;  <br>&lt;el-table-column fixed=&quot;right&quot; label=&quot;操作&quot; width=&quot;160&quot;&gt;  <br>&lt;template slot-scope=&quot;scope&quot;&gt;  <br>&lt;el-button  <br>circle  <br>icon=&quot;el-icon-delete&quot;  <br>size=&quot;small&quot;  <br>type=&quot;danger&quot;  <br>@click.native.prevent=&quot;deleteRole(scope.$index, tableData)&quot;  <br>&gt;  <br>&lt;/el-button&gt;  <br>&lt;el-button  <br>circle  <br>icon=&quot;el-icon-edit&quot;  <br>size=&quot;small&quot;  <br>type=&quot;primary&quot;  <br>@click=&quot;editRole(scope.row)&quot;  <br>&gt;  <br>&lt;/el-button&gt;  <br>&lt;/template&gt;  <br>&lt;/el-table-column&gt;  <br>&lt;/el-table&gt;  <br>&lt;/el-card&gt;  <br>&lt;!-- 分页组件--&gt;  <br>&lt;el-footer align=&quot;center&quot;&gt;  <br>&lt;div class=&quot;block&quot;&gt;  <br>&lt;el-pagination  <br>:current-page=&quot;searchModel.currentPage&quot;  <br>:page-size=&quot;searchModel.pageNum&quot;  <br>:page-sizes=&quot;pageSizes&quot;  <br>:total=&quot;total&quot;  <br>layout=&quot;total, sizes, prev, pager, next, jumper&quot;  <br>@size-change=&quot;handleSizeChange&quot;  <br>@current-change=&quot;handleCurrentChange&quot;  <br>/&gt;  <br>&lt;/div&gt;  <br>&lt;/el-footer&gt;  <br>&lt;el-backtop target=&quot;.page-component__scroll .el-scrollbar__wrap&quot;&gt;&lt;/el-backtop&gt;  <br>&lt;/div&gt;  <br>&lt;/template&gt;  <br>  <br>&lt;script&gt;  <br>import roleApi from &#x27;@/api/roleManage&#x27;  <br>import current from &#x27;element-ui/packages/table/src/store/current&#x27;  <br>// import &#x27;@/styles/roleManage.css&#x27;  <br>  <br>export default &#123;  <br>name: &#x27;Role&#x27;,  <br>data() &#123;  <br>return &#123;  <br>searchModel: &#123;  <br>queryContent: &#x27;&#x27;,  <br>pageNum: 1,  <br>pageSize: 10  <br>&#125;,  <br>pageSizes: [10, 20, 50, 100],  <br>total: 0,  <br>tableData: [],  <br>loading: true,  <br>dialogFormVisible: false,  <br>dialogTitle: &#x27;添加角色&#x27;,  <br>roleForm: &#123;  <br>roleName: &#x27;&#x27;,  <br>roleDesc: &#x27;&#x27;  <br>&#125;,  <br>rules: &#123;  <br>roleName: [  <br>&#123; required: true, message: &#x27;请输入角色名&#x27;, trigger: &#x27;blur&#x27; &#125;,  <br>&#123;  <br>min: 1,  <br>max: 20,  <br>message: &#x27;长度在 1 到 20 个字符&#x27;,  <br>trigger: &#x27;blur&#x27;  <br>&#125;  <br>],  <br>roleDesc: [  <br>&#123; required: true, message: &#x27;请输入角色描述&#x27;, trigger: &#x27;blur&#x27; &#125;,  <br>&#123;  <br>min: 1,  <br>max: 30,  <br>message: &#x27;长度在 3 到 30 个字符&#x27;,  <br>trigger: &#x27;blur&#x27;  <br>&#125;  <br>]  <br>&#125;  <br>&#125;  <br>&#125;,  <br>computed: &#123;  <br>current() &#123;  <br>return current  <br>&#125;  <br>&#125;,  <br>created() &#123;  <br>this.getRoles()  <br>&#125;,  <br>methods: &#123;  <br>getRoles() &#123;  <br>roleApi  <br>.search(this.searchModel)  <br>.then((res) =&gt; &#123;  <br>// console.log(res)  <br>this.tableData = res.data.data.records  <br>this.total = res.data.data.total  <br>this.searchModel.pageNum = res.data.data.current  <br>this.loading = false  <br>// console.log(this.searchModel.queryContent, this.searchModel.queryItem, this.searchModel.pageSize, this.searchModel.pageNum)  <br>&#125;)  <br>.catch((error) =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125;,  <br>saveRole(formName) &#123;  <br>// alert(this.roleForm)  <br>// 提交则触发表单验证  <br>this.$refs[formName].validate((valid) =&gt; &#123;  <br>if (valid) &#123;  <br>console.log(this.roleForm)  <br>// 提交请求到后台  <br>roleApi  <br>.save(this.roleForm)  <br>.then((res) =&gt; &#123;  <br>// console.log(res)  <br>this.dialogFormVisible = false  <br>// 提交结果消息提示  <br>this.notify(res, this.message)  <br>// 刷新表格  <br>this.getRoles()  <br>&#125;)  <br>.catch((error) =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125; else &#123;  <br>console.log(&#x27;error submit!!&#x27;)  <br>return false  <br>&#125;  <br>&#125;)  <br>&#125;,  <br>clearForm() &#123;  <br>this.roleForm = &#123;&#125;  <br>this.$refs.roleForm.clearValidate()  <br>&#125;,  <br>handleSizeChange(pageSize) &#123;  <br>this.searchModel.pageSize = pageSize  <br>this.getRoles()  <br>&#125;,  <br>handleCurrentChange(pageNum) &#123;  <br>this.searchModel.pageNum = pageNum  <br>this.getRoles()  <br>&#125;,  <br>addRole() &#123;  <br>this.dialogTitle = &#x27;添加角色&#x27;  <br>this.dialogFormVisible = true  <br>this.message = &#x27;添加角色成功！&#x27;  <br>&#125;,  <br>deleteRole(index, rows) &#123;  <br>// console.log(rows[index])  <br>this.$confirm(`此操作将永久删除角色&lt;strong style=&quot;color: red&quot;&gt;$&#123;rows[index].roleName&#125;&lt;/strong&gt;, 是否继续?`, &#x27;提示&#x27;, &#123;  <br>confirmButtonText: &#x27;确定&#x27;,  <br>cancelButtonText: &#x27;取消&#x27;,  <br>type: &#x27;warning&#x27;,  <br>center: true,  <br>dangerouslyUseHTMLString: true  <br>&#125;).then(() =&gt; &#123;  <br>roleApi.del(rows[index].roleId).then((res) =&gt; &#123;  <br>// console.log(res)  <br>rows.splice(index, 1)  <br>this.$message(&#123;  <br>type: &#x27;success&#x27;,  <br>message: res.message  <br>&#125;)  <br>&#125;)  <br>&#125;).catch(() =&gt; &#123;  <br>this.$message(&#123;  <br>type: &#x27;info&#x27;,  <br>message: &#x27;已取消删除&#x27;  <br>&#125;)  <br>&#125;)  <br>&#125;,  <br>editRole(row) &#123;  <br>roleApi.getById(row.roleId).then(res =&gt; &#123;  <br>this.roleForm = res.data.data  <br>// console.log(this.userForm)  <br>this.dialogTitle = &#x27;编辑角色&#x27;  <br>this.dialogFormVisible = true  <br>this.message = &#x27;更新角色成功！&#x27;  <br>&#125;).catch(error =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125;,  <br>notify(res, message = null) &#123;  <br>if (res.code === 20000) &#123;  <br>// 提交结果消息提示  <br>this.$notify(&#123;  <br>title: &#x27;成功&#x27;,  <br>message: message != null ? message : res.message,  <br>type: &#x27;success&#x27;  <br>&#125;)  <br>&#125; else &#123;  <br>this.$notify.error(&#123;  <br>title: &#x27;失败&#x27;,  <br>message: res.message  <br>&#125;)  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;  <br>&lt;/script&gt;  <br>  <br>&lt;style scoped&gt;&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p><font color="#ff0000">roleManage.js:</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span>  <br>  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <br>search (searchModel) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;  <br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/role/search&#x27;</span>,  <br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,  <br><span class="hljs-attr">params</span>: &#123;  <br><span class="hljs-attr">queryContent</span>: searchModel.<span class="hljs-property">queryContent</span>,  <br><span class="hljs-attr">pageSize</span>: searchModel.<span class="hljs-property">pageSize</span>,  <br><span class="hljs-attr">pageNum</span>: searchModel.<span class="hljs-property">pageNum</span>  <br>&#125;  <br>&#125;)  <br>&#125;,  <br>save (roleForm) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;  <br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/role/save&#x27;</span>,  <br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,  <br><span class="hljs-attr">data</span>: roleForm  <br>&#125;)  <br>&#125;,  <br>del (id) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;  <br><span class="hljs-attr">url</span>: <span class="hljs-string">`/role/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,  <br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;delete&#x27;</span>  <br>&#125;)  <br>&#125;,  <br>getById (id) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;  <br><span class="hljs-attr">url</span>: <span class="hljs-string">`/role/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,  <br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>  <br>&#125;)  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-后端"><a href="#3-后端" class="headerlink" title="3.后端"></a>3.后端</h2><p><font color="#f79646">RoleController:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.sys.controller;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.sys.entity.Role;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.service.IRoleService;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.utils.Result;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;  <br><span class="hljs-keyword">import</span> io.swagger.util.Json;  <br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * &lt;p&gt;  </span><br><span class="hljs-comment"> * 前端控制器  </span><br><span class="hljs-comment"> * &lt;/p&gt;  </span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> alleyf  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023-08-06  </span><br><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@Slf4j</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/role&quot;)</span>  <br><span class="hljs-meta">@Api(tags = &#123;&quot;角色&quot;&#125;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleController</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    IRoleService roleService;  <br>  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照角色名查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;roleName&quot;)</span> String roleName)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.queryByName(roleName);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(roleName + <span class="hljs-string">&quot;角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照角色名路径查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPName/&#123;roleName&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByPName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;roleName&quot;)</span> String roleName)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.queryByName(roleName);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(roleName + <span class="hljs-string">&quot;角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照id路径查询角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.getById(id);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(<span class="hljs-string">&quot;id为:&quot;</span> + id + <span class="hljs-string">&quot;的角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照页码查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPage&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> Long pageNum,  </span><br><span class="hljs-params">                              <span class="hljs-meta">@RequestParam(&quot;pageSize&quot;)</span> Long pageSize)</span> &#123;  <br>        IPage&lt;Role&gt; roleIPage = roleService.queryByPage(pageNum, pageSize, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-keyword">return</span> roleIPage != <span class="hljs-literal">null</span> ? Result.ok().data(<span class="hljs-string">&quot;page&quot;</span>, roleIPage) : Result.error().message(<span class="hljs-string">&quot;平台没有角色&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;添加或更新角色&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">addRole</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Role role)</span> &#123;  <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">saveStatus</span> <span class="hljs-operator">=</span> roleService.saveOrUpdate(role);  <br>        <span class="hljs-keyword">return</span> saveStatus ? Result.ok().message(<span class="hljs-string">&quot;添加或更新角色成功&quot;</span>) : Result.error().message(<span class="hljs-string">&quot;添加或更新角色失败&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;删除角色&quot;)</span>  <br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delRole</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;  <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">saveStatus</span> <span class="hljs-operator">=</span> roleService.removeById(id);  <br>        <span class="hljs-keyword">return</span> saveStatus ? Result.ok().message(<span class="hljs-string">&quot;删除角色成功&quot;</span>) : Result.error().message(<span class="hljs-string">&quot;删除角色失败&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;搜索角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;queryContent&quot;, required = false)</span> String queryContent,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pageSize&quot;, defaultValue = &quot;10&quot;)</span> Long pageSize,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pageNum&quot;, defaultValue = &quot;1&quot;)</span> Long pageNum)</span> &#123;  <br>        IPage&lt;Role&gt; roles = roleService.search(queryContent, pageSize, pageNum);  <br>        <span class="hljs-keyword">if</span> (roles != <span class="hljs-literal">null</span>) &#123;  <br>            log.debug(<span class="hljs-string">&quot;roles: &quot;</span> + roles);  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, roles);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(<span class="hljs-string">&quot;平台没有该角色&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="角色权限设置"><a href="#角色权限设置" class="headerlink" title="角色权限设置"></a>角色权限设置</h2><h3 id="1-效果预览"><a href="#1-效果预览" class="headerlink" title="1.效果预览"></a>1.效果预览</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031214347.png" alt="image.png"></p><h3 id="2-前端-1"><a href="#2-前端-1" class="headerlink" title="2.前端"></a>2.前端</h3><p><font color="#f79646">role.vue:</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;  <br>&lt;div&gt;  <br>&lt;!-- 添加角色--&gt;  <br>&lt;el-dialog  <br>:title=&quot;dialogTitle&quot;  <br>:visible.sync=&quot;dialogFormVisible&quot;  <br>center  <br>width=&quot;32%&quot;  <br>@close=&quot;clearForm&quot;  <br>&gt;  <br>&lt;el-form  <br>ref=&quot;roleForm&quot;  <br>:model=&quot;roleForm&quot;  <br>:rules=&quot;rules&quot;  <br>show-message  <br>status-icon  <br>&gt;  <br>&lt;el-form-item label=&quot;角色名&quot; label-width=&quot;80px&quot; prop=&quot;roleName&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;roleForm.roleName&quot;  <br>clearable  <br>prefix-icon=&quot;el-icon-user&quot;  <br>/&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;el-form-item label=&quot;角色描述&quot; label-width=&quot;80px&quot; prop=&quot;roleDesc&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;roleForm.roleDesc&quot;  <br>clearable  <br>prefix-icon=&quot;el-icon-key&quot;  <br>/&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;el-form-item label=&quot;权限设置&quot; label-width=&quot;80px&quot; prop=&quot;menuIdList&quot;&gt;  <br>&lt;el-tree  <br>ref=&quot;menuRef&quot;  <br>:data=&quot;menuList&quot;  <br>:props=&quot;menuProps&quot;  <br>default-expand-all  <br>node-key=&quot;menuId&quot;  <br>show-checkbox  <br>&gt;  <br>&lt;/el-tree&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;/el-form&gt;  <br>&lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;  <br>&lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;  <br>&lt;el-button type=&quot;primary&quot; @click=&quot;saveRole(&#x27;roleForm&#x27;)&quot;&gt;确 定  <br>&lt;/el-button&gt;  <br>&lt;/div&gt;  <br>&lt;/el-dialog&gt;  <br>&lt;!-- 角色检索--&gt;  <br>&lt;el-card id=&quot;search&quot; shadow=&quot;hover&quot;&gt;  <br>&lt;el-row :gutter=&quot;5&quot;&gt;  <br>&lt;el-col :span=&quot;18&quot;&gt;  <br>&lt;div class=&quot;grid-content bg-purple&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;searchModel.queryContent&quot;  <br>clearable  <br>placeholder=&quot;请输入用户名&quot;  <br>suffix-icon=&quot;el-icon-user&quot;  <br>&gt;  <br>&lt;el-button  <br>slot=&quot;append&quot;  <br>icon=&quot;el-icon-search&quot;  <br>type=&quot;success&quot;  <br>@click=&quot;getRoles&quot;  <br>/&gt;  <br>&lt;/el-input&gt;  <br>&lt;/div&gt;  <br>&lt;/el-col&gt;  <br>&lt;el-col :span=&quot;6&quot; align=&quot;right&quot;&gt;  <br>&lt;div class=&quot;grid-content bg-purple&quot;&gt;  <br>&lt;el-button  <br>icon=&quot;el-icon-plus&quot;  <br>size=&quot;medium&quot;  <br>type=&quot;success&quot;  <br>@click=&quot;addRole&quot;  <br>/&gt;  <br>&lt;/div&gt;  <br>&lt;/el-col&gt;  <br>&lt;/el-row&gt;  <br>&lt;/el-card&gt;  <br>&lt;!-- 用户信息--&gt;  <br>&lt;el-card shadow=&quot;hover&quot;&gt;  <br>&lt;el-table  <br>v-loading=&quot;loading&quot;  <br>:cell-style=&quot;&#123; &#x27;text-align&#x27;: &#x27;center&#x27; &#125;&quot;  <br>:data=&quot;tableData&quot;  <br>:default-sort=&quot;&#123; prop: &#x27;id&#x27;, order: &#x27;ascending&#x27; &#125;&quot;  <br>:header-cell-style=&quot;&#123; &#x27;text-align&#x27;: &#x27;center&#x27; &#125;&quot;  <br>border  <br>max-height=&quot;520&quot;  <br>style=&quot;width: 100%&quot;  <br>&gt;  <br>&lt;el-table-column label=&quot;#&quot; type=&quot;index&quot; width=&quot;80&quot;&gt;  <br>&lt;template slot-scope=&quot;scope&quot;&gt;  <br>&lt;!-- (pageNum-1)*pageSize+index+1--&gt;  <br>&#123;&#123;  <br>(searchModel.pageNum - 1) * searchModel.pageSize + scope.$index + 1  <br>&#125;&#125;  <br>&lt;/template&gt;  <br>&lt;/el-table-column&gt;  <br>&lt;el-table-column label=&quot;角色id&quot; prop=&quot;roleId&quot; sortable width=&quot;200&quot;/&gt;  <br>&lt;el-table-column  <br>class=&quot;name-wrapper&quot;  <br>label=&quot;角色名称&quot;  <br>prop=&quot;roleName&quot;  <br>width=&quot;260&quot;  <br>/&gt;  <br>&lt;el-table-column label=&quot;角色描述&quot; prop=&quot;roleDesc&quot; resizable width=&quot;280&quot;/&gt;  <br>&lt;el-table-column fixed=&quot;right&quot; label=&quot;操作&quot; width=&quot;160&quot;&gt;  <br>&lt;template slot-scope=&quot;scope&quot;&gt;  <br>&lt;el-button  <br>circle  <br>icon=&quot;el-icon-delete&quot;  <br>size=&quot;small&quot;  <br>type=&quot;danger&quot;  <br>@click.native.prevent=&quot;deleteRole(scope.$index, tableData)&quot;  <br>&gt;  <br>&lt;/el-button&gt;  <br>&lt;el-button  <br>circle  <br>icon=&quot;el-icon-edit&quot;  <br>size=&quot;small&quot;  <br>type=&quot;primary&quot;  <br>@click=&quot;editRole(scope.row)&quot;  <br>&gt;  <br>&lt;/el-button&gt;  <br>&lt;/template&gt;  <br>&lt;/el-table-column&gt;  <br>&lt;/el-table&gt;  <br>&lt;/el-card&gt;  <br>&lt;!-- 分页组件--&gt;  <br>&lt;el-footer align=&quot;center&quot;&gt;  <br>&lt;div class=&quot;block&quot;&gt;  <br>&lt;el-pagination  <br>:current-page=&quot;searchModel.currentPage&quot;  <br>:page-size=&quot;searchModel.pageNum&quot;  <br>:page-sizes=&quot;pageSizes&quot;  <br>:total=&quot;total&quot;  <br>layout=&quot;total, sizes, prev, pager, next, jumper&quot;  <br>@size-change=&quot;handleSizeChange&quot;  <br>@current-change=&quot;handleCurrentChange&quot;  <br>/&gt;  <br>&lt;/div&gt;  <br>&lt;/el-footer&gt;  <br>&lt;el-backtop target=&quot;.page-component__scroll .el-scrollbar__wrap&quot;&gt;&lt;/el-backtop&gt;  <br>&lt;/div&gt;  <br>&lt;/template&gt;  <br>  <br>&lt;script&gt;  <br>import roleApi from &#x27;@/api/roleManage&#x27;  <br>import menuApi from &#x27;@/api/menuManage&#x27;  <br>import current from &#x27;element-ui/packages/table/src/store/current&#x27;  <br>// import &#x27;@/styles/roleManage.css&#x27;  <br>  <br>export default &#123;  <br>name: &#x27;Role&#x27;,  <br>data() &#123;  <br>return &#123;  <br>searchModel: &#123;  <br>queryContent: &#x27;&#x27;,  <br>pageNum: 1,  <br>pageSize: 10  <br>&#125;,  <br>pageSizes: [10, 20, 50, 100],  <br>total: 0,  <br>tableData: [],  <br>loading: true,  <br>dialogFormVisible: false,  <br>dialogTitle: &#x27;添加角色&#x27;,  <br>roleForm: &#123;  <br>roleName: &#x27;&#x27;,  <br>roleDesc: &#x27;&#x27;  <br>&#125;,  <br>rules: &#123;  <br>roleName: [  <br>&#123; required: true, message: &#x27;请输入角色名&#x27;, trigger: &#x27;blur&#x27; &#125;,  <br>&#123;  <br>min: 1,  <br>max: 20,  <br>message: &#x27;长度在 1 到 20 个字符&#x27;,  <br>trigger: &#x27;blur&#x27;  <br>&#125;  <br>],  <br>roleDesc: [  <br>&#123; required: true, message: &#x27;请输入角色描述&#x27;, trigger: &#x27;blur&#x27; &#125;,  <br>&#123;  <br>min: 1,  <br>max: 30,  <br>message: &#x27;长度在 3 到 30 个字符&#x27;,  <br>trigger: &#x27;blur&#x27;  <br>&#125;  <br>]  <br>&#125;,  <br>menuProps: &#123;  <br>label: &#x27;title&#x27;,  <br>children: &#x27;children&#x27;  <br>&#125;,  <br>menuList: []  <br>&#125;  <br>&#125;,  <br>computed: &#123;  <br>current() &#123;  <br>return current  <br>&#125;  <br>&#125;,  <br>created() &#123;  <br>this.getRoles()  <br>this.getAllMenu()  <br>&#125;,  <br>methods: &#123;  <br>getAllMenu() &#123;  <br>menuApi.getAllMenu().then(res =&gt; &#123;  <br>this.menuList = res.data.data  <br>&#125;)  <br>&#125;,  <br>getRoles() &#123;  <br>roleApi  <br>.search(this.searchModel)  <br>.then((res) =&gt; &#123;  <br>// console.log(res)  <br>this.tableData = res.data.data.records  <br>this.total = res.data.data.total  <br>this.searchModel.pageNum = res.data.data.current  <br>this.loading = false  <br>// console.log(this.searchModel.queryContent, this.searchModel.queryItem, this.searchModel.pageSize, this.searchModel.pageNum)  <br>&#125;)  <br>.catch((error) =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125;,  <br>saveRole(formName) &#123;  <br>// alert(this.roleForm)  <br>// 提交则触发表单验证  <br>this.$refs[formName].validate((valid) =&gt; &#123;  <br>if (valid) &#123;  <br>const checkedKeys = this.$refs.menuRef.getCheckedKeys()  <br>const halfcheckedKeys = this.$refs.menuRef.getHalfCheckedKeys()  <br>this.roleForm.menuIdList = checkedKeys.concat(halfcheckedKeys)  <br>// console.log(this.roleForm.menuIdList)  <br>// console.log(this.roleForm)  <br>// 提交请求到后台  <br>roleApi  <br>.save(this.roleForm)  <br>.then((res) =&gt; &#123;  <br>// console.log(res)  <br>this.dialogFormVisible = false  <br>// 提交结果消息提示  <br>this.notify(res, this.message)  <br>// 刷新表格  <br>this.getRoles()  <br>&#125;)  <br>.catch((error) =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125; else &#123;  <br>console.log(&#x27;error submit!!&#x27;)  <br>return false  <br>&#125;  <br>&#125;)  <br>&#125;,  <br>clearForm() &#123;  <br>this.roleForm = &#123;&#125;  <br>this.$refs.roleForm.clearValidate()  <br>this.$refs.menuRef.setCheckedKeys([])  <br>&#125;,  <br>handleSizeChange(pageSize) &#123;  <br>this.searchModel.pageSize = pageSize  <br>this.getRoles()  <br>&#125;,  <br>handleCurrentChange(pageNum) &#123;  <br>this.searchModel.pageNum = pageNum  <br>this.getRoles()  <br>&#125;,  <br>addRole() &#123;  <br>this.dialogTitle = &#x27;添加角色&#x27;  <br>this.dialogFormVisible = true  <br>this.message = &#x27;添加角色成功！&#x27;  <br>this.getAllMenu()  <br>&#125;,  <br>deleteRole(index, rows) &#123;  <br>// console.log(rows[index])  <br>this.$confirm(`此操作将永久删除角色&lt;strong style=&quot;color: red&quot;&gt;$&#123;rows[index].roleName&#125;&lt;/strong&gt;, 是否继续?`, &#x27;提示&#x27;, &#123;  <br>confirmButtonText: &#x27;确定&#x27;,  <br>cancelButtonText: &#x27;取消&#x27;,  <br>type: &#x27;warning&#x27;,  <br>center: true,  <br>dangerouslyUseHTMLString: true  <br>&#125;).then(() =&gt; &#123;  <br>roleApi.del(rows[index].roleId).then((res) =&gt; &#123;  <br>// console.log(res)  <br>rows.splice(index, 1)  <br>this.$message(&#123;  <br>type: &#x27;success&#x27;,  <br>message: res.message  <br>&#125;)  <br>&#125;)  <br>&#125;).catch(() =&gt; &#123;  <br>this.$message(&#123;  <br>type: &#x27;info&#x27;,  <br>message: &#x27;已取消删除&#x27;  <br>&#125;)  <br>&#125;)  <br>&#125;,  <br>editRole(row) &#123;  <br>roleApi.getById(row.roleId).then(res =&gt; &#123;  <br>this.roleForm = res.data.data  <br>console.log(res.data.data.menuIdList)  <br>this.dialogTitle = &#x27;编辑角色&#x27;  <br>this.dialogFormVisible = true  <br>this.$refs.menuRef.setCheckedKeys(res.data.data.menuIdList)  <br>this.message = &#x27;更新角色成功！&#x27;  <br>&#125;).catch(error =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125;,  <br>notify(res, message = null) &#123;  <br>if (res.code === 20000) &#123;  <br>// 提交结果消息提示  <br>this.$notify(&#123;  <br>title: &#x27;成功&#x27;,  <br>message: message != null ? message : res.message,  <br>type: &#x27;success&#x27;  <br>&#125;)  <br>&#125; else &#123;  <br>this.$notify.error(&#123;  <br>title: &#x27;失败&#x27;,  <br>message: res.message  <br>&#125;)  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;  <br>&lt;/script&gt;  <br>  <br>&lt;style scoped&gt;&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h3 id="3-后端-1"><a href="#3-后端-1" class="headerlink" title="3.后端"></a>3.后端</h3><p><font color="#ff0000">RoleController.java:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.sys.controller;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.sys.entity.Role;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.service.IRoleService;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.utils.Result;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;  <br><span class="hljs-keyword">import</span> io.swagger.util.Json;  <br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * &lt;p&gt;  </span><br><span class="hljs-comment"> * 前端控制器  </span><br><span class="hljs-comment"> * &lt;/p&gt;  </span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> alleyf  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023-08-06  </span><br><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@Slf4j</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/role&quot;)</span>  <br><span class="hljs-meta">@Api(tags = &#123;&quot;角色&quot;&#125;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleController</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    IRoleService roleService;  <br>  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照角色名查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;roleName&quot;)</span> String roleName)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.queryByName(roleName);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(roleName + <span class="hljs-string">&quot;角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照角色名路径查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPName/&#123;roleName&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByPName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;roleName&quot;)</span> String roleName)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.queryByName(roleName);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(roleName + <span class="hljs-string">&quot;角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照id路径查询角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.getRoleById(id);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(<span class="hljs-string">&quot;id为:&quot;</span> + id + <span class="hljs-string">&quot;的角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照页码查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPage&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> Long pageNum,  </span><br><span class="hljs-params">                              <span class="hljs-meta">@RequestParam(&quot;pageSize&quot;)</span> Long pageSize)</span> &#123;  <br>        IPage&lt;Role&gt; roleIPage = roleService.queryByPage(pageNum, pageSize, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-keyword">return</span> roleIPage != <span class="hljs-literal">null</span> ? Result.ok().data(<span class="hljs-string">&quot;page&quot;</span>, roleIPage) : Result.error().message(<span class="hljs-string">&quot;平台没有角色&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;添加或更新角色&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">addRole</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Role role)</span> &#123;  <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">saveStatus</span> <span class="hljs-operator">=</span> roleService.addOrUpdate(role);  <br><span class="hljs-comment">//        boolean saveStatus = roleService.saveOrUpdate(role);  </span><br>        <span class="hljs-keyword">return</span> saveStatus ? Result.ok().message(<span class="hljs-string">&quot;添加或更新角色成功&quot;</span>) : Result.error().message(<span class="hljs-string">&quot;添加或更新角色失败&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;删除角色&quot;)</span>  <br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delRole</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;  <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">saveStatus</span> <span class="hljs-operator">=</span> roleService.delete(id);  <br>        <span class="hljs-keyword">return</span> saveStatus ? Result.ok().message(<span class="hljs-string">&quot;删除角色成功&quot;</span>) : Result.error().message(<span class="hljs-string">&quot;删除角色失败&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;搜索角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;queryContent&quot;, required = false)</span> String queryContent,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pageSize&quot;, defaultValue = &quot;10&quot;)</span> Long pageSize,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pageNum&quot;, defaultValue = &quot;1&quot;)</span> Long pageNum)</span> &#123;  <br>        IPage&lt;Role&gt; roles = roleService.search(queryContent, pageSize, pageNum);  <br>        <span class="hljs-keyword">if</span> (roles != <span class="hljs-literal">null</span>) &#123;  <br>            log.debug(<span class="hljs-string">&quot;roles: &quot;</span> + roles);  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, roles);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(<span class="hljs-string">&quot;平台没有该角色&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;获取所有角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/all&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;  <br>        List&lt;Role&gt; roles = roleService.list();  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, roles);  <br>    &#125;  <br>  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4.数据库"></a>4.数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> x_menu;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span>‘x_menu’（<span class="hljs-string">&#x27;menu_id&#x27;</span>，‘component<span class="hljs-string">&#x27;，‘path&#x27;</span>，‘redirect<span class="hljs-string">&#x27;，‘name&#x27;</span>，‘title<span class="hljs-string">&#x27;，‘icon&#x27;</span>，‘parent_id<span class="hljs-string">&#x27;，‘is_leaf&#x27;</span>,<br>&quot;hidden&quot;）<span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1&quot;,&#x27;</span>Layout<span class="hljs-string">&#x27;,&quot;/sys&#x27;</span>,<span class="hljs-string">&#x27;/sys/user&#x27;</span>,<span class="hljs-string">&#x27;sysManage&#x27;</span>,系统管理<span class="hljs-string">&#x27;,&#x27;</span>userManage<span class="hljs-string">&#x27;,&#x27;</span>o<span class="hljs-string">&#x27;,&#x27;</span>N<span class="hljs-string">&#x27;,&#x27;</span>o<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">insert into‘x_menu&#x27;</span>（menu_id<span class="hljs-string">&#x27;，‘component&#x27;</span>，‘path<span class="hljs-string">&#x27;，‘redirect&#x27;</span>，‘name<span class="hljs-string">&#x27;，‘title&#x27;</span>，‘icon<span class="hljs-string">&#x27;，‘parent_id&#x27;</span>，‘is_leaf<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">&quot;hidden&quot;）values(&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;,&#x27;</span>sys<span class="hljs-operator">/</span><span class="hljs-keyword">user</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-keyword">user</span><span class="hljs-string">&#x27;,NULL,&#x27;</span>userList<span class="hljs-string">&#x27;,用户列表&#x27;</span>,<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;Y&quot;,&#x27;</span>o<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">insert into‘x_menu（&#x27;</span>menu_id<span class="hljs-string">&#x27;，‘component&#x27;</span>，‘path<span class="hljs-string">&#x27;，‘redirect&#x27;</span>，‘name<span class="hljs-string">&#x27;，‘title&#x27;</span>，‘icon<span class="hljs-string">&#x27;，‘parent_id&#x27;</span>，‘is_leaf<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">‘hidden&#x27;</span>）<span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;sys/role&#x27;</span>,<span class="hljs-string">&#x27;role&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;roleList&#x27;</span>，<span class="hljs-string">&#x27;角色列表&#x27;</span>,<span class="hljs-string">&#x27;roleManage&#x27;</span>, ,<span class="hljs-string">&#x27;Y&#x27;&#x27;o&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span>‘x_menu’（menu_id<span class="hljs-string">&#x27;，‘component&#x27;</span>，‘path<span class="hljs-string">&#x27;，‘redirect&#x27;</span>，‘name<span class="hljs-string">&#x27;，‘title&#x27;</span>, ，icon<span class="hljs-string">&#x27;，‘parent_id&#x27;</span>，‘is_leaf<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">&quot;hidden&#x27;</span>）<span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;Layout&#x27;</span>，<span class="hljs-string">&#x27;/test&#x27;</span>,<span class="hljs-string">&#x27;/test/test1&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;功能测试&#x27;</span>,<span class="hljs-string">&#x27;form&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>  <span class="hljs-number">0</span><span class="hljs-string">&#x27;）;</span><br><span class="hljs-string">insert into‘x_menu’（menu_id&#x27;</span>，‘component<span class="hljs-string">&#x27;，‘path&#x27;</span>，‘redirect<span class="hljs-string">&#x27;，‘name&#x27;</span> <span class="hljs-string">&#x27;title&#x27;</span> &quot;icon&#x27;，‘parent_id&#x27;，‘is_leaf&#x27;,<br>&quot;hidden&quot;）values(&quot;<span class="hljs-number">5</span><span class="hljs-string">&#x27;,&#x27;</span>test<span class="hljs-operator">/</span>test1<span class="hljs-string">&#x27;,&#x27;</span>test1<span class="hljs-string">&#x27;,&quot;&quot;,&#x27;</span>test1<span class="hljs-string">&#x27;,&#x27;</span>测试点<span class="hljs-operator">-</span><span class="hljs-string">&#x27;,&#x27;</span>form<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">insert into‘x_menu’（&#x27;</span>menu_id<span class="hljs-string">&#x27;，‘component&#x27;</span>，‘path<span class="hljs-string">&#x27;，‘redirect&#x27;</span>，‘name&quot;, &#x27;title&#x27; &#x27;icon&#x27;，‘parent_id&#x27;，is_leaf&#x27;,<br>‘hidden&#x27;)values(&#x27;6&#x27;,&#x27;test/test2&#x27;,&#x27;test2&#x27;, ，test2&#x27;，测试点二&quot;，<span class="hljs-string">&#x27;form&#x27;</span>   <span class="hljs-number">0</span><span class="hljs-string">&#x27;）;</span><br><span class="hljs-string">insert into‘x_menu（menu_id&#x27;</span>，‘component<span class="hljs-string">&#x27;，path&#x27;</span>，‘redirect<span class="hljs-string">&#x27;，‘name&#x27;</span>, ，‘title<span class="hljs-string">&#x27;，icon&#x27;</span>，parent_id，‘is_leaf,<br>hidden<span class="hljs-string">&#x27;)values(&#x27;</span><span class="hljs-number">7</span><span class="hljs-string">&#x27;,&#x27;</span>test<span class="hljs-operator">/</span>test3<span class="hljs-string">&#x27;,&#x27;</span>test3<span class="hljs-string">&#x27;, ,&#x27;</span>test3&quot;,&quot;测试点三<span class="hljs-string">&#x27;,&#x27;</span>form<span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27;&quot;,&#x27;</span>Y&quot;,o&#x27;);<br><br></code></pre></td></tr></table></figure><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><h2 id="1-前端"><a href="#1-前端" class="headerlink" title="1.前端"></a>1.前端</h2><h3 id="1-修改原路由配置"><a href="#1-修改原路由配置" class="headerlink" title="1.修改原路由配置"></a>1.修改原路由配置</h3><p>src/router/index.js，保留基础路由，其它的删掉或注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>  <br>  <br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)  <br>  <br><span class="hljs-comment">/* Layout */</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/layout&#x27;</span>  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment">* Note: sub-menu only appear when route children.length &gt;= 1  </span><br><span class="hljs-comment">* Detail see: https://panjiachen.github.io/vue-element-admin-site/guide/essentials/router-and-nav.html  </span><br><span class="hljs-comment">*  </span><br><span class="hljs-comment">* hidden: true if set true, item will not show in the sidebar(default is false)  </span><br><span class="hljs-comment">* alwaysShow: true if set true, will always show the root menu  </span><br><span class="hljs-comment">* if not set alwaysShow, when item has more than one children route,  </span><br><span class="hljs-comment">* it will becomes nested mode, otherwise not show the root menu  </span><br><span class="hljs-comment">* redirect: noRedirect if set noRedirect will no redirect in the breadcrumb  </span><br><span class="hljs-comment">* name:&#x27;router-name&#x27; the name is used by &lt;keep-alive&gt; (must set!!!)  </span><br><span class="hljs-comment">* meta : &#123;  </span><br><span class="hljs-comment">roles: [&#x27;admin&#x27;,&#x27;editor&#x27;] control the page roles (you can set multiple roles)  </span><br><span class="hljs-comment">title: &#x27;title&#x27; the name show in sidebar and breadcrumb (recommend set)  </span><br><span class="hljs-comment">icon: &#x27;svg-name&#x27;/&#x27;el-icon-x&#x27; the icon show in the sidebar  </span><br><span class="hljs-comment">breadcrumb: false if set false, the item will hidden in breadcrumb(default is true)  </span><br><span class="hljs-comment">activeMenu: &#x27;/example/list&#x27; if set path, the sidebar will highlight the path you set  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">*/</span>  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment">* constantRoutes  </span><br><span class="hljs-comment">* a base page that does not have permission requirements  </span><br><span class="hljs-comment">* all roles can be accessed  </span><br><span class="hljs-comment">*/</span>  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> constantRoutes = [  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/redirect&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>,  <br><span class="hljs-attr">children</span>: [  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/redirect/:path(.*)&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/redirect/index&#x27;</span>)  <br>&#125;  <br>]  <br>&#125;,  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/login/index&#x27;</span>),  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>  <br>&#125;,  <br>  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/404&#x27;</span>),  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>  <br>&#125;,  <br>  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,  <br><span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,  <br><span class="hljs-attr">children</span>: [&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;dashboard&#x27;</span>,  <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Dashboard&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/dashboard/index&#x27;</span>),  <br><span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;首 页&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;dashboard&#x27;</span>, <span class="hljs-attr">affix</span>: <span class="hljs-literal">true</span> &#125;  <br>&#125;]  <br>&#125;,  <br>  <br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;/sys&#x27;,  </span><br><span class="hljs-comment">// component: Layout,  </span><br><span class="hljs-comment">// redirect: &#x27;/sys/user&#x27;,  </span><br><span class="hljs-comment">// name: &#x27;Sys&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;系统管理&#x27;, icon: &#x27;el-icon-s-help&#x27; &#125;,  </span><br><span class="hljs-comment">// children: [  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;user&#x27;,  </span><br><span class="hljs-comment">// name: &#x27;User&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/sys/user&#x27;),  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;系统用户&#x27;, icon: &#x27;user&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;role&#x27;,  </span><br><span class="hljs-comment">// name: &#x27;Role&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/sys/role&#x27;),  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;系统身份&#x27;, icon: &#x27;tree&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// ]  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;/test&#x27;,  </span><br><span class="hljs-comment">// component: Layout,  </span><br><span class="hljs-comment">// redirect: &#x27;/test/test1&#x27;,  </span><br><span class="hljs-comment">// name: &#x27;Test&#x27;,  </span><br><span class="hljs-comment">// meta: &#123;  </span><br><span class="hljs-comment">// title: &#x27;新品尝鲜&#x27;,  </span><br><span class="hljs-comment">// icon: &#x27;nested&#x27;  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// children: [  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;test1&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/test/test1&#x27;),  </span><br><span class="hljs-comment">// name: &#x27;Test1&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;功能1&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;test2&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/test/test2&#x27;),  </span><br><span class="hljs-comment">// name: &#x27;Test2&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;功能2&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;test3&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/test/test3&#x27;),  </span><br><span class="hljs-comment">// name: &#x27;Test3&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;功能3&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// ]  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;external-link&#x27;,  </span><br><span class="hljs-comment">// component: Layout,  </span><br><span class="hljs-comment">// children: [  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;https://panjiachen.github.io/vue-element-admin-site/#/&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;External Link&#x27;, icon: &#x27;link&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// ]  </span><br><span class="hljs-comment">// &#125;,  </span><br>  <br><span class="hljs-comment">// 404 page must be placed at the end !!!  </span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>, <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span> &#125;  <br>]  <br>  <br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createRouter</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;  <br><span class="hljs-comment">// mode: &#x27;history&#x27;, // require service support  </span><br><span class="hljs-attr">scrollBehavior</span>: <span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;),  <br><span class="hljs-attr">routes</span>: constantRoutes  <br>&#125;)  <br>  <br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>()  <br>  <br><span class="hljs-comment">// Detail see: https://github.com/vuejs/vue-router/issues/1234#issuecomment-357941465  </span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">resetRouter</span>(<span class="hljs-params"></span>) &#123;  <br><span class="hljs-keyword">const</span> newRouter = <span class="hljs-title function_">createRouter</span>()  <br>router.<span class="hljs-property">matcher</span> = newRouter.<span class="hljs-property">matcher</span> <span class="hljs-comment">// reset router  </span><br>&#125;  <br>  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><h3 id="2-获取菜单数据并保存到Vuex"><a href="#2-获取菜单数据并保存到Vuex" class="headerlink" title="2.获取菜单数据并保存到Vuex"></a>2.获取菜单数据并保存到Vuex</h3><p>src/store/modules/user.js<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031453650.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031453642.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031453615.png" alt="image.png"><br>src/store/getters.js<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031454406.png" alt="image.png"></p><h3 id="3-路由转换"><a href="#3-路由转换" class="headerlink" title="3.路由转换"></a>3.路由转换</h3><p>修改src目录下的permiss.js<br>（1）导入Layout</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> layout <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/layout&#x27;</span><br></code></pre></td></tr></table></figure><p>（2）添加动态路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//路由转换  </span><br><span class="hljs-keyword">let</span> myRoutes = <span class="hljs-title function_">myFilterAsyncRoutes</span>(store.<span class="hljs-property">getters</span>.<span class="hljs-property">menuList</span>)  <br><span class="hljs-comment">// 404  </span><br>myRoutes.<span class="hljs-title function_">push</span>(&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>,  <br><span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>  <br>&#125;)  <br><span class="hljs-comment">//动态添加路由  </span><br>router.<span class="hljs-title function_">addRoutes</span>(myRoutes)  <br><span class="hljs-comment">//存至全局变量  </span><br><span class="hljs-variable language_">global</span>.<span class="hljs-property">myRoutes</span> = myRoutes  <br>  <br><span class="hljs-title function_">next</span>(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<span class="hljs-comment">// 防止刷新后页面空白</span><br></code></pre></td></tr></table></figure><p>完整部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>  <br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span>  <br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NProgress</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span> <span class="hljs-comment">// progress bar  </span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;nprogress/nprogress.css&#x27;</span> <span class="hljs-comment">// progress bar style  </span><br><span class="hljs-keyword">import</span> &#123; getToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span> <span class="hljs-comment">// get token from cookie  </span><br><span class="hljs-keyword">import</span> getPageTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/get-page-title&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/layout&#x27;</span>  <br>  <br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">configure</span>(&#123; <span class="hljs-attr">showSpinner</span>: <span class="hljs-literal">false</span> &#125;) <span class="hljs-comment">// NProgress Configuration  </span><br>  <br><span class="hljs-keyword">const</span> whiteList = [<span class="hljs-string">&#x27;/login&#x27;</span>] <span class="hljs-comment">// no redirect whitelist  </span><br>  <br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-title function_">async</span>(to, <span class="hljs-keyword">from</span>, next) =&gt; &#123;  <br><span class="hljs-comment">// start progress bar  </span><br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">start</span>()  <br>  <br><span class="hljs-comment">// set page title  </span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title function_">getPageTitle</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>)  <br>  <br><span class="hljs-comment">// determine whether the user has logged in  </span><br><span class="hljs-keyword">const</span> hasToken = <span class="hljs-title function_">getToken</span>()  <br>  <br><span class="hljs-keyword">if</span> (hasToken) &#123;  <br><span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;  <br><span class="hljs-comment">// if is logged in, redirect to the home page  </span><br><span class="hljs-title function_">next</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span> &#125;)  <br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-keyword">const</span> hasGetUserInfo = store.<span class="hljs-property">getters</span>.<span class="hljs-property">name</span>  <br><span class="hljs-keyword">if</span> (hasGetUserInfo) &#123;  <br><span class="hljs-title function_">next</span>()  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-keyword">try</span> &#123;  <br><span class="hljs-comment">// get user info  </span><br><span class="hljs-keyword">await</span> store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/getInfo&#x27;</span>)  <br><span class="hljs-comment">// console.log(store.getters.menuList)  </span><br><span class="hljs-comment">// 路由转换  </span><br><span class="hljs-keyword">const</span> myRoutes = <span class="hljs-title function_">myFilterAsyncRoutes</span>(store.<span class="hljs-property">getters</span>.<span class="hljs-property">menuList</span>)  <br><span class="hljs-comment">// 404  </span><br>myRoutes.<span class="hljs-title function_">push</span>(&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>,  <br><span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>  <br>&#125;)  <br><span class="hljs-comment">// 动态添加路由  </span><br>router.<span class="hljs-title function_">addRoutes</span>(myRoutes)  <br><span class="hljs-comment">// 存至全局变量  </span><br><span class="hljs-variable language_">global</span>.<span class="hljs-property">myRoutes</span> = myRoutes  <br>  <br><span class="hljs-title function_">next</span>(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<span class="hljs-comment">// 防止刷新后页面空白  </span><br>  <br><span class="hljs-comment">// next()  </span><br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;  <br><span class="hljs-comment">// remove token and go to login page to re-login  </span><br><span class="hljs-keyword">await</span> store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/resetToken&#x27;</span>)  <br><span class="hljs-comment">// Message.error(error || &#x27;Has Error&#x27;)  </span><br><span class="hljs-title class_">Message</span>.<span class="hljs-title function_">error</span>(&#123; <span class="hljs-attr">message</span>: error || <span class="hljs-string">&#x27;Has Error&#x27;</span> &#125;)  <br><span class="hljs-title function_">next</span>(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)  <br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-comment">/* has no token*/</span>  <br>  <br><span class="hljs-keyword">if</span> (whiteList.<span class="hljs-title function_">indexOf</span>(to.<span class="hljs-property">path</span>) !== -<span class="hljs-number">1</span>) &#123;  <br><span class="hljs-comment">// in the free login whitelist, go directly  </span><br><span class="hljs-title function_">next</span>()  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-comment">// other pages that do not have permission to access are redirected to the login page.  </span><br><span class="hljs-title function_">next</span>(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)  <br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()  <br>&#125;  <br>&#125;  <br>&#125;)  <br>  <br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">() =&gt;</span> &#123;  <br><span class="hljs-comment">// finish progress bar  </span><br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()  <br>&#125;)  <br>  <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFilterAsyncRoutes</span>(<span class="hljs-params">menuList</span>) &#123;  <br>menuList.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">menu</span> =&gt;</span> &#123;  <br><span class="hljs-comment">// console.log(menu)  </span><br><span class="hljs-keyword">if</span> (menu.<span class="hljs-property">component</span> === <span class="hljs-string">&#x27;Layout&#x27;</span>) &#123;  <br><span class="hljs-comment">// console.log(menu.component)  </span><br>menu.<span class="hljs-property">component</span> = <span class="hljs-title class_">Layout</span>  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>menu.<span class="hljs-property">component</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">`@/views/<span class="hljs-subst">$&#123;menu.component&#125;</span>.vue`</span>).<span class="hljs-property">default</span>  <br>&#125;  <br><span class="hljs-comment">// 递归处理子菜单  </span><br><span class="hljs-keyword">if</span> (menu.<span class="hljs-property">children</span> &amp;&amp; menu.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>) &#123;  <br>menu.<span class="hljs-property">children</span> = <span class="hljs-title function_">myFilterAsyncRoutes</span>(menu.<span class="hljs-property">children</span>)  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>  <br>&#125;)  <br><span class="hljs-keyword">return</span> menuList  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-路由合并"><a href="#4-路由合并" class="headerlink" title="4.路由合并"></a>4.路由合并</h3><p>src/layout/components/Sidebar/index.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">routes</span>(<span class="hljs-params"></span>) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-property">options</span>.<span class="hljs-property">routes</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-variable language_">global</span>.<span class="hljs-property">myRoutes</span>)  <br>&#125;,<br><br></code></pre></td></tr></table></figure><h1 id="Vue-框架快速上手"><a href="#Vue-框架快速上手" class="headerlink" title="Vue 框架快速上手"></a>Vue 框架快速上手</h1><blockquote><p><strong>[[Vue]]</strong></p></blockquote><h2 id="1-前端环境准备"><a href="#1-前端环境准备" class="headerlink" title="1. 前端环境准备"></a>1. 前端环境准备</h2><p>Vscode 或者WebStorm</p><h2 id="2-Vue-框架介绍"><a href="#2-Vue-框架介绍" class="headerlink" title="2.Vue 框架介绍"></a>2.Vue 框架介绍</h2><p>尤雨溪制作的渐进式 js 框架</p><h2 id="3-Vue-快速入门"><a href="#3-Vue-快速入门" class="headerlink" title="3.Vue 快速入门"></a>3.Vue 快速入门</h2><ul><li>导入 vue. js 的 script 脚本文件</li></ul><p> <code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></p><ul><li>在页面中声明一个将要被 vue 所控制的 DOM 区域，既 MVVM 中的 View</li></ul><pre><code class="hljs">`&lt;div id=&quot;app&quot;&gt;  &#123;&#123; message &#125;&#125;&lt;/div&gt;`</code></pre><ul><li>创建 vm 实例对象 (vue 实例对象)</li></ul><p><code>const hello = &#123;    //指定数据源，既 MVVM 中的 Mode1    data: function () &#123;       return &#123;          message: &#39;Hello Vue!&#39;       &#125; &#125; const app = Vue.createApp (hello) app. mount（&#39; #app &#39;）/／指定当前 vue 实例要控制页面的哪个区域</code></p><h1 id="7-项目部署"><a href="#7-项目部署" class="headerlink" title="7. 项目部署"></a>7. 项目部署</h1><h2 id="1-云端环境准备"><a href="#1-云端环境准备" class="headerlink" title="1. 云端环境准备"></a>1. 云端环境准备</h2><h3 id="安装-Mysql"><a href="#安装-Mysql" class="headerlink" title="安装 Mysql"></a>安装 Mysql</h3><table><thead><tr><th>环境</th><th>准备</th><th align="center"></th><th></th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021153950.png"/></td><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021200042.png"/></td><td align="center"></td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021206531.png" alt="image.png"></td><td></td><td align="center"></td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021214865.png" alt="image.png"></td><td></td><td align="center"></td><td></td></tr></tbody></table><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release<br>yum update<br>yum -y install nginx<br></code></pre></td></tr></table></figure><p>nginx 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx #开启nginx服务<br>systemctl stop nginx #停止nginx服务<br>systemctl restart nginx #重启nginx服务<br></code></pre></td></tr></table></figure><h3 id="配置-JDK"><a href="#配置-JDK" class="headerlink" title="配置 JDK"></a>配置 JDK</h3><p>下载 JDK，登录官方 <a href="https://www.oracle.com/java/technologies/downloads/java8%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E7%89%88%E6%9C%AC%E7%9A%84JDK">https://www.oracle.com/java/technologies/downloads/java8下载所需版本的JDK</a> ，版本为 JDK1.8</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021240929.png" alt="image.png"><br>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zvxf jdk-8u131-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>编辑/etc/profile 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">文件末尾增加</span><br>export JAVA_HOME=/usr/server/jdk1.8.0_131<br></code></pre></td></tr></table></figure><p>执行 source 命令，使配置立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="部署-Vue-项目"><a href="#部署-Vue-项目" class="headerlink" title="部署 Vue 项目"></a>部署 Vue 项目</h3><h4 id="打包-vue-项目"><a href="#打包-vue-项目" class="headerlink" title="打包 vue 项目"></a>打包 vue 项目</h4><p>进入到 Vue 项目目录，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run build<br></code></pre></td></tr></table></figure><p>将生成的 dist 目录上传至服务器/usr/vue/dist</p><h4 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h4><p>进入到/etc/nginx/conf.d 目录，创建 vue.conf 文件，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>   listen  80;<br>   server_name locahost;<br><br>   1ocation / &#123;<br>       root /usr/app/dist;<br>       index index.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="打包-Java-程序"><a href="#打包-Java-程序" class="headerlink" title="打包 Java 程序"></a>打包 Java 程序</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021501320.png" alt="image.png"><br>因为 springboot 有内置 tomcat 容器，这点比较方便，省去了 tomcat 的部署。我们到时候直接可以直接把 jar 包扔到 linux 上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup java -jar demo-0.0.1-SNAPSHOT.jar &gt; logName.1og 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.bilibili.com/video/BV1nV4y1s7ZN/">1天搞定SpringBoot+Vue全栈开发_哔哩哔哩_bilibili</a></li><li><a href="https://blog.csdn.net/javaDeveloper2010/article/details/129119489">Springdoc和Springfox</a></li></ol>]]></content>
    
    
    <summary type="html">it is some basic usage of SpringBoot .</summary>
    
    
    
    <category term="Java" scheme="https://alleyf.github.io/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://alleyf.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>DRF速通</title>
    <link href="https://alleyf.github.io/2023/04/fbae7fa42803.html"/>
    <id>https://alleyf.github.io/2023/04/fbae7fa42803.html</id>
    <published>2023-04-25T11:29:25.000Z</published>
    <updated>2023-04-27T16:31:05.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 其他相关文章-&gt; [[网页开发]]， #DRF #Django</p></blockquote><h1 id="1-api-接口"><a href="#1-api-接口" class="headerlink" title="1. api 接口"></a>1. api 接口</h1><p>目前市面上大部分公司开发人员使用的接口实现规范主要有：restful、RPC。<br>RPC（ Remote Procedure Call ）: 翻译成中文:远程过程调用[远程服务调用]. 从字面上理解就是访问/调用远程服务端提供的api接口。这种接口一般以服务或者过程式代码提供。<br>restful: 翻译成中文: 资源状态转换.(表征性状态转移)</p><ul><li>把服务端提供的所有的数据/文件都看成资源， 那么通过api接口请求数据的操作，本质上来说就是对资源的操作了.  因此，restful中要求，我们把当前接口对外提供哪种资源进行操作，就把<strong>资源的名称写在url地址</strong>。</li><li>  web开发中操作资源，最常见的最通用的无非就是增删查改，所以restful要求在地址栏中声明要操作的资源是什么。然后通过<strong>http请求动词</strong>来说明对该资源进行哪一种操作.</li></ul><blockquote><p>POST <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> 添加学生数据</p><p>GET <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> 获取所有学生</p><p>GET <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 获取id=pk的学生</p><p>DELETE <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 删除id=pk的一个学生</p><p>PUT <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 修改一个学生的全部信息 [id,name,sex,age,]</p><p>PATCH <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> / 修改一个学生的部分信息[age]</p></blockquote><p>请求方式：<em><strong>增删改查查</strong></em></p><ol><li>restful 是以资源为主的 api 接口规范，体现在地址上就是资源就是以名词表达。</li><li>rpc 则以动作为主的 api 接口规范，体现在接口名称上往往附带操作数据的动作。</li></ol><hr><h1 id="2-Django-的-CBV"><a href="#2-Django-的-CBV" class="headerlink" title="2.Django 的 CBV"></a>2.Django 的 CBV</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># CBV模式,views.py</span><br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">View</span>) ;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, reguest</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View GET请求...&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, reguest</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View POST请求...&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View DELETE请求&#x27;&#x27;&#x27;&quot;</span>)<br><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django. contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> book <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin. site.urls) ,<br><span class="hljs-comment"># path( &#x27;book/&#x27;, views.book) ,</span><br>path(<span class="hljs-string">&quot;book/&quot;</span>.views . BookView.asTview()) <span class="hljs-comment">#路由中的“/”不能丢，否则自动重定向为get请求</span><br>]<br></code></pre></td></tr></table></figure><hr><h1 id="3-反射"><a href="#3-反射" class="headerlink" title="3. 反射"></a>3. 反射</h1><p>通过反射 <code>func = getattr(self,func_name_str)</code> 可以将<strong>字符串转变为变量 (函数)<strong>，接着就可以直接调用 func () 从而</strong>动态调用函数</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,func_str</span>):<br>self.name = name<br>self.age = age<br>func = <span class="hljs-built_in">getattr</span>(self,func_str)<br>func() <span class="hljs-comment"># 等价于self.slepp() </span><br>a = Animal(<span class="hljs-string">&quot;alleyf&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;sleep&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="4-Drf"><a href="#4-Drf" class="headerlink" title="4. Drf"></a>4. Drf</h1><blockquote><p>安装 drf：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install djangorestframework<br></code></pre></td></tr></table></figure><blockquote><p>注册 drf app：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>... ,<br><span class="hljs-string">&#x27;rest_framework&#x27;</span>, <br>]<br></code></pre></td></tr></table></figure><hr><h2 id="1-APIView"><a href="#1-APIView" class="headerlink" title="1. APIView"></a>1. APIView</h2><ol><li>重写了 View 的 as_view ()和 dispatch（）方法，构建了新的 request 对象实现<strong>认证、权限和限流</strong>作用。</li><li><code>request. Get ()-&gt;request. Query_params ()</code>获取 get 请求参数</li><li><code>request. Post ()-&gt;request. Data ()</code> 获取 post(put 等)请求体数据，包括 files 都封装在一起反序列化了，支持前端 urlcoded 格式和 json 等其他任何格式。</li></ol><p>路由执行过程：<br><span style="background:#b1ffff">as_view ()-&gt;view ()-&gt;dispatch ()-&gt;get/post· · ·</span></p><hr><h2 id="2-Serializer-（反）序列化器"><a href="#2-Serializer-（反）序列化器" class="headerlink" title="2.Serializer （反）序列化器"></a>2.Serializer （反）序列化器</h2><p><img src="https://s2.loli.net/2023/04/26/VukBIX39lj2Kbx6.png" alt="（反）序列化器|425"></p><blockquote><p>[!NOTE] keys</p><ul><li>序列化：数据表数据-&gt;前端显示的 json 数据 （get 请求，<strong>取数据</strong>）</li><li>反序列化：前端提交的 json 数据-&gt;数据表数据（post、put、patch、delete 等请求，<strong>存数据</strong>）</li></ul></blockquote><h3 id="1-序列化与反序列化"><a href="#1-序列化与反序列化" class="headerlink" title="1.序列化与反序列化"></a>1.序列化与反序列化</h3><p><strong>常用字段类型</strong>：<br>| 字段                    | 构造方式                                                                             |<br>| ———————– | ———————————————————————————— |<br>| <strong>BooleanField</strong>        | BooleanField()                                                                       |<br>| <strong>CharField</strong>           | CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) |<br>| <strong>EmailField</strong>          | EmailField(max_length=None, min_length=None, allow_blank=False)                      |<br>| <strong>URLField</strong>            | URLField(max_length=200, min_length=None, allow_blank=False)                         |<br>| <strong>IPAddressField</strong>      | IPAddressField(protocol=‘both’, unpack_ipv4=False, options)                          |<br>| <strong>IntegerField</strong>        | IntegerField(max_value=None, min_value=None)                                         |<br>| <strong>FloatField</strong>          | FloatField(max_value=None, min_value=None)                                           |<br>| <strong>DateTimeField</strong>       | DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)               |<br>| <strong>DateField</strong>           | DateField(format=api_settings.DATE_FORMAT, input_formats=None)                       |<br>| <strong>TimeField</strong>           | TimeField(format=api_settings.TIME_FORMAT, input_formats=None)                       |<br>| <strong>ChoiceField</strong>         | ChoiceField(choices) choices 与 Django 的用法相同                                    |<br>| <strong>MultipleChoiceField</strong> | MultipleChoiceField(choices)                                                         |<br>| <strong>FileField</strong>           | FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)   |<br>| <strong>ImageField</strong>          | ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)  |<br>| <strong>ListField</strong>           | ListField(child=, min_length=None, max_length=None)                                  |<br>| <strong>DictField</strong>           | DictField(child=)                                                                    |<br><strong>选项参数：</strong><br>| 参数名称            | 作用             |<br>| ——————- | —————- |<br>| <strong>max_length</strong>      | 最大长度         |<br>| <strong>min_lenght</strong>      | 最小长度         |<br>| <strong>allow_blank</strong>     | 是否允许为空     |<br>| <strong>trim_whitespace</strong> | 是否截断空白字符 |<br>| <strong>max_value</strong>       | 最小值           |<br>| <strong>min_value</strong>       |     最大值             |<br><strong>通用参数：</strong><br>| 参数名称           | 说明                                      |<br>| —————— | —————————————– |<br>| <strong>read_only</strong>      | 表明该字段仅用于序列化输出，默认False     |<br>| <strong>write_only</strong>     | 表明该字段仅用于反序列化输入，默认False   |<br>| <strong>required</strong>       | 表明该字段在反序列化时必须输入，默认True  |<br>| <strong>default</strong>        | 反序列化时使用的默认值                    |<br>| <strong>allow_null</strong>     | 表明该字段是否允许传入 None，默认 False   |<br>| <strong>validators</strong>     | 该字段使用的验证器                        |<br>| <strong>error_messages</strong> | 包含错误编号与错误信息的字典              |<br>| <strong>label</strong>          | 用于 HTML 展示 API 页面时，显示的字段名称 |<br>| <strong>help_text</strong>      |  用于HTML展示API页面时，显示的字段帮助提示信息                                         |</p><ol><li>新建模型（反）序列化器</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookSerializers</span>(serializers.Serializer):<br><span class="hljs-string">&quot;&quot;&quot;Book的(反)序列化器&quot;&quot;&quot;</span><br>title = serializers.CharField (max_length=<span class="hljs-number">3</span>)<br>price = serializers.IntegerField(require=<span class="hljs-literal">True</span>)<br>date = serializers.DateField(source=<span class="hljs-string">&quot;pub_date&quot;</span>)<br><span class="hljs-comment"># 该方法必须被重写否则无法使用serializer.save()新建数据,实现view与serializer解耦</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self,validated_data</span>):<br>new_book = Book.objects.create(**serializer.validated_data)<br><span class="hljs-keyword">return</span> new_book<br><span class="hljs-comment"># 该方法必须被重写否则无法使用serializer.save()更新数据，实现view与serializer解耦</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self,validated_data</span>):<br><span class="hljs-comment"># 修改数据</span><br>Book.objects.<span class="hljs-built_in">filter</span>(pk=instance.pk).update(**serializer.validated_data)<br><span class="hljs-comment"># 设置序列化器的实例为更新后的对象</span><br>updated_book = Book.objects.get(pk=instance.pk)<br><span class="hljs-keyword">return</span> updated_book<br></code></pre></td></tr></table></figure><blockquote><ol><li>（反）序列化器的字段名与数据表的字段名必须一致，否则需要指定 <code>source</code> 指向某个字段</li><li>字段规则要根据数据表的规则设置</li></ol></blockquote><ol start="2"><li>新建模型视图类</li></ol><blockquote><ul><li><strong>根据需求重写 get、post、put、delete 等方法</strong></li><li>除了 <strong>delete 返回 none</strong> 外，其他方法都要返回改变的<strong>序列化为 json 后的数据</strong></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> viewsets<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&quot;&quot;&quot;序列化&quot;&quot;&quot;</span><br><span class="hljs-comment"># query_params = request.query_params() 获取get的url请求参数 </span><br>queryset = Book.objects.<span class="hljs-built_in">all</span>() <span class="hljs-comment"># 当查询过滤得到一个对象时，many=False</span><br><span class="hljs-comment"># 构建序列化对象</span><br>serializer = BookSerializer(instance=queryset,many=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> Response(serilaizer.data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&quot;&quot;&quot;反序列化&quot;&quot;&quot;</span><br><span class="hljs-comment"># 构建反序列化对象 </span><br>serializer = BookSerializer(data=request.data)<br><span class="hljs-comment"># 数据校验</span><br><span class="hljs-keyword">if</span> serializer.is_valid():<br><span class="hljs-comment"># 校验通过创建新数据，返回新建的json数据 </span><br>serializer.save()<br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 校验失败，返回错误 </span><br><span class="hljs-keyword">return</span> Response(serializer.errors) <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDetailView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从数据库获取指定id的数据</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>singleBook = Book.objects.get(pk=<span class="hljs-built_in">id</span>)<br><span class="hljs-comment"># 构建序列化器转为json数据</span><br>serializer = Serializer(instance=singleBook,many=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br><span class="hljs-string">&quot;&quot;&quot;修改指定id的数据&quot;&quot;&quot;</span><br>update_bookobj = Book.objects.get(pk=<span class="hljs-built_in">id</span>)<br><span class="hljs-comment"># 构建反序列化器</span><br>serializer = Serializer(instance=update_bookobj,data=request.data)<br><span class="hljs-comment"># 数据校验</span><br><span class="hljs-keyword">if</span> serializer.is_valid():<br>serializer.save()<br><span class="hljs-comment"># 序列化修改后的对象并返回</span><br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 校验失败，返回错误 </span><br><span class="hljs-keyword">return</span> Response(serializer.errors) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br>Book.objects.get(pk=<span class="hljs-built_in">id</span>).delete()<br><span class="hljs-comment"># 直接返回空</span><br><span class="hljs-keyword">return</span> Response()<br></code></pre></td></tr></table></figure><ol start="3"><li>路由配置（urls.py）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path,re_path ,include<br><span class="hljs-keyword">from</span> views <span class="hljs-keyword">import</span> Bookview , BookDetailview<br>urlpatterns = [<br>path(<span class="hljs-string">&#x27;books/&#x27;</span>,Bookview.as_view()),<br>re_path(<span class="hljs-string">&#x27;books/(?P&lt;pk&gt;\d+)/&#x27;</span>,BookDetailview.as_view()),<br>]<br></code></pre></td></tr></table></figure><h3 id="2-Response"><a href="#2-Response" class="headerlink" title="2. Response"></a>2. Response</h3><blockquote><p>drf 重写后的 response<br><code>Response(data, status=None, template_name=None, headers=None, content_type=None)</code></p></blockquote><blockquote><p>[!NOTE] 常用参数概念</p><ol><li><code>data</code> ：python 的基本数据类型或者序列化后的数据</li><li><code>status</code>：返回状态码，eg：200，403 etc</li><li><code>template_name</code>: 模板名称，如果使用 <code>HTMLRenderer</code> 时需指明；</li><li> <code>headers</code>: 用于存放响应头信息的字典；</li><li> <code>content_type</code>: 响应数据的 Content-Type，通常此参数无需传递，REST framework 会根据前端所需类型数据来设置该参数</li></ol></blockquote><h3 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3. 状态码"></a>3. 状态码</h3><blockquote><p>为了方便设置状态码，REST framewrok在<code>rest_framework.status</code>模块中提供了常用http状态码的常量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1）信息告知 - 1xx </span><br>HTTP_100_CONTINUE <br>HTTP_101_SWITCHING_PROTOCOLS <br><span class="hljs-comment"># 2）成功 - 2xx </span><br>HTTP_200_OK <br>HTTP_201_CREATED <br>HTTP_202_ACCEPTED <br>HTTP_203_NON_AUTHORITATIVE_INFORMATION HTTP_204_NO_CONTENT <br>HTTP_205_RESET_CONTENT <br>HTTP_206_PARTIAL_CONTENT <br>HTTP_207_MULTI_STATUS <br><span class="hljs-comment"># 3）重定向 - 3xx </span><br>HTTP_300_MULTIPLE_CHOICES <br>HTTP_301_MOVED_PERMANENTLY <br>HTTP_302_FOUND <br>HTTP_303_SEE_OTHER <br>HTTP_304_NOT_MODIFIED <br>HTTP_305_USE_PROXY <br>HTTP_306_RESERVED <br>HTTP_307_TEMPORARY_REDIRECT <br><span class="hljs-comment"># 4）客户端错误 - 4xx </span><br>HTTP_400_BAD_REQUEST <br>HTTP_401_UNAUTHORIZED <br>HTTP_402_PAYMENT_REQUIRED <br>HTTP_403_FORBIDDEN <br>HTTP_404_NOT_FOUND <br>HTTP_405_METHOD_NOT_ALLOWED <br>HTTP_406_NOT_ACCEPTABLE HTTP_407_PROXY_AUTHENTICATION_REQUIRED HTTP_408_REQUEST_TIMEOUT <br>HTTP_409_CONFLICT <br>HTTP_410_GONE <br>HTTP_411_LENGTH_REQUIRED <br>HTTP_412_PRECONDITION_FAILED HTTP_413_REQUEST_ENTITY_TOO_LARGE HTTP_414_REQUEST_URI_TOO_LONG HTTP_415_UNSUPPORTED_MEDIA_TYPE HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_417_EXPECTATION_FAILED <br>HTTP_422_UNPROCESSABLE_ENTITY <br>HTTP_423_LOCKED <br>HTTP_424_FAILED_DEPENDENCY <br>HTTP_428_PRECONDITION_REQUIRED <br>HTTP_429_TOO_MANY_REQUESTS HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS <br><span class="hljs-comment"># 5）服务器错误 - 5xx </span><br>HTTP_500_INTERNAL_SERVER_ERROR <br>HTTP_501_NOT_IMPLEMENTED <br>HTTP_502_BAD_GATEWAY <br>HTTP_503_SERVICE_UNAVAILABLE <br>HTTP_504_GATEWAY_TIMEOUT HTTP_505_HTTP_VERSION_NOT_SUPPORTED HTTP_507_INSUFFICIENT_STORAGE HTTP_511_NETWORK_AUTHENTICATION_REQUIRED<br></code></pre></td></tr></table></figure><hr><h2 id="3-ModelSerializer"><a href="#3-ModelSerializer" class="headerlink" title="3.ModelSerializer"></a>3.ModelSerializer</h2><blockquote><p>模型类序列化器，根据模型简化序列化过程，根据模型表<strong>自动创建序列化字段</strong>，并且内部实现了 <strong>create 方法和 update 方法</strong>，也可以根据实际需要重写逻辑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Book<br><span class="hljs-comment"># 对全部字段进行序列化</span><br>fields = <span class="hljs-string">&#x27;__al__&#x27;</span><br><span class="hljs-comment"># 对指定字段进行序列化</span><br>fields = [<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;id&#x27;</span>,···]<br><span class="hljs-comment"># 排除指定字段不进行序列化</span><br>exclude = [<span class="hljs-string">&#x27;id&#x27;</span>]<br>extra_kwargs = &#123; <span class="hljs-string">&#x27;id&#x27;</span>: &#123;<span class="hljs-string">&#x27;min_value&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>&#125;, <span class="hljs-string">&#x27;title&#x27;</span>: &#123;<span class="hljs-string">&#x27;min_value&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>&#125;, &#125;<br></code></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 全局钩子  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, attrs</span>):  <br>    name = attrs.get(<span class="hljs-string">&#x27;name&#x27;</span>)  <br>    <span class="hljs-keyword">if</span> Resume.objects.<span class="hljs-built_in">filter</span>(name=name).exists():  <br>        <span class="hljs-keyword">raise</span> exceptions.ValidationError(name + <span class="hljs-string">&#x27;的简历已存在!&#x27;</span>)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> attrs  <br><span class="hljs-comment"># 局部钩子  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_name</span>(<span class="hljs-params">self, value</span>):  <br>     response = &#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;成功&#x27;</span>&#125;  <br>     res = Resume.objects.<span class="hljs-built_in">filter</span>(name=value)  <br>     <span class="hljs-keyword">if</span> res:  <br>         <span class="hljs-keyword">raise</span> exceptions.ValidationError(<span class="hljs-string">&#x27;简历重复!&#x27;</span>)  <br>     <span class="hljs-keyword">else</span>:  <br>         <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><hr><h2 id="4-视图"><a href="#4-视图" class="headerlink" title="4. 视图"></a>4. 视图</h2><h3 id="1-GenericAPIView"><a href="#1-GenericAPIView" class="headerlink" title="1. GenericAPIView"></a>1. GenericAPIView</h3><p>导入 <code>GenericAPIView</code></p><blockquote><p><code>from rest_framework.viewsets import generics</code></p></blockquote><blockquote><p>在 APIView 上扩展了一些新方法</p></blockquote><p>可设置的属性变量：</p><ul><li>  <strong>pagination_class</strong> 指明分页控制类</li><li>  <strong>filter_backends</strong> 指明过滤控制后端</li></ul><h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h4><h5 id="（1）get-serializer-class-self"><a href="#（1）get-serializer-class-self" class="headerlink" title="（1）get_serializer_class(self)"></a>（1）get_serializer_class(self)</h5><blockquote><p>当出现一个视图类中调用多个序列化器时,那么可以通过条件判断在get_serializer_class方法中通过返回不同的序列化器类名就可以让视图方法执行不同的序列化器对象了。<br>返回序列化器类，默认返回<code>serializer_class</code>，可以重写</p></blockquote><h5 id="（2）get-serializer-self-args-kwargs"><a href="#（2）get-serializer-self-args-kwargs" class="headerlink" title="（2）get_serializer(self, *args, **kwargs)"></a>（2）get_serializer(self, *args, **kwargs)</h5><blockquote><p>返回序列化器对象，主要用来提供给Mixin扩展类使用，如果我们在视图中想要获取序列化器对象，也可以直接调用此方法。</p><p><strong>注意，该方法在提供序列化器对象的时候，会向序列化器对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</strong></p><ul><li>  <strong>request</strong> 当前视图的请求对象</li><li>  <strong>view</strong> 当前请求的类视图对象</li><li>  <strong>format</strong> 当前请求期望返回的数据格式</li></ul></blockquote><h5 id="（3）get-queryset-self"><a href="#（3）get-queryset-self" class="headerlink" title="（3）get_queryset(self)"></a>（3）get_queryset(self)</h5><blockquote><p>返回视图使用的查询集，主要用来提供给 Mixin 扩展类使用，是列表视图与详情视图获取数据的基础，默认返回 <code>queryset</code> 属性，可以重写.</p></blockquote><h5 id="（4）get-object-self"><a href="#（4）get-object-self" class="headerlink" title="（4）get_object(self)"></a>（4）get_object(self)</h5><blockquote><p>返回详情视图所需的模型类数据对象，主要用来提供给Mixin扩展类使用。</p><p>在试图中可以调用该方法获取详情信息的模型类对象。</p><p><strong>若详情访问的模型类对象不存在，会返回404。</strong></p><p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p></blockquote><h4 id="1-方法重写"><a href="#1-方法重写" class="headerlink" title="1. 方法重写"></a>1. 方法重写</h4><p><code>设置urls.py中的普通路由，正则路由指定参数为pk</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>path(<span class="hljs-string">&#x27;books/&#x27;</span>,views.BookView.as_view()),<br>re_path(<span class="hljs-string">&#x27;books/(?P&lt;pk&gt;\d+)&#x27;</span>,views.BookDetailView.as_view()),<br>]<br></code></pre></td></tr></table></figure><p><strong>get：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;获取所有岗位信息&quot;&quot;&quot;</span>  <br>    serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="hljs-literal">True</span>)  <br>    <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p><strong><font color="#f79646">post</font>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">    添加岗位信息  </span><br><span class="hljs-string">    :param request:    :return: 添加后的岗位信息  </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>    serializer = self.get_serializer(data=request.data)  <br>    <span class="hljs-keyword">if</span> serializer.is_valid():  <br>        serializer.save()  <br>        <span class="hljs-keyword">return</span> Response(serializer.data)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></td></tr></table></figure><p><strong><font color="#2DC26B">get（单个数据）</font>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, pk</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;获取指定id的岗位信息&quot;&quot;&quot;</span>  <br>    serializer = self.get_serializer(instance=self.get_object(), many=<span class="hljs-literal">True</span>)  <br>    <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p><font color="#00b0f0">put（单个数据）：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, pk</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">    修改指定id的岗位信息  </span><br><span class="hljs-string">    :param request:    :return: 添加后的岗位信息  </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>    serializer = self.get_serializer(instance=self.get_object(), data=request.data)  <br>    <span class="hljs-keyword">if</span> serializer.is_valid():  <br>        serializer.save()  <br>        <span class="hljs-keyword">return</span> Response(serializer.data)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></td></tr></table></figure><p><font color="#7030a0">delete (单个数据)：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br>self.get_object().delete()<br><span class="hljs-comment"># 直接返回空</span><br><span class="hljs-keyword">return</span> Response()<br></code></pre></td></tr></table></figure><h3 id="2-ViewSet"><a href="#2-ViewSet" class="headerlink" title="2. ViewSet"></a>2. ViewSet</h3><h4 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h4><p>继承自 <code>APIView</code> 与 <code>ViewSetMixin</code>，作用也与 APIView 基本类似，提供了身份认证、权限校验、流量管理等。<br><strong>ViewSet主要通过继承ViewSetMixin来实现在调用as_view()时传入字典{“http请求”：“视图方法”}的映射处理工作，如{‘get’:’list’}，</strong></p><blockquote><ol><li>通过路由指定不同请求执行不同视图函数，从而修改路由分配方法。</li><li>项目加载时执行 <code>as_view ()</code> 函数，当发起请求时才执行 <code>view</code> 函数根据反射获取重写的<strong>函数变量</strong>，设置<strong>请求映射</strong>到该函数变量，进而根据不同请求分发匹配不同的视图函数。</li></ol></blockquote><p>在 ViewSet 中，没有提供任何动作 action 方法，需要我们自己实现 action 方法。<br>使用视图集ViewSet，可以将一系列视图相关的代码逻辑和相关的http请求动作封装到一个类中：<br><font color="#4bacc6">&gt; -   list() 提供一组数据</font><br><font color="#4bacc6">&gt; -   retrieve() 提供单个数据</font><br><font color="#4bacc6">&gt; -   create() 创建数据</font><br><font color="#4bacc6">&gt; -   update() 保存数据</font><br><font color="#4bacc6">&gt; -   destory() 删除数据</font></p><blockquote><p>ViewSet视图集类不再限制视图方法名只允许get()、post()等这种情况了，而是实现允许开发者根据自己的需要定义自定义方法名，例如 list() 、create() 等，然后经过路由中使用http和这些视图方法名进行绑定调用。</p></blockquote><h3 id="3-GenericViewSet"><a href="#3-GenericViewSet" class="headerlink" title="3. GenericViewSet"></a>3. GenericViewSet</h3><blockquote><p>继承了 GenericAPIView 和 ViewSetMixin，即继承了增删改查查方法，也修改了视图分发方法。</p></blockquote><p><strong>GenericViewSet</strong>就帮助我们完成了这样的继承工作，继承自<code>GenericAPIView</code>与<code>ViewSetMixin</code>，在实现了调用as_view()时传入字典（如<code>&#123;&#39;get&#39;:&#39;list&#39;&#125;</code>）的映射处理工作的同时，还提供了<code>GenericAPIView</code>提供的基础方法，可以直接搭配Mixin扩展类使用。<br>url. py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path <br><span class="hljs-keyword">from</span> vset.views <span class="hljs-keyword">import</span> BookView <br>urlpatterns = [ <br><span class="hljs-comment"># path(&quot;set&quot;, views.BookView.as_view(&#123;&quot;http请求&quot;:&quot;视图方法&quot;&#125;)), </span><br>path(<span class="hljs-string">&quot;books/&quot;</span>, BookView.as_view(&#123; <br> <span class="hljs-string">&quot;get&quot;</span>: <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;post&quot;</span>: <span class="hljs-string">&quot;create&quot;</span> <br> &#125;)), re_path(<span class="hljs-string">&quot;^books/(?P&lt;pk&gt;\d+)$&quot;</span>, BookView.as_view(&#123;<br>  <span class="hljs-string">&quot;get&quot;</span>: <span class="hljs-string">&quot;retrieve&quot;</span>, <br>  <span class="hljs-string">&quot;put&quot;</span>: <span class="hljs-string">&quot;update&quot;</span>, <br>  <span class="hljs-string">&quot;delete&quot;</span>: <span class="hljs-string">&quot;delete&quot;</span>, &#125;)), ]<br></code></pre></td></tr></table></figure><p>views. py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet<br><span class="hljs-keyword">from</span> rest_framework.mixins <span class="hljs-keyword">import</span> ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, \ DestroyModelMixin<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(GenericViewSet, ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin): <br>queryset = Book.objects <br>serializer_class = BookSerializer<br></code></pre></td></tr></table></figure><h3 id="4-ModelViewSet"><a href="#4-ModelViewSet" class="headerlink" title="4. ModelViewSet"></a>4. ModelViewSet</h3><blockquote><p>进一步封装，继承了五个 Mixin 类和 GenericViewSet。</p></blockquote><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelViewSet</span>(mixins.CreateModelMixin,  <br>                   mixins.RetrieveModelMixin,  <br>                   mixins.UpdateModelMixin,  <br>                   mixins.DestroyModelMixin,  <br>                   mixins.ListModelMixin,  <br>                   GenericViewSet):<br>            <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">A viewset that provides default `create()`, `retrieve()`, `update()`,  </span><br><span class="hljs-string">`partial_update()`, `destroy()` and `list()` actions.  </span><br><span class="hljs-string">&quot;&quot;&quot;</span>  <br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 局限：<br>    不够灵活，直接自带了六个增删改改查查视图函数，需要其他处理需要重写对应方法。</p></blockquote><h3 id="5-扩展视图方法"><a href="#5-扩展视图方法" class="headerlink" title="5. 扩展视图方法"></a>5. 扩展视图方法</h3><blockquote><p>根据需要扩展其他视图函数接口，匹配对应的 get、put、post、delete 等请求，并将接口注册到路由，</p></blockquote><h4 id="1-路由注册"><a href="#1-路由注册" class="headerlink" title="1. 路由注册"></a>1. 路由注册</h4><p><font color="#6425d0">views. py:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">self, request</span>):  <br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        自定义action  </span><br><span class="hljs-string">        return: JSON数据  </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>        <span class="hljs-keyword">pass</span><span class="hljs-comment">#示例：  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">latest</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&#x27;&#x27;&#x27;获取最后一条记录&#x27;&#x27;&#x27;</span>  <br>    <span class="hljs-comment"># 获取模型数据  </span><br>    book = BookInfo.objects.latest(<span class="hljs-string">&#x27;id&#x27;</span>)    <span class="hljs-comment"># 获取序列化器对象  </span><br>    s = BookInfoModelSerializer(instance=book)    <span class="hljs-keyword">return</span> Response(s.data)<br></code></pre></td></tr></table></figure><p><font color="#4bacc6">urls. py:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>   <span class="hljs-comment"># url(r&#x27;^books/$&#x27;,views.BookInfoViewSet.as_view(&#123;&#x27;get&#x27;:&#x27;action函数名&#x27;&#125;)),  </span><br><span class="hljs-comment">#示例：  </span><br>url(<span class="hljs-string">r&#x27;^books/$&#x27;</span>, views.BookInfoViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;latest&#x27;</span>&#125;)),  <br>]<br></code></pre></td></tr></table></figure><h4 id="装饰器注册"><a href="#装饰器注册" class="headerlink" title="装饰器注册"></a>装饰器注册</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> action<br><span class="hljs-meta">@action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>], detail=<span class="hljs-literal">False</span>, url_path=<span class="hljs-string">&#x27;test&#x27;</span></span>)  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-built_in">print</span>(request.data)  <br>    <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;成功了&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>methods: 声明该 action 对应的请求方式，列表传递  </li><li>detail: 声明该 action 路径是否为单一资源对应(False 查询所有数据接口，True 查询单条数据接口)，生成路由时是否拼接 <strong>pk</strong> 参数，detail为<code>True</code>，表示路径名格式应该为 <code>book/&#123;pk&#125;/login/</code></li><li>url_path：<strong>路由名称</strong>，不设置默认为函数名</li></ul><h2 id="5-路由"><a href="#5-路由" class="headerlink" title="5. 路由"></a>5. 路由</h2><blockquote><p>对于视图集 ViewSet，我们除了可以自己手动指明请求方式与动作 action 之间的对应关系外，还可以使用 Routers 来帮助我们快速实现路由信息。</p></blockquote><p>REST framework提供了两个router</p><ul><li>  <strong>SimpleRouter</strong></li><li>  <strong>DefaultRouter</strong></li></ul><h3 id="1-用法"><a href="#1-用法" class="headerlink" title="1. 用法"></a>1. 用法</h3><p><span style="background:rgba(240, 200, 0, 0.2)">1. 创建 router 对象，并注册视图集</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routers <br>router = routers.DefaultRouter() router.register(<span class="hljs-string">&#x27;book&#x27;</span>, BookView, base_name=<span class="hljs-string">&#x27;book&#x27;</span>)<br></code></pre></td></tr></table></figure><p>register(prefix, viewset, base_name)</p><blockquote><ul><li>  prefix 该视图集的路由前缀</li><li>  viewset 视图集</li><li>  base_name 路由别名的前缀</li></ul></blockquote><p>如上述代码会形成的路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">^book/$    name: book-<span class="hljs-built_in">list</span><br>^book/&#123;pk&#125;/$   name: book-detail<br></code></pre></td></tr></table></figure><p><span style="background:rgba(136, 49, 204, 0.2)">2. 添加路由数据：</span></p><ul><li><p>方式 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    ...<br>]<br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure></li><li><p>方式 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    ...<br>    path(<span class="hljs-string">&#x27;^&#x27;</span>, include(router.urls))<br>]<br></code></pre></td></tr></table></figure></li></ul><p><span style="background:#40a9ff">3. 完整 demo：</span></p><blockquote><p>附带了 <code>swagger</code> 的接口路由和 <code>django-admin</code> 后台管理路由</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url  <br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin  <br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> include, path, re_path  <br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve  <br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routers  <br><span class="hljs-keyword">from</span> rest_framework.documentation <span class="hljs-keyword">import</span> include_docs_urls  <br><span class="hljs-keyword">from</span> rest_framework.schemas <span class="hljs-keyword">import</span> get_schema_view  <br><span class="hljs-keyword">from</span> rest_framework_swagger.renderers <span class="hljs-keyword">import</span> SwaggerUIRenderer, OpenAPICodec  <br><span class="hljs-keyword">from</span> AIResume <span class="hljs-keyword">import</span> settings  <br><span class="hljs-keyword">from</span> smartresume.views <span class="hljs-keyword">import</span> auth_user_api, platform_user_api, resume_api, job_api  <br>  <br>schema_view = get_schema_view(title=<span class="hljs-string">&#x27;智能简历平台接口文档&#x27;</span>, renderer_classes=[SwaggerUIRenderer, OpenAPICodec])  <br>  <br>router = routers.DefaultRouter()  <br>  <br>router.register(<span class="hljs-string">r&#x27;users&#x27;</span>, auth_user_api.UserViewSet, basename=<span class="hljs-string">&quot;auth_users_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;groups&#x27;</span>, auth_user_api.GroupViewSet, basename=<span class="hljs-string">&quot;auth_groups_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;platform_users&#x27;</span>, platform_user_api.PuserViewSet, basename=<span class="hljs-string">&quot;platform_users_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;resumes&#x27;</span>, resume_api.ResumeViewSet, basename=<span class="hljs-string">&quot;resume_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;jobs&#x27;</span>, job_api.JobViewSet, basename=<span class="hljs-string">&quot;job_api&quot;</span>)  <br>urlpatterns = [  <br>    re_path(<span class="hljs-string">r&quot;^static/(?P&lt;path&gt;.*)$&quot;</span>, serve, &#123;<span class="hljs-string">&quot;document_root&quot;</span>: settings.STATIC_ROOT&#125;, name=<span class="hljs-string">&#x27;static&#x27;</span>),  <span class="hljs-comment"># 新增的路径  </span><br>    re_path(<span class="hljs-string">r&#x27;^media/(?P&lt;path&gt;.*)$&#x27;</span>, serve, &#123;<span class="hljs-string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;, name=<span class="hljs-string">&#x27;media&#x27;</span>),  <br>    path(<span class="hljs-string">r&#x27;&#x27;</span>, include(router.urls)),  <br>    path(<span class="hljs-string">r&#x27;api-auth/&#x27;</span>, include(<span class="hljs-string">&#x27;rest_framework.urls&#x27;</span>)),  <br>    url(<span class="hljs-string">r&#x27;^admin/&#x27;</span>, admin.site.urls),  <br>    path(<span class="hljs-string">&#x27;docs2/&#x27;</span>, schema_view, name=<span class="hljs-string">&#x27;docs&#x27;</span>),  <br>    path(<span class="hljs-string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="hljs-string">&#x27;智能简历平台接口文档&#x27;</span>)),  <br>]  <br>  <br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure><h2 id="2-视图集中附加-action-的声明"><a href="#2-视图集中附加-action-的声明" class="headerlink" title="2. 视图集中附加 action 的声明"></a>2. 视图集中附加 action 的声明</h2><blockquote><p>在视图集中，如果想要让 Router 自动帮助我们为自定义的动作生成路由信息，需要使用 <code>rest_framework.decorators.action</code> 装饰器。</p></blockquote><pre><code class="hljs">以 action 装饰器装饰的方法名会作为 action 动作名，与 list、retrieve 等同。</code></pre><p>action装饰器可以接收两个参数：</p><ul><li><strong>methods</strong>: 声明该action对应的请求方式，列表传递</li><li><strong>detail</strong>: 声明该action的路径是否与单一资源对应  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">路由前缀/&lt;pk&gt;<span class="hljs-regexp">/action方法名/</span><br></code></pre></td></tr></table></figure><ul><li>  True 表示路径格式是<code>xxx/&lt;pk&gt;/action方法名/</code></li><li>  False 表示路径格式是<code>xxx/action方法名/</code></li></ul></li><li>  url_path：声明该 action 的路由尾缀。</li></ul><p>demo：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> ModelViewSet<br><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> action<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Book.objects<br>    serializer_class = BookSerializer<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    action装饰器的作用：告诉路由类给视图集的自定义方法生成路由信息</span><br><span class="hljs-string">    methods, 列表，允许哪些http请求能访问当前视图方法</span><br><span class="hljs-string">    detail，布尔，生成路由时是否拼接pk参数</span><br><span class="hljs-string">            detail为True，表示路径名格式应该为 book/&#123;pk&#125;/login/</span><br><span class="hljs-string">    url_path，字符串，生成路由时末尾路由路径，如果没有声明，则自动以当前方法名作为路由尾缀</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-meta">    @action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>], detail=<span class="hljs-literal">True</span>,url_path=<span class="hljs-string">&quot;login&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self, request,pk</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;登录&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;msg&quot;</span>:request.method&#125;)<br><br>    <span class="hljs-comment"># detail为False 表示路径名格式应该为 book/get_new_5/</span><br><span class="hljs-meta">    @action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>], detail=<span class="hljs-literal">False</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_5</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;获取最新添加的5本书&quot;&quot;&quot;</span><br>        ...<br></code></pre></td></tr></table></figure><p>上述方法自动为此视图集自定义 action 方法形成的路由会是如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">^book/get_new_5/$    name: book-get_new_5<br>^book/&#123;pk&#125;/login/$   name: book-login<br></code></pre></td></tr></table></figure><hr><h2 id="6-其它组件"><a href="#6-其它组件" class="headerlink" title="6. 其它组件"></a>6. 其它组件</h2><h3 id="1-认证"><a href="#1-认证" class="headerlink" title="1. 认证"></a>1. 认证</h3><h4 id="1-全局认证"><a href="#1-全局认证" class="headerlink" title="1. 全局认证"></a>1. 全局认证</h4><blockquote><p>没有设置用户配置认证时，默认认证为以下两个认证。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;  <br><span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [  <br>    <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,  <br>    <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>  <br>],<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-局部认证"><a href="#2-局部认证" class="headerlink" title="2. 局部认证"></a>2. 局部认证</h4><ol><li><p>继承认证基类, 写自己的认证类，并重写 authenticate（）方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthentication</span>(<span class="hljs-title class_ inherited__">SessionAuthentication</span>):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):  <br>        token = request.query_params.get(<span class="hljs-string">&#x27;token&#x27;</span>)  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:  <br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)  <br>        user_obj = Puser.objects.<span class="hljs-built_in">filter</span>(token=token).first()  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:  <br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)  <br>        <span class="hljs-keyword">return</span> user_obj, token<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&quot;MyAPI&quot;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>视图函数设置 authentication_classes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">authentication_classes = [MyAuthentication,]<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-权限"><a href="#2-权限" class="headerlink" title="2. 权限"></a>2. 权限</h3><h3 id="3-限流"><a href="#3-限流" class="headerlink" title="3. 限流"></a>3. 限流</h3><blockquote><p>控制用户或管理员等访问接口的频次，减轻服务压力</p></blockquote><p>1） AnonRateThrottle</p><p>限制所有匿名未认证用户，使用IP区分用户。【很多公司这样的，IP结合设备信息来判断，当然比IP要靠谱一点点而已】</p><p>使用<code>DEFAULT_THROTTLE_RATES[&#39;anon&#39;]</code> 来设置频次</p><p>2）UserRateThrottle</p><p>限制认证用户，使用User模型的 id主键 来区分。</p><p>使用<code>DEFAULT_THROTTLE_RATES[&#39;user&#39;]</code> 来设置频次</p><p>3）ScopedRateThrottle</p><p>限制用户对于每个视图的访问频次，使用 ip 或 user id。</p><p>settings.py，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 限流全局配置</span><br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>:[ <span class="hljs-comment"># 限流配置类</span><br>    <span class="hljs-comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;, # 未认证用户[未登录用户]</span><br>    <span class="hljs-comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;, # 已认证用户[已登录用户]</span><br>        <span class="hljs-string">&#x27;rest_framework.throttling.ScopedRateThrottle&#x27;</span>, <span class="hljs-comment"># 自定义限流</span><br>    ],<br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>:&#123; <span class="hljs-comment"># 频率配置</span><br>        <span class="hljs-string">&#x27;anon&#x27;</span>: <span class="hljs-string">&#x27;2/day&#x27;</span>,  <span class="hljs-comment"># 针对游客的访问频率进行限制，实际上，drf只是识别首字母，但是为了提高代码的维护性，建议写完整单词</span><br>        <span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;5/day&#x27;</span>, <span class="hljs-comment"># 针对会员的访问频率进行限制，</span><br>        <span class="hljs-string">&#x27;vip&#x27;</span>: <span class="hljs-string">&#x27;10/day&#x27;</span>, <span class="hljs-comment"># 针对会员的访问频率进行限制，</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>视图代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> UserRateThrottle<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 限流局部配置[这里需要配合在全局配置中的DEFAULT_THROTTLE_RATES来设置频率]</span><br>    <span class="hljs-comment"># throttle_classes = [UserRateThrottle] # 使用drf限流类来配置频率</span><br>    throttle_scope = <span class="hljs-string">&quot;vip&quot;</span> <span class="hljs-comment"># 自定义频率</span><br></code></pre></td></tr></table></figure><h3 id="4-过滤"><a href="#4-过滤" class="headerlink" title="4. 过滤"></a>4. 过滤</h3><blockquote><p>安装过滤器：<br><code>pip install django-filter </code></p></blockquote><p>在配置文件中增加过滤后端的设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    ...<br>    <span class="hljs-string">&#x27;django_filters&#x27;</span>,  <span class="hljs-comment"># 需要注册应用，</span><br>]<br><br>REST_FRAMEWORK = &#123;<br>    ...<br>    <span class="hljs-string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: (<span class="hljs-string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可通过过滤字段检索数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>): queryset = Student.objects.<span class="hljs-built_in">all</span>() serializer_class = StudentSerializer filter_fields = [<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="5-排序"><a href="#5-排序" class="headerlink" title="5. 排序"></a>5. 排序</h3><blockquote><p>对于列表数据，REST framework 提供了<strong>OrderingFilter</strong>过滤器来帮助我们快速指明数据按照指定字段进行排序。</p></blockquote><p>使用方法：</p><p>在类视图中设置filter_backends，使用<code>rest_framework.filters.OrderingFilter</code>过滤器，REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。</p><p>前端可以传递的ordering参数的可选字段值需要在ordering_fields中指明。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    filter_backends = [OrderingFilter]<br>    ordering_fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>]<br><br><span class="hljs-comment"># 127.0.0.1:8000/books/?ordering=-age</span><br><span class="hljs-comment"># -id 表示针对id字段进行倒序排序</span><br><span class="hljs-comment"># id  表示针对id字段进行升序排序</span><br></code></pre></td></tr></table></figure><p>如果需要在过滤以后再次进行排序，则需要两者结合!</p><blockquote><p>全局配置下的过滤组件不能和排序组件一起使用，只支持局部配置的过滤组件和排序组件一起使用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> ListAPIView<br><span class="hljs-keyword">from</span> students.models <span class="hljs-keyword">import</span> Student<br><span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> StudentModelSerializer<br><span class="hljs-keyword">from</span> django_filters.rest_framework <span class="hljs-keyword">import</span> DjangoFilterBackend<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    filter_fields = [<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>]<br>    <span class="hljs-comment"># 因为局部配置会覆盖全局配置,所以需要重新把过滤组件核心类再次声明,</span><br>    <span class="hljs-comment"># 否则过滤功能会失效</span><br>    filter_backends = [OrderingFilter,DjangoFilterBackend]<br>    ordering_fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="6-分页"><a href="#6-分页" class="headerlink" title="6. 分页"></a>6. 分页</h3><blockquote><p>因为 django 默认提供的分页器主要使用于前后端不分离的业务场景，所以 REST framework 也提供了分页的支持。</p></blockquote><p>我们可以在配置文件中设置全局的分页方式，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:  <span class="hljs-string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,<br>    <span class="hljs-string">&#x27;PAGE_SIZE&#x27;</span>: <span class="hljs-number">100</span>  <span class="hljs-comment"># 每页数目</span><br>&#125;<br>``````<br><br>```python<br><span class="hljs-comment"># 如果在配置settings.py文件中， 设置了全局分页，那么在drf中凡是调用了ListModelMixin的list()，都会自动分页。如果项目中出现大量需要分页的数据，只有少数部分的分页，则可以在少部分的视图类中关闭分页功能。</span><br><span class="hljs-comment"># 另外，视图类在使用过分页以后，务必在编写queryset属性时，模型.objects后面调用结果。例如：</span><br><span class="hljs-comment"># Student.objects.all()</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    pagination_class = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>也可通过自定义 Pagination 类，来为视图添加不同分页行为。在视图中通过 <code>pagination_clas</code> 属性来指明。</p><p>可选分页器：</p><p>1） <strong>PageNumberPagination</strong></p><p>前端访问网址形式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET  http://127.0.0.1:8000/students/?page=4<br></code></pre></td></tr></table></figure><p>可以在子类中定义的属性：</p><ul><li>  page_size 每页数目</li><li>  page_query_param 前端发送的页数关键字名，默认为”page”</li><li>  page_size_query_param 前端发送的每页数目关键字名，默认为None</li><li>  max_page_size 前端最多能设置的每页数量</li></ul><p>分页器类，<code>paginations</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span>  rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination,LimitOffsetPagination<br><span class="hljs-comment"># PageNumberPagination，以页码作为分页条件</span><br><span class="hljs-comment"># page=1&amp;size=10      第1页</span><br><span class="hljs-comment"># page=2&amp;size=10      第2页</span><br><span class="hljs-comment"># ...</span><br><span class="hljs-comment"># LimitOffsetPagination，以数据库查询的limit和offset数值作为分页条件</span><br><span class="hljs-comment"># limit=10&amp;offset=0   第1页</span><br><span class="hljs-comment"># limit=10&amp;offset=10  第2页</span><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-comment"># PageNumberPagination</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentPageNumberPagination</span>(<span class="hljs-title class_ inherited__">PageNumberPagination</span>):<br>    page_query_param = <span class="hljs-string">&quot;page&quot;</span> <span class="hljs-comment"># 查询字符串中代表页码的变量名</span><br>    page_size_query_param = <span class="hljs-string">&quot;size&quot;</span> <span class="hljs-comment"># 查询字符串中代表每一页数据的变量名</span><br>    page_size = <span class="hljs-number">2</span> <span class="hljs-comment"># 每一页的数据量</span><br>    max_page_size = <span class="hljs-number">4</span> <span class="hljs-comment"># 允许客户端通过查询字符串调整的最大单页数据量</span><br></code></pre></td></tr></table></figure><p>视图，<code>views</code> ，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 取消当前视图类的分页效果</span><br>    <span class="hljs-comment"># pagination_class = None</span><br>    <span class="hljs-comment"># 局部分页</span><br>    pagination_class = StudentPageNumberPagination<br></code></pre></td></tr></table></figure><p>2）<strong>LimitOffsetPagination</strong></p><p>前端访问网址形式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET http://127.0.0.1/four/students/?limit=100&amp;offset=100<br></code></pre></td></tr></table></figure><p>可以在子类中定义的属性：</p><ul><li>  default_limit 默认限制，默认值与<code>PAGE_SIZE</code>设置一直</li><li>  limit_query_param limit参数名，默认’limit’</li><li>  offset_query_param offset参数名，默认’offset’</li><li>  max_limit 最大limit限制，默认None</li></ul><p>分页类，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span>  rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination,LimitOffsetPagination<br><span class="hljs-comment"># PageNumberPagination，以页码作为分页条件</span><br><span class="hljs-comment"># page=1&amp;size=10      第1页</span><br><span class="hljs-comment"># page=2&amp;size=10      第2页</span><br><span class="hljs-comment"># LimitOffsetPagination，以数据库查询的limit和offset数值作为分页条件</span><br><span class="hljs-comment"># limit=10&amp;offset=0   第1页</span><br><span class="hljs-comment"># limit=10&amp;offset=10  第2页</span><br><br><span class="hljs-comment"># LimitOffsetPagination</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentLimitOffsetPagination</span>(<span class="hljs-title class_ inherited__">LimitOffsetPagination</span>):<br>    limit_query_param = <span class="hljs-string">&quot;limit&quot;</span> <span class="hljs-comment"># 查询字符串中代表每一页数据的变量名</span><br>    offset_query_param = <span class="hljs-string">&quot;offset&quot;</span> <span class="hljs-comment"># 查询字符串中代表页码的变量名</span><br>    default_limit = <span class="hljs-number">2</span> <span class="hljs-comment"># 每一页的数据量</span><br>    max_limit = <span class="hljs-number">4</span> <span class="hljs-comment"># 允许客户端通过查询字符串调整的最大单页数据量</span><br></code></pre></td></tr></table></figure><p>视图，<code>views</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 取消当前视图类的分页效果</span><br>    <span class="hljs-comment"># pagination_class = None</span><br>    <span class="hljs-comment"># 局部分页</span><br>    pagination_class = StudentLimitOffsetPagination<br></code></pre></td></tr></table></figure><h3 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7. 异常处理"></a>7. 异常处理</h3><blockquote><p>REST framework 提供了异常处理，我们可以自定义异常处理函数。例如我们想在要创建一个自定义异常函数，</p><p>这个函数，我们保存到当前子应用opt中[注意，开发时，我们会找个独立的公共目录来保存这种公共的函数/工具/类库]。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_exception_handler</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-comment"># 先调用REST framework默认的异常处理方法获得标准错误响应对象</span><br>    response = exception_handler(exc, context)<br><br>    <span class="hljs-comment"># 在此处补充自定义的异常处理</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        response.data[<span class="hljs-string">&#x27;status_code&#x27;</span>] = response.status_code<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>在配置文件中声明自定义的异常处理，<code>settings</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;drfdemo.exceptions.custom_excetion_handle&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果未声明，会采用默认的方式，如下</p><p>rest_frame/settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.views.exception_handler&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><p>补充上处理关于数据库的异常，这里使用其他异常来举例：</p><p><code>主应用.exceptions</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义异常函数: 在drf本身提供的异常函数基础上，我们增加更多的异常处理就可以了。</span><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> DatabaseError<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_excetion_handle</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    自定义异常函数，必须要在配置文件中注册才能被drf使用</span><br><span class="hljs-string">    exc: 异常对象，本次发生的异常对象</span><br><span class="hljs-string">    context: 字典，本次发生异常时，python解析器提供的执行上下文</span><br><span class="hljs-string">    所谓的执行上下文[context]，就是程序执行到当前一行代码时，能提供给开发者调用的环境信息异常发生时，代码所在的路径，时间，视图，客户端http请求等等...]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 先让drf处理它能识别的异常</span><br>    response = exception_handler(exc, context)<br>    <span class="hljs-comment"># 在经过了drf的异常处理以后，还是返回None则表示有2种情况:</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 异常发生时的视图对象</span><br>        view = context[<span class="hljs-string">&#x27;view&#x27;</span>]<br>        <span class="hljs-comment"># 异常发生时的http请求</span><br>        request = context[<span class="hljs-string">&quot;request&quot;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc, DatabaseError):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]: %s&#x27;</span> % (view, exc))<br>            response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;服务器内部错误&#x27;</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc, TypeError):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0不能作为除数~&quot;</span>)<br>            <span class="hljs-built_in">print</span>(request)<br>            response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;0不能作为除数&#x27;</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>视图中，故意报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects  <span class="hljs-comment"># 去掉 .all()，就会报错。</span><br>    serializer_class = StudentModelSerializer<br>    pagination_class = StudentPageNumberPagination<br></code></pre></td></tr></table></figure><h4 id="REST-framework定义的异常"><a href="#REST-framework定义的异常" class="headerlink" title="REST framework定义的异常"></a>REST framework定义的异常</h4><blockquote><ul><li>  APIException 所有异常的父类</li><li>  ParseError 解析错误</li><li>  AuthenticationFailed 认证失败</li><li>  NotAuthenticated 尚未认证</li><li>  PermissionDenied 权限决绝</li><li>  NotFound 未找到</li><li>  MethodNotAllowed 请求方式不支持</li><li>  NotAcceptable 要获取的数据格式不支持</li><li>  Throttled 超过限流次数</li><li>  ValidationError 校验失败</li></ul></blockquote><p>也就是说，很多的没有在上面列出来的异常，就需要我们在自定义异常中自己处理了。</p><h3 id="8-自动生成接口文档"><a href="#8-自动生成接口文档" class="headerlink" title="8. 自动生成接口文档"></a>8. 自动生成接口文档</h3><blockquote><p>REST framework 可以自动帮助我们生成接口文档。</p><p>接口文档以网页的方式呈现。</p><p>自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p></blockquote><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install coreapi<br></code></pre></td></tr></table></figure><h4 id="2-设置接口文档访问路径"><a href="#2-设置接口文档访问路径" class="headerlink" title="2. 设置接口文档访问路径"></a>2. 设置接口文档访问路径</h4><p>在总路由中添加接口文档路径。</p><p>文档路由对应的视图配置为<code>rest_framework.documentation.include_docs_urls</code>，</p><p>参数<code>title</code>为接口文档网站的标题。总路由，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.documentation <span class="hljs-keyword">import</span> include_docs_urls<br><br>urlpatterns = [<br>    ...<br>    path(<span class="hljs-string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="hljs-string">&#x27;站点页面标题&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><p>在settings.py中配置接口文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 。。。 其他选项</span><br>    <span class="hljs-comment"># 接口文档</span><br>    <span class="hljs-string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.schemas.AutoSchema&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-文档描述说明的定义位置"><a href="#3-文档描述说明的定义位置" class="headerlink" title="3. 文档描述说明的定义位置"></a>3. 文档描述说明的定义位置</h4><p>1） 单一方法的视图，可直接使用类视图的文档字符串，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListView</span>(generics.ListAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    返回所有图书信息.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListCreateView</span>(generics.ListCreateAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    get:</span><br><span class="hljs-string">    返回所有图书信息.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    post:</span><br><span class="hljs-string">    新建图书.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>3）对于视图集ViewSet，仍在类视图的文档字符串中封开定义，但是应使用action名称区分，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    list:</span><br><span class="hljs-string">    返回图书列表数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    retrieve:</span><br><span class="hljs-string">    返回图书详情数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    latest:</span><br><span class="hljs-string">    返回最新的图书数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    read:</span><br><span class="hljs-string">    修改图书的阅读量</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-访问接口文档网页"><a href="#4-访问接口文档网页" class="headerlink" title="4. 访问接口文档网页"></a>4. 访问接口文档网页</h4><p>浏览器访问 127.0.0.1:8000/docs/，即可看到自动生成的接口文档。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230427154626.png" alt="image.png"></p><p>swagger 接口文档<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230427154712.png" alt="image.png"></p><p>两点说明：</p><p>1） 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read</p><p>2）参数的Description需要在模型类或序列化器类的字段中以help_text选项定义，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):<br>    ...<br>    age = models.IntegerField(default=<span class="hljs-number">0</span>, verbose_name=<span class="hljs-string">&#x27;年龄&#x27;</span>, help_text=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    ...<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentSerializer</span>(serializers.ModelSerializer):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = Student<br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br>        extra_kwargs = &#123;<br>            <span class="hljs-string">&#x27;age&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>,<br>                <span class="hljs-string">&#x27;help_text&#x27;</span>: <span class="hljs-string">&#x27;年龄&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote><p><font color="#ff0000">本文参考了以下文档和视频结合个人感悟记录，若有侵权无意冒犯，及时联系进行处理。如果有看不懂本文的，可以移步查看更加详细的教程文档或者观看相关视频，支持原创作者。 </font></p></blockquote><ol><li><a href="http://www.yuan316.com/post/DRF/">DRF | YUAN</a></li><li><a href="https://www.bilibili.com/video/BV1z5411D7BQ/?p=21&spm_id_from=pageDriver&vd_source=9c896fa9c3f9023797e8efe7be0c113e">21 DRF应用的认证组件_哔哩哔哩_bilibili</a></li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script><meting-js metin="meting" auto=" https://y.qq.com/n/ryqq/song/003kIhRR4Vr0cV.html" autoplay=" true" ></meting-js>]]></content>
    
    
    <summary type="html">it is some basic usage of drf .</summary>
    
    
    
    <category term="Front_end_development" scheme="https://alleyf.github.io/categories/Front-end-development/"/>
    
    
    <category term="Django" scheme="https://alleyf.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>初识 uni-app</title>
    <link href="https://alleyf.github.io/2023/04/5d72eb9cc9af.html"/>
    <id>https://alleyf.github.io/2023/04/5d72eb9cc9af.html</id>
    <published>2023-04-16T08:49:22.000Z</published>
    <updated>2023-04-20T16:23:25.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><blockquote><p>知识点：网络请求、模板语法、打开页面和页面传参。</p></blockquote><h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><blockquote><p>基础组件分为以下十几大类：</p></blockquote><h2 id="视图容器（View-Container）："><a href="#视图容器（View-Container）：" class="headerlink" title="视图容器（View Container）："></a>视图容器（View Container）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/view">view</a></p><p>视图容器，类似于HTML中的div</p><p><a href="https://uniapp.dcloud.net.cn/component/scroll-view">scroll-view</a></p><p>可滚动视图容器</p><p><a href="https://uniapp.dcloud.net.cn/component/swiper">swiper</a></p><p>滑块视图容器，比如用于轮播banner</p><p><a href="https://uniapp.dcloud.net.cn/component/match-media">match-media</a></p><p>屏幕动态适配组件，比如窄屏上不显示某些内容</p><p><a href="https://uniapp.dcloud.net.cn/component/movable-view#movable-area">movable-area</a></p><p>可拖动区域</p><p><a href="https://uniapp.dcloud.net.cn/component/movable-view#movable-view">movable-view</a></p><p>可移动的视图容器，在页面中可以拖拽滑动或双指缩放。movable-view必须在movable-area组件中</p><p><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-view">cover-view</a></p><p>可覆盖在原生组件的上的文本组件</p><p><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-image">cover-image</a></p><p>可覆盖在原生组件的上的图片组件</p></blockquote><h2 id="基础内容（Basic-Content）："><a href="#基础内容（Basic-Content）：" class="headerlink" title="基础内容（Basic Content）："></a>基础内容（Basic Content）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/icon">icon</a></p><p>图标</p><p><a href="https://uniapp.dcloud.net.cn/component/text">text</a></p><p>文字</p><p><a href="https://uniapp.dcloud.net.cn/component/rich-text">rich-text</a></p><p>富文本显示组件</p><p><a href="https://uniapp.dcloud.net.cn/component/progress">progress</a></p><p>进度条</p></blockquote><h2 id="表单组件（Form）："><a href="#表单组件（Form）：" class="headerlink" title="表单组件（Form）："></a>表单组件（Form）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/button">button</a></p><p>按钮</p><p><a href="https://uniapp.dcloud.net.cn/component/checkbox">checkbox</a></p><p>多项选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/editor">editor</a></p><p>富文本输入框</p><p><a href="https://uniapp.dcloud.net.cn/component/form">form</a></p><p>表单</p><p><a href="https://uniapp.dcloud.net.cn/component/input">input</a></p><p>输入框</p><p><a href="https://uniapp.dcloud.net.cn/component/label">label</a></p><p>标签</p><p><a href="https://uniapp.dcloud.net.cn/component/picker">picker</a></p><p>弹出式列表选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/picker-view">picker-view</a></p><p>窗体内嵌式列表选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/radio">radio</a></p><p>单项选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/slider">slider</a></p><p>滑动选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/switch">switch</a></p><p>开关选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/textarea">textarea</a></p><p>多行文本输入框</p></blockquote><h2 id="路由与页面跳转（Navigation）："><a href="#路由与页面跳转（Navigation）：" class="headerlink" title="路由与页面跳转（Navigation）："></a>路由与页面跳转（Navigation）：</h2><blockquote><p>[!NOTE] 组件<br><a href="https://uniapp.dcloud.net.cn/component/navigator">navigator</a></p><p>页面链接。类似于HTML中的a标签</p><h2 id="媒体组件（Media）："><a href="#媒体组件（Media）：" class="headerlink" title="媒体组件（Media）："></a>媒体组件（Media）：</h2><p><a href="https://uniapp.dcloud.net.cn/component/audio">audio</a></p><p>音频</p><p><a href="https://uniapp.dcloud.net.cn/component/camera">camera</a></p><p>相机</p><p><a href="https://uniapp.dcloud.net.cn/component/image">image</a></p><p>图片</p><p><a href="https://uniapp.dcloud.net.cn/component/video">video</a></p><p>视频</p><p><a href="https://uniapp.dcloud.net.cn/component/live-player">live-player</a></p><p>直播播放</p><p><a href="https://uniapp.dcloud.net.cn/component/live-pusher">live-pusher</a></p><p>实时音视频录制，也称直播推流</p></blockquote><h2 id="地图（Map）："><a href="#地图（Map）：" class="headerlink" title="地图（Map）："></a>地图（Map）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/map">map</a></p><p>地图</p></blockquote><h2 id="画布（Canvas）："><a href="#画布（Canvas）：" class="headerlink" title="画布（Canvas）："></a>画布（Canvas）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/canvas">canvas</a></p><p>画布</p></blockquote><h2 id="webview（Web-view）："><a href="#webview（Web-view）：" class="headerlink" title="webview（Web-view）："></a>webview（Web-view）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/web-view">web-view</a></p><p>web浏览器组件</p></blockquote><blockquote><h2 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h2><p><a href="https://uniapp.dcloud.net.cn/component/ad">ad</a></p><p>广告组件</p><p><a href="https://uniapp.dcloud.net.cn/component/ad-draw">ad-draw</a></p><p>沉浸视频流广告组件</p></blockquote><h2 id="页面属性配置"><a href="#页面属性配置" class="headerlink" title="页面属性配置"></a>页面属性配置</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/custom-tab-bar">custom-tab-bar</a></p><p>底部tabbar自定义组件</p><p><a href="https://uniapp.dcloud.net.cn/component/navigation-bar">navigation-bar</a></p><p>页面顶部导航</p><p><a href="https://uniapp.dcloud.net.cn/component/page-meta">page-meta</a></p><p>页面属性配置节点</p></blockquote><h2 id="uniCloud"><a href="#uniCloud" class="headerlink" title="uniCloud"></a>uniCloud</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/uniCloud/unicloud-db">unicloud-db组件</a></p><p>uniCloud数据库访问和操作组件</p></blockquote>]]></content>
    
    
    <summary type="html">it is some basic usage of uni-app .</summary>
    
    
    
    <category term="Front_end_development" scheme="https://alleyf.github.io/categories/Front-end-development/"/>
    
    
    <category term="uni-app" scheme="https://alleyf.github.io/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>初识Vue</title>
    <link href="https://alleyf.github.io/2023/04/3dbbbdf5122f.html"/>
    <id>https://alleyf.github.io/2023/04/3dbbbdf5122f.html</id>
    <published>2023-04-16T08:29:16.000Z</published>
    <updated>2023-09-27T14:36:46.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-生命周期函数"><a href="#1-生命周期函数" class="headerlink" title="1. 生命周期函数"></a>1. 生命周期函数</h1><table><thead><tr><th>生命周期钩子函数</th><th>实例处于阶段</th><th>描述</th><th>能否获取到 el (this.$el)</th><th>能否获取到 data (this. Xxx)</th><th>能否使用 methods 中的方法 (this. Xxx ())</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td><td>实例已初始化,但数据观测,watch/event 事件回调还未配置</td><td>获取不到</td><td>不能</td><td>不能</td></tr><tr><td>created</td><td>创建后</td><td>已完成如下配置,数据观测 (data observer),property 和方法的运算,watch/event 事件回调</td><td>获取不到</td><td>能</td><td>能</td></tr><tr><td>beforeMount</td><td>挂载前</td><td>dom 已初始化,但并未挂载和渲染</td><td>能</td><td>能</td><td>能</td></tr><tr><td>mounted</td><td>挂载后</td><td>dom 已完成挂载和渲染</td><td>能</td><td>能</td><td>能</td></tr><tr><td>beforeUpdate</td><td>更新前</td><td>数据已改变,但 dom 未更新</td><td>能</td><td>能</td><td>能</td></tr><tr><td>updated</td><td>更新后</td><td>dom 已更新</td><td>能</td><td>能</td><td>能</td></tr><tr><td>beforeDestroy</td><td>销毁前</td><td>实例销毁前,实例仍然可用</td><td>能</td><td>能</td><td>能</td></tr><tr><td>destroyed</td><td>销毁后</td><td>实例已销毁,所有指令被解绑,事件监听器被移除,子实例都被销毁</td><td>能</td><td>能</td><td>能</td></tr></tbody></table><h1 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h1><h2 id="声明式-API"><a href="#声明式-API" class="headerlink" title="声明式 API"></a>声明式 API</h2><blockquote><p>Vue 的核心功能是<em><strong>声明式渲染</strong></em>:通过扩展于标准 HTML 的模板语法,我们可以根据 JavaScript 的状态来描述 HTML 应该是什么样子的。当状态改变时,HTML 会自动更新。</p></blockquote><p>我们可以使用 <code>data</code> 组件选项来声明响应式状态,该选项应该是一个返回对象的函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>message</code> 属性可以在模板中使用。下面展示了我们如何使用双花括号法,根据 <code>message</code> 的值来渲染动态文本:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在双花括号中的内容并<strong>不只限于标识符或路径</strong>——我们可以使用任何<em><strong>有效的 JavaScript 表达式</strong></em>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="组合式-API"><a href="#组合式-API" class="headerlink" title="组合式 API"></a>组合式 API</h2><p>我们可以使用 Vue 的 <code>reactive()</code> API 来声明响应式状态。由 <code>reactive()</code> 创建的对象都是 JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>,其行为与普通对象一样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-property">count</span>) <span class="hljs-comment">// 0</span><br>counter.<span class="hljs-property">count</span>++<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br><code>reactive()</code> 只适用于对象 (包括数组和内置类型,如 <code>Map</code> 和 <code>Set</code>)。而另一个 API <code>ref()</code> 则可以接受任何值类型。<code>ref</code> 会返回一个包裹对象,并在 <code>.value</code> 属性下暴露内部值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> message = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message.<span class="hljs-property">value</span>) <span class="hljs-comment">// &quot;Hello World!&quot;</span><br>message.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;Changed&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>在组件的 <code>&lt;script setup&gt;</code> 块中声明的响应式状态,可以直接在模板中使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>count is: &#123;&#123; counter.count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用任何<em><strong>有效的 JavaScript 表达式</strong></em></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h1 id="3-基础语法"><a href="#3-基础语法" class="headerlink" title="3. 基础语法"></a>3. 基础语法</h1><h2 id="1-属性绑定"><a href="#1-属性绑定" class="headerlink" title="1. 属性绑定"></a>1. 属性绑定</h2><blockquote><p>双大括号只能进行文本插值,为了给 attribute 绑定一个动态值,需要使用 <code>v-bind</code> 指令, 可以缩写只用 <code>:</code> 表示属性绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态绑定多个属性"><a href="#动态绑定多个属性" class="headerlink" title="动态绑定多个属性"></a>动态绑定多个属性</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> objectOfAttrs = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;container&#x27;</span>,<br>  <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;wrapper&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过不带参数的 <code>v-bind</code>,你可以将它们绑定到单个元素上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;objectOfAttrs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;info:info,danger:danger&#125;&quot;</span>&gt;</span>我叫:&#123;&#123;name&#125;&#125;,年龄:&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">info</span>: <span class="hljs-literal">true</span>,  <br><span class="hljs-attr">danger</span>: <span class="hljs-literal">false</span>,  <br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[info,danger]&quot;</span>&gt;</span>我叫:&#123;&#123;name&#125;&#125;,年龄:&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">info</span>: <span class="hljs-string">&quot;c1&quot;</span>, <br><span class="hljs-attr">danger</span>: <span class="hljs-string">&quot;c2&quot;</span>,  <br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><blockquote><p>可以在绑定的表达式中使用一个组件暴露的方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;toTitleDate(date)&quot;</span>&gt;</span><br>  &#123;&#123; formatDate(date) &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-事件监听"><a href="#2-事件监听" class="headerlink" title="2. 事件监听"></a>2. 事件监听</h2><blockquote><p>使用 <code>v-on</code> 指令监听 DOM 事件,可以简写为 <code>@</code>,表示事件监听</p></blockquote><h3 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 更新组件状态</span><br>  count.<span class="hljs-property">value</span>++<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="带传参"><a href="#带传参" class="headerlink" title="带传参"></a>带传参</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">mouseover</span>=<span class="hljs-string">&quot;dosomething(&#x27;过来了&#x27;)&quot;</span> @<span class="hljs-attr">mouseout</span>=<span class="hljs-string">&quot;dosomething(&#x27;离开了&#x27;)&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;  <br><span class="hljs-attr">dosomething</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>)&#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-表单绑定"><a href="#3-表单绑定" class="headerlink" title="3. 表单绑定"></a>3. 表单绑定</h2><blockquote><p>同时使用 <code>v-bind</code> 和 <code>v-on</code> 来在表单的输入元素上创建双向绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;onInput&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onInput</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// v-on 处理函数会接收原生 DOM 事件</span><br>  <span class="hljs-comment">// 作为其参数。</span><br>  text.<span class="hljs-property">value</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>简化双向绑定,Vue 提供了一个 <code>v-model</code> 指令,它实际上是上述操作的语法糖</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips</p><ol><li><code>v-model</code> 会将被绑定的值与 <code>&lt;input&gt;</code> 的值自动同步</li><li><code>v-model</code> 不仅支持文本输入框,也支持诸如多选框、单选框、下拉框之类的输入类型</li></ol></blockquote><p><strong>完整 demo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>const text = ref(&#x27;&#x27;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;input v-model=&quot;text&quot; placeholder=&quot;Type here&quot;&gt;<br>  &lt;p&gt;&#123;&#123; text &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><blockquote><p>demo</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.2.47/vue.global.min.js&quot;&gt;&lt;/script&gt;--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">  </span><br><span class="language-css"><span class="hljs-selector-class">.info</span> &#123;  </span><br><span class="language-css"><span class="hljs-attribute">color</span>: aquamarine;  </span><br><span class="language-css">&#125;  </span><br><span class="language-css"><span class="hljs-selector-class">.danger</span> &#123;  </span><br><span class="language-css"><span class="hljs-attribute">color</span>: red;  </span><br><span class="language-css">&#125;  </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br>男:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>  <br>女:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br>篮球:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>  <br>足球:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>  <br>排球:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.city&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c3&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c4&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.field&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f1&quot;</span>&gt;</span>前端<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f2&quot;</span>&gt;</span>后端<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f3&quot;</span>&gt;</span>运维<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f4&quot;</span>&gt;</span>算法<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.other&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clickme&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript">info : &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;1&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">hobby</span>: [<span class="hljs-string">&quot;h1&quot;</span>],  </span><br><span class="language-javascript"><span class="hljs-attr">city</span>: <span class="hljs-string">&quot;c1&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">field</span>: [<span class="hljs-string">&quot;f1&quot;</span>],  </span><br><span class="language-javascript"><span class="hljs-attr">other</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">clickme</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>)  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="4-条件渲染"><a href="#4-条件渲染" class="headerlink" title="4. 条件渲染"></a>4. 条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><blockquote><p>使用 <code>v-if</code> 指令来==<strong>有条件地渲染元素</strong>==（不一定渲染）, 也可以使用 <code>v-else</code> 和 <code>v-else-if</code> 来表示其他的条件分支</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;<span class="hljs-title class_">Vue</span> is awesome!&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>Oh no 😢<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><blockquote><p>v-show 根据**==变量的真假==<strong>决定是否显示该标签（</strong><em>一定会渲染但不一定显示</em>**）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=false&quot;</span>&gt;</span>用户名登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=true&quot;</span>&gt;</span>手机号登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">issms</span>: <span class="hljs-literal">false</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-列表渲染"><a href="#5-列表渲染" class="headerlink" title="5. 列表渲染"></a>5. 列表渲染</h2><blockquote><p>使用 <code>v-for</code> 指令来渲染一个基于源数组的列表</p></blockquote><h3 id="无索引"><a href="#无索引" class="headerlink" title="无索引"></a>无索引</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;todo.id&quot;</span>&gt;</span><br>    &#123;&#123; todo.text &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><ol><li><code>todo</code> 是一个局部变量,表示当前正在迭代的数组元素。它只能在 <code>v-for</code> 所绑定的元素上或是其内部访问,就像函数的作用域一样.</li><li>key 属性将它（唯一标识主键）作为<a href="https://cn.vuejs.org/api/built-in-special-attributes.html#key">特殊的 <code>key</code> attribute</a> 绑定到每个 <code>&lt;li&gt;</code></li></ol></blockquote><blockquote><p>更新列表有两种方式:<br>    1. 在源数组上调用变更方法:<br>        <code>todos.value.push(newTodo)</code><br>      2. 使用新的数组替代原数组:<br>        <code>todos.value = todos.value.filter(/* ... */)</code> </p></blockquote><p>完整 demo（实现列表动态增删）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-comment">// 给每个 todo 对象一个唯一的 id</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> newTodo = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> todos = <span class="hljs-title function_">ref</span>([</span><br><span class="language-javascript">  &#123; <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Learn HTML&#x27;</span> &#125;,</span><br><span class="language-javascript">  &#123; <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span><br><span class="language-javascript">  &#123; <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Learn Vue&#x27;</span> &#125;</span><br><span class="language-javascript">])</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// ...</span></span><br><span class="language-javascript">  todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">id</span>:id++,<span class="hljs-attr">text</span>:newTodo.<span class="hljs-property">value</span>&#125;)</span><br><span class="language-javascript">  newTodo.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeTodo</span>(<span class="hljs-params">todo</span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// 方法1</span></span><br><span class="language-javascript">  todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">pop</span>(todo)</span><br><span class="language-javascript">  <span class="hljs-comment">// 方法2</span></span><br><span class="language-javascript">  todos.<span class="hljs-property">value</span> = todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t !== todo)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;addTodo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;newTodo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Add Todo<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;todo.id&quot;</span>&gt;</span><br>      &#123;&#123; todo.text &#125;&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeTodo(todo)&quot;</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="有索引"><a href="#有索引" class="headerlink" title="有索引"></a>有索引</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(todo,index) in todos&quot;</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&#123;&#123;index&#125;&#125;</span>&gt;</span><br>    &#123;&#123; todo &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="有键值"><a href="#有键值" class="headerlink" title="有键值"></a>有键值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key) in item&quot;</span>&gt;</span><br>    &#123;&#123; key &#125;&#125;:&#123;&#123;value&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-计算属性"><a href="#6-计算属性" class="headerlink" title="6. 计算属性"></a>6. 计算属性</h2><blockquote><ol><li><a href="https://cn.vuejs.org/guide/essentials/computed.html"><code>computed()</code></a>。它可以让我们创建一个计算属性 ref,这个 ref 会动态地根据其他响应式数据源来计算其 <code>.value</code></li><li>computed <code>(计算属性)</code> 可用于快速计算视图（View）中显示的属性。这些计算将被<strong>缓存</strong>,并且只在需要时更新。computed 设置的初衷是能够<strong>解决复杂的计算</strong>,而不是直接在模板字符串里进行运算。</li></ol></blockquote><p>实现显示（隐藏）已完成的 todos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, computed &#125; from &#x27;vue&#x27;<br>let id = 0<br>const newTodo = ref(&#x27;&#x27;)<br>const hideCompleted = ref(false)<br>const todos = ref([<br>  &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;,<br>  &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;,<br>  &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;<br>])<br>const filteredTodos = computed(() =&gt; &#123;<br>  return hideCompleted.value<br>    ? todos.value.filter((t) =&gt; !t.done)<br>    : todos.value<br>&#125;)<br>function addTodo() &#123;<br>  todos.value.push(&#123; id: id++, text: newTodo.value, done: false &#125;)<br>  newTodo.value = &#x27;&#x27;<br>&#125;<br>function removeTodo(todo) &#123;<br>  todos.value = todos.value.filter((t) =&gt; t !== todo)<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;<br>    &lt;input v-model=&quot;newTodo&quot;&gt;<br>    &lt;button&gt;Add Todo&lt;/button&gt;<br>  &lt;/form&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;todo in filteredTodos&quot; :key=&quot;todo.id&quot;&gt;<br>      &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt;<br>      &lt;span :class=&quot;&#123; done: todo.done &#125;&quot;&gt;&#123;&#123; todo.text &#125;&#125;&lt;/span&gt;<br>      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>  &lt;button @click=&quot;hideCompleted = !hideCompleted&quot;&gt;<br>    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br>&lt;style&gt;<br>.done &#123;<br>  text-decoration: line-through;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="7-文本插值"><a href="#7-文本插值" class="headerlink" title="7. 文本插值"></a>7. 文本插值</h2><blockquote><p>最基本的数据绑定形式是文本插值,它使用的是“Mustache”语法 (即双大括号)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>双大括号标签会被替换为<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#declaring-reactive-state">相应组件实例中</a> <code>msg</code> 属性的值。同时每次 <code>msg</code> 属性更改时它也会同步更新。</p></blockquote><h2 id="8-原始-HTML"><a href="#8-原始-HTML" class="headerlink" title="8. 原始 HTML"></a>8. 原始 HTML</h2><blockquote><p>双大括号会将数据解释为纯文本,而不是 HTML。若想插入 HTML,需要使用 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-html"><code>v-html</code> 指令</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="4-Demo-1-表格增删"><a href="#4-Demo-1-表格增删" class="headerlink" title="4. Demo 1 表格增删"></a>4. Demo 1 表格增删</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;adduser&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(user,uid) in users&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.pwd&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.name!=&#x27;&#x27; &amp;&amp; user.pwd!=&#x27;&#x27;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deluser(uid)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">users</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-string">&quot;&quot;</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">adduser</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">let</span> userinfo = &#123;<span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">pwd</span>&#125;;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">push</span>(userinfo);  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>=<span class="hljs-string">&quot;&quot;</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">pwd</span>=<span class="hljs-string">&quot;&quot;</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userinfo);  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">deluser</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">uid</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">splice</span>(uid,<span class="hljs-number">1</span>);  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-Demo-2-登录（axios）"><a href="#5-Demo-2-登录（axios）" class="headerlink" title="5. Demo 2 登录（axios）"></a>5. Demo 2 登录（axios）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=false&quot;</span>&gt;</span>用户名登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=true&quot;</span>&gt;</span>手机号登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sms.phone&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>验证码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;验证码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sms.code&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">issms</span>: <span class="hljs-literal">false</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">info</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">sms</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">code</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">login</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">let</span> dataobj = <span class="hljs-variable language_">this</span>.<span class="hljs-property">issms</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">sms</span> : <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>;  </span><br><span class="language-javascript"><span class="hljs-title function_">axios</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost/login&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">parameters</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: dataobj,  </span><br><span class="language-javascript"><span class="hljs-attr">headers</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);  </span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-组件"><a href="#6-组件" class="headerlink" title="6. 组件"></a>6. 组件</h1><blockquote><p>提高相同代码的复用率。</p></blockquote><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><blockquote><pre><code class="hljs">局部组件需要挂载到 Vue 根组件上,***components: &#123;  alias: component&#125;  </code></pre></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo4<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- 引入局部子组件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">  </span></span><br><span class="language-xml"><span class="language-handlebars">const login = &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">data: function () &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">msg: &quot;局部组件&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">username: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">pwd: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">template: `  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars">`,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;;  </span></span><br><span class="language-xml"><span class="language-handlebars">var app = new Vue(&#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">el: &quot;#app&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">data: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">components: &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">login: login,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)  </span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><blockquote><pre><code class="hljs">全局子组件不用挂载到 Vue 上,直接用***Vue. Component (&#39;component_name&#39;,&#123;&#125;）***</code></pre></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo5<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- 引入全局子组件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">  </span></span><br><span class="language-xml"><span class="language-handlebars">Vue.component(&#x27;login&#x27;, &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">data: function () &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">msg: &quot;局部组件&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">username: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">pwd: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">template: `  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars">`,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);  </span></span><br><span class="language-xml"><span class="language-handlebars">var app = new Vue(&#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">el: &quot;#app&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">data: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)  </span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="7-路由"><a href="#7-路由" class="headerlink" title="7. 路由"></a>7. 路由</h1><blockquote><p>引入 vue-router:<br><code> &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.1.6/vue-router.global.min.js&quot;&gt;&lt;/script&gt;</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@3.5.3/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/course&quot;</span>&gt;</span>课程<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;首页组件&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Course</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;课程组件&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">routes</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/course&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Course</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;);  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">components</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-title class_">Home</span>: <span class="hljs-title class_">Home</span>,  </span><br><span class="language-javascript"><span class="hljs-title class_">Course</span>: <span class="hljs-title class_">Course</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">router</span>: router  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="8-路由使用"><a href="#8-路由使用" class="headerlink" title="8. 路由使用"></a>8. 路由使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@3.5.3/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">imgls</span>: [],  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-title function_">axios</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://picsum.photos/v2/list&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">headers</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>  </span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span> = res.<span class="hljs-property">data</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span>, res.<span class="hljs-property">data</span>);  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-comment">// console.log(error);  </span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span>)  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div class=&quot;red&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div v-for=&quot;img in imgls&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;a :href=&quot;img.download_url&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;img :src=&quot;img.url&quot; style=&quot;align-content: center&quot; alt=&quot;加载图片失败&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/a&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">routes</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;);  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">components</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-title class_">Home</span>: <span class="hljs-title class_">Home</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">router</span>: router,  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="9-Element-UI-使用"><a href="#9-Element-UI-使用" class="headerlink" title="9. Element-UI 使用"></a>9. Element-UI 使用</h1><blockquote><p>Element 是国内饿了么公司提供的一套开源前端框架,简洁优雅,提供了 Vue、React、Angular 等多个版本。<br>文档地址: <a href="https://element-plus.org/zh-CN/#/zh-CN">一个 Vue 3 UI 框架 | Element Plus</a><br>安装: npm i element-ui<br>引入 Element:<br>main. js (vue 2):</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>:#app,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>);<br></code></pre></td></tr></table></figure><p>main. js (vue 3):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="第三方图标库"><a href="#第三方图标库" class="headerlink" title="第三方图标库"></a>第三方图标库</h2><p>由于 Element UI 提供的字体图符较少,一般会采用其他图表库,如著名的 Font<br>Awesome<br>Font Awesome 提供了 675 个可缩放的矢量图标,可以使用 cSS 所提供的所有特<br>性对它们进行更改,包括大小、颜色、阴影或者其他任何支持的效果。<br>文档地址: <a href="http://fontawesome.dashgame.com/">http://fontawesome.dashgame.com/</a><br>安装: <code>npm i font-awesome</code><br>使用: <code>import &#39;font-awesome/css/font-awesome.min.css&#39;</code></p><h1 id="10-Axios"><a href="#10-Axios" class="headerlink" title="10. Axios"></a>10. Axios</h1><h2 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h2><blockquote><p>Axios 是一个基于 promise 网络请求库,作用于 node. js 和浏览器中。<br>Axios 在浏览器端使用 XMLHttpRequests 发送网络请求,并能自动完成 JSON<br>数据的转换。<br>安装: npm install axios<br>地址: <a href="https://www.axios-http.cn/">https://www.axios-http.cn/</a></p></blockquote><ol><li>Get 请求:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//向给定ID的用户发起请求</span><br>axios.<span class="hljs-title function_">get</span>(/user?<span class="hljs-variable constant_">ID</span>=<span class="hljs-number">12345</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string"> .then(function(response)&#123;</span><br><span class="hljs-string">   //处理成功情况</span><br><span class="hljs-string">   console.log(response);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .catch(function (error)(</span><br><span class="hljs-string">   //处理错误情况</span><br><span class="hljs-string">   console.log(error);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function （）&#123; </span><br><span class="hljs-string">  //总是会执行</span><br><span class="hljs-string"> &#125;);</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">/／上述请求也可以按以下方式完成（可选）<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user&#x27;,&#123;</span><br><span class="hljs-string">   params:&#123;</span><br><span class="hljs-string">    ID:12345</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function (response)&#123;</span><br><span class="hljs-string">   console.log(response);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .catch(function (error)&#123;</span><br><span class="hljs-string">   console.log(error);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function ()&#123; </span><br><span class="hljs-string">  //总是会执行</span><br><span class="hljs-string"> &#125;);</span><br></code></pre></td></tr></table></figure><ol start="2"><li>POST 请求:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>   <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;Fred&#x27;</span>,<br>   <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;Flintstone&#x27;</span><br>&#125;)<br> .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;)<br> .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br> &#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>异步回调问题（async/await）:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//支持async/await用法</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span>) (<br> <span class="hljs-keyword">try</span> (<br>   <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user?ID=12345&#x27;</span>);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br> &#125; <span class="hljs-keyword">catch</span> (error)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br></code></pre></td></tr></table></figure><ol start="4"><li>其他请求方式:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//发起一个post请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br> <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br> <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/user/12345&#x27;,</span><br><span class="hljs-string"> data: &#123;</span><br><span class="hljs-string">   firstName: &quot;</span><span class="hljs-title class_">Fred</span><span class="hljs-string">&#x27;,</span><br><span class="hljs-string">   lastName:&quot;Flintstone&#x27;</span><br> &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><pre><code class="hljs">axios.get (url, configl)axios.delete (url[, config])axios.head (uri[, config))axios.options (url, config])axios.post (url, datal, configl)axios.put (url, datal, config]l)axios.patch (url, datal, config]l)</code></pre><h2 id="2-与-Vue-整合"><a href="#2-与-Vue-整合" class="headerlink" title="2. 与 Vue 整合"></a>2. 与 Vue 整合</h2><h2 id="3-跨域"><a href="#3-跨域" class="headerlink" title="3. 跨域"></a>3. 跨域</h2><blockquote><ol><li>为了保证浏览器的安全,不同源的客户端脚本在没有明确授权的情况下,不能读写对方资源,称为同源策略,同源策略是浏览器安全的基石</li><li>同源策略 （Sameoriginpolicy）是一种约定,它是浏览器最核心也最基本的安全功能</li><li>所谓同源 (即指在同一个域) 就是两个页面具有相同的协议（protocol）,主机 (host) 和端口号  (port)</li><li>当一个请求 url 的协议、域名、端口三者之间任意一个与当前页面 url 不同即为跨域,此时无法读取非同源网页的 Cookie,无法向非同源地址发送 AJAX 请求</li></ol></blockquote><p>解决方案:</p><ul><li>CORS（Cross-Origin Resource Sharing）是由 W 3 C 制定的一种跨域资源共享技术标准,其目的就是为了解决前端的跨域请求。</li><li>CORS 可以在不破坏即有规则的情况下,通过后端服务器实现 CORS 接口,从而实现跨域通信。</li><li>CORS 将请求分为两类:简单请求和非简单请求,分别对跨域通信提供了支持。</li></ul><h3 id="1-Spring-Boot-中配置-CORS"><a href="#1-Spring-Boot-中配置-CORS" class="headerlink" title="1. Spring Boot 中配置 CORS"></a>1. Spring Boot 中配置 CORS</h3><p>在传统的 Java EE 开发中,可以通过过滤器统一配置,而 Spring Boot 中对此则提供了更加简洁的解决方案<br><strong>方法 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> (<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> (<br>     registry.addMapping（<span class="hljs-string">&quot;/**&quot;</span>）<span class="hljs-comment">//允许跨域访问的路径</span><br>      .allowedorigins（<span class="hljs-string">&quot;*&quot;</span>）<span class="hljs-comment">//允许跨域访问的源</span><br>.allowedMethods(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;OPTIONS&quot;</span>,<span class="hljs-string">&quot;DELETE&quot;</span>）<span class="hljs-comment">//允许请求方法</span><br>      .maxAge（<span class="hljs-number">168000</span>）/／预检间隔时间<br>      .allowedHeaders（<span class="hljs-string">&quot;*&quot;</span>）<span class="hljs-comment">//允许头部设置</span><br>      .allowCredentials（<span class="hljs-literal">true</span>）；<span class="hljs-comment">//是否发送cookie</span><br></code></pre></td></tr></table></figure><p><strong>方法 2:</strong><br>给控制器类前加 CrossOrigin 注解使用默认跨域配置<br><font color="#ff0000">@CrossOrigin</font></p><h2 id="4-全局配置-Axios"><a href="#4-全局配置-Axios" class="headerlink" title="4. 全局配置 Axios"></a>4. 全局配置 Axios</h2><blockquote><p>在实际项目开发中,几乎每个组件中都会用到 axios 发起数据请求。此时会遇到如下两个问题:<br>每个组件中都需要导入 axios<br>每次发请求都需要填写完整的请求路径<br>可以通过全局配置的方式解决上述问题:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//配置请求根路径</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;http://api.com&#x27;</span><br><span class="hljs-comment">//将 axios 作为全局的自定义属性,每个组件可以在内部直接访问 (Vue3)</span><br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$http</span> = axios<br><span class="hljs-comment">//将 axios 作为全局的自定义属性,每个组件可以在内部直接访问 (Vue2)</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$http</span> = axios<br></code></pre></td></tr></table></figure><hr><h1 id="11-VueRouter"><a href="#11-VueRouter" class="headerlink" title="11. VueRouter"></a>11. VueRouter</h1><h2 id="1-安装与使用"><a href="#1-安装与使用" class="headerlink" title="1. 安装与使用"></a>1. 安装与使用</h2><blockquote><ul><li>Vue 路由 vue-router 是官方的路由插件,能够轻松的管理 SPA 项目中组件的切换。</li><li>Vue 的单页面应用是基于路由和组件的,路由用于设定访问路径,并将路径和组件映射起来</li><li>vue-router 目前有 3. x 的版本和 4. x 的版本,vue-router 3. x 只能结合 vue 2 进行使用,vue-router 4. x 只能结合 vue 3 进行使用</li><li>安装: **npm install vue-router@4 **</li></ul></blockquote><h3 id="创建路由组件"><a href="#创建路由组件" class="headerlink" title="创建路由组件"></a>创建路由组件</h3><p>在项目中定义 Discover. vue、Friends. vue、MyMusic. vue 三个组件,将来要使用 vue-router 来控制它们的展示与切换:<br>Discover. vue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发现音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Discover&quot;</span>  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure> <template>     <div>        <h1>发现音乐</h1>     </div> </template>Friends. vue :<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>关注<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Friends&quot;</span>  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure> <template>     <div>         <h1>关注</h1>     </div> </template>MyMusic. vue:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;MyMusic&quot;</span>  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>---### 声明路由链接和占位标签> 可以使用 `<router-link>` 标签来声明路由链接,并使用 `<router-view>` 标签来声明路由占位符。示例代码如下:<p>App. vue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>APP 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--声明路由链接--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover&quot;</span>&gt;</span>发现音乐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mymusic&quot;</span>&gt;</span>我的音乐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/friend&quot;</span>&gt;</span>关注<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-comment">&lt;!--声明路由占位标签--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="创建路由模块"><a href="#创建路由模块" class="headerlink" title="创建路由模块"></a>创建路由模块</h3><p>在项目中创建 index. js 路由模块,加入以下代码:<br>vue 2 路由的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Discover</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Discover. vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Friends</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Friends. vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyMusic</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/MyMusic. vue&#x27;</span><br><span class="hljs-comment">//将 VueRouter 设置为 Vue 的插件</span><br><span class="hljs-title class_">Vue</span>. use (<span class="hljs-title class_">VueRouter</span>)<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (&#123;<br>     <span class="hljs-regexp">/ /</span>指定 hash 属性与组件的对应关系<br>     <span class="hljs-attr">routes</span>: [<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/discover&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Discover</span> &#125;,<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/friends&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Friends</span> &#125;,<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mymusic&#x27;, component: MyMusic&#125;,</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">export default router</span><br></code></pre></td></tr></table></figure><p>vue 3 路由的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView. vue&#x27;</span>  <br><span class="hljs-keyword">const</span> router = createRouter (&#123;  <br><span class="hljs-attr">history</span>: createWebHistory (<span class="hljs-keyword">import</span>. meta. env. <span class="hljs-variable constant_">BASE_URL</span>),  <br><span class="hljs-attr">routes</span>: [  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,  <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span>  <br>&#125;,  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,  <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,  <br><span class="hljs-comment">// route level code-splitting  </span><br><span class="hljs-comment">// this generates a separate chunk (About.[hash]. js) for this route  </span><br><span class="hljs-comment">// which is lazy-loaded when the route is visited.  </span><br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span> (<span class="hljs-string">&#x27;../views/AboutView. vue&#x27;</span>)  <br>&#125;  <br>]  <br>&#125;)  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><hr><h3 id="挂载路由模块"><a href="#挂载路由模块" class="headerlink" title="挂载路由模块"></a>挂载路由模块</h3><p>在 main. js 中导入并挂载 router</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App. vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-title class_">Vue</span>. config. productionTip = <span class="hljs-literal">false</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span> (&#123;<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h (<span class="hljs-title class_">App</span>),<br>router<br>&#125;).<span class="hljs-property">$mount</span> (<span class="hljs-string">&#x27; #app &#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><blockquote><p>路由重定向指的是:用户在访问地址 A 的时候,强制用户跳转到地址 C,从而展示特定的组件页面。</p><p>通过路由规则的 redirect 属性,指定一个新的路由地址,可以很方便地设置路由的重定向:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (t<br>    / /指定 hash 属性与组件的对应关系<br>    <span class="hljs-attr">routes</span>: [<br>       <span class="hljs-comment">//当用户访问／时,跳转到/discover</span><br>      &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/, redirect: &#x27;</span>/discover<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">      &#123;path: &#x27;</span>/discover<span class="hljs-string">&#x27;, component: Discover&#125;,</span><br><span class="hljs-string">      &#123;path: &#x27;</span>/friends<span class="hljs-string">&#x27;, component: Friends&#125;,</span><br><span class="hljs-string">      &#123;path: &#x27;</span>/my<span class="hljs-string">&#x27;, component: MyMusic&#125;</span><br><span class="hljs-string">   ]</span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-子路由"><a href="#2-子路由" class="headerlink" title="2. 子路由"></a>2. 子路由</h2><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><blockquote><p>在 Discover. vue 组件中,声明 toplist 和 playlist 的子路由链接以及子路由占位符。示例代码如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发现音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-comment">&lt;!--子路由链接--&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover/toplist&quot;</span>&gt;</span>推荐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover/playlist&quot;</span>&gt;</span>歌单<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br>在 <code>src/router/index. js</code> 路由模块中,导入需要的组件,并使用 children 属性声明子路由规则:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (t<br>     / /指定 hash 属性与组件的对应关系<br>     <span class="hljs-attr">routes</span>:[<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&#x27;, redirect: &quot;</span>/discover<span class="hljs-string">&#x27;&#125;,</span><br><span class="hljs-string">       &#123;</span><br><span class="hljs-string">           path: &#x27;</span>/discover<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">           component: Discover,</span><br><span class="hljs-string">           //通过 chi 1 dren 属性,嵌套声明子路由</span><br><span class="hljs-string">           chiidren: [</span><br><span class="hljs-string">               &#123; path: &quot;toplist&quot;, component: TopList &#125;,</span><br><span class="hljs-string">               &#123; path: &quot;playlist&quot;, component: PlayList &#125;,</span><br><span class="hljs-string">          ]</span><br><span class="hljs-string">       &#125;,</span><br><span class="hljs-string">&#123; path: &#x27;</span>/friends<span class="hljs-string">&#x27;, component: Friends &#125;,</span><br><span class="hljs-string">&#123; path: &#x27;</span>/mymusic<span class="hljs-string">&#x27;, component: MyMusic &#125;,</span><br><span class="hljs-string">   1</span><br><span class="hljs-string">3)</span><br></code></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>思考:有如下 3 个路由链接:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;router-link to=<span class="hljs-string">&quot;/product/1&quot;</span>&gt;商品 <span class="hljs-number">1</span>&lt;/router-link&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/product/2&quot;</span>&gt;</span>商品 2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/product/3&quot;</span>&gt;</span>商品 3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br> <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (t<br>    / /指定 hash 属性与组件的对应关系<br>    <span class="hljs-attr">routes</span>: [<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/product/1&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>,<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/product/2&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>,<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/product/3&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>,<br>   ]<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>上述方式复用性非常差。<br>动态路由指的是:把 Hash 地址中可变的部分定义为参数项,从而提高路由规则的复用性。在 vue-router 中使用英文的冒号（:）来定义路由的参数项。示例代码如下:<br><code>&#123;path: &quot;/product/: id&#39;, component: Product&#125;</code><br>通过动态路由匹配的方式染出来的组件中,可以使用 <code>$route. params</code> 对象访问到动态匹配的参数值,比如在商品详情组件的内部,<strong>根据 id 值,请求不同的商品数据</strong>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Product 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    ！--获取动态的 id 值--&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>($route. params. id)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br> &lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> t</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//组件的名称</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Product&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>为了简化路由参数的获取形式,vue-router 允许在路由规则中开启 <strong>props</strong> 传参。示例代码如下: <code>&#123; path:/: id&#39;, component: Product, props: true&#125;</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Product 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>   &lt;!--获取动态的id值--&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123;id&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//组件的名称</span></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Product&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"> props : [<span class="hljs-string">&quot;id&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><table><thead><tr><th align="center">声明式</th><th align="center">编程式</th></tr></thead><tbody><tr><td align="center"><code>&lt;router-link :to=&quot;...&quot; &gt;</code></td><td align="center"><code>router. push (...)</code></td></tr></tbody></table><blockquote><ul><li><p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接,我们还可以借助 router 的实例方法,通过编写代码来实现。</p></li><li><p>想要导航到不同的 URL,则使用 <code>router. push</code> 方法。这个方法会向 history 栈添加一个新的记录,所以,当用户点击浏览器后退按钮时,则回到之前的 URL。</p></li><li><p>当你点击 <code>&lt;router-link&gt;</code> 时,这个方法会在内部调用,所以说,点击<a href="router-link:to=&quot;...&quot;">router-link:to=&quot;...&quot;</a>等同于调用 router. push（…）。</p></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;template&gt;<br>    <span class="language-xml">&lt;button@click=&quot;gotoProduct(2)&quot;&gt;跳转到商品 2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br> &lt;/template&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    methods : &#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-attr">gotoProduct</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>. push (<span class="hljs-string">&#x27;/production/$&#123;id&#125;&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="3-导航守卫"><a href="#3-导航守卫" class="headerlink" title="3. 导航守卫"></a>3. 导航守卫</h2><blockquote><p>导航守卫可以控制路由的访问权限。示意图如下:<br>全局导航守卫会拦截每个路由规则,从而对每个路由进行访问权限的控制。<br>你可以使用 <code>router. beforeEach</code> 注册一个全局前置守卫:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">router. beforeEach (<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span>&#123;<br>   <span class="hljs-keyword">if</span> (to. path ===<span class="hljs-string">&#x27;/main&#x27;</span> &amp;&amp; ! isAuthenticated) &#123;<br>      next (<span class="hljs-string">&#x27;/login&#x27;</span>)<br>   &#125;<br>   <span class="hljs-keyword">else</span> &#123;<br>      next ()<br>   &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>to:即将要进入的目标</li><li>from:当前导航正要离开的路由</li><li>在守卫方法中如果声明了 next 形参,则必须调用 next () 函数,否则不允许用户访问任何一个路由！<ol><li>直接放行:<code>next ()</code></li><li>强制其停留在当前页面:<code>next (false)</code></li><li>强制其跳转到登录页面:<code>next (&#39;/login&#39;)</code></li></ol></li></ul><h1 id="12-VueX"><a href="#12-VueX" class="headerlink" title="12 VueX"></a>12 VueX</h1><h2 id="1-VueX-介绍"><a href="#1-VueX-介绍" class="headerlink" title="1 VueX 介绍"></a>1 VueX 介绍</h2><blockquote><p>对于组件化开发来说,大型应用的状态往往跨越多个组件。在多层嵌套的父子<br>组件之间传递状态已经十分麻烦,而 Vue 更是没有为兄弟组件提供直接共享数<br>据的办法。</p><p>基于这个问题,许多框架提供了解决方案使用全局的状态管理器,将所有<br>分散的共享数据交由状态管理器保管,Vue 也不例外。</p><p>Vuex 是一个专为 Vuejs 应用程序开发的状态管理库,采用集中式存储管理应<br>用的所有组件的状态。</p><p>简单的说,Vuex 用于管理分散在 Vue 各个组件中的数据。</p><p>安装: <code>npm install vuex@next</code></p></blockquote><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><blockquote><p>每一个 Vuex 应用的核心都是一个 store,与普通的全局对象不同的是,基于 Vue 数据与视图绑定的特点,当 store 中的状态发生变化时,与之绑定的视图也会被重新渲染。</p></blockquote><blockquote><p>store 中的状态不允许被直接修改,改变 store 中的状态的唯一途径就是显式地提交 (commit）mutation,这可以让我们方便地跟踪每一个状态的变化。</p><p>在大型复杂应用中,如果无法有效地跟踪到状态的变化,将会对理解和维护代&gt; 码带来极大的困扰。</p><p>Vuex 中有 5 个重要的概念:<strong>State、Getter、Mutation、Action、Module</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307272110993.png" alt="image.png|400"></p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><blockquote><p>State 用于维护所有应用层的状态,并确保应用只有唯一的数据源</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//创建一个新的 store 实例</span><br><span class="hljs-keyword">const</span> store = createstore (&#123;<br>  state () &#123;<br>   <span class="hljs-keyword">return</span>  &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>   &#125;<br> &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>   increment (state) &#123;<br>    state.<span class="hljs-property">count</span>++<br>   &#125;<br> &#125;<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 <code>this.$store.state.count</code> 访问数据,也可以先用 <strong>mapState</strong> 辅助函数将其映射下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在单独构建的版本中辅助函数为 Vuex.mapstate</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br> <span class="hljs-comment">// ...</span><br> <span class="hljs-attr">computed</span>: mapState (&#123;<br>  <span class="hljs-comment">//箭头函数可使代码更简练</span><br>   <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span>,<br>  <span class="hljs-comment">//传字符串参数‘count&#x27;等同于‘state =&gt; state. count&#x27;</span><br>  <span class="hljs-attr">countAlias</span>: <span class="hljs-string">&#x27;count&#x27;</span>,<br>   <span class="hljs-comment">//为了能够使用‘this＇获取局部状态,必须使用常规函数</span><br>   countplusLocalState (state) &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">localcount</span><br>    &#125;<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><blockquote><p>Mutation 提供修改 State 状态的方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//创建一个新的 store 实例</span><br> <span class="hljs-keyword">const</span> store = createstore (&#123;<br>  state <span class="hljs-keyword">return</span> &#123; <br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class="hljs-property">count</span>++<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 store.commit 来提交 mutation</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>  increment () &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>也可以先用 mapMutation 辅助函数将其映射下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-attr">methods</span>: &#123;<br>   ...mapMutations ([<br>    <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-comment">//将‘this.increment ()&#x27;映射为‘this.$store.commit (&#x27;increment&#x27;）</span><br>    <span class="hljs-comment">//‘mapMutations＇也支持载荷:</span><br>    <span class="hljs-string">&#x27;incrementBy&#x27;</span><span class="hljs-comment">//将‘this.incrementBy(amount)’映射为‘this.$store.commit(&#x27;increment&#x27;, amount)</span><br>]),<br></code></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote><p>Action 类似 Mutation,不同在于:</p></blockquote><blockquote><p>Action 不能直接修改状态,只能通过提交 mutation 来修改,<strong>Action 可以包含异步操作</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = createstore (&#123;<br> <span class="hljs-attr">state</span>: &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>&#125;,<br> <span class="hljs-attr">mutations</span>: &#123;<br>  increment (state) &#123;<br>    state. count++<br>  &#125;<br>&#125;,<br> <span class="hljs-attr">actions</span>: &#123;<br>  increment (context) <br>    context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>&#125;<br>&#125;<br> &#125;)<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 <code>this.$store.dispatch (xxx&#39;)</code> 分发 action,或者使用 <code>mapActions</code> 辅助函数先将其映射下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br>methods : &#123;<br>  ...<span class="hljs-title function_">mapActions</span>([<br>   <span class="hljs-string">&#x27;increment&#x27;</span>,<span class="hljs-comment">//将‘this.increment ()映射为‘this.$store.dispatch (&#x27;increment&#x27;)</span><br>   <span class="hljs-comment">//mapActions＇也支持载荷:</span><br>   <span class="hljs-string">&#x27;incrementBy&#x27;</span><span class="hljs-comment">//将‘this.incrementBy (amount)’映射为&#x27;this.$store.dispatch (&#x27;incrementBy&#x27;,amount)&#x27;</span><br> ]),<br></code></pre></td></tr></table></figure><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><blockquote><p>Getter 维护由 State 派生的一些状态,这些状态随着 State 状态的变化而变化</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = createstore (&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">todos</span>:[<br>     &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>     &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br>   ]<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-attr">doneTodos</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">done</span>)<br>     &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 <code>this.$store.getters.doneTodos</code>,也可以先用 <code>mapGetters</code> 辅助函数将其映射下来,代码如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br> <span class="hljs-comment">// ...</span><br> <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">//使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...mapGetters ([<br>     <span class="hljs-string">&#x27;doneTodosCount&#x27;</span><br>     <span class="hljs-string">&quot;anotherGetter&#x27;,</span><br><span class="hljs-string">    // ...</span><br><span class="hljs-string">  ])</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="通过属性访问"><a href="#通过属性访问" class="headerlink" title="通过属性访问"></a>通过属性访问</h4><blockquote><p>Getter 会暴露为 <code>store.getters</code> 对象,你可以以属性的形式访问这些值:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodos</span> <span class="hljs-comment">// -&gt; [&#123; id: 1, text: &#x27;...&#x27;, done: true &#125;]</span><br></code></pre></td></tr></table></figure><blockquote><p>Getter 也可以接受其他 getter 作为第二个参数:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// ...</span><br>  doneTodosCount (state, getters) &#123;<br>    <span class="hljs-keyword">return</span> getters.<span class="hljs-property">doneTodos</span>.<span class="hljs-property">length</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosCount</span> <span class="hljs-comment">// -&gt; 1</span><br></code></pre></td></tr></table></figure><blockquote><p>我们可以很容易地在任何组件中使用它:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  doneTodosCount () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosCount</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意,getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p></blockquote><h4 id="通过方法访问"><a href="#通过方法访问" class="headerlink" title="通过方法访问"></a>通过方法访问</h4><blockquote><p>你也可以通过让 getter 返回一个函数,来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">getTodoById</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> === id)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-property">getters</span>.<span class="hljs-title function_">getTodoById</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意,getter 在通过方法访问时,每次都会去进行调用,而不会缓存结果。</p></blockquote><h4 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a><code>mapGetters</code> 辅助函数</h4><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...<span class="hljs-title function_">mapGetters</span>([<br>      <span class="hljs-string">&#x27;doneTodosCount&#x27;</span>,<br>      <span class="hljs-string">&#x27;anotherGetter&#x27;</span>,<br>      <span class="hljs-comment">// ...</span><br>    ])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果你想将一个 getter 属性另取一个名字,使用对象形式:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">...<span class="hljs-title function_">mapGetters</span>(&#123;<br>  <span class="hljs-comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span><br>  <span class="hljs-attr">doneCount</span>: <span class="hljs-string">&#x27;doneTodosCount&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><hr><h2 id="2-Vuex-安装与使用"><a href="#2-Vuex-安装与使用" class="headerlink" title="2 Vuex 安装与使用"></a>2 Vuex 安装与使用</h2><blockquote><p>当一个组件需要获取多个状态的时候,将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题,我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性,让你少按几次键:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-comment">// 箭头函数可使代码更简练</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span>,<br>    <span class="hljs-comment">// 传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span><br>    <span class="hljs-attr">countAlias</span>: <span class="hljs-string">&#x27;count&#x27;</span>,<br>    <span class="hljs-comment">// 为了能够使用 `this` 获取局部状态,必须使用常规函数</span><br>    countPlusLocalState (state) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">localCount</span><br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当映射的计算属性的名称与 state 的子节点名称相同时,我们也可以给 <code>mapState</code> 传一个字符串数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>([<br>  <span class="hljs-comment">// 映射 this.count 为 store.state.count</span><br>  <span class="hljs-string">&#x27;count&#x27;</span><br>])<br></code></pre></td></tr></table></figure><hr><p><strong>eg:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;murl&quot;</span>&gt;</span>音乐&#123;&#123; mid &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;nmurl&quot;</span>&gt;</span>音乐&#123;&#123; mid + 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;nextMusic&quot;</span>&gt;</span>下一首<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;mapState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;MyMusic&quot;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// computed: &#123;  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// getMid() &#123;  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// return this.$store.state.mid  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// &#125;  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// &#125;,  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>([  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-string">&#x27;mid&#x27;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml">]),  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">murl</span>: <span class="hljs-string">&quot;/mymusic/0&quot;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">nmurl</span>: <span class="hljs-string">&quot;/mymusic/1&quot;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;,  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">nextMusic</span>(<span class="hljs-params"></span>) &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">murl</span> = <span class="hljs-string">&quot;/mymusic/&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">mid</span>  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">nmurl</span> = <span class="hljs-string">&quot;/mymusic/&quot;</span> + (<span class="hljs-variable language_">this</span>.<span class="hljs-property">mid</span> + <span class="hljs-number">1</span>)  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">mid</span>)  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>getter—eg:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>  <br><span class="hljs-comment">// 创建一个新的 store 实例  </span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;  <br><span class="hljs-attr">state</span>: &#123;  <br><span class="hljs-attr">mid</span>: <span class="hljs-number">0</span>,  <br><span class="hljs-attr">todos</span>: [  <br>&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学习&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,  <br>&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;吃饭&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,  <br>&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;  <br>]  <br>&#125;,  <br><span class="hljs-attr">getters</span>: &#123;  <br><span class="hljs-title function_">doneTodos</span>(<span class="hljs-params">state</span>) &#123;  <br><span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">done</span>)  <br>&#125;,  <br><span class="hljs-title function_">doneTodosCount</span>(<span class="hljs-params">state, getters</span>) &#123;  <br><span class="hljs-keyword">return</span> getters.<span class="hljs-property">doneTodos</span>.<span class="hljs-property">length</span>  <br>&#125;,  <br><span class="hljs-attr">getTodoById</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;  <br><span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> === id)  <br>&#125;  <br>&#125;,  <br><span class="hljs-attr">mutations</span>: &#123;  <br><span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;  <br>state.<span class="hljs-property">mid</span>++  <br>&#125;  <br>&#125;  <br>&#125;)  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><h1 id="13-MockJS"><a href="#13-MockJS" class="headerlink" title="13 MockJS"></a>13 MockJS</h1><h2 id="MockJs-介绍"><a href="#MockJs-介绍" class="headerlink" title="MockJs 介绍"></a>MockJs 介绍</h2><blockquote><p>Mock.js 是一款前端开发中<strong>拦截 Ajax 请求再生成随机数据响应</strong>的工具,可以用来模拟服务器响应</p><p>优点是非常简单方便,无侵入性,基本覆盖常用的接口数据类型.</p><p>支持生成随机的==文本、数字、布尔值、日期、邮箱、链接、图片、颜色==等。<br>安装: <code>npm install mockjs</code></p></blockquote><h2 id="MockJs-使用"><a href="#MockJs-使用" class="headerlink" title="MockJs 使用"></a>MockJs 使用</h2><blockquote><p>在项目中创建 mock 目录,新建 index.js 文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入 mockjs</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span><br><span class="hljs-comment">//使用 mockjs 模拟数据</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (<span class="hljs-string">&#x27;/product/search&#x27;</span>, &#123;<br>    <span class="hljs-string">&quot;ret&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:<br>&#123;<br>       <span class="hljs-string">&quot;mtime&quot;</span>: <span class="hljs-string">&quot;@datetime&quot;</span>,<span class="hljs-comment">//随机生成日期时间</span><br>       <span class="hljs-string">&quot;score|1-800&quot;</span>: <span class="hljs-number">800</span>,<span class="hljs-comment">//随机生成1-800的数字</span><br>       <span class="hljs-string">&quot;rank|1-100&quot;</span>:  <span class="hljs-number">100</span>,<span class="hljs-comment">//随机生成1-100的数字</span><br>       <span class="hljs-string">&quot;stars|1-5&quot;</span>: <span class="hljs-number">5</span>,<span class="hljs-comment">//随机生成1-5的数字</span><br>       <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//随机生成中文名字</span><br>       <span class="hljs-comment">//生成图片</span><br><span class="hljs-string">&quot;img&quot;</span>:<span class="hljs-string">&quot;@image(&#x27;200x100&#x27;,&#x27;#ffcc33&#x27;, &#x27;#FFF&#x27;,&#x27;png&#x27;,&#x27;Fast Mock&#x27;)&quot;</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>在 main. js 中导入 mock 下的 index.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createApp&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>  <br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>  <br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./mock&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/main.css&#x27;</span>  <br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)  <br>app.<span class="hljs-title function_">use</span>(router)  <br>app.<span class="hljs-title function_">use</span>(store)  <br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>组件中调用 <strong>mock. js</strong> 中模拟的数据接口,这时返回的 response 就是 mock.js 中用==Mock.mock (‘url’, data)中设置的 data==</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/prduct/search&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>   &#125;)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><p><code>Mock.mock(rurl?, rtype?, template|function ( options ) )</code></p><blockquote><p> rurl,表示需要拦截的 URL,可以是 <strong>URL 字符串或 URL 正则</strong><br> rtype,表示需要拦截的 <strong>Ajax 请求类型</strong>。例如 GET、POST、PUT、DELETE 等。<br> template,表示数据模板,可以是<strong>对象或字符串</strong><br> function,表示用于<strong>生成响应数据的函数</strong>。</p></blockquote><blockquote><p>设置延时请求到数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//延时 400 ms 请求到数据</span><br> <span class="hljs-title class_">Mock</span>.<span class="hljs-property">setup</span> (&#123;<br>   <span class="hljs-attr">timeout</span>: <span class="hljs-number">400</span><br>&#125;)<br> <span class="hljs-comment">//延时 200-600 毫秒请求到数据</span><br> <span class="hljs-title class_">Mock</span>.<span class="hljs-property">setup</span> (&#123;<br>   <span class="hljs-attr">timeout</span>: <span class="hljs-string">&#x27;200-600&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="数据生成规则"><a href="#数据生成规则" class="headerlink" title="数据生成规则"></a>数据生成规则</h2><blockquote><ul><li>mock 的语法规范包含两层规范:数据模板 （DTD）、数据占位符 (DPD)</li><li>数据模板中的每个属性由 3 部分构成:**属性名 name、生成规则 rule、属性值<br>  value: ‘name|rule’: value</li></ul></blockquote><blockquote><p>属性名和生成规则之间用竖线<code>|</code>分隔,生成规则是可选的,有 7 种格式:</p></blockquote><p><font color="#ff0000">‘name|min-max’: value</font><br><font color="#ff0000">‘namelcount’: value</font><br><font color="#ff0000">‘name|min-max.dmin-dmax’: value</font><br><font color="#ff0000">‘name|min-max.dcount’: value</font><br><font color="#ff0000">‘name|count.dmin-dmax’: value</font><br><font color="#ff0000">‘name|count.dcount’: value</font><br><font color="#ff0000">‘name|+step’: value</font></p><h2 id="生成规则与示例"><a href="#生成规则与示例" class="headerlink" title="生成规则与示例"></a>生成规则与示例</h2><ol><li>属性值是字符串 String</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过重复 string 生成一个字符串,重复次数大于等于 min,小于等于 max。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: string<br><span class="hljs-comment">//通过重复 string 生成一个字符串,重复次数等于 count。</span><br><span class="hljs-string">&#x27;name|count&#x27;</span>: string<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>   <span class="hljs-string">&#x27;name 1|1-3&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,  <span class="hljs-comment">//重复生成 1 到 3 个 a（随机）</span><br>   <span class="hljs-string">&#x27;name 2|2&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>   / /生成 bb<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>属性值是数字 Number</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">/ /属性值自动加 <span class="hljs-number">1</span>,初始值为 number。<br><span class="hljs-string">&#x27;name|+1&#x27;</span>: number<br><span class="hljs-comment">//生成一个大于等于 min、小于等于 max 的整数,属性值 number 只是用来确定类型。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: number<br><span class="hljs-comment">//生成一个浮点数,整数部分大于等于 min、小于等于 max,小数部分保留 dmin 到 dmax 位。</span><br><span class="hljs-string">&#x27;name|min-max.dmin-dmax&#x27;</span>: number<br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>     <span class="hljs-string">&#x27;number1|1-100.1-10&#x27;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&#x27;number2|123.1-10&#x27;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&#x27;number3|123.3&#x27;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&#x27;number4|123.10&#x27;</span>: <span class="hljs-number">1</span> <span class="hljs-number">123</span><br>&#125;)<br><span class="hljs-comment">//结果:</span><br>&#123;<br>    <span class="hljs-string">&quot;number1&quot;</span>: <span class="hljs-number">12.92</span>,<br>    <span class="hljs-string">&quot;number2&quot;</span>: <span class="hljs-number">123.51</span>,<br>    <span class="hljs-string">&quot;number3&quot;</span>: <span class="hljs-number">123.777</span>,<br>    <span class="hljs-string">&quot;number4&quot;</span>:<span class="hljs-number">123.1231091814</span><br>&#125;<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>    <span class="hljs-string">&#x27;name1|+1&#x27;</span>:<span class="hljs-number">4</span>,   <span class="hljs-comment">//生成4,如果循环每次加1</span><br>    <span class="hljs-string">&#x27;name2|1-7&#x27;</span>:<span class="hljs-number">2</span>,   <span class="hljs-comment">//生成一个数字,1到7之间</span><br>    <span class="hljs-string">&#x27;name3|1-4.5-8&#x27;</span>:<span class="hljs-number">1</span> <span class="hljs-comment">////生成一个小数,整数部分1到4,小数部分5到8位,数字1只是为了确定类型</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>属性值是布尔型 Boolean</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//随机生成一个布尔值,值为 true 的概率是 1/2,值为 false 的概率同样是1/2。</span><br><span class="hljs-string">&#x27;namel1&#x27;</span>: bolean<br><span class="hljs-comment">//随机生成一个布尔值,值为 value 的概率是 min/（min+max),值为!value 的概率是 max／（min+max）。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: value<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>    <span class="hljs-string">&#x27;name|1&#x27;</span>: <span class="hljs-literal">true</span>,   <span class="hljs-comment">//生成一个布尔值,各一半</span><br>    <span class="hljs-string">&#x27;name1|1-3&#x27;</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">//1/4 是 true,3/4 是 false</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>属性值是对象 Object</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//从属性值 object 中随机选取 count 个属性。</span><br><span class="hljs-string">&#x27;name|count&#x27;</span>: object<br><span class="hljs-comment">//从属性值 object 中随机选取 min 到 max 个属性。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: object<br><span class="hljs-keyword">var</span> obj = &#123;<br>   <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>   <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>   <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>   <span class="hljs-attr">d</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>    <span class="hljs-string">&#x27;name|1-3&#x27;</span>: obj,  <span class="hljs-comment">//随机从 obj 中寻找 1 到 3 个属性,新对象</span><br>    <span class="hljs-string">&#x27;name|2&#x27;</span>: obj   <span class="hljs-comment">//随机从 onj 中找到两个属性,新对象</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li>属性值是数组 Array</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//从属性值 array 中随机选取 1 个元素,作为最终值。</span><br><span class="hljs-string">&#x27;name|1&#x27;</span>: array<br><span class="hljs-comment">//从属性值 array 中顺序选取 1 个元素,作为最终值。</span><br><span class="hljs-string">&#x27;name|+1&#x27;</span>: array<br><span class="hljs-comment">//通过重复属性值 array 生成一个新数组,重复次数大于等于 min,小于等于 max。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: array<br><span class="hljs-comment">//通过重复属性值 array 生成一个新数组,重复次数为 count。</span><br><span class="hljs-string">&#x27;name|count&#x27;</span>: array<br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>   <span class="hljs-comment">//通过重复属性值 array 生成一个新数组,重复次数为 1-3次。</span><br>   <span class="hljs-string">&quot;favorite_games|1-3&quot;</span>: [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">23</span>,<span class="hljs-number">28</span>,<span class="hljs-number">42</span>,<span class="hljs-number">45</span>],<br>&#125;); <br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>   <span class="hljs-string">&#x27;namel|1&#x27;</span>: arr,   <span class="hljs-comment">//从数组里随机取出 1 个值</span><br>   <span class="hljs-string">&#x27;name2|2&#x27;</span>: arr,   <span class="hljs-comment">//数组重复 count 次,这里 count 为2</span><br>   <span class="hljs-string">&#x27;name3|1-3&#x27;</span>: arr,  <span class="hljs-comment">//数组重复 1 到 3 次</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="6"><li>属性值是函数 Function</li></ol><p>执行函数 function,取其返回值作为最终的属性值,函数的上下文为属性’name’所在的对象。<br>‘name’: function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>)<br>   <span class="hljs-keyword">return</span> x+<span class="hljs-number">10</span>;<br><span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>   <span class="hljs-string">&#x27;name&#x27;</span>: fun (<span class="hljs-number">10</span>)   <span class="hljs-comment">//返回函数的返回值 20</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="7"><li>属性值是正则表达式 RegExp</li></ol><p>根据正则表达式 regexp 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。<br>‘name’: regexp</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>    <span class="hljs-string">&#x27;regexp 1&#x27;</span>: <span class="hljs-regexp">/[a-z][A-z][0-9]/</span>,<br>    <span class="hljs-string">&#x27;regexp 2&#x27;</span>: <span class="hljs-regexp">/\w\w\s|s\d\D/</span>,<br>    <span class="hljs-string">&#x27;regexp 3&#x27;</span>: <span class="hljs-regexp">/d[5,103/</span><br><span class="hljs-regexp">&#125;)</span><br><span class="hljs-regexp">// =&gt;</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">    &quot;regexp1&quot;: &quot;pJ7&quot;,</span><br><span class="hljs-regexp">    &quot;regexp2&quot;: &quot;F)\fp1G&quot;,</span><br><span class="hljs-regexp">    &quot;regexp3&quot;: &quot;561659409&quot;</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="数据占位符-DPD"><a href="#数据占位符-DPD" class="headerlink" title="数据占位符 DPD"></a>数据占位符 DPD</h2><p>占位符只是在属性值字符串中占个位置,并不出现在最终的属性值中。<br>占位符的格式为:</p><blockquote><p><strong>@占位符<br>@占位符 (参数［,参数])</strong></p></blockquote><p>关于占位符需要知道以下几点</p><ul><li>用<code>@</code>标识符标识后面的字符串是占位符</li><li>占位符引用的是 <code>Mock.Random</code> 中的方法。</li><li>可以通过 <code>Mock.Random.extend (）</code>来扩展自定义占位符。</li><li>占位符也<strong>可以引用数据模板中的属性</strong>。</li><li>占位符会<strong>优先引用数据模板中的属性</strong>。</li><li>占位符支持<strong>相对路径和绝对路径</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入mockjs</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span><br><span class="hljs-comment">//使用mockjs模拟数据</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;/api/msdk/proxy/query_common_credit&#x27;</span>, &#123;<br>   <span class="hljs-string">&quot;ret&quot;</span>:<span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;data&quot;</span>:<br>   &#123;<br>       <span class="hljs-string">&quot;mtime&quot;</span>:<span class="hljs-string">&quot;@datetime&quot;</span>,<span class="hljs-comment">//随机生成日期时间</span><br>       <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-string">&quot;@natural(1,800)&quot;</span>,<span class="hljs-comment">//随机生成1-800的数字</span><br>       <span class="hljs-string">&quot;rank&quot;</span>:<span class="hljs-string">&quot;@natural(1,100)&quot;</span>,<span class="hljs-comment">//随机生成1-100的数字</span><br>       <span class="hljs-string">&quot;stars&quot;</span>:<span class="hljs-string">&quot;@natural(0,5)&quot;</span>,<span class="hljs-comment">//随机生成1-5的数字</span><br>       <span class="hljs-string">&quot;nickname&quot;</span>:<span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//随机生成中文名字</span><br>&#125;) ;<br></code></pre></td></tr></table></figure><h3 id="基础随机内容的生成"><a href="#基础随机内容的生成" class="headerlink" title="基础随机内容的生成"></a>基础随机内容的生成</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;string|1-10&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-comment">//随机生成 1 到 10 个等号</span><br>  <span class="hljs-string">&quot;string2|3&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-comment">//随机生成 2 个或者三个等号</span><br>  <span class="hljs-string">&quot;number|+1&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-comment">//从 o 开始自增</span><br>  <span class="hljs-string">&quot;number 2|1-10.1-3&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-comment">//生成一个小数,小数点前面 1 到 10,小数点后 1 到 3 位</span><br>  <span class="hljs-string">&quot;boolean&quot;</span>:<span class="hljs-string">&quot;@boolean（1,2,true）&quot;</span>,<span class="hljs-comment">//生成 boolean 值三个参数,1 表示第三个参数 true 出现的概率,2 表示 false 出现的概率</span><br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//随机生成中文姓名</span><br>  <span class="hljs-string">&quot;firstname&quot;</span>:<span class="hljs-string">&quot;@cfirst&quot;</span>,<span class="hljs-comment">//随机生成中文姓</span><br>  <span class="hljs-string">&quot;int&quot;</span>:<span class="hljs-string">&quot;@integer(1,10)&quot;</span>,<span class="hljs-comment">//随机生成 1-10 的整数</span><br>  <span class="hljs-string">&quot;float&quot;</span>:<span class="hljs-string">&quot;@float (1,2,3,4)&quot;</span>,<span class="hljs-comment">//随机生成浮点数,四个参数分别为,整数部分的最大最小值和小数部分的最大最小值</span><br>  <span class="hljs-string">&quot;range&quot;</span>:<span class="hljs-string">&quot;@range(1,100,10)&quot;</span>,<span class="hljs-comment">//随机生成整数数组,三个参数为,最大最小值和加的步长</span><br>  <span class="hljs-string">&quot;natural&quot;</span>:<span class="hljs-string">&quot;@natural(60,100)&quot;</span>,<span class="hljs-comment">//随机生成自然数（大于零的数）</span><br>  <span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;@email&quot;</span>,<span class="hljs-comment">//邮箱</span><br>  <span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;@ip&quot;</span>,<span class="hljs-comment">// ip</span><br>  <span class="hljs-string">&quot;datatime&quot;</span>:<span class="hljs-string">&quot;@date（&#x27;yy-MM-ddhh:mm: ss&#x27;)&quot;</span><span class="hljs-comment">//随机生成指定格式的时间</span><br>  <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="列表数据"><a href="#列表数据" class="headerlink" title="列表数据"></a>列表数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>;<span class="hljs-string">&quot;0000&quot;</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pageNo&quot;</span>: <span class="hljs-string">&quot;@integer (1, 100)&quot;</span>,<br>    <span class="hljs-string">&quot;totalRecord&quot;</span>: <span class="hljs-string">&quot;@integer (100, 1000)&quot;</span>,<br>    <span class="hljs-string">&quot;pagesize&quot;</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-string">&quot;list|10&quot;</span>: [&#123;<br>      <span class="hljs-string">&quot;id|+1&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;@cword(10)&quot;</span>,<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;@cword(20)&quot;</span>,<br>      <span class="hljs-string">&quot;descript&quot;</span>: <span class="hljs-string">&quot;@csentence(20,50)&quot;</span>,<br>      <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-string">&quot;@float(10,100,10,100)&quot;</span>,<br>   &#125;]<br> &#125;,<br>  <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>mockjs 可以生成任意大小，任意颜色块，且用文字填充内容的图片，使我们不用到处找图片资源就能轻松实现图片的模拟展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;0000&quot;</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pageNo&quot;</span>: <span class="hljs-string">&quot;@integer(1, 100)&quot;</span>,<br>    <span class="hljs-string">&quot;totalRecord&quot;</span>: <span class="hljs-string">&quot;@integer(100, 1000)&quot;</span>,<br>    <span class="hljs-string">&quot;pagesize&quot;</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-string">&quot;list|10&quot;</span>: [&#123;<br>     <span class="hljs-comment">//参数从左到右依次为，图片尺寸，背景色，前景色（及文字颜色），图片格式，图片中间的填充文字内容</span><br>     <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;@image (&#x27;200 x 100&#x27;，&#x27;#ffcc33 &#x27;，&#x27;#FFF&#x27;，&#x27;png&#x27;，&#x27;Fast Mock&#x27;)&quot;</span><br>   &#125;]<br>  &#125;,<br>  <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;成功&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mock-Random"><a href="#Mock-Random" class="headerlink" title="Mock. Random"></a>Mock. Random</h3><blockquote><p>Mock. Random 是一个工具类，用于生成各种随机数据。</p><p>Mock. Random 的方法在数据模板中称为『占位符』，书写格式为@占位符 (参数[, 参数)。<br>用法示例:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Random</span> = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span><br><span class="hljs-title class_">Random</span>.<span class="hljs-title function_">email</span>()<br><span class="hljs-comment">// =&gt; &quot; n.clark@mi1ler.io &quot;</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;@email&#x27;</span>)<br><span class="hljs-comment">// =&gt; &quot; y.lee@lewis.org &quot;</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;@email&#x27;</span>&#125;)<br><span class="hljs-comment">// =&gt; &#123; email: &quot;v.lewis@hall.gov&quot; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>[!NOTE] tips<br>如果前端请求的后端接口需要携带参数，那么前端 mock 的 index. js 里的拦截请求的写法应该如下所示（用正则表达式进行匹配接口）：<br><code>Mock.mock(RegExp(&#39;/product/search.*&#39;),&#123;...&#125;)</code></p></blockquote><h1 id="14-企业级集成方案"><a href="#14-企业级集成方案" class="headerlink" title="14 企业级集成方案"></a>14 企业级集成方案</h1><h2 id="vue-element-admin-介绍"><a href="#vue-element-admin-介绍" class="headerlink" title="vue-element-admin 介绍"></a>vue-element-admin 介绍</h2><blockquote><ul><li>vue-element-admin 是一个后台前端解决方案，它基于 vue 和 element-ui 实现。</li><li>内置了 i 18 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件。</li><li>可以快速搭建企业级中后台产品原型。</li><li>地址: <a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">https://panjiachen.github.io/vue-element-admin-site/zh/guide/</a></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆项目</span><br>git clone https://github.com/PanJiaChen/vue-admin-template.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入项目目录</span><br>cd vue-admin-template<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>npm install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题</span><br>npm install --registry=https://registry.npm.taobao.org<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>npm run dev<br></code></pre></td></tr></table></figure><h1 id="15-JWT-跨域认证"><a href="#15-JWT-跨域认证" class="headerlink" title="15. JWT 跨域认证"></a>15. JWT 跨域认证</h1><h2 id="1-Session-认证"><a href="#1-Session-认证" class="headerlink" title="1. Session 认证"></a>1. Session 认证</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p><blockquote><ul><li>用户向服务器发送<strong>用户名和密码</strong>。</li><li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等。</li><li>服务器向用户返回一个 session_id，写入用户的 Cookie。</li><li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</li><li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</li></ul></blockquote><p>session 认证流程：<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311353929.png" alt="|350"><br>session 认证的方式应用非常普遍，但也存在一些问题，扩展性不好，如果是服务<br>器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能<br>够读取 session，针对此种问题一般有两种方案:</p><blockquote><ol><li><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。</p></li><li><p>一种方案是服务器不再保存 session 数据，所有数据都保存在客户端，每次请求都发回服务器。Token 认证就是这种方案的一个代表。</p></li></ol></blockquote><h2 id="2-Token-认证"><a href="#2-Token-认证" class="headerlink" title="2. Token 认证"></a>2. Token 认证</h2><p>Token 是在服务端产生的一串字符串, 是客户端访问资源接口（API) 时所需要的资<br>源凭证，流程如下：</p><blockquote><ul><li>客户端使用用户名跟密码请求登录，服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端</li><li>客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 token，如果验证成功，就向客户端返回请求的数据</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311410745.png" alt="image.png|350"></p><ul><li><p>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放<br>token 数据。</p></li><li><p>用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力<br>减少频繁的查询数据库</p></li><li><p>token 完全由应用管理，所以它可以避开同源策略</p></li></ul><hr><h2 id="3-JWT-的使用"><a href="#3-JWT-的使用" class="headerlink" title="3. JWT 的使用"></a>3. JWT 的使用</h2><blockquote><p>JSON Web Token（简称 JWT）是一个 token 的具体实现方式，是目前最流行<br>的跨域认证解决方案。<br>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，具体如下:</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;姓名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;角色&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;管理员&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;到期时间&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2018 年 7 月 1 日 0 点 0 分&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。<br>为了防止用户篡改数据，服务器在生成这个对象的时候，会加上<strong>签名</strong>。</p></blockquote><blockquote><p>JWT 的由三个部分组成，依次如下：<br>  <em><strong>Header (头部)<br>  Payload (负载)<br>  Signature  (签名)</strong></em><br>  三部分最终组合为完整的字符串，中间使用·分隔，如下：<br>  Header.Payload.Signature<br>           <code>eyJhbGci0iJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdwIi0iIxMjMoNTY30DkwIiwibmFtzsI6IkpvaG4 gRG91IiwiaXNTb2NpYWwiOnRydwV9. 4pcPyMD09o1PSyXnrXCjTwXyr4BsezdI1AVTmud2fU4</code></p></blockquote><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><blockquote><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;H256&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>alg 属性表示签名的算法（<strong>algorithm</strong>），默认是 HMAC SHA 256 (写成</li></ul><p><strong>HS256</strong>)</p><ul><li>typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT</li><li>最后，将上面的 JSON 对象使用 Base 64 URL 算法转成字符串。</li></ul><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><blockquote><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了 7 个官方字段，供选用。</p></blockquote><ul><li>iss (issuer)：签发人</li><li>exp (expiration time): 过期时间</li><li>sub (subject): 主题</li><li>aud (audience): 受众</li><li>nbf (Not Before): 生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (WT ID): 编号</li></ul><blockquote><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在个部分。<br>   这个 JSON 对象也要使用 <strong>Base 64 URL</strong> 算法转成字符串。</p></blockquote><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><blockquote><p> Signature 部分是对前两部分的签名，防止数据篡改。<br>    首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户; 然后，使用 Header 里面指定的签名算法 （默认是 HMAC SHA 256），按照下面的公式产生签名。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">HMACSHA <span class="hljs-number">256</span> (<br>base64UrlEncode (header) + <span class="hljs-string">&quot;.&quot;</span> +<br>base64UrlEncode (payload)<span class="hljs-punctuation">,</span><br>secret)<br></code></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（’.’）分隔，就可以返回给用户。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311433682.png" alt="image.png|450"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</li><li>客户端每次与服务器通信，都要带上这个 JWT，可以把它放在 Cookie 里面自动发送，但是这样不能跨域。</li><li>更好的做法是放在 HTTP 请求的头信息’Authorization’字段里面，单独发送。</li></ul><h3 id="请求认证"><a href="#请求认证" class="headerlink" title="请求认证"></a>请求认证</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202309262023932.png" alt="image.png|525"></p><h3 id="JWT验证拦截器"><a href="#JWT验证拦截器" class="headerlink" title="JWT验证拦截器"></a>JWT验证拦截器</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202309272236587.png" alt="image.png|250"></p><p>定义拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSON;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.utils.Result;  <br><span class="hljs-keyword">import</span> com.alleyf.common.JwtUtils;  <br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;  <br>  <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;  <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;  <br>  <br><span class="hljs-meta">@Component</span>  <br><span class="hljs-meta">@Slf4j</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtValidateInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> JwtUtils jwtUtils;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;X-Token&quot;</span>);  <br>        log.debug(request.getRequestURI() + <span class="hljs-string">&quot;待验证：&quot;</span> + token);  <br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                jwtUtils.getClaimsByToken(token);  <br>                log.debug(request.getRequestURI() + <span class="hljs-string">&quot; 验证通过&quot;</span>);  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>        &#125;  <br>        log.debug(request.getRequestURI() + <span class="hljs-string">&quot; 禁止访问&quot;</span>);  <br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);  <br>        response.getWriter().write(JSON.toJSONString(Result.error().message(<span class="hljs-string">&quot;jwt令牌无效，请重新登录&quot;</span>)));  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置使用拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.config.JwtValidateInterceptor;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> JwtValidateInterceptor jwtValidateInterceptor;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;  <br>        <span class="hljs-type">InterceptorRegistration</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> registry.addInterceptor(jwtValidateInterceptor);  <br>        registration.addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(  <br>                <span class="hljs-string">&quot;/user/login&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/register&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/logout&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/info&quot;</span>,  <br>                <span class="hljs-string">&quot;/error&quot;</span>  <br>        );  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h3><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="生成-Token"><a href="#生成-Token" class="headerlink" title="生成 Token"></a>生成 Token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//7 天过期</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800</span>;<br><span class="hljs-comment">//32 位秘钥</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;<br><br><span class="hljs-comment">//生成 token</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span>&#123;<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> (now.getTime() + <span class="hljs-number">1000</span> * expire);<br>   <span class="hljs-keyword">return</span> Jwts.builder ()<br>            .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>)<br>            .setSubject(username)<br>            .setIssuedAt(now)<br>            .setExpiration(expiration)<br>            .signWith(SignatureAlgorithm.HS512, secret)<br>            .compact();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解析-token"><a href="#解析-token" class="headerlink" title="解析 token"></a>解析 token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>    <span class="hljs-keyword">return</span> Jwts.parser()  <br>            .setSigningKey(secret)  <br>            .parseClaimsJws(token)  <br>            .getBody();  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后端完整部分"><a href="#后端完整部分" class="headerlink" title="后端完整部分"></a>后端完整部分</h4><p><code>UserController. java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 6 - 1 19:56 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.controller;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.entity.User;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.mapper.UserMapper;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.JwtUtils;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.Result;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@Api(tags = &quot;用户&quot;, value = &quot;用户&quot;)</span>  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@CrossOrigin</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    UserMapper userMapper;  <br><br>    <span class="hljs-meta">@ApiOperation(&quot;用户登录&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtils.generateToken(user.getUsername());  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;token&quot;</span>, token);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;获取用户信息&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/info&quot;)</span>  <span class="hljs-comment">//&quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">info</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> JwtUtils.getClaimsByToken(token).getSubject();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://img2.baidu.com/it/u=1325995315,4158780794&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;</span>;  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;name&quot;</span>, username).data(<span class="hljs-string">&quot;avatar&quot;</span>, url);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;注销&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span> <span class="hljs-comment">// &quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> Result.ok();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;查询所有用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryAll&quot;)</span>  <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryAllUser</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.queryAllUserAndTask();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.selectByName(username);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMPName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMPName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名路径查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPMPName/&#123;username&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByPMPName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照页码查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPage/&#123;page&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;  <br>        Page&lt;User&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>);  <br>        <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> userMapper.selectPage(page1, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-keyword">return</span> iPage;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;添加用户&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.insert(user) &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;添加成功&quot;</span> : <span class="hljs-string">&quot;添加失败&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Result.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 5 - 29 &#125;9:52 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;  <br>    <span class="hljs-keyword">private</span> Boolean success;  <br>    <span class="hljs-keyword">private</span> Integer code;  <br>    <span class="hljs-keyword">private</span> String message;  <br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Success);  <br>        r.setSuccess(<span class="hljs-literal">true</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;成功&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Error);  <br>        r.setSuccess(<span class="hljs-literal">false</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;失败&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setSuccess(success);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">message</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setMessage(message);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">code</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setCode(code);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(String key, Object value)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data.put(key, value);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setData(map);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getSuccess</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.success = success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.code = code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.message = message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> data;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Map&lt;String, Object&gt; data)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data = data;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>JwtUtils.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;  <br>  <br><span class="hljs-keyword">import</span> java.util.Date;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;  <br>    <span class="hljs-comment">//7 天过期  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800L</span>;  <br>    <span class="hljs-comment">//32 位秘钥  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;  <br>  <br>    <span class="hljs-comment">//生成 token  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span> &#123;  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(now.getTime() + <span class="hljs-number">1000</span> * expire);  <br>        <span class="hljs-keyword">return</span> Jwts.builder()  <br>                .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>)  <br>                .setSubject(username)  <br>                .setIssuedAt(now)  <br>                .setExpiration(expiration)  <br>                .signWith(SignatureAlgorithm.HS512, secret)  <br>                .compact();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-keyword">return</span> Jwts.parser()  <br>                .setSigningKey(secret)  <br>                .parseClaimsJws(token)  <br>                .getBody();  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">it is some basic usage of vue.</summary>
    
    
    
    <category term="Front_end_development" scheme="https://alleyf.github.io/categories/Front-end-development/"/>
    
    
    <category term="vue" scheme="https://alleyf.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>图像分类</title>
    <link href="https://alleyf.github.io/2023/03/73453d2eb27d.html"/>
    <id>https://alleyf.github.io/2023/03/73453d2eb27d.html</id>
    <published>2023-03-17T11:11:25.000Z</published>
    <updated>2023-04-14T05:10:39.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><blockquote><ul><li><p>LeNet：Yan LeCun 等人于 1998 年第一次将卷积神经网络应用到图像分类任务上[1]，在手写数字识别任务上取得了巨大成功。</p></li><li><p>AlexNet：Alex Krizhevsky 等人在 2012 年提出了 AlexNet[2], 并应用在大尺寸图片数据集 ImageNet 上，获得了 2012 年 ImageNet 比赛冠军(ImageNet Large Scale Visual Recognition Challenge，ILSVRC）。</p></li><li><p>VGG：Simonyan 和 Zisserman 于 2014 年提出了 VGG 网络结构[3]，是当前最流行的卷积神经网络之一，由于其结构简单、应用性极强而深受广大研究者欢迎。</p></li><li><p>GoogLeNet：Christian Szegedy 等人在 2014 提出了 GoogLeNet[4]，并取得了 2014 年 ImageNet 比赛冠军。</p></li><li><p>ResNet：Kaiming He 等人在 2015 年提出了 ResNet[5]，通过引入残差模块加深网络层数，在 ImagNet 数据集上的错误率降低到 3.6%，超越了人眼识别水平。ResNet 的设计思想深刻地影响了后来的深度神经网络的设计。</p></li></ul></blockquote><h2 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h2><center><img src="https://ai-studio-static-online.cdn.bcebos.com/82e4124e2e6a4231bcde17e086bc86ba732d3e81dcd7415f86fb4ef050aa7772" width = "800"></center><center><br>图1：LeNet模型网络结构示意图</center><p><strong>【提示】：</strong></p><blockquote><p>[!NOTE] Tips<br>卷积层的输出特征图如何当作全连接层的输入使用呢？</p><p>卷积层的输出数据格式是 $[N, C, H, W]$，在输入全连接层的时候，会自动将数据拉平，</p><p>也就是对每个样本，自动将其转化为长度为 $K$ 的向量，</p><p>其中 $K = C \times H \times W$，一个 mini-batch 的数据维度变成了 $N\times K$ 的二维向量。</p></blockquote><hr><h3 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><h4 id="定义网络结构"><a href="#定义网络结构" class="headerlink" title="定义网络结构"></a>定义网络结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入需要的包</span><br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> Conv2D, MaxPool2D, Linear<br><br><br><br><span class="hljs-comment">## 组网</span><br><br><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><br><br><br><span class="hljs-comment"># 定义 LeNet 网络结构</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LeNet</span>(paddle.nn.Layer):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_classes=<span class="hljs-number">1</span></span>):<br><br>        <span class="hljs-built_in">super</span>(LeNet, self).__init__()<br><br>        <span class="hljs-comment"># 创建卷积和池化层</span><br>        <span class="hljs-comment"># 创建第1个卷积层</span><br><br>        self.conv1 = Conv2D(in_channels=<span class="hljs-number">1</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">5</span>)<br><br>        self.max_pool1 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：池化层未改变通道数；当前通道数为6</span><br>        <span class="hljs-comment"># 创建第2个卷积层</span><br><br>        self.conv2 = Conv2D(in_channels=<span class="hljs-number">6</span>, out_channels=<span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">5</span>)<br><br>        self.max_pool2 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 创建第3个卷积层</span><br><br>        self.conv3 = Conv2D(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">120</span>, kernel_size=<span class="hljs-number">4</span>)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span><br>        <span class="hljs-comment"># 输入size是[28,28]，经过三次卷积和两次池化之后，C*H*W等于120</span><br><br>        self.fc1 = Linear(in_features=<span class="hljs-number">120</span>, out_features=<span class="hljs-number">64</span>)<br><br>        <span class="hljs-comment"># 创建全连接层，第一个全连接层的输出神经元个数为64， 第二个全连接层输出神经元个数为分类标签的类别数</span><br><br>        self.fc2 = Linear(in_features=<span class="hljs-number">64</span>, out_features=num_classes)<br><br>    <span class="hljs-comment"># 网络的前向计算过程</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br><br>        x = self.conv1(x)<br><br>        <span class="hljs-comment"># 每个卷积层使用Sigmoid激活函数，后面跟着一个2x2的池化</span><br><br>        x = F.sigmoid(x)<br><br>        x = self.max_pool1(x)<br><br>        x = F.sigmoid(x)<br><br>        x = self.conv2(x)<br><br>        x = self.max_pool2(x)<br><br>        x = self.conv3(x)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span><br><br>        x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br><br>        x = self.fc1(x)<br><br>        x = F.sigmoid(x)<br><br>        x = self.fc2(x)<br><br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h4 id="查看网络各层形状"><a href="#查看网络各层形状" class="headerlink" title="查看网络各层形状"></a>查看网络各层形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入数据形状是 [N, 1, H, W]</span><br><br><span class="hljs-comment"># 这里用np.random创建一个随机数组作为输入数据</span><br><br>x = np.random.randn(*[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>])<br><br>x = x.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><br>  <br><br><span class="hljs-comment"># 创建LeNet类的实例，指定模型名称和分类的类别数目</span><br><br>model = LeNet(num_classes=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 通过调用LeNet从基类继承的sublayers()函数，</span><br><br><span class="hljs-comment"># 查看LeNet中所包含的子层</span><br><br><span class="hljs-built_in">print</span>(model.sublayers())<br><br>x = paddle.to_tensor(x)<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> model.sublayers():<br><br>    <span class="hljs-comment"># item是LeNet类中的一个子层</span><br><br>    <span class="hljs-comment"># 查看经过子层之后的输出数据形状</span><br><br>    <span class="hljs-keyword">try</span>:<br><br>        x = item(x)<br><br>    <span class="hljs-keyword">except</span>:<br><br>        x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br><br>        x = item(x)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item.parameters())==<span class="hljs-number">2</span>:<br><br>        <span class="hljs-comment"># 查看卷积和全连接层的数据和参数的形状，</span><br><br>        <span class="hljs-comment"># 其中item.parameters()[0]是权重参数w，item.parameters()[1]是偏置参数b</span><br><br>        <span class="hljs-built_in">print</span>(item.full_name(), x.shape, item.parameters()[<span class="hljs-number">0</span>].shape, item.parameters()[<span class="hljs-number">1</span>].shape)<br><br>    <span class="hljs-keyword">else</span>:<br><br>        <span class="hljs-comment"># 池化层没有参数</span><br><br>        <span class="hljs-built_in">print</span>(item.full_name(), x.shape)<br></code></pre></td></tr></table></figure><h4 id="数据读取模型训练"><a href="#数据读取模型训练" class="headerlink" title="数据读取模型训练"></a>数据读取模型训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># LeNet 识别手写数字</span><br><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">from</span> paddle.vision.transforms <span class="hljs-keyword">import</span> ToTensor<br><br><span class="hljs-keyword">from</span> paddle.vision.datasets <span class="hljs-keyword">import</span> MNIST<br><br>  <br><br><span class="hljs-comment"># 定义训练过程</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model, opt, train_loader, valid_loader</span>):<br><br>    <span class="hljs-comment"># 开启0号GPU训练</span><br><br>    use_gpu = <span class="hljs-literal">True</span><br><br>    paddle.device.set_device(<span class="hljs-string">&#x27;gpu:0&#x27;</span>) <span class="hljs-keyword">if</span> use_gpu <span class="hljs-keyword">else</span> paddle.device.set_device(<span class="hljs-string">&#x27;cpu&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start training ... &#x27;</span>)<br><br>    model.train()<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br><br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br><br>            img = data[<span class="hljs-number">0</span>]<br><br>            label = data[<span class="hljs-number">1</span>] <br><br>            <span class="hljs-comment"># 计算模型输出</span><br><br>            logits = model(img)<br><br>            <span class="hljs-comment"># 计算损失函数</span><br><br>            loss_func = paddle.nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br>            loss = loss_func(logits, label)<br><br>            avg_loss = paddle.mean(loss)<br><br>  <br><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">2000</span> == <span class="hljs-number">0</span>:<br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch_id: &#123;&#125;, loss is: &#123;:.4f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch, batch_id, <span class="hljs-built_in">float</span>(avg_loss.numpy())))<br><br>            avg_loss.backward()<br><br>            opt.step()<br><br>            opt.clear_grad()<br><br>  <br><br>        model.<span class="hljs-built_in">eval</span>()<br><br>        accuracies = []<br><br>        losses = []<br><br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(valid_loader()):<br><br>            img = data[<span class="hljs-number">0</span>]<br><br>            label = data[<span class="hljs-number">1</span>] <br><br>            <span class="hljs-comment"># 计算模型输出</span><br><br>            logits = model(img)<br><br>            pred = F.softmax(logits)<br><br>            <span class="hljs-comment"># 计算损失函数</span><br><br>            loss_func = paddle.nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br>            loss = loss_func(logits, label)<br><br>            acc = paddle.metric.accuracy(pred, label)<br><br>            accuracies.append(acc.numpy())<br><br>            losses.append(loss.numpy())<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[validation] accuracy/loss: &#123;:.4f&#125;/&#123;:.4f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(np.mean(accuracies), np.mean(losses)))<br><br>        model.train()<br><br>  <br><br>    <span class="hljs-comment"># 保存模型参数</span><br><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;mnist.pdparams&#x27;</span>)<br><br>  <br>  <br><br><span class="hljs-comment"># 创建模型</span><br><br>model = LeNet(num_classes=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 设置迭代轮数</span><br><br>EPOCH_NUM = <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 设置优化器为Momentum，学习率为0.001</span><br><br>opt = paddle.optimizer.Momentum(learning_rate=<span class="hljs-number">0.001</span>, momentum=<span class="hljs-number">0.9</span>, parameters=model.parameters())<br><br><span class="hljs-comment"># 定义数据读取器</span><br><br>train_loader = paddle.io.DataLoader(MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>, transform=ToTensor()), batch_size=<span class="hljs-number">10</span>, shuffle=<span class="hljs-literal">True</span>)<br><br>valid_loader = paddle.io.DataLoader(MNIST(mode=<span class="hljs-string">&#x27;test&#x27;</span>, transform=ToTensor()), batch_size=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 启动训练过程</span><br><br>train(model, opt, train_loader, valid_loader)<br><br></code></pre></td></tr></table></figure><hr><h1 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h1><blockquote><p>解决网络层数加深后模型效果没有提升。</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="残差块"><a href="#残差块" class="headerlink" title="残差块"></a>残差块</h3><p>实现方式：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230409204947.png" alt="image.png|250"></p><blockquote><p>一般残差块输出通道数为输入通道数的==四倍==。</p></blockquote><h3 id="ResNet-50"><a href="#ResNet-50" class="headerlink" title="ResNet-50"></a>ResNet-50</h3><blockquote><p> depth = <em><strong>[3,4,6,3]</strong></em><br> 表示 c2 有 3 个残差块，c 3 有 4 个，c 4 有 6 个，c 5 有 3 个。<br> <img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230409212006.png" alt="image.png|525"></p></blockquote><h3 id="飞浆高层-API"><a href="#飞浆高层-API" class="headerlink" title="飞浆高层 API:"></a>飞浆高层 API:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#从paddle.vis ion.models模块中import残差网络，VGG网络，LeNet网络</span><br><span class="hljs-keyword">from</span> paddle.vision.models <span class="hljs-keyword">import</span> resnet50, v9g16, LeNet<br><span class="hljs-keyword">from</span> paddle.vision.datasets <span class="hljs-keyword">import</span> Cifar10 <br><span class="hljs-keyword">from</span> paddle.optimizer <span class="hljs-keyword">import</span> Momentum<br><span class="hljs-keyword">from</span> paddle.regularizer <span class="hljs-keyword">import</span> L2Decay<br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> CrossEnt ropyLoss<br><span class="hljs-keyword">from</span> paddle.metric <span class="hljs-keyword">import</span> Accuracy<br><span class="hljs-keyword">from</span> paddle.vision. transforms <span class="hljs-keyword">import</span> Transpose<br><span class="hljs-comment">#确保从paddle.vis ion.datasets. Cifar10中加载的图像数据是np. ndarray类型</span><br>paddle.vision.set_image_backend( <span class="hljs-string">&#x27;cv2&#x27;</span> )<br><span class="hljs-comment">#调用resnet50模型</span><br>model = padd le .Model( resnet50(pretrained=<span class="hljs-literal">False</span>, num_classes=<span class="hljs-number">10</span>&#125; )<br><span class="hljs-comment">#使用Cifar10数据集</span><br>train_dataset = Cifar10(mode=<span class="hljs-string">&#x27;train&#x27;</span>, transform= =Transpose() )<br>val_dataset = Cifar10 (mode=<span class="hljs-string">&#x27;test&#x27;</span>, transform=Transpose())<br><span class="hljs-comment">#定义优化器</span><br>optimizer = Momentum( learning_rate=<span class="hljs-number">0.01</span>, momentum=<span class="hljs-number">0.9</span>,<br>weight_decay = L2Decay(<span class="hljs-number">1e-4</span>),<br>parameters = model. parameters())<br><span class="hljs-comment">#进行训练前准备</span><br>model.prepare(optimizer, CrossEntropyLoss(), Accuracy(topk=(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)))<br><span class="hljs-comment">#启动训练</span><br>model.fit(train_dataset ,<br>val_dataset ,<br>epochs=<span class="hljs-number">50</span>,<br>batch_size=<span class="hljs-number">64</span>,<br>save_dir=*<span class="hljs-string">&quot;./output&quot;</span>,<br>num_workers=<span class="hljs-number">8</span> )<br> <br></code></pre></td></tr></table></figure><hr><h2 id="图像分类-ResNet-实战：眼疾识别分类"><a href="#图像分类-ResNet-实战：眼疾识别分类" class="headerlink" title="图像分类 ResNet 实战：眼疾识别分类"></a>图像分类 ResNet 实战：眼疾识别分类</h2><h3 id="CV-任务研发流程"><a href="#CV-任务研发流程" class="headerlink" title="CV 任务研发流程"></a>CV 任务研发流程</h3><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230411205932.png" alt="image.png|425"></p><blockquote><p>[!NOTE] Tips<br>其中，基本的计算机视觉任务研发全流程包含模型训练、模型预测和模型部署三大步骤。每个步骤又包含单独的流程：</p><ul><li>数据准备：根据网络接收的数据格式，完成相应的预处理和跑批量数据读取器操作，保证模型正常读取；</li><li>模型构建：设计卷积网络结构；</li><li>特征提取：使用构建的模型提取数据的特征信息；</li><li>损失函数：通过损失函数衡量模型的预测值和真实值的不一致程度，通常损失函数越小，模型性能越好；</li><li>模型评估：在模型训练中或训练结束后岁模型进行评估测试，观察准确率；</li><li>模型预测：使用训练好的模型进行测试，也需要准备数据和模型特征提取，最后对结果进行解析。</li></ul></blockquote><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3>]]></content>
    
    
    <summary type="html">some notes dealing with image classification.</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Image Classify" scheme="https://alleyf.github.io/tags/Image-Classify/"/>
    
  </entry>
  
  <entry>
    <title>目标检测</title>
    <link href="https://alleyf.github.io/2023/03/3962ffddc056.html"/>
    <id>https://alleyf.github.io/2023/03/3962ffddc056.html</id>
    <published>2023-03-17T11:10:56.000Z</published>
    <updated>2023-08-18T10:29:39.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YOLO算法"><a href="#YOLO算法" class="headerlink" title="YOLO算法"></a>YOLO算法</h1>]]></content>
    
    
    <summary type="html">some konwledge about target detection.</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV" scheme="https://alleyf.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络基础</title>
    <link href="https://alleyf.github.io/2023/03/f41646eecf81.html"/>
    <id>https://alleyf.github.io/2023/03/f41646eecf81.html</id>
    <published>2023-03-17T11:10:27.000Z</published>
    <updated>2023-07-04T14:04:59.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h1><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C,H,W]</code></p><h2 id="步幅（stride）"><a href="#步幅（stride）" class="headerlink" title="步幅（stride）"></a>步幅（stride）</h2><p>卷积核运算过程中==移动的距离大小==。<br>卷积后的输出尺寸计算公式如下：<br>$$ H_{out}= \frac{H+2p_{h}-k_{h}}{s_{h}}+1 $$<br>$$ W_{out}= \frac{W+2p_{w}-k_{w}}{s_{w}}+1 $$</p><blockquote><p>其中 $p_h$ 和 $p_w$ 分别为高度和宽度<strong>填充</strong>，$k_h$ 和 $k_w$ 分别为卷积核的高宽<strong>大小</strong>，$s_h$ 和 $s_w$ 分别为高度和宽度<strong>步幅</strong>。</p></blockquote><blockquote><p>[!NOTE] 提示<br>步幅越大，特征越小，<em><strong>stride=2</strong></em>，则<em><strong>特征缩小一半</strong></em>。</p></blockquote><h2 id="批量卷积"><a href="#批量卷积" class="headerlink" title="批量卷积"></a>批量卷积</h2><p>对RGB三通道，同时输入一个批次（batch）张图片做卷积运算，每张图像卷积后通道叠在一起（不是叠加），如下图所示：<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202303201948212.png" alt="image.png|525"></p><hr><h2 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h2><blockquote><p>感受野是指输出特征图上的像素点所能感受到的输入数据的范围。</p></blockquote><p>从下图可以看出感受野的大小：<br><img src="https://s2.loli.net/2023/03/20/dC7PyWFI5ZmHhxr.png" alt="image.png|250"><br><code>网络越深，越深层特征图的感受野越大，主要从输入的主对角线反映。</code></p><blockquote><p>[!NOTE] 提示<br>对于图像分类任务来说，感受野的大小与网络的性能存在一定的关系。感受野越大，网络可以获取到更广泛的上下文信息，从而更好地理解图像。但过大的感受野对图像分类也会有一定的影响，主要表现在以下两个方面：</p></blockquote><blockquote><ol><li>过大的感受野会<strong>引入过多的噪声和干扰信号</strong>。当感受野越大时，网络就会考虑更远的像素，这些像素可能与目标物体或图案无关，甚至会背离目标。这些噪声和干扰信号会干扰网络的学习，从而导致分类准确性的降低。</li></ol></blockquote><blockquote><ol start="2"><li>过大的感受野会<strong>降低网络的细节敏感度</strong>。当感受野的大小超出图像细节的尺度范围时，网络无法有效地捕捉到细节信息，从而导致分类准确性的降低。尤其是对于一些小尺寸物体和图案，小细节对分类结果的影响会更加显著。</li></ol></blockquote><blockquote><p>因此，对于图像分类任务来说，选择适当的感受野大小非常重要。通常，在<strong>保证网络全局感知能力的同时，应该将感受野限制在合适的尺度范围内</strong>，以避免过度拟合和过大感受野带来的问题。同时，还可以结合多尺度特征提取的方法，综合利用不同感受野下的信息，以获取更全面、更准确的特征，提高分类精度。</p></blockquote><h2 id="Paddle-API卷积"><a href="#Paddle-API卷积" class="headerlink" title="Paddle API卷积"></a>Paddle API卷积</h2><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320203438.png" alt="image.png|400"></p><h3 id="案例1-边缘检测二值图"><a href="#案例1-边缘检测二值图" class="headerlink" title="案例1-边缘检测二值图"></a>案例1-边缘检测二值图</h3><blockquote><p>检测图像黑白分界线。</p></blockquote><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320205235.png" alt="image.png|150"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> fluid. dygraph. guard():<br><span class="hljs-comment">#创建初始化权重参数w</span><br>w = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], dtype= <span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#将权重参数调整成维度为[cout, cin, kh, kw]的四维张里</span><br>w = w.reshape([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment">#创建卷积算子，设置输出通道数，卷积核大小，和初始化权重参数</span><br><span class="hljs-comment"># filter_size = [1, 3]表示kh = 1, kw=3</span><br><span class="hljs-comment">#创建卷积算子的时候，通过参数属性param_ attr, 指定参数初始化方式</span><br><span class="hljs-comment">#这里的初始化方式时，从numpy. ndarray初始化卷积参数</span><br><span class="hljs-comment">#num_channels:输入通道数；num_filters：输出通道数；filter_size：卷积核高宽，param_attr：初始化参数</span><br>conv = Conv2D(num_channels=<span class="hljs-number">1</span>, num_filters=<span class="hljs-number">1</span>, filter_size=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],param_attr=fluid.ParamAttr(<br>initializer=NumpyArrayInitializer(value=w)))<br><span class="hljs-comment">#创建输入图片，图片左边的像素点取值为1，右边的像素点取值为0</span><br>img = np.ones([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>], dtype=<span class="hljs-string">&#x27;f1oat32&#x27;</span>)<br>img[:, <span class="hljs-number">30</span>:] = <span class="hljs-number">0.</span><br><span class="hljs-comment">#将图片形状调整为[N(bach_size), C（chanel）, H, W]的形式</span><br>x = img.reshape([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>])<br><span class="hljs-comment">#将numpy.ndarray转化成paddle中的tensor</span><br>x = fluid.dygraph.to_variable(x)<br><span class="hljs-comment">#使用卷积算子作用在输入图片上</span><br>y = conv(x)<br><span class="hljs-comment">#将输出tensor转化为numpy.ndarray</span><br>out = y.numpy()<br></code></pre></td></tr></table></figure><blockquote><p>查看卷积层参数:<code>conv.parameters()</code><br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320205955.png" alt="image.png|450"></p></blockquote><hr><h3 id="案例2-边缘检测RGB彩图"><a href="#案例2-边缘检测RGB彩图" class="headerlink" title="案例2-边缘检测RGB彩图"></a>案例2-边缘检测RGB彩图</h3><blockquote><p><code>图片初始读入的形状为[H,W,C](垂直像素，水平像素，通道数)，需要调整为[N,C,H,W]格式。</code><br>卷积核：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213046.png" alt="image.png|175"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./work/ images/section1000000098520. jpg&#x27;)</span><br><span class="hljs-string">with fluid.dygraph.guard():</span><br><span class="hljs-string">#设置卷积核参数</span><br><span class="hljs-string">w = np.array([[-1,-1,-1], [-1,8,-1], [-1,-1,-1]], dtype= &#x27;float32&#x27;)/8</span><br><span class="hljs-string">w = w.reshape([1, 1, 3, 3])</span><br><span class="hljs-string">#由于输入通道数是3，将卷积核的形状从[1,1,3,3]调整为[1p3,p,3]</span><br><span class="hljs-string">w = np.repeat(w,3，axis=1)、</span><br><span class="hljs-string">#创建卷积算子，输出通道数为1，卷积核大小为3x3，</span><br><span class="hljs-string">#并使用上面的设置好的数值作为卷积核权重的初始化参数</span><br><span class="hljs-string">conv = Conv2D(num_channels=3, num_filters=1, filter_size=[3,3],param_attr=fluid.ParamAttr(initializer=NumpyArrayInitializer(value=w)))</span><br><span class="hljs-string">  #将读入的图片转化为float32类型的numpy.ndarray</span><br><span class="hljs-string">x = np.array(img).astype(&#x27;float32&#x27;)</span><br><span class="hljs-string">#图片读入成ndarry时，形状是[H, W, C]，</span><br><span class="hljs-string">#将通道这一维度调整到最前面</span><br><span class="hljs-string">x = np.transpose(x, (2,0,1))</span><br><span class="hljs-string">#将数据形状调整为[N, C, H, W]格式</span><br><span class="hljs-string">x = x.reshape(1, 3, img.height, img.width)</span><br><span class="hljs-string">x = fluid.dygraph.to_variable(x)#变为张量格式</span><br><span class="hljs-string">y = conv(x)</span><br><span class="hljs-string">out = y.numpy()#张量转numpy数组</span><br></code></pre></td></tr></table></figure><hr><h3 id="案例3-均值模糊"><a href="#案例3-均值模糊" class="headerlink" title="案例3-均值模糊"></a>案例3-均值模糊</h3><blockquote><p>卷积核：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213328.png" alt="image.png|200"><br>效果对比：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213358.png" alt="image.png|200"></p></blockquote><hr><h1 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h1><h2 id="形状-1"><a href="#形状-1" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C,H,W]</code></p><blockquote><p><code>池化</code>是使用某一位置的相邻输出的总体统计特征来代替网络在该位置的输出<br><code>理解</code>：取输入的局部统计特征作为输出，==可以掩盖变化的细节==。</p></blockquote><h2 id="池化方法"><a href="#池化方法" class="headerlink" title="池化方法"></a>池化方法</h2><ol><li>平均池化<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405140612.png" alt="image.png|200"></li></ol><ol start="2"><li>最大池化<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405140630.png" alt="image.png|200"><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2></li><li>池化的好处是当输入数据做出<strong>少量平移</strong>时，经过池化函数后的大多数输出还能<strong>保持不变</strong>,池化能够<strong>帮助输入的表示近似不变</strong>。</li><li>由于池化之后特征图会变得更小，如果后面连接的是全连接层，能<strong>有效的减小神经元的个数</strong>,<strong>节省存储空间并提高计算效率</strong>。<h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2></li></ol><ul><li>池化<strong>窗口大小</strong>：$pool_size = [k_h,k_w]$</li><li>池化窗口<strong>滑动步幅</strong>：$pool_stride = [stride_ h, stride_w]$</li><li>图片<strong>填充</strong>：$padding=[ph,pw]$</li><li>比较常见的参数配置是：$k_n =k_w=2,stride_h=stride_w=2,p_h=p_w=0$</li><li>采用这样的设置将会使得输出图片高和宽都减半<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2></li><li><strong>没有学习参数</strong></li><li><strong>通道数不变</strong>，每个通道独立进行池化</li><li>对<strong>微小的位置</strong>变化具有<strong>鲁棒性</strong></li></ul><hr><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><blockquote><p>通常在卷积或者全连接这样的线形操作之后，会加上一个非线性的函数，作用在每一个神经元的输出上，从而实现非线性变换的效果。</p></blockquote><h2 id="sigmoid激活函数"><a href="#sigmoid激活函数" class="headerlink" title="sigmoid激活函数"></a>sigmoid激活函数</h2><blockquote><p><strong>说明：</strong> Sigmoid函数只有在x接近于0的地方，导数才比较大，但最大值也只有1/4；在X的数值非常大或者非常小的地方，导数都接近于0<br>$$\begin{array}<br>\text { 反向传播 } \frac{\partial L}{\partial x}=\frac{\partial L}{\partial y} \cdot \frac{\partial y}{\partial x}<br>\text { 这将导致 } \frac{\partial L}{\partial x} \ \text { 会显著的小于 } \frac{\partial L}{\partial y}<br>这将导致张会显著的小于光<br>\end{array}$$</p></blockquote><ol><li>如果X是非常大整数或者非常小的负数，则<strong>x的梯度将接近于0</strong></li><li>即使x的数值接近于0，其梯度最大不超过y的<strong>梯度的1/4</strong>，如果有多层网络使用Sigmoid激活函数，将导致<strong>较靠前</strong>的那些层，<strong>梯度变得非常的小</strong></li></ol><p><em>在神经网络里面，将这种经过反向传播之后，梯度值衰减到接近于0的现象称作<strong>梯度消失</strong>现象</em><br>$$y=\frac{1}{1+e^{-x}}$$</p><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405151136.png" alt="image.png|250"></p><hr><h2 id="ReLU激活函数"><a href="#ReLU激活函数" class="headerlink" title="ReLU激活函数"></a>ReLU激活函数</h2><p>$$<br>y= \begin{cases}0, &amp; (x&lt;0) \ x, &amp; (x \geq 0)\end{cases}<br>$$<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405154029.png" alt="image.png|250"></p><blockquote><p>[!note]</p><ul><li>在x&gt;0的地方，ReLU函数的<strong>导数为1</strong>，能够将y的梯度完整的传递给×，而<strong>不会引起梯度消失</strong>。</li><li>在神经网络发展的早期Sigmoid函数用的比较多，而目前用的较多的激活函数是ReLU</li></ul></blockquote><hr><h1 id="批归一化BatchNorm"><a href="#批归一化BatchNorm" class="headerlink" title="批归一化BatchNorm"></a>批归一化BatchNorm</h1><h2 id="数据分布和模型的数值稳定性"><a href="#数据分布和模型的数值稳定性" class="headerlink" title="数据分布和模型的数值稳定性"></a>数据分布和模型的数值稳定性</h2><p><strong>模型收敛</strong>：需要稳定的数据分布</p><blockquote><p>[!note]<br>                       浅层神经网络—&gt;对输入数据做标准化（也称作归一化)</p><pre><code class="hljs">                   深度神经网络---&gt;仅仅标准化输入数据还不够</code></pre><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405155315.png" alt="image.png"></p></blockquote><p><strong>Batch Normalization 提升数值稳定性</strong></p><blockquote><p>对中间层的输出做标准化，可以保证在网络学习的过程中，网络层的输出具有稳定的分布。</p></blockquote><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>可以<strong>使学习快速进行</strong>（能够使用<strong>较大的学习率</strong>)</li><li>可以<strong>降低</strong>模型<strong>对初始值</strong>的<strong>敏感性</strong></li><li>可以从一定程度上<strong>抑制过拟合</strong></li></ul><h3 id="归一化公式"><a href="#归一化公式" class="headerlink" title="归一化公式"></a>归一化公式</h3><blockquote><p>每一项减去均值，除以方差加一个无穷小的数（$10^{-6}$）防止方差为0无意义.<br>$$<br>\hat{x_i} \leftarrow \frac{x_i-\mu_B}{\sqrt{\left(\sigma_B^2+\epsilon\right)}}<br>$$<br>对标准化输出进行平移和缩放<br>$$<br>y_i \leftarrow \gamma \hat{x}_i+\beta<br>$$<br>其中$\gamma$和$\beta$是可学习的参数，可以赋初始值$\gamma=1$,$\beta=0$,在训练过程中自动不断学习调整.</p></blockquote><h2 id="预测时使用BatchNorm"><a href="#预测时使用BatchNorm" class="headerlink" title="预测时使用BatchNorm"></a>预测时使用BatchNorm</h2><blockquote><p>[!解决方案]<br><strong>训练时</strong>计算在<strong>整个数据集上的均值和方差</strong>，并将<strong>结果保存预测时</strong>不计算样本内均值和方差，而是<strong>使用训练时保存的值</strong></p><ol><li>训练通过<strong>滚动平均</strong>的方式，计算在整个数据集上的均值和方差并保存</li><li>预测时直接加在训练时保存的均值和方差，而不用在样本内计算</li></ol></blockquote><hr><h1 id="丢弃法Dropout"><a href="#丢弃法Dropout" class="headerlink" title="丢弃法Dropout"></a>丢弃法Dropout</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>防止过拟合的方法<br><em><strong>训练阶段</strong></em>：每次随机的删除一部分神经元，不向前传播其所携带的信息，相当于每次都是让不同的模型在学习<br><em><strong>测试阶段</strong></em>：向前传播所有神经元的信息，相当于让这些不同的模型一起工作<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405172108.png" alt="image.png|350"></p></blockquote><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><blockquote><p>训练时随机丢弃了一部分神经元的信息，输出数据的总大小变小了<br>预测时不丢弃神经元，导致预测和训练时的数据分布不一样</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>==downgrade_in_infer==</li></ol><p><strong>训练</strong>时<strong>随机丢弃</strong>一部分神经元；<strong>预测时</strong>不丢弃神经元，但把它们<strong>数值变小</strong><br>2. ==<strong>upscale_in_train</strong>==<br><strong>训练</strong>时<strong>随机丢弃</strong>一部分神经元，但是把<strong>保留</strong>的那些<strong>神经元数值放大</strong>；<strong>预测</strong>时<strong>原样输出</strong>所有神经元的信息</p><blockquote><p>Paddle中默认是<code>downgrade_in_infer</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#设置随机数种子，这样可以保证每次运行结果一致</span><br>np.random.seed(<span class="hljs-number">100</span>)<br><span class="hljs-comment">#创建数据N,C,H,WM,一般对应卷积层的输出</span><br>data1 = np.random.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#创建数据N,K),一般对应全连接层的输出</span><br>data2 = np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>).reshape([-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#使用dropout作用在输入数据上</span><br><span class="hljs-keyword">with</span> fluid.dygraph.guard():<br>x1 = fluid.dygraph.to_variable(data1)<br>out1_1 = fluid.layers.dropout(x1,dropout_prob=<span class="hljs-number">0.5</span>,is_test=<span class="hljs-literal">False</span>)<br>out1_2 = fluid.layers.dropout(x1,dropout_prob=<span class="hljs-number">0.5</span>,is_test=<span class="hljs-literal">True</span>)<br><br>x2 = fluid.dygraph.to_variable(data2)<br>out2_1 = fluid.layers.dropout(x2,dropout_prob=<span class="hljs-number">0.5</span>,\<br>dropout_implementation=<span class="hljs-string">&#x27;upscale_in_train&#x27;</span>)<br>out2_2 = fluid.layers.dropout(x2,dropout_prob=<span class="hljs-number">0.5</span>,\<br>dropout_implementation=<span class="hljs-string">&#x27;upscale_in_train&#x27;</span>,is_test=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h1><blockquote><p>将输入全部转为1维进行线性求和</p></blockquote><h2 id="形状-2"><a href="#形状-2" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C]</code></p><blockquote><p>[!NOTE] 数据变换<br>尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]<br>        x = paddle.reshape(x, [x.shape[0], -1])</p></blockquote>]]></content>
    
    
    <summary type="html">some konwledge about CNN.</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CNN" scheme="https://alleyf.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉概述</title>
    <link href="https://alleyf.github.io/2023/03/cc1560495a8d.html"/>
    <id>https://alleyf.github.io/2023/03/cc1560495a8d.html</id>
    <published>2023-03-17T11:09:35.000Z</published>
    <updated>2023-04-05T11:34:43.789Z</updated>
    
    <content type="html"><![CDATA[<p>[[卷积神经网络基础]][[目标检测]][[图像分类]]</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>计算机视觉作为一门让机器学会如何去“看”的学科，具体的说，就是让机器去识别摄像机拍摄的图片或视频中的物体，检测出物体所在的位置，并对目标物体进行跟踪，从而理解并描述出图片或视频里的场景和故事，以此来模拟人脑视觉系统。因此，计算机视觉也通常被叫做机器视觉，其目的是建立能够从图像或者视频中“感知”信息的人工系统。</p><p>计算机视觉技术经过几十年的发展，已经在交通（车牌识别、道路违章抓拍）、安防（人脸闸机、小区监控）、金融（刷脸支付、柜台的自动票据识别）、医疗（医疗影像诊断）、工业生产（产品缺陷自动检测）等多个领域应用，影响或正在改变人们的日常生活和工业生产方式。未来，随着技术的不断演进，必将涌现出更多的产品和应用，为我们的生活创造更大的便利和更广阔的机会。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/93476b373dd342d1aae22397aa24c58fc60ab68307fd448189f16c8284723e9d" width = "500"></center><center>图1：计算机视觉技术在各领域的应用</center><p>飞桨为计算机视觉任务提供了丰富的API，并通过底层优化和加速保证了这些API的性能。同时，飞桨还提供了丰富的模型库，覆盖图像分类、检测、分割、文字识别和视频理解等多个领域。用户可以直接使用这些API组建模型，也可以在飞桨提供的模型库基础上进行二次研发。<br>由于篇幅所限，本章将重点介绍计算机视觉的经典模型（卷积神经网络）和两个典型任务（图像分类和目标检测）。主要涵盖如下内容：<br><strong>卷积神经网络</strong>：卷积神经网络（Convolutional Neural Networks, CNN）是计算机视觉技术最经典的模型结构。本教程主要介绍卷积神经网络的常用模块，包括：卷积、池化、激活函数、批归一化、丢弃法等。</p><ul><li><strong>图像分类</strong>：介绍图像分类算法的经典模型结构，包括：LeNet、AlexNet、VGG、GoogLeNet、ResNet，并通过眼疾筛查的案例展示算法的应用。</li><li><strong>目标检测</strong>：介绍目标检测YOLOv3算法，并通过林业病虫害检测案例展示YOLOv3算法的应用。</li></ul><h1 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h1><p>计算机视觉的发展历程要从生物视觉讲起。对于生物视觉的起源，目前学术界尚没有形成定论。有研究者认为最早的生物视觉形成于距今约<a href="https://www.pnas.org/content/109/46/18868">7亿年前的水母之中</a>，也有研究者认为生物视觉产生于距今约5亿年前寒武纪【<a href="https://doi.org/10.1038%2Fnature10097">1</a>, <a href="https://en.wikipedia.org/wiki/Evolution_of_the_eye">2</a>】。寒武纪生物大爆发的原因一直是个未解之谜，不过可以肯定的是在寒武纪动物具有了视觉能力，捕食者可以更容易地发现猎物，被捕食者也可以更早的发现天敌的位置。视觉能力加剧了猎手和猎物之间的博弈，也催生出更加激烈的生存演化规则。视觉系统的形成有力地推动了食物链的演化，加速了生物进化过程，是生物发展史上重要的里程碑。经过几亿年的演化，目前人类的视觉系统已经具备非常高的复杂度和强大的功能，人脑中神经元数目达到了1000亿个，这些神经元通过网络互相连接，这样庞大的视觉神经网络使得我们可以很轻松的观察周围的世界，如 <strong>图2</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/70d8475ed908487680057bf1f2760f10e367e7176acf43ebb380207b748b2377" width = "600"></center><center><br>图2：人类视觉感知</center><hr><p>对人类来说，识别猫和狗是件非常容易的事。但对计算机来说，即使是一个精通编程的高手，也很难轻松写出具有通用性的程序（比如：假设程序认为体型大的是狗，体型小的是猫，但由于拍摄角度不同，可能一张图片上猫占据的像素比狗还多）。那么，如何让计算机也能像人一样看懂周围的世界呢？研究者尝试着从不同的角度去解决这个问题，由此也发展出一系列的子任务，如 <strong>图3</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/d65f1ebcb0054dcb81a8eb50223adc529bb9b63265ab467d931a5df5b2864122" width = "500"></center><center><br>图3：计算机视觉子任务示意图</center>- **(a) Image Classification：** 图像分类，用于识别图像中物体的类别（如：bottle、cup、cube）。- **(b) Object Localization：** 目标检测，用于检测图像中每个物体的类别，并准确标出它们的位置。- **(c) Semantic Segmentation：** 图像语义分割，用于标出图像中每个像素点所属的类别，属于同一类别的像素点用一个颜色标识。- **(d) Instance Segmentation：** 实例分割，值得注意的是，（b）中的目标检测任务只需要标注出物体位置，而（d）中的实例分割任务不仅要标注出物体位置，还需要标注出物体的外形轮廓。在早期的图像分类任务中，通常是先人工提取图像特征，再用机器学习算法对这些特征进行分类，分类的结果强依赖于特征提取方法，往往只有经验丰富的研究者才能完成，如 **图4** 所示。<center><img src="https://ai-studio-static-online.cdn.bcebos.com/01179d17c9f74570b8a618d6123261ce6e10344f11c84dda8e47d44c1eb4fc81" width = "500"></center><center><br>图4：早期的图像分类任务</center>在这种背景下，基于神经网络的特征提取方法应运而生。Yann LeCun是最早将卷积神经网络应用到图像识别领域的，其主要逻辑是使用卷积神经网络提取图像特征，并对图像所属类别进行预测，通过训练数据不断调整网络参数，最终形成一套能自动提取图像特征并对这些特征进行分类的网络，如 **图5** 所示。<center><img src="https://ai-studio-static-online.cdn.bcebos.com/1ccd30567304415d98b0b373ec641a3d00f76d803f194ea4b14aa85ce85bf7bb" width = "500"></center><center><br>图5：早期的卷积神经网络处理图像任务示意</center><p>这一方法在手写数字识别任务上取得了极大的成功，但在接下来的时间里，却没有得到很好的发展。其主要原因一方面是数据集不完善，只能处理简单任务，在大尺寸的数据上容易发生过拟合；另一方面是硬件瓶颈，网络模型复杂时，计算速度会特别慢。<br>目前，随着互联网技术的不断进步，数据量呈现大规模的增长，越来越丰富的数据集不断涌现。另外，得益于硬件能力的提升，计算机的算力也越来越强大。不断有研究者将新的模型和算法应用到计算机视觉领域。由此催生了越来越丰富的模型结构和更加准确的精度，同时计算机视觉所处理的问题也越来越丰富，包括分类、检测、分割、场景描述、图像生成和风格变换等，甚至还不仅仅局限于2维图片，包括视频处理技术和3D视觉等。</p>]]></content>
    
    
    <summary type="html">some overview about DL_CV。</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV" scheme="https://alleyf.github.io/tags/CV/"/>
    
  </entry>
  
</feed>

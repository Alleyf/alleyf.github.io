<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alleyf</title>
  
  
  <link href="https://alleyf.github.io/atom.xml" rel="self"/>
  
  <link href="https://alleyf.github.io/"/>
  <updated>2023-07-17T03:05:38.126Z</updated>
  <id>https://alleyf.github.io/</id>
  
  <author>
    <name>alleyf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://alleyf.github.io/2023/07/da7a1552e042.html"/>
    <id>https://alleyf.github.io/2023/07/da7a1552e042.html</id>
    <published>2023-07-17T03:05:11.251Z</published>
    <updated>2023-07-17T03:05:38.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="核心词汇"><a href="#核心词汇" class="headerlink" title="核心词汇"></a>核心词汇</h1><ol><li>tension n紧张局势；对立；v绷紧</li><li>shrewd adj精明的；敏锐的；高明的</li><li>nowhere adv无处；哪里都不</li><li>phase n阶段；时期；v逐步做</li><li>triple adj三人的；三倍的</li><li>assist v帮助；协助；v助攻</li><li>elbow n肘；肘部；弯处；v用肘推</li><li>intense adj很大的；十分强烈的</li><li>recruit v招募；吸收；n新兵；新成员</li><li>priest n祭司；神父；僧侣</li><li>transparent adj透明的；显而易见的</li><li>accustomed adj习惯于；通常的</li><li>deliberate adj蓄意的；故意的；v仔细考虑；深思熟虑</li><li>stabilize v稳固；稳定</li><li>overnight adv在夜间；在晚上；一夜之间；adj夜间的；晚上的；一夜之间的</li><li>ambiguous adj模棱两可的；含糊不清的</li><li>interaction n交流；沟通；合作</li><li>expense n花费；费用；开销</li><li>era n时代年代；纪元</li><li>cater v提供饮食；承办宴席</li><li>summon v传唤；召唤</li><li>starve v挨饿；饿死</li><li>plug v堵塞；补充；n插头；插座</li><li>elapse v消逝；流逝</li><li>commentary n实时报道；注释；解释；评论</li><li>conservative adj保守的；守旧的；n保守者；</li><li>occurrence n发生；出现；存在</li><li>arson n纵火；放火</li><li>litre n升</li><li>racial adj种族的；</li><li>applicable adj适用；合适</li><li>vengeance n报仇；复仇；报复</li><li>expenditure n花费；消费；开支；消耗</li><li>overwhelm v充溢；压倒；压垮</li><li>surpass v超过；胜过；优于</li><li>visualize v使形象化；想象；构思；使可视化</li><li>somewhat adv 有点；稍微</li></ol><h1 id="认知词汇"><a href="#认知词汇" class="headerlink" title="认知词汇"></a>认知词汇</h1><ol><li>sabotage n蓄意破坏；捣乱；v蓄意破坏；妨碍；捣乱</li><li>discreet adj谨慎的；慎重的；</li><li>revert v回复</li><li>whereby adv凭此；由于</li><li>retrospective adj回顾的；涉及以往的</li><li>saturate v使湿透；浸透；使饱和</li><li>grope v摸索；搜索；猥琐；n猥亵；摸</li><li>endeavour n/v努力；尝试；尽力</li><li>entrust v委托；交托</li><li>accusation n控告；起诉；告发</li><li>casino n赌场；</li><li>withhold v拒绝给；不给；</li><li>terrain n地形；地势；地带</li><li>epoch n时代；纪元；时期；世；轮</li><li>locomotive adj移动的；运动的；n机车；火车头</li><li>warrant n执行令；授权令；v使恰当</li><li>glossary n术语汇编；词汇表</li><li>moderator n调解人；调停人；会议主持</li><li>propel v推动；推进</li><li>inflict v 使遭受；施加</li></ol><h1 id="大纲新增词汇"><a href="#大纲新增词汇" class="headerlink" title="大纲新增词汇"></a>大纲新增词汇</h1><ol><li>spaghetti n意大利面</li><li>trophy n奖杯；奖品；adj炫耀的；招摇的</li><li>fortify v筑城防御；加强；增强</li><li>nap n/v小睡；打盹；</li><li>backyard n后院；屋后附属地带；</li><li>uranium n铀</li><li>trolley n手推车；手拉车；台车</li><li>treasury n财政部；宝库</li><li>melon n甜瓜；瓜</li><li>blonde adj金黄色的；头发金黄的 n金发女郎</li><li>mop n拖把；乱蓬蓬的头发；v用拖把擦干净</li><li>ace nA纸牌；精于~的人；发球；得分；adj第一流的；极好的</li><li>almighty adj全能的；极大的；十分严重的</li><li>barracks n营房；兵营；简陋的房子</li><li>crate n大木箱；板条箱v把~装入大木箱</li><li>hypocrisy n伪善；虚伪</li><li>retaliate v报复；反击；复仇</li><li>tranquil adj安静的；平静的</li><li>renovate v修复；翻新；重新粉刷</li><li>deregulate v撤销对的管制；解除控制</li><li>embargo n禁止贸易令；禁运</li><li>loot v打劫；抢劫；偷；n战利品；掠夺品；赃物</li><li>syndicate n辛迪加；财团；私人联合会；v把出售给多个媒体</li><li>witch n女巫；巫婆；丑老太婆</li><li>habitat n生活环境；栖息地</li><li>ratify v正式批准；使正式生效</li><li>dynasty n王朝；朝代；朝</li><li>contagious adj接触传染的；患接触性传染病</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;核心词汇&quot;&gt;&lt;a href=&quot;#核心词汇&quot; class=&quot;headerlink&quot; title=&quot;核心词汇&quot;&gt;&lt;/a&gt;核心词汇&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;tension n紧张局势；对立；v绷紧&lt;/li&gt;
&lt;li&gt;shrewd adj精明的；敏锐的；高明的&lt;/li&gt;</summary>
      
    
    
    
    <category term="英语学习" scheme="https://alleyf.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://alleyf.github.io/2023/07/1c18a5ceb729.html"/>
    <id>https://alleyf.github.io/2023/07/1c18a5ceb729.html</id>
    <published>2023-07-17T03:01:12.809Z</published>
    <updated>2023-07-17T03:03:39.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认知词汇"><a href="#认知词汇" class="headerlink" title="认知词汇"></a>认知词汇</h1><ol><li>maturity n成熟；成年；完全长成</li><li>peculiarity n个性；特色；奇怪；怪异</li><li>parasite n寄生虫；寄生生物</li><li>casualty n伤员；遇难者；毁坏物</li><li>disperse v分散；散开；驱散；传播</li><li>unanimous adj一致的；一致同意的；意见一致的</li><li>posture n姿势；态度；看法；v装样子；故作姿态</li><li>cavity n洞；孔；窟窿</li><li>ministerial adj部长的；大臣的</li><li>adherence n坚持；坚守；遵循</li><li>oust v剥夺；罢免；革职</li><li>transcribe v记录；抄录；把~转成；改编</li><li>staple adj主要的；基本的；n订书钉；基本食物；主食</li><li>retrieval n取回；索回；数据检索</li><li>gorge n峡谷；v贪婪地吃；狼吞虎咽</li><li>stalk n柄；茎；梗；v跟踪；潜近</li><li>elicit v引出；探出；诱出</li><li>infinity n无限；无穷；无穷大</li><li>slash v砍；降低；n伤口；砍；劈；斜杠</li><li>rejoice v非常高兴；深感欣喜</li><li>oppress v压迫；欺压；压抑；使窒息</li><li>broker n经纪人；掮客；v安排；协商</li><li>dismay n诧异；惊愕；灰心；v使诧异；使失望</li><li>rupture n断裂；破裂；v断裂；裂开；毁掉</li><li>tickle v 呵痒；胳肢；使高兴；使满足；n 痒；胳肢</li></ol><h1 id="核心词汇"><a href="#核心词汇" class="headerlink" title="核心词汇"></a>核心词汇</h1><ol><li>enable v使能够；使实现；使成为可能</li><li>crack v破裂；裂开；n裂纹；裂缝；adj训练有素的；技艺高超的</li><li>appeal n/v呼吁；恳求；吸引力；感染力；</li><li>salvation n得救；救恩；救世</li><li>suppress v镇压；压制；抑制</li><li>currency n通货；货币；通用；流行</li><li>ambitious adj有野心的；有雄心的</li><li>hierarchy n等级制度；统治集团</li><li>cope v对付；处理；大圆衣</li><li>subsidiary adj辅助的；附带的；子公司</li><li>prior adj先前的；优先的；n院长</li><li>organize v组织；筹备；安排；规划；管理</li><li>universe n宇宙；万象；体系</li><li>apologize v道歉；谢罪</li><li>pollution n污染；玷污；弄脏；污染物；秽物</li><li>shoot v开；射击；发射；n幼苗；新枝；摄影；拍摄；狩猎</li><li>salad n蔬菜沙拉；</li><li>fetch v拿来；请来；售得</li><li>refuse v拒绝；回绝；n废弃物；垃圾</li><li>fortunate adj幸运的；吉利的</li><li>dwarf n小矮人；侏儒； adj矮小的； v使变得矮小</li><li>direct adj笔直的；最近的 v管理；监督；指导；adv直接</li><li>parcel n小包；包裹；v包；打包</li><li>appreciate v欣赏；赏识；感激；理解</li><li>response n回答；答复；反应</li><li>vast 辽阔的；巨大的；庞大的</li><li>content n所含之物；内容；adj满足的；v满足；满意</li><li>remote 遥远的；偏僻的</li><li>abundant adj充足的；大量的；丰富的</li><li>royal adj皇家的；王室的；高贵的</li><li>interference n干涉；干预；干扰</li><li>prestige n威信；声望；adj令人敬仰的；重要的</li><li>depart v离开；离去；出发</li><li>myth n神话；神话故事</li><li>marginal adj小的；微不足道的；边缘的</li><li>stylish adj时髦的；新潮的；高雅的</li><li>legitimate adj合法的；法定的；正当合理的</li><li>overturn v倾倒；倾覆；推翻；撤销</li><li>offending adj烦人的；令人不安的；有罪的</li><li>imitate v模仿；效仿</li><li>sceptical adj怀疑的</li><li>constituent n选民；选举人；成分；adj组成的</li><li>up to date adj现代的；时髦的；新式的</li><li>veil n面纱；面罩；头巾；v戴面纱；戴面罩；遮掩</li><li>glory n壮丽；辉煌；赞美</li><li>ozone n臭氧</li><li>destructive adj 引起破坏的；破坏性的</li></ol><h1 id="认知词汇-1"><a href="#认知词汇-1" class="headerlink" title="认知词汇"></a>认知词汇</h1><ol><li>consultancy n咨询公司；专家咨询</li><li>confer v商讨；协商；授予</li><li>dub v把<del>戏称为；给</del>起绰号；混录</li><li>glamour n吸引力；魅力；诱惑力</li><li>patriot n爱国者</li><li>reassure v使<del>安心；打消</del>疑虑</li><li>consecutive adj连续不断的</li><li>insurgent adj起义的；叛乱的；n起义者；叛乱者</li><li>punctuality n按时；准时；守时</li><li>radius n半径；周围</li><li>prune n干梅子；西梅子；v修剪树枝；精简</li><li>squad n警察队伍；运动队；班</li><li>velvet n丝绒；天鹅绒</li><li>discrepancy n差异；不符合；不一致</li><li>rescuer n营救；援救；抢救</li><li>refinery n精炼厂；提炼厂</li><li>hibernate v冬眠；蛰伏</li><li>aggregate n总数；合计；adj总数的；v总计；合计</li><li>elevate v提拔；晋升；提升；提高</li><li>groove n沟；槽；纹</li><li>spiral n螺旋式；逐渐加速上升；adj螺旋形的；v螺旋式上升</li><li>amend v修正；修订</li><li>default n默认；缺省值；v违约；预设</li><li>despise v鄙视；蔑视；看不起</li><li>virtuous adj 品行端正的；自命不凡的</li></ol><h1 id="大纲新增词汇"><a href="#大纲新增词汇" class="headerlink" title="大纲新增词汇"></a>大纲新增词汇</h1><ol><li>crunch n压碎声；紧要关头；困境；v发出破碎声；adj至关重要的</li><li>override v否决；推翻；不理会</li><li>calf n腓肠；小腿肚；小牛；崽；幼兽</li><li>blackmail n/v勒索；敲诈</li><li>outskirts n边缘地带；市郊</li><li>zoom v快速移动；急剧增长；n变焦镜头</li><li>jurisdiction n司法权；审判权；管辖权</li><li>glacier n冰川</li><li>bluff v/n虚张声势；吹牛；adj直率豪爽的</li><li>turmoil n动乱；骚动；混乱</li><li>dismantle v拆卸；拆开；废除；取消</li><li>fiscal adj财政的；国库的</li><li>haze n薄雾；雾霭；烟雾；迷糊v戏弄；刁难</li><li>hyphen n连字符</li><li>reminiscent adj怀旧的；回忆过去的；使回忆起；</li><li>relic n遗迹；遗物；遗风；圣骨</li><li>logistics n后勤；物流；组织工作</li><li>paddy n稻田；水田；发火；发怒</li><li>disintegrate v解体；破裂；瓦解；崩溃</li><li>uprising n起义；暴动；造反</li><li>perch v栖息；停留；坐；n栖息处；栖木；高处</li><li>stagnate v停滞；不发展；不进步</li><li>ordeal n磨难；折磨；煎熬</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认知词汇&quot;&gt;&lt;a href=&quot;#认知词汇&quot; class=&quot;headerlink&quot; title=&quot;认知词汇&quot;&gt;&lt;/a&gt;认知词汇&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;maturity n成熟；成年；完全长成&lt;/li&gt;
&lt;li&gt;peculiarity n个性；特色；奇怪；怪异&lt;/</summary>
      
    
    
    
    <category term="英语学习" scheme="https://alleyf.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://alleyf.github.io/2023/07/515b18cb773b.html"/>
    <id>https://alleyf.github.io/2023/07/515b18cb773b.html</id>
    <published>2023-07-17T02:58:18.769Z</published>
    <updated>2023-07-17T03:02:31.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="核心词汇"><a href="#核心词汇" class="headerlink" title="核心词汇"></a>核心词汇</h1><ol><li>disastrous 极糟糕的；灾难性的</li><li>alike 十分相像的；很相似的</li><li>partner n 搭档；同伴；舞伴；v 结伴；配对</li><li>fate n 命中注定的事；命运</li><li>rating n 等级；级别</li><li>literacy n读写能力</li><li>welfare n 幸福；安康；福祉；福利</li><li>equip v 配备；装备</li><li>distort v使变形；扭曲；使失真</li><li>transform v使改变形状；使改观</li><li>abnormal adj不正常；反常的；变态的</li><li>advise v劝告；建议；忠告</li><li>express v表示；表达；adj 快递的；特快的；n快递；特快列车</li><li>wing n翅膀；羽翼 v飞行</li><li>frequent adj频繁的；经常发生的</li><li>wipe v擦；拭；抹；n 抹布；纸巾</li><li>bound adj一定会；很可能会；v形成~的边界；n跳跃</li><li>credit n借款；贷款；信用（誉）；v存入金额；认为是<del>的功劳；把</del>归于</li><li>relative adj比较的；n亲属；亲戚</li><li>statistic n统计资料（数据）；统计学</li><li>apparent adj显而易见的；明显的</li><li>association n协会；社团；联系；联盟</li><li>defense n防御；保护；国防</li><li>govern v统治；控制；治理</li><li>valley n山谷；流域</li><li>admire v钦佩；欣赏；仰慕</li><li>accent n口音；腔调；v强调；突出</li><li>compress v压缩；精简；n压布</li><li>await v等候；等待；期待</li><li>cabin n隔间；小屋</li><li>civilian n平民；老百姓</li><li>shame n羞耻；令人惋惜的事；v羞愧；惭愧</li><li>solution n解决办法；答案；解；溶液</li><li>corrupt adj贪污的；腐败的；不道德的；v 使腐化；堕落；破坏</li><li>sympathy n同情；支持</li><li>fulfill v实现；履行</li><li>vain adj徒劳的；枉然的；无结果的</li><li>exploit v剥削；利用；压榨</li><li>assurance n保证；担保；人寿保险</li><li>rebel n反政府的人；造反者；v造反；反抗</li><li>random adj随机的；不认识的；出乎意料的</li><li>mature adj成熟的；明白事理的；v成熟；充分发展</li><li>eve n前夕；傍晚；黄昏</li><li>conceive v想象；构想；怀孕</li><li>detect v发现；查明；侦察</li><li>freight n货物；货运；v运送；寄送</li><li>premise n前提；假定</li><li>cluster n簇；团；束；v群集；聚集</li><li>deceive v欺骗；蒙骗；误导</li><li>sub n助理编辑；审校人；三明治；v替换；代用</li><li>famine n饥荒</li><li>strategy n策略；计策；部署；行动计划</li><li>cumulative adj聚集的；积累的；渐增的</li><li>conserve v保护；保存；节省 n果酱</li><li>bewilder v使迷惑；使糊涂</li><li>density n密集；稠密；密度</li><li>motivate v成为~的动机；激励；激发</li><li>register v登记；注册；n登记表</li><li>preside v主持；担任主席</li><li>recovery n恢复；痊愈；复苏；取回</li><li>spark v引发；触发；冒火花；求婚；n火花；火星</li><li>adjust v调整；调节；适应；习惯</li><li>reliable adj可信赖的；可靠的</li><li>deserve v应受；值得</li><li>circuit n环形；电路；线路</li><li>resolve v解决；表决；做出决定；n决心；</li><li>essence n本质；精髓；精油</li><li>alleviate v减轻；缓和；缓解</li><li>basis n基准；准则；缘由</li><li>greddy adj贪婪的；贪心的；贪吃的</li><li>substance n 物质；物品；东西；根据；重要性</li></ol><h1 id="大纲新增词汇"><a href="#大纲新增词汇" class="headerlink" title="大纲新增词汇"></a>大纲新增词汇</h1><ol><li>rgour n谨慎；缜密；严谨；严厉</li><li>deter v制止；阻止；威慑</li><li>dressing n调料；敷料</li><li>discord n不一致；不和；纷争</li><li>allure n诱惑力；吸引力</li><li>firework n烟花；烟火；放烟花；激烈的言辞</li><li>fireplace n壁炉</li><li>nude adj裸体的；肉色的；n裸体画；裸体人像</li><li>acupuncture n针刺疗法</li><li>tornado n龙卷风；旋风</li><li>atrocity n残暴行为</li><li>pesticide n杀虫剂；除害药物</li><li>limelight n公众注意的中心</li><li>apron n围裙；</li><li>wrestle v摔跤；努力处理；全力解决</li><li>beverage n饮料</li><li>spotlight n聚光灯；媒体公众的注意；v特别关注；突出报道</li><li>lyric n歌词；抒情诗；adj抒情的</li><li>dove n鸽子；温和派人物</li><li>clothe v给~穿衣；为提供衣服</li><li>advent n出现；到来；降临节</li><li>arbitrate v仲裁；公断</li><li>rhetoric n华而不实的言语；花言巧语；修辞</li><li>conceit n自负；骄傲自大</li><li>surname n姓</li><li>compassion n同情；怜悯</li><li>proofread v校阅；校对</li><li>suicide n自杀</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;核心词汇&quot;&gt;&lt;a href=&quot;#核心词汇&quot; class=&quot;headerlink&quot; title=&quot;核心词汇&quot;&gt;&lt;/a&gt;核心词汇&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;disastrous 极糟糕的；灾难性的&lt;/li&gt;
&lt;li&gt;alike 十分相像的；很相似的&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="英语学习" scheme="https://alleyf.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>DeepLearing</title>
    <link href="https://alleyf.github.io/2023/05/0950da3fc570.html"/>
    <id>https://alleyf.github.io/2023/05/0950da3fc570.html</id>
    <published>2023-05-31T06:27:39.000Z</published>
    <updated>2023-07-25T08:04:56.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><img src="https://s2.loli.net/2023/05/31/mlfBuXI7pt2eCic.png" alt="image.png|400"></p><blockquote><p>特征工程的作用：<br>    - 数据特征决定了模型的上限<br>    - 预处理和特征提取是最核心的<br>    - 算法与参数选择决定了如何逼近这个上限</p></blockquote><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251455407.png" alt="image.png"></p><p>z</p>]]></content>
    
    
    <summary type="html">Deep_learning</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV，NLP" scheme="https://alleyf.github.io/tags/CV%EF%BC%8CNLP/"/>
    
  </entry>
  
  <entry>
    <title>Machinelearning DeepLearing</title>
    <link href="https://alleyf.github.io/2023/05/14870b008a81.html"/>
    <id>https://alleyf.github.io/2023/05/14870b008a81.html</id>
    <published>2023-05-31T06:27:39.000Z</published>
    <updated>2023-07-04T14:04:11.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>机器学习主要分为以下两种：</p><p><span style="background:#affad1">1. 监督学习（supervised learning）</span><br><span style="background:#affad1">2. 无监督学习（unsupervised learning）</span></p><h1 id="2-监督学习"><a href="#2-监督学习" class="headerlink" title="2. 监督学习"></a>2. 监督学习</h1><p>分类：</p><p>回归，分类</p><h1 id="3-无监督学习"><a href="#3-无监督学习" class="headerlink" title="3. 无监督学习"></a>3. 无监督学习</h1><p>分类：<br>聚类（clustering）</p>]]></content>
    
    
    <summary type="html">Machine and Deep learning</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AIGC" scheme="https://alleyf.github.io/tags/AIGC/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch快速入门</title>
    <link href="https://alleyf.github.io/2023/05/891ff30b7b9b.html"/>
    <id>https://alleyf.github.io/2023/05/891ff30b7b9b.html</id>
    <published>2023-05-31T06:27:39.000Z</published>
    <updated>2023-07-14T08:41:45.477Z</updated>
    
    
    <summary type="html">Machine and Deep learning</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="DL" scheme="https://alleyf.github.io/tags/DL/"/>
    
  </entry>
  
  <entry>
    <title>OS</title>
    <link href="https://alleyf.github.io/2023/05/8e2ac1a55f44.html"/>
    <id>https://alleyf.github.io/2023/05/8e2ac1a55f44.html</id>
    <published>2023-05-21T12:24:20.000Z</published>
    <updated>2023-07-04T14:08:44.088Z</updated>
    
    
    <summary type="html">Some knowledge about os.</summary>
    
    
    
    <category term="CS" scheme="https://alleyf.github.io/categories/CS/"/>
    
    
    <category term="CS" scheme="https://alleyf.github.io/tags/CS/"/>
    
    <category term="OS" scheme="https://alleyf.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot启示录</title>
    <link href="https://alleyf.github.io/2023/04/218510a8c5b9.html"/>
    <id>https://alleyf.github.io/2023/04/218510a8c5b9.html</id>
    <published>2023-04-28T08:37:54.000Z</published>
    <updated>2023-06-03T11:33:45.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-开发环境热部署"><a href="#1-开发环境热部署" class="headerlink" title="1.开发环境热部署"></a>1.开发环境热部署</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><blockquote><ol><li>在实际的项目开发调试过程中会频繁地修改后台类文件，导致需要重新编译、重新启动，整个过程非常麻烦，影响开发效率。</li><li>Spring Boot 提供了 spring-boot-devtools 组件，使得无须手动重启 SpringBoot 应用即可重新编译、启动项目，大大缩短编译启动的时间。devtools 会监听 classpath 下的文件变动，触发 Restart 类加载器重新加载该类,从而实现类文件和属性文件的热部署。</li><li>并不是所有的更改都需要重启应用 (如静态资源、视图模板)，可以通过设置spring. devtools. restart. exclude 属性来指定一些文件或目录的修改不用重启应用</li></ol></blockquote><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><blockquote><p>在 <strong>pom. xml</strong> 配置文件中添加 <strong>dev-tools 依赖</strong>。<br>使用 <strong>optional=true</strong> 表示依赖<strong>不会传递</strong>，即该项目依赖 devtools; 其他项目如果引入此项目生成的 JAR 包，则不会包含 devtools</p></blockquote><h3 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom. xml"></a>1.pom. xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>&lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2. application. properties"></a>2. application. properties</h3><blockquote><p>在 application. properties 中配置 <strong>devtools.</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">#热部署生效<br>spring.devtools.restart.enabLed=<span class="hljs-literal">true</span><br>#设置重启目录<br>spring.devtooLs.restart.additional-paths=src/main/java<br>#设置classpath目录下的 WEB-INF 文件夹内容修改不重启<br>spring.devtooLs.restart.exclude=<span class="hljs-keyword">static</span><span class="hljs-comment">/**</span><br></code></pre></td></tr></table></figure><ul><li>如果使用了<span style="background:rgba(240, 200, 0, 0.2)"> Eclipse</span>, 那么在修改完代码并保存之后，项目将自动编译并触发重启，而如果使用了 <span style="background:rgba(160, 204, 246, 0.55)">IntelliJ IDEA</span>, 还需要配置项目自动编译。</li><li>打开<font color="#245bdb"> Settings </font>页面，在左边的菜单栏依次找到Build, Execution, Deployment-→Compile, 勾选 <font color="#ffc000">Build project automatically</font></li><li>按 <font color="#4bacc6">Ctrl+ Shift+ Alt+ /</font>快捷键调出 Maintenance 页面，单击 <font color="#9bbb59">Registry</font>, 勾选<font color="#8064a2">compiler.automake.allow.when.app.running </font>复选框 (可能找不到，修改设置为下图即可解决)。</li><li>做完这两步配置之后，若开发者再次在 IntelliJ IDEA 中修改代码，则项目会自动重启。</li></ul><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230428173445.png" alt="image.png|425"></p><h1 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2. 控制器"></a>2. 控制器</h1><blockquote><ol><li>Spring Boot 提供了<font color="#f79646">@Controller</font> 和<font color="#c0504d">@RestController</font> 两种注解来标识此类负责<span style="background:rgba(240, 107, 5, 0.2)">接收和处理 HTTP 请求</span>。</li><li>如果请求的是<font color="#00b0f0">页面和数据</font>，使用<font color="#0070c0">@Controller </font>注解即可; 如果只是请求<font color="#ff0000">数据</font>,则可以使用<font color="#c00000">@RestController </font>注解。</li></ol></blockquote><h2 id="1-demo"><a href="#1-demo" class="headerlink" title="1.demo"></a>1.demo</h2><p>@ RestController 的用法<br>默认情况下，@RestController 注解会将返回的对象数据转换为 <strong>JSON 格式</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">&quot;/user&quot;</span>)<br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setUsername (<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>user.setPassword (<span class="hljs-string">&quot;123&quot;</span>) ;<br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-路由映射"><a href="#2-路由映射" class="headerlink" title="2.路由映射"></a>2.路由映射</h2><blockquote><p>@RequestMapping 注解主要负责 URL 的路由映射。它可以添加Controller类或者具体的方法上。<br>如果添加在 Controller 类上，则这个 Controller 中的所有路由映射都将会加上此映射规则，如果添加在方法上，则只对当前方法生效。<br>@RequestMapping 注解包含很多属性参数来定义 HTTP 的请求映射规则。常用的属性参数如下:<br><span style="background:#d3f8b6">- value: 请求 URL 的路径, 支持 URL 模板、正则表达式</span><br><span style="background:#d3f8b6">- method: HTTP 请求方法</span></p></blockquote><ul><li>consumes:请求的媒体类型 (Content- Type)，如 application/json</li><li>produces: 响应的媒体类型<br><span style="background:#d3f8b6">- params, headers: 请求的参数及请求头的值</span></li></ul><h3 id="1-路由规则"><a href="#1-路由规则" class="headerlink" title="1. 路由规则"></a>1. 路由规则</h3><ol><li>@RequestMapping 的 <font color="#0070c0">value </font>属性用于<font color="#0070c0">匹配 URL 映射</font>，value 支持简单表达式</li><li>@RequestMapping (“/user”)</li><li>@RequestMapping 支持使用通配符匹配 URL，用于统一映射某些 URL 规则类似的请求: @RequestMapping (“/getJson/*. json”), 当在浏览器中请求/getJson/a.json 或者/getJson/b.json 时都会匹配到后台的 Json 方法</li><li>@RequestMapping 的通配符匹配非常简单实用，支持**<span style="background:#b1ffff">“*“  “?” “**“</span>** 等通配符</li><li>符号<font color="#ffc000"> “*“ </font>匹配<font color="#ffc000">任意字符</font>，符号 <font color="#00b050">“**“</font> 匹配<font color="#00b050">任意路径</font>，符号<font color="#00b0f0"> “?” </font>匹配<font color="#0070c0">单个字符</font>。有通配符的优先级低于没有通配符的，比如/user/addjson 比/user/* .json 优先匹配。有“**” 通配符的优先级低于有”*“ 通配符的。</li></ol><h3 id="2-Method-匹配"><a href="#2-Method-匹配" class="headerlink" title="2. Method 匹配"></a>2. Method 匹配</h3><ul><li>HTTP 请求 Method 有 <span style="background:#affad1">GET、POST、 PUT、DELETE </span>等方式。HTTP 支持的全部Method</li><li>@RequestMapping 注解提供了 method 参数指定请求的 Method 类型，包括<span style="background:rgba(205, 244, 105, 0.55)">RequestMethod. GET、RequestMethod. POST、RequestMethod.DELETE、RequestMethod. PUT</span> 等值，分别对应 HTTP 请求的 Method<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">&quot;/getData&quot;</span> , method = RequestMethod.GET)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>Method 匹配也可以使用<span style="background:rgba(3, 135, 102, 0.2)">@GetMapping、@PostMapping </span>等注解代替。</li></ul><h3 id="3-参数传递"><a href="#3-参数传递" class="headerlink" title="3. 参数传递"></a>3. 参数传递</h3><h4 id="1-get-请求"><a href="#1-get-请求" class="headerlink" title="1. get 请求"></a>1. get 请求</h4><blockquote><p>视图函数定义 query_params 路由参数，函数体内可以直接获取该参数。</p></blockquote><p>demo：</p><p>方式 1 同参（参数可有可无都能成功响应）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;  <br><span class="hljs-comment">// get注解  </span><br><span class="hljs-meta">@RequestMapping(value = &quot;/index1&quot;,method = RequestMethod.GET)</span><br><span class="hljs-comment">// @GetMapping(&quot;/index1&quot;)  </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello1</span><span class="hljs-params">(String name)</span>&#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;欢迎您：&quot;</span>+name;  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>方式 2 不同参（参数必须携带，否则 400 错误响应）</p><blockquote><p>将参数 usrname 映射为 name，默认<font color="#0070c0"> require=true</font>（必须携带参数否则报错），设置为 false 可以<font color="#6425d0">不携带参数访问</font><br><code>public String hello2(@RequestParam(value = &quot;usrname&quot;,required = false) String name)</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/index2&quot;,method = RequestMethod.GET)</span>  <br><span class="hljs-comment">// @GetMapping(&quot;/index&quot;)  </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;usrname&quot;)</span> String name)</span>&#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;欢迎您：&quot;</span>+name;  <br>&#125;<br></code></pre></td></tr></table></figure><p>通配符匹配路由：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;test/*&quot;)</span>  <span class="hljs-comment">// 匹配同级任何路由</span><br><span class="hljs-meta">@GetMapping(&quot;test/**&quot;)</span>  <span class="hljs-comment">// 匹配任何路由（包括子级）</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;匹配同级任意路径&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Post-请求"><a href="#2-Post-请求" class="headerlink" title="2.Post 请求"></a>2.Post 请求</h4><h5 id="1-urlencode-格式数据"><a href="#1-urlencode-格式数据" class="headerlink" title="1. urlencode 格式数据"></a>1. urlencode 格式数据</h5><p>方式 1 直接传数据：</p><blockquote><p>适合参数少的情景</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String name,String pwd)</span>&#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span>+name);  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span>+pwd);  <br><span class="hljs-keyword">return</span> name!=<span class="hljs-literal">null</span> &amp;&amp; pwd!=<span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>方式 2 对象传数据：</p><blockquote><p>适合参数多的情景，<font color="#6425d0">User 为实体类</font></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login2/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login2</span><span class="hljs-params">(User user)</span> &#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + user.getUsername());  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span> + user.getPassword());  <br>System.out.println(user);  <br><span class="hljs-keyword">return</span> user.getUsername() != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword() != <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br><span style="background:#ff4d4f">上述两种方式，发送的 data 数据必须经过 urlencode 编码，否则接收不到。</span></p></blockquote><h5 id="2-json-格式数据"><a href="#2-json-格式数据" class="headerlink" title="2. json 格式数据"></a>2. json 格式数据</h5><blockquote><p>需要给视图函数形参中添加注解<font color="#245bdb">@RequestBody</font>，且 json data 中的参数键名需要与后端中的实体类的属性并一致。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login3/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login3</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + user.getUsername());  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span> + user.getPassword());  <br>System.out.println(user);  <br><span class="hljs-keyword">return</span> user.getUsername() != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword() != <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230428185132.png" alt="image.png|500"></p><h1 id="3-文件上传"><a href="#3-文件上传" class="headerlink" title="3. 文件上传"></a>3. 文件上传</h1><h2 id="1-静态资源访问"><a href="#1-静态资源访问" class="headerlink" title="1. 静态资源访问"></a>1. 静态资源访问</h2><ol><li>使用 IDEA 创建 Spring Boot 项目，会默认创建出 <font color="#245bdb">classpath:/static/</font>目录, 静态资源一般放在这个目录下即可。</li><li>如果默认的静态资源过滤策略不能满足开发需求，也可以自定义静态资源过滤策略。</li><li>在 <span style="background:#d3f8b6">application. properties </span>中直接定义过滤规则和静态资源位置: </li></ol><ul><li><code>spring.mvc.static-path-pattern=/static/\*\*</code> </li><li><code>spring.web.resources.static-locations=classpath:/static/</code></li></ul><ol start="4"><li>过滤规则为<font color="#00b0f0">/static/**</font>，静态资源位置为<font color="#00b0f0"> classpath:/static/</font></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#设置静态路径过滤规则  </span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">images/**  </span><br><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/static/images/</span><br></code></pre></td></tr></table></figure><h2 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2. 文件上传"></a>2. 文件上传</h2><h3 id="1-文件上传原理"><a href="#1-文件上传原理" class="headerlink" title="1. 文件上传原理"></a>1. 文件上传原理</h3><ul><li>表单的<font color="#ffff00"> enctype 属性</font>规定在发送到服务器之前对表单数据的<font color="#ffff00">编码方式</font>。</li><li>当表单的 enctype=”<font color="#ffc000">application/x-www-form-urlencoded</font>“ (默认)时,<br>form 表单中的数据格式为: <font color="#ffc000">key=value&amp;key=value</font></li><li>当表单的 enctype=”<font color="#00b0f0">multipart/form-data</font>“时，其传输数据形式如下：<br><img src="https://s2.loli.net/2023/04/28/jh6pWVrx2yZSB43.png" alt="image.png|425"></li></ul><h3 id="2-配置文件大小"><a href="#2-配置文件大小" class="headerlink" title="2. 配置文件大小"></a>2. 配置文件大小</h3><ul><li>Spring Boot 工程嵌入的 tomcat 限制了请求的文件大小，每个文件的配置最大为 1 Mb，单次请求的文件的总数不能大于 10 Mb.</li><li>要更改这个默认值需要在配置文件 (如<font color="#00b0f0"> application.properties</font>) 中加入两个配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.servlet.multipart.max-file-size=10MB<br>spring.servlet.multipart.max-request-size=10MB<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>当表单的 enctype= “<font color="#9bbb59">multipart/form-data</font>“时, 可以使用<font color="#9bbb59"> MultipartFile </font>获取上传的文件数据，再通过 <font color="#9bbb59">transferTo </font>方法将其写入到磁盘中</p></blockquote><p>demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.controller;  <br>  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServlet;  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;  <br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;  <br>  <br><span class="hljs-keyword">import</span> java.io.File;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br>  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController</span> &#123;  <br><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(String name, MultipartFile avatar, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>System.out.println(name);  <br>System.out.println(<span class="hljs-string">&quot;filename:&quot;</span> + avatar.getOriginalFilename());  <br><span class="hljs-comment">// 获取文件类型  </span><br>System.out.println(avatar.getContentType());  <br><span class="hljs-comment">// 获取当前程序运行路径，部署时动态改变  </span><br><span class="hljs-comment">// String path = request.getServletContext().getRealPath(&quot;/upload/&quot;);  </span><br><span class="hljs-comment">// 固定为本地地址便于测试</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\IDEAProjects\\helloworld\\src\\main\\resources\\static\\images\\&quot;</span>;  <br>System.out.println(path);  <br>saveFile(avatar, path);  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功&quot;</span>;  <br>&#125;  <br>  <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveFile</span><span class="hljs-params">(MultipartFile avatar, String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br><span class="hljs-comment">// 获取上传文件夹  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);  <br><span class="hljs-comment">// 判断文件夹是否存在，不存在则创建  </span><br><span class="hljs-keyword">if</span> (!dir.exists()) &#123;  <br>dir.mkdir();  <br>&#125;  <br><span class="hljs-comment">// 实例化上传文件  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + avatar.getOriginalFilename());  <br>System.out.println(file.getPath());  <br><span class="hljs-comment">// 保存上传的文件  </span><br>avatar.transferTo(file);  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-拦截器"><a href="#3-拦截器" class="headerlink" title="3. 拦截器"></a>3. 拦截器</h2><p>简介：</p><blockquote><ol><li>拦截器在 Web 系统中非常常见，对于某些全局统一-的操作，我们可以把它提取到拦截器中实现。总结起来，拦截器大致有以下几种使用场景:</li><li><font color="#7030a0">权限检查:</font> 如登录检测，进入处理程序检测是否登录，如果没有，则直接返回登录页面。<br>3<font color="#7030a0">. 性能监控: </font>有时系统在某段时间莫名其妙很慢，可以通过拦截器在进入处理程序之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间</li><li><font color="#548dd4">通用行为: </font>读取 cookie 得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有提取 Locale、Theme 信息等，只要是多个处理程序都需要的，即可使用拦截器实现。</li></ol></blockquote><blockquote><p>[!NOTE] tips</p><ol><li>Spring Boot 定义了 <span style="background:#d2cbff">HandlerInterceptor 接口</span>来实现自定义拦截器的功能</li><li>HandlerInterceptor 接口定义了<span style="background:#40a9ff"> preHandle、postHandle、 afterCompletion</span> 三种方法，通过重写这三种方法实现请求前、请求后等操作<br><img src="https://s2.loli.net/2023/04/29/dvnpCAF81RxlBK5.png" alt="image.png|375"></li></ol></blockquote><h3 id="1-拦截器定义"><a href="#1-拦截器定义" class="headerlink" title="1. 拦截器定义"></a>1. 拦截器定义</h3><blockquote><p>类似于 django 的<font color="#4bacc6"> Midleware </font>中间件，控制请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">pub1ic <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*在请求处理之前进行调用(Control1er方法调用之前)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@override</span><br>pub1ic <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServ1etRequest request, HttpServ1etResponse response, object handTer)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (条件) &#123;<br>System.out.print1n(<span class="hljs-string">&quot;通过&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.print1n(<span class="hljs-string">&quot;不通过&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>返回为 true 则进入下一个拦截器，否则拒绝通过。</p></blockquote><h3 id="2-拦截器注册"><a href="#2-拦截器注册" class="headerlink" title="2. 拦截器注册"></a>2. 拦截器注册</h3><ul><li><span style="background:#affad1"> addPathPatterns </span>方法定义拦截的地址</li><li><span style="background:#b1ffff">excludePathPatterns </span>定义排除某些地址不被拦截</li><li>添加的一个拦截器没有 addPathPattern 任何一个 url 则<font color="#92d050">默认拦截所有请求</font></li><li>如果没有 excludePathPatterns 任何一个请求，则<font color="#92cddc">默认不放过任何一个请求</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;  <br><span class="hljs-comment">// 只拦截user路由下的所有路由  </span><br><span class="hljs-comment">// registry.addInterceptor(new LoginInterceptor()).addPathPatterns(&quot;/admin/**&quot;);  </span><br><span class="hljs-comment">// 拦截所有路由  </span><br>registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>());  <br>  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-RESTful"><a href="#4-RESTful" class="headerlink" title="4. RESTful"></a>4. RESTful</h1><h2 id="1-RESTful-介绍"><a href="#1-RESTful-介绍" class="headerlink" title="1.RESTful 介绍"></a>1.RESTful 介绍</h2><ol><li>HTTP 提供了<font color="#4bacc6"> POST、GET、 PUT、DELETE</font> 等操作类型对某个 Web 资源进行 <font color="#4bacc6">Create、Read、 Update 和 Delete </font>操作。</li><li>一个 HTTP 请求除了利用 URI 标志目标资源之外，还需要通过 HTTP Method 指定针对该资源的操作类型，一些常见的 HTTP 方法及其在 RESTful 风格下的使用:</li></ol><p><img src="https://s2.loli.net/2023/04/29/wokjgHNQVc4TCSW.png" alt="image.png|425"></p><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><ul><li>HTTP 状态码就是服务向用户返回的状态码和提示信息，客户端的每一次请求，服务都必须给出回应，回应包括<font color="#8064a2"> HTTP 状态码和数据</font>两部分。</li><li>HTTP 定义了 40 个标准状态码，可用于传达客户端请求的结果。状态码分为以下<br><font color="#f79646">5 个类别:</font><blockquote><p>1 xx: 信息，通信传输协议级信息<br>2 xx: 成功，表示客户端的请求已成功接受<br>3 xx: 重定向，表示客户端必须执行一些其他操作才能完成其请求<br>4 xx: 客户端错误，此类错误状态码指向客户端<br>5 xx: 服务器错误，服务器负责这写错误状态码</p></blockquote></li></ul><h2 id="2-构建-RESTful-应用接口"><a href="#2-构建-RESTful-应用接口" class="headerlink" title="2. 构建 RESTful 应用接口"></a>2. 构建 RESTful 应用接口</h2><p>Spring Boot 提供的<span style="background:rgba(240, 107, 5, 0.2)"> spring-boot-starter-web </span>组件完全支持开发 RESTful API, 提供了与 REST 操作方式 (GET、POST、 PUT、DELETE) 对应的注解。</p><ol><li><code>@GetMapping:</code> 处理 GET 请求，获取资源。</li><li><code>@PostMapping:</code> 处理 POST 请求，新增资源。</li><li><code>@PutMapping:</code> 处理 PUT 请求，更新资源。</li><li><code>@DeleteMapping:</code> 处理 DELETE 请求，删除资源。</li><li><code>@PatchMapping:</code> 处理 PATCH 请求，用于部分更新资源。</li></ol><blockquote><p>类似于 django 的视图装饰器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> cLass UserController &#123;<br><span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;根据ID获取用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@PostMapping(&quot;/user&quot; )</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@PutMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;更新用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; 根据ID删除用户&quot;</span>;<br><span class="hljs-number">1</span>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-Swagger-生成-API-接口文档"><a href="#3-Swagger-生成-API-接口文档" class="headerlink" title="3. Swagger 生成 API 接口文档"></a>3. Swagger 生成 API 接口文档</h2><blockquote><ol><li>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务，是非常流行的 API 表达工具。</li><li>Swagger 能够自动生成完善的 RESTful API 文档，同时并根据后台代码的修改同步更新，同时提供完整的测试页面来调试 APl。</li></ol></blockquote><p><font color="#f79646">pom. xml 依赖配置:</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- swagger依赖--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.config;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;  <br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;  <br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;  <br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;  <br>  <br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//告诉Spring容器， 这个类是一个配置类  </span><br><span class="hljs-meta">@EnableSwagger2</span> <span class="hljs-comment">//启用Swagger2功能  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;  <br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)  <br>.apiInfo(apiInfo())  <br>.select()  <br><span class="hljs-comment">// com 包下所有API都交给Swagger2管理  </span><br>.apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com&quot;</span>))  <br>.paths(PathSelectors.any()).build();  <br>&#125;  <br>  <br><span class="hljs-comment">// API文档页面显示信息  </span><br><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()  <br>.title(<span class="hljs-string">&quot;演示项目API&quot;</span>) <span class="hljs-comment">//标题  </span><br>.description(<span class="hljs-string">&quot;学习Swagger2的演示项目&quot;</span>) <span class="hljs-comment">//描述  </span><br>.version(<span class="hljs-string">&quot;1.0&quot;</span>)  <br>.build();  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>spring 3 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring3版本的swagger依赖--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.config;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br>  <br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.OpenAPI;  <br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.info.Info;  <br>  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenApiConfig</span> &#123;  <br>  <br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">springOpenAPI</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>().info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>() <span class="hljs-comment">//  </span><br>.title(<span class="hljs-string">&quot;SpringDoc API Test&quot;</span>) <span class="hljs-comment">//  </span><br>.description(<span class="hljs-string">&quot;SpringDoc Simple Application Test&quot;</span>) <span class="hljs-comment">//  </span><br>.version(<span class="hljs-string">&quot;0.0.1&quot;</span>));  <br>&#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-注解"><a href="#1-注解" class="headerlink" title="1.注解"></a>1.注解</h3><p>swagger 常用注解如下图所示：</p><p><img src="https://s2.loli.net/2023/05/02/sgfWcYZxHa2rJKm.png" alt="image.png|375"></p><p>从 Springfox 迁移过来的，需要修改注解：</p><p><span style="background:rgba(3, 135, 102, 0.2)">&gt; 1. @Api → @Tag</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 2. @ApiIgnore → @Parameter (hidden = true) or @Operation (hidden = true) or @Hidden</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 3. @ApiImplicitParam → @Parameter</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 4. @ApiImplicitParams → @Parameters</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 5. @ApiModel → @Schema</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 6. @ApiModelProperty (hidden = true) → @Schema (accessMode = READ_ONLY)</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 7. @ApiModelProperty → @Schema</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 8. @ApiOperation (value = “foo”, notes = “bar”) → @Operation (summary = “foo”, description = “bar”)</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 9. @ApiParam → @Parameter</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 10. @ApiResponse (code = 404, message = “foo”) → @ApiResponse (responseCode = “404”, description = “foo”)</span></p><h3 id="2-访问-swagger"><a href="#2-访问-swagger" class="headerlink" title="2.访问 swagger"></a>2.访问 swagger</h3><ol><li>swagger 2： <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></li><li>swagger 3: <ul><li><a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></li><li><a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></li></ul></li></ol><h1 id="5-MybatisPlus"><a href="#5-MybatisPlus" class="headerlink" title="5. MybatisPlus"></a>5. MybatisPlus</h1><h2 id="1-ORM-介绍"><a href="#1-ORM-介绍" class="headerlink" title="1.ORM 介绍"></a>1.ORM 介绍</h2><ul><li><p>ORM，（Object Relational Mapping，对象关系映射）是为了解决面向对象与关系数据库存在的互不匹配现象的一种技术。</p></li><li><p>ORM 通过使用描述对象和数据库之间映射的元数据将程序中的对象自动持久化到关系数据库中。</p></li><li><p>ORM 框架的本质是简化编程中操作数据库的编码。</p></li></ul><p><img src="https://s2.loli.net/2023/05/29/PcG5L8ZYouWhyp6.png" alt="image.png|350"></p><h2 id="2-MyBatis-Plus-介绍"><a href="#2-MyBatis-Plus-介绍" class="headerlink" title="2.MyBatis-Plus 介绍"></a>2.MyBatis-Plus 介绍</h2><ul><li>MyBatis 是一款优秀的数据持久层 ORM 框架，被广泛地应用于应用系统。</li><li>MyBatis 能够非常灵活地实现动态 SQL，可以使用 XML 或注解来配置和映射原生信息，能够轻松地将 Java 的 POJO（PlainOrdinaryJavaObject，普通的Java 对象）与数据库中的表和字段进行映射关联。</li><li>MyBatis-Plus 是一个 MyBatis 的增强工具，在 MyBatis 的基础上做了增强，简化了开发。</li></ul><p><font color="#8db3e2">添加依赖：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;! MyBatisPlus依赖<br>&lt;dependency&gt;<br>   &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!--mysql驱动依赖<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.47</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!-- 数据连接池druid<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><font color="#f79646">全局配置：</font></p><ul><li>配置数据库相关信息（application.properties）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.datasource.type=com.alibaba.druid.pool.DruidDatasource<br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br>spring.datasource.ur1=jdbc:mysql:<span class="hljs-comment">//1ocalhost:3306/mydb?usessL=false</span><br>spring.datasource.username=root<br>spring.datasource.password=<span class="hljs-number">123456</span><br>mybatis-plus.configuration.1og-impl=org.apache.ibatis.logging.stdout.stdoutImp1<br><br></code></pre></td></tr></table></figure><ul><li>添加@MapperScan 注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@springBootApplication</span><br><span class="hljs-meta">@Mapperscan(&quot;com.xx.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusDemoApplication</span> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(string[] args)</span>&#123;<br>       SpringApplication.run(MybatisplusDemoApplication.class,args);<br><br></code></pre></td></tr></table></figure><p>Mybitis CRUD 注解：<br>注解功能<br><font color="#00b0f0">@Insert     实现插入</font><br><font color="#00b0f0">@Update   实现更新</font><br><font color="#00b0f0">@Delete    实现删除</font><br><font color="#00b0f0">@Select    实现查询</font><br><font color="#00b0f0">@Result    实现结果集封装</font><br><font color="#00b0f0">@Results  可以与@Result 一起使用，封装多个结果集</font><br><font color="#00b0f0">@One       实现一对一结果集封装</font><br><font color="#00b0f0">@Many     实现一对多结果集封装</font></p><h2 id="3-MyBatis-Plus-CRUD-操作"><a href="#3-MyBatis-Plus-CRUD-操作" class="headerlink" title="3.MyBatis-Plus CRUD 操作"></a>3.MyBatis-Plus CRUD 操作</h2><p><font color="#ffc000">mybatis 的 Mapper 操作方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>   <span class="hljs-meta">@Insert(&quot;insert into user values(#&#123;id),#(username&#125;,#(password),#(birthday)&quot;)//id,username等属性为user对象的属性</span><br><span class="hljs-meta">    int add(User user);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @update(&quot;update user set username=#(username&#125;,password=#(password),birthday=#(birthday&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-meta">    int update(User user);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @Delete(&quot;delete from user where id=#(id&quot;)</span><br><span class="hljs-meta">    int delete(int id);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @select(&quot;select * from user where id=#(id&quot;)</span><br><span class="hljs-meta">   User findByid(int id);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @select(&quot;select * from user&quot;)</span><br><span class="hljs-meta">   List&lt;User&gt; getA11();</span><br></code></pre></td></tr></table></figure><p><font color="#ff0000">mybatis-plus 的操作方法</font></p><blockquote><p>BaseMapper 泛型类里已经实现了基本的增删改查任务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意<br>Mybatis-plus 有一些对 entity 里的实体类的<strong>注解</strong>，标识对应的表名、主键和字段名等，如果不进行注解则实体类的类名必须与数据表名一致，属性必须与数据表的字段名一致。<br><a href="https://baomidou.com/pages/24112f/#%E7%89%B9%E6%80%A7">注解细节</a></p></blockquote><h2 id="4-多表查询"><a href="#4-多表查询" class="headerlink" title="4. 多表查询"></a>4. 多表查询</h2><blockquote><p>实现复杂关系映射，可以使用@Results 注解，@Result 注解，@One 注解，<br>@Many 注解组合完成复杂关系的配置。</p></blockquote><p><img src="https://s2.loli.net/2023/06/01/Z6TuNLREyqGFazH.png" alt="注解说明|325"></p><p>示例：<br><strong>任务表</strong></p><p>entity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.entity;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;  <br>  <br><span class="hljs-keyword">import</span> java.sql.Date;  <br><span class="hljs-keyword">import</span> java.time.LocalDateTime;  <br>  <br><span class="hljs-meta">@TableName(value = &quot;u_task&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;  <br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> String content;  <br>    <span class="hljs-meta">@TableField(value = &quot;b_date&quot;)</span>  <br>    <span class="hljs-keyword">private</span> LocalDateTime b_date;  <br>    <span class="hljs-meta">@TableField(value = &quot;e_date&quot;)</span>  <br>    <span class="hljs-keyword">private</span> LocalDateTime e_date;  <br>    <span class="hljs-meta">@TableField(exist = false)</span>  <br>    <span class="hljs-keyword">private</span> User user;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TaskMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Task&gt; &#123;  <br>    <span class="hljs-meta">@Select(&quot;select * from task where uid = #&#123;uid&#125;&quot;)</span>  <br>    List&lt;Task&gt; <span class="hljs-title function_">selectByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;  <br><br><span class="hljs-meta">@Select(&quot;select * from task&quot;)</span>  <br><span class="hljs-meta">@Results(  </span><br><span class="hljs-meta">        &#123;  </span><br><span class="hljs-meta">                @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;name&quot;, property = &quot;name&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;content&quot;, property = &quot;content&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;b_date&quot;, property = &quot;b_date&quot;, javaType = LocalDateTime.class, jdbcType = JdbcType.TIMESTAMP),  </span><br><span class="hljs-meta">                @Result(column = &quot;e_date&quot;, property = &quot;e_date&quot;, javaType = LocalDateTime.class, jdbcType = JdbcType.TIMESTAMP),  </span><br><span class="hljs-meta">                @Result(column = &quot;uid&quot;, property = &quot;user&quot;, javaType = User.class,  </span><br><span class="hljs-meta">                        one = @One(select = &quot;com.alleyf.airesume.mapper.UserMapper.selectById&quot;)),  </span><br><span class="hljs-meta">        &#125;  </span><br><span class="hljs-meta">)</span>  <br>List&lt;Task&gt; <span class="hljs-title function_">queryAllTaskAndUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用户表</strong></p><p>entity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.entity;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;  <br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <br>    <span class="hljs-keyword">private</span> String username;  <br>    <span class="hljs-keyword">private</span> String password;  <br>    <span class="hljs-meta">@TableField(exist = false)</span>  <br>    <span class="hljs-keyword">private</span> List&lt;Task&gt; tasks;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>  <br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>  <br>    <span class="hljs-meta">@Results(  </span><br><span class="hljs-meta">            &#123;  </span><br><span class="hljs-meta">                    @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;username&quot;, property = &quot;username&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;password&quot;, property = &quot;password&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;id&quot;, property = &quot;tasks&quot;, javaType = List.class,  </span><br><span class="hljs-meta">                            many = @Many(select = &quot;com.alleyf.airesume.mapper.TaskMapper.selectByUid&quot;)),  </span><br><span class="hljs-meta">            &#125;  </span><br><span class="hljs-meta">    )</span>  <br>    List&lt;User&gt; <span class="hljs-title function_">queryAllUserAndTasks</span><span class="hljs-params">()</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意<br>查询用户的同时查出与用户相关联的所有任务<br>Result 中的 column 的字段为查询到的数据库字段值，用来赋值给后面类对象的属性 property，对应的属性与字段相同，含有不存在的属性则使用外键间接查询。</p></blockquote><h2 id="5-条件查询"><a href="#5-条件查询" class="headerlink" title="5. 条件查询"></a>5. 条件查询</h2><p><span style="background:#affad1">Mybatis 实现：</span></p><blockquote><p>在 mapper 的接口中写 sql 语句进行条件查询。</p></blockquote><p>示例：<br>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 按照任务名查询用户 * * <span class="hljs-doctag">@param</span> username 用户名  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 所有用户列表  </span><br><span class="hljs-comment"> */</span><span class="hljs-meta">@Select(&quot;select * from user where username = #&#123;username&#125;&quot;)</span>  <br><span class="hljs-meta">@Results(&#123;  </span><br><span class="hljs-meta">        @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;username&quot;, property = &quot;username&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;password&quot;, property = &quot;password&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;id&quot;, property = &quot;tasks&quot;, javaType = List.class,  </span><br><span class="hljs-meta">                many = @Many(select = &quot;com.alleyf.airesume.mapper.TaskMapper.selectByUid&quot;)),  </span><br><span class="hljs-meta">&#125;)</span>  <br>User <span class="hljs-title function_">selectByName</span><span class="hljs-params">(String username)</span>;<br><br></code></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.selectByName(username);  <br>    &#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:rgba(136, 49, 204, 0.2)">Mybatis-Plus 实现：</span></p><blockquote><ul><li>使用 <strong>QueryWrapper</strong> （条件查询）和 <strong>UpdateWrapper</strong>（条件更新） 两个条件查询类进行条件查询。</li><li>可选条件有：eq（等于），lt（大于），st（小于），le（大于等于），se（小于等于）等</li></ul></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户(MP)&quot;)</span>  <br><span class="hljs-meta">@GetMapping(&quot;/queryByMPName&quot;)</span>  <br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMPName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br>    <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6. 分页查询"></a>6. 分页查询</h2><p>编写配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.config;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaginationConfig</span> &#123;  <br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();  <br>        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">paginationInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);  <br>        interceptor.addInnerInterceptor(paginationInterceptor);  <br>        <span class="hljs-keyword">return</span> interceptor;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询所有用户：1oca1host：8080/findA11</span><br><span class="hljs-meta">@GetMapping(&quot;findAll&quot;)</span><br><span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">findAl1</span><span class="hljs-params">()</span>t<br>   <span class="hljs-comment">//设置起始值及每页条数</span><br>   Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">return</span> userMapper.selectPage(page,nul1);<br><br><span class="hljs-meta">@ApiOperation(&quot;按照页码查询用户(MP)&quot;)</span>  <br><span class="hljs-meta">@GetMapping(&quot;/queryByPage/&#123;page&#125;&quot;)</span>  <br><span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;  <br>    Page&lt;User&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>);  <br>    <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> userMapper.selectPage(page1, <span class="hljs-literal">null</span>);  <br>    <span class="hljs-keyword">return</span> iPage;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="6-Vue-框架快速上手"><a href="#6-Vue-框架快速上手" class="headerlink" title="6.Vue 框架快速上手"></a>6.Vue 框架快速上手</h1><p>[[Vue]]</p><h2 id="1-前端环境准备"><a href="#1-前端环境准备" class="headerlink" title="1. 前端环境准备"></a>1. 前端环境准备</h2><p>Vscode 或者WebStorm</p><h2 id="2-Vue-框架介绍"><a href="#2-Vue-框架介绍" class="headerlink" title="2.Vue 框架介绍"></a>2.Vue 框架介绍</h2><p>尤雨溪制作的渐进式 js 框架</p><h2 id="3-Vue-快速入门"><a href="#3-Vue-快速入门" class="headerlink" title="3.Vue 快速入门"></a>3.Vue 快速入门</h2><ul><li>导入 vue. js 的 script 脚本文件</li></ul><p> <code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></p><ul><li>在页面中声明一个将要被 vue 所控制的 DOM 区域，既 MVVM 中的 View</li></ul><pre><code class="hljs">`&lt;div id=&quot;app&quot;&gt;  &#123;&#123; message &#125;&#125;&lt;/div&gt;`</code></pre><ul><li>创建 vm 实例对象 (vue 实例对象)</li></ul><p><code>const hello = &#123;    //指定数据源，既 MVVM 中的 Mode1    data: function () &#123;       return &#123;          message: &#39;Hello Vue!&#39;       &#125; &#125; const app = Vue.createApp (hello) app. mount（&#39; #app &#39;）/／指定当前 vue 实例要控制页面的哪个区域</code></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.bilibili.com/video/BV1nV4y1s7ZN/">1天搞定SpringBoot+Vue全栈开发_哔哩哔哩_bilibili</a></li><li><a href="https://blog.csdn.net/javaDeveloper2010/article/details/129119489">Springdoc和Springfox</a></li></ol>]]></content>
    
    
    <summary type="html">it is some basic usage of SpringBoot .</summary>
    
    
    
    <category term="Java" scheme="https://alleyf.github.io/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://alleyf.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>DRF速通</title>
    <link href="https://alleyf.github.io/2023/04/fbae7fa42803.html"/>
    <id>https://alleyf.github.io/2023/04/fbae7fa42803.html</id>
    <published>2023-04-25T11:29:25.000Z</published>
    <updated>2023-04-27T16:31:05.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 其他相关文章-&gt; [[网页开发]]， #DRF #Django</p></blockquote><h1 id="1-api-接口"><a href="#1-api-接口" class="headerlink" title="1. api 接口"></a>1. api 接口</h1><p>目前市面上大部分公司开发人员使用的接口实现规范主要有：restful、RPC。<br>RPC（ Remote Procedure Call ）: 翻译成中文:远程过程调用[远程服务调用]. 从字面上理解就是访问/调用远程服务端提供的api接口。这种接口一般以服务或者过程式代码提供。<br>restful: 翻译成中文: 资源状态转换.(表征性状态转移)</p><ul><li>把服务端提供的所有的数据/文件都看成资源， 那么通过api接口请求数据的操作，本质上来说就是对资源的操作了.  因此，restful中要求，我们把当前接口对外提供哪种资源进行操作，就把<strong>资源的名称写在url地址</strong>。</li><li>  web开发中操作资源，最常见的最通用的无非就是增删查改，所以restful要求在地址栏中声明要操作的资源是什么。然后通过<strong>http请求动词</strong>来说明对该资源进行哪一种操作.</li></ul><blockquote><p>POST <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> 添加学生数据</p><p>GET <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> 获取所有学生</p><p>GET <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 获取id=pk的学生</p><p>DELETE <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 删除id=pk的一个学生</p><p>PUT <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 修改一个学生的全部信息 [id,name,sex,age,]</p><p>PATCH <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> / 修改一个学生的部分信息[age]</p></blockquote><p>请求方式：<em><strong>增删改查查</strong></em></p><ol><li>restful 是以资源为主的 api 接口规范，体现在地址上就是资源就是以名词表达。</li><li>rpc 则以动作为主的 api 接口规范，体现在接口名称上往往附带操作数据的动作。</li></ol><hr><h1 id="2-Django-的-CBV"><a href="#2-Django-的-CBV" class="headerlink" title="2.Django 的 CBV"></a>2.Django 的 CBV</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># CBV模式,views.py</span><br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">View</span>) ;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, reguest</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View GET请求...&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, reguest</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View POST请求...&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View DELETE请求&#x27;&#x27;&#x27;&quot;</span>)<br><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django. contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> book <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin. site.urls) ,<br><span class="hljs-comment"># path( &#x27;book/&#x27;, views.book) ,</span><br>path(<span class="hljs-string">&quot;book/&quot;</span>.views . BookView.asTview()) <span class="hljs-comment">#路由中的“/”不能丢，否则自动重定向为get请求</span><br>]<br></code></pre></td></tr></table></figure><hr><h1 id="3-反射"><a href="#3-反射" class="headerlink" title="3. 反射"></a>3. 反射</h1><p>通过反射 <code>func = getattr(self,func_name_str)</code> 可以将<strong>字符串转变为变量 (函数)<strong>，接着就可以直接调用 func () 从而</strong>动态调用函数</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,func_str</span>):<br>self.name = name<br>self.age = age<br>func = <span class="hljs-built_in">getattr</span>(self,func_str)<br>func() <span class="hljs-comment"># 等价于self.slepp() </span><br>a = Animal(<span class="hljs-string">&quot;alleyf&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;sleep&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="4-Drf"><a href="#4-Drf" class="headerlink" title="4. Drf"></a>4. Drf</h1><blockquote><p>安装 drf：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install djangorestframework<br></code></pre></td></tr></table></figure><blockquote><p>注册 drf app：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>... ,<br><span class="hljs-string">&#x27;rest_framework&#x27;</span>, <br>]<br></code></pre></td></tr></table></figure><hr><h2 id="1-APIView"><a href="#1-APIView" class="headerlink" title="1. APIView"></a>1. APIView</h2><ol><li>重写了 View 的 as_view ()和 dispatch（）方法，构建了新的 request 对象实现<strong>认证、权限和限流</strong>作用。</li><li><code>request. Get ()-&gt;request. Query_params ()</code>获取 get 请求参数</li><li><code>request. Post ()-&gt;request. Data ()</code> 获取 post(put 等)请求体数据，包括 files 都封装在一起反序列化了，支持前端 urlcoded 格式和 json 等其他任何格式。</li></ol><p>路由执行过程：<br><span style="background:#b1ffff">as_view ()-&gt;view ()-&gt;dispatch ()-&gt;get/post· · ·</span></p><hr><h2 id="2-Serializer-（反）序列化器"><a href="#2-Serializer-（反）序列化器" class="headerlink" title="2.Serializer （反）序列化器"></a>2.Serializer （反）序列化器</h2><p><img src="https://s2.loli.net/2023/04/26/VukBIX39lj2Kbx6.png" alt="（反）序列化器|425"></p><blockquote><p>[!NOTE] keys</p><ul><li>序列化：数据表数据-&gt;前端显示的 json 数据 （get 请求，<strong>取数据</strong>）</li><li>反序列化：前端提交的 json 数据-&gt;数据表数据（post、put、patch、delete 等请求，<strong>存数据</strong>）</li></ul></blockquote><h3 id="1-序列化与反序列化"><a href="#1-序列化与反序列化" class="headerlink" title="1.序列化与反序列化"></a>1.序列化与反序列化</h3><p><strong>常用字段类型</strong>：<br>| 字段                    | 构造方式                                                                             |<br>| ———————– | ———————————————————————————— |<br>| <strong>BooleanField</strong>        | BooleanField()                                                                       |<br>| <strong>CharField</strong>           | CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) |<br>| <strong>EmailField</strong>          | EmailField(max_length=None, min_length=None, allow_blank=False)                      |<br>| <strong>URLField</strong>            | URLField(max_length=200, min_length=None, allow_blank=False)                         |<br>| <strong>IPAddressField</strong>      | IPAddressField(protocol=‘both’, unpack_ipv4=False, options)                          |<br>| <strong>IntegerField</strong>        | IntegerField(max_value=None, min_value=None)                                         |<br>| <strong>FloatField</strong>          | FloatField(max_value=None, min_value=None)                                           |<br>| <strong>DateTimeField</strong>       | DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)               |<br>| <strong>DateField</strong>           | DateField(format=api_settings.DATE_FORMAT, input_formats=None)                       |<br>| <strong>TimeField</strong>           | TimeField(format=api_settings.TIME_FORMAT, input_formats=None)                       |<br>| <strong>ChoiceField</strong>         | ChoiceField(choices) choices 与 Django 的用法相同                                    |<br>| <strong>MultipleChoiceField</strong> | MultipleChoiceField(choices)                                                         |<br>| <strong>FileField</strong>           | FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)   |<br>| <strong>ImageField</strong>          | ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)  |<br>| <strong>ListField</strong>           | ListField(child=, min_length=None, max_length=None)                                  |<br>| <strong>DictField</strong>           | DictField(child=)                                                                    |<br><strong>选项参数：</strong><br>| 参数名称            | 作用             |<br>| ——————- | —————- |<br>| <strong>max_length</strong>      | 最大长度         |<br>| <strong>min_lenght</strong>      | 最小长度         |<br>| <strong>allow_blank</strong>     | 是否允许为空     |<br>| <strong>trim_whitespace</strong> | 是否截断空白字符 |<br>| <strong>max_value</strong>       | 最小值           |<br>| <strong>min_value</strong>       |     最大值             |<br><strong>通用参数：</strong><br>| 参数名称           | 说明                                      |<br>| —————— | —————————————– |<br>| <strong>read_only</strong>      | 表明该字段仅用于序列化输出，默认False     |<br>| <strong>write_only</strong>     | 表明该字段仅用于反序列化输入，默认False   |<br>| <strong>required</strong>       | 表明该字段在反序列化时必须输入，默认True  |<br>| <strong>default</strong>        | 反序列化时使用的默认值                    |<br>| <strong>allow_null</strong>     | 表明该字段是否允许传入 None，默认 False   |<br>| <strong>validators</strong>     | 该字段使用的验证器                        |<br>| <strong>error_messages</strong> | 包含错误编号与错误信息的字典              |<br>| <strong>label</strong>          | 用于 HTML 展示 API 页面时，显示的字段名称 |<br>| <strong>help_text</strong>      |  用于HTML展示API页面时，显示的字段帮助提示信息                                         |</p><ol><li>新建模型（反）序列化器</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookSerializers</span>(serializers.Serializer):<br><span class="hljs-string">&quot;&quot;&quot;Book的(反)序列化器&quot;&quot;&quot;</span><br>title = serializers.CharField (max_length=<span class="hljs-number">3</span>)<br>price = serializers.IntegerField(require=<span class="hljs-literal">True</span>)<br>date = serializers.DateField(source=<span class="hljs-string">&quot;pub_date&quot;</span>)<br><span class="hljs-comment"># 该方法必须被重写否则无法使用serializer.save()新建数据,实现view与serializer解耦</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self,validated_data</span>):<br>new_book = Book.objects.create(**serializer.validated_data)<br><span class="hljs-keyword">return</span> new_book<br><span class="hljs-comment"># 该方法必须被重写否则无法使用serializer.save()更新数据，实现view与serializer解耦</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self,validated_data</span>):<br><span class="hljs-comment"># 修改数据</span><br>Book.objects.<span class="hljs-built_in">filter</span>(pk=instance.pk).update(**serializer.validated_data)<br><span class="hljs-comment"># 设置序列化器的实例为更新后的对象</span><br>updated_book = Book.objects.get(pk=instance.pk)<br><span class="hljs-keyword">return</span> updated_book<br></code></pre></td></tr></table></figure><blockquote><ol><li>（反）序列化器的字段名与数据表的字段名必须一致，否则需要指定 <code>source</code> 指向某个字段</li><li>字段规则要根据数据表的规则设置</li></ol></blockquote><ol start="2"><li>新建模型视图类</li></ol><blockquote><ul><li><strong>根据需求重写 get、post、put、delete 等方法</strong></li><li>除了 <strong>delete 返回 none</strong> 外，其他方法都要返回改变的<strong>序列化为 json 后的数据</strong></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> viewsets<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&quot;&quot;&quot;序列化&quot;&quot;&quot;</span><br><span class="hljs-comment"># query_params = request.query_params() 获取get的url请求参数 </span><br>queryset = Book.objects.<span class="hljs-built_in">all</span>() <span class="hljs-comment"># 当查询过滤得到一个对象时，many=False</span><br><span class="hljs-comment"># 构建序列化对象</span><br>serializer = BookSerializer(instance=queryset,many=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> Response(serilaizer.data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&quot;&quot;&quot;反序列化&quot;&quot;&quot;</span><br><span class="hljs-comment"># 构建反序列化对象 </span><br>serializer = BookSerializer(data=request.data)<br><span class="hljs-comment"># 数据校验</span><br><span class="hljs-keyword">if</span> serializer.is_valid():<br><span class="hljs-comment"># 校验通过创建新数据，返回新建的json数据 </span><br>serializer.save()<br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 校验失败，返回错误 </span><br><span class="hljs-keyword">return</span> Response(serializer.errors) <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDetailView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从数据库获取指定id的数据</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>singleBook = Book.objects.get(pk=<span class="hljs-built_in">id</span>)<br><span class="hljs-comment"># 构建序列化器转为json数据</span><br>serializer = Serializer(instance=singleBook,many=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br><span class="hljs-string">&quot;&quot;&quot;修改指定id的数据&quot;&quot;&quot;</span><br>update_bookobj = Book.objects.get(pk=<span class="hljs-built_in">id</span>)<br><span class="hljs-comment"># 构建反序列化器</span><br>serializer = Serializer(instance=update_bookobj,data=request.data)<br><span class="hljs-comment"># 数据校验</span><br><span class="hljs-keyword">if</span> serializer.is_valid():<br>serializer.save()<br><span class="hljs-comment"># 序列化修改后的对象并返回</span><br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 校验失败，返回错误 </span><br><span class="hljs-keyword">return</span> Response(serializer.errors) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br>Book.objects.get(pk=<span class="hljs-built_in">id</span>).delete()<br><span class="hljs-comment"># 直接返回空</span><br><span class="hljs-keyword">return</span> Response()<br></code></pre></td></tr></table></figure><ol start="3"><li>路由配置（urls.py）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path,re_path ,include<br><span class="hljs-keyword">from</span> views <span class="hljs-keyword">import</span> Bookview , BookDetailview<br>urlpatterns = [<br>path(<span class="hljs-string">&#x27;books/&#x27;</span>,Bookview.as_view()),<br>re_path(<span class="hljs-string">&#x27;books/(?P&lt;pk&gt;\d+)/&#x27;</span>,BookDetailview.as_view()),<br>]<br></code></pre></td></tr></table></figure><h3 id="2-Response"><a href="#2-Response" class="headerlink" title="2. Response"></a>2. Response</h3><blockquote><p>drf 重写后的 response<br><code>Response(data, status=None, template_name=None, headers=None, content_type=None)</code></p></blockquote><blockquote><p>[!NOTE] 常用参数概念</p><ol><li><code>data</code> ：python 的基本数据类型或者序列化后的数据</li><li><code>status</code>：返回状态码，eg：200，403 etc</li><li><code>template_name</code>: 模板名称，如果使用 <code>HTMLRenderer</code> 时需指明；</li><li> <code>headers</code>: 用于存放响应头信息的字典；</li><li> <code>content_type</code>: 响应数据的 Content-Type，通常此参数无需传递，REST framework 会根据前端所需类型数据来设置该参数</li></ol></blockquote><h3 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3. 状态码"></a>3. 状态码</h3><blockquote><p>为了方便设置状态码，REST framewrok在<code>rest_framework.status</code>模块中提供了常用http状态码的常量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1）信息告知 - 1xx </span><br>HTTP_100_CONTINUE <br>HTTP_101_SWITCHING_PROTOCOLS <br><span class="hljs-comment"># 2）成功 - 2xx </span><br>HTTP_200_OK <br>HTTP_201_CREATED <br>HTTP_202_ACCEPTED <br>HTTP_203_NON_AUTHORITATIVE_INFORMATION HTTP_204_NO_CONTENT <br>HTTP_205_RESET_CONTENT <br>HTTP_206_PARTIAL_CONTENT <br>HTTP_207_MULTI_STATUS <br><span class="hljs-comment"># 3）重定向 - 3xx </span><br>HTTP_300_MULTIPLE_CHOICES <br>HTTP_301_MOVED_PERMANENTLY <br>HTTP_302_FOUND <br>HTTP_303_SEE_OTHER <br>HTTP_304_NOT_MODIFIED <br>HTTP_305_USE_PROXY <br>HTTP_306_RESERVED <br>HTTP_307_TEMPORARY_REDIRECT <br><span class="hljs-comment"># 4）客户端错误 - 4xx </span><br>HTTP_400_BAD_REQUEST <br>HTTP_401_UNAUTHORIZED <br>HTTP_402_PAYMENT_REQUIRED <br>HTTP_403_FORBIDDEN <br>HTTP_404_NOT_FOUND <br>HTTP_405_METHOD_NOT_ALLOWED <br>HTTP_406_NOT_ACCEPTABLE HTTP_407_PROXY_AUTHENTICATION_REQUIRED HTTP_408_REQUEST_TIMEOUT <br>HTTP_409_CONFLICT <br>HTTP_410_GONE <br>HTTP_411_LENGTH_REQUIRED <br>HTTP_412_PRECONDITION_FAILED HTTP_413_REQUEST_ENTITY_TOO_LARGE HTTP_414_REQUEST_URI_TOO_LONG HTTP_415_UNSUPPORTED_MEDIA_TYPE HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_417_EXPECTATION_FAILED <br>HTTP_422_UNPROCESSABLE_ENTITY <br>HTTP_423_LOCKED <br>HTTP_424_FAILED_DEPENDENCY <br>HTTP_428_PRECONDITION_REQUIRED <br>HTTP_429_TOO_MANY_REQUESTS HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS <br><span class="hljs-comment"># 5）服务器错误 - 5xx </span><br>HTTP_500_INTERNAL_SERVER_ERROR <br>HTTP_501_NOT_IMPLEMENTED <br>HTTP_502_BAD_GATEWAY <br>HTTP_503_SERVICE_UNAVAILABLE <br>HTTP_504_GATEWAY_TIMEOUT HTTP_505_HTTP_VERSION_NOT_SUPPORTED HTTP_507_INSUFFICIENT_STORAGE HTTP_511_NETWORK_AUTHENTICATION_REQUIRED<br></code></pre></td></tr></table></figure><hr><h2 id="3-ModelSerializer"><a href="#3-ModelSerializer" class="headerlink" title="3.ModelSerializer"></a>3.ModelSerializer</h2><blockquote><p>模型类序列化器，根据模型简化序列化过程，根据模型表<strong>自动创建序列化字段</strong>，并且内部实现了 <strong>create 方法和 update 方法</strong>，也可以根据实际需要重写逻辑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Book<br><span class="hljs-comment"># 对全部字段进行序列化</span><br>fields = <span class="hljs-string">&#x27;__al__&#x27;</span><br><span class="hljs-comment"># 对指定字段进行序列化</span><br>fields = [<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;id&#x27;</span>,···]<br><span class="hljs-comment"># 排除指定字段不进行序列化</span><br>exclude = [<span class="hljs-string">&#x27;id&#x27;</span>]<br>extra_kwargs = &#123; <span class="hljs-string">&#x27;id&#x27;</span>: &#123;<span class="hljs-string">&#x27;min_value&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>&#125;, <span class="hljs-string">&#x27;title&#x27;</span>: &#123;<span class="hljs-string">&#x27;min_value&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>&#125;, &#125;<br></code></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 全局钩子  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, attrs</span>):  <br>    name = attrs.get(<span class="hljs-string">&#x27;name&#x27;</span>)  <br>    <span class="hljs-keyword">if</span> Resume.objects.<span class="hljs-built_in">filter</span>(name=name).exists():  <br>        <span class="hljs-keyword">raise</span> exceptions.ValidationError(name + <span class="hljs-string">&#x27;的简历已存在!&#x27;</span>)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> attrs  <br><span class="hljs-comment"># 局部钩子  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_name</span>(<span class="hljs-params">self, value</span>):  <br>     response = &#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;成功&#x27;</span>&#125;  <br>     res = Resume.objects.<span class="hljs-built_in">filter</span>(name=value)  <br>     <span class="hljs-keyword">if</span> res:  <br>         <span class="hljs-keyword">raise</span> exceptions.ValidationError(<span class="hljs-string">&#x27;简历重复!&#x27;</span>)  <br>     <span class="hljs-keyword">else</span>:  <br>         <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><hr><h2 id="4-视图"><a href="#4-视图" class="headerlink" title="4. 视图"></a>4. 视图</h2><h3 id="1-GenericAPIView"><a href="#1-GenericAPIView" class="headerlink" title="1. GenericAPIView"></a>1. GenericAPIView</h3><p>导入 <code>GenericAPIView</code></p><blockquote><p><code>from rest_framework.viewsets import generics</code></p></blockquote><blockquote><p>在 APIView 上扩展了一些新方法</p></blockquote><p>可设置的属性变量：</p><ul><li>  <strong>pagination_class</strong> 指明分页控制类</li><li>  <strong>filter_backends</strong> 指明过滤控制后端</li></ul><h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h4><h5 id="（1）get-serializer-class-self"><a href="#（1）get-serializer-class-self" class="headerlink" title="（1）get_serializer_class(self)"></a>（1）get_serializer_class(self)</h5><blockquote><p>当出现一个视图类中调用多个序列化器时,那么可以通过条件判断在get_serializer_class方法中通过返回不同的序列化器类名就可以让视图方法执行不同的序列化器对象了。<br>返回序列化器类，默认返回<code>serializer_class</code>，可以重写</p></blockquote><h5 id="（2）get-serializer-self-args-kwargs"><a href="#（2）get-serializer-self-args-kwargs" class="headerlink" title="（2）get_serializer(self, *args, **kwargs)"></a>（2）get_serializer(self, *args, **kwargs)</h5><blockquote><p>返回序列化器对象，主要用来提供给Mixin扩展类使用，如果我们在视图中想要获取序列化器对象，也可以直接调用此方法。</p><p><strong>注意，该方法在提供序列化器对象的时候，会向序列化器对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</strong></p><ul><li>  <strong>request</strong> 当前视图的请求对象</li><li>  <strong>view</strong> 当前请求的类视图对象</li><li>  <strong>format</strong> 当前请求期望返回的数据格式</li></ul></blockquote><h5 id="（3）get-queryset-self"><a href="#（3）get-queryset-self" class="headerlink" title="（3）get_queryset(self)"></a>（3）get_queryset(self)</h5><blockquote><p>返回视图使用的查询集，主要用来提供给 Mixin 扩展类使用，是列表视图与详情视图获取数据的基础，默认返回 <code>queryset</code> 属性，可以重写.</p></blockquote><h5 id="（4）get-object-self"><a href="#（4）get-object-self" class="headerlink" title="（4）get_object(self)"></a>（4）get_object(self)</h5><blockquote><p>返回详情视图所需的模型类数据对象，主要用来提供给Mixin扩展类使用。</p><p>在试图中可以调用该方法获取详情信息的模型类对象。</p><p><strong>若详情访问的模型类对象不存在，会返回404。</strong></p><p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p></blockquote><h4 id="1-方法重写"><a href="#1-方法重写" class="headerlink" title="1. 方法重写"></a>1. 方法重写</h4><p><code>设置urls.py中的普通路由，正则路由指定参数为pk</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>path(<span class="hljs-string">&#x27;books/&#x27;</span>,views.BookView.as_view()),<br>re_path(<span class="hljs-string">&#x27;books/(?P&lt;pk&gt;\d+)&#x27;</span>,views.BookDetailView.as_view()),<br>]<br></code></pre></td></tr></table></figure><p><strong>get：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;获取所有岗位信息&quot;&quot;&quot;</span>  <br>    serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="hljs-literal">True</span>)  <br>    <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p><strong><font color="#f79646">post</font>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">    添加岗位信息  </span><br><span class="hljs-string">    :param request:    :return: 添加后的岗位信息  </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>    serializer = self.get_serializer(data=request.data)  <br>    <span class="hljs-keyword">if</span> serializer.is_valid():  <br>        serializer.save()  <br>        <span class="hljs-keyword">return</span> Response(serializer.data)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></td></tr></table></figure><p><strong><font color="#2DC26B">get（单个数据）</font>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, pk</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;获取指定id的岗位信息&quot;&quot;&quot;</span>  <br>    serializer = self.get_serializer(instance=self.get_object(), many=<span class="hljs-literal">True</span>)  <br>    <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p><font color="#00b0f0">put（单个数据）：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, pk</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">    修改指定id的岗位信息  </span><br><span class="hljs-string">    :param request:    :return: 添加后的岗位信息  </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>    serializer = self.get_serializer(instance=self.get_object(), data=request.data)  <br>    <span class="hljs-keyword">if</span> serializer.is_valid():  <br>        serializer.save()  <br>        <span class="hljs-keyword">return</span> Response(serializer.data)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></td></tr></table></figure><p><font color="#7030a0">delete (单个数据)：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br>self.get_object().delete()<br><span class="hljs-comment"># 直接返回空</span><br><span class="hljs-keyword">return</span> Response()<br></code></pre></td></tr></table></figure><h3 id="2-ViewSet"><a href="#2-ViewSet" class="headerlink" title="2. ViewSet"></a>2. ViewSet</h3><h4 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h4><p>继承自 <code>APIView</code> 与 <code>ViewSetMixin</code>，作用也与 APIView 基本类似，提供了身份认证、权限校验、流量管理等。<br><strong>ViewSet主要通过继承ViewSetMixin来实现在调用as_view()时传入字典{“http请求”：“视图方法”}的映射处理工作，如{‘get’:’list’}，</strong></p><blockquote><ol><li>通过路由指定不同请求执行不同视图函数，从而修改路由分配方法。</li><li>项目加载时执行 <code>as_view ()</code> 函数，当发起请求时才执行 <code>view</code> 函数根据反射获取重写的<strong>函数变量</strong>，设置<strong>请求映射</strong>到该函数变量，进而根据不同请求分发匹配不同的视图函数。</li></ol></blockquote><p>在 ViewSet 中，没有提供任何动作 action 方法，需要我们自己实现 action 方法。<br>使用视图集ViewSet，可以将一系列视图相关的代码逻辑和相关的http请求动作封装到一个类中：<br><font color="#4bacc6">&gt; -   list() 提供一组数据</font><br><font color="#4bacc6">&gt; -   retrieve() 提供单个数据</font><br><font color="#4bacc6">&gt; -   create() 创建数据</font><br><font color="#4bacc6">&gt; -   update() 保存数据</font><br><font color="#4bacc6">&gt; -   destory() 删除数据</font></p><blockquote><p>ViewSet视图集类不再限制视图方法名只允许get()、post()等这种情况了，而是实现允许开发者根据自己的需要定义自定义方法名，例如 list() 、create() 等，然后经过路由中使用http和这些视图方法名进行绑定调用。</p></blockquote><h3 id="3-GenericViewSet"><a href="#3-GenericViewSet" class="headerlink" title="3. GenericViewSet"></a>3. GenericViewSet</h3><blockquote><p>继承了 GenericAPIView 和 ViewSetMixin，即继承了增删改查查方法，也修改了视图分发方法。</p></blockquote><p><strong>GenericViewSet</strong>就帮助我们完成了这样的继承工作，继承自<code>GenericAPIView</code>与<code>ViewSetMixin</code>，在实现了调用as_view()时传入字典（如<code>&#123;&#39;get&#39;:&#39;list&#39;&#125;</code>）的映射处理工作的同时，还提供了<code>GenericAPIView</code>提供的基础方法，可以直接搭配Mixin扩展类使用。<br>url. py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path <br><span class="hljs-keyword">from</span> vset.views <span class="hljs-keyword">import</span> BookView <br>urlpatterns = [ <br><span class="hljs-comment"># path(&quot;set&quot;, views.BookView.as_view(&#123;&quot;http请求&quot;:&quot;视图方法&quot;&#125;)), </span><br>path(<span class="hljs-string">&quot;books/&quot;</span>, BookView.as_view(&#123; <br> <span class="hljs-string">&quot;get&quot;</span>: <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;post&quot;</span>: <span class="hljs-string">&quot;create&quot;</span> <br> &#125;)), re_path(<span class="hljs-string">&quot;^books/(?P&lt;pk&gt;\d+)$&quot;</span>, BookView.as_view(&#123;<br>  <span class="hljs-string">&quot;get&quot;</span>: <span class="hljs-string">&quot;retrieve&quot;</span>, <br>  <span class="hljs-string">&quot;put&quot;</span>: <span class="hljs-string">&quot;update&quot;</span>, <br>  <span class="hljs-string">&quot;delete&quot;</span>: <span class="hljs-string">&quot;delete&quot;</span>, &#125;)), ]<br></code></pre></td></tr></table></figure><p>views. py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet<br><span class="hljs-keyword">from</span> rest_framework.mixins <span class="hljs-keyword">import</span> ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, \ DestroyModelMixin<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(GenericViewSet, ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin): <br>queryset = Book.objects <br>serializer_class = BookSerializer<br></code></pre></td></tr></table></figure><h3 id="4-ModelViewSet"><a href="#4-ModelViewSet" class="headerlink" title="4. ModelViewSet"></a>4. ModelViewSet</h3><blockquote><p>进一步封装，继承了五个 Mixin 类和 GenericViewSet。</p></blockquote><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelViewSet</span>(mixins.CreateModelMixin,  <br>                   mixins.RetrieveModelMixin,  <br>                   mixins.UpdateModelMixin,  <br>                   mixins.DestroyModelMixin,  <br>                   mixins.ListModelMixin,  <br>                   GenericViewSet):<br>            <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">A viewset that provides default `create()`, `retrieve()`, `update()`,  </span><br><span class="hljs-string">`partial_update()`, `destroy()` and `list()` actions.  </span><br><span class="hljs-string">&quot;&quot;&quot;</span>  <br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 局限：<br>    不够灵活，直接自带了六个增删改改查查视图函数，需要其他处理需要重写对应方法。</p></blockquote><h3 id="5-扩展视图方法"><a href="#5-扩展视图方法" class="headerlink" title="5. 扩展视图方法"></a>5. 扩展视图方法</h3><blockquote><p>根据需要扩展其他视图函数接口，匹配对应的 get、put、post、delete 等请求，并将接口注册到路由，</p></blockquote><h4 id="1-路由注册"><a href="#1-路由注册" class="headerlink" title="1. 路由注册"></a>1. 路由注册</h4><p><font color="#6425d0">views. py:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">self, request</span>):  <br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        自定义action  </span><br><span class="hljs-string">        return: JSON数据  </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>        <span class="hljs-keyword">pass</span><span class="hljs-comment">#示例：  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">latest</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&#x27;&#x27;&#x27;获取最后一条记录&#x27;&#x27;&#x27;</span>  <br>    <span class="hljs-comment"># 获取模型数据  </span><br>    book = BookInfo.objects.latest(<span class="hljs-string">&#x27;id&#x27;</span>)    <span class="hljs-comment"># 获取序列化器对象  </span><br>    s = BookInfoModelSerializer(instance=book)    <span class="hljs-keyword">return</span> Response(s.data)<br></code></pre></td></tr></table></figure><p><font color="#4bacc6">urls. py:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>   <span class="hljs-comment"># url(r&#x27;^books/$&#x27;,views.BookInfoViewSet.as_view(&#123;&#x27;get&#x27;:&#x27;action函数名&#x27;&#125;)),  </span><br><span class="hljs-comment">#示例：  </span><br>url(<span class="hljs-string">r&#x27;^books/$&#x27;</span>, views.BookInfoViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;latest&#x27;</span>&#125;)),  <br>]<br></code></pre></td></tr></table></figure><h4 id="装饰器注册"><a href="#装饰器注册" class="headerlink" title="装饰器注册"></a>装饰器注册</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> action<br><span class="hljs-meta">@action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>], detail=<span class="hljs-literal">False</span>, url_path=<span class="hljs-string">&#x27;test&#x27;</span></span>)  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-built_in">print</span>(request.data)  <br>    <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;成功了&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>methods: 声明该 action 对应的请求方式，列表传递  </li><li>detail: 声明该 action 路径是否为单一资源对应(False 查询所有数据接口，True 查询单条数据接口)，生成路由时是否拼接 <strong>pk</strong> 参数，detail为<code>True</code>，表示路径名格式应该为 <code>book/&#123;pk&#125;/login/</code></li><li>url_path：<strong>路由名称</strong>，不设置默认为函数名</li></ul><h2 id="5-路由"><a href="#5-路由" class="headerlink" title="5. 路由"></a>5. 路由</h2><blockquote><p>对于视图集 ViewSet，我们除了可以自己手动指明请求方式与动作 action 之间的对应关系外，还可以使用 Routers 来帮助我们快速实现路由信息。</p></blockquote><p>REST framework提供了两个router</p><ul><li>  <strong>SimpleRouter</strong></li><li>  <strong>DefaultRouter</strong></li></ul><h3 id="1-用法"><a href="#1-用法" class="headerlink" title="1. 用法"></a>1. 用法</h3><p><span style="background:rgba(240, 200, 0, 0.2)">1. 创建 router 对象，并注册视图集</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routers <br>router = routers.DefaultRouter() router.register(<span class="hljs-string">&#x27;book&#x27;</span>, BookView, base_name=<span class="hljs-string">&#x27;book&#x27;</span>)<br></code></pre></td></tr></table></figure><p>register(prefix, viewset, base_name)</p><blockquote><ul><li>  prefix 该视图集的路由前缀</li><li>  viewset 视图集</li><li>  base_name 路由别名的前缀</li></ul></blockquote><p>如上述代码会形成的路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">^book/$    name: book-<span class="hljs-built_in">list</span><br>^book/&#123;pk&#125;/$   name: book-detail<br></code></pre></td></tr></table></figure><p><span style="background:rgba(136, 49, 204, 0.2)">2. 添加路由数据：</span></p><ul><li><p>方式 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    ...<br>]<br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure></li><li><p>方式 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    ...<br>    path(<span class="hljs-string">&#x27;^&#x27;</span>, include(router.urls))<br>]<br></code></pre></td></tr></table></figure></li></ul><p><span style="background:#40a9ff">3. 完整 demo：</span></p><blockquote><p>附带了 <code>swagger</code> 的接口路由和 <code>django-admin</code> 后台管理路由</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url  <br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin  <br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> include, path, re_path  <br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve  <br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routers  <br><span class="hljs-keyword">from</span> rest_framework.documentation <span class="hljs-keyword">import</span> include_docs_urls  <br><span class="hljs-keyword">from</span> rest_framework.schemas <span class="hljs-keyword">import</span> get_schema_view  <br><span class="hljs-keyword">from</span> rest_framework_swagger.renderers <span class="hljs-keyword">import</span> SwaggerUIRenderer, OpenAPICodec  <br><span class="hljs-keyword">from</span> AIResume <span class="hljs-keyword">import</span> settings  <br><span class="hljs-keyword">from</span> smartresume.views <span class="hljs-keyword">import</span> auth_user_api, platform_user_api, resume_api, job_api  <br>  <br>schema_view = get_schema_view(title=<span class="hljs-string">&#x27;智能简历平台接口文档&#x27;</span>, renderer_classes=[SwaggerUIRenderer, OpenAPICodec])  <br>  <br>router = routers.DefaultRouter()  <br>  <br>router.register(<span class="hljs-string">r&#x27;users&#x27;</span>, auth_user_api.UserViewSet, basename=<span class="hljs-string">&quot;auth_users_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;groups&#x27;</span>, auth_user_api.GroupViewSet, basename=<span class="hljs-string">&quot;auth_groups_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;platform_users&#x27;</span>, platform_user_api.PuserViewSet, basename=<span class="hljs-string">&quot;platform_users_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;resumes&#x27;</span>, resume_api.ResumeViewSet, basename=<span class="hljs-string">&quot;resume_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;jobs&#x27;</span>, job_api.JobViewSet, basename=<span class="hljs-string">&quot;job_api&quot;</span>)  <br>urlpatterns = [  <br>    re_path(<span class="hljs-string">r&quot;^static/(?P&lt;path&gt;.*)$&quot;</span>, serve, &#123;<span class="hljs-string">&quot;document_root&quot;</span>: settings.STATIC_ROOT&#125;, name=<span class="hljs-string">&#x27;static&#x27;</span>),  <span class="hljs-comment"># 新增的路径  </span><br>    re_path(<span class="hljs-string">r&#x27;^media/(?P&lt;path&gt;.*)$&#x27;</span>, serve, &#123;<span class="hljs-string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;, name=<span class="hljs-string">&#x27;media&#x27;</span>),  <br>    path(<span class="hljs-string">r&#x27;&#x27;</span>, include(router.urls)),  <br>    path(<span class="hljs-string">r&#x27;api-auth/&#x27;</span>, include(<span class="hljs-string">&#x27;rest_framework.urls&#x27;</span>)),  <br>    url(<span class="hljs-string">r&#x27;^admin/&#x27;</span>, admin.site.urls),  <br>    path(<span class="hljs-string">&#x27;docs2/&#x27;</span>, schema_view, name=<span class="hljs-string">&#x27;docs&#x27;</span>),  <br>    path(<span class="hljs-string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="hljs-string">&#x27;智能简历平台接口文档&#x27;</span>)),  <br>]  <br>  <br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure><h2 id="2-视图集中附加-action-的声明"><a href="#2-视图集中附加-action-的声明" class="headerlink" title="2. 视图集中附加 action 的声明"></a>2. 视图集中附加 action 的声明</h2><blockquote><p>在视图集中，如果想要让 Router 自动帮助我们为自定义的动作生成路由信息，需要使用 <code>rest_framework.decorators.action</code> 装饰器。</p></blockquote><pre><code class="hljs">以 action 装饰器装饰的方法名会作为 action 动作名，与 list、retrieve 等同。</code></pre><p>action装饰器可以接收两个参数：</p><ul><li><strong>methods</strong>: 声明该action对应的请求方式，列表传递</li><li><strong>detail</strong>: 声明该action的路径是否与单一资源对应  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">路由前缀/&lt;pk&gt;<span class="hljs-regexp">/action方法名/</span><br></code></pre></td></tr></table></figure><ul><li>  True 表示路径格式是<code>xxx/&lt;pk&gt;/action方法名/</code></li><li>  False 表示路径格式是<code>xxx/action方法名/</code></li></ul></li><li>  url_path：声明该 action 的路由尾缀。</li></ul><p>demo：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> ModelViewSet<br><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> action<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Book.objects<br>    serializer_class = BookSerializer<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    action装饰器的作用：告诉路由类给视图集的自定义方法生成路由信息</span><br><span class="hljs-string">    methods, 列表，允许哪些http请求能访问当前视图方法</span><br><span class="hljs-string">    detail，布尔，生成路由时是否拼接pk参数</span><br><span class="hljs-string">            detail为True，表示路径名格式应该为 book/&#123;pk&#125;/login/</span><br><span class="hljs-string">    url_path，字符串，生成路由时末尾路由路径，如果没有声明，则自动以当前方法名作为路由尾缀</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-meta">    @action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>], detail=<span class="hljs-literal">True</span>,url_path=<span class="hljs-string">&quot;login&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self, request,pk</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;登录&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;msg&quot;</span>:request.method&#125;)<br><br>    <span class="hljs-comment"># detail为False 表示路径名格式应该为 book/get_new_5/</span><br><span class="hljs-meta">    @action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>], detail=<span class="hljs-literal">False</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_5</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;获取最新添加的5本书&quot;&quot;&quot;</span><br>        ...<br></code></pre></td></tr></table></figure><p>上述方法自动为此视图集自定义 action 方法形成的路由会是如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">^book/get_new_5/$    name: book-get_new_5<br>^book/&#123;pk&#125;/login/$   name: book-login<br></code></pre></td></tr></table></figure><hr><h2 id="6-其它组件"><a href="#6-其它组件" class="headerlink" title="6. 其它组件"></a>6. 其它组件</h2><h3 id="1-认证"><a href="#1-认证" class="headerlink" title="1. 认证"></a>1. 认证</h3><h4 id="1-全局认证"><a href="#1-全局认证" class="headerlink" title="1. 全局认证"></a>1. 全局认证</h4><blockquote><p>没有设置用户配置认证时，默认认证为以下两个认证。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;  <br><span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [  <br>    <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,  <br>    <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>  <br>],<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-局部认证"><a href="#2-局部认证" class="headerlink" title="2. 局部认证"></a>2. 局部认证</h4><ol><li><p>继承认证基类, 写自己的认证类，并重写 authenticate（）方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthentication</span>(<span class="hljs-title class_ inherited__">SessionAuthentication</span>):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):  <br>        token = request.query_params.get(<span class="hljs-string">&#x27;token&#x27;</span>)  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:  <br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)  <br>        user_obj = Puser.objects.<span class="hljs-built_in">filter</span>(token=token).first()  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:  <br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)  <br>        <span class="hljs-keyword">return</span> user_obj, token<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&quot;MyAPI&quot;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>视图函数设置 authentication_classes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">authentication_classes = [MyAuthentication,]<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-权限"><a href="#2-权限" class="headerlink" title="2. 权限"></a>2. 权限</h3><h3 id="3-限流"><a href="#3-限流" class="headerlink" title="3. 限流"></a>3. 限流</h3><blockquote><p>控制用户或管理员等访问接口的频次，减轻服务压力</p></blockquote><p>1） AnonRateThrottle</p><p>限制所有匿名未认证用户，使用IP区分用户。【很多公司这样的，IP结合设备信息来判断，当然比IP要靠谱一点点而已】</p><p>使用<code>DEFAULT_THROTTLE_RATES[&#39;anon&#39;]</code> 来设置频次</p><p>2）UserRateThrottle</p><p>限制认证用户，使用User模型的 id主键 来区分。</p><p>使用<code>DEFAULT_THROTTLE_RATES[&#39;user&#39;]</code> 来设置频次</p><p>3）ScopedRateThrottle</p><p>限制用户对于每个视图的访问频次，使用 ip 或 user id。</p><p>settings.py，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 限流全局配置</span><br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>:[ <span class="hljs-comment"># 限流配置类</span><br>    <span class="hljs-comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;, # 未认证用户[未登录用户]</span><br>    <span class="hljs-comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;, # 已认证用户[已登录用户]</span><br>        <span class="hljs-string">&#x27;rest_framework.throttling.ScopedRateThrottle&#x27;</span>, <span class="hljs-comment"># 自定义限流</span><br>    ],<br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>:&#123; <span class="hljs-comment"># 频率配置</span><br>        <span class="hljs-string">&#x27;anon&#x27;</span>: <span class="hljs-string">&#x27;2/day&#x27;</span>,  <span class="hljs-comment"># 针对游客的访问频率进行限制，实际上，drf只是识别首字母，但是为了提高代码的维护性，建议写完整单词</span><br>        <span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;5/day&#x27;</span>, <span class="hljs-comment"># 针对会员的访问频率进行限制，</span><br>        <span class="hljs-string">&#x27;vip&#x27;</span>: <span class="hljs-string">&#x27;10/day&#x27;</span>, <span class="hljs-comment"># 针对会员的访问频率进行限制，</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>视图代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> UserRateThrottle<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 限流局部配置[这里需要配合在全局配置中的DEFAULT_THROTTLE_RATES来设置频率]</span><br>    <span class="hljs-comment"># throttle_classes = [UserRateThrottle] # 使用drf限流类来配置频率</span><br>    throttle_scope = <span class="hljs-string">&quot;vip&quot;</span> <span class="hljs-comment"># 自定义频率</span><br></code></pre></td></tr></table></figure><h3 id="4-过滤"><a href="#4-过滤" class="headerlink" title="4. 过滤"></a>4. 过滤</h3><blockquote><p>安装过滤器：<br><code>pip install django-filter </code></p></blockquote><p>在配置文件中增加过滤后端的设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    ...<br>    <span class="hljs-string">&#x27;django_filters&#x27;</span>,  <span class="hljs-comment"># 需要注册应用，</span><br>]<br><br>REST_FRAMEWORK = &#123;<br>    ...<br>    <span class="hljs-string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: (<span class="hljs-string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可通过过滤字段检索数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>): queryset = Student.objects.<span class="hljs-built_in">all</span>() serializer_class = StudentSerializer filter_fields = [<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="5-排序"><a href="#5-排序" class="headerlink" title="5. 排序"></a>5. 排序</h3><blockquote><p>对于列表数据，REST framework 提供了<strong>OrderingFilter</strong>过滤器来帮助我们快速指明数据按照指定字段进行排序。</p></blockquote><p>使用方法：</p><p>在类视图中设置filter_backends，使用<code>rest_framework.filters.OrderingFilter</code>过滤器，REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。</p><p>前端可以传递的ordering参数的可选字段值需要在ordering_fields中指明。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    filter_backends = [OrderingFilter]<br>    ordering_fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>]<br><br><span class="hljs-comment"># 127.0.0.1:8000/books/?ordering=-age</span><br><span class="hljs-comment"># -id 表示针对id字段进行倒序排序</span><br><span class="hljs-comment"># id  表示针对id字段进行升序排序</span><br></code></pre></td></tr></table></figure><p>如果需要在过滤以后再次进行排序，则需要两者结合!</p><blockquote><p>全局配置下的过滤组件不能和排序组件一起使用，只支持局部配置的过滤组件和排序组件一起使用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> ListAPIView<br><span class="hljs-keyword">from</span> students.models <span class="hljs-keyword">import</span> Student<br><span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> StudentModelSerializer<br><span class="hljs-keyword">from</span> django_filters.rest_framework <span class="hljs-keyword">import</span> DjangoFilterBackend<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    filter_fields = [<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>]<br>    <span class="hljs-comment"># 因为局部配置会覆盖全局配置,所以需要重新把过滤组件核心类再次声明,</span><br>    <span class="hljs-comment"># 否则过滤功能会失效</span><br>    filter_backends = [OrderingFilter,DjangoFilterBackend]<br>    ordering_fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="6-分页"><a href="#6-分页" class="headerlink" title="6. 分页"></a>6. 分页</h3><blockquote><p>因为 django 默认提供的分页器主要使用于前后端不分离的业务场景，所以 REST framework 也提供了分页的支持。</p></blockquote><p>我们可以在配置文件中设置全局的分页方式，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:  <span class="hljs-string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,<br>    <span class="hljs-string">&#x27;PAGE_SIZE&#x27;</span>: <span class="hljs-number">100</span>  <span class="hljs-comment"># 每页数目</span><br>&#125;<br>``````<br><br>```python<br><span class="hljs-comment"># 如果在配置settings.py文件中， 设置了全局分页，那么在drf中凡是调用了ListModelMixin的list()，都会自动分页。如果项目中出现大量需要分页的数据，只有少数部分的分页，则可以在少部分的视图类中关闭分页功能。</span><br><span class="hljs-comment"># 另外，视图类在使用过分页以后，务必在编写queryset属性时，模型.objects后面调用结果。例如：</span><br><span class="hljs-comment"># Student.objects.all()</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    pagination_class = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>也可通过自定义 Pagination 类，来为视图添加不同分页行为。在视图中通过 <code>pagination_clas</code> 属性来指明。</p><p>可选分页器：</p><p>1） <strong>PageNumberPagination</strong></p><p>前端访问网址形式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET  http://127.0.0.1:8000/students/?page=4<br></code></pre></td></tr></table></figure><p>可以在子类中定义的属性：</p><ul><li>  page_size 每页数目</li><li>  page_query_param 前端发送的页数关键字名，默认为”page”</li><li>  page_size_query_param 前端发送的每页数目关键字名，默认为None</li><li>  max_page_size 前端最多能设置的每页数量</li></ul><p>分页器类，<code>paginations</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span>  rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination,LimitOffsetPagination<br><span class="hljs-comment"># PageNumberPagination，以页码作为分页条件</span><br><span class="hljs-comment"># page=1&amp;size=10      第1页</span><br><span class="hljs-comment"># page=2&amp;size=10      第2页</span><br><span class="hljs-comment"># ...</span><br><span class="hljs-comment"># LimitOffsetPagination，以数据库查询的limit和offset数值作为分页条件</span><br><span class="hljs-comment"># limit=10&amp;offset=0   第1页</span><br><span class="hljs-comment"># limit=10&amp;offset=10  第2页</span><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-comment"># PageNumberPagination</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentPageNumberPagination</span>(<span class="hljs-title class_ inherited__">PageNumberPagination</span>):<br>    page_query_param = <span class="hljs-string">&quot;page&quot;</span> <span class="hljs-comment"># 查询字符串中代表页码的变量名</span><br>    page_size_query_param = <span class="hljs-string">&quot;size&quot;</span> <span class="hljs-comment"># 查询字符串中代表每一页数据的变量名</span><br>    page_size = <span class="hljs-number">2</span> <span class="hljs-comment"># 每一页的数据量</span><br>    max_page_size = <span class="hljs-number">4</span> <span class="hljs-comment"># 允许客户端通过查询字符串调整的最大单页数据量</span><br></code></pre></td></tr></table></figure><p>视图，<code>views</code> ，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 取消当前视图类的分页效果</span><br>    <span class="hljs-comment"># pagination_class = None</span><br>    <span class="hljs-comment"># 局部分页</span><br>    pagination_class = StudentPageNumberPagination<br></code></pre></td></tr></table></figure><p>2）<strong>LimitOffsetPagination</strong></p><p>前端访问网址形式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET http://127.0.0.1/four/students/?limit=100&amp;offset=100<br></code></pre></td></tr></table></figure><p>可以在子类中定义的属性：</p><ul><li>  default_limit 默认限制，默认值与<code>PAGE_SIZE</code>设置一直</li><li>  limit_query_param limit参数名，默认’limit’</li><li>  offset_query_param offset参数名，默认’offset’</li><li>  max_limit 最大limit限制，默认None</li></ul><p>分页类，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span>  rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination,LimitOffsetPagination<br><span class="hljs-comment"># PageNumberPagination，以页码作为分页条件</span><br><span class="hljs-comment"># page=1&amp;size=10      第1页</span><br><span class="hljs-comment"># page=2&amp;size=10      第2页</span><br><span class="hljs-comment"># LimitOffsetPagination，以数据库查询的limit和offset数值作为分页条件</span><br><span class="hljs-comment"># limit=10&amp;offset=0   第1页</span><br><span class="hljs-comment"># limit=10&amp;offset=10  第2页</span><br><br><span class="hljs-comment"># LimitOffsetPagination</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentLimitOffsetPagination</span>(<span class="hljs-title class_ inherited__">LimitOffsetPagination</span>):<br>    limit_query_param = <span class="hljs-string">&quot;limit&quot;</span> <span class="hljs-comment"># 查询字符串中代表每一页数据的变量名</span><br>    offset_query_param = <span class="hljs-string">&quot;offset&quot;</span> <span class="hljs-comment"># 查询字符串中代表页码的变量名</span><br>    default_limit = <span class="hljs-number">2</span> <span class="hljs-comment"># 每一页的数据量</span><br>    max_limit = <span class="hljs-number">4</span> <span class="hljs-comment"># 允许客户端通过查询字符串调整的最大单页数据量</span><br></code></pre></td></tr></table></figure><p>视图，<code>views</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 取消当前视图类的分页效果</span><br>    <span class="hljs-comment"># pagination_class = None</span><br>    <span class="hljs-comment"># 局部分页</span><br>    pagination_class = StudentLimitOffsetPagination<br></code></pre></td></tr></table></figure><h3 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7. 异常处理"></a>7. 异常处理</h3><blockquote><p>REST framework 提供了异常处理，我们可以自定义异常处理函数。例如我们想在要创建一个自定义异常函数，</p><p>这个函数，我们保存到当前子应用opt中[注意，开发时，我们会找个独立的公共目录来保存这种公共的函数/工具/类库]。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_exception_handler</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-comment"># 先调用REST framework默认的异常处理方法获得标准错误响应对象</span><br>    response = exception_handler(exc, context)<br><br>    <span class="hljs-comment"># 在此处补充自定义的异常处理</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        response.data[<span class="hljs-string">&#x27;status_code&#x27;</span>] = response.status_code<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>在配置文件中声明自定义的异常处理，<code>settings</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;drfdemo.exceptions.custom_excetion_handle&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果未声明，会采用默认的方式，如下</p><p>rest_frame/settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.views.exception_handler&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><p>补充上处理关于数据库的异常，这里使用其他异常来举例：</p><p><code>主应用.exceptions</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义异常函数: 在drf本身提供的异常函数基础上，我们增加更多的异常处理就可以了。</span><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> DatabaseError<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_excetion_handle</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    自定义异常函数，必须要在配置文件中注册才能被drf使用</span><br><span class="hljs-string">    exc: 异常对象，本次发生的异常对象</span><br><span class="hljs-string">    context: 字典，本次发生异常时，python解析器提供的执行上下文</span><br><span class="hljs-string">    所谓的执行上下文[context]，就是程序执行到当前一行代码时，能提供给开发者调用的环境信息异常发生时，代码所在的路径，时间，视图，客户端http请求等等...]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 先让drf处理它能识别的异常</span><br>    response = exception_handler(exc, context)<br>    <span class="hljs-comment"># 在经过了drf的异常处理以后，还是返回None则表示有2种情况:</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 异常发生时的视图对象</span><br>        view = context[<span class="hljs-string">&#x27;view&#x27;</span>]<br>        <span class="hljs-comment"># 异常发生时的http请求</span><br>        request = context[<span class="hljs-string">&quot;request&quot;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc, DatabaseError):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]: %s&#x27;</span> % (view, exc))<br>            response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;服务器内部错误&#x27;</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc, TypeError):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0不能作为除数~&quot;</span>)<br>            <span class="hljs-built_in">print</span>(request)<br>            response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;0不能作为除数&#x27;</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>视图中，故意报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects  <span class="hljs-comment"># 去掉 .all()，就会报错。</span><br>    serializer_class = StudentModelSerializer<br>    pagination_class = StudentPageNumberPagination<br></code></pre></td></tr></table></figure><h4 id="REST-framework定义的异常"><a href="#REST-framework定义的异常" class="headerlink" title="REST framework定义的异常"></a>REST framework定义的异常</h4><blockquote><ul><li>  APIException 所有异常的父类</li><li>  ParseError 解析错误</li><li>  AuthenticationFailed 认证失败</li><li>  NotAuthenticated 尚未认证</li><li>  PermissionDenied 权限决绝</li><li>  NotFound 未找到</li><li>  MethodNotAllowed 请求方式不支持</li><li>  NotAcceptable 要获取的数据格式不支持</li><li>  Throttled 超过限流次数</li><li>  ValidationError 校验失败</li></ul></blockquote><p>也就是说，很多的没有在上面列出来的异常，就需要我们在自定义异常中自己处理了。</p><h3 id="8-自动生成接口文档"><a href="#8-自动生成接口文档" class="headerlink" title="8. 自动生成接口文档"></a>8. 自动生成接口文档</h3><blockquote><p>REST framework 可以自动帮助我们生成接口文档。</p><p>接口文档以网页的方式呈现。</p><p>自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p></blockquote><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install coreapi<br></code></pre></td></tr></table></figure><h4 id="2-设置接口文档访问路径"><a href="#2-设置接口文档访问路径" class="headerlink" title="2. 设置接口文档访问路径"></a>2. 设置接口文档访问路径</h4><p>在总路由中添加接口文档路径。</p><p>文档路由对应的视图配置为<code>rest_framework.documentation.include_docs_urls</code>，</p><p>参数<code>title</code>为接口文档网站的标题。总路由，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.documentation <span class="hljs-keyword">import</span> include_docs_urls<br><br>urlpatterns = [<br>    ...<br>    path(<span class="hljs-string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="hljs-string">&#x27;站点页面标题&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><p>在settings.py中配置接口文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 。。。 其他选项</span><br>    <span class="hljs-comment"># 接口文档</span><br>    <span class="hljs-string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.schemas.AutoSchema&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-文档描述说明的定义位置"><a href="#3-文档描述说明的定义位置" class="headerlink" title="3. 文档描述说明的定义位置"></a>3. 文档描述说明的定义位置</h4><p>1） 单一方法的视图，可直接使用类视图的文档字符串，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListView</span>(generics.ListAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    返回所有图书信息.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListCreateView</span>(generics.ListCreateAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    get:</span><br><span class="hljs-string">    返回所有图书信息.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    post:</span><br><span class="hljs-string">    新建图书.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>3）对于视图集ViewSet，仍在类视图的文档字符串中封开定义，但是应使用action名称区分，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    list:</span><br><span class="hljs-string">    返回图书列表数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    retrieve:</span><br><span class="hljs-string">    返回图书详情数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    latest:</span><br><span class="hljs-string">    返回最新的图书数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    read:</span><br><span class="hljs-string">    修改图书的阅读量</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-访问接口文档网页"><a href="#4-访问接口文档网页" class="headerlink" title="4. 访问接口文档网页"></a>4. 访问接口文档网页</h4><p>浏览器访问 127.0.0.1:8000/docs/，即可看到自动生成的接口文档。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230427154626.png" alt="image.png"></p><p>swagger 接口文档<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230427154712.png" alt="image.png"></p><p>两点说明：</p><p>1） 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read</p><p>2）参数的Description需要在模型类或序列化器类的字段中以help_text选项定义，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):<br>    ...<br>    age = models.IntegerField(default=<span class="hljs-number">0</span>, verbose_name=<span class="hljs-string">&#x27;年龄&#x27;</span>, help_text=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    ...<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentSerializer</span>(serializers.ModelSerializer):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = Student<br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br>        extra_kwargs = &#123;<br>            <span class="hljs-string">&#x27;age&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>,<br>                <span class="hljs-string">&#x27;help_text&#x27;</span>: <span class="hljs-string">&#x27;年龄&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote><p><font color="#ff0000">本文参考了以下文档和视频结合个人感悟记录，若有侵权无意冒犯，及时联系进行处理。如果有看不懂本文的，可以移步查看更加详细的教程文档或者观看相关视频，支持原创作者。 </font></p></blockquote><ol><li><a href="http://www.yuan316.com/post/DRF/">DRF | YUAN</a></li><li><a href="https://www.bilibili.com/video/BV1z5411D7BQ/?p=21&spm_id_from=pageDriver&vd_source=9c896fa9c3f9023797e8efe7be0c113e">21 DRF应用的认证组件_哔哩哔哩_bilibili</a></li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script><meting-js metin="meting" auto=" https://y.qq.com/n/ryqq/song/003kIhRR4Vr0cV.html" autoplay=" true" ></meting-js>]]></content>
    
    
    <summary type="html">it is some basic usage of drf .</summary>
    
    
    
    <category term="Front_end_development" scheme="https://alleyf.github.io/categories/Front-end-development/"/>
    
    
    <category term="Django" scheme="https://alleyf.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>初识 uni-app</title>
    <link href="https://alleyf.github.io/2023/04/5d72eb9cc9af.html"/>
    <id>https://alleyf.github.io/2023/04/5d72eb9cc9af.html</id>
    <published>2023-04-16T08:49:22.000Z</published>
    <updated>2023-04-20T16:23:25.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><blockquote><p>知识点：网络请求、模板语法、打开页面和页面传参。</p></blockquote><h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><blockquote><p>基础组件分为以下十几大类：</p></blockquote><h2 id="视图容器（View-Container）："><a href="#视图容器（View-Container）：" class="headerlink" title="视图容器（View Container）："></a>视图容器（View Container）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/view">view</a></p><p>视图容器，类似于HTML中的div</p><p><a href="https://uniapp.dcloud.net.cn/component/scroll-view">scroll-view</a></p><p>可滚动视图容器</p><p><a href="https://uniapp.dcloud.net.cn/component/swiper">swiper</a></p><p>滑块视图容器，比如用于轮播banner</p><p><a href="https://uniapp.dcloud.net.cn/component/match-media">match-media</a></p><p>屏幕动态适配组件，比如窄屏上不显示某些内容</p><p><a href="https://uniapp.dcloud.net.cn/component/movable-view#movable-area">movable-area</a></p><p>可拖动区域</p><p><a href="https://uniapp.dcloud.net.cn/component/movable-view#movable-view">movable-view</a></p><p>可移动的视图容器，在页面中可以拖拽滑动或双指缩放。movable-view必须在movable-area组件中</p><p><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-view">cover-view</a></p><p>可覆盖在原生组件的上的文本组件</p><p><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-image">cover-image</a></p><p>可覆盖在原生组件的上的图片组件</p></blockquote><h2 id="基础内容（Basic-Content）："><a href="#基础内容（Basic-Content）：" class="headerlink" title="基础内容（Basic Content）："></a>基础内容（Basic Content）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/icon">icon</a></p><p>图标</p><p><a href="https://uniapp.dcloud.net.cn/component/text">text</a></p><p>文字</p><p><a href="https://uniapp.dcloud.net.cn/component/rich-text">rich-text</a></p><p>富文本显示组件</p><p><a href="https://uniapp.dcloud.net.cn/component/progress">progress</a></p><p>进度条</p></blockquote><h2 id="表单组件（Form）："><a href="#表单组件（Form）：" class="headerlink" title="表单组件（Form）："></a>表单组件（Form）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/button">button</a></p><p>按钮</p><p><a href="https://uniapp.dcloud.net.cn/component/checkbox">checkbox</a></p><p>多项选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/editor">editor</a></p><p>富文本输入框</p><p><a href="https://uniapp.dcloud.net.cn/component/form">form</a></p><p>表单</p><p><a href="https://uniapp.dcloud.net.cn/component/input">input</a></p><p>输入框</p><p><a href="https://uniapp.dcloud.net.cn/component/label">label</a></p><p>标签</p><p><a href="https://uniapp.dcloud.net.cn/component/picker">picker</a></p><p>弹出式列表选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/picker-view">picker-view</a></p><p>窗体内嵌式列表选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/radio">radio</a></p><p>单项选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/slider">slider</a></p><p>滑动选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/switch">switch</a></p><p>开关选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/textarea">textarea</a></p><p>多行文本输入框</p></blockquote><h2 id="路由与页面跳转（Navigation）："><a href="#路由与页面跳转（Navigation）：" class="headerlink" title="路由与页面跳转（Navigation）："></a>路由与页面跳转（Navigation）：</h2><blockquote><p>[!NOTE] 组件<br><a href="https://uniapp.dcloud.net.cn/component/navigator">navigator</a></p><p>页面链接。类似于HTML中的a标签</p><h2 id="媒体组件（Media）："><a href="#媒体组件（Media）：" class="headerlink" title="媒体组件（Media）："></a>媒体组件（Media）：</h2><p><a href="https://uniapp.dcloud.net.cn/component/audio">audio</a></p><p>音频</p><p><a href="https://uniapp.dcloud.net.cn/component/camera">camera</a></p><p>相机</p><p><a href="https://uniapp.dcloud.net.cn/component/image">image</a></p><p>图片</p><p><a href="https://uniapp.dcloud.net.cn/component/video">video</a></p><p>视频</p><p><a href="https://uniapp.dcloud.net.cn/component/live-player">live-player</a></p><p>直播播放</p><p><a href="https://uniapp.dcloud.net.cn/component/live-pusher">live-pusher</a></p><p>实时音视频录制，也称直播推流</p></blockquote><h2 id="地图（Map）："><a href="#地图（Map）：" class="headerlink" title="地图（Map）："></a>地图（Map）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/map">map</a></p><p>地图</p></blockquote><h2 id="画布（Canvas）："><a href="#画布（Canvas）：" class="headerlink" title="画布（Canvas）："></a>画布（Canvas）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/canvas">canvas</a></p><p>画布</p></blockquote><h2 id="webview（Web-view）："><a href="#webview（Web-view）：" class="headerlink" title="webview（Web-view）："></a>webview（Web-view）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/web-view">web-view</a></p><p>web浏览器组件</p></blockquote><blockquote><h2 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h2><p><a href="https://uniapp.dcloud.net.cn/component/ad">ad</a></p><p>广告组件</p><p><a href="https://uniapp.dcloud.net.cn/component/ad-draw">ad-draw</a></p><p>沉浸视频流广告组件</p></blockquote><h2 id="页面属性配置"><a href="#页面属性配置" class="headerlink" title="页面属性配置"></a>页面属性配置</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/custom-tab-bar">custom-tab-bar</a></p><p>底部tabbar自定义组件</p><p><a href="https://uniapp.dcloud.net.cn/component/navigation-bar">navigation-bar</a></p><p>页面顶部导航</p><p><a href="https://uniapp.dcloud.net.cn/component/page-meta">page-meta</a></p><p>页面属性配置节点</p></blockquote><h2 id="uniCloud"><a href="#uniCloud" class="headerlink" title="uniCloud"></a>uniCloud</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/uniCloud/unicloud-db">unicloud-db组件</a></p><p>uniCloud数据库访问和操作组件</p></blockquote>]]></content>
    
    
    <summary type="html">it is some basic usage of uni-app .</summary>
    
    
    
    <category term="Front_end_development" scheme="https://alleyf.github.io/categories/Front-end-development/"/>
    
    
    <category term="uni-app" scheme="https://alleyf.github.io/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>初识Vue</title>
    <link href="https://alleyf.github.io/2023/04/3dbbbdf5122f.html"/>
    <id>https://alleyf.github.io/2023/04/3dbbbdf5122f.html</id>
    <published>2023-04-16T08:29:16.000Z</published>
    <updated>2023-07-14T10:48:46.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-生命周期函数"><a href="#1-生命周期函数" class="headerlink" title="1. 生命周期函数"></a>1. 生命周期函数</h1><table><thead><tr><th>生命周期钩子函数</th><th>实例处于阶段</th><th>描述</th><th>能否获取到 el (this.$el)</th><th>能否获取到 data (this. Xxx)</th><th>能否使用 methods 中的方法 (this. Xxx ())</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td><td>实例已初始化，但数据观测，watch/event 事件回调还未配置</td><td>获取不到</td><td>不能</td><td>不能</td></tr><tr><td>created</td><td>创建后</td><td>已完成如下配置，数据观测 (data observer)，property 和方法的运算，watch/event 事件回调</td><td>获取不到</td><td>能</td><td>能</td></tr><tr><td>beforeMount</td><td>挂载前</td><td>dom 已初始化，但并未挂载和渲染</td><td>能</td><td>能</td><td>能</td></tr><tr><td>mounted</td><td>挂载后</td><td>dom 已完成挂载和渲染</td><td>能</td><td>能</td><td>能</td></tr><tr><td>beforeUpdate</td><td>更新前</td><td>数据已改变，但 dom 未更新</td><td>能</td><td>能</td><td>能</td></tr><tr><td>updated</td><td>更新后</td><td>dom 已更新</td><td>能</td><td>能</td><td>能</td></tr><tr><td>beforeDestroy</td><td>销毁前</td><td>实例销毁前，实例仍然可用</td><td>能</td><td>能</td><td>能</td></tr><tr><td>destroyed</td><td>销毁后</td><td>实例已销毁，所有指令被解绑，事件监听器被移除，子实例都被销毁</td><td>能</td><td>能</td><td>能</td></tr></tbody></table><h1 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h1><h2 id="声明式-API"><a href="#声明式-API" class="headerlink" title="声明式 API"></a>声明式 API</h2><blockquote><p>Vue 的核心功能是<em><strong>声明式渲染</strong></em>：通过扩展于标准 HTML 的模板语法，我们可以根据 JavaScript 的状态来描述 HTML 应该是什么样子的。当状态改变时，HTML 会自动更新。</p></blockquote><p>我们可以使用 <code>data</code> 组件选项来声明响应式状态，该选项应该是一个返回对象的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>message</code> 属性可以在模板中使用。下面展示了我们如何使用双花括号法，根据 <code>message</code> 的值来渲染动态文本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在双花括号中的内容并<strong>不只限于标识符或路径</strong>——我们可以使用任何<em><strong>有效的 JavaScript 表达式</strong></em>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="组合式-API"><a href="#组合式-API" class="headerlink" title="组合式 API"></a>组合式 API</h2><p>我们可以使用 Vue 的 <code>reactive()</code> API 来声明响应式状态。由 <code>reactive()</code> 创建的对象都是 JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>，其行为与普通对象一样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-property">count</span>) <span class="hljs-comment">// 0</span><br>counter.<span class="hljs-property">count</span>++<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br><code>reactive()</code> 只适用于对象 (包括数组和内置类型，如 <code>Map</code> 和 <code>Set</code>)。而另一个 API <code>ref()</code> 则可以接受任何值类型。<code>ref</code> 会返回一个包裹对象，并在 <code>.value</code> 属性下暴露内部值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> message = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message.<span class="hljs-property">value</span>) <span class="hljs-comment">// &quot;Hello World!&quot;</span><br>message.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;Changed&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>在组件的 <code>&lt;script setup&gt;</code> 块中声明的响应式状态，可以直接在模板中使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>count is: &#123;&#123; counter.count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用任何<em><strong>有效的 JavaScript 表达式</strong></em></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h1 id="3-基础语法"><a href="#3-基础语法" class="headerlink" title="3. 基础语法"></a>3. 基础语法</h1><h2 id="1-属性绑定"><a href="#1-属性绑定" class="headerlink" title="1. 属性绑定"></a>1. 属性绑定</h2><blockquote><p>双大括号只能进行文本插值，为了给 attribute 绑定一个动态值，需要使用 <code>v-bind</code> 指令, 可以缩写只用 <code>:</code> 表示属性绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态绑定多个属性"><a href="#动态绑定多个属性" class="headerlink" title="动态绑定多个属性"></a>动态绑定多个属性</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> objectOfAttrs = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;container&#x27;</span>,<br>  <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;wrapper&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过不带参数的 <code>v-bind</code>，你可以将它们绑定到单个元素上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;objectOfAttrs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;info:info,danger:danger&#125;&quot;</span>&gt;</span>我叫:&#123;&#123;name&#125;&#125;,年龄:&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">info</span>: <span class="hljs-literal">true</span>,  <br><span class="hljs-attr">danger</span>: <span class="hljs-literal">false</span>,  <br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[info,danger]&quot;</span>&gt;</span>我叫:&#123;&#123;name&#125;&#125;,年龄:&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">info</span>: <span class="hljs-string">&quot;c1&quot;</span>, <br><span class="hljs-attr">danger</span>: <span class="hljs-string">&quot;c2&quot;</span>,  <br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><blockquote><p>可以在绑定的表达式中使用一个组件暴露的方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;toTitleDate(date)&quot;</span>&gt;</span><br>  &#123;&#123; formatDate(date) &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-事件监听"><a href="#2-事件监听" class="headerlink" title="2. 事件监听"></a>2. 事件监听</h2><blockquote><p>使用 <code>v-on</code> 指令监听 DOM 事件，可以简写为 <code>@</code>，表示事件监听</p></blockquote><h3 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 更新组件状态</span><br>  count.<span class="hljs-property">value</span>++<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="带传参"><a href="#带传参" class="headerlink" title="带传参"></a>带传参</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">mouseover</span>=<span class="hljs-string">&quot;dosomething(&#x27;过来了&#x27;)&quot;</span> @<span class="hljs-attr">mouseout</span>=<span class="hljs-string">&quot;dosomething(&#x27;离开了&#x27;)&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;  <br><span class="hljs-attr">dosomething</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>)&#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-表单绑定"><a href="#3-表单绑定" class="headerlink" title="3. 表单绑定"></a>3. 表单绑定</h2><blockquote><p>同时使用 <code>v-bind</code> 和 <code>v-on</code> 来在表单的输入元素上创建双向绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;onInput&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onInput</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// v-on 处理函数会接收原生 DOM 事件</span><br>  <span class="hljs-comment">// 作为其参数。</span><br>  text.<span class="hljs-property">value</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>简化双向绑定，Vue 提供了一个 <code>v-model</code> 指令，它实际上是上述操作的语法糖</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips</p><ol><li><code>v-model</code> 会将被绑定的值与 <code>&lt;input&gt;</code> 的值自动同步</li><li><code>v-model</code> 不仅支持文本输入框，也支持诸如多选框、单选框、下拉框之类的输入类型</li></ol></blockquote><p><strong>完整 demo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>const text = ref(&#x27;&#x27;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;input v-model=&quot;text&quot; placeholder=&quot;Type here&quot;&gt;<br>  &lt;p&gt;&#123;&#123; text &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><blockquote><p>demo</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.2.47/vue.global.min.js&quot;&gt;&lt;/script&gt;--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">  </span><br><span class="language-css"><span class="hljs-selector-class">.info</span> &#123;  </span><br><span class="language-css"><span class="hljs-attribute">color</span>: aquamarine;  </span><br><span class="language-css">&#125;  </span><br><span class="language-css"><span class="hljs-selector-class">.danger</span> &#123;  </span><br><span class="language-css"><span class="hljs-attribute">color</span>: red;  </span><br><span class="language-css">&#125;  </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br>男：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>  <br>女：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br>篮球：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>  <br>足球：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>  <br>排球：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.city&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c3&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c4&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.field&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f1&quot;</span>&gt;</span>前端<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f2&quot;</span>&gt;</span>后端<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f3&quot;</span>&gt;</span>运维<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f4&quot;</span>&gt;</span>算法<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.other&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clickme&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript">info : &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;1&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">hobby</span>: [<span class="hljs-string">&quot;h1&quot;</span>],  </span><br><span class="language-javascript"><span class="hljs-attr">city</span>: <span class="hljs-string">&quot;c1&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">field</span>: [<span class="hljs-string">&quot;f1&quot;</span>],  </span><br><span class="language-javascript"><span class="hljs-attr">other</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">clickme</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>)  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="4-条件渲染"><a href="#4-条件渲染" class="headerlink" title="4. 条件渲染"></a>4. 条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><blockquote><p>使用 <code>v-if</code> 指令来==<strong>有条件地渲染元素</strong>==（不一定渲染）, 也可以使用 <code>v-else</code> 和 <code>v-else-if</code> 来表示其他的条件分支</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;<span class="hljs-title class_">Vue</span> is awesome!&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>Oh no 😢<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><blockquote><p>v-show 根据**==变量的真假==<strong>决定是否显示该标签（</strong><em>一定会渲染但不一定显示</em>**）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=false&quot;</span>&gt;</span>用户名登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=true&quot;</span>&gt;</span>手机号登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">issms</span>: <span class="hljs-literal">false</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-列表渲染"><a href="#5-列表渲染" class="headerlink" title="5. 列表渲染"></a>5. 列表渲染</h2><blockquote><p>使用 <code>v-for</code> 指令来渲染一个基于源数组的列表</p></blockquote><h3 id="无索引"><a href="#无索引" class="headerlink" title="无索引"></a>无索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;ul&gt;<br>  &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt;<br>    &#123;&#123; todo.text &#125;&#125;<br>  &lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><blockquote><ol><li><code>todo</code> 是一个局部变量，表示当前正在迭代的数组元素。它只能在 <code>v-for</code> 所绑定的元素上或是其内部访问，就像函数的作用域一样.</li><li>key 属性将它（唯一标识主键）作为<a href="https://cn.vuejs.org/api/built-in-special-attributes.html#key">特殊的 <code>key</code> attribute</a> 绑定到每个 <code>&lt;li&gt;</code></li></ol></blockquote><blockquote><p>更新列表有两种方式：<br>    1. 在源数组上调用变更方法：<br>        <code>todos.value.push(newTodo)</code><br>      2. 使用新的数组替代原数组：<br>        <code>todos.value = todos.value.filter(/* ... */)</code> </p></blockquote><p>完整 demo（实现列表动态增删）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>// 给每个 todo 对象一个唯一的 id<br>let id = 0<br>const newTodo = ref(&#x27;&#x27;)<br>const todos = ref([<br>  &#123; id: id++, text: &#x27;Learn HTML&#x27; &#125;,<br>  &#123; id: id++, text: &#x27;Learn JavaScript&#x27; &#125;,<br>  &#123; id: id++, text: &#x27;Learn Vue&#x27; &#125;<br>])<br>function addTodo() &#123;<br>  // ...<br>  todos.value.push(&#123;id:id++,text:newTodo.value&#125;)<br>  newTodo.value = &#x27;&#x27;<br>&#125;<br>function removeTodo(todo) &#123;<br>  // 方法1<br>  todos.value.pop(todo)<br>  // 方法2<br>  todos.value = todos.value.filter((t) =&gt; t !== todo)<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;<br>    &lt;input v-model=&quot;newTodo&quot;&gt;<br>    &lt;button&gt;Add Todo&lt;/button&gt;    <br>  &lt;/form&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt;<br>      &#123;&#123; todo.text &#125;&#125;<br>      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="有索引"><a href="#有索引" class="headerlink" title="有索引"></a>有索引</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(todo,index) in todos&quot;</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&#123;&#123;index&#125;&#125;</span>&gt;</span><br>    &#123;&#123; todo &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="有键值"><a href="#有键值" class="headerlink" title="有键值"></a>有键值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key) in item&quot;</span>&gt;</span><br>    &#123;&#123; key &#125;&#125;:&#123;&#123;value&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-计算属性"><a href="#6-计算属性" class="headerlink" title="6. 计算属性"></a>6. 计算属性</h2><blockquote><ol><li><a href="https://cn.vuejs.org/guide/essentials/computed.html"><code>computed()</code></a>。它可以让我们创建一个计算属性 ref，这个 ref 会动态地根据其他响应式数据源来计算其 <code>.value</code></li><li>computed<code>(计算属性)</code>可用于快速计算视图（View）中显示的属性。这些计算将被<strong>缓存</strong>，并且只在需要时更新。computed设置的初衷是能够<strong>解决复杂的计算</strong>，而不是直接在模板字符串里进行运算。</li></ol></blockquote><p>实现显示（隐藏）已完成的todos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, computed &#125; from &#x27;vue&#x27;<br>let id = 0<br>const newTodo = ref(&#x27;&#x27;)<br>const hideCompleted = ref(false)<br>const todos = ref([<br>  &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;,<br>  &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;,<br>  &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;<br>])<br>const filteredTodos = computed(() =&gt; &#123;<br>  return hideCompleted.value<br>    ? todos.value.filter((t) =&gt; !t.done)<br>    : todos.value<br>&#125;)<br>function addTodo() &#123;<br>  todos.value.push(&#123; id: id++, text: newTodo.value, done: false &#125;)<br>  newTodo.value = &#x27;&#x27;<br>&#125;<br>function removeTodo(todo) &#123;<br>  todos.value = todos.value.filter((t) =&gt; t !== todo)<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;<br>    &lt;input v-model=&quot;newTodo&quot;&gt;<br>    &lt;button&gt;Add Todo&lt;/button&gt;<br>  &lt;/form&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;todo in filteredTodos&quot; :key=&quot;todo.id&quot;&gt;<br>      &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt;<br>      &lt;span :class=&quot;&#123; done: todo.done &#125;&quot;&gt;&#123;&#123; todo.text &#125;&#125;&lt;/span&gt;<br>      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>  &lt;button @click=&quot;hideCompleted = !hideCompleted&quot;&gt;<br>    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br>&lt;style&gt;<br>.done &#123;<br>  text-decoration: line-through;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="7-文本插值"><a href="#7-文本插值" class="headerlink" title="7. 文本插值"></a>7. 文本插值</h2><blockquote><p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>双大括号标签会被替换为<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#declaring-reactive-state">相应组件实例中</a> <code>msg</code> 属性的值。同时每次 <code>msg</code> 属性更改时它也会同步更新。</p></blockquote><h2 id="8-原始-HTML"><a href="#8-原始-HTML" class="headerlink" title="8.原始 HTML"></a>8.原始 HTML</h2><blockquote><p>双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，需要使用 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-html"><code>v-html</code> 指令</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="4-Demo-1表格增删"><a href="#4-Demo-1表格增删" class="headerlink" title="4. Demo 1表格增删"></a>4. Demo 1表格增删</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;adduser&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(user,uid) in users&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.pwd&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.name!=&#x27;&#x27; &amp;&amp; user.pwd!=&#x27;&#x27;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deluser(uid)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">users</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-string">&quot;&quot;</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">adduser</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">let</span> userinfo = &#123;<span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">pwd</span>&#125;;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">push</span>(userinfo);  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>=<span class="hljs-string">&quot;&quot;</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">pwd</span>=<span class="hljs-string">&quot;&quot;</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userinfo);  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">deluser</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">uid</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">splice</span>(uid,<span class="hljs-number">1</span>);  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-Demo-2-登录（axios）"><a href="#5-Demo-2-登录（axios）" class="headerlink" title="5.Demo 2 登录（axios）"></a>5.Demo 2 登录（axios）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=false&quot;</span>&gt;</span>用户名登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=true&quot;</span>&gt;</span>手机号登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sms.phone&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>验证码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;验证码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sms.code&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">issms</span>: <span class="hljs-literal">false</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">info</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">sms</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">code</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">login</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">let</span> dataobj = <span class="hljs-variable language_">this</span>.<span class="hljs-property">issms</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">sms</span> : <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>;  </span><br><span class="language-javascript"><span class="hljs-title function_">axios</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost/login&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">parameters</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: dataobj,  </span><br><span class="language-javascript"><span class="hljs-attr">headers</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);  </span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-组件"><a href="#6-组件" class="headerlink" title="6. 组件"></a>6. 组件</h1><blockquote><p>提高相同代码的复用率。</p></blockquote><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><blockquote><pre><code class="hljs">局部组件需要挂载到 Vue 根组件上，***components: &#123;  alias: component&#125;  </code></pre></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo4<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- 引入局部子组件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">  </span></span><br><span class="language-xml"><span class="language-handlebars">const login = &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">data: function () &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">msg: &quot;局部组件&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">username: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">pwd: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">template: `  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars">`,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;;  </span></span><br><span class="language-xml"><span class="language-handlebars">var app = new Vue(&#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">el: &quot;#app&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">data: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">components: &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">login: login,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)  </span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><blockquote><pre><code class="hljs">全局子组件不用挂载到 Vue 上，直接用***Vue. Component (&#39;component_name&#39;,&#123;&#125;）***</code></pre></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo5<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- 引入全局子组件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">  </span></span><br><span class="language-xml"><span class="language-handlebars">Vue.component(&#x27;login&#x27;, &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">data: function () &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">msg: &quot;局部组件&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">username: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">pwd: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">template: `  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars">`,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);  </span></span><br><span class="language-xml"><span class="language-handlebars">var app = new Vue(&#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">el: &quot;#app&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">data: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)  </span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="7-路由"><a href="#7-路由" class="headerlink" title="7. 路由"></a>7. 路由</h1><blockquote><p>引入 vue-router：<br><code> &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.1.6/vue-router.global.min.js&quot;&gt;&lt;/script&gt;</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@3.5.3/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/course&quot;</span>&gt;</span>课程<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;首页组件&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Course</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;课程组件&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">routes</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/course&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Course</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;);  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">components</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-title class_">Home</span>: <span class="hljs-title class_">Home</span>,  </span><br><span class="language-javascript"><span class="hljs-title class_">Course</span>: <span class="hljs-title class_">Course</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">router</span>: router  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="8-Demo-3-路由使用"><a href="#8-Demo-3-路由使用" class="headerlink" title="8.Demo 3 路由使用"></a>8.Demo 3 路由使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@3.5.3/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">imgls</span>: [],  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-title function_">axios</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://picsum.photos/v2/list&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">headers</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>  </span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span> = res.<span class="hljs-property">data</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span>, res.<span class="hljs-property">data</span>);  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-comment">// console.log(error);  </span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span>)  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div class=&quot;red&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div v-for=&quot;img in imgls&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;a :href=&quot;img.download_url&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;img :src=&quot;img.url&quot; style=&quot;align-content: center&quot; alt=&quot;加载图片失败&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/a&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">routes</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;);  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">components</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-title class_">Home</span>: <span class="hljs-title class_">Home</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">router</span>: router,  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="9-Element-UI-使用"><a href="#9-Element-UI-使用" class="headerlink" title="9. Element-UI 使用"></a>9. Element-UI 使用</h1><blockquote><p>Element 是国内饿了么公司提供的一套开源前端框架，简洁优雅，提供了 Vue、React、Angular等多个版本。<br>文档地址: <a href="https://element-plus.org/zh-CN/#/zh-CN">一个 Vue 3 UI 框架 | Element Plus</a><br>安装: npm i element-ui<br>引入 Element：<br>main.js (vue 2):</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>:#app,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>);<br></code></pre></td></tr></table></figure><p>main. js (vue 3):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="第三方图标库"><a href="#第三方图标库" class="headerlink" title="第三方图标库"></a>第三方图标库</h2><p>由于 Element UI 提供的字体图符较少，一般会采用其他图表库，如著名的 Font<br>Awesome<br>Font Awesome 提供了 675 个可缩放的矢量图标，可以使用 cSS 所提供的所有特<br>性对它们进行更改，包括大小、颜色、阴影或者其他任何支持的效果。<br>文档地址: <a href="http://fontawesome.dashgame.com/">http://fontawesome.dashgame.com/</a><br>安装: <code>npm i font-awesome</code><br>使用: <code>import &#39;font-awesome/css/font-awesome.min.css&#39;</code></p><h1 id="10-Axios"><a href="#10-Axios" class="headerlink" title="10.Axios"></a>10.Axios</h1><h2 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h2><blockquote><p>Axios 是一个基于 promise 网络请求库，作用于 node. js 和浏览器中。<br>Axios 在浏览器端使用 XMLHttpRequests 发送网络请求，并能自动完成 JSON<br>数据的转换。<br>安装: npm install axios<br>地址: <a href="https://www.axios-http.cn/">https://www.axios-http.cn/</a></p></blockquote><ol><li>Get 请求：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//向给定ID的用户发起请求</span><br>axios.<span class="hljs-title function_">get</span>(/user?<span class="hljs-variable constant_">ID</span>=<span class="hljs-number">12345</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string"> .then(function(response)&#123;</span><br><span class="hljs-string">   //处理成功情况</span><br><span class="hljs-string">   console.log(response);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .catch(function (error)(</span><br><span class="hljs-string">   //处理错误情况</span><br><span class="hljs-string">   console.log(error);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function （）&#123; </span><br><span class="hljs-string">  //总是会执行</span><br><span class="hljs-string"> &#125;);</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">/／上述请求也可以按以下方式完成（可选）<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user&#x27;,&#123;</span><br><span class="hljs-string">   params:&#123;</span><br><span class="hljs-string">    ID:12345</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function (response)&#123;</span><br><span class="hljs-string">   console.log(response);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .catch(function (error)&#123;</span><br><span class="hljs-string">   console.log(error);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function ()&#123; </span><br><span class="hljs-string">  //总是会执行</span><br><span class="hljs-string"> &#125;);</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><ol start="2"><li>POST 请求：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>   <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;Fred&#x27;</span>,<br>   <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;Flintstone&#x27;</span><br>&#125;)<br> .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;)<br> .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br> &#125;);<br><br></code></pre></td></tr></table></figure><ol start="3"><li>异步回调问题（async/await）：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//支持async/await用法</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span>) (<br> <span class="hljs-keyword">try</span> (<br>   <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user?ID=12345&#x27;</span>);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br> &#125; <span class="hljs-keyword">catch</span> (error)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br><br></code></pre></td></tr></table></figure><ol start="4"><li>其他请求方式：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//发起一个post请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br> <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br> <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/user/12345&#x27;,</span><br><span class="hljs-string"> data: &#123;</span><br><span class="hljs-string">   firstName: &quot;</span><span class="hljs-title class_">Fred</span><span class="hljs-string">&#x27;,</span><br><span class="hljs-string">   lastName:&quot;Flintstone&#x27;</span><br> &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><pre><code class="hljs">axios.get (url, configl)axios.delete (url[, config])axios.head (uri[, config))axios.options (url, config])axios.post (url, datal, configl)axios.put (url, datal, config]l)axios.patch (url, datal, config]l)</code></pre><h2 id="2-与-Vue-整合"><a href="#2-与-Vue-整合" class="headerlink" title="2. 与 Vue 整合"></a>2. 与 Vue 整合</h2><h2 id="3-跨域"><a href="#3-跨域" class="headerlink" title="3. 跨域"></a>3. 跨域</h2><blockquote><ol><li>为了保证浏览器的安全，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源，称为同源策略，同源策略是浏览器安全的基石</li><li>同源策略 （Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能</li><li>所谓同源 (即指在同一个域) 就是两个页面具有相同的协议（protocol），主机 (host) 和端口号  (port)</li><li>当一个请求 url 的协议、域名、端口三者之间任意一个与当前页面 url 不同即为跨域，此时无法读取非同源网页的 Cookie，无法向非同源地址发送 AJAX 请求</li></ol></blockquote><p>解决方案：</p><ul><li>CORS（Cross-Origin Resource Sharing）是由 W 3 C 制定的一种跨域资源共享技术标准，其目的就是为了解决前端的跨域请求。</li><li>CORS 可以在不破坏即有规则的情况下，通过后端服务器实现 CORS 接口，从而实现跨域通信。</li><li>CORS 将请求分为两类：简单请求和非简单请求，分别对跨域通信提供了支持。</li></ul><h3 id="1-Spring-Boot-中配置-CORS"><a href="#1-Spring-Boot-中配置-CORS" class="headerlink" title="1. Spring Boot 中配置 CORS"></a>1. Spring Boot 中配置 CORS</h3><p>在传统的 Java EE 开发中，可以通过过滤器统一配置，而 Spring Boot 中对此则提供了更加简洁的解决方案<br><strong>方法 1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> (<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> (<br>     registry.addMapping（<span class="hljs-string">&quot;/**&quot;</span>）<span class="hljs-comment">//允许跨域访问的路径</span><br>      .allowedorigins（<span class="hljs-string">&quot;*&quot;</span>）<span class="hljs-comment">//允许跨域访问的源</span><br>.allowedMethods(<span class="hljs-string">&quot;POST&quot;</span>，<span class="hljs-string">&quot;GET&quot;</span>，<span class="hljs-string">&quot;PUT&quot;</span>，<span class="hljs-string">&quot;OPTIONS&quot;</span>，<span class="hljs-string">&quot;DELETE&quot;</span>）<span class="hljs-comment">//允许请求方法</span><br>      .maxAge（<span class="hljs-number">168000</span>）/／预检间隔时间<br>      .allowedHeaders（<span class="hljs-string">&quot;*&quot;</span>）<span class="hljs-comment">//允许头部设置</span><br>      .allowCredentials（<span class="hljs-literal">true</span>）；<span class="hljs-comment">//是否发送cookie</span><br><br></code></pre></td></tr></table></figure><p><strong>方法 2：</strong><br>给控制器类前加 CrossOrigin 注解使用默认跨域配置<br><font color="#ff0000">@CrossOrigin</font></p><h2 id="4-全局配置-Axios"><a href="#4-全局配置-Axios" class="headerlink" title="4. 全局配置 Axios"></a>4. 全局配置 Axios</h2><blockquote><p>在实际项目开发中，几乎每个组件中都会用到 axios 发起数据请求。此时会遇到如下两个问题:<br>每个组件中都需要导入 axios<br>每次发请求都需要填写完整的请求路径<br>可以通过全局配置的方式解决上述问题：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//配置请求根路径</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;http://api.com&#x27;</span><br><br><span class="hljs-comment">//将 axios 作为全局的自定义属性，每个组件可以在内部直接访问 (Vue3)</span><br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$http</span> = axios<br><br><span class="hljs-comment">//将 axios 作为全局的自定义属性，每个组件可以在内部直接访问 (Vue2)</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$http</span> = axios<br></code></pre></td></tr></table></figure><h1 id="11-VueRouter"><a href="#11-VueRouter" class="headerlink" title="11. VueRouter"></a>11. VueRouter</h1><h2 id="1-安装与使用"><a href="#1-安装与使用" class="headerlink" title="1. 安装与使用"></a>1. 安装与使用</h2><h2 id="2-参数传递"><a href="#2-参数传递" class="headerlink" title="2. 参数传递"></a>2. 参数传递</h2><h2 id="3-子路由"><a href="#3-子路由" class="headerlink" title="3. 子路由"></a>3. 子路由</h2><h2 id="4-导航首位"><a href="#4-导航首位" class="headerlink" title="4. 导航首位"></a>4. 导航首位</h2>]]></content>
    
    
    <summary type="html">it is some basic usage of vue.</summary>
    
    
    
    <category term="Front_end_development" scheme="https://alleyf.github.io/categories/Front-end-development/"/>
    
    
    <category term="vue" scheme="https://alleyf.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>考研单词</title>
    <link href="https://alleyf.github.io/2023/03/eda87d97e23c.html"/>
    <id>https://alleyf.github.io/2023/03/eda87d97e23c.html</id>
    <published>2023-03-17T11:34:12.000Z</published>
    <updated>2023-03-27T13:06:44.790Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>掌握状态</th><th>英文</th><th>中文</th></tr></thead></table><ul><li><input disabled="" type="checkbox"> ponder  沉思；考虑</li><li><input disabled="" type="checkbox"> warfare 战争</li><li><input disabled="" type="checkbox"> weird 古怪的；怪异的</li><li><input disabled="" type="checkbox"> orienttation 方向；目标；取向</li><li><input disabled="" type="checkbox"> ballet 芭蕾舞</li><li><input disabled="" type="checkbox"> trench 沟渠；战壕；海沟</li><li><input disabled="" type="checkbox"> fossil 化石；老古董</li><li><input disabled="" type="checkbox"> sizable 相当大的</li><li><input disabled="" type="checkbox"> downsize 裁员</li><li><input disabled="" type="checkbox"> </li></ul>]]></content>
    
    
    <summary type="html">some reciting words in English.</summary>
    
    
    
    <category term="英语学习" scheme="https://alleyf.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="English" scheme="https://alleyf.github.io/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>图像分类</title>
    <link href="https://alleyf.github.io/2023/03/73453d2eb27d.html"/>
    <id>https://alleyf.github.io/2023/03/73453d2eb27d.html</id>
    <published>2023-03-17T11:11:25.000Z</published>
    <updated>2023-04-14T05:10:39.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><blockquote><ul><li><p>LeNet：Yan LeCun 等人于 1998 年第一次将卷积神经网络应用到图像分类任务上[1]，在手写数字识别任务上取得了巨大成功。</p></li><li><p>AlexNet：Alex Krizhevsky 等人在 2012 年提出了 AlexNet[2], 并应用在大尺寸图片数据集 ImageNet 上，获得了 2012 年 ImageNet 比赛冠军(ImageNet Large Scale Visual Recognition Challenge，ILSVRC）。</p></li><li><p>VGG：Simonyan 和 Zisserman 于 2014 年提出了 VGG 网络结构[3]，是当前最流行的卷积神经网络之一，由于其结构简单、应用性极强而深受广大研究者欢迎。</p></li><li><p>GoogLeNet：Christian Szegedy 等人在 2014 提出了 GoogLeNet[4]，并取得了 2014 年 ImageNet 比赛冠军。</p></li><li><p>ResNet：Kaiming He 等人在 2015 年提出了 ResNet[5]，通过引入残差模块加深网络层数，在 ImagNet 数据集上的错误率降低到 3.6%，超越了人眼识别水平。ResNet 的设计思想深刻地影响了后来的深度神经网络的设计。</p></li></ul></blockquote><h2 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h2><center><img src="https://ai-studio-static-online.cdn.bcebos.com/82e4124e2e6a4231bcde17e086bc86ba732d3e81dcd7415f86fb4ef050aa7772" width = "800"></center><center><br>图1：LeNet模型网络结构示意图</center><p><strong>【提示】：</strong></p><blockquote><p>[!NOTE] Tips<br>卷积层的输出特征图如何当作全连接层的输入使用呢？</p><p>卷积层的输出数据格式是 $[N, C, H, W]$，在输入全连接层的时候，会自动将数据拉平，</p><p>也就是对每个样本，自动将其转化为长度为 $K$ 的向量，</p><p>其中 $K = C \times H \times W$，一个 mini-batch 的数据维度变成了 $N\times K$ 的二维向量。</p></blockquote><hr><h3 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><h4 id="定义网络结构"><a href="#定义网络结构" class="headerlink" title="定义网络结构"></a>定义网络结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入需要的包</span><br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> Conv2D, MaxPool2D, Linear<br><br><br><br><span class="hljs-comment">## 组网</span><br><br><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><br><br><br><span class="hljs-comment"># 定义 LeNet 网络结构</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LeNet</span>(paddle.nn.Layer):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_classes=<span class="hljs-number">1</span></span>):<br><br>        <span class="hljs-built_in">super</span>(LeNet, self).__init__()<br><br>        <span class="hljs-comment"># 创建卷积和池化层</span><br>        <span class="hljs-comment"># 创建第1个卷积层</span><br><br>        self.conv1 = Conv2D(in_channels=<span class="hljs-number">1</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">5</span>)<br><br>        self.max_pool1 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：池化层未改变通道数；当前通道数为6</span><br>        <span class="hljs-comment"># 创建第2个卷积层</span><br><br>        self.conv2 = Conv2D(in_channels=<span class="hljs-number">6</span>, out_channels=<span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">5</span>)<br><br>        self.max_pool2 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 创建第3个卷积层</span><br><br>        self.conv3 = Conv2D(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">120</span>, kernel_size=<span class="hljs-number">4</span>)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span><br>        <span class="hljs-comment"># 输入size是[28,28]，经过三次卷积和两次池化之后，C*H*W等于120</span><br><br>        self.fc1 = Linear(in_features=<span class="hljs-number">120</span>, out_features=<span class="hljs-number">64</span>)<br><br>        <span class="hljs-comment"># 创建全连接层，第一个全连接层的输出神经元个数为64， 第二个全连接层输出神经元个数为分类标签的类别数</span><br><br>        self.fc2 = Linear(in_features=<span class="hljs-number">64</span>, out_features=num_classes)<br><br>    <span class="hljs-comment"># 网络的前向计算过程</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br><br>        x = self.conv1(x)<br><br>        <span class="hljs-comment"># 每个卷积层使用Sigmoid激活函数，后面跟着一个2x2的池化</span><br><br>        x = F.sigmoid(x)<br><br>        x = self.max_pool1(x)<br><br>        x = F.sigmoid(x)<br><br>        x = self.conv2(x)<br><br>        x = self.max_pool2(x)<br><br>        x = self.conv3(x)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span><br><br>        x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br><br>        x = self.fc1(x)<br><br>        x = F.sigmoid(x)<br><br>        x = self.fc2(x)<br><br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h4 id="查看网络各层形状"><a href="#查看网络各层形状" class="headerlink" title="查看网络各层形状"></a>查看网络各层形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入数据形状是 [N, 1, H, W]</span><br><br><span class="hljs-comment"># 这里用np.random创建一个随机数组作为输入数据</span><br><br>x = np.random.randn(*[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>])<br><br>x = x.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><br>  <br><br><span class="hljs-comment"># 创建LeNet类的实例，指定模型名称和分类的类别数目</span><br><br>model = LeNet(num_classes=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 通过调用LeNet从基类继承的sublayers()函数，</span><br><br><span class="hljs-comment"># 查看LeNet中所包含的子层</span><br><br><span class="hljs-built_in">print</span>(model.sublayers())<br><br>x = paddle.to_tensor(x)<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> model.sublayers():<br><br>    <span class="hljs-comment"># item是LeNet类中的一个子层</span><br><br>    <span class="hljs-comment"># 查看经过子层之后的输出数据形状</span><br><br>    <span class="hljs-keyword">try</span>:<br><br>        x = item(x)<br><br>    <span class="hljs-keyword">except</span>:<br><br>        x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br><br>        x = item(x)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item.parameters())==<span class="hljs-number">2</span>:<br><br>        <span class="hljs-comment"># 查看卷积和全连接层的数据和参数的形状，</span><br><br>        <span class="hljs-comment"># 其中item.parameters()[0]是权重参数w，item.parameters()[1]是偏置参数b</span><br><br>        <span class="hljs-built_in">print</span>(item.full_name(), x.shape, item.parameters()[<span class="hljs-number">0</span>].shape, item.parameters()[<span class="hljs-number">1</span>].shape)<br><br>    <span class="hljs-keyword">else</span>:<br><br>        <span class="hljs-comment"># 池化层没有参数</span><br><br>        <span class="hljs-built_in">print</span>(item.full_name(), x.shape)<br></code></pre></td></tr></table></figure><h4 id="数据读取模型训练"><a href="#数据读取模型训练" class="headerlink" title="数据读取模型训练"></a>数据读取模型训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># LeNet 识别手写数字</span><br><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">from</span> paddle.vision.transforms <span class="hljs-keyword">import</span> ToTensor<br><br><span class="hljs-keyword">from</span> paddle.vision.datasets <span class="hljs-keyword">import</span> MNIST<br><br>  <br><br><span class="hljs-comment"># 定义训练过程</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model, opt, train_loader, valid_loader</span>):<br><br>    <span class="hljs-comment"># 开启0号GPU训练</span><br><br>    use_gpu = <span class="hljs-literal">True</span><br><br>    paddle.device.set_device(<span class="hljs-string">&#x27;gpu:0&#x27;</span>) <span class="hljs-keyword">if</span> use_gpu <span class="hljs-keyword">else</span> paddle.device.set_device(<span class="hljs-string">&#x27;cpu&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start training ... &#x27;</span>)<br><br>    model.train()<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br><br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br><br>            img = data[<span class="hljs-number">0</span>]<br><br>            label = data[<span class="hljs-number">1</span>] <br><br>            <span class="hljs-comment"># 计算模型输出</span><br><br>            logits = model(img)<br><br>            <span class="hljs-comment"># 计算损失函数</span><br><br>            loss_func = paddle.nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br>            loss = loss_func(logits, label)<br><br>            avg_loss = paddle.mean(loss)<br><br>  <br><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">2000</span> == <span class="hljs-number">0</span>:<br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch_id: &#123;&#125;, loss is: &#123;:.4f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch, batch_id, <span class="hljs-built_in">float</span>(avg_loss.numpy())))<br><br>            avg_loss.backward()<br><br>            opt.step()<br><br>            opt.clear_grad()<br><br>  <br><br>        model.<span class="hljs-built_in">eval</span>()<br><br>        accuracies = []<br><br>        losses = []<br><br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(valid_loader()):<br><br>            img = data[<span class="hljs-number">0</span>]<br><br>            label = data[<span class="hljs-number">1</span>] <br><br>            <span class="hljs-comment"># 计算模型输出</span><br><br>            logits = model(img)<br><br>            pred = F.softmax(logits)<br><br>            <span class="hljs-comment"># 计算损失函数</span><br><br>            loss_func = paddle.nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br>            loss = loss_func(logits, label)<br><br>            acc = paddle.metric.accuracy(pred, label)<br><br>            accuracies.append(acc.numpy())<br><br>            losses.append(loss.numpy())<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[validation] accuracy/loss: &#123;:.4f&#125;/&#123;:.4f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(np.mean(accuracies), np.mean(losses)))<br><br>        model.train()<br><br>  <br><br>    <span class="hljs-comment"># 保存模型参数</span><br><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;mnist.pdparams&#x27;</span>)<br><br>  <br>  <br><br><span class="hljs-comment"># 创建模型</span><br><br>model = LeNet(num_classes=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 设置迭代轮数</span><br><br>EPOCH_NUM = <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 设置优化器为Momentum，学习率为0.001</span><br><br>opt = paddle.optimizer.Momentum(learning_rate=<span class="hljs-number">0.001</span>, momentum=<span class="hljs-number">0.9</span>, parameters=model.parameters())<br><br><span class="hljs-comment"># 定义数据读取器</span><br><br>train_loader = paddle.io.DataLoader(MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>, transform=ToTensor()), batch_size=<span class="hljs-number">10</span>, shuffle=<span class="hljs-literal">True</span>)<br><br>valid_loader = paddle.io.DataLoader(MNIST(mode=<span class="hljs-string">&#x27;test&#x27;</span>, transform=ToTensor()), batch_size=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 启动训练过程</span><br><br>train(model, opt, train_loader, valid_loader)<br><br></code></pre></td></tr></table></figure><hr><h1 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h1><blockquote><p>解决网络层数加深后模型效果没有提升。</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="残差块"><a href="#残差块" class="headerlink" title="残差块"></a>残差块</h3><p>实现方式：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230409204947.png" alt="image.png|250"></p><blockquote><p>一般残差块输出通道数为输入通道数的==四倍==。</p></blockquote><h3 id="ResNet-50"><a href="#ResNet-50" class="headerlink" title="ResNet-50"></a>ResNet-50</h3><blockquote><p> depth = <em><strong>[3,4,6,3]</strong></em><br> 表示 c2 有 3 个残差块，c 3 有 4 个，c 4 有 6 个，c 5 有 3 个。<br> <img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230409212006.png" alt="image.png|525"></p></blockquote><h3 id="飞浆高层-API"><a href="#飞浆高层-API" class="headerlink" title="飞浆高层 API:"></a>飞浆高层 API:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#从paddle.vis ion.models模块中import残差网络，VGG网络，LeNet网络</span><br><span class="hljs-keyword">from</span> paddle.vision.models <span class="hljs-keyword">import</span> resnet50, v9g16, LeNet<br><span class="hljs-keyword">from</span> paddle.vision.datasets <span class="hljs-keyword">import</span> Cifar10 <br><span class="hljs-keyword">from</span> paddle.optimizer <span class="hljs-keyword">import</span> Momentum<br><span class="hljs-keyword">from</span> paddle.regularizer <span class="hljs-keyword">import</span> L2Decay<br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> CrossEnt ropyLoss<br><span class="hljs-keyword">from</span> paddle.metric <span class="hljs-keyword">import</span> Accuracy<br><span class="hljs-keyword">from</span> paddle.vision. transforms <span class="hljs-keyword">import</span> Transpose<br><span class="hljs-comment">#确保从paddle.vis ion.datasets. Cifar10中加载的图像数据是np. ndarray类型</span><br>paddle.vision.set_image_backend( <span class="hljs-string">&#x27;cv2&#x27;</span> )<br><span class="hljs-comment">#调用resnet50模型</span><br>model = padd le .Model( resnet50(pretrained=<span class="hljs-literal">False</span>, num_classes=<span class="hljs-number">10</span>&#125; )<br><span class="hljs-comment">#使用Cifar10数据集</span><br>train_dataset = Cifar10(mode=<span class="hljs-string">&#x27;train&#x27;</span>, transform= =Transpose() )<br>val_dataset = Cifar10 (mode=<span class="hljs-string">&#x27;test&#x27;</span>, transform=Transpose())<br><span class="hljs-comment">#定义优化器</span><br>optimizer = Momentum( learning_rate=<span class="hljs-number">0.01</span>, momentum=<span class="hljs-number">0.9</span>,<br>weight_decay = L2Decay(<span class="hljs-number">1e-4</span>),<br>parameters = model. parameters())<br><span class="hljs-comment">#进行训练前准备</span><br>model.prepare(optimizer, CrossEntropyLoss(), Accuracy(topk=(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)))<br><span class="hljs-comment">#启动训练</span><br>model.fit(train_dataset ,<br>val_dataset ,<br>epochs=<span class="hljs-number">50</span>,<br>batch_size=<span class="hljs-number">64</span>,<br>save_dir=*<span class="hljs-string">&quot;./output&quot;</span>,<br>num_workers=<span class="hljs-number">8</span> )<br> <br></code></pre></td></tr></table></figure><hr><h2 id="图像分类-ResNet-实战：眼疾识别分类"><a href="#图像分类-ResNet-实战：眼疾识别分类" class="headerlink" title="图像分类 ResNet 实战：眼疾识别分类"></a>图像分类 ResNet 实战：眼疾识别分类</h2><h3 id="CV-任务研发流程"><a href="#CV-任务研发流程" class="headerlink" title="CV 任务研发流程"></a>CV 任务研发流程</h3><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230411205932.png" alt="image.png|425"></p><blockquote><p>[!NOTE] Tips<br>其中，基本的计算机视觉任务研发全流程包含模型训练、模型预测和模型部署三大步骤。每个步骤又包含单独的流程：</p><ul><li>数据准备：根据网络接收的数据格式，完成相应的预处理和跑批量数据读取器操作，保证模型正常读取；</li><li>模型构建：设计卷积网络结构；</li><li>特征提取：使用构建的模型提取数据的特征信息；</li><li>损失函数：通过损失函数衡量模型的预测值和真实值的不一致程度，通常损失函数越小，模型性能越好；</li><li>模型评估：在模型训练中或训练结束后岁模型进行评估测试，观察准确率；</li><li>模型预测：使用训练好的模型进行测试，也需要准备数据和模型特征提取，最后对结果进行解析。</li></ul></blockquote><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3>]]></content>
    
    
    <summary type="html">some notes dealing with image classification.</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Image Classify" scheme="https://alleyf.github.io/tags/Image-Classify/"/>
    
  </entry>
  
  <entry>
    <title>目标检测</title>
    <link href="https://alleyf.github.io/2023/03/3962ffddc056.html"/>
    <id>https://alleyf.github.io/2023/03/3962ffddc056.html</id>
    <published>2023-03-17T11:10:56.000Z</published>
    <updated>2023-04-09T09:51:19.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YOLO算法"><a href="#YOLO算法" class="headerlink" title="YOLO算法"></a>YOLO算法</h1> <table>     <thead><tr>    <th align=center>        <font color=blue size=4 face=YaHei>种类</font>    </th>    <th bgcolor=#f0f0f0 align=center>        <font color=orange size=4 face=楷体>文献</font>    </th></tr>    </thead>    <tbody><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙.pdf\">ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/高效液相色谱法测定人血浆中百草枯浓度_孙斌.pdf\">高效液相色谱法测定人血浆中百草枯浓度_孙斌</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增.pdf\">三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察.pdf\">西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察</a></td></tr><tr><td align=center>外科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东.pdf\">新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东</a></td></tr><tr><td align=center>其他</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/isct_a-118.pdf\">isct_a-118</a></td></tr><tr><td align=center>麻醉科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-.pdf\">British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-</a></td></tr><tr><td align=center>流行病学</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/Contextual_factors_associated_with_country-level_suicide.pdf\">Contextual_factors_associated_with_country-level_suicide</a></td></tr><tr><td align=center>免疫学</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an.pdf\">Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/Two-year_follow-up_of_patients_with_post-COVID-19_condition.pdf\">Two-year_follow-up_of_patients_with_post-COVID-19_condition</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/高血压脑出血患者颅内血肿周围水肿体积扩大的相关影响因素分析_周航.pdf\">高血压脑出血患者颅内血肿周围水肿体积扩大的相关影响因素分析_周航</a></td></tr></tbody></table>|  姓名  |     学号      |     ||:------:|:-------------:| ---:|| 范财胜 | 0122005830519 |     || 徐宇健 | 0122008910505 |     ||  庄俊  |      ？       |     || 赵逸佳 | ？              |     |内科：[ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙](http://amedoc.fcsy.fit/media/docs/ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙.pdf)<br>内科：[高效液相色谱法测定人血浆中百草枯浓度_孙斌](http://amedoc.fcsy.fit/media/docs/高效液相色谱法测定人血浆中百草枯浓度_孙斌.pdf)<br>内科：[三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增](http://amedoc.fcsy.fit/media/docs/三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增.pdf)<br>内科：[西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察](http://amedoc.fcsy.fit/media/docs/西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察.pdf)<br>外科：[新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东](http://amedoc.fcsy.fit/media/docs/新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东.pdf)<br>其他：[isct_a-118](http://amedoc.fcsy.fit/media/docs/isct_a-118.pdf)<br>麻醉科：[British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-](http://amedoc.fcsy.fit/media/docs/British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-.pdf)<br>流行病学：[Contextual_factors_associated_with_country-level_suicide](http://amedoc.fcsy.fit/media/docs/Contextual_factors_associated_with_country-level_suicide.pdf)<br>免疫学：[Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an](http://amedoc.fcsy.fit/media/docs/Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an.pdf)<br>内科：[Two-year_follow-up_of_patients_with_post-COVID-19_condition](http://amedoc.fcsy.fit/media/docs/Two-year_follow-up_of_patients_with_post-COVID-19_condition.pdf)<br>内科：[高血压脑出血患者颅内血肿周围水肿体积扩大的相关影响因素分析_周航](http://amedoc.fcsy.fit/media/docs/高血压脑出血患者颅内血肿周围水肿体积扩大的相关影响因素分析_周航.pdf)<br>|   种类   |                                                                                                 文献                                                                                                 ||:--------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:||   内科   |               [ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙](http://amedoc.fcsy.fit/media/docs/ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙.pdf)               ||   内科   |                                     [高效液相色谱法测定人血浆中百草枯浓度_孙斌](http://amedoc.fcsy.fit/media/docs/高效液相色谱法测定人血浆中百草枯浓度_孙斌.pdf)                                     ||   内科   | [三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增](http://amedoc.fcsy.fit/media/docs/三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增.pdf) ||   内科   |                             [西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察](http://amedoc.fcsy.fit/media/docs/西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察.pdf)                             ||   外科   |           [新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东](http://amedoc.fcsy.fit/media/docs/新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东.pdf)           ||   其他   |                                                                    [isct_a-118](http://amedoc.fcsy.fit/media/docs/isct_a-118.pdf)                                                                    ||  麻醉科  |  [British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-](http://amedoc.fcsy.fit/media/docs/British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-.pdf)  || 流行病学 |                      [Contextual_factors_associated_with_country-level_suicide](http://amedoc.fcsy.fit/media/docs/Contextual_factors_associated_with_country-level_suicide.pdf)                      ||  免疫学  |  [Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an](http://amedoc.fcsy.fit/media/docs/Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an.pdf)  ||   内科   |                   [Two-year_follow-up_of_patients_with_post-COVID-19_condition](http://amedoc.fcsy.fit/media/docs/Two-year_follow-up_of_patients_with_post-COVID-19_condition.pdf)                <hr><table><thead><tr><th align="center">输入条件</th><th align="center">合理等价类</th><th align="center">不合理等价类</th></tr></thead><tbody><tr><td align="center">职称</td><td align="center">1教授<br>2副教授<br>3讲师</td><td align="center">5四种职称之外任意一种</td></tr><tr><td align="center">职称兼工龄</td><td align="center">4助教兼工龄大于2年</td><td align="center">6助教兼工龄等于两年<br>7助教兼工龄小于两年</td></tr></tbody></table><table><thead><tr><th align="center">输入数据</th><th align="center">预期结果</th><th align="center">覆盖范围</th></tr></thead><tbody><tr><td align="center">教授</td><td align="center">输入有效，进行调整工资处理</td><td align="center">1</td></tr><tr><td align="center">副教授</td><td align="center">输入有效，进行调整工资处理</td><td align="center">2</td></tr><tr><td align="center">讲师</td><td align="center">输入有效，进行调整工资处理</td><td align="center">3</td></tr><tr><td align="center">助教3</td><td align="center">输入有效，进行调整工资处理</td><td align="center">4</td></tr><tr><td align="center">助教2</td><td align="center">输入有效，不调整工资处理</td><td align="center">6</td></tr><tr><td align="center">助教1</td><td align="center">输入有效，不调整工资处理</td><td align="center">7</td></tr><tr><td align="center">工程师</td><td align="center">输入无效</td><td align="center">5</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">some konwledge about target detection.</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV" scheme="https://alleyf.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络基础</title>
    <link href="https://alleyf.github.io/2023/03/f41646eecf81.html"/>
    <id>https://alleyf.github.io/2023/03/f41646eecf81.html</id>
    <published>2023-03-17T11:10:27.000Z</published>
    <updated>2023-07-04T14:04:59.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h1><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C,H,W]</code></p><h2 id="步幅（stride）"><a href="#步幅（stride）" class="headerlink" title="步幅（stride）"></a>步幅（stride）</h2><p>卷积核运算过程中==移动的距离大小==。<br>卷积后的输出尺寸计算公式如下：<br>$$ H_{out}= \frac{H+2p_{h}-k_{h}}{s_{h}}+1 $$<br>$$ W_{out}= \frac{W+2p_{w}-k_{w}}{s_{w}}+1 $$</p><blockquote><p>其中 $p_h$ 和 $p_w$ 分别为高度和宽度<strong>填充</strong>，$k_h$ 和 $k_w$ 分别为卷积核的高宽<strong>大小</strong>，$s_h$ 和 $s_w$ 分别为高度和宽度<strong>步幅</strong>。</p></blockquote><blockquote><p>[!NOTE] 提示<br>步幅越大，特征越小，<em><strong>stride=2</strong></em>，则<em><strong>特征缩小一半</strong></em>。</p></blockquote><h2 id="批量卷积"><a href="#批量卷积" class="headerlink" title="批量卷积"></a>批量卷积</h2><p>对RGB三通道，同时输入一个批次（batch）张图片做卷积运算，每张图像卷积后通道叠在一起（不是叠加），如下图所示：<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202303201948212.png" alt="image.png|525"></p><hr><h2 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h2><blockquote><p>感受野是指输出特征图上的像素点所能感受到的输入数据的范围。</p></blockquote><p>从下图可以看出感受野的大小：<br><img src="https://s2.loli.net/2023/03/20/dC7PyWFI5ZmHhxr.png" alt="image.png|250"><br><code>网络越深，越深层特征图的感受野越大，主要从输入的主对角线反映。</code></p><blockquote><p>[!NOTE] 提示<br>对于图像分类任务来说，感受野的大小与网络的性能存在一定的关系。感受野越大，网络可以获取到更广泛的上下文信息，从而更好地理解图像。但过大的感受野对图像分类也会有一定的影响，主要表现在以下两个方面：</p></blockquote><blockquote><ol><li>过大的感受野会<strong>引入过多的噪声和干扰信号</strong>。当感受野越大时，网络就会考虑更远的像素，这些像素可能与目标物体或图案无关，甚至会背离目标。这些噪声和干扰信号会干扰网络的学习，从而导致分类准确性的降低。</li></ol></blockquote><blockquote><ol start="2"><li>过大的感受野会<strong>降低网络的细节敏感度</strong>。当感受野的大小超出图像细节的尺度范围时，网络无法有效地捕捉到细节信息，从而导致分类准确性的降低。尤其是对于一些小尺寸物体和图案，小细节对分类结果的影响会更加显著。</li></ol></blockquote><blockquote><p>因此，对于图像分类任务来说，选择适当的感受野大小非常重要。通常，在<strong>保证网络全局感知能力的同时，应该将感受野限制在合适的尺度范围内</strong>，以避免过度拟合和过大感受野带来的问题。同时，还可以结合多尺度特征提取的方法，综合利用不同感受野下的信息，以获取更全面、更准确的特征，提高分类精度。</p></blockquote><h2 id="Paddle-API卷积"><a href="#Paddle-API卷积" class="headerlink" title="Paddle API卷积"></a>Paddle API卷积</h2><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320203438.png" alt="image.png|400"></p><h3 id="案例1-边缘检测二值图"><a href="#案例1-边缘检测二值图" class="headerlink" title="案例1-边缘检测二值图"></a>案例1-边缘检测二值图</h3><blockquote><p>检测图像黑白分界线。</p></blockquote><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320205235.png" alt="image.png|150"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> fluid. dygraph. guard():<br><span class="hljs-comment">#创建初始化权重参数w</span><br>w = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], dtype= <span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#将权重参数调整成维度为[cout, cin, kh, kw]的四维张里</span><br>w = w.reshape([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment">#创建卷积算子，设置输出通道数，卷积核大小，和初始化权重参数</span><br><span class="hljs-comment"># filter_size = [1, 3]表示kh = 1, kw=3</span><br><span class="hljs-comment">#创建卷积算子的时候，通过参数属性param_ attr, 指定参数初始化方式</span><br><span class="hljs-comment">#这里的初始化方式时，从numpy. ndarray初始化卷积参数</span><br><span class="hljs-comment">#num_channels:输入通道数；num_filters：输出通道数；filter_size：卷积核高宽，param_attr：初始化参数</span><br>conv = Conv2D(num_channels=<span class="hljs-number">1</span>, num_filters=<span class="hljs-number">1</span>, filter_size=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],param_attr=fluid.ParamAttr(<br>initializer=NumpyArrayInitializer(value=w)))<br><span class="hljs-comment">#创建输入图片，图片左边的像素点取值为1，右边的像素点取值为0</span><br>img = np.ones([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>], dtype=<span class="hljs-string">&#x27;f1oat32&#x27;</span>)<br>img[:, <span class="hljs-number">30</span>:] = <span class="hljs-number">0.</span><br><span class="hljs-comment">#将图片形状调整为[N(bach_size), C（chanel）, H, W]的形式</span><br>x = img.reshape([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>])<br><span class="hljs-comment">#将numpy.ndarray转化成paddle中的tensor</span><br>x = fluid.dygraph.to_variable(x)<br><span class="hljs-comment">#使用卷积算子作用在输入图片上</span><br>y = conv(x)<br><span class="hljs-comment">#将输出tensor转化为numpy.ndarray</span><br>out = y.numpy()<br></code></pre></td></tr></table></figure><blockquote><p>查看卷积层参数:<code>conv.parameters()</code><br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320205955.png" alt="image.png|450"></p></blockquote><hr><h3 id="案例2-边缘检测RGB彩图"><a href="#案例2-边缘检测RGB彩图" class="headerlink" title="案例2-边缘检测RGB彩图"></a>案例2-边缘检测RGB彩图</h3><blockquote><p><code>图片初始读入的形状为[H,W,C](垂直像素，水平像素，通道数)，需要调整为[N,C,H,W]格式。</code><br>卷积核：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213046.png" alt="image.png|175"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./work/ images/section1000000098520. jpg&#x27;)</span><br><span class="hljs-string">with fluid.dygraph.guard():</span><br><span class="hljs-string">#设置卷积核参数</span><br><span class="hljs-string">w = np.array([[-1,-1,-1], [-1,8,-1], [-1,-1,-1]], dtype= &#x27;float32&#x27;)/8</span><br><span class="hljs-string">w = w.reshape([1, 1, 3, 3])</span><br><span class="hljs-string">#由于输入通道数是3，将卷积核的形状从[1,1,3,3]调整为[1p3,p,3]</span><br><span class="hljs-string">w = np.repeat(w,3，axis=1)、</span><br><span class="hljs-string">#创建卷积算子，输出通道数为1，卷积核大小为3x3，</span><br><span class="hljs-string">#并使用上面的设置好的数值作为卷积核权重的初始化参数</span><br><span class="hljs-string">conv = Conv2D(num_channels=3, num_filters=1, filter_size=[3,3],param_attr=fluid.ParamAttr(initializer=NumpyArrayInitializer(value=w)))</span><br><span class="hljs-string">  #将读入的图片转化为float32类型的numpy.ndarray</span><br><span class="hljs-string">x = np.array(img).astype(&#x27;float32&#x27;)</span><br><span class="hljs-string">#图片读入成ndarry时，形状是[H, W, C]，</span><br><span class="hljs-string">#将通道这一维度调整到最前面</span><br><span class="hljs-string">x = np.transpose(x, (2,0,1))</span><br><span class="hljs-string">#将数据形状调整为[N, C, H, W]格式</span><br><span class="hljs-string">x = x.reshape(1, 3, img.height, img.width)</span><br><span class="hljs-string">x = fluid.dygraph.to_variable(x)#变为张量格式</span><br><span class="hljs-string">y = conv(x)</span><br><span class="hljs-string">out = y.numpy()#张量转numpy数组</span><br></code></pre></td></tr></table></figure><hr><h3 id="案例3-均值模糊"><a href="#案例3-均值模糊" class="headerlink" title="案例3-均值模糊"></a>案例3-均值模糊</h3><blockquote><p>卷积核：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213328.png" alt="image.png|200"><br>效果对比：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213358.png" alt="image.png|200"></p></blockquote><hr><h1 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h1><h2 id="形状-1"><a href="#形状-1" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C,H,W]</code></p><blockquote><p><code>池化</code>是使用某一位置的相邻输出的总体统计特征来代替网络在该位置的输出<br><code>理解</code>：取输入的局部统计特征作为输出，==可以掩盖变化的细节==。</p></blockquote><h2 id="池化方法"><a href="#池化方法" class="headerlink" title="池化方法"></a>池化方法</h2><ol><li>平均池化<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405140612.png" alt="image.png|200"></li></ol><ol start="2"><li>最大池化<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405140630.png" alt="image.png|200"><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2></li><li>池化的好处是当输入数据做出<strong>少量平移</strong>时，经过池化函数后的大多数输出还能<strong>保持不变</strong>,池化能够<strong>帮助输入的表示近似不变</strong>。</li><li>由于池化之后特征图会变得更小，如果后面连接的是全连接层，能<strong>有效的减小神经元的个数</strong>,<strong>节省存储空间并提高计算效率</strong>。<h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2></li></ol><ul><li>池化<strong>窗口大小</strong>：$pool_size = [k_h,k_w]$</li><li>池化窗口<strong>滑动步幅</strong>：$pool_stride = [stride_ h, stride_w]$</li><li>图片<strong>填充</strong>：$padding=[ph,pw]$</li><li>比较常见的参数配置是：$k_n =k_w=2,stride_h=stride_w=2,p_h=p_w=0$</li><li>采用这样的设置将会使得输出图片高和宽都减半<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2></li><li><strong>没有学习参数</strong></li><li><strong>通道数不变</strong>，每个通道独立进行池化</li><li>对<strong>微小的位置</strong>变化具有<strong>鲁棒性</strong></li></ul><hr><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><blockquote><p>通常在卷积或者全连接这样的线形操作之后，会加上一个非线性的函数，作用在每一个神经元的输出上，从而实现非线性变换的效果。</p></blockquote><h2 id="sigmoid激活函数"><a href="#sigmoid激活函数" class="headerlink" title="sigmoid激活函数"></a>sigmoid激活函数</h2><blockquote><p><strong>说明：</strong> Sigmoid函数只有在x接近于0的地方，导数才比较大，但最大值也只有1/4；在X的数值非常大或者非常小的地方，导数都接近于0<br>$$\begin{array}<br>\text { 反向传播 } \frac{\partial L}{\partial x}=\frac{\partial L}{\partial y} \cdot \frac{\partial y}{\partial x}<br>\text { 这将导致 } \frac{\partial L}{\partial x} \ \text { 会显著的小于 } \frac{\partial L}{\partial y}<br>这将导致张会显著的小于光<br>\end{array}$$</p></blockquote><ol><li>如果X是非常大整数或者非常小的负数，则<strong>x的梯度将接近于0</strong></li><li>即使x的数值接近于0，其梯度最大不超过y的<strong>梯度的1/4</strong>，如果有多层网络使用Sigmoid激活函数，将导致<strong>较靠前</strong>的那些层，<strong>梯度变得非常的小</strong></li></ol><p><em>在神经网络里面，将这种经过反向传播之后，梯度值衰减到接近于0的现象称作<strong>梯度消失</strong>现象</em><br>$$y=\frac{1}{1+e^{-x}}$$</p><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405151136.png" alt="image.png|250"></p><hr><h2 id="ReLU激活函数"><a href="#ReLU激活函数" class="headerlink" title="ReLU激活函数"></a>ReLU激活函数</h2><p>$$<br>y= \begin{cases}0, &amp; (x&lt;0) \ x, &amp; (x \geq 0)\end{cases}<br>$$<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405154029.png" alt="image.png|250"></p><blockquote><p>[!note]</p><ul><li>在x&gt;0的地方，ReLU函数的<strong>导数为1</strong>，能够将y的梯度完整的传递给×，而<strong>不会引起梯度消失</strong>。</li><li>在神经网络发展的早期Sigmoid函数用的比较多，而目前用的较多的激活函数是ReLU</li></ul></blockquote><hr><h1 id="批归一化BatchNorm"><a href="#批归一化BatchNorm" class="headerlink" title="批归一化BatchNorm"></a>批归一化BatchNorm</h1><h2 id="数据分布和模型的数值稳定性"><a href="#数据分布和模型的数值稳定性" class="headerlink" title="数据分布和模型的数值稳定性"></a>数据分布和模型的数值稳定性</h2><p><strong>模型收敛</strong>：需要稳定的数据分布</p><blockquote><p>[!note]<br>                       浅层神经网络—&gt;对输入数据做标准化（也称作归一化)</p><pre><code class="hljs">                   深度神经网络---&gt;仅仅标准化输入数据还不够</code></pre><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405155315.png" alt="image.png"></p></blockquote><p><strong>Batch Normalization 提升数值稳定性</strong></p><blockquote><p>对中间层的输出做标准化，可以保证在网络学习的过程中，网络层的输出具有稳定的分布。</p></blockquote><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>可以<strong>使学习快速进行</strong>（能够使用<strong>较大的学习率</strong>)</li><li>可以<strong>降低</strong>模型<strong>对初始值</strong>的<strong>敏感性</strong></li><li>可以从一定程度上<strong>抑制过拟合</strong></li></ul><h3 id="归一化公式"><a href="#归一化公式" class="headerlink" title="归一化公式"></a>归一化公式</h3><blockquote><p>每一项减去均值，除以方差加一个无穷小的数（$10^{-6}$）防止方差为0无意义.<br>$$<br>\hat{x_i} \leftarrow \frac{x_i-\mu_B}{\sqrt{\left(\sigma_B^2+\epsilon\right)}}<br>$$<br>对标准化输出进行平移和缩放<br>$$<br>y_i \leftarrow \gamma \hat{x}_i+\beta<br>$$<br>其中$\gamma$和$\beta$是可学习的参数，可以赋初始值$\gamma=1$,$\beta=0$,在训练过程中自动不断学习调整.</p></blockquote><h2 id="预测时使用BatchNorm"><a href="#预测时使用BatchNorm" class="headerlink" title="预测时使用BatchNorm"></a>预测时使用BatchNorm</h2><blockquote><p>[!解决方案]<br><strong>训练时</strong>计算在<strong>整个数据集上的均值和方差</strong>，并将<strong>结果保存预测时</strong>不计算样本内均值和方差，而是<strong>使用训练时保存的值</strong></p><ol><li>训练通过<strong>滚动平均</strong>的方式，计算在整个数据集上的均值和方差并保存</li><li>预测时直接加在训练时保存的均值和方差，而不用在样本内计算</li></ol></blockquote><hr><h1 id="丢弃法Dropout"><a href="#丢弃法Dropout" class="headerlink" title="丢弃法Dropout"></a>丢弃法Dropout</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>防止过拟合的方法<br><em><strong>训练阶段</strong></em>：每次随机的删除一部分神经元，不向前传播其所携带的信息，相当于每次都是让不同的模型在学习<br><em><strong>测试阶段</strong></em>：向前传播所有神经元的信息，相当于让这些不同的模型一起工作<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405172108.png" alt="image.png|350"></p></blockquote><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><blockquote><p>训练时随机丢弃了一部分神经元的信息，输出数据的总大小变小了<br>预测时不丢弃神经元，导致预测和训练时的数据分布不一样</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>==downgrade_in_infer==</li></ol><p><strong>训练</strong>时<strong>随机丢弃</strong>一部分神经元；<strong>预测时</strong>不丢弃神经元，但把它们<strong>数值变小</strong><br>2. ==<strong>upscale_in_train</strong>==<br><strong>训练</strong>时<strong>随机丢弃</strong>一部分神经元，但是把<strong>保留</strong>的那些<strong>神经元数值放大</strong>；<strong>预测</strong>时<strong>原样输出</strong>所有神经元的信息</p><blockquote><p>Paddle中默认是<code>downgrade_in_infer</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#设置随机数种子，这样可以保证每次运行结果一致</span><br>np.random.seed(<span class="hljs-number">100</span>)<br><span class="hljs-comment">#创建数据N,C,H,WM,一般对应卷积层的输出</span><br>data1 = np.random.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#创建数据N,K),一般对应全连接层的输出</span><br>data2 = np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>).reshape([-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#使用dropout作用在输入数据上</span><br><span class="hljs-keyword">with</span> fluid.dygraph.guard():<br>x1 = fluid.dygraph.to_variable(data1)<br>out1_1 = fluid.layers.dropout(x1,dropout_prob=<span class="hljs-number">0.5</span>,is_test=<span class="hljs-literal">False</span>)<br>out1_2 = fluid.layers.dropout(x1,dropout_prob=<span class="hljs-number">0.5</span>,is_test=<span class="hljs-literal">True</span>)<br><br>x2 = fluid.dygraph.to_variable(data2)<br>out2_1 = fluid.layers.dropout(x2,dropout_prob=<span class="hljs-number">0.5</span>,\<br>dropout_implementation=<span class="hljs-string">&#x27;upscale_in_train&#x27;</span>)<br>out2_2 = fluid.layers.dropout(x2,dropout_prob=<span class="hljs-number">0.5</span>,\<br>dropout_implementation=<span class="hljs-string">&#x27;upscale_in_train&#x27;</span>,is_test=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h1><blockquote><p>将输入全部转为1维进行线性求和</p></blockquote><h2 id="形状-2"><a href="#形状-2" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C]</code></p><blockquote><p>[!NOTE] 数据变换<br>尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]<br>        x = paddle.reshape(x, [x.shape[0], -1])</p></blockquote>]]></content>
    
    
    <summary type="html">some konwledge about CNN.</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CNN" scheme="https://alleyf.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉概述</title>
    <link href="https://alleyf.github.io/2023/03/cc1560495a8d.html"/>
    <id>https://alleyf.github.io/2023/03/cc1560495a8d.html</id>
    <published>2023-03-17T11:09:35.000Z</published>
    <updated>2023-04-05T11:34:43.789Z</updated>
    
    <content type="html"><![CDATA[<p>[[卷积神经网络基础]][[目标检测]][[图像分类]]</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>计算机视觉作为一门让机器学会如何去“看”的学科，具体的说，就是让机器去识别摄像机拍摄的图片或视频中的物体，检测出物体所在的位置，并对目标物体进行跟踪，从而理解并描述出图片或视频里的场景和故事，以此来模拟人脑视觉系统。因此，计算机视觉也通常被叫做机器视觉，其目的是建立能够从图像或者视频中“感知”信息的人工系统。</p><p>计算机视觉技术经过几十年的发展，已经在交通（车牌识别、道路违章抓拍）、安防（人脸闸机、小区监控）、金融（刷脸支付、柜台的自动票据识别）、医疗（医疗影像诊断）、工业生产（产品缺陷自动检测）等多个领域应用，影响或正在改变人们的日常生活和工业生产方式。未来，随着技术的不断演进，必将涌现出更多的产品和应用，为我们的生活创造更大的便利和更广阔的机会。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/93476b373dd342d1aae22397aa24c58fc60ab68307fd448189f16c8284723e9d" width = "500"></center><center>图1：计算机视觉技术在各领域的应用</center><p>飞桨为计算机视觉任务提供了丰富的API，并通过底层优化和加速保证了这些API的性能。同时，飞桨还提供了丰富的模型库，覆盖图像分类、检测、分割、文字识别和视频理解等多个领域。用户可以直接使用这些API组建模型，也可以在飞桨提供的模型库基础上进行二次研发。<br>由于篇幅所限，本章将重点介绍计算机视觉的经典模型（卷积神经网络）和两个典型任务（图像分类和目标检测）。主要涵盖如下内容：<br><strong>卷积神经网络</strong>：卷积神经网络（Convolutional Neural Networks, CNN）是计算机视觉技术最经典的模型结构。本教程主要介绍卷积神经网络的常用模块，包括：卷积、池化、激活函数、批归一化、丢弃法等。</p><ul><li><strong>图像分类</strong>：介绍图像分类算法的经典模型结构，包括：LeNet、AlexNet、VGG、GoogLeNet、ResNet，并通过眼疾筛查的案例展示算法的应用。</li><li><strong>目标检测</strong>：介绍目标检测YOLOv3算法，并通过林业病虫害检测案例展示YOLOv3算法的应用。</li></ul><h1 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h1><p>计算机视觉的发展历程要从生物视觉讲起。对于生物视觉的起源，目前学术界尚没有形成定论。有研究者认为最早的生物视觉形成于距今约<a href="https://www.pnas.org/content/109/46/18868">7亿年前的水母之中</a>，也有研究者认为生物视觉产生于距今约5亿年前寒武纪【<a href="https://doi.org/10.1038%2Fnature10097">1</a>, <a href="https://en.wikipedia.org/wiki/Evolution_of_the_eye">2</a>】。寒武纪生物大爆发的原因一直是个未解之谜，不过可以肯定的是在寒武纪动物具有了视觉能力，捕食者可以更容易地发现猎物，被捕食者也可以更早的发现天敌的位置。视觉能力加剧了猎手和猎物之间的博弈，也催生出更加激烈的生存演化规则。视觉系统的形成有力地推动了食物链的演化，加速了生物进化过程，是生物发展史上重要的里程碑。经过几亿年的演化，目前人类的视觉系统已经具备非常高的复杂度和强大的功能，人脑中神经元数目达到了1000亿个，这些神经元通过网络互相连接，这样庞大的视觉神经网络使得我们可以很轻松的观察周围的世界，如 <strong>图2</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/70d8475ed908487680057bf1f2760f10e367e7176acf43ebb380207b748b2377" width = "600"></center><center><br>图2：人类视觉感知</center><hr><p>对人类来说，识别猫和狗是件非常容易的事。但对计算机来说，即使是一个精通编程的高手，也很难轻松写出具有通用性的程序（比如：假设程序认为体型大的是狗，体型小的是猫，但由于拍摄角度不同，可能一张图片上猫占据的像素比狗还多）。那么，如何让计算机也能像人一样看懂周围的世界呢？研究者尝试着从不同的角度去解决这个问题，由此也发展出一系列的子任务，如 <strong>图3</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/d65f1ebcb0054dcb81a8eb50223adc529bb9b63265ab467d931a5df5b2864122" width = "500"></center><center><br>图3：计算机视觉子任务示意图</center>- **(a) Image Classification：** 图像分类，用于识别图像中物体的类别（如：bottle、cup、cube）。- **(b) Object Localization：** 目标检测，用于检测图像中每个物体的类别，并准确标出它们的位置。- **(c) Semantic Segmentation：** 图像语义分割，用于标出图像中每个像素点所属的类别，属于同一类别的像素点用一个颜色标识。- **(d) Instance Segmentation：** 实例分割，值得注意的是，（b）中的目标检测任务只需要标注出物体位置，而（d）中的实例分割任务不仅要标注出物体位置，还需要标注出物体的外形轮廓。在早期的图像分类任务中，通常是先人工提取图像特征，再用机器学习算法对这些特征进行分类，分类的结果强依赖于特征提取方法，往往只有经验丰富的研究者才能完成，如 **图4** 所示。<center><img src="https://ai-studio-static-online.cdn.bcebos.com/01179d17c9f74570b8a618d6123261ce6e10344f11c84dda8e47d44c1eb4fc81" width = "500"></center><center><br>图4：早期的图像分类任务</center>在这种背景下，基于神经网络的特征提取方法应运而生。Yann LeCun是最早将卷积神经网络应用到图像识别领域的，其主要逻辑是使用卷积神经网络提取图像特征，并对图像所属类别进行预测，通过训练数据不断调整网络参数，最终形成一套能自动提取图像特征并对这些特征进行分类的网络，如 **图5** 所示。<center><img src="https://ai-studio-static-online.cdn.bcebos.com/1ccd30567304415d98b0b373ec641a3d00f76d803f194ea4b14aa85ce85bf7bb" width = "500"></center><center><br>图5：早期的卷积神经网络处理图像任务示意</center><p>这一方法在手写数字识别任务上取得了极大的成功，但在接下来的时间里，却没有得到很好的发展。其主要原因一方面是数据集不完善，只能处理简单任务，在大尺寸的数据上容易发生过拟合；另一方面是硬件瓶颈，网络模型复杂时，计算速度会特别慢。<br>目前，随着互联网技术的不断进步，数据量呈现大规模的增长，越来越丰富的数据集不断涌现。另外，得益于硬件能力的提升，计算机的算力也越来越强大。不断有研究者将新的模型和算法应用到计算机视觉领域。由此催生了越来越丰富的模型结构和更加准确的精度，同时计算机视觉所处理的问题也越来越丰富，包括分类、检测、分割、场景描述、图像生成和风格变换等，甚至还不仅仅局限于2维图片，包括视频处理技术和3D视觉等。</p>]]></content>
    
    
    <summary type="html">some overview about DL_CV。</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV" scheme="https://alleyf.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>algorithm</title>
    <link href="https://alleyf.github.io/2023/03/56d5f0383564.html"/>
    <id>https://alleyf.github.io/2023/03/56d5f0383564.html</id>
    <published>2023-03-17T11:06:15.000Z</published>
    <updated>2023-07-04T14:05:45.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>***自顶向下递归<br>自底向上迭代</p><hr><blockquote><p>问题特点</p><ol><li>一个问题的解可以<strong>分解为几个子问题</strong>的解。</li><li>这个问题与分解之后的子问题，<strong>除了数据规模不同，求解思路完全一样</strong>。</li><li><strong>存在基线终止条件</strong>。</li></ol></blockquote><p>爬楼梯问题：<br><img src="https://s2.loli.net/2023/05/22/tcH9QJ726li3Rng.png" alt="image.png|200"></p><p>解法 1：纯递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span> Map&lt;Integer , Integer&gt; storeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> climbStairs(n-<span class="hljs-number">1</span>)+climbStairs(n-<span class="hljs-number">2</span>);<br><br></code></pre></td></tr></table></figure><p>解法 2：递归并采用 HashMap 存储已求值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span> Map&lt;Integer , Integer&gt; storeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != storeMap.get(n))<br><span class="hljs-keyword">return</span> storeMap.get(n);<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> climbStairs(n-<span class="hljs-number">1</span>)+climbStairs(n-<span class="hljs-number">2</span>);<br>storeMap.put(n,result);<br><span class="hljs-keyword">return</span> result;<br><br></code></pre></td></tr></table></figure><p>解法 3：迭代自底向上循环累加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">prePre</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(inti=<span class="hljs-number">3</span>;i&lt;=n;++i)&#123;<br>result = pre + prePre;<br>prePre = pre;<br>pre = result;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>总结：</p><blockquote><p><span style="background:rgba(240, 107, 5, 0.2)">对于多次重复出现的值，可以通过 HashMap 存储，后续先扫描 HashMap 是否存在再做行动。</span></p></blockquote><h1 id="2-LeetCode"><a href="#2-LeetCode" class="headerlink" title="2. LeetCode"></a>2. LeetCode</h1><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">import</span> java.util.HashMap;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] <span class="hljs-built_in">twoSum</span>(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;  <br>HashMap&lt;Integer, Integer&gt; storeNums = <span class="hljs-keyword">new</span> <span class="hljs-built_in">HashMap</span>&lt;Integer, Integer&gt;(nums.length);  <br><span class="hljs-type">int</span>[] results = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">2</span>];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;  <br><span class="hljs-type">int</span> residue = target - nums[i];  <br>Integer index = storeNums.<span class="hljs-built_in">get</span>(residue);  <br><span class="hljs-keyword">if</span> (index != null) &#123;  <br>results[<span class="hljs-number">0</span>] = index;  <br>results[<span class="hljs-number">1</span>] = i;  <br><span class="hljs-keyword">break</span>;  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>storeNums.<span class="hljs-built_in">put</span>(nums[i], i);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> results;  <br>&#125;  <br>  <br>&#125;;  <br><span class="hljs-comment">//runtime:1 ms  </span><br><span class="hljs-comment">//memory:42.6 MB</span><br><br></code></pre></td></tr></table></figure><h2 id="2-合并两个有序数组"><a href="#2-合并两个有序数组" class="headerlink" title="2. 合并两个有序数组"></a>2. 合并两个有序数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br><span class="hljs-comment">// 方法1（直插排序法）  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;  <br><span class="hljs-keyword">auto</span> iter1 = nums1.<span class="hljs-built_in">begin</span>()+m;  <br><span class="hljs-keyword">auto</span> iter2 = nums1.<span class="hljs-built_in">end</span>();  <br>nums1.<span class="hljs-built_in">erase</span>(iter1,iter2);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>nums1.<span class="hljs-built_in">push_back</span>(nums2[i]);  <br>&#125;  <br><span class="hljs-comment">// nums1.erase(iter1,iter2);  </span><br><span class="hljs-comment">// nums1.insert(nums1.end(),nums2.begin(),nums2.end());  </span><br><span class="hljs-built_in">sort</span>(nums1.<span class="hljs-built_in">begin</span>(), nums1.<span class="hljs-built_in">end</span>());  <br>&#125;  <br><span class="hljs-comment">//方法2（前向双指针法）  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;  <br><span class="hljs-type">int</span> l = m+n,j=<span class="hljs-number">0</span>,index1 = <span class="hljs-number">0</span>,index2 = <span class="hljs-number">0</span>;  <br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">temp</span><span class="hljs-params">(l)</span></span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; ++i) &#123;  <br><span class="hljs-keyword">if</span> (index1&gt;=m)&#123;  <br>temp[i]=nums2[index2++];  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index2&gt;=n)&#123;  <br>temp[i]=nums1[index1++];  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums1[index1]&lt;nums2[index2])&#123;  <br>temp[i]=nums1[index1++];  <br>&#125;  <br><span class="hljs-keyword">else</span> &#123;  <br>temp[i]=nums2[index2++];  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item:temp)&#123;  <br>nums1[j++]=item;  <br>&#125;  <br>&#125;  <br><span class="hljs-comment">//方法3（反向双指针）  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;  <br><span class="hljs-type">int</span> l = m+n,index1 = m<span class="hljs-number">-1</span>,index2 = n<span class="hljs-number">-1</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;  <br><span class="hljs-keyword">if</span> (index1&lt;<span class="hljs-number">0</span>)&#123;  <br>nums1[i]=nums2[index2--];  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index2&lt;<span class="hljs-number">0</span>)&#123;  <br><span class="hljs-comment">// nums1[i]=nums1[index1--];  </span><br><span class="hljs-keyword">break</span>;  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums1[index1]&gt;=nums2[index2])&#123;  <br>nums1[i]=nums1[index1--];  <br>&#125;  <br><span class="hljs-keyword">else</span> &#123;  <br>nums1[i]=nums2[index2--];  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;;  <br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h2 id="3-移动零"><a href="#3-移动零" class="headerlink" title="3. 移动零"></a>3. 移动零</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//双指针</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br><span class="hljs-keyword">if</span>(!nums.<span class="hljs-built_in">size</span>())&#123;  <br><span class="hljs-keyword">return</span>;  <br>&#125;  <br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item:nums)&#123;  <br><span class="hljs-keyword">if</span> (item!=<span class="hljs-number">0</span>)  <br>nums[j++]=item;  <br>&#125;  <br><span class="hljs-keyword">while</span> (j&lt;nums.<span class="hljs-built_in">size</span>())&#123;  <br>nums[j++]=<span class="hljs-number">0</span>;  <br>&#125;  <br>&#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-找到所有数组中消失的数字"><a href="#4-找到所有数组中消失的数字" class="headerlink" title="4. 找到所有数组中消失的数字"></a>4. 找到所有数组中消失的数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//数组 哈希表</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findDisappearedNumbers</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br>vector&lt;<span class="hljs-type">int</span>&gt; disnums;  <br><span class="hljs-comment">// for(int item:nums)&#123;  </span><br><span class="hljs-comment">// item = item&gt;0 ? item : -item;  </span><br><span class="hljs-comment">// nums[item-1] = nums[item-1]&gt;0 ? nums[item-1] : -nums[item-1];  </span><br><span class="hljs-comment">// nums[item-1]=-nums[item-1];  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// for(int i=0;i&lt;nums.size();i++)&#123;  </span><br><span class="hljs-comment">// if (nums[i]&gt;0)  </span><br><span class="hljs-comment">// disnums.push_back(i+1);  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item:nums)&#123;  <br><span class="hljs-type">int</span> x = (item<span class="hljs-number">-1</span>)%n;  <br>nums[x]+=n;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;  <br><span class="hljs-keyword">if</span> (nums[i]&lt;=n)  <br>disnums.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);  <br>&#125;  <br><span class="hljs-keyword">return</span> disnums;  <br>&#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="王道机试指南"><a href="#王道机试指南" class="headerlink" title="王道机试指南"></a>王道机试指南</h1><h1 id="第二章暴力求解"><a href="#第二章暴力求解" class="headerlink" title="第二章暴力求解"></a>第二章暴力求解</h1><h2 id="1-枚举"><a href="#1-枚举" class="headerlink" title="1. 枚举"></a>1. 枚举</h2><h3 id="1-abc"><a href="#1-abc" class="headerlink" title="1. abc"></a>1. abc</h3><p><strong>三重循环暴力求解</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-keyword">for</span> (a = <span class="hljs-number">0</span>; a &lt;= <span class="hljs-number">9</span>; a++) &#123;<br>        <span class="hljs-keyword">for</span> (b = <span class="hljs-number">0</span>; b &lt;= <span class="hljs-number">9</span>; b++) &#123;<br>            <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>; c &lt;= <span class="hljs-number">9</span>; c++) &#123;<br>                <span class="hljs-keyword">if</span> ((a * <span class="hljs-number">100</span> + b * <span class="hljs-number">10</span> + c) + (b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + c) == <span class="hljs-number">532</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, a, b, c);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-反序数"><a href="#2-反序数" class="headerlink" title="2. 反序数"></a>2. 反序数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1000</span>; <span class="hljs-number">9</span> * i &lt;= <span class="hljs-number">9999</span>; i++) &#123;<br><br>        <span class="hljs-type">int</span> k = <span class="hljs-number">9</span> * i;<br><br>        <span class="hljs-keyword">if</span> (k / <span class="hljs-number">1000</span> == i % <span class="hljs-number">10</span> &amp;&amp; k % <span class="hljs-number">1000</span> / <span class="hljs-number">100</span> == i % <span class="hljs-number">100</span> / <span class="hljs-number">10</span> &amp;&amp;<br><br>                k % <span class="hljs-number">100</span> / <span class="hljs-number">10</span> == i % <span class="hljs-number">1000</span> / <span class="hljs-number">100</span> &amp;&amp;<br><br>                k % <span class="hljs-number">10</span> == i / <span class="hljs-number">1000</span>) &#123;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-对称平方数"><a href="#3-对称平方数" class="headerlink" title="3. 对称平方数"></a>3. 对称平方数</h3><p>判断一个数是否为对称数核心:<br><font color="#ff0000">while (j) {</font><br><font color="#ff0000">sum = sum * 10 + j % 10;</font><br><font color="#ff0000">j /= 10;</font><br><font color="#ff0000">}</font><br><span style="background:#affad1">j 为对称数则 sum 等于 j*j </span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">256</span> ; i++) &#123;<br><br>        <span class="hljs-type">int</span> j = i * i, sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(j) &#123;<br><br>            sum = sum * <span class="hljs-number">10</span> + j % <span class="hljs-number">10</span>;<br><br>            j /= <span class="hljs-number">10</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(sum == i * i) &#123;<br><br>            cout &lt;&lt; i &lt;&lt; endl;<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-与-7-无关的数"><a href="#4-与-7-无关的数" class="headerlink" title="4. 与 7 无关的数"></a>4. 与 7 无关的数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> b, c, x, sum;<br><br>    cin &gt;&gt; x;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= x; ++i) &#123;<br><br>        b = i % <span class="hljs-number">10</span>;<br><br>        c = (i / <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>;<br><br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">7</span> != <span class="hljs-number">0</span> &amp;&amp; b != <span class="hljs-number">7</span> &amp;&amp; c != <span class="hljs-number">7</span>) &#123;<br><br>            sum = sum + i * i;<br><br>        &#125;<br><br>    &#125;<br><br>    cout &lt;&lt; sum &lt;&lt; endl;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-百鸡问题"><a href="#5-百鸡问题" class="headerlink" title="5. 百鸡问题"></a>5. 百鸡问题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> n;<br><br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt;= <span class="hljs-number">100</span>; ++x) &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt;= <span class="hljs-number">100</span>; ++y) &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> z = <span class="hljs-number">0</span>; z &lt;= <span class="hljs-number">100</span>; ++z) &#123;<br><br>                <span class="hljs-keyword">if</span> (x + y + z == <span class="hljs-number">100</span> &amp;&amp; ((<span class="hljs-number">5</span> * x + <span class="hljs-number">3</span> * y + z / <span class="hljs-number">3.0</span>) &lt;= n)) &#123;<br><br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d,y=%d,z=%d\n&quot;</span>, x, y, z);<br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-Old-Bill"><a href="#6-Old-Bill" class="headerlink" title="6.Old Bill"></a>6.Old Bill</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;title.h&quot;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n, x, y, z;  <br>vector&lt;<span class="hljs-type">int</span>&gt; buff;  <br>cin &gt;&gt; n;  <br>cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100000.0</span> / n; ++i) &#123;  <br><span class="hljs-type">int</span> sum = i * n;  <br><span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">10000</span>)  <br><span class="hljs-keyword">continue</span>;  <br><span class="hljs-type">int</span> a = sum % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> z1 = sum / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> y1 = sum / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> x1 = sum / <span class="hljs-number">1000</span> % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> b = sum / <span class="hljs-number">10000</span>;  <br><span class="hljs-keyword">if</span> (x == x1 &amp;&amp; y == y1 &amp;&amp; z == z1) &#123;  <br>buff.<span class="hljs-built_in">push_back</span>(b);  <br>buff.<span class="hljs-built_in">push_back</span>(a);  <br>buff.<span class="hljs-built_in">push_back</span>(i);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">if</span> (buff.<span class="hljs-built_in">empty</span>())  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);  <br><span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, buff[buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">3</span>], buff[buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>], buff[buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]);  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n, x, y, z;<span class="hljs-comment">//n火鸡数、xyz原价格中间三位</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        <span class="hljs-type">int</span> tot, f = <span class="hljs-number">0</span>;<span class="hljs-comment">//tot原价格、f标记是否存在能够整除火鸡数n的价格</span><br>        <span class="hljs-comment">//这里选择从9枚举到1是为了第一次输出就是最高价格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">9</span>; a &gt;= <span class="hljs-number">1</span>; a--)&#123;<span class="hljs-comment">//a控制原价格的万位[1,9]</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b = <span class="hljs-number">9</span>; b &gt;= <span class="hljs-number">0</span>; b--)&#123;<span class="hljs-comment">//b控制原价格的个位[0,9]</span><br>                tot = a * <span class="hljs-number">10000</span> + x * <span class="hljs-number">1000</span> + y * <span class="hljs-number">100</span> + z * <span class="hljs-number">10</span> + b;<br>                <span class="hljs-keyword">if</span>(tot % n == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//如果原价格tot能够整除火鸡数n</span><br>                    f = <span class="hljs-number">1</span>;<span class="hljs-comment">//则将整除标记置1</span><br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, a, b, tot / n);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;          <br>            &#125;<br>            <span class="hljs-keyword">if</span>(f) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//如果已经整除，则跳出枚举</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(!f) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<span class="hljs-comment">//如果没有可以整除的价格，则打印0</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-模拟"><a href="#2-模拟" class="headerlink" title="2. 模拟"></a>2. 模拟</h2><h3 id="1-图形排版"><a href="#1-图形排版" class="headerlink" title="1. 图形排版"></a>1. 图形排版</h3><h4 id="1-输出梯形"><a href="#1-输出梯形" class="headerlink" title="1. 输出梯形"></a>1. 输出梯形</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;title.h&quot;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> h;  <br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;h) != EOF) <span class="hljs-comment">//高度h  </span><br>&#123;  <br><span class="hljs-type">int</span> b = h + <span class="hljs-number">2</span> * (h - <span class="hljs-number">1</span>), t = h; <span class="hljs-comment">//下底边长，上底边长  </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= h; i++) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= b; j++) &#123;  <br><span class="hljs-keyword">if</span> (j &gt; b - t - <span class="hljs-number">2</span> * (i - <span class="hljs-number">1</span>))  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);  <br><span class="hljs-keyword">else</span>  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);  <br>&#125;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-叠筐"><a href="#2-叠筐" class="headerlink" title="2. 叠筐"></a>2. 叠筐</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">char</span> a,b;<br>    <span class="hljs-type">char</span> S[<span class="hljs-number">80</span>][<span class="hljs-number">80</span>];<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;a&gt;&gt;b)&#123;<br>        <span class="hljs-type">int</span> mid=n/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>        S[mid][mid]=a;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=mid;i++)&#123;<br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>;j++)&#123;<br>                    S[mid-i][mid-i+j]=b;<br>                    S[mid+i][mid-i+j]=b;<br>                    S[mid-i+j][mid-i]=b;<br>                    S[mid-i+j][mid+i]=b;<br>                    flag=<span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>;j++)&#123;<br>                    S[mid-i][mid-i+j]=a;<br>                    S[mid+i][mid-i+j]=a;<br>                    S[mid-i+j][mid-i]=a;<br>                    S[mid-i+j][mid+i]=a;<br>                    flag=<span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>        &#125;<br>        S[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=S[<span class="hljs-number">0</span>][n<span class="hljs-number">-1</span>]=S[n<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]=S[n<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>]=<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>                    cout&lt;&lt;S[i][j];<br>                cout&lt;&lt;endl;<br>            &#125;<br> <br>            cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-日期"><a href="#2-日期" class="headerlink" title="2. 日期"></a>2. 日期</h3><h4 id="1-今天是第几天"><a href="#1-今天是第几天" class="headerlink" title="1. 今天是第几天"></a>1. 今天是第几天</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><br><span class="hljs-comment">// Created by alleyf on 2023/6/23.</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> </span>&#123;<br><br>    <span class="hljs-keyword">return</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>  <br><br>    <span class="hljs-type">int</span> year, month, day;<br><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; year &gt;&gt; month &gt;&gt; day) &#123;<br><br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; monthDay&#123;<br><br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">28</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">6</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">8</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">10</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">11</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">12</span>, <span class="hljs-number">31</span>&#125;<br><br>        &#125;;<br><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isLeap</span>(year)) &#123;<br><br>            monthDay[<span class="hljs-number">2</span>] = <span class="hljs-number">29</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; month; i++) &#123;<br><br>            sum += monthDay[i];<br><br>        &#125;<br><br>        sum += day;<br><br>        cout &lt;&lt; sum &lt;&lt; endl;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-打印日期"><a href="#2-打印日期" class="headerlink" title="2. 打印日期"></a>2. 打印日期</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/23.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span></span>&#123;  <br><span class="hljs-keyword">return</span> (year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <br>  <br><span class="hljs-type">int</span> year,allday;  <br>string month,day;  <br><span class="hljs-keyword">while</span>(cin&gt;&gt;year&gt;&gt;allday)&#123;  <br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; monthDay&#123;  <br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">31</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">59</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">90</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">120</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">151</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">181</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">212</span>&#125;,&#123;<span class="hljs-number">8</span>,<span class="hljs-number">243</span>&#125;,&#123;<span class="hljs-number">9</span>,<span class="hljs-number">273</span>&#125;,&#123;<span class="hljs-number">10</span>,<span class="hljs-number">304</span>&#125;,&#123;<span class="hljs-number">11</span>,<span class="hljs-number">334</span>&#125;,&#123;<span class="hljs-number">12</span>,<span class="hljs-number">365</span>&#125;  <br>&#125;;  <br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isLeap</span>(year))&#123;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">12</span>;i++)&#123;  <br>monthDay[i]+=<span class="hljs-number">1</span>;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">12</span>;i++)&#123;  <br><span class="hljs-keyword">if</span>(monthDay[i]&gt;=allday)&#123;  <br>month = i&gt;=<span class="hljs-number">10</span> ? <span class="hljs-built_in">to_string</span>(i): (<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-built_in">to_string</span>(i));  <br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;  <br>day = allday&gt;=<span class="hljs-number">10</span> ? <span class="hljs-built_in">to_string</span>(allday): (<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-built_in">to_string</span>(allday));  <br>&#125;<span class="hljs-keyword">else</span> &#123;  <br>allday = allday - monthDay[i - <span class="hljs-number">1</span>];  <br>day = allday&gt;=<span class="hljs-number">10</span> ? <span class="hljs-built_in">to_string</span>(allday): (<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-built_in">to_string</span>(allday));  <br>&#125;  <br><span class="hljs-keyword">break</span>;  <br>&#125;;  <br>&#125;  <br>cout&lt;&lt;year&lt;&lt;<span class="hljs-string">&#x27;-&#x27;</span>&lt;&lt;month&lt;&lt;<span class="hljs-string">&#x27;-&#x27;</span>&lt;&lt;day&lt;&lt;endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-日期累加"><a href="#3-日期累加" class="headerlink" title="3. 日期累加"></a>3. 日期累加</h4><h5 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h5><p>以前大一的时候面对这个题，就是单纯按月份纯算，算的可谓是焦头烂额。现在学习了新的方法：</p><ol><li>计算是当年的第几天</li><li>这个数值sum加上需要累加的天数</li><li>计算进位的多少年，确定年份</li><li>根据剩下的第几天反解出这是几月几日</li><li>输出</li></ol><h5 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h5><p>用到的技巧包括打表、巧用bool。<br>提前写出来每个月有多少天、每年有多少天。<br>还有判断是否闰年函数，用它能够得到bool值，0和1可以分别对应于平年和闰年，所以上面的可以构造成二维数组。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> days[<span class="hljs-number">2</span>][<span class="hljs-number">12</span>]=&#123;<br>        &#123;<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;,<br>        &#123;<span class="hljs-number">31</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;,<br>    &#125;;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> current = <span class="hljs-number">0</span>; current&lt;n; current++)&#123;<br>        <span class="hljs-type">int</span> year,month,date,plus;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;year,&amp;month,&amp;date,&amp;plus);<br>        <span class="hljs-type">int</span> y=<span class="hljs-number">0</span>,m=<span class="hljs-number">1</span>,d=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">bool</span> leap = <span class="hljs-built_in">isLeap</span>(year);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;month;i++)&#123;<br>            sum+=days[leap][i<span class="hljs-number">-1</span>];<br>        &#125;<br>        sum+=date;<br>        sum+=plus;<br>        y=year;<br>        <span class="hljs-comment">//逐年增加，直到sum&lt;对应天数</span><br>        <span class="hljs-type">int</span> total[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">365</span>,<span class="hljs-number">366</span>&#125;;<br>        <span class="hljs-keyword">while</span>(sum&gt;total[<span class="hljs-built_in">isLeap</span>(y)])&#123;<br>            sum-=total[<span class="hljs-built_in">isLeap</span>(y)];<br>            y++;    <br>        &#125; <br>        <span class="hljs-comment">//反解为日期 </span><br>        leap = <span class="hljs-built_in">isLeap</span>(y);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;sum&gt;days[leap][i<span class="hljs-number">-1</span>];i++)&#123;<br>            m++;<br>            sum-=days[leap][i<span class="hljs-number">-1</span>];<br>        &#125;<br>        d=sum;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%04d-%02d-%02d\n&quot;</span>,y,m,d);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h3><h4 id="1-剩余的树"><a href="#1-剩余的树" class="headerlink" title="1. 剩余的树"></a>1. 剩余的树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by alleyf on 2023/6/24.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXL = <span class="hljs-number">100001</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">bool</span> flag[MAXL];<br>    <span class="hljs-type">int</span> l, m, num;<br>    cin &gt;&gt; l &gt;&gt; m;<br>    num = l + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= l; ++i) &#123;<br>        flag[i] = <span class="hljs-literal">true</span>;<br>    &#125;;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> left, right;<br>        cin &gt;&gt; left &gt;&gt; right;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = left; i &lt;= right; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (flag[i]) &#123;<br>                flag[i] = <span class="hljs-literal">false</span>;<br>                num--;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; num;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="#ff0000">1. 使用一个 l+1 长度的 array 存储所有树的存在状态，初始化所有树的状态为真；</font><br><font color="#ff0000">2. 根据区间循环判每棵树的状态，若为真则修改树输出总数的状态为假并将树的总数自减；</font><br><font color="#ff0000">3. 输出剩余树的数量。</font></p><h4 id="2-手机键盘"><a href="#2-手机键盘" class="headerlink" title="2. 手机键盘"></a>2. 手机键盘</h4><blockquote><ol><li>用一个数组按顺序保存每个字母所需要的时间段</li><li>循环每个输入的字母求和总次数，判断前后两字符是否在一个按键上，若果是则加两个时间段</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/24.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> letter_num[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;  <br>string s;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; s) &#123;  <br><span class="hljs-type">int</span> allNum = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); ++i) &#123;  <br>allNum += letter_num[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>];  <br><span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span> &amp;&amp; s[i] - s[i - <span class="hljs-number">1</span>] == letter_num[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>] - letter_num[s[i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>]) &#123;  <br>allNum += <span class="hljs-number">2</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; allNum &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-xxx-定律"><a href="#3-xxx-定律" class="headerlink" title="3.xxx_定律"></a>3.xxx_定律</h4><blockquote><p>既可递归实现也可 while 迭代迭代实现。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/24.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">xxx_law</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;num, <span class="hljs-type">int</span> &amp;cnt)</span> </span>&#123;  <br><span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) &#123;  <br><span class="hljs-keyword">return</span> cnt;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;  <br>cnt++;  <br>num = <span class="hljs-number">3</span> * num + <span class="hljs-number">1</span>;  <br>num /= <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">return</span> <span class="hljs-built_in">xxx_law</span>(num, cnt);  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>cnt++;  <br>num /= <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">return</span> <span class="hljs-built_in">xxx_law</span>(num, cnt);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> num;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; num) &#123;  <br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;  <br>cout &lt;&lt; <span class="hljs-built_in">xxx_law</span>(num, cnt) &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="第三章排序与查找"><a href="#第三章排序与查找" class="headerlink" title="第三章排序与查找"></a>第三章排序与查找</h1><h2 id="3-1-排序"><a href="#3-1-排序" class="headerlink" title="3.1 排序"></a>3.1 排序</h2><h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1. 排序"></a>1. 排序</h3><p><span style="background:#b1ffff">&gt; 冒泡排序：</span><br><span style="background:#b1ffff">&gt;     1. 升序：外层循环递减，内层循环递增直到外层循环变量；</span><br><span style="background:#b1ffff">&gt;     2. 降序：外层循环递增，内层循环从外层循环变量开始递增。</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n;  <br>cin &gt;&gt; n;  <br><span class="hljs-type">int</span> array[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; array[i];  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt; <span class="hljs-number">0</span>; --i) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) &#123;  <br><span class="hljs-keyword">if</span> (array[j] &gt; array[j + <span class="hljs-number">1</span>] &amp;&amp; j + <span class="hljs-number">1</span> &lt; n) &#123;  <br><span class="hljs-type">int</span> tmp = array[j + <span class="hljs-number">1</span>];  <br>array[j + <span class="hljs-number">1</span>] = array[j];  <br>array[j] = tmp;  <br>&#125;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value: array) &#123;  <br>cout &lt;&lt; value &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="大部分排序方法"><a href="#大部分排序方法" class="headerlink" title="大部分排序方法"></a>大部分排序方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//所有基本的排序方法了，桶排序、基数排序暂不写了  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, MAX = <span class="hljs-number">1e8</span>;  <br><span class="hljs-type">int</span> a[N];  <br><span class="hljs-type">int</span> n;  <br><span class="hljs-type">int</span> h[N], idx;<span class="hljs-comment">//heap_sort用  </span><br><span class="hljs-type">int</span> tmp[N];<span class="hljs-comment">//merge_sort用  </span><br><span class="hljs-type">int</span> bkt[MAX];<span class="hljs-comment">//counting_sort用  </span><br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buble_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span> - i; j++) &#123;  <br><span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>]) <span class="hljs-built_in">swap</span>(a[j], a[j + <span class="hljs-number">1</span>]);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;  <br><span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;  <br><span class="hljs-type">int</span> x = a[(l + r) / <span class="hljs-number">2</span>];  <br><span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">while</span> (i &lt; j) &#123;  <br><span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span> (a[i] &lt; x);  <br><span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span> (a[j] &gt; x);  <br><span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(a[i], a[j]);  <br>&#125;  <br><span class="hljs-built_in">quick_sort</span>(l, j);  <br><span class="hljs-built_in">quick_sort</span>(j + <span class="hljs-number">1</span>, r);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;  <br><span class="hljs-type">int</span> min_pos = i;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)  <br><span class="hljs-keyword">if</span> (a[j] &lt; a[min_pos]) min_pos = j;  <br><span class="hljs-built_in">swap</span>(a[i], a[min_pos]);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;  <br><span class="hljs-type">int</span> t = u;  <br><span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= idx &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= idx &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">if</span> (t != u) &#123;  <br><span class="hljs-built_in">swap</span>(h[t], h[u]);  <br><span class="hljs-built_in">down</span>(t);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) h[i] = a[i - <span class="hljs-number">1</span>];  <br>idx = n;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = idx / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--) <span class="hljs-built_in">down</span>(i);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <br>a[i] = h[<span class="hljs-number">1</span>];  <br>h[<span class="hljs-number">1</span>] = h[idx--];  <br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;  <br><span class="hljs-type">int</span> cur_idx = a[i];  <br><span class="hljs-type">int</span> j;  <br><span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; cur_idx; j--) &#123;  <br>a[j + <span class="hljs-number">1</span>] = a[j];  <br>&#125;  <br>a[j + <span class="hljs-number">1</span>] = cur_idx;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">binary_insertion_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;  <br><span class="hljs-type">int</span> cur_idx = a[i];  <br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = i - <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">while</span> (l &lt; r) &#123;  <br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">if</span> (a[mid] &lt;= cur_idx) l = mid;  <br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;  <br>&#125;  <br><span class="hljs-keyword">if</span> (a[l] &gt; cur_idx) l = <span class="hljs-number">-1</span>;  <br><span class="hljs-type">int</span> j;  <br><span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt; l; j--) a[j + <span class="hljs-number">1</span>] = a[j];  <br>a[j + <span class="hljs-number">1</span>] = cur_idx;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> gap = n / <span class="hljs-number">2</span>; gap &gt;= <span class="hljs-number">1</span>; gap /= <span class="hljs-number">2</span>) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = gap; i &lt; n; i++) &#123;  <br><span class="hljs-type">int</span> cur_idx = a[i];  <br><span class="hljs-type">int</span> j;  <br><span class="hljs-keyword">for</span> (j = i - gap; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; cur_idx; j -= gap) &#123;  <br>a[j + gap] = a[j];  <br>&#125;  <br>a[j + gap] = cur_idx;  <br>&#125;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;  <br><span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;  <br><span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;  <br><span class="hljs-built_in">merge_sort</span>(l, mid), <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);  <br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;  <br><span class="hljs-keyword">if</span> (a[i] &lt;= a[j]) tmp[k++] = a[i++];  <br><span class="hljs-keyword">else</span> tmp[k++] = a[j++];  <br>&#125;  <br><span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = a[i++];  <br><span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = a[j++];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l, j = <span class="hljs-number">0</span>; i &lt;= r; j++, i++) a[i] = tmp[j];  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">counting_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <br>bkt[a[i]]++;  <br><span class="hljs-keyword">if</span> (a[i] &gt; max) max = a[i];  <br>&#125;  <br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max + <span class="hljs-number">1</span>; i++) &#123;  <br><span class="hljs-keyword">while</span> (bkt[i]) &#123;  <br>a[j++] = i;  <br>bkt[i]--;  <br>&#125;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);  <br><span class="hljs-comment">// buble_sort();  </span><br><span class="hljs-comment">// quick_sort(0, n - 1);  </span><br><span class="hljs-comment">// selection_sort();  </span><br><span class="hljs-comment">// heap_sort();  </span><br><span class="hljs-comment">// insertion_sort();  </span><br><span class="hljs-comment">// binary_insertion_sort();  </span><br><span class="hljs-comment">// shell_sort();  </span><br><span class="hljs-comment">// merge_sort(0, n - 1);  </span><br><span class="hljs-built_in">counting_sort</span>();  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-成绩排序"><a href="#2-成绩排序" class="headerlink" title="2. 成绩排序"></a>2. 成绩排序</h3><p><font color="#f79646">- 定义一个结构体包含学号与成绩</font><br><font color="#f79646">- 写一个比较器 Compare</font><br><font color="#f79646">- 使用内置 sort 算法，设置迭代头和尾（地址）以及比较规则（比较器）</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-comment">//定义学生结构体  </span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;  <br><span class="hljs-type">int</span> number;  <br><span class="hljs-type">int</span> score;  <br>  <br><span class="hljs-built_in">Student</span>() &#123;&#125;  <br>  <br><span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> s) : <span class="hljs-built_in">number</span>(n), <span class="hljs-built_in">score</span>(s) &#123;&#125;  <br>&#125;;  <br>  <br><span class="hljs-comment">//定义比较函数  </span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Compare</span><span class="hljs-params">(Student s1, Student s2)</span> </span>&#123;  <br><span class="hljs-comment">//成绩相同比学号  </span><br><span class="hljs-keyword">if</span> (s1.score == s2.score) &#123;  <br><span class="hljs-keyword">return</span> s1.number &lt; s2.number; <span class="hljs-comment">//&#x27;&lt;&#x27;,指按照比较的参数由小到大排序  </span><br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-keyword">return</span> s1.score &lt; s2.score; <span class="hljs-comment">////&#x27;&lt;&#x27;,指按照比较的参数由小到大排序,同理，如果是&#x27;&gt;&#x27;，指按照由大到小排序  </span><br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n;  <br>cin &gt;&gt; n;  <br><span class="hljs-comment">//定义数组保存比较学生的基本信息  </span><br>Student arr[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i].number &gt;&gt; arr[i].score;  <br>&#125;  <br><span class="hljs-built_in">sort</span>(arr, arr + n, Compare);  <br><span class="hljs-keyword">for</span> (Student s: arr) &#123;  <br>cout &lt;&lt; s.number &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s.score &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-成绩排序-2"><a href="#3-成绩排序-2" class="headerlink" title="3. 成绩排序 2"></a>3. 成绩排序 2</h3><p>方法 1：<br><font color="#ff0000">sort是不稳定排序，stable_sort才是稳定排序，稳定排序不改变输入的顺序</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-type">int</span> num, sort_flag;  <br>  <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;  <br>string name;  <br><span class="hljs-type">int</span> score;  <br>  <br><span class="hljs-built_in">Student</span>() &#123;&#125;;  <br>  <br><span class="hljs-built_in">Student</span>(string n, <span class="hljs-type">int</span> s) : <span class="hljs-built_in">name</span>(n), <span class="hljs-built_in">score</span>(s) &#123;&#125;  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Compare</span><span class="hljs-params">(Student s1, Student s2)</span> </span>&#123;  <br><span class="hljs-keyword">return</span> sort_flag ? s1.score &lt; s2.score : s1.score &gt; s2.score;<span class="hljs-comment">//sort_flag为真则升序否则降序  </span><br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; num &gt;&gt; sort_flag) &#123;  <br>Student arr[num];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;  <br>cin &gt;&gt; arr[i].name &gt;&gt; arr[i].score;  <br>&#125;  <br><span class="hljs-built_in">stable_sort</span>(arr, arr + num, Compare);<span class="hljs-comment">//重点：sort是不稳定排序，stable_sort才是稳定排序，稳定排序不改变输入的顺序  </span><br><span class="hljs-keyword">for</span> (Student s: arr) &#123;  <br>cout &lt;&lt; s.name &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s.score &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：<br>用一个编号保存每个学生的顺序，排序比较器里成绩相等的按照编号升序排</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span>&#123;<br>string name;<br><span class="hljs-type">int</span> score;<br><span class="hljs-type">int</span> num; <br>&#125;;<br><span class="hljs-type">int</span> flag; <span class="hljs-comment">//升序还是降序 </span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a,student b)</span></span>&#123;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>(a.score==b.score) <span class="hljs-keyword">return</span> a.num&lt;b.num;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.score&gt;b.score;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(a.score==b.score) <span class="hljs-keyword">return</span> a.num&lt;b.num;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.score&lt;b.score;<span class="hljs-comment">//这里必须写else，否则牛客会编译失败 </span><br>&#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n)&#123;<br>cin&gt;&gt;flag;<br>student stu[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;stu[i].name&gt;&gt;stu[i].score;<br>stu[i].num=i;<br>&#125; <br><span class="hljs-built_in">sort</span>(&amp;stu[<span class="hljs-number">0</span>],&amp;stu[n],cmp); <span class="hljs-comment">//重点：sort是不稳定排序，stable_sort才是稳定排序 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) cout&lt;&lt;stu[i].name&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;stu[i].score&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="3-2-查找"><a href="#3-2-查找" class="headerlink" title="3.2 查找"></a>3.2 查找</h2><h3 id="1-找-x"><a href="#1-找-x" class="headerlink" title="1. 找 x"></a>1. 找 x</h3><p>方法 1：<br>用 flag 标志是否找到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n, t;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;  <br><span class="hljs-type">int</span> arr[n];  <br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i];  <br>&#125;  <br>cin &gt;&gt; t;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br><span class="hljs-keyword">if</span> (t == arr[i]) &#123;  <br>cout &lt;&lt; i &lt;&lt; endl;  <br>flag = ~flag;  <br><span class="hljs-keyword">break</span>;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">if</span> (!flag)  <br>cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：<br>设置初始默认为-1，找到则修改状态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> maxn=<span class="hljs-number">200</span>+<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> arr[maxn];<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i]);<br>        &#125;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-type">int</span> answer=<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i]==x)&#123;<br>                answer=i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,answer);<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="2-查找"><a href="#2-查找" class="headerlink" title="2. 查找"></a>2. 查找</h3><p>方法 1：复杂度 O（n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n) &#123;<br>        map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">bool</span>&gt; mp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> temp;<br>            cin&gt;&gt;temp;<br>            mp[temp] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        cin&gt;&gt;m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-type">int</span> temp;<br>            cin&gt;&gt;temp;<br>            <span class="hljs-keyword">if</span> (mp.<span class="hljs-built_in">find</span>(temp) != mp.<span class="hljs-built_in">end</span>()) &#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：复杂度 O（m·n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n, m;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;  <br><span class="hljs-type">int</span> arr[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i];  <br>&#125;  <br>cin &gt;&gt; m;  <br><span class="hljs-type">int</span> tar[m];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;  <br>cin &gt;&gt; tar[i];  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;  <br>string status = <span class="hljs-string">&quot;NO&quot;</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;  <br><span class="hljs-keyword">if</span> (arr[j] == tar[i]) &#123;  <br>status = <span class="hljs-string">&quot;YES&quot;</span>;  <br><span class="hljs-keyword">break</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; status &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-extrenum-index"><a href="#3-extrenum-index" class="headerlink" title="3.extrenum_index"></a>3.extrenum_index</h3><p>方法 1：<br>空间复杂度为 O（1）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, i, left, mid, right;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;<br>cin &gt;&gt; mid &gt;&gt; right;<br><span class="hljs-keyword">if</span> (mid != right)<br>cout &lt;&lt; <span class="hljs-string">&quot;0 &quot;</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>left = mid;<br>mid = right;<br>cin &gt;&gt; right;<br><span class="hljs-keyword">if</span> ((mid - left) * (mid - right) &gt; <span class="hljs-number">0</span>)<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (mid != right)<br>cout &lt;&lt; i;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;  <br><span class="hljs-type">int</span> arr[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i];  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;  <br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; arr[i] != arr[i + <span class="hljs-number">1</span>]) &#123;  <br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((arr[i] &gt; arr[i - <span class="hljs-number">1</span>] &amp;&amp; arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) || (arr[i] &lt; arr[i - <span class="hljs-number">1</span>] &amp;&amp; arr[i] &lt; arr[i + <span class="hljs-number">1</span>])) &#123;  <br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br><span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">2</span> &amp;&amp; arr[i] != arr[i + <span class="hljs-number">1</span>]) &#123;  <br>cout &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-找位置"><a href="#4-找位置" class="headerlink" title="4. 找位置"></a>4. 找位置</h3><p><span style="background:#b1ffff">时间复杂度为 O(n)</span></p><p><font color="#ff0000">1. 用一个额外的矢量 orderS 不重复的添加字符，以保证输出时字符顺序</font><br><font color="#ff0000">2. 用map的key记录字符，value记录重复出现的次数</font><br><font color="#ff0000">3. 最后按照orderS的顺序遍历输出</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string s;  <br>map&lt;<span class="hljs-type">char</span>, vector&lt;<span class="hljs-type">int</span>&gt;&gt; sm;  <br>vector&lt;<span class="hljs-type">char</span>&gt; orderS;  <br>cin &gt;&gt; s;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;  <br><span class="hljs-keyword">if</span> (sm.<span class="hljs-built_in">find</span>(s[i]) != sm.<span class="hljs-built_in">end</span>()) &#123;  <br>sm[s[i]].<span class="hljs-built_in">push_back</span>(i);  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>sm[s[i]] = vector&lt;<span class="hljs-type">int</span>&gt;&#123;i&#125;;  <br>orderS.<span class="hljs-built_in">push_back</span>(s[i]);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> item: orderS) &#123;  <br><span class="hljs-keyword">auto</span> tmp = sm.<span class="hljs-built_in">find</span>(item);  <br><span class="hljs-keyword">if</span> (tmp != sm.<span class="hljs-built_in">end</span>() &amp;&amp; tmp-&gt;second.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index: tmp-&gt;second) &#123;  <br><span class="hljs-keyword">if</span> (index != tmp-&gt;second.<span class="hljs-built_in">back</span>())  <br>cout &lt;&lt; tmp-&gt;first &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; index &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span>;  <br><span class="hljs-keyword">else</span>  <br>cout &lt;&lt; tmp-&gt;first &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; index &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="第四章字符串"><a href="#第四章字符串" class="headerlink" title="第四章字符串"></a>第四章字符串</h1><h2 id="1-字符串处理"><a href="#1-字符串处理" class="headerlink" title="1. 字符串处理"></a>1. 字符串处理</h2><h3 id="1-特殊乘法"><a href="#1-特殊乘法" class="headerlink" title="1. 特殊乘法"></a>1. 特殊乘法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string a, b;  <br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> i: a) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> j: b) &#123;  <br>sum += (i - <span class="hljs-string">&#x27;0&#x27;</span>) * (j - <span class="hljs-string">&#x27;0&#x27;</span>);  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; sum &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-密码翻译"><a href="#2-密码翻译" class="headerlink" title="2. 密码翻译"></a>2. 密码翻译</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string s;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; s) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;  <br><span class="hljs-keyword">if</span> ((s[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;Y&#x27;</span>) || (s[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;y&#x27;</span>)) &#123;  <br>s[i] += <span class="hljs-number">1</span>;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;z&#x27;</span> || s[i] == <span class="hljs-string">&#x27;Z&#x27;</span>) &#123;  <br>s[i] = s[i] == <span class="hljs-string">&#x27;z&#x27;</span> ? <span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-string">&#x27;A&#x27;</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; s &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-简单密码"><a href="#3-简单密码" class="headerlink" title="3. 简单密码"></a>3. 简单密码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 方法1：</span><br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, s)) &#123;<br>        <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;ENDOFINPUT&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;START&quot;</span> &amp;&amp; s != <span class="hljs-string">&quot;END&quot;</span>) &#123;<br>                <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> item : s) &#123;<br>                    <span class="hljs-keyword">if</span> ((item &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; item &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>))<br>                       s[i] = <span class="hljs-string">&#x27;A&#x27;</span> + (item - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">21</span>) % <span class="hljs-number">26</span>;<br>                    i++;<br>                &#125;<br>                cout &lt;&lt; s &lt;&lt; endl;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 方法2:</span><br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">char</span>&gt; pwd_map&#123;<br>    &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>&#125;,<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, s)) &#123;<br>        <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;ENDOFINPUT&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;START&quot;</span> &amp;&amp; s != <span class="hljs-string">&quot;END&quot;</span>) &#123;<br>                <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> item : s) &#123;<br>                    <span class="hljs-keyword">if</span> ((item &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; item &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>))<br>                       s[i] = pwd_map[item];<br>                    i++;<br>                &#125;<br>                cout &lt;&lt; s &lt;&lt; endl;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-统计字符"><a href="#4-统计字符" class="headerlink" title="4. 统计字符"></a>4. 统计字符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/30.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string ts, s;  <br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, ts)) &#123;  <br><span class="hljs-keyword">if</span> (ts == <span class="hljs-string">&quot;#&quot;</span>)  <br><span class="hljs-keyword">break</span>;  <br><span class="hljs-built_in">getline</span>(cin, s);  <br><span class="hljs-type">int</span> cnum[ts.<span class="hljs-built_in">length</span>()];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ts.<span class="hljs-built_in">length</span>(); ++i) &#123;  <br>cnum[i] = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> j: s) &#123;  <br><span class="hljs-keyword">if</span> (j == ts[i]) &#123;  <br>cnum[i]++;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; ts[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; cnum[i] &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br>  <br>&#125;  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment">* 方法2：  </span><br><span class="hljs-comment">* using namespace std;  </span><br><span class="hljs-comment">//1：注意读题，i ng是当四个字符处理，而非i和ng  </span><br><span class="hljs-comment">//2：如何持续输入？while持续输入第一个字符，循环体内输入第二个  </span><br><span class="hljs-comment">//如何捕捉结束字符？在第一个字符串输入时识别  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">int number[128];  </span><br><span class="hljs-comment">int main()  </span><br><span class="hljs-comment">&#123;  </span><br><span class="hljs-comment">string str1,str2;  </span><br><span class="hljs-comment">while(getline(cin,str1))&#123;  </span><br><span class="hljs-comment">if(str1==&quot;#&quot;) break;  </span><br><span class="hljs-comment">getline(cin,str2);  </span><br><span class="hljs-comment">memset(number,0,sizeof(number)); //number数组记录该字符，出现的次数  </span><br><span class="hljs-comment">for(int i=0;i&lt;str2.size();i++)&#123;  </span><br><span class="hljs-comment">number[str2[i]]++; //长字符串的字符对应ASCII码的下标+1  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">for(int i=0;i&lt;str1.size();i++)&#123;  </span><br><span class="hljs-comment">printf(&quot;%c %d\n&quot;,str1[i],number[str1[i]]);  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">//学到的方法：ASCII码不大，想统计每个字符，直接将其对应的ASCII码下标的元素加1即可！  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="5-字母统计"><a href="#5-字母统计" class="headerlink" title="5. 字母统计"></a>5. 字母统计</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/30.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; c_map&#123;  <br>&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string s;  <br><span class="hljs-built_in">getline</span>(cin, s);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c: s) &#123;  <br><span class="hljs-keyword">if</span> (c_map.<span class="hljs-built_in">find</span>(c) != c_map.<span class="hljs-built_in">end</span>()) &#123;  <br>c_map[c]++;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> item: c_map) &#123;  <br>cout &lt;&lt; item.first &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; item.second &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-字符串匹配"><a href="#2-字符串匹配" class="headerlink" title="2. 字符串匹配"></a>2. 字符串匹配</h2>]]></content>
    
    
    <summary type="html">some solutions about common algorithms</summary>
    
    
    
    <category term="前后端开发" scheme="https://alleyf.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Algorithm" scheme="https://alleyf.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Dateframe—Algorithm</title>
    <link href="https://alleyf.github.io/2023/03/2e76a383274a.html"/>
    <id>https://alleyf.github.io/2023/03/2e76a383274a.html</id>
    <published>2023-03-17T11:06:15.000Z</published>
    <updated>2023-05-24T09:15:40.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-线性表"><a href="#1-线性表" class="headerlink" title="1.线性表"></a>1.线性表</h1><blockquote><p>无论哪种数据结构，都存在<font color="#ff0000">增删改查 (按值查找)查（按位查找）</font>操作，对应不同操作的<font color="#4bacc6">时间复杂度不同</font>，要根据实际数据的形式选择合适的数据结构进行存储，再选择合适算法进行处理。</p></blockquote><h2 id="顺序表（sequence-list）"><a href="#顺序表（sequence-list）" class="headerlink" title="顺序表（sequence list）"></a>顺序表（sequence list）</h2><h3 id="1初始化"><a href="#1初始化" class="headerlink" title="1初始化"></a>1初始化</h3><h3 id="2增加元素"><a href="#2增加元素" class="headerlink" title="2增加元素"></a>2增加元素</h3><h3 id="3删除元素"><a href="#3删除元素" class="headerlink" title="3删除元素"></a>3删除元素</h3><h3 id="4修改元素"><a href="#4修改元素" class="headerlink" title="4修改元素"></a>4修改元素</h3><h3 id="5查找元素"><a href="#5查找元素" class="headerlink" title="5查找元素"></a>5查找元素</h3><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><h2 id="链表（link-list）"><a href="#链表（link-list）" class="headerlink" title="链表（link list）"></a>链表（link list）</h2><h3 id="1初始化-1"><a href="#1初始化-1" class="headerlink" title="1初始化"></a>1初始化</h3><h3 id="2增加元素-1"><a href="#2增加元素-1" class="headerlink" title="2增加元素"></a>2增加元素</h3><h4 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h4><h4 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h4><h3 id="3删除元素-1"><a href="#3删除元素-1" class="headerlink" title="3删除元素"></a>3删除元素</h3><h3 id="4修改元素-1"><a href="#4修改元素-1" class="headerlink" title="4修改元素"></a>4修改元素</h3><h3 id="5查找元素-1"><a href="#5查找元素-1" class="headerlink" title="5查找元素"></a>5查找元素</h3><h4 id="按值查找-1"><a href="#按值查找-1" class="headerlink" title="按值查找"></a>按值查找</h4><h4 id="按位查找-1"><a href="#按位查找-1" class="headerlink" title="按位查找"></a>按位查找</h4><h1 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h1><blockquote><p>栈是一种<font color="#8064a2">后进先出（LIFO）</font>的线性表结构。</p></blockquote><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>SElemType *base;<br>SElemType *top;<br><span class="hljs-type">int</span> stacksize;&#125; SgStack;<br></code></pre></td></tr></table></figure><p><span style="background:#b1ffff">链栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span>&#123;</span><br>SElemType data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span> *<span class="hljs-title">next</span>;</span>&#125;StackNode,*LinkStack;<br><br></code></pre></td></tr></table></figure><h2 id="1初始化-2"><a href="#1初始化-2" class="headerlink" title="1初始化"></a>1初始化</h2><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitStack</span><span class="hljs-params">(SgStack &amp;S,<span class="hljs-type">int</span> MAXSIZE&#123;</span><br><span class="hljs-params">S.base =new SElemType [MAXSIZE]；</span><br><span class="hljs-params"><span class="hljs-keyword">if</span>(!S.base） </span><br><span class="hljs-params">   <span class="hljs-keyword">return</span> OVERFLOW;</span><br><span class="hljs-params">   S.top = S.base;</span><br><span class="hljs-params">   S.stacksize = MAXSIZE；</span><br><span class="hljs-params">   <span class="hljs-keyword">return</span> OK;</span><br></code></pre></td></tr></table></figure><p><span style="background:#b1ffff">链栈：</span></p><p><strong>不带头节点：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Initstack</span> <span class="hljs-params">(LinkStack &amp;S)</span><br>&#123;<br>S=<span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-入栈"><a href="#2-入栈" class="headerlink" title="2 入栈"></a>2 入栈</h2><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span><br>时间复杂度：O（1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><br>Status <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack &amp;S,SElemType e)</span><br>&#123;<br><span class="hljs-keyword">if</span>(S.top - S.base==S.stacksize）<span class="hljs-keyword">return</span> ERROR;<br>*S.top++=e;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是一个名为 <code>Push</code> 的函数，它接受两个参数：一个指向栈 <code>S</code> 的指针引用和要入栈的元素 <code>e</code>。<code>SqStack</code> 表示栈的类型，在这里推测它是由结构体或类定义的。<code>&amp;S</code> 表示将栈变量的地址传递给函数，通过引用来修改栈的内容。在 C/C++中，引用有时候也被称为别名(alias)，它允许我们使用类似于指针的语法来操作对象，但是具有更好的安全性和易读性。<code>SElemType</code> 是栈元素的数据类型，可以是任何合法的数据类型。</p><p>这个函数的作用是将元素e压入到栈S中，如果栈已满则返回ERROR，否则在栈顶插入元素e并返回OK。其中<code>S.top - S.base</code> 表示当前栈中已有元素的个数，如果这个值等于<code>S.stacksize</code>就意味着栈已经满了。<code>*S.top++=e</code>表示将元素e存储在栈顶，并将栈指针往上移动一位，准备接收下一个元素。最后，函数返回插入操作的结果，OK表示成功，ERROR表示失败。</p><p><span style="background:#b1ffff">链栈：</span><br><strong>头插</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">Push</span> <span class="hljs-params">(LinkStack&amp;S,ElemType e)</span>&#123;<br>p=new StackNode;<span class="hljs-comment">//生成新结点p</span><br><span class="hljs-keyword">if</span> (!p)<span class="hljs-keyword">return</span> OVERFLOW;<br>p-&gt;data=e;<br>p-&gt;next=S;<br>S=p;<span class="hljs-comment">//S始终指向当前第一个节点(栈顶节点)</span><br><span class="hljs-keyword">return</span> OK;<br><br></code></pre></td></tr></table></figure><h2 id="3-出栈"><a href="#3-出栈" class="headerlink" title="3 出栈"></a>3 出栈</h2><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack &amp;S,SElemType &amp;e)</span><br>&#123;<br><span class="hljs-keyword">if</span>(S.top == S.base）<span class="hljs-keyword">return</span> ERROR;<br>e=*--S.top;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#b1ffff">链栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">Pop</span> <span class="hljs-params">(LinkStack &amp;S,SElemType &amp;e)</span><br>&#123;<br><span class="hljs-keyword">if</span> (S==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> ERROR;<br>e = S-&gt;data;<br>p = S;<br>S = S-&gt;next;<br>delete p;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-队列"><a href="#3-队列" class="headerlink" title="3. 队列"></a>3. 队列</h1><blockquote><p>队列是一种先进先出（FIFO）的线性表，只允许在表的一端插入，另一端删除。</p></blockquote><p><font color="#8064a2">顺序队列：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">Typedef <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>QElemType *base;<span class="hljs-comment">//初始化的动态分配存储空间</span><br><span class="hljs-type">int</span> front;<span class="hljs-comment">//头指针</span><br><span class="hljs-type">int</span> rear;<span class="hljs-comment">//尾指针</span><br>&#125;SgQueue;<br><br></code></pre></td></tr></table></figure><p><font color="#f79646">链队列：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span></span><br><span class="hljs-class">&#123;</span><br>QElemType data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Qnode</span> *<span class="hljs-title">next</span>;</span><br>&#125;Qnode,*QueuePtr;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>QueuePtr front;<span class="hljs-comment">//队头指针</span><br>QueuePtr rear;<span class="hljs-comment">//队尾指针</span><br>&#125;LinkQueue;<br><br></code></pre></td></tr></table></figure><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1 初始化"></a>1 初始化</h2><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitQueue</span> <span class="hljs-params">(SgQueue &amp;Q)</span><br>&#123;<br>Q.base = new QElemType[MAXQSIZE];<br><span class="hljs-keyword">if</span> (!Q.base)<br><span class="hljs-built_in">exit</span> (OVERFLOW);<br>Q.front=Q.rear=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#fdbfff">链队列：</span><br><strong>有头节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitQueue</span> <span class="hljs-params">(LinkQueue &amp;Q)</span>&#123;<br>Q.front=(QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br><span class="hljs-keyword">if</span>(!Q.front)<br><span class="hljs-built_in">exit</span>(OVERFLOW);<br>Q.rear=Q.front;<br>Q.front-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#d3f8b6">队空标志：front==rear</span><br><span style="background:#d3f8b6">队满标志：（rear+1）%M=front</span>（循环队列）</p><h2 id="2-入队"><a href="#2-入队" class="headerlink" title="2 入队"></a>2 入队</h2><p><strong>链接新节点，更新队尾节点</strong></p><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q,QElemType e)</span><br>&#123;<span class="hljs-keyword">if</span>((Q.rear+<span class="hljs-number">1</span>)%MAXQSIZE==Q.front)<br><span class="hljs-keyword">return</span> ERROR;<br>Q.base[Q.rear]=e;<br>Q.rear=(Q.rear+<span class="hljs-number">1</span>)%MAXQSIZE;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#fdbfff">链队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">EnQueue</span> <span class="hljs-params">(LinkQueue &amp;Q,QElemType e)</span>&#123;<br>p=(QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (QNode));<br><span class="hljs-keyword">if</span>(!p)<br><span class="hljs-built_in">exit</span>(OVERFLOW);<br>p-&gt;data=e;<br>p-&gt;next=<span class="hljs-literal">NULL</span>;<br>Q.rear-&gt;next=p;<br>Q.rear=p;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-出队"><a href="#3-出队" class="headerlink" title="3 出队"></a>3 出队</h2><p><strong>临时存储首元节点，队头节点指向首元节点的下一个节点，删除释放首元节点</strong></p><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">DeQueue</span> <span class="hljs-params">(LinkQueue &amp;Q,QElemType &amp;e)</span><br>&#123;<br><span class="hljs-keyword">if</span>(Q.front==Q.rear)<br><span class="hljs-keyword">return</span> ERROR;<br>e=Q.base[Q.front];<br>Q.front=(Q.front+<span class="hljs-number">1</span>)%MAXQSIZE;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background:#fdbfff">链队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">DeQueue</span> <span class="hljs-params">(LinkQueue &amp;Q,QElemType &amp;e&#123;</span><br><span class="hljs-params"><span class="hljs-keyword">if</span>(Q.front==Q.rear)</span><br><span class="hljs-params"><span class="hljs-keyword">return</span> ERROR;</span><br><span class="hljs-params">p=Q.front-&gt;next;</span><br><span class="hljs-params">e=p-&gt;data;</span><br><span class="hljs-params">Q.front-&gt;next=p-&gt;next;</span><br><span class="hljs-params"><span class="hljs-keyword">if</span>(Q.rear==p)</span><br><span class="hljs-params">Q.rear=Q.front;</span><br><span class="hljs-params"><span class="hljs-built_in">free</span>(p);</span><br><span class="hljs-params"><span class="hljs-keyword">return</span> OK;</span><br><span class="hljs-params">&#125;</span><br></code></pre></td></tr></table></figure><p><span style="background:rgba(240, 200, 0, 0.2)">最后一个节点的时候，不删除，要让队头等于队尾节点。</span></p><h2 id="4-取队列长度"><a href="#4-取队列长度" class="headerlink" title="4 取队列长度"></a>4 取队列长度</h2><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">QueueLength</span><span class="hljs-params">(SqQueue Q)</span><br>&#123;<br><span class="hljs-keyword">return</span> (Q.rear-Q.front+MAXQSIZE)%MAXQSIZE;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h1 id="4-串、数组和广义表"><a href="#4-串、数组和广义表" class="headerlink" title="4. 串、数组和广义表"></a>4. 串、数组和广义表</h1><blockquote><p> 串就是字符串<br> 数组包括一维数组和二维数组<br> 广义表类似于 python 中的列表，可以表嵌套</p></blockquote><h1 id="5-树"><a href="#5-树" class="headerlink" title="5. 树"></a>5. 树</h1><p>n 个节点的有限集合</p><h2 id="1性质"><a href="#1性质" class="headerlink" title="1性质"></a>1性质</h2><ul><li>具有 n 个节点的完全二叉树的深度为<br>$$<a href="%E5%8F%96%E4%B8%8B%E7%95%8C">log_2 n</a>+1$$</li></ul><p>两类特殊的二叉树：</p><ol><li>满二叉树：<span style="background:#b1ffff">指深度为 k 且含有</span> $2^k-1$ <span style="background:#b1ffff">个节点的二叉树。</span></li><li>完全二叉树：<span style="background:#affad1">书中所含的 n 个节点和满二叉树中编号为 1 至 n 的节点一一对应。</span></li></ol><h2 id="2存储结构"><a href="#2存储结构" class="headerlink" title="2存储结构"></a>2存储结构</h2><p>顺序存储：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAXSIZE 100</span><br><span class="hljs-keyword">typedef</span> TElemType SqBiTree[MAXSIZE];<br>SqBiTree bt;<br></code></pre></td></tr></table></figure><p>链式存储：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>   TEIemType data;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">Ichild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125;BiTNode, *BiTree;<br></code></pre></td></tr></table></figure><h2 id="3遍历方式"><a href="#3遍历方式" class="headerlink" title="3遍历方式"></a>3遍历方式</h2><blockquote><p>先中后的顺序指的是根据点访问的顺序，如先序遍历就是<font color="#f79646">根左右</font>，后序遍历就是<font color="#f79646">左右根</font>。</p></blockquote><p><img src="https://s2.loli.net/2023/05/24/kyjJIXU7eLSbCFW.png" alt="遍历图|275"></p><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>ABCDEFGHK</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Preorder</span> <span class="hljs-params">(BiTree T)</span><br>&#123;<br>   <span class="hljs-keyword">if</span> (T)&#123;<br>      visit(T-&gt;data);<br>      Preorder(T-&gt;IchiId);<br>      Preorder(T-&gt;rchiId);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>BDCAEHGKF</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Inorder</span> <span class="hljs-params">(BiTree T)</span><br>&#123;<br>   <span class="hljs-keyword">if</span> (T) &#123;<br>      Inorder(T-&gt;lchiId);<br>      visit(T-&gt;data);<br>      Ineorder(T-&gt;rchiId);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>中序非递归：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Inorder1</span> <span class="hljs-params">(BiTree T)</span><br>&#123; <br>Initstack(S); p=T;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">while</span>(p) &#123;Push(S,p);p=p-&gt;lchild;&#125;<span class="hljs-comment">//先将左孩子全部入栈</span><br><span class="hljs-keyword">if</span>(StackEmpty(S)) <span class="hljs-keyword">return</span>;<br>Pop(S,p);<span class="hljs-comment">//出一个左孩子</span><br><span class="hljs-built_in">cout</span>&lt;&lt;P-&gt;data;<br>p=p-&gt;rchild;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>DCBHKGFEA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bkorder</span> <span class="hljs-params">(BiTree T)</span><br>&#123;<br>   <span class="hljs-keyword">if</span> (T) &#123;<br>      bkorder(T-&gt;lchiId);<br>      bkorder(T-&gt;rchiId);<br>      visit(T-&gt;data);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>ABECFDGHK</p><h3 id="4-常见应用"><a href="#4-常见应用" class="headerlink" title="4 常见应用"></a>4 常见应用</h3><ol><li>统计二叉树中叶子节点的个数：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CountLeaf</span> <span class="hljs-params">(BiTree T, <span class="hljs-type">int</span> &amp; count)</span> &#123;<br><span class="hljs-keyword">if</span>(T)&#123;<br><span class="hljs-keyword">if</span>(!T-&gt;lchild&amp;&amp;!T-&gt;rchild)<br>count++;<br>CountLeaf(T-&gt;lchild, count);<br>CountLeaf(T-&gt;rchild, count);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>求二叉树的深度：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Depth</span> <span class="hljs-params">(BiTree I)</span>&#123;<br> <span class="hljs-keyword">if</span> (!T) depthval = O;<br> <span class="hljs-keyword">else</span> &#123;<br>    depthL= Depth(T-&gt;IchiId);<span class="hljs-comment">//求左子树的深度</span><br>    depthR= Depth(T-&gt;rchild);<span class="hljs-comment">//求右子树的深度</span><br>    depthval=<span class="hljs-number">1</span>+ (depthL&gt;depthR?depthL:depthR);<span class="hljs-comment">//取较大者相加</span><br>   &#125;<br> <span class="hljs-keyword">return</span> depthval;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>建立二叉树的存储结构：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CreateBiTree</span><span class="hljs-params">(BiTree &amp;T)</span>&#123;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;ch);<br><span class="hljs-keyword">if</span>(ch=<span class="hljs-string">&quot;&quot;</span>)<br>T=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>T = new BiTNode;<br>T-&gt;data = ch;<br>CreteBiTree(T-&gt;lchild);<span class="hljs-comment">//创建左子树</span><br>CreteBiTree(T-&gt;rchild);<span class="hljs-comment">//创建右子树</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>查询二叉树中的某个节点：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">Preorder</span> <span class="hljs-params">(BiTree T, ElemType x, BiTree &amp;p)</span>&#123;<br><span class="hljs-keyword">if</span>(T)&#123;<br>    <span class="hljs-keyword">if</span>(T-&gt;data==x)<span class="hljs-comment">//递归终止条件</span><br>    &#123; <br>    p = T;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br>elseif&#123; <br><span class="hljs-keyword">if</span>(Preorder(T-&gt;lchild, x, p))<br><span class="hljs-keyword">return</span> TRUE;<br>elseif&#123;<br><span class="hljs-keyword">if</span>(Preorder(T-&gt;rchild, x, p))<br><span class="hljs-keyword">return</span> TRUE;<br><span class="hljs-keyword">else</span>&#123;<br>p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> False;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> False;<br></code></pre></td></tr></table></figure><ol start="5"><li>线索二叉树：</li></ol><p>在中序线索二叉树中，查找结点*p的中序后继结点<br><span style="background:rgba(240, 200, 0, 0.2)">1. 若 P-&gt;Rtag 为 1, 则 P 的右线索指向其后继结点<em>q;</span><br><span style="background:rgba(240, 200, 0, 0.2)">2. 若 P-&gt;Rtag 为 0, 则其后继结点</em>q 是右子树中的最左结点。</span></p><ol start="6"><li>森林于树之间的转换</li></ol><blockquote><p>左孩子右兄弟连接原则：左子树均为孩子节点，右子树均为兄弟节点。</p></blockquote><ol start="7"><li>哈夫曼树，降序排列，从低到高，两两（多多）做兄弟构造新树，循环往复<br>所有叶子节点带权长度之和：<br>$$<br>WPL(T)=\sum W_kl_k(对所有叶子节点)<br>$$<blockquote><p>WPL 最小的哈夫曼树为<font color="#8db3e2">最优哈夫曼树</font>。<br>哈夫曼编码原则：<font color="#ff0000">左 0 右 1 原则</font></p></blockquote></li></ol><h1 id="6-图"><a href="#6-图" class="headerlink" title="6. 图"></a>6. 图</h1><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1>]]></content>
    
    
    <summary type="html">some key points with respect to dataframe-algorithm</summary>
    
    
    
    <category term="前后端开发" scheme="https://alleyf.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Dataframe-Algorithm" scheme="https://alleyf.github.io/tags/Dataframe-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>FIR and IIR filter design</title>
    <link href="https://alleyf.github.io/2022/12/b3288796b118.html"/>
    <id>https://alleyf.github.io/2022/12/b3288796b118.html</id>
    <published>2022-12-21T13:17:00.000Z</published>
    <updated>2022-12-21T13:46:59.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FIR和IIR滤波器设计与实现"><a href="#FIR和IIR滤波器设计与实现" class="headerlink" title="FIR和IIR滤波器设计与实现"></a>FIR和IIR滤波器设计与实现</h1><h2 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h2><p>在子作业4的基础上，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。</p><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><h3 id="1-IIR滤波器设计实现"><a href="#1-IIR滤波器设计实现" class="headerlink" title="1.IIR滤波器设计实现"></a>1.IIR滤波器设计实现</h3><p>根据作业四得到的性能指标，利用MATLAB滤波器工具箱，输入性能指标参数选择效果最好的IIR滤波器进行滤波。</p><h3 id="2-FIR滤波器设计实现"><a href="#2-FIR滤波器设计实现" class="headerlink" title="2.FIR滤波器设计实现"></a>2.FIR滤波器设计实现</h3><p>根据作业四得到的性能指标，利用MATLAB滤波器工具箱，输入截止频率**$f_c$**选择合适的窗函数设计得到FIR滤波器。</p><h2 id="三、实现过程"><a href="#三、实现过程" class="headerlink" title="三、实现过程"></a>三、实现过程</h2><h3 id="1-性能指标分析"><a href="#1-性能指标分析" class="headerlink" title="1.性能指标分析"></a>1.性能指标分析</h3><p>数字滤波器的频率响应表示为：<br>$$<br>H(e^{j\omega})=|H(e^{j\omega})|e^{j\beta(j\omega)}<br>$$<br>根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围:</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A8.png"></p><p>下图展示了不同滤波器的技术指标：</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A82.png"></p><p>依据作业四得到的性能指标，通带截止频率**$w_p=10.7khz$<strong>，阻带截止频率</strong>$w_{st}=11.15khz$<strong>,通带最大衰减系数</strong>$\delta_1=2db$<strong>，阻带最小衰减</strong>$\delta_2=80db$**。可以使用MATLAB滤波器工具箱进行IIR和FIR滤波器的设计。</p><h3 id="2-IIR滤波器设计实现"><a href="#2-IIR滤波器设计实现" class="headerlink" title="2.IIR滤波器设计实现"></a>2.IIR滤波器设计实现</h3><p>采用MATLAB的滤波器设计工具进行设计，在尝试不同种类的滤波器后，对比发现<strong>巴特沃斯滤波器</strong>的效果最佳，因此选择该滤波器来滤除噪声信号，设计得到的IIR滤波器结果如下图所示：</p><img src="D:\IIR.png" style="zoom: 50%;" /><p>IIR滤波过程代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc<br>clear all<br><span class="hljs-comment">%% 数据导入及参数设置</span><br>[x,Fs]=audioread(<span class="hljs-string">&#x27;D:\DSP实验报告\大作业报告\ch4andch5\myaudio_11.15k_11.95k.wav&#x27;</span>);<br>x=x(:,<span class="hljs-number">1</span>);<span class="hljs-comment">%选择左声道</span><br>N=<span class="hljs-built_in">length</span>(x);<br>t=(<span class="hljs-number">0</span>:N<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>df=Fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<span class="hljs-comment">%频域范围</span><br>X=FFT(x,N,Fs,t);<br>X=fftshift(X);<span class="hljs-comment">%将频谱翻转过来</span><br>f=(f*Fs-Fs/<span class="hljs-number">2</span>)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>X=<span class="hljs-built_in">abs</span>(X);<br><span class="hljs-comment">% 绘出时域图和幅频响应</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">221</span>)<br><span class="hljs-built_in">plot</span>(t,x);<br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>subplot(<span class="hljs-number">222</span>)<br><span class="hljs-built_in">plot</span>(f(:,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),X(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>)<br>title(<span class="hljs-string">&quot;原信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% IIR-Butterworth低通滤波器滤除高频噪声</span><br>y=filter(IIR,x);<br>Y=FFT(y,N,Fs,t);<br>Y=fftshift(Y);<br>Y=<span class="hljs-built_in">abs</span>(Y);<br><span class="hljs-comment">% 绘出滤波后的时域图和幅频响应</span><br>subplot(<span class="hljs-number">223</span>)<br><span class="hljs-built_in">plot</span>(t,y,<span class="hljs-string">&#x27;b&#x27;</span>);<br>title(<span class="hljs-string">&quot;IIR滤波后信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">224</span>)<br><span class="hljs-built_in">plot</span>(f(<span class="hljs-number">1</span>,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),Y(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;g&#x27;</span>)<br>title(<span class="hljs-string">&quot;IIR滤波后信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% 试听及保存</span><br>sound(y,Fs);<br>audiowrite(<span class="hljs-string">&#x27;./IIRfilter.wav&#x27;</span>,y,Fs)<br></code></pre></td></tr></table></figure><h3 id="3-FIR滤波器设计实现"><a href="#3-FIR滤波器设计实现" class="headerlink" title="3.FIR滤波器设计实现"></a>3.FIR滤波器设计实现</h3><p>采用MATLAB的滤波器设计工具进行设计，在尝试不同种类的窗函数后，对比发现<strong>布莱克曼窗</strong>的效果最佳，因此选择该窗函数来滤除噪声信号，设计得到的FIR滤波器结果如下图所示：</p><img src="D:\FIRt.png" style="zoom:50%;" /><p>FIR时域和频域特性图如下图上所示：</p><img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\FIR窗特性.png" style="zoom: 50%;" /><p>FIR滤波过程代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc<br>clear all<br><span class="hljs-comment">%% 数据导入及参数设置</span><br>[x,Fs]=audioread(<span class="hljs-string">&#x27;D:\DSP实验报告\大作业报告\ch4andch5\myaudio_11.15k_11.95k.wav&#x27;</span>);<br>x=x(:,<span class="hljs-number">1</span>);<span class="hljs-comment">%选择左声道</span><br>Nx=<span class="hljs-built_in">length</span>(x);<br>tx=(<span class="hljs-number">0</span>:Nx<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>df=Fs/<span class="hljs-built_in">length</span>(tx); <span class="hljs-comment">%计算谱线间隔</span><br>fx=tx*df;<span class="hljs-comment">%频域范围</span><br>X=FFT(x,Nx,Fs,tx);<span class="hljs-comment">%快速傅里叶变换</span><br>fx=(fx*Fs)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>X=<span class="hljs-built_in">abs</span>(X);<br><span class="hljs-comment">% 绘出时域图和幅频响应</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">221</span>)<br><span class="hljs-built_in">plot</span>(tx,x); <br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">222</span>)<br><span class="hljs-built_in">plot</span>(fx(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Nx/<span class="hljs-number">2</span>)),X(<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Nx/<span class="hljs-number">2</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;b&#x27;</span>)<br>title(<span class="hljs-string">&quot;原信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% blackman窗低通滤波器滤除高频噪声</span><br>y=filter(FIR,x);<br>Ny=<span class="hljs-built_in">length</span>(y);<span class="hljs-comment">%滤波后信号的长度</span><br>ty=(<span class="hljs-number">0</span>:Ny<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>Y=FFT(y,Ny,Fs,ty);<span class="hljs-comment">%快速傅里叶变换求频谱</span><br>df=Fs/<span class="hljs-built_in">length</span>(ty); <span class="hljs-comment">%计算谱线间隔</span><br>fy=ty*df;<span class="hljs-comment">%频域范围</span><br>fy=(fy*Fs)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>Y=<span class="hljs-built_in">abs</span>(Y);<br><span class="hljs-comment">% 绘出滤波后的时域图和幅频响应</span><br>subplot(<span class="hljs-number">223</span>)<br><span class="hljs-built_in">plot</span>(ty,y,<span class="hljs-string">&quot;b&quot;</span>);<br>title(<span class="hljs-string">&quot;FIR滤波后信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">224</span>)<br>stem(fx(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Ny/<span class="hljs-number">2</span>)),Y(<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Ny/<span class="hljs-number">2</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>)<br>title(<span class="hljs-string">&quot;FIR滤波后信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% 试听及保存</span><br>sound(y,Fs);<br>audiowrite(<span class="hljs-string">&#x27;./FIRfilter.wav&#x27;</span>,y,Fs)<br></code></pre></td></tr></table></figure><h2 id="四、结果展示"><a href="#四、结果展示" class="headerlink" title="四、结果展示"></a>四、结果展示</h2><p>加噪信号经过IIR滤波器和FIR滤波器前后时域、频域对比图如下图所示：</p><table>    <thead>        <th>            <img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\IIR滤波前后对比图.png" alt="IIR滤波前后对比图" style="zoom:50%;display:inline" />        </th>        <th>            <img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\FIR滤波前后对比图.png"  alt="FIR滤波前后对比图" style="zoom:50%;display:inline" />        </th>    </thead></table><p>由图可知IIR和FIR滤波器都很好的滤除了噪声信号，达到了预期的设计，<u>IIR和FIR滤波后的音频依附录可见</u>。</p><h2 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h2><blockquote><ol><li>IIR滤波器和FIR滤波器各自有各自的优缺点，都有不同的结构和实现方法。<strong>IIR滤波器结构简单</strong>容易实现，但是一般<strong>阶数较高</strong>，而且<strong>不稳定</strong>，相频响应<strong>不是完全线性相位</strong>。<strong>FIR滤波器</strong>一般<strong>阶数较低</strong>，相频响应具有<strong>完全的线性相位</strong>，系统<strong>绝对稳定</strong>，但是线性相位结构的FIR滤波器<strong>结构相对比较复杂</strong>难以实现。</li><li>IIR和FIR滤波器实际人工设计实现起来相对比较复杂，我们可以利用MATLAB中的滤波器设计工具箱辅助我们完成满足要求的各种滤波器，实现起来比较简单容易，</li></ol></blockquote><h2 id="六、源码开源"><a href="#六、源码开源" class="headerlink" title="六、源码开源"></a>六、源码开源</h2><blockquote><p><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-24bfcec2-0b23-4547-a957-73ffab276534/2c7c8bdd-2316-47cd-8a94-4882573700a5.zip">源代码资源包</a>有需要的小伙伴可以下载参考。</p></blockquote>]]></content>
    
    
    <summary type="html">some ideas about FIR and IIR filter。</summary>
    
    
    
    <category term="DSP" scheme="https://alleyf.github.io/categories/DSP/"/>
    
    
    <category term="FIR、IIR" scheme="https://alleyf.github.io/tags/FIR%E3%80%81IIR/"/>
    
  </entry>
  
  <entry>
    <title>Frequency——Analysis</title>
    <link href="https://alleyf.github.io/2022/12/98f47ed35125.html"/>
    <id>https://alleyf.github.io/2022/12/98f47ed35125.html</id>
    <published>2022-12-21T13:17:00.000Z</published>
    <updated>2023-03-17T06:34:53.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="频谱分析及滤波指标设计"><a href="#频谱分析及滤波指标设计" class="headerlink" title="频谱分析及滤波指标设计"></a>频谱分析及滤波指标设计</h1><h2 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h2><p>为了完成对子作业1中音频信号的滤波，对子作业1中的音频信号进行<strong>频谱分析</strong>，并获取滤波器设计所需要的<strong>性能指标</strong>。</p><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><h3 id="1-频谱分析"><a href="#1-频谱分析" class="headerlink" title="1.频谱分析"></a>1.频谱分析</h3><h4 id="1-读取音频"><a href="#1-读取音频" class="headerlink" title="1.读取音频"></a>1.读取音频</h4><ul><li>利用<strong>MATLAB</strong>的<code>audioread</code>函数读取原始音频（无噪声原始音频），该函数读取音频的实质是对音频进行<strong>采样</strong>，采样频率根据原始信号的情况而定。</li></ul><h4 id="2-FFT变换"><a href="#2-FFT变换" class="headerlink" title="2.FFT变换"></a>2.FFT变换</h4><ul><li>对读取到的音频取<strong>单声道</strong>根据读取音频时得到的采样频率和频谱分辨率要求计算捕获时间和频谱间隔，进行进行<strong>FFT</strong>快速傅里叶变换得到原始音频信号的频谱，分析频谱的分布。</li></ul><h4 id="3-信号加噪"><a href="#3-信号加噪" class="headerlink" title="3.信号加噪"></a>3.信号加噪</h4><ul><li>给原始信号加入高频带限噪声，加入噪声的频率范围为<code>11.15khz~11.95khz</code>。</li></ul><h4 id="4-FFT变换"><a href="#4-FFT变换" class="headerlink" title="4.FFT变换"></a>4.FFT变换</h4><ul><li>对加噪后的音频信号进行FFT快速傅里叶变换，观察频谱的频率分布和范围。</li></ul><h4 id="5-失真分析"><a href="#5-失真分析" class="headerlink" title="5.失真分析"></a>5.失真分析</h4><ul><li>分析原始信号经过采样后的频谱是否存在<strong>频谱混叠</strong>和<strong>栅栏效应</strong>，如果有则改进加以去除。</li></ul><h3 id="2-设计性能指标"><a href="#2-设计性能指标" class="headerlink" title="2.设计性能指标"></a>2.设计性能指标</h3><ul><li><p>根据前面的频谱得到通带截止频率**$w_p$<strong>和阻带截止频率</strong>$w_s$**。</p></li><li><p>根据频谱设置通带容限**$\alpha1$<strong>和阻带容限</strong>$\alpha2$<strong>，进而得到通带最大衰减系数</strong>$\delta_1$<strong>和阻带最小衰减系数</strong>$\delta_2$**.</p></li></ul><h2 id="三、实现过程"><a href="#三、实现过程" class="headerlink" title="三、实现过程"></a>三、实现过程</h2><h3 id="1-读取原始音频信号及频谱分析"><a href="#1-读取原始音频信号及频谱分析" class="headerlink" title="1.读取原始音频信号及频谱分析"></a>1.读取原始音频信号及频谱分析</h3><p>在MATLAB中利用audioread函数读取原始音频信号，并且绘出其时域图和频谱图，结果如下图所示。</p><img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\原始信号.png" style="zoom:67%;" /><p>由图可知原始音频信号的频谱从<strong>0~10.7khz</strong>左右就基本没有了，因此原始信号的最高频率**$f_{max}=10.7khz$**.</p><p>其源代码如下所示：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 数据导入及参数设置</span><br>[x,Fs]=audioread(<span class="hljs-string">&#x27;D:\DSP实验报告\大作业报告\ch4andch5\myaudio.mp3&#x27;</span>);<br>x=x(:,<span class="hljs-number">1</span>);<span class="hljs-comment">%选择左声道</span><br>N=<span class="hljs-built_in">length</span>(x);<br>t=(<span class="hljs-number">0</span>:N<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>df=Fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<span class="hljs-comment">%频域范围</span><br>X=FFT(x,N,Fs,t);<br>X=fftshift(X);<span class="hljs-comment">%将频谱翻转过来</span><br>f=(f*Fs-Fs/<span class="hljs-number">2</span>)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>X=<span class="hljs-built_in">abs</span>(X);<br><span class="hljs-comment">% 绘出时域图和幅频响应</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">221</span>)<br><span class="hljs-built_in">plot</span>(t,x);<br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>ylabel(<span class="hljs-string">&#x27;幅值&#x27;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>subplot(<span class="hljs-number">222</span>)<br><span class="hljs-built_in">plot</span>(f(:,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),X(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>)<br><span class="hljs-comment">% plot(f*Fs/1e3,Y,&#x27;k&#x27;);</span><br>title(<span class="hljs-string">&quot;原信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br>ylabel(<span class="hljs-string">&#x27;频率幅值&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-信号加噪及频谱分析"><a href="#2-信号加噪及频谱分析" class="headerlink" title="2.信号加噪及频谱分析"></a>2.信号加噪及频谱分析</h3><p>给原始音频信号加入频谱范围为<code>11.15~11.95khz</code>的<strong>高频带限噪声</strong>为后面设计滤波器做准备，绘出加噪信号的时域图和频谱图，如下图所示。</p><img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\加噪信号.png" style="zoom:67%;" /><p>由上图观察可知加噪后的信号在<code>11.15~11.95khz</code>的范围内出现了高频噪声信号，这也是后面需要滤波消除的部分，根据加噪后的信号的频谱可以得到设计滤波器的性能指标。</p><p>源代码如下所示：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 加入噪声</span><br>noise=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">0.1</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">5</span><br>    noise=noise+<span class="hljs-number">0.003</span>*(<span class="hljs-built_in">cos</span>((<span class="hljs-number">70</span>+<span class="hljs-built_in">i</span>)*<span class="hljs-number">1000</span>*t));<br><span class="hljs-keyword">end</span><br>x_z=x+noise&#x27;;<br>X_Z=FFT(x_z,N,Fs,t);<br>X_Z=fftshift(X_Z);<span class="hljs-comment">%将频谱翻转过来</span><br>X_Z=<span class="hljs-built_in">abs</span>(X_Z);<br>subplot(<span class="hljs-number">211</span>)<br><span class="hljs-built_in">plot</span>(t,x_z);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>ylabel(<span class="hljs-string">&#x27;幅值&#x27;</span>);<br>title(<span class="hljs-string">&#x27;加噪后信号时域图&#x27;</span>);<br>subplot(<span class="hljs-number">212</span>)<br><span class="hljs-built_in">plot</span>(f(:,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),X_Z(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>)<br>xlabel(<span class="hljs-string">&#x27;f/Hz&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;频率幅值&#x27;</span>);<br>title(<span class="hljs-string">&#x27;加噪后信号幅频响应&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-失真分析"><a href="#3-失真分析" class="headerlink" title="3.失真分析"></a>3.失真分析</h3><p>由上述的频谱图可知原始音频信号**$f_{max}=10.7khz&lt;f_s=48khz$**,因此经过采样后信号没有发生频谱混叠，且没有栅栏效应发生。</p><h3 id="4-设计性能指标"><a href="#4-设计性能指标" class="headerlink" title="4.设计性能指标"></a>4.设计性能指标</h3><p>数字滤波器的频率响应表示为：<br>$$<br>H(e^{j\omega})=|H(e^{j\omega})|e^{j\beta(j\omega)}<br>$$<br>根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围:</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A8.png"></p><p>下图展示了不同滤波器的技术指标：</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A82.png"></p><p> 对加噪后的音频频谱进行分析，有用信号的频谱范围是<code>0~10.7khz</code>，噪声信号的频谱范围是<code>11.15~11.95khz</code>，因此设置通带截止频率**$w_p=10.7khz$<strong>，阻带截止频率</strong>$w_{st}=11.15khz$<strong>,通带最大衰减系数</strong>$\delta_1=2db$<strong>，阻带最小衰减</strong>$\delta_2=80db$**。</p><h2 id="四、结果展示"><a href="#四、结果展示" class="headerlink" title="四、结果展示"></a>四、结果展示</h2><p>原始音频信号加噪前后时域、频域对比图如下图所示：</p><img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\加噪信号频谱图.png" alt="加噪前后对比图" style="zoom:67%;" /><p>设计滤波器的性能指标如下：</p><p><u>通带截止频率**$w_p=10.7khz$<strong>，阻带截止频率</strong>$w_{st}=11.15khz$<strong>,通带最大衰减系数</strong>$\delta_1=2db$<strong>，阻带最小衰减</strong>$\delta_2=80db$**。</u></p><h2 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h2><blockquote><ol><li>谱分析的过程中首先要知道分辨率和采样频率等要求，然后根据原始信号的最大频率结合<strong>奈奎斯特采样定理</strong>设定合适的采样频率，再依据$F_0=\frac{1}{T_0}=\frac{1}{N*T_s}$计算得到采样点数和捕获时间等信息，计算频域窗口范围，接着进行FFT变换获得其频谱，观察频谱与理论频谱是否一致，判断是否发生<strong>频谱混叠、栅栏效应</strong>等，若使用了窗函数进行截断还要考虑是否发生<strong>频谱泄露</strong>。</li><li>设计滤波器性能指标过程中，首先需要知道待滤波信号的频谱情况，然后依据频谱判断有用信号和噪声信号的分布，从而确定使用低通、高通、带通还是带阻等滤波器，并且设计相应的性能指标，一般包括<strong>通带截止频率、阻带截止频率、通带最大衰减和阻带最大衰减</strong>四个性能指标。</li></ol></blockquote><h2 id="六、源码开源"><a href="#六、源码开源" class="headerlink" title="六、源码开源"></a>六、源码开源</h2><blockquote><p><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-24bfcec2-0b23-4547-a957-73ffab276534/2c7c8bdd-2316-47cd-8a94-4882573700a5.zip">源代码资源包</a>有需要的小伙伴可以下载参考。</p></blockquote>]]></content>
    
    
    <summary type="html">some ideas about FFT。</summary>
    
    
    
    <category term="DSP" scheme="https://alleyf.github.io/categories/DSP/"/>
    
    
    <category term="FFT" scheme="https://alleyf.github.io/tags/FFT/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alleyf</title>
  
  
  <link href="https://alleyf.github.io/atom.xml" rel="self"/>
  
  <link href="https://alleyf.github.io/"/>
  <updated>2023-10-09T13:56:58.753Z</updated>
  <id>https://alleyf.github.io/</id>
  
  <author>
    <name>alleyf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>后端开发学习</title>
    <link href="https://alleyf.github.io/2023/10/6cd2e75537d2.html"/>
    <id>https://alleyf.github.io/2023/10/6cd2e75537d2.html</id>
    <published>2023-10-08T05:29:26.000Z</published>
    <updated>2023-10-09T13:56:58.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h2><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h3><p>从小到大自动转，从大到小强制转（精度丢失，值可能不正确）</p><blockquote><p>Java 中进行二元与运算类型的提升规则 </p><ol><li>整数运算： 如果两个操作数有一个为 long，则结果也为 long；没有 long 时，结果为 int。即使操作数全为 short、byte，结果也是 int。 </li><li>浮点运算： 如果两个操作数有一个为 double，则结果为 double；只有两个操作数都是 float，则结果才为 float。注意：int 与 float 运算，结果为 float。</li></ol></blockquote><h3 id="2-命名规则"><a href="#2-命名规则" class="headerlink" title="2. 命名规则"></a>2. 命名规则</h3><ul><li>变量命名只能使用<strong>字母数字 $ _</strong>  </li><li>变量第一个字符只能使用字母 $ _  </li><li>变量第一个字符不能使用数字，不能使用关键字  <blockquote><p>注：_ 是下划线，不是-减号或者—— 破折号</p></blockquote></li></ul><p>java 关键字：<br><img src="https://stepimagewm.how2j.cn/523.png" alt="|300"><br><img src="https://stepimagewm.how2j.cn/522.png" alt="|300"></p><h3 id="3-final-修饰词"><a href="#3-final-修饰词" class="headerlink" title="3. final 修饰词"></a>3. final 修饰词</h3><p>当形参被 final 修饰时不能对形参再次赋值，如果形参是对象可以改变内部的属性</p><ol><li>final 修饰类<ul><li>当 final 修饰类时，该类无法被继承</li></ul></li><li>final 修饰方法<ul><li>被 final 修饰的方法不能被重写</li></ul></li><li>final 修饰基本类型变量<ul><li>当一个变量被 final 修饰的时候，该变量只有一次赋值的机会</li></ul></li><li>final 修饰引用<ul><li>被 final 修饰的引用只能指向一次对象</li></ul></li><li>final 修饰常量<ul><li>常量值不变</li></ul></li></ol><ul><li></li></ul><h3 id="4-操作符-Scanner"><a href="#4-操作符-Scanner" class="headerlink" title="4. 操作符 Scanner"></a>4. 操作符 Scanner</h3><p>使用 Scanner 类，需要在最前面加上<br><code>import java.util.Scanner;</code></p><blockquote><p>如果在通过 <code>nextInt()</code> 读取了整数后，再接着读取字符串，读出来的是回车换行: <strong>“\r\n”</strong>, 因为 nextInt 仅仅读取数字信息，而不会读取回车换行”\r\n”.<br>    所以，如果在业务上需要读取了整数后，接着读取字符串，那么就应该**连续执行两次 nextLine ()**，第一次是取走回车换行，第二次才是读取真正的字符串</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> s.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;读取的整数是&quot;</span>+ i);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rn</span> <span class="hljs-operator">=</span> s.nextLine();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> s.nextLine();<br>        System.out.println(<span class="hljs-string">&quot;读取的字符串是：&quot;</span>+a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h3><p>数组是一个<strong>固定长度</strong>，包含了<strong>相同类型数据</strong>的<strong>容器</strong><br><code>int[] a; 和 int a[]</code> 都声明了一个数组变量，仅仅声明并没有创建分配空间。<br>创建一个长度是 5 的数组，并且使用<strong>引用 a 指向该数组</strong>，a 是一个地址，占据 <strong>4</strong> 个字节<br><code>a = new int[5];</code><br>常用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String Arrays.toString(数组)                 将数组拼接成一个字符串<br><span class="hljs-type">int</span> Arrays.binarySearch(数组，查找的元素)            二分法查护元素<br><span class="hljs-type">int</span>[] Arrays.copyOf(原数组，新数组长度)              拷贝数组<br><span class="hljs-type">int</span>[]Arrays.copyOfRange(原数组，起始索引，结束索引)   拷贝数组（指定范围）<br><span class="hljs-keyword">void</span> Arrays.fill(数组，元素)                        使用同一元素填充数组<br><span class="hljs-keyword">void</span> Arrays.sort(数组)                              对数组进行排序，也可按照自己自定义的规则<br><span class="hljs-type">boolean</span> Arrays.equals(数组a，数组b)                  返回两个数组是否元素相等的结果<br></code></pre></td></tr></table></figure><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;  <br><span class="hljs-keyword">import</span> java.util.Comparator;  <br><span class="hljs-keyword">import</span> java.util.Random;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyArray</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-comment">//声明一个引用  </span><br>        Integer[] a;  <br>        <span class="hljs-comment">//创建一个长度是5的数组，并且使用引用a指向该数组  </span><br>        a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">5</span>];  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;  <br>            a[i]= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">5</span>);  <br>        &#125;  <br>        Arrays.sort(a,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;()&#123;  <br>            <span class="hljs-meta">@Override</span>  <br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1,Integer o2)</span> &#123;  <br>                <span class="hljs-comment">// 降序  </span><br>                <span class="hljs-keyword">return</span> o2-o1;  <br>        &#125;&#125;);  <br>        System.out.println(Arrays.toString(a));  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]<br>分配空间，同时赋值<br>写法一： 分配空间同时赋值<br><code>int[] a = new int[]&#123;100,102,444,836,3236&#125;;</code></p><p>写法二： 省略了 new int[], 效果一样<br><code>int[] b = &#123;100,102,444,836,3236&#125;;</code></p></blockquote><p>数组排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySort</span> &#123;  <br>    <span class="hljs-type">int</span> [] a;  <br>    MySort(<span class="hljs-type">int</span> []array )&#123;  <br>        <span class="hljs-built_in">this</span>.a = array;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ChoseSort</span><span class="hljs-params">(<span class="hljs-type">int</span> [] array)</span>&#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; array.length; j++) &#123;  <br>                <span class="hljs-keyword">if</span> (array[i]&gt; array[j]) &#123;  <br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[i];  <br>                    array[i] = array[j];  <br>                    array[j] = temp;  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> [] array)</span>&#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length-<span class="hljs-number">1</span>-i; j++) &#123;  <br>                <span class="hljs-keyword">if</span> (array[j]&gt; array[j+<span class="hljs-number">1</span>]) &#123;  <br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[j];  <br>                    array[j] = array[j+<span class="hljs-number">1</span>];  <br>                    array[j+<span class="hljs-number">1</span>] = temp;  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">MySort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySort</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;);  <br>        sort.ChoseSort(sort.a);  <br>        sort.BubbleSort(sort.a);  <br>        System.out.println(Arrays.toString(sort.a));  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>增强型 for 循环遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> each : values) &#123;<br>    System.out.println (each);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化二维数组，</span><br>     <span class="hljs-type">int</span>[][] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]; <span class="hljs-comment">//有两个一维数组，每个一维数组的长度是3</span><br>     a[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">5</span>;  <span class="hljs-comment">//可以直接访问一维数组，因为已经分配了空间</span><br>     <span class="hljs-comment">//只分配了二维数组</span><br>     <span class="hljs-type">int</span>[][] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][]; <span class="hljs-comment">//有两个一维数组，每个一维数组的长度暂未分配</span><br>     b[<span class="hljs-number">0</span>]  =<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>]; <span class="hljs-comment">//必须事先分配长度，才可以访问</span><br>     b[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">5</span>;<br>     <span class="hljs-comment">//指定内容的同时，分配空间</span><br>     <span class="hljs-type">int</span>[][] c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;<br>             &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;,<br>             &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,<br>             &#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;<br>     &#125;;<br></code></pre></td></tr></table></figure><h3 id="6-类和对象"><a href="#6-类和对象" class="headerlink" title="6. 类和对象"></a>6. 类和对象</h3><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>引用的概念，如果一个变量的类型是类类型，而非基本类型，那么该变量又叫做引用。<br><code>Hero h = new Hero();</code><br><img src="https://stepimagewm.how2j.cn/618.png"></p><blockquote><p>引用 h 指向 Hero 对象</p></blockquote><p><img src="https://stepimagewm.how2j.cn/617.png"></p><blockquote><p>多个引用指向同一个对象</p></blockquote><p><img src="https://stepimagewm.how2j.cn/619.png"></p><blockquote><p>一个引用只能指向一个对象</p></blockquote><h3 id="7-包-package"><a href="#7-包-package" class="headerlink" title="7. 包 (package)"></a>7. 包 (package)</h3><ul><li>把比较接近的类，规划在同一个包下</li><li>在最开始的地方声明该类所处于的包名</li><li>使用同一个包下的其他类，直接使用即可  </li><li>但是要使用其他包下的类，必须 import</li></ul><h3 id="8-访问修饰符"><a href="#8-访问修饰符" class="headerlink" title="8. 访问修饰符"></a>8. 访问修饰符</h3><p>成员变量有四种修饰符：<br><span style="background:rgba(240, 200, 0, 0.2)">1. private 私有的  </span><br><span style="background:rgba(240, 200, 0, 0.2)">2. package/friendly/default 不写  </span><br><span style="background:rgba(240, 200, 0, 0.2)">3. protected 受保护的  </span><br><span style="background:rgba(240, 200, 0, 0.2)">4. public 公共的</span><br><img src="https://stepimagewm.how2j.cn/604.png"><br><img src="https://stepimagewm.how2j.cn/610.png"><br><img src="https://stepimagewm.how2j.cn/611.png"><br><img src="https://stepimagewm.how2j.cn/612.png"></p><blockquote><p>[!NOTE]<br>那么什么情况该用什么修饰符呢？<br>从作用域来看，public 能够使用所有的情况。但是大家在工作的时候，又不会真正全部都使用 public, 那么到底什么情况该用什么修饰符呢？</p><ol><li>属性通常使用 private 封装起来</li><li>方法一般使用 public 用于被调用</li><li>会被子类继承的方法，通常使用 protected</li><li>package 用的不多，一般新手会用 package, 因为还不知道有修饰符这个东西</li></ol><p>再就是作用范围最小原则<br>简单说，能用 private 就用 private，不行就放大一级，用 package, 再不行就用 protected，最后用 public。这样就能把数据尽量的封装起来，没有必要露出来的，就不用露出来了</p></blockquote><h3 id="9-类属性（static-变量）"><a href="#9-类属性（static-变量）" class="headerlink" title="9. 类属性（static 变量）"></a>9. 类属性（static 变量）</h3><ol><li>当一个属性被 <strong>static</strong> 修饰的时候，就叫做<strong>类属性</strong>，又叫做<strong>静态属性</strong>  </li><li>当一个属性被声明成类属性，那么<strong>所有的对象，都共享一个值</strong></li></ol><p>访问方式：</p><ol><li>对象. 类属性</li><li>类. 类属性</li></ol><p>对象属性初始化：</p><ol><li>声明该属性的时候初始化  </li><li>构造方法中初始化  </li><li>初始化块</li></ol><p>静态属性初始化：</p><ol><li>声明该属性的时候初始化  </li><li>静态初始化块</li></ol><blockquote><p>初始化顺序：<font color="#ff0000">静态属性声明&gt;静态初始化块&gt;对象属性声明&gt;对象属性初始化块&gt;构造方法</font></p></blockquote><h3 id="10-类方法（static-方法）"><a href="#10-类方法（static-方法）" class="headerlink" title="10. 类方法（static 方法）"></a>10. 类方法（static 方法）</h3><ul><li>类方法： 又叫做<strong>静态方法</strong></li><li>对象方法： 又叫<strong>实例方法</strong>，非静态方法  </li></ul><blockquote><p>访问一个对象方法，必须建立在<strong>有一个对象的前提</strong>的基础上<br>访问类方法，不需要对象的存在，直接就访问<br>静态方法只能调用静态方法和静态属性，不能调用对象属性和方法</p></blockquote><h3 id="11-单例模式"><a href="#11-单例模式" class="headerlink" title="11. 单例模式"></a>11. 单例模式</h3><p>单例模式又叫做 Singleton 模式，指的是一个类，在一个 JVM 里，<strong>只有一个实例存在</strong>。<br><em>单例模式的设计目的是确保一个类只有一个实例，并提供全局访问点以供其他对象使用。因此，在传统的单例模式中，不允许继承该类，因为继承会导致类的实例数量增多。</em></p><h4 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h4><p>单例模式的类应该只有一个示例，通过<strong>私有化其构造方法</strong>，使得外部无法通过 new 得到新的实例。<br>这种单例模式又叫做<em>饿汉式单例模式</em>，无论如何都会创建一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GiantDragon</span> &#123;<br>    <span class="hljs-comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">GiantDragon</span><span class="hljs-params">()</span>&#123;<br>&#125;<br><span class="hljs-comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">GiantDragon</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GiantDragon</span>();<br><span class="hljs-comment">//public static 方法，提供给调用者获取12行定义的对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GiantDragon <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h4><p><strong>懒汉式</strong>单例模式与<strong>饿汉式</strong>单例模式不同，只有在调用 getInstance 的时候，才会创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GiantDragon</span> &#123;<br>    <span class="hljs-comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">GiantDragon</span><span class="hljs-params">()</span>&#123;        <br>    &#125;<br>    <span class="hljs-comment">//准备一个类属性，用于指向一个实例化对象，但是暂时指向null</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> GiantDragon instance;<br>    <span class="hljs-comment">//public static 方法，返回实例对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GiantDragon <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>==instance)&#123;<br>    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GiantDragon</span>();<br>    &#125;<br>    <span class="hljs-comment">//返回 instance指向的对象</span><br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]<br><strong>什么时候使用饿汉式，什么时候使用懒汉式？</strong><br>饿汉式，是<strong>立即加载</strong>的方式，无论是否会用到这个对象，都会加载。<br>如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。</p><p>懒汉式，是<strong>延迟加载</strong>的方式，只有使用的时候才会加载。并且有线程安全的考量 (鉴于同学们学习的进度，暂时不对线程的章节做展开)。<br>使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。</p><p>看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式</p></blockquote><h4 id="单例模式的三要素"><a href="#单例模式的三要素" class="headerlink" title="单例模式的三要素"></a>单例模式的三要素</h4><p>什么是单例模式？</p><ol><li>构造方法私有化  </li><li>静态属性指向实例  </li><li>public static 的 getInstance 方法，返回第二步的静态属性</li></ol><h3 id="12-枚举（enum）"><a href="#12-枚举（enum）" class="headerlink" title="12. 枚举（enum）"></a>12. 枚举（enum）</h3><p>枚举 enum 是一种特殊的类 (还是类)，使用枚举可以很方便的定义常量<br>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season</span> &#123;<br>SPRING,SUMMER,AUTUMN,WINTER<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Season</span> <span class="hljs-variable">season</span> <span class="hljs-operator">=</span> Season.SPRING;<br><span class="hljs-keyword">switch</span> (season) &#123;<br><span class="hljs-keyword">case</span> SPRING:<br>System.out.println(<span class="hljs-string">&quot;春天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> SUMMER:<br>System.out.println(<span class="hljs-string">&quot;夏天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> AUTUMN:<br>System.out.println(<span class="hljs-string">&quot;秋天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> WINTER:<br>System.out.println(<span class="hljs-string">&quot;冬天&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>借助增强型 for 循环，可以很方便的遍历一个枚举都有哪些常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span> (Season s : Season.values()) &#123;<br>System.out.println(s);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="13-接口与继承"><a href="#13-接口与继承" class="headerlink" title="13. 接口与继承"></a>13. 接口与继承</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口就像是一种约定，对类进行约束规范，便于顶层设计规范化<br>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Healer</span> &#123;  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">heal</span><span class="hljs-params">(<span class="hljs-type">int</span> healAmount)</span>;  <br>&#125;<br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Support</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Healer</span> &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heal</span><span class="hljs-params">(<span class="hljs-type">int</span> healAmount)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setHp(<span class="hljs-built_in">this</span>.getHp() + healAmount);  <br>        System.out.println(<span class="hljs-string">&quot;当前英雄的血量为&quot;</span> + <span class="hljs-built_in">this</span>.getHp() + <span class="hljs-string">&quot;点&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h4><h5 id="子类转父类（向上转型）"><a href="#子类转父类（向上转型）" class="headerlink" title="子类转父类（向上转型）"></a>子类转父类（向上转型）</h5><p>引用类型和对象类型不一致时，需要进行类型转换，类型转换有时候会成功，有时候会失败。<br><em>转换是否成功判别方法：<strong>把右边的当做左边来用，看是否能说通</strong></em></p><blockquote><p>子类向父类转型（向上转型）一般都是可以的，父类引用指向子类对象</p></blockquote><p><img src="https://stepimagewm.how2j.cn/624.png"></p><h5 id="父类转子类-向下转型"><a href="#父类转子类-向下转型" class="headerlink" title="父类转子类 (向下转型)"></a>父类转子类 (向下转型)</h5><p>父类转子类，有的时候行，有的时候不行，所以必须进行<strong>强制转换</strong>。强制转换的意思就是转换有风险，风险自担。<br>转换总结：<br><img src="https://stepimagewm.how2j.cn/625.png"></p><blockquote><p>10 行： 把 ad 当做 Hero 使用，一定可以，转换之后，h 引用指向一个 ad 对象<br>11 行： h 引用有可能指向一个 ad 对象，也有可能指向一个 support 对象，所以把 h 引用转换成 AD 类型的时候，就有可能成功，有可能失败，因此要进行强制转换，换句话说转换后果自负，到底能不能转换成功，要看引用 h 到底指向的是哪种对象<br>在这个例子里，<strong>h 指向的是一个 ad 对象</strong>，所以转换成 ADHero 类型，是可以的<br>12 行：把一个 support 对象当做 Hero 使用，一定可以，转换之后，<strong>h 引用指向一个 support 对象</strong><br>13 行：这个时候，h 指向的是一个 <strong>support</strong> 对象，所以转换成 <strong>ADHero</strong> 类型，会失败。失败的表现形式是抛出异常 ClassCastException 类型转换异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">import</span> charactor1.Support;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-type">Support</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Support</span>();<br>        h = ad;<br>        ad = (ADHero) h;<br>        h = s;<br>        ad = (ADHero)h;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE]<br><img src="https://stepimagewm.how2j.cn/626.png"><br><strong>没有继承关系</strong>的两个类，互相转换一定会失败，抛出异常</p></blockquote><h5 id="实现类转换成接口-向上转型"><a href="#实现类转换成接口-向上转型" class="headerlink" title="实现类转换成接口 (向上转型)"></a>实现类转换成接口 (向上转型)</h5><p>类似于子类转父类，一样可行。<br><img src="https://stepimagewm.how2j.cn/627.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-type">AD</span> <span class="hljs-variable">adi</span> <span class="hljs-operator">=</span> ad;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="接口转换成实现类-向下转型"><a href="#接口转换成实现类-向下转型" class="headerlink" title="接口转换成实现类 (向下转型)"></a>接口转换成实现类 (向下转型)</h5><p><img src="https://stepimagewm.how2j.cn/628.png"></p><blockquote><p>7 行： ad 引用指向 ADHero，而 adi 引用是接口类型：AD，实现类转换为接口，是向上转型，所以无需强制转换，并且一定能成功<br>8 行: <strong>adi</strong> 实际上是<strong>指向</strong>一个 <strong>ADHero</strong> 的，所以能够转换成功<br>9 行： adi 引用所指向的对象是一个 ADHero，要转换为 ADAPHero 就会失败。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-type">AD</span> <span class="hljs-variable">adi</span> <span class="hljs-operator">=</span> ad;<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">adHero</span> <span class="hljs-operator">=</span> (ADHero) adi;<br>        <span class="hljs-type">ADAPHero</span> <span class="hljs-variable">adapHero</span> <span class="hljs-operator">=</span> (ADAPHero) adi;<br>        adapHero.magicAttack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h5><p><code>a instanceof className</code> 判断一个引用所指向的对象，是否是类的对象，或者子类的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">ad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-type">APHero</span> <span class="hljs-variable">ap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APHero</span>();<br>        Hero h1= ad;<br>        Hero h2= ap;<br>        <span class="hljs-comment">//判断引用h1指向的对象，是否是ADHero类型</span><br>        System.out.println(h1 <span class="hljs-keyword">instanceof</span> ADHero);<br>        <span class="hljs-comment">//判断引用h2指向的对象，是否是APHero类型</span><br>        System.out.println(h2 <span class="hljs-keyword">instanceof</span> APHero);<br>        <span class="hljs-comment">//判断引用h1指向的对象，是否是Hero的子类型</span><br>        System.out.println(h1 <span class="hljs-keyword">instanceof</span> Hero);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>子类可以继承父类的对象方法，在继承后，重复提供该方法，就叫做方法的重写，又叫覆盖 override</p><blockquote><p>调用子类的方法首先调用重写的方法，如果没有再调用父类方法。</p></blockquote><hr><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>操作符的多态  </p><ul><li>可以作为算数运算，也可以作为字符串连接<br>类的多态</li></ul><ul><li>父类引用指向子类对象</li></ul><hr><h5 id="操作符多态"><a href="#操作符多态" class="headerlink" title="操作符多态"></a>操作符多态</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i+j; <span class="hljs-comment">//如果+号两侧都是整型，那么+代表 数字相加</span><br>    System.out.println(k);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a+b; <span class="hljs-comment">//如果+号两侧，任意一个是字符串，那么+代表字符串连接</span><br>    System.out.println(c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="类多态"><a href="#类多态" class="headerlink" title="类多态"></a>类多态</h5><p>父类引用指向子类，调用父类引用被重写的方法，优先执行指向的子类的重写方法，即同类型调用同一方法，呈现不同的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> property;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span> &#123;<br>String name;<br><span class="hljs-type">int</span> price;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;购买&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">effect</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;物品使用后，可以有效果 &quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Item i1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">LifePotion</span>();<br><span class="hljs-type">Item</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MagicPotion</span>();<br>System.out.print(<span class="hljs-string">&quot;i1是Item类型，执行effect打印:&quot;</span>);<br>i1.effect();<br>System.out.print(<span class="hljs-string">&quot;i2也是Item类型，执行effect打印:&quot;</span>);<br>i2.effect();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] <strong>类的多态条件</strong></p><ol><li>父类（接口）引用指向子类对象  </li><li>调用重写的方法</li></ol></blockquote><h5 id="使用类多态-VS-不使用类多态"><a href="#使用类多态-VS-不使用类多态" class="headerlink" title="使用类多态 VS 不使用类多态"></a>使用类多态 VS 不使用类多态</h5><p>不使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">import</span> property.LifePotion;<br><span class="hljs-keyword">import</span> property.MagicPotion;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useLifePotion</span><span class="hljs-params">(LifePotion lp)</span>&#123;<br>    lp.effect();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useMagicPotion</span><span class="hljs-params">(MagicPotion mp)</span>&#123;<br>    mp.effect();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">garen</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br>        garen.name = <span class="hljs-string">&quot;盖伦&quot;</span>;<br>    <span class="hljs-type">LifePotion</span> <span class="hljs-variable">lp</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">LifePotion</span>();<br>    <span class="hljs-type">MagicPotion</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MagicPotion</span>();<br>    garen.useLifePotion(lp);<br>    garen.useMagicPotion(mp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">import</span> property.Item;<br><span class="hljs-keyword">import</span> property.LifePotion;<br><span class="hljs-keyword">import</span> property.MagicPotion;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useItem</span><span class="hljs-params">(Item i)</span>&#123;<br>    i.effect();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Hero</span> <span class="hljs-variable">garen</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br>        garen.name = <span class="hljs-string">&quot;盖伦&quot;</span>;<br>    <span class="hljs-type">LifePotion</span> <span class="hljs-variable">lp</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">LifePotion</span>();<br>    <span class="hljs-type">MagicPotion</span> <span class="hljs-variable">mp</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MagicPotion</span>();<br>    garen.useItem(lp);<br>    garen.useItem(mp);    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>由此可知，使用类多态可以简化设计，减少冗余的相同逻辑方法的设计实现，提高开发效率。</p></blockquote><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><ul><li>immortal 是不朽的，不死的意思</li><li>mortal 就是终有一死的，凡人的意思</li></ul><blockquote><ol><li>设计一个接口<br>接口叫做 Mortal, 其中有一个方法叫做 die</li><li>实现接口<br>分别让 ADHero, APHero, ADAPHero 这三个类，实现 Mortal 接口，不同的类实现 die 方法的时候，都打印出不一样的字符串</li><li>为 Hero 类，添加一个方法, 在这个方法中调用 m 的 die 方法。<br>public void kill (Mortal m)</li><li>在主方法中<br>首先实例化出一个 Hero 对象:盖伦<br>然后实例化出 3 个对象，分别是 ADHero, APHero, ADAPHero 的实例<br>然后让盖伦 kill 这 3 个对象</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Hero</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> hp;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> armor;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">garLen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();  <br>        garLen.setName(<span class="hljs-string">&quot;Garlen&quot;</span>);  <br>        <span class="hljs-type">ADHero</span> <span class="hljs-variable">adHero</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();  <br>        adHero.setName(<span class="hljs-string">&quot;ADHero&quot;</span>);  <br>        <span class="hljs-type">APHero</span> <span class="hljs-variable">apHero</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APHero</span>();  <br>        apHero.setName(<span class="hljs-string">&quot;APHero&quot;</span>);  <br>        <span class="hljs-type">ADAPHero</span> <span class="hljs-variable">adapHero</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ADAPHero</span>();  <br>        adapHero.setName(<span class="hljs-string">&quot;ADAPHero&quot;</span>);  <br>        garLen.kill(adHero, apHero, adapHero);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">kill</span><span class="hljs-params">(Mortal... ms)</span> &#123;  <br>        <span class="hljs-keyword">for</span> (Mortal m : ms) &#123;  <br>            m.die();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.name = name;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getHp</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> hp;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHp</span><span class="hljs-params">(<span class="hljs-type">float</span> hp)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.hp = hp;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getArmor</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> armor;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setArmor</span><span class="hljs-params">(<span class="hljs-type">int</span> armor)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.armor = armor;  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">//Mortal</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mortal</span> &#123;  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span>;  <br>&#125;<br><span class="hljs-comment">//ADHero</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ADHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AD</span>, Mortal &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">physicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;ADHero 物理攻击&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;阵亡&quot;</span>);  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">//APHero</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">APHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AP</span>, Mortal &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">magicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;AP Hero magic attack!&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;阵亡&quot;</span>);  <br>    &#125;  <br>&#125;<br><span class="hljs-comment">//ADAPHero</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ADAPHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AD</span>, AP, Mortal &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">physicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;进行物理攻击&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">magicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;进行魔法攻击&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;阵亡&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h4><p>与<strong>重写</strong>类似，方法的重写是<strong>子类覆盖父类</strong>的<strong>对象方法</strong>，<strong>隐藏</strong>，就是<strong>子类覆盖父类</strong>的<strong>类方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> hp;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> armor;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">battle</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;Hero battleWin&quot;</span>);  <br>    &#125; <br>&#125;<br><span class="hljs-comment">//子类隐藏父类的类方法</span><br><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ADHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AD</span>, Mortal &#123;  <br>    <span class="hljs-comment">//隐藏父类的battleWin方法  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">battle</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;ad hero battle win&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Hero.battle();  <br>        ADHero.battle();  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">physicAttack</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;ADHero 物理攻击&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;阵亡&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 父类引用指向子类调用隐藏方法（<strong>类方法不存在多态</strong>）？<br>在 Java 中，对于类方法（静态方法），编译时会根据引用类型（即变量类型）来决定调用的方法。实际上，类方法并不具有多态性，也不会被子类的重写所影响。由于 h 是父类类型的引用，即使它指向一个子类对象（ADHero），编译器仍然会<strong>根据引用类型</strong>（Hero）来<strong>决定调用的方法</strong>。</p></blockquote><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>实例化子类对象时，其父类的构造方法也会被调用，并且是<strong>父类构造方法先调用</strong>，子类构造方法会<strong>默认调用父类的无参的构造方法</strong><br>（1）使用关键字 super <strong>显式调用父类带参的构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ADHero</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        System.out.println(<span class="hljs-string">&quot;AD Hero的构造方法&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>（2）通过 super 调用父类属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMoveSpeed2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.moveSpeed;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）通过 super 调用父类方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 重写useItem，并在其中调用父类的userItem方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useItem</span><span class="hljs-params">(Item i)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;adhero use item&quot;</span>);<br><span class="hljs-built_in">super</span>.useItem(i);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="Object-超类"><a href="#Object-超类" class="headerlink" title="Object 超类"></a>Object 超类</h4><p>Object 类是所有类的父类，即基类，声明一个类的时候，默认是继承了 Object</p><ol><li>Object 类提供一个 <strong>toString 方法</strong>，所以所有的类都有 toString 方法<br>toString()的意思是返回当前对象的<strong>字符串表达</strong></li><li>当一个对象<strong>没有任何引用指向它</strong>的时候，它就满足垃圾回收的条件，当它被垃圾回收的时候，它的 <strong>finalize()</strong> 方法就会被调用。finalize() 不是开发人员主动调用的方法，而是由虚拟机 JVM 调用的。</li><li><strong>equals()</strong> 用于判断两个对象的内容是否相同，假设，当两个英雄的 hp 相同的时候，我们就认为这两个英雄相同</li><li><code>==</code> 这不是 Object 的方法，但是用于判断两个对象是否相同，更准确的讲，用于判断两个引用，是否指向了同一个对象</li><li><strong>hashCode 方法</strong>返回一个对象的<strong>哈希值</strong>，但是在了解哈希值的意义之前，讲解这个方法没有意义。</li><li>Object 还提供<strong>线程同步</strong>相关方法：<strong>wait()，notify()，notifyAll()</strong></li><li>getClass()会返回一个对象的类对象，属于<strong>反射</strong>原理。</li></ol><hr><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>在类中声明一个方法，这个方法<strong>没有方法体</strong>，是一个“空”方法，这样的方法就叫<strong>抽象方法</strong>，使用修饰符“<strong>abstract</strong>“，当一个类有抽象方法的时候，该类必须被声明为<strong>抽象类</strong>，不能被实例化。<br>抽象类可以没有抽象方法，也可以有具体方法</p><blockquote><p>[!NOTE] 抽象类和接口的区别</p><ol><li>区别1：  </li></ol><ul><li>子类<strong>只能继承一个抽象类</strong>，不能继承多个  </li><li>子类<strong>可以实现多个接口</strong></li></ul><ol start="2"><li>区别2：  </li></ol><ul><li>抽象类可以定义 public,protected,package,private 静态和非静态属性，final 和非 final 属性  </li><li>但是接口中声明的属性，只能是 public 静态 final 的，即便没有显式的声明<br>注: <strong>抽象类和接口都可以有实体方法</strong>。 <strong>接口</strong>中的实体方法，叫做<strong>默认方法</strong></li></ul></blockquote><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>分类：</p><ul><li>非静态内部类  </li><li>静态内部类  </li><li>匿名类  </li><li>本地类</li></ul><h5 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h5><p>非静态内部类可以直接在一个类里面定义，当外部类对象存在时内部类才有意义。<br>语法: <code>new 外部类().new 内部类()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 姓名</span><br><span class="hljs-type">float</span> hp; <span class="hljs-comment">// 血量</span><br><span class="hljs-type">float</span> armor; <span class="hljs-comment">// 护甲</span><br><span class="hljs-type">int</span> moveSpeed; <span class="hljs-comment">// 移动速度</span><br><span class="hljs-comment">// 非静态内部类，只有一个外部类对象存在的时候，才有意义</span><br><span class="hljs-comment">// 战斗成绩只有在一个英雄对象存在的时候才有意义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BattleScore</span> &#123;<br><span class="hljs-type">int</span> kill;<br><span class="hljs-type">int</span> die;<br><span class="hljs-type">int</span> assit;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">legendary</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (kill &gt;= <span class="hljs-number">8</span>)<br>System.out.println(name + <span class="hljs-string">&quot;超神！&quot;</span>);<br><span class="hljs-keyword">else</span><br>System.out.println(name + <span class="hljs-string">&quot;尚未超神！&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Hero</span> <span class="hljs-variable">garen</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();<br>garen.name = <span class="hljs-string">&quot;盖伦&quot;</span>;<br><span class="hljs-comment">// 实例化内部类</span><br><span class="hljs-comment">// BattleScore对象只有在一个英雄对象存在的时候才有意义</span><br><span class="hljs-comment">// 所以其实例化必须建立在一个外部类对象的基础之上</span><br><span class="hljs-type">BattleScore</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> garen.<span class="hljs-keyword">new</span> <span class="hljs-title class_">BattleScore</span>();<br>score.kill = <span class="hljs-number">9</span>;<br>score.legendary();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><p>与<strong>非静态内部类</strong>不同，静态内部类水晶类的实例化<strong>不需要一个外部类的实例为基础</strong>，可以<strong>直接实例化</strong><br>语法：<code>new 外部类.静态内部类()</code>;<br>因为没有一个外部类的实例，所以在<strong>静态内部类里面不可以访问外部类的实例属性和方法</strong>，除了可以访问外部类的<strong>私有静态成员</strong>外，静态内部类和普通类没什么大的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> String name; <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> hp; <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">battleWin</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;battle win&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//敌方的水晶</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnemyCrystal</span>&#123;<br>    <span class="hljs-type">int</span> hp=<span class="hljs-number">5000</span>;<br>    <span class="hljs-comment">//如果水晶的血量为0，则宣布胜利</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkIfVictory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(hp==<span class="hljs-number">0</span>)&#123;<br>    Hero.battleWin();<br>    <span class="hljs-comment">//静态内部类不能直接访问外部类的对象属性</span><br>    System.out.println(name + <span class="hljs-string">&quot; win this game&quot;</span>);<br>    &#125;<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//实例化静态内部类</span><br>    Hero.<span class="hljs-type">EnemyCrystal</span> <span class="hljs-variable">crystal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>.EnemyCrystal();<br>    crystal.checkIfVictory();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h5><p>匿名类指的是在<strong>声明一个类的同时实例化它</strong>，使代码更加简洁精练<br>通常情况下，要使用一个接口或者抽象类，都必须创建一个子类<br>有的时候，为了快速使用，<strong>直接实例化一个抽象类，并“当场”实现其抽象方法</strong>。<br>既然实现了抽象方法，那么就是一个新的类，只是这个类，没有命名。这样的类，叫做<strong>匿名类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">float</span> hp; <span class="hljs-comment">//血量</span><br>    <span class="hljs-type">float</span> armor; <span class="hljs-comment">//护甲</span><br>    <span class="hljs-type">int</span> moveSpeed; <span class="hljs-comment">//移动速度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ADHero adh=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ADHero</span>();<br>        <span class="hljs-comment">//通过打印adh，可以看到adh这个对象属于ADHero类</span><br>        adh.attack();<br>        System.out.println(adh);<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>()&#123;<br>            <span class="hljs-comment">//当场实现attack方法</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;新的进攻手段&quot;</span>);<br>            &#125;<br>        &#125;;<br>        h.attack();<br>        <span class="hljs-comment">//通过打印h，可以看到h这个对象属于Hero$1这么一个系统自动分配的类名</span><br>        System.out.println(h);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>在匿名类中使用外部的局部变量，外部的局部变量必须修饰为 final，否则报错（jdk 8 中不需要强制用 final 修饰，因为编译器会自动加上）</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//在匿名类中使用外部的局部变量，外部的局部变量必须修饰为final</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">damage</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">Hero</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span> &#123;<br>                System.out.printf(<span class="hljs-string">&quot;新的进攻手段，造成%d点伤害&quot;</span>,damage );<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="本地类"><a href="#本地类" class="headerlink" title="本地类"></a>本地类</h5><p>本地类可以理解为有名字的匿名类<br><strong>内部类与匿名类</strong>不一样的是，<strong>内部类必须声明在成员的位置</strong>，即与属性和方法平等的位置。本地类和匿名类一样，<strong>直接声明在代码块里面</strong>，可以是主方法，for 循环里等等地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> charactor;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hero</span> &#123;<br>    String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">float</span> hp; <span class="hljs-comment">//血量</span><br>    <span class="hljs-type">float</span> armor; <span class="hljs-comment">//护甲</span><br>    <span class="hljs-type">int</span> moveSpeed; <span class="hljs-comment">//移动速度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//与匿名类的区别在于，本地类有了自定义的类名</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeHero</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Hero</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span> &#123;<br>                System.out.println( name+ <span class="hljs-string">&quot; 新的进攻手段&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">SomeHero</span> <span class="hljs-variable">h</span>  <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">SomeHero</span>();<br>        h.name =<span class="hljs-string">&quot;地卜师&quot;</span>;<br>        h.attack();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><p>jdk 8 新特性，指接口也可以提供具体方法，不单单只能提供抽象方法<br>Mortal 这个接口，增加了一个默认方法 revive，这个方法有实现体，并且必须被声明为 <strong>default</strong>，实现接口功能扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> MyCharacter;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mortal</span> &#123;  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">die</span><span class="hljs-params">()</span>;  <br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">revive</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;我又回来啦&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p>UML-Unified Module Language 统一建模语言，可以很方便的用于描述类的属性，方法，以及类和类之间的关系。<br><img src="https://stepimagewm.how2j.cn/2305.png"><br><img src="https://stepimagewm.how2j.cn/2318.png"><br><img src="https://stepimagewm.how2j.cn/2319.png"></p><blockquote><p>带箭头的实线，表示 Spider，Cat, Fish 都继承于 Animal 这个父类.<br><img src="https://stepimagewm.how2j.cn/2320.png"><br>表示 Fish实现了 Pet这个接口<br><img src="https://stepimagewm.how2j.cn/2321.png"> </p></blockquote><hr><h3 id="数字与字符串"><a href="#数字与字符串" class="headerlink" title="数字与字符串"></a>数字与字符串</h3><h4 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h4><p>数字封装类有<br><strong>Byte,Short,Integer,Long,Float,Double</strong><br>这些类都是抽象类<strong>Number</strong>的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本类型转换成封装类型</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>        <span class="hljs-comment">//封装类型转换成基本类型</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> it.intValue();<br></code></pre></td></tr></table></figure><ol><li>自动装箱：<ul><li>不需要调用构造方法，通过 <code>=</code> 符号自动把基本类型转换为类类型就叫装箱</li><li><code>int i = 5;//自动转换就叫装箱Integer it2 = i;</code></li></ul></li><li>自动拆箱<ul><li>不需要调用 Integer 的 intValue 方法，通过=就自动转换成 int 类型，就叫拆箱</li><li><code> int i = 5;Integer it = new Integer (i);//封装类型转换成基本类型int i2 = it.intValue ();//自动转换就叫拆箱 int i3 = it;</code></li></ul></li></ol><ul><li>int 的最大值可以通过其对应的封装类 <strong>Integer.MAX_VALUE</strong> 获取</li><li>int 的最小值可以通过其对应的封装类 <strong>Integer.MIN_VALUE</strong> 获取</li></ul><h4 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h4><h5 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h5><ol><li>方法1： 使用 String 类的静态方法 <strong>valueOf</strong>  </li><li>方法2： 先把基本类型装箱为对象，然后调用对象的<strong>toString</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> NumberString;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumToStr</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;  <br><span class="hljs-comment">//        方法1  </span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> String.valueOf(i);  <br><span class="hljs-comment">//        方法2  </span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> i;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> i1.toString();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h5>调用 Integer 的<strong>静态方法 parseInt</strong><br><code>int i3 = Integer.parseInt(s1);</code><h4 id="数学-Math-包"><a href="#数学-Math-包" class="headerlink" title="数学 Math 包"></a>数学 Math 包</h4>java.lang.Math 提供了一些常用的数学运算方法，并且都是以静态方法的形式存在</li></ol><p><strong>四舍五入, 随机数，开方，次方，π，自然常数：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathUse</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.4f</span>;  <br>        <span class="hljs-type">float</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.5f</span>;  <br>        System.out.printf(<span class="hljs-string">&quot;%d, %d&quot;</span>, Math.round(f1), Math.round(f2));  <br>        <span class="hljs-comment">//得到一个0-1之间的随机浮点数（取不到1）  </span><br>        System.out.println(Math.random());  <br>        <span class="hljs-comment">//得到一个0-10之间的随机整数 （取不到10）  </span><br>        System.out.println((<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">10</span>));  <br>        <span class="hljs-comment">//开方  </span><br>        System.out.println(Math.sqrt(<span class="hljs-number">9</span>));  <br>        <span class="hljs-comment">//次方（2的4次方）  </span><br>        System.out.println(Math.pow(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>));  <br>        <span class="hljs-comment">//π  </span><br>        System.out.println(Math.PI);  <br>        <span class="hljs-comment">//自然常数  </span><br>        System.out.println(Math.E);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>如果不使用格式化输出，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐<br>使用格式化输出，就可以简洁明了  </p><ul><li>%s 表示字符串  </li><li>%d 表示数字  </li><li>%n 表示换行</li></ul><p>printf 和 format 格式化输出效果一样，printf 中调用了 format</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用格式化输出  </span><br><span class="hljs-comment">//%s表示字符串，%d表示数字,%n表示换行  </span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;亚瑟&quot;</span>;  <br><span class="hljs-type">String</span> <span class="hljs-variable">sentenceFormat</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n&quot;</span>;  <br><span class="hljs-type">int</span> <span class="hljs-variable">kill</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <br><span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;超神&quot;</span>;  <br>System.out.printf(sentenceFormat, name, kill, title);<br>System.out.format(sentenceFormat, name, kill, title);<br></code></pre></td></tr></table></figure><ul><li><strong>换行符</strong>就是<strong>另起一行</strong> — ‘\n’ 换行（newline）  </li><li><strong>回车符</strong>就是<strong>回到一行的开头</strong> — ‘\r’ 回车（return）</li></ul><h4 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h4><p>immutable 是指不可改变的,比如创建了一个字符串对象,String garen =”盖伦”;<br><strong>不可改变</strong>的具体含义是指：</p><ul><li>不能增加长度</li><li>不能减少长度</li><li>不能插入字符</li><li>不能删除字符</li><li>不能修改字符<br>一旦创建好这个字符串，里面的内容永远不能改变,String 的表现就像是一个<strong>常量</strong><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><table><thead><tr><th align="center">方法名</th><th align="center">简介</th><th></th></tr></thead><tbody><tr><td align="center">charAt</td><td align="center">获取字符</td><td></td></tr><tr><td align="center">toCharArray</td><td align="center">获取对应的字符数组</td><td></td></tr><tr><td align="center">subString</td><td align="center">截取子字符串</td><td></td></tr><tr><td align="center">split</td><td align="center">分隔</td><td></td></tr><tr><td align="center">trim</td><td align="center">去掉首尾空格</td><td></td></tr><tr><td align="center">toLowerCase  <br>toUpperCase</td><td align="center">大小写</td><td></td></tr><tr><td align="center">indexOf  <br>lastIndexOf  <br>contains</td><td align="center">定位</td><td></td></tr><tr><td align="center">replaceAll  <br>replaceFirst</td><td align="center">替换</td><td></td></tr></tbody></table><h4 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h4></li></ul><ol><li>是否是同一个对象<br><code>==</code> 用于用于判断两个字符串对象是否相同（不是内容是否相同）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;the light&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(str1);<br>        <span class="hljs-comment">//==用于判断是否是同一个字符串对象</span><br>        System.out.println( str1  ==  str2);<br></code></pre></td></tr></table></figure>特例：str 3 与 str1 内容完全一样，复用之前的对象并未创建新 String 对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;the light&quot;</span>;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;the light&quot;</span>;<br>      System.out.println( str1  ==  str3);<br></code></pre></td></tr></table></figure></li><li>是否内容相同<br>使用 <strong>equals</strong> 进行字符串内容的比较，必须大小写一致  </li></ol><p><strong>equalsIgnoreCase</strong>，忽略大小写判断内容是否一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(str1.equals(str3));<span class="hljs-comment">//大小写不一样，返回false</span><br>      System.out.println(str1.equalsIgnoreCase(str3));<span class="hljs-comment">//忽略大小写的比较，返回true</span><br></code></pre></td></tr></table></figure><ol start="3"><li>是否以子字符串开始或者结束</li></ol><p><strong>startsWith</strong> //以…开始，<strong>endsWith</strong> //以…结束</p><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><p>StringBuffer 是<strong>可变长</strong>的字符串<br>| 关键字                       | 描述                |     |<br>| —————————- | ——————- | — |<br>| append delete insert reverse | 追加 删除 插入 反转 |     |<br>| length capacity              | 长度容量            |     |</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> NumberString;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStringBuffer</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;let there &quot;</span>;  <br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(str1); <span class="hljs-comment">//根据str1创建一个StringBuffer对象  </span><br>        sb.append(<span class="hljs-string">&quot;be light&quot;</span>); <span class="hljs-comment">//在最后追加  </span><br>        System.out.println(sb);  <br>        sb.delete(<span class="hljs-number">4</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//删除4-10之间的字符  </span><br>        System.out.println(sb);  <br>        sb.insert(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;there &quot;</span>);<span class="hljs-comment">//在4这个位置插入 there  </span><br>        System.out.println(sb);  <br>        sb.reverse(); <span class="hljs-comment">//反转  </span><br>        System.out.println(sb);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>StringBuffer 性能明显优于<strong>字符串拼接</strong></p></blockquote><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>时间原点概念：</p><blockquote><p>所有的数据类型，无论是整数，布尔，浮点数还是字符串，最后都需要以数字的形式表现出来。<br>日期类型也不例外，换句话说，一个日期，比如 2020 年 10 月 1 日，在计算机里，会用一个数字来代替。<br>那么最特殊的一个数字，就是零. 零这个数字，就代表 Java 中的时间原点，其对应的日期是 1970 年 1 月 1 日 8 点 0 分 0 秒。 (为什么是 8 点，因为中国的太平洋时区是 UTC-8，刚好和格林威治时间差 8 个小时)<br>为什么对应 1970 年呢？ 因为 1969 年发布了第一个 UNIX 版本：AT&amp;T，综合考虑，当时就把 1970 年当做了时间原点。<br>所有的日期，都是以为这个 0 点为基准，每过一毫秒，就+1。</p></blockquote><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><h5 id="创建日期对象"><a href="#创建日期对象" class="headerlink" title="创建日期对象"></a>创建日期对象</h5><p><code>import java.util.Date</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDate</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br><span class="hljs-comment">//        输出当前系统时间  </span><br>        System.out.println(date);  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">10000L</span>);  <br><span class="hljs-comment">//        输出距离1970-1-1 08:00:00过了10000毫秒的时间  </span><br>        System.out.println(date1);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>getTime () 获得一个长整型距离1970-1-1 08:00:00所经过的毫秒数</li><li>System.currentTimeMillis()效果与 getTime（）相同，可能有几十毫秒误差。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当前日期的毫秒数</span><br>        System.out.println(<span class="hljs-string">&quot;Date.getTime() \t\t\t返回值: &quot;</span>+now.getTime());<br>        <span class="hljs-comment">//通过System.currentTimeMillis()获取当前日期的毫秒数</span><br>        System.out.println(<span class="hljs-string">&quot;System.currentTimeMillis() \t返回值: &quot;</span>+System.currentTimeMillis());<br></code></pre></td></tr></table></figure><h5 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h5><blockquote><p>y 代表年<br>M 代表月<br>d 代表日<br>H 代表24进制的小时<br>h 代表12进制的小时<br>m 代表分钟<br>s 代表秒<br>S 代表毫秒</p></blockquote><h6 id="日期转字符串"><a href="#日期转字符串" class="headerlink" title="日期转字符串"></a>日期转字符串</h6><p><code>SimpleDateFormat</code> 类对象通过 <code>format</code> 方法对日期进行格式化为字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);  <br><span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sdf.format(d);  <br>System.out.println(<span class="hljs-string">&quot;当前时间通过 yyyy-MM-dd HH:mm:ss SSS 格式化后的输出: &quot;</span> + str);  <br><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);  <br><span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> sdf1.format(d1);  <br>System.out.println(<span class="hljs-string">&quot;当前时间通过 yyyy-MM-dd 格式化后的输出: &quot;</span> + str1);<br></code></pre></td></tr></table></figure><h6 id="字符串转日期"><a href="#字符串转日期" class="headerlink" title="字符串转日期"></a>字符串转日期</h6><p><code>SimpleDateFormat</code> 格式（yyyy/MM/dd HH:mm:ss）需要和<strong>字符串格式保持一致</strong>，如果不一样就会抛出解析异常 ParseException，通过调用 SimpleDateFormat 对象的 <code>parse</code> 方法将字符串转为日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  <br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2016-1-5 12:12:12&quot;</span>;  <br><span class="hljs-keyword">try</span> &#123;  <br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.parse(str);  <br>    System.out.printf(<span class="hljs-string">&quot;字符串 %s 通过格式  yyyy/MM/dd HH:mm:ss %n转换为日期对象: %s&quot;</span>, str, d.toString());  <br>&#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;  <br>    <span class="hljs-comment">// TODO Auto-generated catch block  </span><br>    e.printStackTrace();  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h4><p>Calendar 类即<strong>日历类</strong>，常用于进行“翻日历”，比如下个月的今天是多久<br>采用<a href="https://how2j.cn/k/class-object/class-object-singleton/349.html">单例模式</a>获取日历对象 <code>Calendar.getInstance()</code>;<br>日历对象的 <code>getTime</code> 方法获取当前日期，<code>setTime</code> 方法设置日历日期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//采用单例模式获取日历对象Calendar.getInstance();  </span><br><span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();  <br><span class="hljs-comment">//通过日历对象得到日期对象  </span><br><span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c.getTime();  <br>System.out.println(d);  <br><span class="hljs-type">Date</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">0</span>);  <br>c.setTime(d2); <span class="hljs-comment">//把这个日历，调成日期 : 1970.1.1 08:00:00  </span><br>System.out.println(c.getTime());<br></code></pre></td></tr></table></figure><h5 id="翻日历"><a href="#翻日历" class="headerlink" title="翻日历"></a>翻日历</h5><ol><li><code>add</code> 方法，在原日期上增加年/月/日  </li><li><code>set</code> 方法，直接设置年/月/日<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;  <br><span class="hljs-keyword">import</span> java.util.Calendar;  <br><span class="hljs-keyword">import</span> java.util.Date;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCalendar</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> c.getTime();  <br>        <span class="hljs-comment">// 当前日期  </span><br>        System.out.println(<span class="hljs-string">&quot;当前日期：\t&quot;</span> + format(c.getTime()));  <br>        <span class="hljs-comment">// 下个月的今天  </span><br>        c.setTime(now);  <br>        c.add(Calendar.MONTH, <span class="hljs-number">1</span>);  <br>        System.out.println(<span class="hljs-string">&quot;下个月的今天:\t&quot;</span> + format(c.getTime()));  <br>        <span class="hljs-comment">// 去年的今天  </span><br>        c.setTime(now);  <br>        c.add(Calendar.YEAR, -<span class="hljs-number">1</span>);  <br>        System.out.println(<span class="hljs-string">&quot;去年的今天:\t&quot;</span> + format(c.getTime()));  <br>        <span class="hljs-comment">// 上个月的第三天  </span><br>        c.setTime(now);  <br>        c.add(Calendar.MONTH, -<span class="hljs-number">1</span>);  <br>        c.set(Calendar.DATE, <span class="hljs-number">3</span>);  <br>        System.out.println(<span class="hljs-string">&quot;上个月的第三天:\t&quot;</span> + format(c.getTime()));  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">format</span><span class="hljs-params">(Date time)</span> &#123;  <br>        <span class="hljs-keyword">return</span> sdf.format(time);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>[!NOTE]<br>对日期需要<strong>修改</strong>的时候<strong>用 Calendar</strong>，直接获取当前日期用 Date</p></blockquote><h2 id="Java-中级"><a href="#Java-中级" class="headerlink" title="Java 中级"></a>Java 中级</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3>]]></content>
    
    
    <summary type="html">Web—study about Java、Mysql、Redis、Linux</summary>
    
    
    
    <category term="Backend_development" scheme="https://alleyf.github.io/categories/Backend-development/"/>
    
    
    <category term="Java" scheme="https://alleyf.github.io/tags/Java/"/>
    
    <category term="Mysql" scheme="https://alleyf.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://alleyf.github.io/2023/10/e2aa66db6ce3.html"/>
    <id>https://alleyf.github.io/2023/10/e2aa66db6ce3.html</id>
    <published>2023-10-05T08:22:13.487Z</published>
    <updated>2023-10-05T08:22:13.487Z</updated>
    
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://alleyf.github.io/2023/10/b75b8061a0e9.html"/>
    <id>https://alleyf.github.io/2023/10/b75b8061a0e9.html</id>
    <published>2023-10-05T08:01:45.517Z</published>
    <updated>2023-10-05T08:22:41.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文提出了一个残差学习框架，用于训练深度神经网络。通过引入残差块，可以让网络更深，同时避免了梯度消失和梯度弥散的问题。在多个视觉识别任务中，残差网络都取得了比传统网络更好的结果。</p><hr><h2 id="背景介绍（相关研究）"><a href="#背景介绍（相关研究）" class="headerlink" title="背景介绍（相关研究）"></a>背景介绍（相关研究）</h2><p>在近些年中，深度网络逐渐往更深的方向发展，但是更深的网络训练更加困难，因为梯度消失和梯度弥散的问题会导致网络难以收敛。之前的研究提出了一些方法，如使用更好的初始化方法、使用更好的激活函数等，但是这些方法并不能完全解决问题。本文提出了一种新的方法，即残差学习框架，通过引入残差块来解决梯度消失和梯度弥散的问题。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211604278.png" alt="image.png|500"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211613960.png" alt="image.png|500"></p><hr><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="Identity-Mapping-by-Shortcuts"><a href="#Identity-Mapping-by-Shortcuts" class="headerlink" title="Identity Mapping by Shortcuts"></a>Identity Mapping by Shortcuts</h3><p>$$y=F(x, \left{ W_{i}\right})+x$$</p><hr><p>$$y=F(x, \left{ W_{i}\right})+W_{s}x$$</p><blockquote><p>若残差块输入输出维度一致，则直接短接即可；<br>   若唯独不一致，则对输入进行降维增维处理将输入输出维度统一。</p></blockquote><h3 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211621589.png" alt="image.png|450"></p><blockquote><p>实现为等维直接短接，虚线为异维进行 A (0 填充) /B（投影快捷映射）</p></blockquote><hr><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="ImageNet"><a href="#ImageNet" class="headerlink" title="ImageNet"></a>ImageNet</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211631231.png" alt="image.png"></p><h3 id="CIFAR-10"><a href="#CIFAR-10" class="headerlink" title="CIFAR-10"></a>CIFAR-10</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211631353.png" alt="image.png|450"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211632281.png" alt="image.png"><br>上图左边指的是 Plain Net, 然而 deeper 的时候，会出现明显的 <strong>degradation</strong>。当深度达到 100+的时候，plain Net 的错误率达到了 60%以上。<br>上图中间这是 ResNet，可以看到当 deeper 的时候，错误率也在降低，并没有出现所谓的 degradation。<br>然而右边则显示 <strong>1202 layers</strong> 的 ResNet 的错误率比 <strong>101 layers</strong> 的<strong>错误率高</strong>，作者认为这<strong>不是 degradation 导致</strong>，而是由于这么<strong>大的参数量在 cifar 10 这个小数据集上过拟合</strong>导致。</p><hr><h2 id="重点总结"><a href="#重点总结" class="headerlink" title="重点总结"></a>重点总结</h2><h3 id="1-残差块"><a href="#1-残差块" class="headerlink" title="1. 残差块"></a>1. 残差块</h3><p>作者发现，当加深模型深度时，模型的测试效果没有变好，反而变差。不符合所想的结果，因为浅层的网络应该是深层网络的一个子集，深层网络不应该比浅层网络表现的不好。然而实验的结果表明，当在浅层网络后加恒等映射层，深层网络的效果反而没有浅层网络好。为什么会出现这种原因呢？作者猜想，可能是因为深层网络难以训练。那么为什么会难以训练呢？可能是因为深层网络的最后面的层难以学习到恒等映射，因为浅层网络已经有很好的表现效果了，最后面的层如果找不到更好的表示效果就需要学习恒等映射，而让网络去学习恒等映射是很困难的。</p><blockquote><p>为了解决网络学习恒等映射困难的问题，作者就想，既然学习恒等映射困难，我们就让网络学习 $f(x)=0$ 这个映射。也就引出了参差学习块。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200221174711860.png" alt="20200221174711860.png|400"><br>正常网络的输入是 x ，输出是 f (x)，如果我们要学习恒等映射，也就是让网络的部分学会 f (x)=x，即图中 f (x) 的部分学会一个 f (x) = x 的映射关系，但是我们说直接让网络去学习恒等映射很困难，怎么办？</p><blockquote><p>假设网络的输出是 h (x)，那么不加 shortcut connection 的网络的输出就是 h (x)=f (x)=x，为了让网络更好拟合恒等映射，我们让 h (x)=f (x)+x，那么我们看网络要学习的映射 f (x)，就变为了 f (x)=h (x)−x，这时我们发现，如果直接让 f (x)=0，那么 h (x)=x，也就是说我们让网络输出的结果和恒等映射相同，而网络只学习了 f (x)=0 这个映射，这个映射要比 f (x)=x 恒等映射更好学习，即模型会更好训练，而不受深层的影响，因为深层中多余的层我们可以都学恒等映射，最起码结果不会比浅层的结果差。然而实验结果表明，加上 shortcut connection 的深层网络比不加 shortcut connection 的浅层网络效果还好，这也就说明了深层网络所能提取的信息更高，抽象能力更强。</p></blockquote><h3 id="2-恒等快捷映射和投影快捷映射"><a href="#2-恒等快捷映射和投影快捷映射" class="headerlink" title="2. 恒等快捷映射和投影快捷映射"></a>2. 恒等快捷映射和投影快捷映射</h3><p>当 shortcut 的输入通道数和输出通道数相同时，我们可以使用恒等映射即 $f (x)=x$，也就是将 shortcut 的输出直接加上输入即可（恒等快捷映射）。<br>但是，当 shortcut connection 的输入不等于输出的时候怎么办？（两种方法）</p><blockquote><p>① 将输入数据扩充维度，多余的维度的数据用 0 填充。<br>② 使用 1 x 1 的卷积扩充维度（投影快捷映射）</p><p>我们实际上有三种方式组合：<br>① 零填充快捷连接用来增加维度，所有的快捷连接是没有参数的。<br>② 投影快捷连接用来增加维度，其它的快捷连接是恒等的。<br>③ 所有的快捷连接都是投影。<br>以上三种情况都比没有加 shortcut connection 的好，效果 ③ &gt; ② &gt; ①，但是 ③ 的计算量太大，提升的效果也不大，所以我们一般不用，我们一般用的最多的是 ②。</p></blockquote><p>投影快捷映射：</p><ul><li>当输入和输出的维度不匹配时，使用一个额外的卷积层来进行维度匹配。</li><li>可以用于解决深度残差网络中的维度不匹配问题，从而提高网络的性能。</li><li>在 ResNet 中，投影快捷映射是指使用一个 1 x 1 的卷积层来进行维度匹配。<h3 id="3-Deeper-Bottleneck-Architectures"><a href="#3-Deeper-Bottleneck-Architectures" class="headerlink" title="3. Deeper Bottleneck Architectures"></a>3. Deeper Bottleneck Architectures</h3><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211610964.png" alt="image.png"><blockquote><p>先用 1 x 1 降维，3 x 3 进行卷积，再用 1 x 1 进行升维。<br> 事实上，deeper 左边这种结构也能获得很好的效果。那么为什么要用右边这种结构呢？ 主要是源自于<strong>practical</strong>，因为<strong>左边</strong>这种结构在<strong>训练时间上要比右边结构长的多</strong>。</p></blockquote></li></ul><p align="justify">当换成上图右边这种 Bottleneck 结构的时候，可以发现 152 层的 ResNet 竟然比 VGG 16/19 都要少的复杂度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;本文提出了一个残差学习框架，用于训练深度神经网络。通过引入残差块，可以让网络更深，同时避免了梯度消失和梯度弥散的问题。在多个视觉识别任务中，</summary>
      
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>深度学习论文阅读总结</title>
    <link href="https://alleyf.github.io/2023/10/777b5316f710.html"/>
    <id>https://alleyf.github.io/2023/10/777b5316f710.html</id>
    <published>2023-10-05T07:42:18.703Z</published>
    <updated>2023-10-05T08:29:34.812Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">序号</th><th>作者</th><th>来源</th><th align="center">标题</th><th>关键词</th><th>研究对象</th><th>主要实验方法</th><th>结论</th><th>阅读日期</th></tr></thead><tbody><tr><td align="center">1</td><td>Kaiming He</td><td>2015-CVPR</td><td align="center">[[Deep residual learning for image recognition]]</td><td>深度神经网络，残差，短接</td><td>网络深度</td><td>提出层之间跳跃短接的残差块</td><td>解决深层网络退化问题，并提升了网络效果，是后续深层网络的基石</td><td>2023-08-10 16:06:07</td></tr><tr><td align="center">2</td><td>Ashish Vaswani</td><td>2017-NIPS</td><td align="center">[[Attention is All you Need  ]]</td><td>Transformer，注意力机制，编码器，解码器</td><td>网络架构，特称提取</td><td></td><td></td><td></td></tr><tr><td align="center">3</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td align="center">4</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td align="center">5</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td align="center">6</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td align="center">7</td><td></td><td></td><td align="center"></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">some overview about NLP papers。</summary>
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="NLP" scheme="https://alleyf.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://alleyf.github.io/2023/10/e8c7910f93b8.html"/>
    <id>https://alleyf.github.io/2023/10/e8c7910f93b8.html</id>
    <published>2023-10-05T07:29:23.218Z</published>
    <updated>2023-10-05T07:48:32.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-论文主要有那些组成部分及其相应的作用？"><a href="#1-论文主要有那些组成部分及其相应的作用？" class="headerlink" title="1. 论文主要有那些组成部分及其相应的作用？"></a>1. 论文主要有那些组成部分及其相应的作用？</h2><ol><li>论文标题：所有工作的凝练总结</li><li>摘要：包括研究目的，研究方法，研究结果等关键信息</li><li>引言：领域重要性 (研究背景)，国内外研究现状，现存问题，提出的解决方法</li><li>方法论：解决问题所采用的具体实施的方法</li><li>结果：根据方法得到的结果</li><li>引用：文章中对别人文章内容的引用</li></ol><h2 id="2-哪些是重点需要阅读的？"><a href="#2-哪些是重点需要阅读的？" class="headerlink" title="2. 哪些是重点需要阅读的？"></a>2. 哪些是重点需要阅读的？</h2><ol><li>标题：提炼<strong>核心关键词</strong></li><li>摘要：提炼<strong>研究目的，研究方法，研究结果</strong>等</li><li>方法论：提炼<strong>具体解决思路、方法</strong></li><li>结果：提炼<strong>最终研究结果、未来改进和存在的缺陷</strong>等</li></ol><h2 id="3-什么时候泛读，什么时候精读，怎么读？"><a href="#3-什么时候泛读，什么时候精读，怎么读？" class="headerlink" title="3. 什么时候泛读，什么时候精读，怎么读？"></a>3. 什么时候泛读，什么时候精读，怎么读？</h2><blockquote><p>[!NOTE] 什么时候泛（精）读？</p><ol><li>确定课题前：对课题组的研究<strong>大方向相关领域</strong>的论文进行大范围泛读了解<strong>整个领域的研究进程和研究热点及趋势</strong></li><li>确定课题后：对确定的课题对应的<strong>细分研究领域</strong>的相关论文，选择<strong>引用高且较著名的论文进行精读汇报总结</strong></li></ol></blockquote><blockquote><p>[!NOTE] 怎么读？</p><ol><li><strong>泛读</strong>：重点阅读论文<strong>标题，摘要，方法论和结果</strong>，不需要完整通读全文，泛读的时间要求，中文或简单的英文，可能需要花10-15分钟阅读，记录和列表用15分钟；再复杂一点的中文文献，30分也就够了。</li><li><strong>精读</strong>：除了完成泛读的要求，还要<strong>了解研究背景、国内外发展现状、现存问题</strong>，并详细阅读<strong>具体实施方法</strong>，学习运用该方法，可以<strong>尝试复现</strong>对比实验结果，<strong>总结创新点并形成阅读报告</strong>。</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-论文主要有那些组成部分及其相应的作用？&quot;&gt;&lt;a href=&quot;#1-论文主要有那些组成部分及其相应的作用？&quot; class=&quot;headerlink&quot; title=&quot;1. 论文主要有那些组成部分及其相应的作用？&quot;&gt;&lt;/a&gt;1. 论文主要有那些组成部分及其相应的作用？</summary>
      
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>DeepLearing</title>
    <link href="https://alleyf.github.io/2023/05/0950da3fc570.html"/>
    <id>https://alleyf.github.io/2023/05/0950da3fc570.html</id>
    <published>2023-05-31T06:27:39.000Z</published>
    <updated>2023-08-12T06:53:00.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h1><p><img src="https://s2.loli.net/2023/05/31/mlfBuXI7pt2eCic.png" alt="image.png|400"></p><blockquote><p>特征工程的作用：<br>    - 数据特征决定了模型的上限<br>    - 预处理和特征提取是最核心的<br>    - 算法与参数选择决定了如何逼近这个上限</p></blockquote><h2 id="1-1反向传播"><a href="#1-1反向传播" class="headerlink" title="1.1反向传播"></a>1.1反向传播</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251455407.png"/><h2 id="1-2正则化"><a href="#1-2正则化" class="headerlink" title="1.2正则化"></a>1.2正则化</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251607343.png" alt="image.png"></p><h2 id="1-3神经元"><a href="#1-3神经元" class="headerlink" title="1.3神经元"></a>1.3神经元</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251610745.png" alt="image.png"></p><h2 id="1-4激活函数"><a href="#1-4激活函数" class="headerlink" title="1.4激活函数"></a>1.4激活函数</h2><blockquote><p>引入<strong>非线性特性</strong>，从而逼近任何分布结果。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251611276.png" alt="image.png"></p></blockquote><p>激活函数对比：</p><blockquote><p><strong>Relu 为为主流，Sigmoid 会出现梯度消失现象</strong><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251616218.png" alt="image.png"></p></blockquote><h2 id="1-5数据预处理"><a href="#1-5数据预处理" class="headerlink" title="1.5数据预处理"></a>1.5数据预处理</h2><blockquote><p>不同的预处理结果会使得模型的效果发生很大的差异！<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308012100980.png" alt="image.png"></p></blockquote><ol><li>参数初始化</li></ol><ul><li>参数初始化同样非常重要！</li><li>通常我们都使用随机策略来进行参数初始化<br>$$W = 0.01*np.random.randn (D, H)$$</li></ul><h2 id="1-6Drop-Out"><a href="#1-6Drop-Out" class="headerlink" title="1.6Drop-Out"></a>1.6Drop-Out</h2><blockquote><p>过拟合是神经网络非常头疼的一个大问题！<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308012106533.png" alt="image.png"></p></blockquote><h2 id="1-7卷积"><a href="#1-7卷积" class="headerlink" title="1.7卷积"></a>1.7卷积</h2><blockquote><p>计算过程如下图所示：</p><ul><li>分别计算三个通道输入与卷积核进行内积，再将三通道结果求和得到输出（特征图）</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021949385.png" alt="image.png"></p><blockquote><p>特征图的个数（深度）等于卷积核的个数，如上图所见两个卷积核进行多尺度特征提取得到两个特征图。</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121103471.png" alt="image.png"></p><h3 id="1-7-1步长"><a href="#1-7-1步长" class="headerlink" title="1.7.1步长"></a>1.7.1步长</h3><blockquote><p>步长就是卷积时滑动窗口的距离，一般为 1/2.</p></blockquote><h3 id="1-7-2边缘填充"><a href="#1-7-2边缘填充" class="headerlink" title="1.7.2边缘填充"></a>1.7.2边缘填充</h3><blockquote><p>边缘填充是在原输入的数据上加上一层 0 填充，不仅增加了原始边缘数据的卷积次数还保证了 0 填充填充不影响特征提取。</p></blockquote><h3 id="1-7-3卷积计算结果"><a href="#1-7-3卷积计算结果" class="headerlink" title="1.7.3卷积计算结果"></a>1.7.3卷积计算结果</h3><p>长度：$$H_{2}= \frac{H_{1}-F_{H}+2P}{S}+1$$<br>宽度： $$W_{2}= \frac{W_{1}-F_{W}+2P}{S}+1$$</p><blockquote><p>其中 W 1、H 1 表示输入的宽度、长度；W 2、H 2 表示输出特征图的宽度、长度；F 表示卷积核长和宽的大小；S 表示滑动窗口的步长; P 表示边界填充 (加几圈 0)。</p></blockquote><h2 id="1-8池化"><a href="#1-8池化" class="headerlink" title="1.8池化"></a>1.8池化</h2><h3 id="最大池化"><a href="#最大池化" class="headerlink" title="最大池化"></a>最大池化</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121141086.png" alt="image.png"></p><blockquote><p>在原始特征图上<strong>分块</strong>选择<strong>最大（最重要）的特征值</strong>，从而对特征图进行<strong>下采样压缩大小</strong>，但<strong>特征图个数不变</strong></p></blockquote><h2 id="1-9总体架构"><a href="#1-9总体架构" class="headerlink" title="1.9总体架构"></a>1.9总体架构</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121153214.png" alt="image.png"></p><blockquote><p>只有带参数的才能称之为一层，卷积层和全连接层属于，而激活函数和池化层不属于。</p></blockquote><p><strong>特征图变化：</strong><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121157274.png" alt="image.png"></p><h2 id="1-10感受野"><a href="#1-10感受野" class="headerlink" title="1.10感受野"></a>1.10感受野</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121438899.png" alt="image.png"></p><blockquote><p>卷积后的特征图中的特征值能够感受到的从原始输入数据的大小</p></blockquote><blockquote><p>[!NOTE] Problem</p><ul><li>P:如果堆叠 3 个 3*3 的卷积层，并且保持滑动窗口步长为 1，其感受野就是 7*7 的,<br>这跟一个使用 7*7 卷积核的结果是一样的，那为什么非要堆叠 3 个小卷积呢？</li><li>A: <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121452977.png" alt="image.png"></li></ul></blockquote>]]></content>
    
    
    <summary type="html">Deep_learning</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV，NLP" scheme="https://alleyf.github.io/tags/CV%EF%BC%8CNLP/"/>
    
  </entry>
  
  <entry>
    <title>Machinelearning DeepLearing</title>
    <link href="https://alleyf.github.io/2023/05/14870b008a81.html"/>
    <id>https://alleyf.github.io/2023/05/14870b008a81.html</id>
    <published>2023-05-31T06:27:39.000Z</published>
    <updated>2023-07-04T14:04:11.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>机器学习主要分为以下两种：</p><p><span style="background:#affad1">1. 监督学习（supervised learning）</span><br><span style="background:#affad1">2. 无监督学习（unsupervised learning）</span></p><h1 id="2-监督学习"><a href="#2-监督学习" class="headerlink" title="2. 监督学习"></a>2. 监督学习</h1><p>分类：</p><p>回归，分类</p><h1 id="3-无监督学习"><a href="#3-无监督学习" class="headerlink" title="3. 无监督学习"></a>3. 无监督学习</h1><p>分类：<br>聚类（clustering）</p>]]></content>
    
    
    <summary type="html">Machine and Deep learning</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AIGC" scheme="https://alleyf.github.io/tags/AIGC/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch快速入门</title>
    <link href="https://alleyf.github.io/2023/05/891ff30b7b9b.html"/>
    <id>https://alleyf.github.io/2023/05/891ff30b7b9b.html</id>
    <published>2023-05-31T06:27:39.000Z</published>
    <updated>2023-08-26T08:35:18.348Z</updated>
    
    <content type="html"><![CDATA[<ol><li>[[#1.python|1.python]]</li><li>[[#1.数据加载|1.数据加载]]<ol><li>[[#1.数据加载#1.1DataSet|1.1DataSet]]</li></ol></li><li>[[#2.TensorBoard|2.TensorBoard]]<ol><li>[[#2.TensorBoard#2.1 绘图|2.1 绘图]]</li><li>[[#2.TensorBoard#2.2 添加图片|2.2 添加图片]]</li></ol></li><li>[[#3.Transforms|3.Transforms]]<ol><li>[[#3.Transforms#3.1 ToTensor|3.1 ToTensor]]</li><li>[[#3.Transforms#3.2 Compose|3.2 Compose]]</li></ol></li></ol><h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><hr><h2 id="1-python"><a href="#1-python" class="headerlink" title="1. python"></a>1. python</h2><blockquote><p>Python 类中的双下划线 (double underscore)开头的方法通常被称为”魔法方法” (magic methods)。这些方法可以实现一些特殊的功能或对类进行修改。以下是一些常见的双下划线方法及其作用:</p></blockquote><ul><li><p><strong>init</strong>(): 构造函数, 用于初始化类的实例。</p></li><li><p><strong>str</strong>(): 当使用 print 输出对象时, 打印该方法的返回值。</p></li><li><p><strong>repr</strong>(): 返回对象的机器可读字符串表示形式。</p></li><li><p><strong>del</strong>(): 析构函数, 删除对象时被调用。</p></li><li><p><strong>call</strong>(): 允许将对象视为函数调用。</p></li><li><p><strong>getitem</strong>(): 通过索引访问元素的方法, 使得对象可以像列表那样进行切片。</p></li><li><p><strong>len</strong>(): 返回对象长度的方法, 使得对象可以对 len () 函数生效。</p></li><li><p><strong>eq</strong>(): 判断两个对象是否相等的方法, 使得对象可以使用 == 进行比较。</p></li><li><p><strong>lt</strong>(): 小于比较的方法, 可以使用 &lt; 进行比较。</p></li><li><p><strong>add</strong>(): 实现对象的加法运算。</p></li><li><p><strong>iter</strong>(): 实现迭代器接口, 使得对象可以被用于 for 循环。</p></li><li><p><strong>metaclass</strong>: 元类, 用于创建类对象。</p></li></ul><blockquote><p>所以双下划线方法主要是实现一些内置的功能或魔法方法, 让 Python 类拥有一些特殊的行为。我们自己编写类时, 如果需要实现某些特殊功能, 可以通过编写双下划线方法来实现。</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><hr><h2 id="1-数据加载"><a href="#1-数据加载" class="headerlink" title="1. 数据加载"></a>1. 数据加载</h2><h3 id="1-1-DataSet"><a href="#1-1-DataSet" class="headerlink" title="1.1 DataSet"></a>1.1 DataSet</h3><blockquote><p>继承 DataSet 类并重写__getitem__和 <strong>len</strong> 方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># 快捷键ctrl+B快速打开关闭文件编辑区</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_dir,label_dir</span>):<br>        self.root_dir = root_dir<br>        self.label_dir = label_dir<br>        self.path = os.path.join(self.root_dir,self.label_dir)<br>        self.img_path = os.listdir(self.path)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-comment"># 根据索引index获取数据和标签</span><br>        img_name = self.img_path[index]<br>        img_item_path = os.path.join(self.path,img_name)<br>        img = Image.<span class="hljs-built_in">open</span>(img_item_path)<br>        label = self.label_dir<br>        <span class="hljs-keyword">return</span> img,label<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 返回数据集的长度</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img_path)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">root_dir = <span class="hljs-string">&#x27;dataset/train&#x27;</span><br>ants_label_dir = <span class="hljs-string">&#x27;ants_image&#x27;</span><br>bees_label_dir = <span class="hljs-string">&#x27;bees_image&#x27;</span><br>ants_dataset = CustomDataset(root_dir,ants_label_dir)<br>bees_dataset = CustomDataset(root_dir,bees_label_dir)<br></code></pre></td></tr></table></figure><blockquote><p><strong>小数据集可以通过➕叠加为大数据集</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">img,label = ants_dataset[<span class="hljs-number">1</span>]<br>img.show()<br>img,label = bees_dataset[<span class="hljs-number">0</span>]<br>img.show()<br>train_dataset = ants_dataset+bees_dataset<br>img,label = train_dataset[<span class="hljs-number">124</span>]<br>img.show()<br></code></pre></td></tr></table></figure><blockquote><p>加载或下载数据集</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br>dataset_trans = torchvision.transforms.Compose([<br>    torchvision.transforms.ToTensor()<br>])<br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">True</span>, transform=dataset_trans, download=<span class="hljs-literal">False</span>)<br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>, transform=dataset_trans, download=<span class="hljs-literal">False</span>)<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img_tensor, target = test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test_set&quot;</span>, img_tensor, i)<br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="1-2-DataLoder"><a href="#1-2-DataLoder" class="headerlink" title="1.2 DataLoder"></a>1.2 DataLoder</h3><blockquote><p>加载数据集将多个数据 Tensor 和和标签分别打包成一个大的整体 batch</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br>train_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>,train=<span class="hljs-literal">True</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">False</span>)<br>test_set = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>,train=<span class="hljs-literal">False</span>,transform=torchvision.transforms.ToTensor(),download=<span class="hljs-literal">False</span>)<br>test_loder = DataLoader(dataset=test_set,batch_size=<span class="hljs-number">64</span>,shuffle=<span class="hljs-literal">True</span>,num_workers=<span class="hljs-number">0</span>,drop_last=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># for data in test_loder:</span><br><span class="hljs-comment">#   imgs,target = data</span><br><span class="hljs-comment">#   print(imgs.shape,target)</span><br><span class="hljs-comment">#   print(type(imgs))</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>  step = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loder:<br>      imgs,targets = data<br>      <span class="hljs-comment"># imgs = imgs.permute(0, 2, 3, 1)</span><br>      writer.add_image(<span class="hljs-string">&quot;epoch_&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch), imgs, step, dataformats=<span class="hljs-string">&#x27;NCHW&#x27;</span>)<br>      step+=<span class="hljs-number">1</span><br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308172314315.png" alt="image.png|400"></p><blockquote><p>[!NOTE] Tip</p><ul><li><code>shuttle = true</code>，则每轮打包成 batch 的数据顺序不同，提高训练效果</li><li><code>writer.add_image(&quot;epoch_&#123;&#125;&quot;.format(epoch), imgs, step, dataformats=&#39;NCHW&#39;)</code> 需要指定图片数据类型 <code>dataformats</code></li></ul></blockquote><h2 id="2-TensorBoard"><a href="#2-TensorBoard" class="headerlink" title="2. TensorBoard"></a>2. TensorBoard</h2><blockquote><p>TensorBoard 是一个用于可视化和监控机器学习模型训练过程的工具。它可以帮助您跟踪实验指标（如损失和准确率）、呈现模型计算图以及将嵌入向量投影到较低维度的空间等[1]。以下是使用 TensorBoard 的一般步骤：</p></blockquote><ol><li><p>安装 TensorBoard：您可以使用 pip 安装 TensorBoard，例如 <code>pip install tensorboard</code>。</p></li><li><p>导入 TensorBoard：在 Python 代码中，导入 TensorBoard 库，例如 <code>import tensorflow as tf</code>。</p></li><li><p>在代码中添加 TensorBoard 回调：在您的机器学习模型训练代码中，添加 TensorBoard 回调函数。这将允许 TensorBoard 在训练过程中记录指定的指标和数据。</p></li><li><p>启动 TensorBoard 服务器：在终端中，使用命令 <code>tensorboard --logdir=&lt;log_directory&gt;</code> 启动 TensorBoard 服务器。其中，<code>&lt;log_directory&gt;</code> 是您保存 TensorBoard 日志文件的目录。</p></li><li><p>在浏览器中查看 TensorBoard：在浏览器中输入 <code>http://localhost:6006</code>，您将能够查看 TensorBoard 的可视化界面。</p></li></ol><blockquote><p>在 TensorBoard 界面中，您可以查看训练过程中的损失曲线、准确率曲线等指标图表。您还可以查看模型计算图、嵌入向量的投影等[1]。</p></blockquote><h3 id="2-1-绘图"><a href="#2-1-绘图" class="headerlink" title="2.1 绘图"></a>2.1 绘图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br>writer  = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y=x&quot;</span>,i,i)<br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308161754456.png" alt="image.png|500"></p><h3 id="2-2-添加图片"><a href="#2-2-添加图片" class="headerlink" title="2.2 添加图片"></a>2.2 添加图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>writer  = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>img_path = <span class="hljs-string">&quot;dataset/train/ants_image/1030023514_aad5c608f9.jpg&quot;</span><br>img_pil = Image.<span class="hljs-built_in">open</span>(img_path)<br>img_array = np.array(img_pil)<br>writer.add_image(<span class="hljs-string">&quot;ant_test&quot;</span>,img_array,<span class="hljs-number">2</span>,dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>)<br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308161755844.png" alt="image.png|400"></p><h2 id="3-Transforms"><a href="#3-Transforms" class="headerlink" title="3. Transforms"></a>3. Transforms</h2><h3 id="3-1-ToTensor"><a href="#3-1-ToTensor" class="headerlink" title="3.1 ToTensor"></a>3.1 ToTensor</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308162052347.png" alt="image.png|500"></p><blockquote><p>通过 transforms. ToTensor 去看两个问题</p><ol><li>transforms 该如何使用 (python)？</li><li>为什么我们需要 Tensor 数据类型？</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> cv2<br>img_path = <span class="hljs-string">&quot;./dataset/train/ants_image/0013035.jpg&quot;</span><br>img_PIL=Image.<span class="hljs-built_in">open</span>(img_path)<br>img_cv = cv2.imread(img_path)<br>transform_tensor = transforms.ToTensor()<br>img_tensor = transform_tensor(img_cv)<br><span class="hljs-built_in">print</span>(img_tensor.shape)<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>writer.add_image(<span class="hljs-string">&quot;tensor_image&quot;</span>,img_tensor)<br>writer.close()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308171038445.png" alt="image.png|400"></p><blockquote><p>[!NOTE] Tips</p><ol><li><strong>cv 2 的 imread</strong> 读取的图片类型为 <code>ndarray</code></li><li><strong>PIL 的 Image. open</strong> 读取的图片类型为 <code>JpegImageFile</code></li></ol></blockquote><h3 id="3-2-Compose"><a href="#3-2-Compose" class="headerlink" title="3.2 Compose"></a>3.2 Compose</h3><blockquote><p>Compose 类是将多种 transforms 操作叠加在一起, 初始化 compose 类后, 执行__call__​​方法循环执行组合操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">transform_compose = transforms.Compose([transforms.CenterCrop(<span class="hljs-number">10</span>),transforms.ToTensor(),transforms.ConvertImageDtype(torch.<span class="hljs-built_in">float</span>),])<br>img_compose = transform_compose(img_PIL)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_compose))<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br>writer.add_image(<span class="hljs-string">&quot;compose_tensor_image&quot;</span>,img_compose)<br>writer.close()<br></code></pre></td></tr></table></figure><h3 id="3-3-Normalize"><a href="#3-3-Normalize" class="headerlink" title="3.3 Normalize"></a>3.3 Normalize</h3><blockquote><p>对图像进行正则化, 传参包括各通道均值和标准差</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">trans_normalize = transforms.Normalize([<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>],[<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>])<br>img_norm = trans_normalize(img_tensor)<br><span class="hljs-built_in">print</span>(img_norm[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>writer.add_image(<span class="hljs-string">&quot;Normalize&quot;</span>,img_norm)<br></code></pre></td></tr></table></figure><p><img src="!%5B%5D(https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308171425731.png)" alt="image"></p><h3 id="3-4-Resize"><a href="#3-4-Resize" class="headerlink" title="3.4 Resize"></a>3.4 Resize</h3><blockquote><p>改变 PILImage 图像尺寸</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-comment"># 将图像缩放到256x256</span><br>trans_resize= transforms.Resize(<span class="hljs-number">256</span>) <br><span class="hljs-comment"># 将图像按比例缩放,短边为256</span><br>trans_resize= transforms.Resize(size=(<span class="hljs-number">256</span>, <span class="hljs-number">256</span>), interpolation=Image.BICUBIC)<br><span class="hljs-comment"># 最长边不超过256,短边按2:1的比例缩放 </span><br>trans_resize= transforms.Resize(max_size=<span class="hljs-number">256</span>, ratio=<span class="hljs-number">2</span>)<br>img_resize = trans_resize(img_tensor)<br><span class="hljs-built_in">print</span>(img_resize.shape)<br></code></pre></td></tr></table></figure><h3 id="3-5-RandomCrop"><a href="#3-5-RandomCrop" class="headerlink" title="3.5 RandomCrop"></a>3.5 RandomCrop</h3><blockquote><p>随机裁剪图像, 指定裁剪后的图像大小进行随机裁剪, 支持输入格式为 PILImage 和 Tensor​​</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">trans_randomcrop = transforms.RandomCrop(<span class="hljs-number">512</span>)<br>img_randomcrop = trans_randomcrop(img_tensor)<br><span class="hljs-built_in">print</span>(img_randomcrop.shape)<br>writer.add_image(<span class="hljs-string">&quot;randomcrop&quot;</span>,img_randomcrop)<br></code></pre></td></tr></table></figure><p>​​ <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308171458436.png" alt="|400"> ​<br>​​</p><h2 id="神经网络基本骨架"><a href="#神经网络基本骨架" class="headerlink" title="神经网络基本骨架"></a>神经网络基本骨架</h2><h3 id="4-1-nn-module"><a href="#4-1-nn-module" class="headerlink" title="4.1 nn_module"></a>4.1 nn_module</h3><blockquote><p>module 是是所有网络模块的<strong>基类</strong>，必须继承该类并重写部分方法，构造方法、前向传播等</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Simple_Nn</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:  <br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):  <br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span>  <br>        <span class="hljs-keyword">return</span> output  <br>simple_nn = Simple_Nn()  <br><span class="hljs-built_in">input</span> = torch.tensor(<span class="hljs-number">1.0</span>)  <br>output = simple_nn(<span class="hljs-built_in">input</span>)  <br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><h3 id="4-2-nn-Conv2d（卷积）"><a href="#4-2-nn-Conv2d（卷积）" class="headerlink" title="4.2 nn.Conv2d（卷积）"></a>4.2 nn.Conv2d（卷积）</h3><blockquote><p>卷积层的使用，Conv2d是神经网络结构中的二维卷积结构，也是最常用的模块之一。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">import</span> torchvision  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, ReLU  <br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader  <br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter  <br>  <br>test_sets = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>,  <br>                                         transform=torchvision.transforms.ToTensor(),  <br>                                         download=<span class="hljs-literal">True</span>)  <br>dataloader = DataLoader(test_sets, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>)  <br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">My_Cnn</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, </span>):  <br>        <span class="hljs-built_in">super</span>(My_Cnn, self).__init__()  <br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)  <br>        <span class="hljs-comment"># self.maxpool1 = MaxPool2d(6, stride=2, padding=0)  </span><br>        <span class="hljs-comment"># self.nonlinear1 = ReLU()  </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):  <br>        map1 = self.conv1(x)  <br>        output = self.nonlinear1(map1)  <br>        <span class="hljs-keyword">return</span> output  <br>  <br>  <br>mycnn = My_Cnn()  <br><span class="hljs-built_in">print</span>(mycnn)  <br>step = <span class="hljs-number">0</span>  <br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)  <br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:  <br>    imgs, targets = data  <br>    output = mycnn(imgs)  <br>    output = torch.reshape(output, [-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>])  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Batch:&quot;</span> + <span class="hljs-built_in">str</span>(step), imgs.shape)  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Batch:&quot;</span> + <span class="hljs-built_in">str</span>(step), output.shape)  <br>    writer.add_image(<span class="hljs-string">&quot;input_img&quot;</span>, imgs, step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    writer.add_image(<span class="hljs-string">&quot;output_img&quot;</span>, output, step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    step += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p><strong>Tensorboard结果：</strong></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308261350971.png" alt="|350"></p><hr><h3 id="4-3-nn-MaxPool2d（最大池化）"><a href="#4-3-nn-MaxPool2d（最大池化）" class="headerlink" title="4.3 nn.MaxPool2d（最大池化）"></a>4.3 nn.MaxPool2d（最大池化）</h3><blockquote><p>最大池化保持特征图通道数不变的前提下，大小减少约一半左右，起到减小网络参数，提取关键特征，加快收敛速度（本身不具备特征提取作用）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">import</span> torchvision  <br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader  <br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter  <br>  <br>test_sets = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>,  <br>                                         transform=torchvision.transforms.ToTensor(),  <br>                                         download=<span class="hljs-literal">True</span>)  <br>dataloader = DataLoader(test_sets, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>)  <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NiuMa</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-built_in">super</span>(NiuMa, self).__init__()  <br>        self.maxpool = MaxPool2d(<span class="hljs-number">3</span>, ceil_mode=<span class="hljs-literal">True</span>)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):  <br>        <span class="hljs-keyword">return</span> self.maxpool(<span class="hljs-built_in">input</span>)  <br>  <br>  <br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)  <br>niuma = NiuMa()  <br>step = <span class="hljs-number">0</span>  <br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:  <br>    imgs, targets = data  <br>    output = niuma(imgs)  <br>    writer.add_image(<span class="hljs-string">&quot;input_maxpool&quot;</span>, imgs, step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    writer.add_image(<span class="hljs-string">&quot;output_maxpool&quot;</span>, output, step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;batch:&quot;</span> + <span class="hljs-built_in">str</span>(step), imgs.shape, output.shape)  <br>    step += <span class="hljs-number">1</span>  <br>  <br>writer.close()<br><br></code></pre></td></tr></table></figure><p><strong>Tensorboard结果：</strong><br><em>输入图像</em><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308261448451.png" alt="image.png | 225"><br><em>最大池化输出图像</em><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308261448510.png" alt="image.png | 250"></p><hr><h3 id="4-4-非线性激活"><a href="#4-4-非线性激活" class="headerlink" title="4.4 非线性激活"></a>4.4 非线性激活</h3><blockquote><p>非线性激活对输入进行非线性处理，从而拟合出需要的模型，非线性越多拟合效果越好，但容易过拟合，<code>ReLU激活函数</code>是最常用的非线性激活函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">import</span> torchvision.datasets  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> ReLU, Sigmoid  <br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader  <br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter  <br>    <br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>,  <br>                                       transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)  <br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>)  <br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NiuMa</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-built_in">super</span>(NiuMa, self).__init__()  <br>        self.relu = ReLU()  <br>        self.sigmoid = Sigmoid()  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):  <br>        <span class="hljs-keyword">return</span> self.sigmoid(<span class="hljs-built_in">input</span>)  <br>  <br>  <br>writer = SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)  <br>niuma = NiuMa()  <br>step = <span class="hljs-number">0</span>  <br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:  <br>    imgs, targets = data  <br>    output = niuma(imgs)  <br>    writer.add_image(<span class="hljs-string">&quot;output_sigmoid&quot;</span>, output, global_step=step, dataformats=<span class="hljs-string">&quot;NCHW&quot;</span>)  <br>    step += <span class="hljs-number">1</span>  <br>writer.close()<br><br></code></pre></td></tr></table></figure><p><strong>TensorBoard结果：</strong></p><p><em>Sigmoid非线性激活</em><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308261517218.png" alt="image.png|350"></p><h3 id="4-5-线性层"><a href="#4-5-线性层" class="headerlink" title="4.5 线性层"></a>4.5 线性层</h3><blockquote><p>线性层一般为网络最后的全连接层，分类问题则经过softmax得到各个类别的概率。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch  <br><span class="hljs-keyword">import</span> torchvision.datasets  <br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn  <br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Linear  <br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader  <br>  <br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./data/datasets/CIFAR&quot;</span>, train=<span class="hljs-literal">False</span>,  <br>                                       transform=torchvision.transforms.ToTensor(), download=<span class="hljs-literal">True</span>)  <br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>, shuffle=<span class="hljs-literal">True</span>, drop_last=<span class="hljs-literal">True</span>)  <br>  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NiuMa</span>(nn.Module):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):  <br>        <span class="hljs-built_in">super</span>(NiuMa, self).__init__()  <br>        <span class="hljs-comment"># Linear的参数为输入特征数和输出特征数  </span><br>        self.linear = Linear(<span class="hljs-number">196608</span>, <span class="hljs-number">10</span>)  <br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):  <br>        <span class="hljs-keyword">return</span> self.linear(<span class="hljs-built_in">input</span>)  <br>  <br>  <br>niuma = NiuMa()  <br>  <br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:  <br>    imgs, targets = data  <br>    imgs = torch.flatten(imgs)  <br>    <span class="hljs-built_in">print</span>(imgs.shape)  <br>    output = niuma(imgs)  <br>    <span class="hljs-built_in">print</span>(output.shape, output)<br><br></code></pre></td></tr></table></figure><h1 id="常用函数手册"><a href="#常用函数手册" class="headerlink" title="常用函数手册"></a>常用函数手册</h1><p>![[pytorch常用函数手册.pdf]]</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.bilibili.com/video/BV1hE411t7RN?p=6&vd_source=9c896fa9c3f9023797e8efe7be0c113e">PyTorch快速入门（小土堆）</a></p>]]></content>
    
    
    <summary type="html">Machine and Deep learning</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="DL" scheme="https://alleyf.github.io/tags/DL/"/>
    
  </entry>
  
  <entry>
    <title>OS</title>
    <link href="https://alleyf.github.io/2023/05/8e2ac1a55f44.html"/>
    <id>https://alleyf.github.io/2023/05/8e2ac1a55f44.html</id>
    <published>2023-05-21T12:24:20.000Z</published>
    <updated>2023-07-04T14:08:44.088Z</updated>
    
    
    <summary type="html">Some knowledge about os.</summary>
    
    
    
    <category term="CS" scheme="https://alleyf.github.io/categories/CS/"/>
    
    
    <category term="CS" scheme="https://alleyf.github.io/tags/CS/"/>
    
    <category term="OS" scheme="https://alleyf.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot启示录</title>
    <link href="https://alleyf.github.io/2023/04/218510a8c5b9.html"/>
    <id>https://alleyf.github.io/2023/04/218510a8c5b9.html</id>
    <published>2023-04-28T08:37:54.000Z</published>
    <updated>2023-10-05T07:25:50.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-开发环境热部署"><a href="#1-开发环境热部署" class="headerlink" title="1.开发环境热部署"></a>1.开发环境热部署</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><blockquote><ol><li>在实际的项目开发调试过程中会频繁地修改后台类文件，导致需要重新编译、重新启动，整个过程非常麻烦，影响开发效率。</li><li>Spring Boot 提供了 spring-boot-devtools 组件，使得无须手动重启 SpringBoot 应用即可重新编译、启动项目，大大缩短编译启动的时间。devtools 会监听 classpath 下的文件变动，触发 Restart 类加载器重新加载该类,从而实现类文件和属性文件的热部署。</li><li>并不是所有的更改都需要重启应用 (如静态资源、视图模板)，可以通过设置spring. devtools. restart. exclude 属性来指定一些文件或目录的修改不用重启应用</li></ol></blockquote><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><blockquote><p>在 <strong>pom. xml</strong> 配置文件中添加 <strong>dev-tools 依赖</strong>。<br>使用 <strong>optional=true</strong> 表示依赖<strong>不会传递</strong>，即该项目依赖 devtools; 其他项目如果引入此项目生成的 JAR 包，则不会包含 devtools</p></blockquote><h3 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom. xml"></a>1.pom. xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>&lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2. application. properties"></a>2. application. properties</h3><blockquote><p>在 application. properties 中配置 <strong>devtools.</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">#热部署生效<br>spring.devtools.restart.enabLed=<span class="hljs-literal">true</span><br>#设置重启目录<br>spring.devtooLs.restart.additional-paths=src/main/java<br>#设置classpath目录下的 WEB-INF 文件夹内容修改不重启<br>spring.devtooLs.restart.exclude=<span class="hljs-keyword">static</span><span class="hljs-comment">/**</span><br></code></pre></td></tr></table></figure><ul><li>如果使用了<span style="background:rgba(240, 200, 0, 0.2)"> Eclipse</span>, 那么在修改完代码并保存之后，项目将自动编译并触发重启，而如果使用了 <span style="background:rgba(160, 204, 246, 0.55)">IntelliJ IDEA</span>, 还需要配置项目自动编译。</li><li>打开<font color="#245bdb"> Settings </font>页面，在左边的菜单栏依次找到Build, Execution, Deployment-→Compile, 勾选 <font color="#ffc000">Build project automatically</font></li><li>按 <font color="#4bacc6">Ctrl+ Shift+ Alt+ /</font>快捷键调出 Maintenance 页面，单击 <font color="#9bbb59">Registry</font>, 勾选<font color="#8064a2">compiler.automake.allow.when.app.running </font>复选框 (可能找不到，修改设置为下图即可解决)。</li><li>做完这两步配置之后，若开发者再次在 IntelliJ IDEA 中修改代码，则项目会自动重启。</li></ul><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230428173445.png" alt="image.png|425"></p><h1 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2. 控制器"></a>2. 控制器</h1><blockquote><ol><li>Spring Boot 提供了<font color="#f79646">@Controller</font> 和<font color="#c0504d">@RestController</font> 两种注解来标识此类负责<span style="background:rgba(240, 107, 5, 0.2)">接收和处理 HTTP 请求</span>。</li><li>如果请求的是<font color="#00b0f0">页面和数据</font>，使用<font color="#0070c0">@Controller </font>注解即可; 如果只是请求<font color="#ff0000">数据</font>,则可以使用<font color="#c00000">@RestController </font>注解。</li></ol></blockquote><h2 id="1-demo"><a href="#1-demo" class="headerlink" title="1.demo"></a>1.demo</h2><p>@ RestController 的用法<br>默认情况下，@RestController 注解会将返回的对象数据转换为 <strong>JSON 格式</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">&quot;/user&quot;</span>)<br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setUsername (<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>user.setPassword (<span class="hljs-string">&quot;123&quot;</span>) ;<br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-路由映射"><a href="#2-路由映射" class="headerlink" title="2.路由映射"></a>2.路由映射</h2><blockquote><p>@RequestMapping 注解主要负责 URL 的路由映射。它可以添加Controller类或者具体的方法上。<br>如果添加在 Controller 类上，则这个 Controller 中的所有路由映射都将会加上此映射规则，如果添加在方法上，则只对当前方法生效。<br>@RequestMapping 注解包含很多属性参数来定义 HTTP 的请求映射规则。常用的属性参数如下:<br><span style="background:#d3f8b6">- value: 请求 URL 的路径, 支持 URL 模板、正则表达式</span><br><span style="background:#d3f8b6">- method: HTTP 请求方法</span></p></blockquote><ul><li>consumes:请求的媒体类型 (Content- Type)，如 application/json</li><li>produces: 响应的媒体类型<br><span style="background:#d3f8b6">- params, headers: 请求的参数及请求头的值</span></li></ul><h3 id="1-路由规则"><a href="#1-路由规则" class="headerlink" title="1. 路由规则"></a>1. 路由规则</h3><ol><li>@RequestMapping 的 <font color="#0070c0">value </font>属性用于<font color="#0070c0">匹配 URL 映射</font>，value 支持简单表达式</li><li>@RequestMapping (“/user”)</li><li>@RequestMapping 支持使用通配符匹配 URL，用于统一映射某些 URL 规则类似的请求: @RequestMapping (“/getJson/*. json”), 当在浏览器中请求/getJson/a.json 或者/getJson/b.json 时都会匹配到后台的 Json 方法</li><li>@RequestMapping 的通配符匹配非常简单实用，支持**<span style="background:#b1ffff">“*“  “?” “**“</span>** 等通配符</li><li>符号<font color="#ffc000"> “*“ </font>匹配<font color="#ffc000">任意字符</font>，符号 <font color="#00b050">“**“</font> 匹配<font color="#00b050">任意路径</font>，符号<font color="#00b0f0"> “?” </font>匹配<font color="#0070c0">单个字符</font>。有通配符的优先级低于没有通配符的，比如/user/addjson 比/user/* .json 优先匹配。有“**” 通配符的优先级低于有”*“ 通配符的。</li></ol><h3 id="2-Method-匹配"><a href="#2-Method-匹配" class="headerlink" title="2. Method 匹配"></a>2. Method 匹配</h3><ul><li>HTTP 请求 Method 有 <span style="background:#affad1">GET、POST、 PUT、DELETE </span>等方式。HTTP 支持的全部Method</li><li>@RequestMapping 注解提供了 method 参数指定请求的 Method 类型，包括<span style="background:rgba(205, 244, 105, 0.55)">RequestMethod. GET、RequestMethod. POST、RequestMethod.DELETE、RequestMethod. PUT</span> 等值，分别对应 HTTP 请求的 Method<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">&quot;/getData&quot;</span> , method = RequestMethod.GET)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>Method 匹配也可以使用<span style="background:rgba(3, 135, 102, 0.2)">@GetMapping、@PostMapping </span>等注解代替。</li></ul><h3 id="3-参数传递"><a href="#3-参数传递" class="headerlink" title="3. 参数传递"></a>3. 参数传递</h3><h4 id="1-get-请求"><a href="#1-get-请求" class="headerlink" title="1. get 请求"></a>1. get 请求</h4><blockquote><p>视图函数定义 query_params 路由参数，函数体内可以直接获取该参数。</p></blockquote><p>demo：</p><p>方式 1 同参（参数可有可无都能成功响应）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;  <br><span class="hljs-comment">// get注解  </span><br><span class="hljs-meta">@RequestMapping(value = &quot;/index1&quot;,method = RequestMethod.GET)</span><br><span class="hljs-comment">// @GetMapping(&quot;/index1&quot;)  </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello1</span><span class="hljs-params">(String name)</span>&#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;欢迎您：&quot;</span>+name;  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>方式 2 不同参（参数必须携带，否则 400 错误响应）</p><blockquote><p>将参数 usrname 映射为 name，默认<font color="#0070c0"> require=true</font>（必须携带参数否则报错），设置为 false 可以<font color="#6425d0">不携带参数访问</font><br><code>public String hello2(@RequestParam(value = &quot;usrname&quot;,required = false) String name)</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/index2&quot;,method = RequestMethod.GET)</span>  <br><span class="hljs-comment">// @GetMapping(&quot;/index&quot;)  </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;usrname&quot;)</span> String name)</span>&#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;欢迎您：&quot;</span>+name;  <br>&#125;<br></code></pre></td></tr></table></figure><p>通配符匹配路由：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;test/*&quot;)</span>  <span class="hljs-comment">// 匹配同级任何路由</span><br><span class="hljs-meta">@GetMapping(&quot;test/**&quot;)</span>  <span class="hljs-comment">// 匹配任何路由（包括子级）</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;匹配同级任意路径&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Post-请求"><a href="#2-Post-请求" class="headerlink" title="2.Post 请求"></a>2.Post 请求</h4><h5 id="1-urlencode-格式数据"><a href="#1-urlencode-格式数据" class="headerlink" title="1. urlencode 格式数据"></a>1. urlencode 格式数据</h5><p>方式 1 直接传数据：</p><blockquote><p>适合参数少的情景</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String name,String pwd)</span>&#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span>+name);  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span>+pwd);  <br><span class="hljs-keyword">return</span> name!=<span class="hljs-literal">null</span> &amp;&amp; pwd!=<span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>方式 2 对象传数据：</p><blockquote><p>适合参数多的情景，<font color="#6425d0">User 为实体类</font></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login2/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login2</span><span class="hljs-params">(User user)</span> &#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + user.getUsername());  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span> + user.getPassword());  <br>System.out.println(user);  <br><span class="hljs-keyword">return</span> user.getUsername() != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword() != <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br><span style="background:#ff4d4f">上述两种方式，发送的 data 数据必须经过 urlencode 编码，否则接收不到。</span></p></blockquote><h5 id="2-json-格式数据"><a href="#2-json-格式数据" class="headerlink" title="2. json 格式数据"></a>2. json 格式数据</h5><blockquote><p>需要给视图函数形参中添加注解<font color="#245bdb">@RequestBody</font>，且 json data 中的参数键名需要与后端中的实体类的属性并一致。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login3/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login3</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + user.getUsername());  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span> + user.getPassword());  <br>System.out.println(user);  <br><span class="hljs-keyword">return</span> user.getUsername() != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword() != <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230428185132.png" alt="image.png|500"></p><h1 id="3-文件上传"><a href="#3-文件上传" class="headerlink" title="3. 文件上传"></a>3. 文件上传</h1><h2 id="1-静态资源访问"><a href="#1-静态资源访问" class="headerlink" title="1. 静态资源访问"></a>1. 静态资源访问</h2><ol><li>使用 IDEA 创建 Spring Boot 项目，会默认创建出 <font color="#245bdb">classpath:/static/</font>目录, 静态资源一般放在这个目录下即可。</li><li>如果默认的静态资源过滤策略不能满足开发需求，也可以自定义静态资源过滤策略。</li><li>在 <span style="background:#d3f8b6">application. properties </span>中直接定义过滤规则和静态资源位置: </li></ol><ul><li><code>spring.mvc.static-path-pattern=/static/\*\*</code> </li><li><code>spring.web.resources.static-locations=classpath:/static/</code></li></ul><ol start="4"><li>过滤规则为<font color="#00b0f0">/static/**</font>，静态资源位置为<font color="#00b0f0"> classpath:/static/</font></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#设置静态路径过滤规则  </span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">images/**  </span><br><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/static/images/</span><br></code></pre></td></tr></table></figure><h2 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2. 文件上传"></a>2. 文件上传</h2><h3 id="1-文件上传原理"><a href="#1-文件上传原理" class="headerlink" title="1. 文件上传原理"></a>1. 文件上传原理</h3><ul><li>表单的<font color="#ffff00"> enctype 属性</font>规定在发送到服务器之前对表单数据的<font color="#ffff00">编码方式</font>。</li><li>当表单的 enctype=”<font color="#ffc000">application/x-www-form-urlencoded</font>“ (默认)时,<br>form 表单中的数据格式为: <font color="#ffc000">key=value&amp;key=value</font></li><li>当表单的 enctype=”<font color="#00b0f0">multipart/form-data</font>“时，其传输数据形式如下：<br><img src="https://s2.loli.net/2023/04/28/jh6pWVrx2yZSB43.png" alt="image.png|425"></li></ul><h3 id="2-配置文件大小"><a href="#2-配置文件大小" class="headerlink" title="2. 配置文件大小"></a>2. 配置文件大小</h3><ul><li>Spring Boot 工程嵌入的 tomcat 限制了请求的文件大小，每个文件的配置最大为 1 Mb，单次请求的文件的总数不能大于 10 Mb.</li><li>要更改这个默认值需要在配置文件 (如<font color="#00b0f0"> application.properties</font>) 中加入两个配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.servlet.multipart.max-file-size=10MB<br>spring.servlet.multipart.max-request-size=10MB<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>当表单的 enctype= “<font color="#9bbb59">multipart/form-data</font>“时, 可以使用<font color="#9bbb59"> MultipartFile </font>获取上传的文件数据，再通过 <font color="#9bbb59">transferTo </font>方法将其写入到磁盘中</p></blockquote><p>demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.controller;  <br>  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServlet;  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;  <br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;  <br>  <br><span class="hljs-keyword">import</span> java.io.File;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br>  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController</span> &#123;  <br><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(String name, MultipartFile avatar, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>System.out.println(name);  <br>System.out.println(<span class="hljs-string">&quot;filename:&quot;</span> + avatar.getOriginalFilename());  <br><span class="hljs-comment">// 获取文件类型  </span><br>System.out.println(avatar.getContentType());  <br><span class="hljs-comment">// 获取当前程序运行路径，部署时动态改变  </span><br><span class="hljs-comment">// String path = request.getServletContext().getRealPath(&quot;/upload/&quot;);  </span><br><span class="hljs-comment">// 固定为本地地址便于测试</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\IDEAProjects\\helloworld\\src\\main\\resources\\static\\images\\&quot;</span>;  <br>System.out.println(path);  <br>saveFile(avatar, path);  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功&quot;</span>;  <br>&#125;  <br>  <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveFile</span><span class="hljs-params">(MultipartFile avatar, String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br><span class="hljs-comment">// 获取上传文件夹  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);  <br><span class="hljs-comment">// 判断文件夹是否存在，不存在则创建  </span><br><span class="hljs-keyword">if</span> (!dir.exists()) &#123;  <br>dir.mkdir();  <br>&#125;  <br><span class="hljs-comment">// 实例化上传文件  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + avatar.getOriginalFilename());  <br>System.out.println(file.getPath());  <br><span class="hljs-comment">// 保存上传的文件  </span><br>avatar.transferTo(file);  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-拦截器"><a href="#3-拦截器" class="headerlink" title="3. 拦截器"></a>3. 拦截器</h2><p>简介：</p><blockquote><ol><li>拦截器在 Web 系统中非常常见，对于某些全局统一-的操作，我们可以把它提取到拦截器中实现。总结起来，拦截器大致有以下几种使用场景:</li><li><font color="#7030a0">权限检查:</font> 如登录检测，进入处理程序检测是否登录，如果没有，则直接返回登录页面。<br>3<font color="#7030a0">. 性能监控: </font>有时系统在某段时间莫名其妙很慢，可以通过拦截器在进入处理程序之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间</li><li><font color="#548dd4">通用行为: </font>读取 cookie 得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有提取 Locale、Theme 信息等，只要是多个处理程序都需要的，即可使用拦截器实现。</li></ol></blockquote><blockquote><p>[!NOTE] tips</p><ol><li>Spring Boot 定义了 <span style="background:#d2cbff">HandlerInterceptor 接口</span>来实现自定义拦截器的功能</li><li>HandlerInterceptor 接口定义了<span style="background:#40a9ff"> preHandle、postHandle、 afterCompletion</span> 三种方法，通过重写这三种方法实现请求前、请求后等操作<br><img src="https://s2.loli.net/2023/04/29/dvnpCAF81RxlBK5.png" alt="image.png|375"></li></ol></blockquote><h3 id="1-拦截器定义"><a href="#1-拦截器定义" class="headerlink" title="1. 拦截器定义"></a>1. 拦截器定义</h3><blockquote><p>类似于 django 的<font color="#4bacc6"> Midleware </font>中间件，控制请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">pub1ic <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*在请求处理之前进行调用(Control1er方法调用之前)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@override</span><br>pub1ic <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServ1etRequest request, HttpServ1etResponse response, object handTer)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (条件) &#123;<br>System.out.print1n(<span class="hljs-string">&quot;通过&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.print1n(<span class="hljs-string">&quot;不通过&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>返回为 true 则进入下一个拦截器，否则拒绝通过。</p></blockquote><h3 id="2-拦截器注册"><a href="#2-拦截器注册" class="headerlink" title="2. 拦截器注册"></a>2. 拦截器注册</h3><ul><li><span style="background:#affad1"> addPathPatterns </span>方法定义拦截的地址</li><li><span style="background:#b1ffff">excludePathPatterns </span>定义排除某些地址不被拦截</li><li>添加的一个拦截器没有 addPathPattern 任何一个 url 则<font color="#92d050">默认拦截所有请求</font></li><li>如果没有 excludePathPatterns 任何一个请求，则<font color="#92cddc">默认不放过任何一个请求</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;  <br><span class="hljs-comment">// 只拦截user路由下的所有路由  </span><br><span class="hljs-comment">// registry.addInterceptor(new LoginInterceptor()).addPathPatterns(&quot;/admin/**&quot;);  </span><br><span class="hljs-comment">// 拦截所有路由  </span><br>registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>());  <br>  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-RESTful"><a href="#4-RESTful" class="headerlink" title="4. RESTful"></a>4. RESTful</h1><h2 id="1-RESTful-介绍"><a href="#1-RESTful-介绍" class="headerlink" title="1.RESTful 介绍"></a>1.RESTful 介绍</h2><ol><li>HTTP 提供了<font color="#4bacc6"> POST、GET、 PUT、DELETE</font> 等操作类型对某个 Web 资源进行 <font color="#4bacc6">Create、Read、 Update 和 Delete </font>操作。</li><li>一个 HTTP 请求除了利用 URI 标志目标资源之外，还需要通过 HTTP Method 指定针对该资源的操作类型，一些常见的 HTTP 方法及其在 RESTful 风格下的使用:</li></ol><p><img src="https://s2.loli.net/2023/04/29/wokjgHNQVc4TCSW.png" alt="image.png|425"></p><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><ul><li>HTTP 状态码就是服务向用户返回的状态码和提示信息，客户端的每一次请求，服务都必须给出回应，回应包括<font color="#8064a2"> HTTP 状态码和数据</font>两部分。</li><li>HTTP 定义了 40 个标准状态码，可用于传达客户端请求的结果。状态码分为以下<br><font color="#f79646">5 个类别:</font><blockquote><p>1 xx: 信息，通信传输协议级信息<br>2 xx: 成功，表示客户端的请求已成功接受<br>3 xx: 重定向，表示客户端必须执行一些其他操作才能完成其请求<br>4 xx: 客户端错误，此类错误状态码指向客户端<br>5 xx: 服务器错误，服务器负责这写错误状态码</p></blockquote></li></ul><h2 id="2-构建-RESTful-应用接口"><a href="#2-构建-RESTful-应用接口" class="headerlink" title="2. 构建 RESTful 应用接口"></a>2. 构建 RESTful 应用接口</h2><p>Spring Boot 提供的<span style="background:rgba(240, 107, 5, 0.2)"> spring-boot-starter-web </span>组件完全支持开发 RESTful API, 提供了与 REST 操作方式 (GET、POST、 PUT、DELETE) 对应的注解。</p><ol><li><code>@GetMapping:</code> 处理 GET 请求，获取资源。</li><li><code>@PostMapping:</code> 处理 POST 请求，新增资源。</li><li><code>@PutMapping:</code> 处理 PUT 请求，更新资源。</li><li><code>@DeleteMapping:</code> 处理 DELETE 请求，删除资源。</li><li><code>@PatchMapping:</code> 处理 PATCH 请求，用于部分更新资源。</li></ol><blockquote><p>类似于 django 的视图装饰器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> cLass UserController &#123;<br><span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;根据ID获取用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@PostMapping(&quot;/user&quot; )</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@PutMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;更新用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; 根据ID删除用户&quot;</span>;<br><span class="hljs-number">1</span>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-Swagger-生成-API-接口文档"><a href="#3-Swagger-生成-API-接口文档" class="headerlink" title="3. Swagger 生成 API 接口文档"></a>3. Swagger 生成 API 接口文档</h2><blockquote><ol><li>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务，是非常流行的 API 表达工具。</li><li>Swagger 能够自动生成完善的 RESTful API 文档，同时并根据后台代码的修改同步更新，同时提供完整的测试页面来调试 APl。</li></ol></blockquote><p><font color="#f79646">pom. xml 依赖配置:</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- swagger依赖--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.config;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;  <br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;  <br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;  <br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;  <br>  <br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//告诉Spring容器， 这个类是一个配置类  </span><br><span class="hljs-meta">@EnableSwagger2</span> <span class="hljs-comment">//启用Swagger2功能  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;  <br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)  <br>.apiInfo(apiInfo())  <br>.select()  <br><span class="hljs-comment">// com 包下所有API都交给Swagger2管理  </span><br>.apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com&quot;</span>))  <br>.paths(PathSelectors.any()).build();  <br>&#125;  <br>  <br><span class="hljs-comment">// API文档页面显示信息  </span><br><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()  <br>.title(<span class="hljs-string">&quot;演示项目API&quot;</span>) <span class="hljs-comment">//标题  </span><br>.description(<span class="hljs-string">&quot;学习Swagger2的演示项目&quot;</span>) <span class="hljs-comment">//描述  </span><br>.version(<span class="hljs-string">&quot;1.0&quot;</span>)  <br>.build();  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>spring 3 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring3版本的swagger依赖--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.config;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br>  <br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.OpenAPI;  <br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.info.Info;  <br>  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenApiConfig</span> &#123;  <br>  <br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">springOpenAPI</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>().info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>() <span class="hljs-comment">//  </span><br>.title(<span class="hljs-string">&quot;SpringDoc API Test&quot;</span>) <span class="hljs-comment">//  </span><br>.description(<span class="hljs-string">&quot;SpringDoc Simple Application Test&quot;</span>) <span class="hljs-comment">//  </span><br>.version(<span class="hljs-string">&quot;0.0.1&quot;</span>));  <br>&#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-注解"><a href="#1-注解" class="headerlink" title="1.注解"></a>1.注解</h3><p>swagger 常用注解如下图所示：</p><p><img src="https://s2.loli.net/2023/05/02/sgfWcYZxHa2rJKm.png" alt="image.png|375"></p><p>从 Springfox 迁移过来的，需要修改注解：</p><p><span style="background:rgba(3, 135, 102, 0.2)">&gt; 1. @Api → @Tag</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 2. @ApiIgnore → @Parameter (hidden = true) or @Operation (hidden = true) or @Hidden</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 3. @ApiImplicitParam → @Parameter</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 4. @ApiImplicitParams → @Parameters</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 5. @ApiModel → @Schema</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 6. @ApiModelProperty (hidden = true) → @Schema (accessMode = READ_ONLY)</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 7. @ApiModelProperty → @Schema</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 8. @ApiOperation (value = “foo”, notes = “bar”) → @Operation (summary = “foo”, description = “bar”)</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 9. @ApiParam → @Parameter</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 10. @ApiResponse (code = 404, message = “foo”) → @ApiResponse (responseCode = “404”, description = “foo”)</span></p><h3 id="2-访问-swagger"><a href="#2-访问-swagger" class="headerlink" title="2.访问 swagger"></a>2.访问 swagger</h3><ol><li>swagger 2： <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></li><li>swagger 3: <ul><li><a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></li><li><a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></li></ul></li></ol><h1 id="5-MybatisPlus"><a href="#5-MybatisPlus" class="headerlink" title="5. MybatisPlus"></a>5. MybatisPlus</h1><h2 id="1-ORM-介绍"><a href="#1-ORM-介绍" class="headerlink" title="1.ORM 介绍"></a>1.ORM 介绍</h2><ul><li><p>ORM，（Object Relational Mapping，对象关系映射）是为了解决面向对象与关系数据库存在的互不匹配现象的一种技术。</p></li><li><p>ORM 通过使用描述对象和数据库之间映射的元数据将程序中的对象自动持久化到关系数据库中。</p></li><li><p>ORM 框架的本质是简化编程中操作数据库的编码。</p></li></ul><p><img src="https://s2.loli.net/2023/05/29/PcG5L8ZYouWhyp6.png" alt="image.png|350"></p><h2 id="2-MyBatis-Plus-介绍"><a href="#2-MyBatis-Plus-介绍" class="headerlink" title="2.MyBatis-Plus 介绍"></a>2.MyBatis-Plus 介绍</h2><ul><li>MyBatis 是一款优秀的数据持久层 ORM 框架，被广泛地应用于应用系统。</li><li>MyBatis 能够非常灵活地实现动态 SQL，可以使用 XML 或注解来配置和映射原生信息，能够轻松地将 Java 的 POJO（PlainOrdinaryJavaObject，普通的Java 对象）与数据库中的表和字段进行映射关联。</li><li>MyBatis-Plus 是一个 MyBatis 的增强工具，在 MyBatis 的基础上做了增强，简化了开发。</li></ul><p><font color="#8db3e2">添加依赖：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;! MyBatisPlus依赖<br>&lt;dependency&gt;<br>   &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!--mysql驱动依赖<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.47</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!-- 数据连接池druid<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><font color="#f79646">全局配置：</font></p><ul><li>配置数据库相关信息（application.properties）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.datasource.type=com.alibaba.druid.pool.DruidDatasource<br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br>spring.datasource.ur1=jdbc:mysql:<span class="hljs-comment">//1ocalhost:3306/mydb?usessL=false</span><br>spring.datasource.username=root<br>spring.datasource.password=<span class="hljs-number">123456</span><br>mybatis-plus.configuration.1og-impl=org.apache.ibatis.logging.stdout.stdoutImp1<br><br></code></pre></td></tr></table></figure><ul><li>添加@MapperScan 注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@springBootApplication</span><br><span class="hljs-meta">@Mapperscan(&quot;com.xx.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusDemoApplication</span> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(string[] args)</span>&#123;<br>       SpringApplication.run(MybatisplusDemoApplication.class,args);<br><br></code></pre></td></tr></table></figure><p>Mybitis CRUD 注解：<br>注解功能<br><font color="#00b0f0">@Insert     实现插入</font><br><font color="#00b0f0">@Update   实现更新</font><br><font color="#00b0f0">@Delete    实现删除</font><br><font color="#00b0f0">@Select    实现查询</font><br><font color="#00b0f0">@Result    实现结果集封装</font><br><font color="#00b0f0">@Results  可以与@Result 一起使用，封装多个结果集</font><br><font color="#00b0f0">@One       实现一对一结果集封装</font><br><font color="#00b0f0">@Many     实现一对多结果集封装</font></p><h2 id="3-MyBatis-Plus-CRUD-操作"><a href="#3-MyBatis-Plus-CRUD-操作" class="headerlink" title="3.MyBatis-Plus CRUD 操作"></a>3.MyBatis-Plus CRUD 操作</h2><p><font color="#ffc000">mybatis 的 Mapper 操作方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>   <span class="hljs-meta">@Insert(&quot;insert into user values(#&#123;id),#(username&#125;,#(password),#(birthday)&quot;)//id,username等属性为user对象的属性</span><br><span class="hljs-meta">    int add(User user);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @update(&quot;update user set username=#(username&#125;,password=#(password),birthday=#(birthday&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-meta">    int update(User user);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @Delete(&quot;delete from user where id=#(id&quot;)</span><br><span class="hljs-meta">    int delete(int id);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @select(&quot;select * from user where id=#(id&quot;)</span><br><span class="hljs-meta">   User findByid(int id);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @select(&quot;select * from user&quot;)</span><br><span class="hljs-meta">   List&lt;User&gt; getA11();</span><br></code></pre></td></tr></table></figure><p><font color="#ff0000">mybatis-plus 的操作方法</font></p><blockquote><p>BaseMapper 泛型类里已经实现了基本的增删改查任务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意<br>Mybatis-plus 有一些对 entity 里的实体类的<strong>注解</strong>，标识对应的表名、主键和字段名等，如果不进行注解则实体类的类名必须与数据表名一致，属性必须与数据表的字段名一致。<br><a href="https://baomidou.com/pages/24112f/#%E7%89%B9%E6%80%A7">注解细节</a></p></blockquote><h2 id="4-多表查询"><a href="#4-多表查询" class="headerlink" title="4. 多表查询"></a>4. 多表查询</h2><blockquote><p>实现复杂关系映射，可以使用@Results 注解，@Result 注解，@One 注解，<br>@Many 注解组合完成复杂关系的配置。</p></blockquote><p><img src="https://s2.loli.net/2023/06/01/Z6TuNLREyqGFazH.png" alt="注解说明|325"></p><p>示例：<br><strong>任务表</strong></p><p>entity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.entity;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;  <br>  <br><span class="hljs-keyword">import</span> java.sql.Date;  <br><span class="hljs-keyword">import</span> java.time.LocalDateTime;  <br>  <br><span class="hljs-meta">@TableName(value = &quot;u_task&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;  <br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> String content;  <br>    <span class="hljs-meta">@TableField(value = &quot;b_date&quot;)</span>  <br>    <span class="hljs-keyword">private</span> LocalDateTime b_date;  <br>    <span class="hljs-meta">@TableField(value = &quot;e_date&quot;)</span>  <br>    <span class="hljs-keyword">private</span> LocalDateTime e_date;  <br>    <span class="hljs-meta">@TableField(exist = false)</span>  <br>    <span class="hljs-keyword">private</span> User user;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TaskMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Task&gt; &#123;  <br>    <span class="hljs-meta">@Select(&quot;select * from task where uid = #&#123;uid&#125;&quot;)</span>  <br>    List&lt;Task&gt; <span class="hljs-title function_">selectByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;  <br><br><span class="hljs-meta">@Select(&quot;select * from task&quot;)</span>  <br><span class="hljs-meta">@Results(  </span><br><span class="hljs-meta">        &#123;  </span><br><span class="hljs-meta">                @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;name&quot;, property = &quot;name&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;content&quot;, property = &quot;content&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;b_date&quot;, property = &quot;b_date&quot;, javaType = LocalDateTime.class, jdbcType = JdbcType.TIMESTAMP),  </span><br><span class="hljs-meta">                @Result(column = &quot;e_date&quot;, property = &quot;e_date&quot;, javaType = LocalDateTime.class, jdbcType = JdbcType.TIMESTAMP),  </span><br><span class="hljs-meta">                @Result(column = &quot;uid&quot;, property = &quot;user&quot;, javaType = User.class,  </span><br><span class="hljs-meta">                        one = @One(select = &quot;com.alleyf.airesume.mapper.UserMapper.selectById&quot;)),  </span><br><span class="hljs-meta">        &#125;  </span><br><span class="hljs-meta">)</span>  <br>List&lt;Task&gt; <span class="hljs-title function_">queryAllTaskAndUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用户表</strong></p><p>entity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.entity;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;  <br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <br>    <span class="hljs-keyword">private</span> String username;  <br>    <span class="hljs-keyword">private</span> String password;  <br>    <span class="hljs-meta">@TableField(exist = false)</span>  <br>    <span class="hljs-keyword">private</span> List&lt;Task&gt; tasks;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>  <br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>  <br>    <span class="hljs-meta">@Results(  </span><br><span class="hljs-meta">            &#123;  </span><br><span class="hljs-meta">                    @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;username&quot;, property = &quot;username&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;password&quot;, property = &quot;password&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;id&quot;, property = &quot;tasks&quot;, javaType = List.class,  </span><br><span class="hljs-meta">                            many = @Many(select = &quot;com.alleyf.airesume.mapper.TaskMapper.selectByUid&quot;)),  </span><br><span class="hljs-meta">            &#125;  </span><br><span class="hljs-meta">    )</span>  <br>    List&lt;User&gt; <span class="hljs-title function_">queryAllUserAndTasks</span><span class="hljs-params">()</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意<br>查询用户的同时查出与用户相关联的所有任务<br>Result 中的 column 的字段为查询到的数据库字段值，用来赋值给后面类对象的属性 property，对应的属性与字段相同，含有不存在的属性则使用外键间接查询。</p></blockquote><h2 id="5-条件查询"><a href="#5-条件查询" class="headerlink" title="5. 条件查询"></a>5. 条件查询</h2><p><span style="background:#affad1">Mybatis 实现：</span></p><blockquote><p>在 mapper 的接口中写 sql 语句进行条件查询。</p></blockquote><p>示例：<br>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 按照任务名查询用户 * * <span class="hljs-doctag">@param</span> username 用户名  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 所有用户列表  </span><br><span class="hljs-comment"> */</span><span class="hljs-meta">@Select(&quot;select * from user where username = #&#123;username&#125;&quot;)</span>  <br><span class="hljs-meta">@Results(&#123;  </span><br><span class="hljs-meta">        @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;username&quot;, property = &quot;username&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;password&quot;, property = &quot;password&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;id&quot;, property = &quot;tasks&quot;, javaType = List.class,  </span><br><span class="hljs-meta">                many = @Many(select = &quot;com.alleyf.airesume.mapper.TaskMapper.selectByUid&quot;)),  </span><br><span class="hljs-meta">&#125;)</span>  <br>User <span class="hljs-title function_">selectByName</span><span class="hljs-params">(String username)</span>;<br><br></code></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.selectByName(username);  <br>    &#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:rgba(136, 49, 204, 0.2)">Mybatis-Plus 实现：</span></p><blockquote><ul><li>使用 <strong>QueryWrapper</strong> （条件查询）和 <strong>UpdateWrapper</strong>（条件更新） 两个条件查询类进行条件查询。</li><li>可选条件有：eq（等于），lt（大于），st（小于），le（大于等于），se（小于等于）等</li></ul></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户(MP)&quot;)</span>  <br><span class="hljs-meta">@GetMapping(&quot;/queryByMPName&quot;)</span>  <br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMPName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br>    <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6. 分页查询"></a>6. 分页查询</h2><p>编写配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.config;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaginationConfig</span> &#123;  <br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();  <br>        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">paginationInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);  <br>        interceptor.addInnerInterceptor(paginationInterceptor);  <br>        <span class="hljs-keyword">return</span> interceptor;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询所有用户：1oca1host：8080/findA11</span><br><span class="hljs-meta">@GetMapping(&quot;findAll&quot;)</span><br><span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">findAl1</span><span class="hljs-params">()</span>t<br>   <span class="hljs-comment">//设置起始值及每页条数</span><br>   Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">return</span> userMapper.selectPage(page,nul1);<br><br><span class="hljs-meta">@ApiOperation(&quot;按照页码查询用户(MP)&quot;)</span>  <br><span class="hljs-meta">@GetMapping(&quot;/queryByPage/&#123;page&#125;&quot;)</span>  <br><span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;  <br>    Page&lt;User&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>);  <br>    <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> userMapper.selectPage(page1, <span class="hljs-literal">null</span>);  <br>    <span class="hljs-keyword">return</span> iPage;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="6-JWT-跨域认证"><a href="#6-JWT-跨域认证" class="headerlink" title="6. JWT 跨域认证"></a>6. JWT 跨域认证</h1><h2 id="1-Session-认证"><a href="#1-Session-认证" class="headerlink" title="1. Session 认证"></a>1. Session 认证</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p><blockquote><ul><li>用户向服务器发送<strong>用户名和密码</strong>。</li><li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等。</li><li>服务器向用户返回一个 session_id，写入用户的 Cookie。</li><li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</li><li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</li></ul></blockquote><p>session 认证流程：<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311353929.png" alt="|350"><br>session 认证的方式应用非常普遍，但也存在一些问题，扩展性不好，如果是服务<br>器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能<br>够读取 session，针对此种问题一般有两种方案:</p><blockquote><ol><li><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。</p></li><li><p>一种方案是服务器不再保存 session 数据，所有数据都保存在客户端，每次请求都发回服务器。Token 认证就是这种方案的一个代表。</p></li></ol></blockquote><h2 id="2-Token-认证"><a href="#2-Token-认证" class="headerlink" title="2. Token 认证"></a>2. Token 认证</h2><p>Token 是在服务端产生的一串字符串, 是客户端访问资源接口（API) 时所需要的资<br>源凭证，流程如下：</p><blockquote><ul><li>客户端使用用户名跟密码请求登录，服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端</li><li>客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 token，如果验证成功，就向客户端返回请求的数据</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311410745.png" alt="image.png|350"></p><ul><li><p>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放<br>token 数据。</p></li><li><p>用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力<br>减少频繁的查询数据库</p></li><li><p>token 完全由应用管理，所以它可以避开同源策略</p></li></ul><hr><h2 id="3-JWT-的使用"><a href="#3-JWT-的使用" class="headerlink" title="3. JWT 的使用"></a>3. JWT 的使用</h2><blockquote><p>JSON Web Token（简称 JWT）是一个 token 的具体实现方式，是目前最流行<br>的跨域认证解决方案。<br>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，具体如下:</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;姓名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;角色&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;管理员&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;到期时间&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2018 年 7 月 1 日 0 点 0 分&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。<br>为了防止用户篡改数据，服务器在生成这个对象的时候，会加上<strong>签名</strong>。</p></blockquote><blockquote><p>JWT 的由三个部分组成，依次如下：<br>  <em><strong>Header (头部)<br>  Payload (负载)<br>  Signature  (签名)</strong></em><br>  三部分最终组合为完整的字符串，中间使用·分隔，如下：<br>  Header.Payload.Signature<br>           <code>eyJhbGci0iJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdwIi0iIxMjMoNTY30DkwIiwibmFtzsI6IkpvaG4 gRG91IiwiaXNTb2NpYWwiOnRydwV9. 4pcPyMD09o1PSyXnrXCjTwXyr4BsezdI1AVTmud2fU4</code></p></blockquote><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><blockquote><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;H256&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>alg 属性表示签名的算法（<strong>algorithm</strong>），默认是 HMAC SHA 256 (写成</li></ul><p><strong>HS256</strong>)</p><ul><li>typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT</li><li>最后，将上面的 JSON 对象使用 Base 64 URL 算法转成字符串。</li></ul><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><blockquote><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了 7 个官方字段，供选用。</p></blockquote><ul><li>iss (issuer)：签发人</li><li>exp (expiration time): 过期时间</li><li>sub (subject): 主题</li><li>aud (audience): 受众</li><li>nbf (Not Before): 生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (WT ID): 编号</li></ul><blockquote><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在个部分。<br>   这个 JSON 对象也要使用 <strong>Base 64 URL</strong> 算法转成字符串。</p></blockquote><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><blockquote><p> Signature 部分是对前两部分的签名，防止数据篡改。<br>    首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户; 然后，使用 Header 里面指定的签名算法 （默认是 HMAC SHA 256），按照下面的公式产生签名。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">HMACSHA <span class="hljs-number">256</span> (<br>base64UrlEncode (header) + <span class="hljs-string">&quot;.&quot;</span> +<br>base64UrlEncode (payload)<span class="hljs-punctuation">,</span><br>secret)<br></code></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（’.’）分隔，就可以返回给用户。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311433682.png" alt="image.png|450"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</li><li>客户端每次与服务器通信，都要带上这个 JWT，可以把它放在 Cookie 里面自动发送，但是这样不能跨域。</li><li>更好的做法是放在 HTTP 请求的头信息’Authorization’字段里面，单独发送。</li></ul><h3 id="请求认证"><a href="#请求认证" class="headerlink" title="请求认证"></a>请求认证</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202309262023932.png" alt="image.png|525"></p><h3 id="JWT验证拦截器"><a href="#JWT验证拦截器" class="headerlink" title="JWT验证拦截器"></a>JWT验证拦截器</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202309272236587.png" alt="image.png|250"></p><p>定义拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSON;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.utils.Result;  <br><span class="hljs-keyword">import</span> com.alleyf.common.JwtUtils;  <br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;  <br>  <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;  <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;  <br>  <br><span class="hljs-meta">@Component</span>  <br><span class="hljs-meta">@Slf4j</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtValidateInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> JwtUtils jwtUtils;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;X-Token&quot;</span>);  <br>        log.debug(request.getRequestURI() + <span class="hljs-string">&quot;待验证：&quot;</span> + token);  <br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                jwtUtils.getClaimsByToken(token);  <br>                log.debug(request.getRequestURI() + <span class="hljs-string">&quot; 验证通过&quot;</span>);  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>        &#125;  <br>        log.debug(request.getRequestURI() + <span class="hljs-string">&quot; 禁止访问&quot;</span>);  <br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);  <br>        response.getWriter().write(JSON.toJSONString(Result.error().message(<span class="hljs-string">&quot;jwt令牌无效，请重新登录&quot;</span>)));  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置使用拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.config.JwtValidateInterceptor;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> JwtValidateInterceptor jwtValidateInterceptor;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;  <br>        <span class="hljs-type">InterceptorRegistration</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> registry.addInterceptor(jwtValidateInterceptor);  <br>        registration.addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(  <br>                <span class="hljs-string">&quot;/user/login&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/register&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/logout&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/info&quot;</span>,  <br>                <span class="hljs-string">&quot;/error&quot;</span>  <br>        );  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Swagger授权配置"><a href="#Swagger授权配置" class="headerlink" title="Swagger授权配置"></a>Swagger授权配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 5 - 29 20:33 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.CookieValue;  <br><span class="hljs-keyword">import</span> org.springframework.web.context.request.async.DeferredResult;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;  <br><span class="hljs-keyword">import</span> springfox.documentation.service.*;  <br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;  <br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;  <br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;  <br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;  <br>  <br><span class="hljs-keyword">import</span> java.util.Collections;  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-meta">@EnableKnife4j</span>  <br><span class="hljs-meta">@EnableOpenApi</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;  <br>  <br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">Api</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.OAS_30)  <br>                .enable(<span class="hljs-literal">true</span>)<span class="hljs-comment">//是否启用：注意生产环境需要关闭  </span><br>                .groupName(<span class="hljs-string">&quot;spring-boot-2.7.12&quot;</span>)  <br>                .genericModelSubstitutes(DeferredResult.class)  <br>                .useDefaultResponseMessages(<span class="hljs-literal">false</span>)  <br>                .forCodeGeneration(<span class="hljs-literal">true</span>)  <br>                .ignoredParameterTypes(CookieValue.class)  <br>                .apiInfo(apiInfo())  <br>                .select()  <br>                <span class="hljs-comment">//以下拦截配置可以三选一，根据需要进行添加,选择扫描哪些接口  </span><br><span class="hljs-comment">//                .apis(RequestHandlerSelectors.basePackage(&quot;com.alleyf.*.controller&quot;))  </span><br>                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))  <br><span class="hljs-comment">//                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))  </span><br>                .paths(PathSelectors.any())  <br>                .build()  <br>                .securitySchemes(Collections.singletonList(securityScheme()))  <br>                .securityContexts(Collections.singletonList(securityContext()));  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> SecurityScheme <span class="hljs-title function_">securityScheme</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-comment">//return new ApiKey(&quot;Authorization&quot;, &quot;Authorization&quot;,&quot;header&quot;);  </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiKey</span>(<span class="hljs-string">&quot;X-Token&quot;</span>, <span class="hljs-string">&quot;X-Token&quot;</span>, <span class="hljs-string">&quot;header&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> SecurityContext <span class="hljs-title function_">securityContext</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> SecurityContext.builder()  <br>                .securityReferences(defaultAuth())  <br>                .forPaths(PathSelectors.regex(<span class="hljs-string">&quot;^(?!auth).*$&quot;</span>))  <br>                .build();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> List&lt;SecurityReference&gt; <span class="hljs-title function_">defaultAuth</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">AuthorizationScope</span> <span class="hljs-variable">authorizationScope</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>(<span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;accessEverything&quot;</span>);  <br>        AuthorizationScope[] authorizationScopes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthorizationScope</span>[<span class="hljs-number">1</span>];  <br>        authorizationScopes[<span class="hljs-number">0</span>] = authorizationScope;  <br>        <span class="hljs-keyword">return</span> Collections.singletonList(  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityReference</span>(<span class="hljs-string">&quot;X-Token&quot;</span>, authorizationScopes));  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()  <br>                .title(<span class="hljs-string">&quot;WHUT leave Go-Swagger3接口文档&quot;</span>)  <br>                .description(<span class="hljs-string">&quot;WHUT leave Go-前后端分离的接口文档&quot;</span>)  <br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>)  <br>                .contact(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;alleyf&quot;</span>, <span class="hljs-string">&quot;https://fcsy.com&quot;</span>, <span class="hljs-string">&quot;alleyf@qq.com&quot;</span>))  <br>                .build();  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h3><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="生成-Token"><a href="#生成-Token" class="headerlink" title="生成 Token"></a>生成 Token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//7 天过期</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800</span>;<br><span class="hljs-comment">//32 位秘钥</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;<br><br><span class="hljs-comment">//生成 token</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span>&#123;<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> (now.getTime() + <span class="hljs-number">1000</span> * expire);<br>   <span class="hljs-keyword">return</span> Jwts.builder ()<br>            .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>)<br>            .setSubject(username)<br>            .setIssuedAt(now)<br>            .setExpiration(expiration)<br>            .signWith(SignatureAlgorithm.HS512, secret)<br>            .compact();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解析-token"><a href="#解析-token" class="headerlink" title="解析 token"></a>解析 token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>    <span class="hljs-keyword">return</span> Jwts.parser()  <br>            .setSigningKey(secret)  <br>            .parseClaimsJws(token)  <br>            .getBody();  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后端完整部分"><a href="#后端完整部分" class="headerlink" title="后端完整部分"></a>后端完整部分</h4><p><code>UserController. java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 6 - 1 19:56 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.controller;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.entity.User;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.mapper.UserMapper;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.JwtUtils;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.Result;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@Api(tags = &quot;用户&quot;, value = &quot;用户&quot;)</span>  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@CrossOrigin</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    UserMapper userMapper;  <br><br>    <span class="hljs-meta">@ApiOperation(&quot;用户登录&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtils.generateToken(user.getUsername());  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;token&quot;</span>, token);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;获取用户信息&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/info&quot;)</span>  <span class="hljs-comment">//&quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">info</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> JwtUtils.getClaimsByToken(token).getSubject();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://img2.baidu.com/it/u=1325995315,4158780794&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;</span>;  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;name&quot;</span>, username).data(<span class="hljs-string">&quot;avatar&quot;</span>, url);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;注销&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span> <span class="hljs-comment">// &quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> Result.ok();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;查询所有用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryAll&quot;)</span>  <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryAllUser</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.queryAllUserAndTask();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.selectByName(username);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMPName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMPName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名路径查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPMPName/&#123;username&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByPMPName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照页码查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPage/&#123;page&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;  <br>        Page&lt;User&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>);  <br>        <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> userMapper.selectPage(page1, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-keyword">return</span> iPage;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;添加用户&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.insert(user) &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;添加成功&quot;</span> : <span class="hljs-string">&quot;添加失败&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Result.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 5 - 29 &#125;9:52 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;  <br>    <span class="hljs-keyword">private</span> Boolean success;  <br>    <span class="hljs-keyword">private</span> Integer code;  <br>    <span class="hljs-keyword">private</span> String message;  <br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Success);  <br>        r.setSuccess(<span class="hljs-literal">true</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;成功&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Error);  <br>        r.setSuccess(<span class="hljs-literal">false</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;失败&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setSuccess(success);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">message</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setMessage(message);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">code</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setCode(code);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(String key, Object value)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data.put(key, value);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setData(map);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getSuccess</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.success = success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.code = code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.message = message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> data;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Map&lt;String, Object&gt; data)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data = data;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>JwtUtils.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;  <br>  <br><span class="hljs-keyword">import</span> java.util.Date;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;  <br>    <span class="hljs-comment">//7 天过期  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800L</span>;  <br>    <span class="hljs-comment">//32 位秘钥  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;  <br>  <br>    <span class="hljs-comment">//生成 token  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span> &#123;  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(now.getTime() + <span class="hljs-number">1000</span> * expire);  <br>        <span class="hljs-keyword">return</span> Jwts.builder()  <br>                .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>)  <br>                .setSubject(username)  <br>                .setIssuedAt(now)  <br>                .setExpiration(expiration)  <br>                .signWith(SignatureAlgorithm.HS512, secret)  <br>                .compact();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-keyword">return</span> Jwts.parser()  <br>                .setSigningKey(secret)  <br>                .parseClaimsJws(token)  <br>                .getBody();  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="项目实战-角色管理"><a href="#项目实战-角色管理" class="headerlink" title="项目实战-角色管理"></a>项目实战-角色管理</h1><h2 id="1-预览效果"><a href="#1-预览效果" class="headerlink" title="1.预览效果"></a>1.预览效果</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310011258914.png" alt="image.png"></p><h2 id="2-前端"><a href="#2-前端" class="headerlink" title="2.前端"></a>2.前端</h2><p><font color="#ff0000">role.vue:</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;  <br>&lt;div&gt;  <br>&lt;!-- 添加角色--&gt;  <br>&lt;el-dialog  <br>:title=&quot;dialogTitle&quot;  <br>:visible.sync=&quot;dialogFormVisible&quot;  <br>center  <br>width=&quot;32%&quot;  <br>@close=&quot;clearForm&quot;  <br>&gt;  <br>&lt;el-form  <br>ref=&quot;roleForm&quot;  <br>:model=&quot;roleForm&quot;  <br>:rules=&quot;rules&quot;  <br>show-message  <br>status-icon  <br>&gt;  <br>&lt;el-form-item label=&quot;角色名&quot; label-width=&quot;80px&quot; prop=&quot;roleName&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;roleForm.roleName&quot;  <br>clearable  <br>prefix-icon=&quot;el-icon-user&quot;  <br>/&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;el-form-item label=&quot;角色描述&quot; label-width=&quot;80px&quot; prop=&quot;roleDesc&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;roleForm.roleDesc&quot;  <br>clearable  <br>prefix-icon=&quot;el-icon-key&quot;  <br>/&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;/el-form&gt;  <br>&lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;  <br>&lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;  <br>&lt;el-button type=&quot;primary&quot; @click=&quot;saveRole(&#x27;roleForm&#x27;)&quot;&gt;确 定  <br>&lt;/el-button&gt;  <br>&lt;/div&gt;  <br>&lt;/el-dialog&gt;  <br>&lt;!-- 角色检索--&gt;  <br>&lt;el-card id=&quot;search&quot; shadow=&quot;hover&quot;&gt;  <br>&lt;el-row :gutter=&quot;5&quot;&gt;  <br>&lt;el-col :span=&quot;18&quot;&gt;  <br>&lt;div class=&quot;grid-content bg-purple&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;searchModel.queryContent&quot;  <br>clearable  <br>placeholder=&quot;请输入用户名&quot;  <br>suffix-icon=&quot;el-icon-user&quot;  <br>&gt;  <br>&lt;el-button  <br>slot=&quot;append&quot;  <br>icon=&quot;el-icon-search&quot;  <br>type=&quot;success&quot;  <br>@click=&quot;getRoles&quot;  <br>/&gt;  <br>&lt;/el-input&gt;  <br>&lt;/div&gt;  <br>&lt;/el-col&gt;  <br>&lt;el-col :span=&quot;6&quot; align=&quot;right&quot;&gt;  <br>&lt;div class=&quot;grid-content bg-purple&quot;&gt;  <br>&lt;el-button  <br>icon=&quot;el-icon-plus&quot;  <br>size=&quot;medium&quot;  <br>type=&quot;success&quot;  <br>@click=&quot;addRole&quot;  <br>/&gt;  <br>&lt;/div&gt;  <br>&lt;/el-col&gt;  <br>&lt;/el-row&gt;  <br>&lt;/el-card&gt;  <br>&lt;!-- 用户信息--&gt;  <br>&lt;el-card shadow=&quot;hover&quot;&gt;  <br>&lt;el-table  <br>v-loading=&quot;loading&quot;  <br>:cell-style=&quot;&#123; &#x27;text-align&#x27;: &#x27;center&#x27; &#125;&quot;  <br>:data=&quot;tableData&quot;  <br>:default-sort=&quot;&#123; prop: &#x27;id&#x27;, order: &#x27;ascending&#x27; &#125;&quot;  <br>:header-cell-style=&quot;&#123; &#x27;text-align&#x27;: &#x27;center&#x27; &#125;&quot;  <br>border  <br>max-height=&quot;520&quot;  <br>style=&quot;width: 100%&quot;  <br>&gt;  <br>&lt;el-table-column label=&quot;#&quot; type=&quot;index&quot; width=&quot;80&quot;&gt;  <br>&lt;template slot-scope=&quot;scope&quot;&gt;  <br>&lt;!-- (pageNum-1)*pageSize+index+1--&gt;  <br>&#123;&#123;  <br>(searchModel.pageNum - 1) * searchModel.pageSize + scope.$index + 1  <br>&#125;&#125;  <br>&lt;/template&gt;  <br>&lt;/el-table-column&gt;  <br>&lt;el-table-column label=&quot;角色id&quot; prop=&quot;roleId&quot; sortable width=&quot;200&quot;/&gt;  <br>&lt;el-table-column  <br>class=&quot;name-wrapper&quot;  <br>label=&quot;角色名称&quot;  <br>prop=&quot;roleName&quot;  <br>width=&quot;260&quot;  <br>/&gt;  <br>&lt;el-table-column label=&quot;角色描述&quot; prop=&quot;roleDesc&quot; resizable width=&quot;280&quot;/&gt;  <br>&lt;el-table-column fixed=&quot;right&quot; label=&quot;操作&quot; width=&quot;160&quot;&gt;  <br>&lt;template slot-scope=&quot;scope&quot;&gt;  <br>&lt;el-button  <br>circle  <br>icon=&quot;el-icon-delete&quot;  <br>size=&quot;small&quot;  <br>type=&quot;danger&quot;  <br>@click.native.prevent=&quot;deleteRole(scope.$index, tableData)&quot;  <br>&gt;  <br>&lt;/el-button&gt;  <br>&lt;el-button  <br>circle  <br>icon=&quot;el-icon-edit&quot;  <br>size=&quot;small&quot;  <br>type=&quot;primary&quot;  <br>@click=&quot;editRole(scope.row)&quot;  <br>&gt;  <br>&lt;/el-button&gt;  <br>&lt;/template&gt;  <br>&lt;/el-table-column&gt;  <br>&lt;/el-table&gt;  <br>&lt;/el-card&gt;  <br>&lt;!-- 分页组件--&gt;  <br>&lt;el-footer align=&quot;center&quot;&gt;  <br>&lt;div class=&quot;block&quot;&gt;  <br>&lt;el-pagination  <br>:current-page=&quot;searchModel.currentPage&quot;  <br>:page-size=&quot;searchModel.pageNum&quot;  <br>:page-sizes=&quot;pageSizes&quot;  <br>:total=&quot;total&quot;  <br>layout=&quot;total, sizes, prev, pager, next, jumper&quot;  <br>@size-change=&quot;handleSizeChange&quot;  <br>@current-change=&quot;handleCurrentChange&quot;  <br>/&gt;  <br>&lt;/div&gt;  <br>&lt;/el-footer&gt;  <br>&lt;el-backtop target=&quot;.page-component__scroll .el-scrollbar__wrap&quot;&gt;&lt;/el-backtop&gt;  <br>&lt;/div&gt;  <br>&lt;/template&gt;  <br>  <br>&lt;script&gt;  <br>import roleApi from &#x27;@/api/roleManage&#x27;  <br>import current from &#x27;element-ui/packages/table/src/store/current&#x27;  <br>// import &#x27;@/styles/roleManage.css&#x27;  <br>  <br>export default &#123;  <br>name: &#x27;Role&#x27;,  <br>data() &#123;  <br>return &#123;  <br>searchModel: &#123;  <br>queryContent: &#x27;&#x27;,  <br>pageNum: 1,  <br>pageSize: 10  <br>&#125;,  <br>pageSizes: [10, 20, 50, 100],  <br>total: 0,  <br>tableData: [],  <br>loading: true,  <br>dialogFormVisible: false,  <br>dialogTitle: &#x27;添加角色&#x27;,  <br>roleForm: &#123;  <br>roleName: &#x27;&#x27;,  <br>roleDesc: &#x27;&#x27;  <br>&#125;,  <br>rules: &#123;  <br>roleName: [  <br>&#123; required: true, message: &#x27;请输入角色名&#x27;, trigger: &#x27;blur&#x27; &#125;,  <br>&#123;  <br>min: 1,  <br>max: 20,  <br>message: &#x27;长度在 1 到 20 个字符&#x27;,  <br>trigger: &#x27;blur&#x27;  <br>&#125;  <br>],  <br>roleDesc: [  <br>&#123; required: true, message: &#x27;请输入角色描述&#x27;, trigger: &#x27;blur&#x27; &#125;,  <br>&#123;  <br>min: 1,  <br>max: 30,  <br>message: &#x27;长度在 3 到 30 个字符&#x27;,  <br>trigger: &#x27;blur&#x27;  <br>&#125;  <br>]  <br>&#125;  <br>&#125;  <br>&#125;,  <br>computed: &#123;  <br>current() &#123;  <br>return current  <br>&#125;  <br>&#125;,  <br>created() &#123;  <br>this.getRoles()  <br>&#125;,  <br>methods: &#123;  <br>getRoles() &#123;  <br>roleApi  <br>.search(this.searchModel)  <br>.then((res) =&gt; &#123;  <br>// console.log(res)  <br>this.tableData = res.data.data.records  <br>this.total = res.data.data.total  <br>this.searchModel.pageNum = res.data.data.current  <br>this.loading = false  <br>// console.log(this.searchModel.queryContent, this.searchModel.queryItem, this.searchModel.pageSize, this.searchModel.pageNum)  <br>&#125;)  <br>.catch((error) =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125;,  <br>saveRole(formName) &#123;  <br>// alert(this.roleForm)  <br>// 提交则触发表单验证  <br>this.$refs[formName].validate((valid) =&gt; &#123;  <br>if (valid) &#123;  <br>console.log(this.roleForm)  <br>// 提交请求到后台  <br>roleApi  <br>.save(this.roleForm)  <br>.then((res) =&gt; &#123;  <br>// console.log(res)  <br>this.dialogFormVisible = false  <br>// 提交结果消息提示  <br>this.notify(res, this.message)  <br>// 刷新表格  <br>this.getRoles()  <br>&#125;)  <br>.catch((error) =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125; else &#123;  <br>console.log(&#x27;error submit!!&#x27;)  <br>return false  <br>&#125;  <br>&#125;)  <br>&#125;,  <br>clearForm() &#123;  <br>this.roleForm = &#123;&#125;  <br>this.$refs.roleForm.clearValidate()  <br>&#125;,  <br>handleSizeChange(pageSize) &#123;  <br>this.searchModel.pageSize = pageSize  <br>this.getRoles()  <br>&#125;,  <br>handleCurrentChange(pageNum) &#123;  <br>this.searchModel.pageNum = pageNum  <br>this.getRoles()  <br>&#125;,  <br>addRole() &#123;  <br>this.dialogTitle = &#x27;添加角色&#x27;  <br>this.dialogFormVisible = true  <br>this.message = &#x27;添加角色成功！&#x27;  <br>&#125;,  <br>deleteRole(index, rows) &#123;  <br>// console.log(rows[index])  <br>this.$confirm(`此操作将永久删除角色&lt;strong style=&quot;color: red&quot;&gt;$&#123;rows[index].roleName&#125;&lt;/strong&gt;, 是否继续?`, &#x27;提示&#x27;, &#123;  <br>confirmButtonText: &#x27;确定&#x27;,  <br>cancelButtonText: &#x27;取消&#x27;,  <br>type: &#x27;warning&#x27;,  <br>center: true,  <br>dangerouslyUseHTMLString: true  <br>&#125;).then(() =&gt; &#123;  <br>roleApi.del(rows[index].roleId).then((res) =&gt; &#123;  <br>// console.log(res)  <br>rows.splice(index, 1)  <br>this.$message(&#123;  <br>type: &#x27;success&#x27;,  <br>message: res.message  <br>&#125;)  <br>&#125;)  <br>&#125;).catch(() =&gt; &#123;  <br>this.$message(&#123;  <br>type: &#x27;info&#x27;,  <br>message: &#x27;已取消删除&#x27;  <br>&#125;)  <br>&#125;)  <br>&#125;,  <br>editRole(row) &#123;  <br>roleApi.getById(row.roleId).then(res =&gt; &#123;  <br>this.roleForm = res.data.data  <br>// console.log(this.userForm)  <br>this.dialogTitle = &#x27;编辑角色&#x27;  <br>this.dialogFormVisible = true  <br>this.message = &#x27;更新角色成功！&#x27;  <br>&#125;).catch(error =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125;,  <br>notify(res, message = null) &#123;  <br>if (res.code === 20000) &#123;  <br>// 提交结果消息提示  <br>this.$notify(&#123;  <br>title: &#x27;成功&#x27;,  <br>message: message != null ? message : res.message,  <br>type: &#x27;success&#x27;  <br>&#125;)  <br>&#125; else &#123;  <br>this.$notify.error(&#123;  <br>title: &#x27;失败&#x27;,  <br>message: res.message  <br>&#125;)  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;  <br>&lt;/script&gt;  <br>  <br>&lt;style scoped&gt;&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p><font color="#ff0000">roleManage.js:</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span>  <br>  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <br>search (searchModel) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;  <br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/role/search&#x27;</span>,  <br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,  <br><span class="hljs-attr">params</span>: &#123;  <br><span class="hljs-attr">queryContent</span>: searchModel.<span class="hljs-property">queryContent</span>,  <br><span class="hljs-attr">pageSize</span>: searchModel.<span class="hljs-property">pageSize</span>,  <br><span class="hljs-attr">pageNum</span>: searchModel.<span class="hljs-property">pageNum</span>  <br>&#125;  <br>&#125;)  <br>&#125;,  <br>save (roleForm) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;  <br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/role/save&#x27;</span>,  <br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,  <br><span class="hljs-attr">data</span>: roleForm  <br>&#125;)  <br>&#125;,  <br>del (id) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;  <br><span class="hljs-attr">url</span>: <span class="hljs-string">`/role/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,  <br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;delete&#x27;</span>  <br>&#125;)  <br>&#125;,  <br>getById (id) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;  <br><span class="hljs-attr">url</span>: <span class="hljs-string">`/role/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,  <br><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>  <br>&#125;)  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-后端"><a href="#3-后端" class="headerlink" title="3.后端"></a>3.后端</h2><p><font color="#f79646">RoleController:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.sys.controller;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.sys.entity.Role;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.service.IRoleService;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.utils.Result;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;  <br><span class="hljs-keyword">import</span> io.swagger.util.Json;  <br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * &lt;p&gt;  </span><br><span class="hljs-comment"> * 前端控制器  </span><br><span class="hljs-comment"> * &lt;/p&gt;  </span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> alleyf  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023-08-06  </span><br><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@Slf4j</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/role&quot;)</span>  <br><span class="hljs-meta">@Api(tags = &#123;&quot;角色&quot;&#125;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleController</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    IRoleService roleService;  <br>  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照角色名查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;roleName&quot;)</span> String roleName)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.queryByName(roleName);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(roleName + <span class="hljs-string">&quot;角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照角色名路径查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPName/&#123;roleName&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByPName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;roleName&quot;)</span> String roleName)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.queryByName(roleName);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(roleName + <span class="hljs-string">&quot;角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照id路径查询角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.getById(id);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(<span class="hljs-string">&quot;id为:&quot;</span> + id + <span class="hljs-string">&quot;的角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照页码查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPage&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> Long pageNum,  </span><br><span class="hljs-params">                              <span class="hljs-meta">@RequestParam(&quot;pageSize&quot;)</span> Long pageSize)</span> &#123;  <br>        IPage&lt;Role&gt; roleIPage = roleService.queryByPage(pageNum, pageSize, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-keyword">return</span> roleIPage != <span class="hljs-literal">null</span> ? Result.ok().data(<span class="hljs-string">&quot;page&quot;</span>, roleIPage) : Result.error().message(<span class="hljs-string">&quot;平台没有角色&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;添加或更新角色&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">addRole</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Role role)</span> &#123;  <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">saveStatus</span> <span class="hljs-operator">=</span> roleService.saveOrUpdate(role);  <br>        <span class="hljs-keyword">return</span> saveStatus ? Result.ok().message(<span class="hljs-string">&quot;添加或更新角色成功&quot;</span>) : Result.error().message(<span class="hljs-string">&quot;添加或更新角色失败&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;删除角色&quot;)</span>  <br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delRole</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;  <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">saveStatus</span> <span class="hljs-operator">=</span> roleService.removeById(id);  <br>        <span class="hljs-keyword">return</span> saveStatus ? Result.ok().message(<span class="hljs-string">&quot;删除角色成功&quot;</span>) : Result.error().message(<span class="hljs-string">&quot;删除角色失败&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;搜索角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;queryContent&quot;, required = false)</span> String queryContent,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pageSize&quot;, defaultValue = &quot;10&quot;)</span> Long pageSize,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pageNum&quot;, defaultValue = &quot;1&quot;)</span> Long pageNum)</span> &#123;  <br>        IPage&lt;Role&gt; roles = roleService.search(queryContent, pageSize, pageNum);  <br>        <span class="hljs-keyword">if</span> (roles != <span class="hljs-literal">null</span>) &#123;  <br>            log.debug(<span class="hljs-string">&quot;roles: &quot;</span> + roles);  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, roles);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(<span class="hljs-string">&quot;平台没有该角色&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="角色权限设置"><a href="#角色权限设置" class="headerlink" title="角色权限设置"></a>角色权限设置</h2><h3 id="1-效果预览"><a href="#1-效果预览" class="headerlink" title="1.效果预览"></a>1.效果预览</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031214347.png" alt="image.png"></p><h3 id="2-前端-1"><a href="#2-前端-1" class="headerlink" title="2.前端"></a>2.前端</h3><p><font color="#f79646">role.vue:</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;  <br>&lt;div&gt;  <br>&lt;!-- 添加角色--&gt;  <br>&lt;el-dialog  <br>:title=&quot;dialogTitle&quot;  <br>:visible.sync=&quot;dialogFormVisible&quot;  <br>center  <br>width=&quot;32%&quot;  <br>@close=&quot;clearForm&quot;  <br>&gt;  <br>&lt;el-form  <br>ref=&quot;roleForm&quot;  <br>:model=&quot;roleForm&quot;  <br>:rules=&quot;rules&quot;  <br>show-message  <br>status-icon  <br>&gt;  <br>&lt;el-form-item label=&quot;角色名&quot; label-width=&quot;80px&quot; prop=&quot;roleName&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;roleForm.roleName&quot;  <br>clearable  <br>prefix-icon=&quot;el-icon-user&quot;  <br>/&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;el-form-item label=&quot;角色描述&quot; label-width=&quot;80px&quot; prop=&quot;roleDesc&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;roleForm.roleDesc&quot;  <br>clearable  <br>prefix-icon=&quot;el-icon-key&quot;  <br>/&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;el-form-item label=&quot;权限设置&quot; label-width=&quot;80px&quot; prop=&quot;menuIdList&quot;&gt;  <br>&lt;el-tree  <br>ref=&quot;menuRef&quot;  <br>:data=&quot;menuList&quot;  <br>:props=&quot;menuProps&quot;  <br>default-expand-all  <br>node-key=&quot;menuId&quot;  <br>show-checkbox  <br>&gt;  <br>&lt;/el-tree&gt;  <br>&lt;/el-form-item&gt;  <br>&lt;/el-form&gt;  <br>&lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;  <br>&lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;  <br>&lt;el-button type=&quot;primary&quot; @click=&quot;saveRole(&#x27;roleForm&#x27;)&quot;&gt;确 定  <br>&lt;/el-button&gt;  <br>&lt;/div&gt;  <br>&lt;/el-dialog&gt;  <br>&lt;!-- 角色检索--&gt;  <br>&lt;el-card id=&quot;search&quot; shadow=&quot;hover&quot;&gt;  <br>&lt;el-row :gutter=&quot;5&quot;&gt;  <br>&lt;el-col :span=&quot;18&quot;&gt;  <br>&lt;div class=&quot;grid-content bg-purple&quot;&gt;  <br>&lt;el-input  <br>v-model=&quot;searchModel.queryContent&quot;  <br>clearable  <br>placeholder=&quot;请输入用户名&quot;  <br>suffix-icon=&quot;el-icon-user&quot;  <br>&gt;  <br>&lt;el-button  <br>slot=&quot;append&quot;  <br>icon=&quot;el-icon-search&quot;  <br>type=&quot;success&quot;  <br>@click=&quot;getRoles&quot;  <br>/&gt;  <br>&lt;/el-input&gt;  <br>&lt;/div&gt;  <br>&lt;/el-col&gt;  <br>&lt;el-col :span=&quot;6&quot; align=&quot;right&quot;&gt;  <br>&lt;div class=&quot;grid-content bg-purple&quot;&gt;  <br>&lt;el-button  <br>icon=&quot;el-icon-plus&quot;  <br>size=&quot;medium&quot;  <br>type=&quot;success&quot;  <br>@click=&quot;addRole&quot;  <br>/&gt;  <br>&lt;/div&gt;  <br>&lt;/el-col&gt;  <br>&lt;/el-row&gt;  <br>&lt;/el-card&gt;  <br>&lt;!-- 用户信息--&gt;  <br>&lt;el-card shadow=&quot;hover&quot;&gt;  <br>&lt;el-table  <br>v-loading=&quot;loading&quot;  <br>:cell-style=&quot;&#123; &#x27;text-align&#x27;: &#x27;center&#x27; &#125;&quot;  <br>:data=&quot;tableData&quot;  <br>:default-sort=&quot;&#123; prop: &#x27;id&#x27;, order: &#x27;ascending&#x27; &#125;&quot;  <br>:header-cell-style=&quot;&#123; &#x27;text-align&#x27;: &#x27;center&#x27; &#125;&quot;  <br>border  <br>max-height=&quot;520&quot;  <br>style=&quot;width: 100%&quot;  <br>&gt;  <br>&lt;el-table-column label=&quot;#&quot; type=&quot;index&quot; width=&quot;80&quot;&gt;  <br>&lt;template slot-scope=&quot;scope&quot;&gt;  <br>&lt;!-- (pageNum-1)*pageSize+index+1--&gt;  <br>&#123;&#123;  <br>(searchModel.pageNum - 1) * searchModel.pageSize + scope.$index + 1  <br>&#125;&#125;  <br>&lt;/template&gt;  <br>&lt;/el-table-column&gt;  <br>&lt;el-table-column label=&quot;角色id&quot; prop=&quot;roleId&quot; sortable width=&quot;200&quot;/&gt;  <br>&lt;el-table-column  <br>class=&quot;name-wrapper&quot;  <br>label=&quot;角色名称&quot;  <br>prop=&quot;roleName&quot;  <br>width=&quot;260&quot;  <br>/&gt;  <br>&lt;el-table-column label=&quot;角色描述&quot; prop=&quot;roleDesc&quot; resizable width=&quot;280&quot;/&gt;  <br>&lt;el-table-column fixed=&quot;right&quot; label=&quot;操作&quot; width=&quot;160&quot;&gt;  <br>&lt;template slot-scope=&quot;scope&quot;&gt;  <br>&lt;el-button  <br>circle  <br>icon=&quot;el-icon-delete&quot;  <br>size=&quot;small&quot;  <br>type=&quot;danger&quot;  <br>@click.native.prevent=&quot;deleteRole(scope.$index, tableData)&quot;  <br>&gt;  <br>&lt;/el-button&gt;  <br>&lt;el-button  <br>circle  <br>icon=&quot;el-icon-edit&quot;  <br>size=&quot;small&quot;  <br>type=&quot;primary&quot;  <br>@click=&quot;editRole(scope.row)&quot;  <br>&gt;  <br>&lt;/el-button&gt;  <br>&lt;/template&gt;  <br>&lt;/el-table-column&gt;  <br>&lt;/el-table&gt;  <br>&lt;/el-card&gt;  <br>&lt;!-- 分页组件--&gt;  <br>&lt;el-footer align=&quot;center&quot;&gt;  <br>&lt;div class=&quot;block&quot;&gt;  <br>&lt;el-pagination  <br>:current-page=&quot;searchModel.currentPage&quot;  <br>:page-size=&quot;searchModel.pageNum&quot;  <br>:page-sizes=&quot;pageSizes&quot;  <br>:total=&quot;total&quot;  <br>layout=&quot;total, sizes, prev, pager, next, jumper&quot;  <br>@size-change=&quot;handleSizeChange&quot;  <br>@current-change=&quot;handleCurrentChange&quot;  <br>/&gt;  <br>&lt;/div&gt;  <br>&lt;/el-footer&gt;  <br>&lt;el-backtop target=&quot;.page-component__scroll .el-scrollbar__wrap&quot;&gt;&lt;/el-backtop&gt;  <br>&lt;/div&gt;  <br>&lt;/template&gt;  <br>  <br>&lt;script&gt;  <br>import roleApi from &#x27;@/api/roleManage&#x27;  <br>import menuApi from &#x27;@/api/menuManage&#x27;  <br>import current from &#x27;element-ui/packages/table/src/store/current&#x27;  <br>// import &#x27;@/styles/roleManage.css&#x27;  <br>  <br>export default &#123;  <br>name: &#x27;Role&#x27;,  <br>data() &#123;  <br>return &#123;  <br>searchModel: &#123;  <br>queryContent: &#x27;&#x27;,  <br>pageNum: 1,  <br>pageSize: 10  <br>&#125;,  <br>pageSizes: [10, 20, 50, 100],  <br>total: 0,  <br>tableData: [],  <br>loading: true,  <br>dialogFormVisible: false,  <br>dialogTitle: &#x27;添加角色&#x27;,  <br>roleForm: &#123;  <br>roleName: &#x27;&#x27;,  <br>roleDesc: &#x27;&#x27;  <br>&#125;,  <br>rules: &#123;  <br>roleName: [  <br>&#123; required: true, message: &#x27;请输入角色名&#x27;, trigger: &#x27;blur&#x27; &#125;,  <br>&#123;  <br>min: 1,  <br>max: 20,  <br>message: &#x27;长度在 1 到 20 个字符&#x27;,  <br>trigger: &#x27;blur&#x27;  <br>&#125;  <br>],  <br>roleDesc: [  <br>&#123; required: true, message: &#x27;请输入角色描述&#x27;, trigger: &#x27;blur&#x27; &#125;,  <br>&#123;  <br>min: 1,  <br>max: 30,  <br>message: &#x27;长度在 3 到 30 个字符&#x27;,  <br>trigger: &#x27;blur&#x27;  <br>&#125;  <br>]  <br>&#125;,  <br>menuProps: &#123;  <br>label: &#x27;title&#x27;,  <br>children: &#x27;children&#x27;  <br>&#125;,  <br>menuList: []  <br>&#125;  <br>&#125;,  <br>computed: &#123;  <br>current() &#123;  <br>return current  <br>&#125;  <br>&#125;,  <br>created() &#123;  <br>this.getRoles()  <br>this.getAllMenu()  <br>&#125;,  <br>methods: &#123;  <br>getAllMenu() &#123;  <br>menuApi.getAllMenu().then(res =&gt; &#123;  <br>this.menuList = res.data.data  <br>&#125;)  <br>&#125;,  <br>getRoles() &#123;  <br>roleApi  <br>.search(this.searchModel)  <br>.then((res) =&gt; &#123;  <br>// console.log(res)  <br>this.tableData = res.data.data.records  <br>this.total = res.data.data.total  <br>this.searchModel.pageNum = res.data.data.current  <br>this.loading = false  <br>// console.log(this.searchModel.queryContent, this.searchModel.queryItem, this.searchModel.pageSize, this.searchModel.pageNum)  <br>&#125;)  <br>.catch((error) =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125;,  <br>saveRole(formName) &#123;  <br>// alert(this.roleForm)  <br>// 提交则触发表单验证  <br>this.$refs[formName].validate((valid) =&gt; &#123;  <br>if (valid) &#123;  <br>const checkedKeys = this.$refs.menuRef.getCheckedKeys()  <br>const halfcheckedKeys = this.$refs.menuRef.getHalfCheckedKeys()  <br>this.roleForm.menuIdList = checkedKeys.concat(halfcheckedKeys)  <br>// console.log(this.roleForm.menuIdList)  <br>// console.log(this.roleForm)  <br>// 提交请求到后台  <br>roleApi  <br>.save(this.roleForm)  <br>.then((res) =&gt; &#123;  <br>// console.log(res)  <br>this.dialogFormVisible = false  <br>// 提交结果消息提示  <br>this.notify(res, this.message)  <br>// 刷新表格  <br>this.getRoles()  <br>&#125;)  <br>.catch((error) =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125; else &#123;  <br>console.log(&#x27;error submit!!&#x27;)  <br>return false  <br>&#125;  <br>&#125;)  <br>&#125;,  <br>clearForm() &#123;  <br>this.roleForm = &#123;&#125;  <br>this.$refs.roleForm.clearValidate()  <br>this.$refs.menuRef.setCheckedKeys([])  <br>&#125;,  <br>handleSizeChange(pageSize) &#123;  <br>this.searchModel.pageSize = pageSize  <br>this.getRoles()  <br>&#125;,  <br>handleCurrentChange(pageNum) &#123;  <br>this.searchModel.pageNum = pageNum  <br>this.getRoles()  <br>&#125;,  <br>addRole() &#123;  <br>this.dialogTitle = &#x27;添加角色&#x27;  <br>this.dialogFormVisible = true  <br>this.message = &#x27;添加角色成功！&#x27;  <br>this.getAllMenu()  <br>&#125;,  <br>deleteRole(index, rows) &#123;  <br>// console.log(rows[index])  <br>this.$confirm(`此操作将永久删除角色&lt;strong style=&quot;color: red&quot;&gt;$&#123;rows[index].roleName&#125;&lt;/strong&gt;, 是否继续?`, &#x27;提示&#x27;, &#123;  <br>confirmButtonText: &#x27;确定&#x27;,  <br>cancelButtonText: &#x27;取消&#x27;,  <br>type: &#x27;warning&#x27;,  <br>center: true,  <br>dangerouslyUseHTMLString: true  <br>&#125;).then(() =&gt; &#123;  <br>roleApi.del(rows[index].roleId).then((res) =&gt; &#123;  <br>// console.log(res)  <br>rows.splice(index, 1)  <br>this.$message(&#123;  <br>type: &#x27;success&#x27;,  <br>message: res.message  <br>&#125;)  <br>&#125;)  <br>&#125;).catch(() =&gt; &#123;  <br>this.$message(&#123;  <br>type: &#x27;info&#x27;,  <br>message: &#x27;已取消删除&#x27;  <br>&#125;)  <br>&#125;)  <br>&#125;,  <br>editRole(row) &#123;  <br>roleApi.getById(row.roleId).then(res =&gt; &#123;  <br>this.roleForm = res.data.data  <br>console.log(res.data.data.menuIdList)  <br>this.dialogTitle = &#x27;编辑角色&#x27;  <br>this.dialogFormVisible = true  <br>this.$refs.menuRef.setCheckedKeys(res.data.data.menuIdList)  <br>this.message = &#x27;更新角色成功！&#x27;  <br>&#125;).catch(error =&gt; &#123;  <br>console.log(error)  <br>&#125;)  <br>&#125;,  <br>notify(res, message = null) &#123;  <br>if (res.code === 20000) &#123;  <br>// 提交结果消息提示  <br>this.$notify(&#123;  <br>title: &#x27;成功&#x27;,  <br>message: message != null ? message : res.message,  <br>type: &#x27;success&#x27;  <br>&#125;)  <br>&#125; else &#123;  <br>this.$notify.error(&#123;  <br>title: &#x27;失败&#x27;,  <br>message: res.message  <br>&#125;)  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;  <br>&lt;/script&gt;  <br>  <br>&lt;style scoped&gt;&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h3 id="3-后端-1"><a href="#3-后端-1" class="headerlink" title="3.后端"></a>3.后端</h3><p><font color="#ff0000">RoleController.java:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.sys.controller;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.sys.entity.Role;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.service.IRoleService;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.utils.Result;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;  <br><span class="hljs-keyword">import</span> io.swagger.util.Json;  <br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * &lt;p&gt;  </span><br><span class="hljs-comment"> * 前端控制器  </span><br><span class="hljs-comment"> * &lt;/p&gt;  </span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> alleyf  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023-08-06  </span><br><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@Slf4j</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/role&quot;)</span>  <br><span class="hljs-meta">@Api(tags = &#123;&quot;角色&quot;&#125;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoleController</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    IRoleService roleService;  <br>  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照角色名查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;roleName&quot;)</span> String roleName)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.queryByName(roleName);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(roleName + <span class="hljs-string">&quot;角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照角色名路径查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPName/&#123;roleName&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByPName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;roleName&quot;)</span> String roleName)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.queryByName(roleName);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(roleName + <span class="hljs-string">&quot;角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照id路径查询角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;  <br>        <span class="hljs-type">Role</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> roleService.getRoleById(id);  <br>        <span class="hljs-keyword">if</span> (role != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, role);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(<span class="hljs-string">&quot;id为:&quot;</span> + id + <span class="hljs-string">&quot;的角色不存在&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照页码查询角色(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPage&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> Long pageNum,  </span><br><span class="hljs-params">                              <span class="hljs-meta">@RequestParam(&quot;pageSize&quot;)</span> Long pageSize)</span> &#123;  <br>        IPage&lt;Role&gt; roleIPage = roleService.queryByPage(pageNum, pageSize, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-keyword">return</span> roleIPage != <span class="hljs-literal">null</span> ? Result.ok().data(<span class="hljs-string">&quot;page&quot;</span>, roleIPage) : Result.error().message(<span class="hljs-string">&quot;平台没有角色&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;添加或更新角色&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">addRole</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Role role)</span> &#123;  <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">saveStatus</span> <span class="hljs-operator">=</span> roleService.addOrUpdate(role);  <br><span class="hljs-comment">//        boolean saveStatus = roleService.saveOrUpdate(role);  </span><br>        <span class="hljs-keyword">return</span> saveStatus ? Result.ok().message(<span class="hljs-string">&quot;添加或更新角色成功&quot;</span>) : Result.error().message(<span class="hljs-string">&quot;添加或更新角色失败&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;删除角色&quot;)</span>  <br>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">delRole</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;  <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">saveStatus</span> <span class="hljs-operator">=</span> roleService.delete(id);  <br>        <span class="hljs-keyword">return</span> saveStatus ? Result.ok().message(<span class="hljs-string">&quot;删除角色成功&quot;</span>) : Result.error().message(<span class="hljs-string">&quot;删除角色失败&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;搜索角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/search&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;queryContent&quot;, required = false)</span> String queryContent,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pageSize&quot;, defaultValue = &quot;10&quot;)</span> Long pageSize,  </span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;pageNum&quot;, defaultValue = &quot;1&quot;)</span> Long pageNum)</span> &#123;  <br>        IPage&lt;Role&gt; roles = roleService.search(queryContent, pageSize, pageNum);  <br>        <span class="hljs-keyword">if</span> (roles != <span class="hljs-literal">null</span>) &#123;  <br>            log.debug(<span class="hljs-string">&quot;roles: &quot;</span> + roles);  <br>            <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, roles);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">return</span> Result.error().message(<span class="hljs-string">&quot;平台没有该角色&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;获取所有角色&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/all&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;  <br>        List&lt;Role&gt; roles = roleService.list();  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;data&quot;</span>, roles);  <br>    &#125;  <br>  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-数据库"><a href="#4-数据库" class="headerlink" title="4.数据库"></a>4.数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> x_menu;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span>‘x_menu’（<span class="hljs-string">&#x27;menu_id&#x27;</span>，‘component<span class="hljs-string">&#x27;，‘path&#x27;</span>，‘redirect<span class="hljs-string">&#x27;，‘name&#x27;</span>，‘title<span class="hljs-string">&#x27;，‘icon&#x27;</span>，‘parent_id<span class="hljs-string">&#x27;，‘is_leaf&#x27;</span>,<br>&quot;hidden&quot;）<span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;1&quot;,&#x27;</span>Layout<span class="hljs-string">&#x27;,&quot;/sys&#x27;</span>,<span class="hljs-string">&#x27;/sys/user&#x27;</span>,<span class="hljs-string">&#x27;sysManage&#x27;</span>,系统管理<span class="hljs-string">&#x27;,&#x27;</span>userManage<span class="hljs-string">&#x27;,&#x27;</span>o<span class="hljs-string">&#x27;,&#x27;</span>N<span class="hljs-string">&#x27;,&#x27;</span>o<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">insert into‘x_menu&#x27;</span>（menu_id<span class="hljs-string">&#x27;，‘component&#x27;</span>，‘path<span class="hljs-string">&#x27;，‘redirect&#x27;</span>，‘name<span class="hljs-string">&#x27;，‘title&#x27;</span>，‘icon<span class="hljs-string">&#x27;，‘parent_id&#x27;</span>，‘is_leaf<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">&quot;hidden&quot;）values(&#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;,&#x27;</span>sys<span class="hljs-operator">/</span><span class="hljs-keyword">user</span><span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-keyword">user</span><span class="hljs-string">&#x27;,NULL,&#x27;</span>userList<span class="hljs-string">&#x27;,用户列表&#x27;</span>,<span class="hljs-string">&#x27;user&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;Y&quot;,&#x27;</span>o<span class="hljs-string">&#x27;);</span><br><span class="hljs-string">insert into‘x_menu（&#x27;</span>menu_id<span class="hljs-string">&#x27;，‘component&#x27;</span>，‘path<span class="hljs-string">&#x27;，‘redirect&#x27;</span>，‘name<span class="hljs-string">&#x27;，‘title&#x27;</span>，‘icon<span class="hljs-string">&#x27;，‘parent_id&#x27;</span>，‘is_leaf<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">‘hidden&#x27;</span>）<span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;sys/role&#x27;</span>,<span class="hljs-string">&#x27;role&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;roleList&#x27;</span>，<span class="hljs-string">&#x27;角色列表&#x27;</span>,<span class="hljs-string">&#x27;roleManage&#x27;</span>, ,<span class="hljs-string">&#x27;Y&#x27;&#x27;o&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span>‘x_menu’（menu_id<span class="hljs-string">&#x27;，‘component&#x27;</span>，‘path<span class="hljs-string">&#x27;，‘redirect&#x27;</span>，‘name<span class="hljs-string">&#x27;，‘title&#x27;</span>, ，icon<span class="hljs-string">&#x27;，‘parent_id&#x27;</span>，‘is_leaf<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">&quot;hidden&#x27;</span>）<span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;Layout&#x27;</span>，<span class="hljs-string">&#x27;/test&#x27;</span>,<span class="hljs-string">&#x27;/test/test1&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;功能测试&#x27;</span>,<span class="hljs-string">&#x27;form&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>  <span class="hljs-number">0</span><span class="hljs-string">&#x27;）;</span><br><span class="hljs-string">insert into‘x_menu’（menu_id&#x27;</span>，‘component<span class="hljs-string">&#x27;，‘path&#x27;</span>，‘redirect<span class="hljs-string">&#x27;，‘name&#x27;</span> <span class="hljs-string">&#x27;title&#x27;</span> &quot;icon&#x27;，‘parent_id&#x27;，‘is_leaf&#x27;,<br>&quot;hidden&quot;）values(&quot;<span class="hljs-number">5</span><span class="hljs-string">&#x27;,&#x27;</span>test<span class="hljs-operator">/</span>test1<span class="hljs-string">&#x27;,&#x27;</span>test1<span class="hljs-string">&#x27;,&quot;&quot;,&#x27;</span>test1<span class="hljs-string">&#x27;,&#x27;</span>测试点<span class="hljs-operator">-</span><span class="hljs-string">&#x27;,&#x27;</span>form<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">insert into‘x_menu’（&#x27;</span>menu_id<span class="hljs-string">&#x27;，‘component&#x27;</span>，‘path<span class="hljs-string">&#x27;，‘redirect&#x27;</span>，‘name&quot;, &#x27;title&#x27; &#x27;icon&#x27;，‘parent_id&#x27;，is_leaf&#x27;,<br>‘hidden&#x27;)values(&#x27;6&#x27;,&#x27;test/test2&#x27;,&#x27;test2&#x27;, ，test2&#x27;，测试点二&quot;，<span class="hljs-string">&#x27;form&#x27;</span>   <span class="hljs-number">0</span><span class="hljs-string">&#x27;）;</span><br><span class="hljs-string">insert into‘x_menu（menu_id&#x27;</span>，‘component<span class="hljs-string">&#x27;，path&#x27;</span>，‘redirect<span class="hljs-string">&#x27;，‘name&#x27;</span>, ，‘title<span class="hljs-string">&#x27;，icon&#x27;</span>，parent_id，‘is_leaf,<br>hidden<span class="hljs-string">&#x27;)values(&#x27;</span><span class="hljs-number">7</span><span class="hljs-string">&#x27;,&#x27;</span>test<span class="hljs-operator">/</span>test3<span class="hljs-string">&#x27;,&#x27;</span>test3<span class="hljs-string">&#x27;, ,&#x27;</span>test3&quot;,&quot;测试点三<span class="hljs-string">&#x27;,&#x27;</span>form<span class="hljs-string">&#x27;,&#x27;</span><span class="hljs-number">4</span><span class="hljs-string">&#x27;&quot;,&#x27;</span>Y&quot;,o&#x27;);<br><br></code></pre></td></tr></table></figure><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><h2 id="1-前端"><a href="#1-前端" class="headerlink" title="1.前端"></a>1.前端</h2><h3 id="1-修改原路由配置"><a href="#1-修改原路由配置" class="headerlink" title="1.修改原路由配置"></a>1.修改原路由配置</h3><p>src/router/index.js，保留基础路由，其它的删掉或注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>  <br>  <br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)  <br>  <br><span class="hljs-comment">/* Layout */</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/layout&#x27;</span>  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment">* Note: sub-menu only appear when route children.length &gt;= 1  </span><br><span class="hljs-comment">* Detail see: https://panjiachen.github.io/vue-element-admin-site/guide/essentials/router-and-nav.html  </span><br><span class="hljs-comment">*  </span><br><span class="hljs-comment">* hidden: true if set true, item will not show in the sidebar(default is false)  </span><br><span class="hljs-comment">* alwaysShow: true if set true, will always show the root menu  </span><br><span class="hljs-comment">* if not set alwaysShow, when item has more than one children route,  </span><br><span class="hljs-comment">* it will becomes nested mode, otherwise not show the root menu  </span><br><span class="hljs-comment">* redirect: noRedirect if set noRedirect will no redirect in the breadcrumb  </span><br><span class="hljs-comment">* name:&#x27;router-name&#x27; the name is used by &lt;keep-alive&gt; (must set!!!)  </span><br><span class="hljs-comment">* meta : &#123;  </span><br><span class="hljs-comment">roles: [&#x27;admin&#x27;,&#x27;editor&#x27;] control the page roles (you can set multiple roles)  </span><br><span class="hljs-comment">title: &#x27;title&#x27; the name show in sidebar and breadcrumb (recommend set)  </span><br><span class="hljs-comment">icon: &#x27;svg-name&#x27;/&#x27;el-icon-x&#x27; the icon show in the sidebar  </span><br><span class="hljs-comment">breadcrumb: false if set false, the item will hidden in breadcrumb(default is true)  </span><br><span class="hljs-comment">activeMenu: &#x27;/example/list&#x27; if set path, the sidebar will highlight the path you set  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">*/</span>  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment">* constantRoutes  </span><br><span class="hljs-comment">* a base page that does not have permission requirements  </span><br><span class="hljs-comment">* all roles can be accessed  </span><br><span class="hljs-comment">*/</span>  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> constantRoutes = [  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/redirect&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>,  <br><span class="hljs-attr">children</span>: [  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/redirect/:path(.*)&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/redirect/index&#x27;</span>)  <br>&#125;  <br>]  <br>&#125;,  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/login/index&#x27;</span>),  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>  <br>&#125;,  <br>  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/404&#x27;</span>),  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>  <br>&#125;,  <br>  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,  <br><span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,  <br><span class="hljs-attr">children</span>: [&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;dashboard&#x27;</span>,  <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Dashboard&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;@/views/dashboard/index&#x27;</span>),  <br><span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;首 页&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;dashboard&#x27;</span>, <span class="hljs-attr">affix</span>: <span class="hljs-literal">true</span> &#125;  <br>&#125;]  <br>&#125;,  <br>  <br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;/sys&#x27;,  </span><br><span class="hljs-comment">// component: Layout,  </span><br><span class="hljs-comment">// redirect: &#x27;/sys/user&#x27;,  </span><br><span class="hljs-comment">// name: &#x27;Sys&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;系统管理&#x27;, icon: &#x27;el-icon-s-help&#x27; &#125;,  </span><br><span class="hljs-comment">// children: [  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;user&#x27;,  </span><br><span class="hljs-comment">// name: &#x27;User&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/sys/user&#x27;),  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;系统用户&#x27;, icon: &#x27;user&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;role&#x27;,  </span><br><span class="hljs-comment">// name: &#x27;Role&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/sys/role&#x27;),  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;系统身份&#x27;, icon: &#x27;tree&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// ]  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;/test&#x27;,  </span><br><span class="hljs-comment">// component: Layout,  </span><br><span class="hljs-comment">// redirect: &#x27;/test/test1&#x27;,  </span><br><span class="hljs-comment">// name: &#x27;Test&#x27;,  </span><br><span class="hljs-comment">// meta: &#123;  </span><br><span class="hljs-comment">// title: &#x27;新品尝鲜&#x27;,  </span><br><span class="hljs-comment">// icon: &#x27;nested&#x27;  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// children: [  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;test1&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/test/test1&#x27;),  </span><br><span class="hljs-comment">// name: &#x27;Test1&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;功能1&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;test2&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/test/test2&#x27;),  </span><br><span class="hljs-comment">// name: &#x27;Test2&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;功能2&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;test3&#x27;,  </span><br><span class="hljs-comment">// component: () =&gt; import(&#x27;@/views/test/test3&#x27;),  </span><br><span class="hljs-comment">// name: &#x27;Test3&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;功能3&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// ]  </span><br><span class="hljs-comment">// &#125;,  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;external-link&#x27;,  </span><br><span class="hljs-comment">// component: Layout,  </span><br><span class="hljs-comment">// children: [  </span><br><span class="hljs-comment">// &#123;  </span><br><span class="hljs-comment">// path: &#x27;https://panjiachen.github.io/vue-element-admin-site/#/&#x27;,  </span><br><span class="hljs-comment">// meta: &#123; title: &#x27;External Link&#x27;, icon: &#x27;link&#x27; &#125;  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// ]  </span><br><span class="hljs-comment">// &#125;,  </span><br>  <br><span class="hljs-comment">// 404 page must be placed at the end !!!  </span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>, <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span> &#125;  <br>]  <br>  <br><span class="hljs-keyword">const</span> <span class="hljs-title function_">createRouter</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;  <br><span class="hljs-comment">// mode: &#x27;history&#x27;, // require service support  </span><br><span class="hljs-attr">scrollBehavior</span>: <span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;),  <br><span class="hljs-attr">routes</span>: constantRoutes  <br>&#125;)  <br>  <br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>()  <br>  <br><span class="hljs-comment">// Detail see: https://github.com/vuejs/vue-router/issues/1234#issuecomment-357941465  </span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">resetRouter</span>(<span class="hljs-params"></span>) &#123;  <br><span class="hljs-keyword">const</span> newRouter = <span class="hljs-title function_">createRouter</span>()  <br>router.<span class="hljs-property">matcher</span> = newRouter.<span class="hljs-property">matcher</span> <span class="hljs-comment">// reset router  </span><br>&#125;  <br>  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><h3 id="2-获取菜单数据并保存到Vuex"><a href="#2-获取菜单数据并保存到Vuex" class="headerlink" title="2.获取菜单数据并保存到Vuex"></a>2.获取菜单数据并保存到Vuex</h3><p>src/store/modules/user.js<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031453650.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031453642.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031453615.png" alt="image.png"><br>src/store/getters.js<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202310031454406.png" alt="image.png"></p><h3 id="3-路由转换"><a href="#3-路由转换" class="headerlink" title="3.路由转换"></a>3.路由转换</h3><p>修改src目录下的permiss.js<br>（1）导入Layout</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> layout <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/layout&#x27;</span><br></code></pre></td></tr></table></figure><p>（2）添加动态路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//路由转换  </span><br><span class="hljs-keyword">let</span> myRoutes = <span class="hljs-title function_">myFilterAsyncRoutes</span>(store.<span class="hljs-property">getters</span>.<span class="hljs-property">menuList</span>)  <br><span class="hljs-comment">// 404  </span><br>myRoutes.<span class="hljs-title function_">push</span>(&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>,  <br><span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>  <br>&#125;)  <br><span class="hljs-comment">//动态添加路由  </span><br>router.<span class="hljs-title function_">addRoutes</span>(myRoutes)  <br><span class="hljs-comment">//存至全局变量  </span><br><span class="hljs-variable language_">global</span>.<span class="hljs-property">myRoutes</span> = myRoutes  <br>  <br><span class="hljs-title function_">next</span>(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<span class="hljs-comment">// 防止刷新后页面空白</span><br></code></pre></td></tr></table></figure><p>完整部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>  <br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span>  <br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">NProgress</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span> <span class="hljs-comment">// progress bar  </span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;nprogress/nprogress.css&#x27;</span> <span class="hljs-comment">// progress bar style  </span><br><span class="hljs-keyword">import</span> &#123; getToken &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span> <span class="hljs-comment">// get token from cookie  </span><br><span class="hljs-keyword">import</span> getPageTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/get-page-title&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Layout</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/layout&#x27;</span>  <br>  <br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">configure</span>(&#123; <span class="hljs-attr">showSpinner</span>: <span class="hljs-literal">false</span> &#125;) <span class="hljs-comment">// NProgress Configuration  </span><br>  <br><span class="hljs-keyword">const</span> whiteList = [<span class="hljs-string">&#x27;/login&#x27;</span>] <span class="hljs-comment">// no redirect whitelist  </span><br>  <br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-title function_">async</span>(to, <span class="hljs-keyword">from</span>, next) =&gt; &#123;  <br><span class="hljs-comment">// start progress bar  </span><br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">start</span>()  <br>  <br><span class="hljs-comment">// set page title  </span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-title function_">getPageTitle</span>(to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span>)  <br>  <br><span class="hljs-comment">// determine whether the user has logged in  </span><br><span class="hljs-keyword">const</span> hasToken = <span class="hljs-title function_">getToken</span>()  <br>  <br><span class="hljs-keyword">if</span> (hasToken) &#123;  <br><span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;  <br><span class="hljs-comment">// if is logged in, redirect to the home page  </span><br><span class="hljs-title function_">next</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span> &#125;)  <br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-keyword">const</span> hasGetUserInfo = store.<span class="hljs-property">getters</span>.<span class="hljs-property">name</span>  <br><span class="hljs-keyword">if</span> (hasGetUserInfo) &#123;  <br><span class="hljs-title function_">next</span>()  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-keyword">try</span> &#123;  <br><span class="hljs-comment">// get user info  </span><br><span class="hljs-keyword">await</span> store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/getInfo&#x27;</span>)  <br><span class="hljs-comment">// console.log(store.getters.menuList)  </span><br><span class="hljs-comment">// 路由转换  </span><br><span class="hljs-keyword">const</span> myRoutes = <span class="hljs-title function_">myFilterAsyncRoutes</span>(store.<span class="hljs-property">getters</span>.<span class="hljs-property">menuList</span>)  <br><span class="hljs-comment">// 404  </span><br>myRoutes.<span class="hljs-title function_">push</span>(&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>,  <br><span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,  <br><span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>  <br>&#125;)  <br><span class="hljs-comment">// 动态添加路由  </span><br>router.<span class="hljs-title function_">addRoutes</span>(myRoutes)  <br><span class="hljs-comment">// 存至全局变量  </span><br><span class="hljs-variable language_">global</span>.<span class="hljs-property">myRoutes</span> = myRoutes  <br>  <br><span class="hljs-title function_">next</span>(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<span class="hljs-comment">// 防止刷新后页面空白  </span><br>  <br><span class="hljs-comment">// next()  </span><br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;  <br><span class="hljs-comment">// remove token and go to login page to re-login  </span><br><span class="hljs-keyword">await</span> store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/resetToken&#x27;</span>)  <br><span class="hljs-comment">// Message.error(error || &#x27;Has Error&#x27;)  </span><br><span class="hljs-title class_">Message</span>.<span class="hljs-title function_">error</span>(&#123; <span class="hljs-attr">message</span>: error || <span class="hljs-string">&#x27;Has Error&#x27;</span> &#125;)  <br><span class="hljs-title function_">next</span>(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)  <br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-comment">/* has no token*/</span>  <br>  <br><span class="hljs-keyword">if</span> (whiteList.<span class="hljs-title function_">indexOf</span>(to.<span class="hljs-property">path</span>) !== -<span class="hljs-number">1</span>) &#123;  <br><span class="hljs-comment">// in the free login whitelist, go directly  </span><br><span class="hljs-title function_">next</span>()  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-comment">// other pages that do not have permission to access are redirected to the login page.  </span><br><span class="hljs-title function_">next</span>(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)  <br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()  <br>&#125;  <br>&#125;  <br>&#125;)  <br>  <br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">() =&gt;</span> &#123;  <br><span class="hljs-comment">// finish progress bar  </span><br><span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()  <br>&#125;)  <br>  <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myFilterAsyncRoutes</span>(<span class="hljs-params">menuList</span>) &#123;  <br>menuList.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">menu</span> =&gt;</span> &#123;  <br><span class="hljs-comment">// console.log(menu)  </span><br><span class="hljs-keyword">if</span> (menu.<span class="hljs-property">component</span> === <span class="hljs-string">&#x27;Layout&#x27;</span>) &#123;  <br><span class="hljs-comment">// console.log(menu.component)  </span><br>menu.<span class="hljs-property">component</span> = <span class="hljs-title class_">Layout</span>  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>menu.<span class="hljs-property">component</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">`@/views/<span class="hljs-subst">$&#123;menu.component&#125;</span>.vue`</span>).<span class="hljs-property">default</span>  <br>&#125;  <br><span class="hljs-comment">// 递归处理子菜单  </span><br><span class="hljs-keyword">if</span> (menu.<span class="hljs-property">children</span> &amp;&amp; menu.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>) &#123;  <br>menu.<span class="hljs-property">children</span> = <span class="hljs-title function_">myFilterAsyncRoutes</span>(menu.<span class="hljs-property">children</span>)  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>  <br>&#125;)  <br><span class="hljs-keyword">return</span> menuList  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-路由合并"><a href="#4-路由合并" class="headerlink" title="4.路由合并"></a>4.路由合并</h3><p>src/layout/components/Sidebar/index.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">routes</span>(<span class="hljs-params"></span>) &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-property">options</span>.<span class="hljs-property">routes</span>.<span class="hljs-title function_">concat</span>(<span class="hljs-variable language_">global</span>.<span class="hljs-property">myRoutes</span>)  <br>&#125;,<br><br></code></pre></td></tr></table></figure><h1 id="Vue-框架快速上手"><a href="#Vue-框架快速上手" class="headerlink" title="Vue 框架快速上手"></a>Vue 框架快速上手</h1><blockquote><p><strong>[[Vue]]</strong></p></blockquote><h2 id="1-前端环境准备"><a href="#1-前端环境准备" class="headerlink" title="1. 前端环境准备"></a>1. 前端环境准备</h2><p>Vscode 或者WebStorm</p><h2 id="2-Vue-框架介绍"><a href="#2-Vue-框架介绍" class="headerlink" title="2.Vue 框架介绍"></a>2.Vue 框架介绍</h2><p>尤雨溪制作的渐进式 js 框架</p><h2 id="3-Vue-快速入门"><a href="#3-Vue-快速入门" class="headerlink" title="3.Vue 快速入门"></a>3.Vue 快速入门</h2><ul><li>导入 vue. js 的 script 脚本文件</li></ul><p> <code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></p><ul><li>在页面中声明一个将要被 vue 所控制的 DOM 区域，既 MVVM 中的 View</li></ul><pre><code class="hljs">`&lt;div id=&quot;app&quot;&gt;  &#123;&#123; message &#125;&#125;&lt;/div&gt;`</code></pre><ul><li>创建 vm 实例对象 (vue 实例对象)</li></ul><p><code>const hello = &#123;    //指定数据源，既 MVVM 中的 Mode1    data: function () &#123;       return &#123;          message: &#39;Hello Vue!&#39;       &#125; &#125; const app = Vue.createApp (hello) app. mount（&#39; #app &#39;）/／指定当前 vue 实例要控制页面的哪个区域</code></p><h1 id="7-项目部署"><a href="#7-项目部署" class="headerlink" title="7. 项目部署"></a>7. 项目部署</h1><h2 id="1-云端环境准备"><a href="#1-云端环境准备" class="headerlink" title="1. 云端环境准备"></a>1. 云端环境准备</h2><h3 id="安装-Mysql"><a href="#安装-Mysql" class="headerlink" title="安装 Mysql"></a>安装 Mysql</h3><table><thead><tr><th>环境</th><th>准备</th><th align="center"></th><th></th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021153950.png"/></td><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021200042.png"/></td><td align="center"></td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021206531.png" alt="image.png"></td><td></td><td align="center"></td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021214865.png" alt="image.png"></td><td></td><td align="center"></td><td></td></tr></tbody></table><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release<br>yum update<br>yum -y install nginx<br></code></pre></td></tr></table></figure><p>nginx 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx #开启nginx服务<br>systemctl stop nginx #停止nginx服务<br>systemctl restart nginx #重启nginx服务<br></code></pre></td></tr></table></figure><h3 id="配置-JDK"><a href="#配置-JDK" class="headerlink" title="配置 JDK"></a>配置 JDK</h3><p>下载 JDK，登录官方 <a href="https://www.oracle.com/java/technologies/downloads/java8%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E7%89%88%E6%9C%AC%E7%9A%84JDK">https://www.oracle.com/java/technologies/downloads/java8下载所需版本的JDK</a> ，版本为 JDK1.8</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021240929.png" alt="image.png"><br>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zvxf jdk-8u131-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>编辑/etc/profile 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">文件末尾增加</span><br>export JAVA_HOME=/usr/server/jdk1.8.0_131<br></code></pre></td></tr></table></figure><p>执行 source 命令，使配置立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="部署-Vue-项目"><a href="#部署-Vue-项目" class="headerlink" title="部署 Vue 项目"></a>部署 Vue 项目</h3><h4 id="打包-vue-项目"><a href="#打包-vue-项目" class="headerlink" title="打包 vue 项目"></a>打包 vue 项目</h4><p>进入到 Vue 项目目录，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run build<br></code></pre></td></tr></table></figure><p>将生成的 dist 目录上传至服务器/usr/vue/dist</p><h4 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h4><p>进入到/etc/nginx/conf.d 目录，创建 vue.conf 文件，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>   listen  80;<br>   server_name locahost;<br><br>   1ocation / &#123;<br>       root /usr/app/dist;<br>       index index.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="打包-Java-程序"><a href="#打包-Java-程序" class="headerlink" title="打包 Java 程序"></a>打包 Java 程序</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021501320.png" alt="image.png"><br>因为 springboot 有内置 tomcat 容器，这点比较方便，省去了 tomcat 的部署。我们到时候直接可以直接把 jar 包扔到 linux 上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup java -jar demo-0.0.1-SNAPSHOT.jar &gt; logName.1og 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.bilibili.com/video/BV1nV4y1s7ZN/">1天搞定SpringBoot+Vue全栈开发_哔哩哔哩_bilibili</a></li><li><a href="https://blog.csdn.net/javaDeveloper2010/article/details/129119489">Springdoc和Springfox</a></li></ol>]]></content>
    
    
    <summary type="html">it is some basic usage of SpringBoot .</summary>
    
    
    
    <category term="Java" scheme="https://alleyf.github.io/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://alleyf.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>DRF速通</title>
    <link href="https://alleyf.github.io/2023/04/fbae7fa42803.html"/>
    <id>https://alleyf.github.io/2023/04/fbae7fa42803.html</id>
    <published>2023-04-25T11:29:25.000Z</published>
    <updated>2023-04-27T16:31:05.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 其他相关文章-&gt; [[网页开发]]， #DRF #Django</p></blockquote><h1 id="1-api-接口"><a href="#1-api-接口" class="headerlink" title="1. api 接口"></a>1. api 接口</h1><p>目前市面上大部分公司开发人员使用的接口实现规范主要有：restful、RPC。<br>RPC（ Remote Procedure Call ）: 翻译成中文:远程过程调用[远程服务调用]. 从字面上理解就是访问/调用远程服务端提供的api接口。这种接口一般以服务或者过程式代码提供。<br>restful: 翻译成中文: 资源状态转换.(表征性状态转移)</p><ul><li>把服务端提供的所有的数据/文件都看成资源， 那么通过api接口请求数据的操作，本质上来说就是对资源的操作了.  因此，restful中要求，我们把当前接口对外提供哪种资源进行操作，就把<strong>资源的名称写在url地址</strong>。</li><li>  web开发中操作资源，最常见的最通用的无非就是增删查改，所以restful要求在地址栏中声明要操作的资源是什么。然后通过<strong>http请求动词</strong>来说明对该资源进行哪一种操作.</li></ul><blockquote><p>POST <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> 添加学生数据</p><p>GET <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> 获取所有学生</p><p>GET <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 获取id=pk的学生</p><p>DELETE <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 删除id=pk的一个学生</p><p>PUT <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 修改一个学生的全部信息 [id,name,sex,age,]</p><p>PATCH <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> / 修改一个学生的部分信息[age]</p></blockquote><p>请求方式：<em><strong>增删改查查</strong></em></p><ol><li>restful 是以资源为主的 api 接口规范，体现在地址上就是资源就是以名词表达。</li><li>rpc 则以动作为主的 api 接口规范，体现在接口名称上往往附带操作数据的动作。</li></ol><hr><h1 id="2-Django-的-CBV"><a href="#2-Django-的-CBV" class="headerlink" title="2.Django 的 CBV"></a>2.Django 的 CBV</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># CBV模式,views.py</span><br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">View</span>) ;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, reguest</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View GET请求...&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, reguest</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View POST请求...&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View DELETE请求&#x27;&#x27;&#x27;&quot;</span>)<br><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django. contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> book <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin. site.urls) ,<br><span class="hljs-comment"># path( &#x27;book/&#x27;, views.book) ,</span><br>path(<span class="hljs-string">&quot;book/&quot;</span>.views . BookView.asTview()) <span class="hljs-comment">#路由中的“/”不能丢，否则自动重定向为get请求</span><br>]<br></code></pre></td></tr></table></figure><hr><h1 id="3-反射"><a href="#3-反射" class="headerlink" title="3. 反射"></a>3. 反射</h1><p>通过反射 <code>func = getattr(self,func_name_str)</code> 可以将<strong>字符串转变为变量 (函数)<strong>，接着就可以直接调用 func () 从而</strong>动态调用函数</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,func_str</span>):<br>self.name = name<br>self.age = age<br>func = <span class="hljs-built_in">getattr</span>(self,func_str)<br>func() <span class="hljs-comment"># 等价于self.slepp() </span><br>a = Animal(<span class="hljs-string">&quot;alleyf&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;sleep&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="4-Drf"><a href="#4-Drf" class="headerlink" title="4. Drf"></a>4. Drf</h1><blockquote><p>安装 drf：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install djangorestframework<br></code></pre></td></tr></table></figure><blockquote><p>注册 drf app：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>... ,<br><span class="hljs-string">&#x27;rest_framework&#x27;</span>, <br>]<br></code></pre></td></tr></table></figure><hr><h2 id="1-APIView"><a href="#1-APIView" class="headerlink" title="1. APIView"></a>1. APIView</h2><ol><li>重写了 View 的 as_view ()和 dispatch（）方法，构建了新的 request 对象实现<strong>认证、权限和限流</strong>作用。</li><li><code>request. Get ()-&gt;request. Query_params ()</code>获取 get 请求参数</li><li><code>request. Post ()-&gt;request. Data ()</code> 获取 post(put 等)请求体数据，包括 files 都封装在一起反序列化了，支持前端 urlcoded 格式和 json 等其他任何格式。</li></ol><p>路由执行过程：<br><span style="background:#b1ffff">as_view ()-&gt;view ()-&gt;dispatch ()-&gt;get/post· · ·</span></p><hr><h2 id="2-Serializer-（反）序列化器"><a href="#2-Serializer-（反）序列化器" class="headerlink" title="2.Serializer （反）序列化器"></a>2.Serializer （反）序列化器</h2><p><img src="https://s2.loli.net/2023/04/26/VukBIX39lj2Kbx6.png" alt="（反）序列化器|425"></p><blockquote><p>[!NOTE] keys</p><ul><li>序列化：数据表数据-&gt;前端显示的 json 数据 （get 请求，<strong>取数据</strong>）</li><li>反序列化：前端提交的 json 数据-&gt;数据表数据（post、put、patch、delete 等请求，<strong>存数据</strong>）</li></ul></blockquote><h3 id="1-序列化与反序列化"><a href="#1-序列化与反序列化" class="headerlink" title="1.序列化与反序列化"></a>1.序列化与反序列化</h3><p><strong>常用字段类型</strong>：<br>| 字段                    | 构造方式                                                                             |<br>| ———————– | ———————————————————————————— |<br>| <strong>BooleanField</strong>        | BooleanField()                                                                       |<br>| <strong>CharField</strong>           | CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) |<br>| <strong>EmailField</strong>          | EmailField(max_length=None, min_length=None, allow_blank=False)                      |<br>| <strong>URLField</strong>            | URLField(max_length=200, min_length=None, allow_blank=False)                         |<br>| <strong>IPAddressField</strong>      | IPAddressField(protocol=‘both’, unpack_ipv4=False, options)                          |<br>| <strong>IntegerField</strong>        | IntegerField(max_value=None, min_value=None)                                         |<br>| <strong>FloatField</strong>          | FloatField(max_value=None, min_value=None)                                           |<br>| <strong>DateTimeField</strong>       | DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)               |<br>| <strong>DateField</strong>           | DateField(format=api_settings.DATE_FORMAT, input_formats=None)                       |<br>| <strong>TimeField</strong>           | TimeField(format=api_settings.TIME_FORMAT, input_formats=None)                       |<br>| <strong>ChoiceField</strong>         | ChoiceField(choices) choices 与 Django 的用法相同                                    |<br>| <strong>MultipleChoiceField</strong> | MultipleChoiceField(choices)                                                         |<br>| <strong>FileField</strong>           | FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)   |<br>| <strong>ImageField</strong>          | ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)  |<br>| <strong>ListField</strong>           | ListField(child=, min_length=None, max_length=None)                                  |<br>| <strong>DictField</strong>           | DictField(child=)                                                                    |<br><strong>选项参数：</strong><br>| 参数名称            | 作用             |<br>| ——————- | —————- |<br>| <strong>max_length</strong>      | 最大长度         |<br>| <strong>min_lenght</strong>      | 最小长度         |<br>| <strong>allow_blank</strong>     | 是否允许为空     |<br>| <strong>trim_whitespace</strong> | 是否截断空白字符 |<br>| <strong>max_value</strong>       | 最小值           |<br>| <strong>min_value</strong>       |     最大值             |<br><strong>通用参数：</strong><br>| 参数名称           | 说明                                      |<br>| —————— | —————————————– |<br>| <strong>read_only</strong>      | 表明该字段仅用于序列化输出，默认False     |<br>| <strong>write_only</strong>     | 表明该字段仅用于反序列化输入，默认False   |<br>| <strong>required</strong>       | 表明该字段在反序列化时必须输入，默认True  |<br>| <strong>default</strong>        | 反序列化时使用的默认值                    |<br>| <strong>allow_null</strong>     | 表明该字段是否允许传入 None，默认 False   |<br>| <strong>validators</strong>     | 该字段使用的验证器                        |<br>| <strong>error_messages</strong> | 包含错误编号与错误信息的字典              |<br>| <strong>label</strong>          | 用于 HTML 展示 API 页面时，显示的字段名称 |<br>| <strong>help_text</strong>      |  用于HTML展示API页面时，显示的字段帮助提示信息                                         |</p><ol><li>新建模型（反）序列化器</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookSerializers</span>(serializers.Serializer):<br><span class="hljs-string">&quot;&quot;&quot;Book的(反)序列化器&quot;&quot;&quot;</span><br>title = serializers.CharField (max_length=<span class="hljs-number">3</span>)<br>price = serializers.IntegerField(require=<span class="hljs-literal">True</span>)<br>date = serializers.DateField(source=<span class="hljs-string">&quot;pub_date&quot;</span>)<br><span class="hljs-comment"># 该方法必须被重写否则无法使用serializer.save()新建数据,实现view与serializer解耦</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self,validated_data</span>):<br>new_book = Book.objects.create(**serializer.validated_data)<br><span class="hljs-keyword">return</span> new_book<br><span class="hljs-comment"># 该方法必须被重写否则无法使用serializer.save()更新数据，实现view与serializer解耦</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self,validated_data</span>):<br><span class="hljs-comment"># 修改数据</span><br>Book.objects.<span class="hljs-built_in">filter</span>(pk=instance.pk).update(**serializer.validated_data)<br><span class="hljs-comment"># 设置序列化器的实例为更新后的对象</span><br>updated_book = Book.objects.get(pk=instance.pk)<br><span class="hljs-keyword">return</span> updated_book<br></code></pre></td></tr></table></figure><blockquote><ol><li>（反）序列化器的字段名与数据表的字段名必须一致，否则需要指定 <code>source</code> 指向某个字段</li><li>字段规则要根据数据表的规则设置</li></ol></blockquote><ol start="2"><li>新建模型视图类</li></ol><blockquote><ul><li><strong>根据需求重写 get、post、put、delete 等方法</strong></li><li>除了 <strong>delete 返回 none</strong> 外，其他方法都要返回改变的<strong>序列化为 json 后的数据</strong></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> viewsets<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&quot;&quot;&quot;序列化&quot;&quot;&quot;</span><br><span class="hljs-comment"># query_params = request.query_params() 获取get的url请求参数 </span><br>queryset = Book.objects.<span class="hljs-built_in">all</span>() <span class="hljs-comment"># 当查询过滤得到一个对象时，many=False</span><br><span class="hljs-comment"># 构建序列化对象</span><br>serializer = BookSerializer(instance=queryset,many=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> Response(serilaizer.data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&quot;&quot;&quot;反序列化&quot;&quot;&quot;</span><br><span class="hljs-comment"># 构建反序列化对象 </span><br>serializer = BookSerializer(data=request.data)<br><span class="hljs-comment"># 数据校验</span><br><span class="hljs-keyword">if</span> serializer.is_valid():<br><span class="hljs-comment"># 校验通过创建新数据，返回新建的json数据 </span><br>serializer.save()<br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 校验失败，返回错误 </span><br><span class="hljs-keyword">return</span> Response(serializer.errors) <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDetailView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从数据库获取指定id的数据</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>singleBook = Book.objects.get(pk=<span class="hljs-built_in">id</span>)<br><span class="hljs-comment"># 构建序列化器转为json数据</span><br>serializer = Serializer(instance=singleBook,many=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br><span class="hljs-string">&quot;&quot;&quot;修改指定id的数据&quot;&quot;&quot;</span><br>update_bookobj = Book.objects.get(pk=<span class="hljs-built_in">id</span>)<br><span class="hljs-comment"># 构建反序列化器</span><br>serializer = Serializer(instance=update_bookobj,data=request.data)<br><span class="hljs-comment"># 数据校验</span><br><span class="hljs-keyword">if</span> serializer.is_valid():<br>serializer.save()<br><span class="hljs-comment"># 序列化修改后的对象并返回</span><br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 校验失败，返回错误 </span><br><span class="hljs-keyword">return</span> Response(serializer.errors) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br>Book.objects.get(pk=<span class="hljs-built_in">id</span>).delete()<br><span class="hljs-comment"># 直接返回空</span><br><span class="hljs-keyword">return</span> Response()<br></code></pre></td></tr></table></figure><ol start="3"><li>路由配置（urls.py）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path,re_path ,include<br><span class="hljs-keyword">from</span> views <span class="hljs-keyword">import</span> Bookview , BookDetailview<br>urlpatterns = [<br>path(<span class="hljs-string">&#x27;books/&#x27;</span>,Bookview.as_view()),<br>re_path(<span class="hljs-string">&#x27;books/(?P&lt;pk&gt;\d+)/&#x27;</span>,BookDetailview.as_view()),<br>]<br></code></pre></td></tr></table></figure><h3 id="2-Response"><a href="#2-Response" class="headerlink" title="2. Response"></a>2. Response</h3><blockquote><p>drf 重写后的 response<br><code>Response(data, status=None, template_name=None, headers=None, content_type=None)</code></p></blockquote><blockquote><p>[!NOTE] 常用参数概念</p><ol><li><code>data</code> ：python 的基本数据类型或者序列化后的数据</li><li><code>status</code>：返回状态码，eg：200，403 etc</li><li><code>template_name</code>: 模板名称，如果使用 <code>HTMLRenderer</code> 时需指明；</li><li> <code>headers</code>: 用于存放响应头信息的字典；</li><li> <code>content_type</code>: 响应数据的 Content-Type，通常此参数无需传递，REST framework 会根据前端所需类型数据来设置该参数</li></ol></blockquote><h3 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3. 状态码"></a>3. 状态码</h3><blockquote><p>为了方便设置状态码，REST framewrok在<code>rest_framework.status</code>模块中提供了常用http状态码的常量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1）信息告知 - 1xx </span><br>HTTP_100_CONTINUE <br>HTTP_101_SWITCHING_PROTOCOLS <br><span class="hljs-comment"># 2）成功 - 2xx </span><br>HTTP_200_OK <br>HTTP_201_CREATED <br>HTTP_202_ACCEPTED <br>HTTP_203_NON_AUTHORITATIVE_INFORMATION HTTP_204_NO_CONTENT <br>HTTP_205_RESET_CONTENT <br>HTTP_206_PARTIAL_CONTENT <br>HTTP_207_MULTI_STATUS <br><span class="hljs-comment"># 3）重定向 - 3xx </span><br>HTTP_300_MULTIPLE_CHOICES <br>HTTP_301_MOVED_PERMANENTLY <br>HTTP_302_FOUND <br>HTTP_303_SEE_OTHER <br>HTTP_304_NOT_MODIFIED <br>HTTP_305_USE_PROXY <br>HTTP_306_RESERVED <br>HTTP_307_TEMPORARY_REDIRECT <br><span class="hljs-comment"># 4）客户端错误 - 4xx </span><br>HTTP_400_BAD_REQUEST <br>HTTP_401_UNAUTHORIZED <br>HTTP_402_PAYMENT_REQUIRED <br>HTTP_403_FORBIDDEN <br>HTTP_404_NOT_FOUND <br>HTTP_405_METHOD_NOT_ALLOWED <br>HTTP_406_NOT_ACCEPTABLE HTTP_407_PROXY_AUTHENTICATION_REQUIRED HTTP_408_REQUEST_TIMEOUT <br>HTTP_409_CONFLICT <br>HTTP_410_GONE <br>HTTP_411_LENGTH_REQUIRED <br>HTTP_412_PRECONDITION_FAILED HTTP_413_REQUEST_ENTITY_TOO_LARGE HTTP_414_REQUEST_URI_TOO_LONG HTTP_415_UNSUPPORTED_MEDIA_TYPE HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_417_EXPECTATION_FAILED <br>HTTP_422_UNPROCESSABLE_ENTITY <br>HTTP_423_LOCKED <br>HTTP_424_FAILED_DEPENDENCY <br>HTTP_428_PRECONDITION_REQUIRED <br>HTTP_429_TOO_MANY_REQUESTS HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS <br><span class="hljs-comment"># 5）服务器错误 - 5xx </span><br>HTTP_500_INTERNAL_SERVER_ERROR <br>HTTP_501_NOT_IMPLEMENTED <br>HTTP_502_BAD_GATEWAY <br>HTTP_503_SERVICE_UNAVAILABLE <br>HTTP_504_GATEWAY_TIMEOUT HTTP_505_HTTP_VERSION_NOT_SUPPORTED HTTP_507_INSUFFICIENT_STORAGE HTTP_511_NETWORK_AUTHENTICATION_REQUIRED<br></code></pre></td></tr></table></figure><hr><h2 id="3-ModelSerializer"><a href="#3-ModelSerializer" class="headerlink" title="3.ModelSerializer"></a>3.ModelSerializer</h2><blockquote><p>模型类序列化器，根据模型简化序列化过程，根据模型表<strong>自动创建序列化字段</strong>，并且内部实现了 <strong>create 方法和 update 方法</strong>，也可以根据实际需要重写逻辑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Book<br><span class="hljs-comment"># 对全部字段进行序列化</span><br>fields = <span class="hljs-string">&#x27;__al__&#x27;</span><br><span class="hljs-comment"># 对指定字段进行序列化</span><br>fields = [<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;id&#x27;</span>,···]<br><span class="hljs-comment"># 排除指定字段不进行序列化</span><br>exclude = [<span class="hljs-string">&#x27;id&#x27;</span>]<br>extra_kwargs = &#123; <span class="hljs-string">&#x27;id&#x27;</span>: &#123;<span class="hljs-string">&#x27;min_value&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>&#125;, <span class="hljs-string">&#x27;title&#x27;</span>: &#123;<span class="hljs-string">&#x27;min_value&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>&#125;, &#125;<br></code></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 全局钩子  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, attrs</span>):  <br>    name = attrs.get(<span class="hljs-string">&#x27;name&#x27;</span>)  <br>    <span class="hljs-keyword">if</span> Resume.objects.<span class="hljs-built_in">filter</span>(name=name).exists():  <br>        <span class="hljs-keyword">raise</span> exceptions.ValidationError(name + <span class="hljs-string">&#x27;的简历已存在!&#x27;</span>)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> attrs  <br><span class="hljs-comment"># 局部钩子  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_name</span>(<span class="hljs-params">self, value</span>):  <br>     response = &#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;成功&#x27;</span>&#125;  <br>     res = Resume.objects.<span class="hljs-built_in">filter</span>(name=value)  <br>     <span class="hljs-keyword">if</span> res:  <br>         <span class="hljs-keyword">raise</span> exceptions.ValidationError(<span class="hljs-string">&#x27;简历重复!&#x27;</span>)  <br>     <span class="hljs-keyword">else</span>:  <br>         <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><hr><h2 id="4-视图"><a href="#4-视图" class="headerlink" title="4. 视图"></a>4. 视图</h2><h3 id="1-GenericAPIView"><a href="#1-GenericAPIView" class="headerlink" title="1. GenericAPIView"></a>1. GenericAPIView</h3><p>导入 <code>GenericAPIView</code></p><blockquote><p><code>from rest_framework.viewsets import generics</code></p></blockquote><blockquote><p>在 APIView 上扩展了一些新方法</p></blockquote><p>可设置的属性变量：</p><ul><li>  <strong>pagination_class</strong> 指明分页控制类</li><li>  <strong>filter_backends</strong> 指明过滤控制后端</li></ul><h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h4><h5 id="（1）get-serializer-class-self"><a href="#（1）get-serializer-class-self" class="headerlink" title="（1）get_serializer_class(self)"></a>（1）get_serializer_class(self)</h5><blockquote><p>当出现一个视图类中调用多个序列化器时,那么可以通过条件判断在get_serializer_class方法中通过返回不同的序列化器类名就可以让视图方法执行不同的序列化器对象了。<br>返回序列化器类，默认返回<code>serializer_class</code>，可以重写</p></blockquote><h5 id="（2）get-serializer-self-args-kwargs"><a href="#（2）get-serializer-self-args-kwargs" class="headerlink" title="（2）get_serializer(self, *args, **kwargs)"></a>（2）get_serializer(self, *args, **kwargs)</h5><blockquote><p>返回序列化器对象，主要用来提供给Mixin扩展类使用，如果我们在视图中想要获取序列化器对象，也可以直接调用此方法。</p><p><strong>注意，该方法在提供序列化器对象的时候，会向序列化器对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</strong></p><ul><li>  <strong>request</strong> 当前视图的请求对象</li><li>  <strong>view</strong> 当前请求的类视图对象</li><li>  <strong>format</strong> 当前请求期望返回的数据格式</li></ul></blockquote><h5 id="（3）get-queryset-self"><a href="#（3）get-queryset-self" class="headerlink" title="（3）get_queryset(self)"></a>（3）get_queryset(self)</h5><blockquote><p>返回视图使用的查询集，主要用来提供给 Mixin 扩展类使用，是列表视图与详情视图获取数据的基础，默认返回 <code>queryset</code> 属性，可以重写.</p></blockquote><h5 id="（4）get-object-self"><a href="#（4）get-object-self" class="headerlink" title="（4）get_object(self)"></a>（4）get_object(self)</h5><blockquote><p>返回详情视图所需的模型类数据对象，主要用来提供给Mixin扩展类使用。</p><p>在试图中可以调用该方法获取详情信息的模型类对象。</p><p><strong>若详情访问的模型类对象不存在，会返回404。</strong></p><p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p></blockquote><h4 id="1-方法重写"><a href="#1-方法重写" class="headerlink" title="1. 方法重写"></a>1. 方法重写</h4><p><code>设置urls.py中的普通路由，正则路由指定参数为pk</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>path(<span class="hljs-string">&#x27;books/&#x27;</span>,views.BookView.as_view()),<br>re_path(<span class="hljs-string">&#x27;books/(?P&lt;pk&gt;\d+)&#x27;</span>,views.BookDetailView.as_view()),<br>]<br></code></pre></td></tr></table></figure><p><strong>get：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;获取所有岗位信息&quot;&quot;&quot;</span>  <br>    serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="hljs-literal">True</span>)  <br>    <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p><strong><font color="#f79646">post</font>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">    添加岗位信息  </span><br><span class="hljs-string">    :param request:    :return: 添加后的岗位信息  </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>    serializer = self.get_serializer(data=request.data)  <br>    <span class="hljs-keyword">if</span> serializer.is_valid():  <br>        serializer.save()  <br>        <span class="hljs-keyword">return</span> Response(serializer.data)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></td></tr></table></figure><p><strong><font color="#2DC26B">get（单个数据）</font>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, pk</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;获取指定id的岗位信息&quot;&quot;&quot;</span>  <br>    serializer = self.get_serializer(instance=self.get_object(), many=<span class="hljs-literal">True</span>)  <br>    <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p><font color="#00b0f0">put（单个数据）：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, pk</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">    修改指定id的岗位信息  </span><br><span class="hljs-string">    :param request:    :return: 添加后的岗位信息  </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>    serializer = self.get_serializer(instance=self.get_object(), data=request.data)  <br>    <span class="hljs-keyword">if</span> serializer.is_valid():  <br>        serializer.save()  <br>        <span class="hljs-keyword">return</span> Response(serializer.data)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></td></tr></table></figure><p><font color="#7030a0">delete (单个数据)：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br>self.get_object().delete()<br><span class="hljs-comment"># 直接返回空</span><br><span class="hljs-keyword">return</span> Response()<br></code></pre></td></tr></table></figure><h3 id="2-ViewSet"><a href="#2-ViewSet" class="headerlink" title="2. ViewSet"></a>2. ViewSet</h3><h4 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h4><p>继承自 <code>APIView</code> 与 <code>ViewSetMixin</code>，作用也与 APIView 基本类似，提供了身份认证、权限校验、流量管理等。<br><strong>ViewSet主要通过继承ViewSetMixin来实现在调用as_view()时传入字典{“http请求”：“视图方法”}的映射处理工作，如{‘get’:’list’}，</strong></p><blockquote><ol><li>通过路由指定不同请求执行不同视图函数，从而修改路由分配方法。</li><li>项目加载时执行 <code>as_view ()</code> 函数，当发起请求时才执行 <code>view</code> 函数根据反射获取重写的<strong>函数变量</strong>，设置<strong>请求映射</strong>到该函数变量，进而根据不同请求分发匹配不同的视图函数。</li></ol></blockquote><p>在 ViewSet 中，没有提供任何动作 action 方法，需要我们自己实现 action 方法。<br>使用视图集ViewSet，可以将一系列视图相关的代码逻辑和相关的http请求动作封装到一个类中：<br><font color="#4bacc6">&gt; -   list() 提供一组数据</font><br><font color="#4bacc6">&gt; -   retrieve() 提供单个数据</font><br><font color="#4bacc6">&gt; -   create() 创建数据</font><br><font color="#4bacc6">&gt; -   update() 保存数据</font><br><font color="#4bacc6">&gt; -   destory() 删除数据</font></p><blockquote><p>ViewSet视图集类不再限制视图方法名只允许get()、post()等这种情况了，而是实现允许开发者根据自己的需要定义自定义方法名，例如 list() 、create() 等，然后经过路由中使用http和这些视图方法名进行绑定调用。</p></blockquote><h3 id="3-GenericViewSet"><a href="#3-GenericViewSet" class="headerlink" title="3. GenericViewSet"></a>3. GenericViewSet</h3><blockquote><p>继承了 GenericAPIView 和 ViewSetMixin，即继承了增删改查查方法，也修改了视图分发方法。</p></blockquote><p><strong>GenericViewSet</strong>就帮助我们完成了这样的继承工作，继承自<code>GenericAPIView</code>与<code>ViewSetMixin</code>，在实现了调用as_view()时传入字典（如<code>&#123;&#39;get&#39;:&#39;list&#39;&#125;</code>）的映射处理工作的同时，还提供了<code>GenericAPIView</code>提供的基础方法，可以直接搭配Mixin扩展类使用。<br>url. py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path <br><span class="hljs-keyword">from</span> vset.views <span class="hljs-keyword">import</span> BookView <br>urlpatterns = [ <br><span class="hljs-comment"># path(&quot;set&quot;, views.BookView.as_view(&#123;&quot;http请求&quot;:&quot;视图方法&quot;&#125;)), </span><br>path(<span class="hljs-string">&quot;books/&quot;</span>, BookView.as_view(&#123; <br> <span class="hljs-string">&quot;get&quot;</span>: <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;post&quot;</span>: <span class="hljs-string">&quot;create&quot;</span> <br> &#125;)), re_path(<span class="hljs-string">&quot;^books/(?P&lt;pk&gt;\d+)$&quot;</span>, BookView.as_view(&#123;<br>  <span class="hljs-string">&quot;get&quot;</span>: <span class="hljs-string">&quot;retrieve&quot;</span>, <br>  <span class="hljs-string">&quot;put&quot;</span>: <span class="hljs-string">&quot;update&quot;</span>, <br>  <span class="hljs-string">&quot;delete&quot;</span>: <span class="hljs-string">&quot;delete&quot;</span>, &#125;)), ]<br></code></pre></td></tr></table></figure><p>views. py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet<br><span class="hljs-keyword">from</span> rest_framework.mixins <span class="hljs-keyword">import</span> ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, \ DestroyModelMixin<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(GenericViewSet, ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin): <br>queryset = Book.objects <br>serializer_class = BookSerializer<br></code></pre></td></tr></table></figure><h3 id="4-ModelViewSet"><a href="#4-ModelViewSet" class="headerlink" title="4. ModelViewSet"></a>4. ModelViewSet</h3><blockquote><p>进一步封装，继承了五个 Mixin 类和 GenericViewSet。</p></blockquote><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelViewSet</span>(mixins.CreateModelMixin,  <br>                   mixins.RetrieveModelMixin,  <br>                   mixins.UpdateModelMixin,  <br>                   mixins.DestroyModelMixin,  <br>                   mixins.ListModelMixin,  <br>                   GenericViewSet):<br>            <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">A viewset that provides default `create()`, `retrieve()`, `update()`,  </span><br><span class="hljs-string">`partial_update()`, `destroy()` and `list()` actions.  </span><br><span class="hljs-string">&quot;&quot;&quot;</span>  <br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 局限：<br>    不够灵活，直接自带了六个增删改改查查视图函数，需要其他处理需要重写对应方法。</p></blockquote><h3 id="5-扩展视图方法"><a href="#5-扩展视图方法" class="headerlink" title="5. 扩展视图方法"></a>5. 扩展视图方法</h3><blockquote><p>根据需要扩展其他视图函数接口，匹配对应的 get、put、post、delete 等请求，并将接口注册到路由，</p></blockquote><h4 id="1-路由注册"><a href="#1-路由注册" class="headerlink" title="1. 路由注册"></a>1. 路由注册</h4><p><font color="#6425d0">views. py:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">self, request</span>):  <br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        自定义action  </span><br><span class="hljs-string">        return: JSON数据  </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>        <span class="hljs-keyword">pass</span><span class="hljs-comment">#示例：  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">latest</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&#x27;&#x27;&#x27;获取最后一条记录&#x27;&#x27;&#x27;</span>  <br>    <span class="hljs-comment"># 获取模型数据  </span><br>    book = BookInfo.objects.latest(<span class="hljs-string">&#x27;id&#x27;</span>)    <span class="hljs-comment"># 获取序列化器对象  </span><br>    s = BookInfoModelSerializer(instance=book)    <span class="hljs-keyword">return</span> Response(s.data)<br></code></pre></td></tr></table></figure><p><font color="#4bacc6">urls. py:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>   <span class="hljs-comment"># url(r&#x27;^books/$&#x27;,views.BookInfoViewSet.as_view(&#123;&#x27;get&#x27;:&#x27;action函数名&#x27;&#125;)),  </span><br><span class="hljs-comment">#示例：  </span><br>url(<span class="hljs-string">r&#x27;^books/$&#x27;</span>, views.BookInfoViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;latest&#x27;</span>&#125;)),  <br>]<br></code></pre></td></tr></table></figure><h4 id="装饰器注册"><a href="#装饰器注册" class="headerlink" title="装饰器注册"></a>装饰器注册</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> action<br><span class="hljs-meta">@action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>], detail=<span class="hljs-literal">False</span>, url_path=<span class="hljs-string">&#x27;test&#x27;</span></span>)  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-built_in">print</span>(request.data)  <br>    <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;成功了&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>methods: 声明该 action 对应的请求方式，列表传递  </li><li>detail: 声明该 action 路径是否为单一资源对应(False 查询所有数据接口，True 查询单条数据接口)，生成路由时是否拼接 <strong>pk</strong> 参数，detail为<code>True</code>，表示路径名格式应该为 <code>book/&#123;pk&#125;/login/</code></li><li>url_path：<strong>路由名称</strong>，不设置默认为函数名</li></ul><h2 id="5-路由"><a href="#5-路由" class="headerlink" title="5. 路由"></a>5. 路由</h2><blockquote><p>对于视图集 ViewSet，我们除了可以自己手动指明请求方式与动作 action 之间的对应关系外，还可以使用 Routers 来帮助我们快速实现路由信息。</p></blockquote><p>REST framework提供了两个router</p><ul><li>  <strong>SimpleRouter</strong></li><li>  <strong>DefaultRouter</strong></li></ul><h3 id="1-用法"><a href="#1-用法" class="headerlink" title="1. 用法"></a>1. 用法</h3><p><span style="background:rgba(240, 200, 0, 0.2)">1. 创建 router 对象，并注册视图集</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routers <br>router = routers.DefaultRouter() router.register(<span class="hljs-string">&#x27;book&#x27;</span>, BookView, base_name=<span class="hljs-string">&#x27;book&#x27;</span>)<br></code></pre></td></tr></table></figure><p>register(prefix, viewset, base_name)</p><blockquote><ul><li>  prefix 该视图集的路由前缀</li><li>  viewset 视图集</li><li>  base_name 路由别名的前缀</li></ul></blockquote><p>如上述代码会形成的路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">^book/$    name: book-<span class="hljs-built_in">list</span><br>^book/&#123;pk&#125;/$   name: book-detail<br></code></pre></td></tr></table></figure><p><span style="background:rgba(136, 49, 204, 0.2)">2. 添加路由数据：</span></p><ul><li><p>方式 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    ...<br>]<br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure></li><li><p>方式 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    ...<br>    path(<span class="hljs-string">&#x27;^&#x27;</span>, include(router.urls))<br>]<br></code></pre></td></tr></table></figure></li></ul><p><span style="background:#40a9ff">3. 完整 demo：</span></p><blockquote><p>附带了 <code>swagger</code> 的接口路由和 <code>django-admin</code> 后台管理路由</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url  <br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin  <br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> include, path, re_path  <br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve  <br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routers  <br><span class="hljs-keyword">from</span> rest_framework.documentation <span class="hljs-keyword">import</span> include_docs_urls  <br><span class="hljs-keyword">from</span> rest_framework.schemas <span class="hljs-keyword">import</span> get_schema_view  <br><span class="hljs-keyword">from</span> rest_framework_swagger.renderers <span class="hljs-keyword">import</span> SwaggerUIRenderer, OpenAPICodec  <br><span class="hljs-keyword">from</span> AIResume <span class="hljs-keyword">import</span> settings  <br><span class="hljs-keyword">from</span> smartresume.views <span class="hljs-keyword">import</span> auth_user_api, platform_user_api, resume_api, job_api  <br>  <br>schema_view = get_schema_view(title=<span class="hljs-string">&#x27;智能简历平台接口文档&#x27;</span>, renderer_classes=[SwaggerUIRenderer, OpenAPICodec])  <br>  <br>router = routers.DefaultRouter()  <br>  <br>router.register(<span class="hljs-string">r&#x27;users&#x27;</span>, auth_user_api.UserViewSet, basename=<span class="hljs-string">&quot;auth_users_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;groups&#x27;</span>, auth_user_api.GroupViewSet, basename=<span class="hljs-string">&quot;auth_groups_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;platform_users&#x27;</span>, platform_user_api.PuserViewSet, basename=<span class="hljs-string">&quot;platform_users_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;resumes&#x27;</span>, resume_api.ResumeViewSet, basename=<span class="hljs-string">&quot;resume_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;jobs&#x27;</span>, job_api.JobViewSet, basename=<span class="hljs-string">&quot;job_api&quot;</span>)  <br>urlpatterns = [  <br>    re_path(<span class="hljs-string">r&quot;^static/(?P&lt;path&gt;.*)$&quot;</span>, serve, &#123;<span class="hljs-string">&quot;document_root&quot;</span>: settings.STATIC_ROOT&#125;, name=<span class="hljs-string">&#x27;static&#x27;</span>),  <span class="hljs-comment"># 新增的路径  </span><br>    re_path(<span class="hljs-string">r&#x27;^media/(?P&lt;path&gt;.*)$&#x27;</span>, serve, &#123;<span class="hljs-string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;, name=<span class="hljs-string">&#x27;media&#x27;</span>),  <br>    path(<span class="hljs-string">r&#x27;&#x27;</span>, include(router.urls)),  <br>    path(<span class="hljs-string">r&#x27;api-auth/&#x27;</span>, include(<span class="hljs-string">&#x27;rest_framework.urls&#x27;</span>)),  <br>    url(<span class="hljs-string">r&#x27;^admin/&#x27;</span>, admin.site.urls),  <br>    path(<span class="hljs-string">&#x27;docs2/&#x27;</span>, schema_view, name=<span class="hljs-string">&#x27;docs&#x27;</span>),  <br>    path(<span class="hljs-string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="hljs-string">&#x27;智能简历平台接口文档&#x27;</span>)),  <br>]  <br>  <br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure><h2 id="2-视图集中附加-action-的声明"><a href="#2-视图集中附加-action-的声明" class="headerlink" title="2. 视图集中附加 action 的声明"></a>2. 视图集中附加 action 的声明</h2><blockquote><p>在视图集中，如果想要让 Router 自动帮助我们为自定义的动作生成路由信息，需要使用 <code>rest_framework.decorators.action</code> 装饰器。</p></blockquote><pre><code class="hljs">以 action 装饰器装饰的方法名会作为 action 动作名，与 list、retrieve 等同。</code></pre><p>action装饰器可以接收两个参数：</p><ul><li><strong>methods</strong>: 声明该action对应的请求方式，列表传递</li><li><strong>detail</strong>: 声明该action的路径是否与单一资源对应  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">路由前缀/&lt;pk&gt;<span class="hljs-regexp">/action方法名/</span><br></code></pre></td></tr></table></figure><ul><li>  True 表示路径格式是<code>xxx/&lt;pk&gt;/action方法名/</code></li><li>  False 表示路径格式是<code>xxx/action方法名/</code></li></ul></li><li>  url_path：声明该 action 的路由尾缀。</li></ul><p>demo：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> ModelViewSet<br><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> action<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Book.objects<br>    serializer_class = BookSerializer<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    action装饰器的作用：告诉路由类给视图集的自定义方法生成路由信息</span><br><span class="hljs-string">    methods, 列表，允许哪些http请求能访问当前视图方法</span><br><span class="hljs-string">    detail，布尔，生成路由时是否拼接pk参数</span><br><span class="hljs-string">            detail为True，表示路径名格式应该为 book/&#123;pk&#125;/login/</span><br><span class="hljs-string">    url_path，字符串，生成路由时末尾路由路径，如果没有声明，则自动以当前方法名作为路由尾缀</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-meta">    @action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>], detail=<span class="hljs-literal">True</span>,url_path=<span class="hljs-string">&quot;login&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self, request,pk</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;登录&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;msg&quot;</span>:request.method&#125;)<br><br>    <span class="hljs-comment"># detail为False 表示路径名格式应该为 book/get_new_5/</span><br><span class="hljs-meta">    @action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>], detail=<span class="hljs-literal">False</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_5</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;获取最新添加的5本书&quot;&quot;&quot;</span><br>        ...<br></code></pre></td></tr></table></figure><p>上述方法自动为此视图集自定义 action 方法形成的路由会是如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">^book/get_new_5/$    name: book-get_new_5<br>^book/&#123;pk&#125;/login/$   name: book-login<br></code></pre></td></tr></table></figure><hr><h2 id="6-其它组件"><a href="#6-其它组件" class="headerlink" title="6. 其它组件"></a>6. 其它组件</h2><h3 id="1-认证"><a href="#1-认证" class="headerlink" title="1. 认证"></a>1. 认证</h3><h4 id="1-全局认证"><a href="#1-全局认证" class="headerlink" title="1. 全局认证"></a>1. 全局认证</h4><blockquote><p>没有设置用户配置认证时，默认认证为以下两个认证。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;  <br><span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [  <br>    <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,  <br>    <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>  <br>],<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-局部认证"><a href="#2-局部认证" class="headerlink" title="2. 局部认证"></a>2. 局部认证</h4><ol><li><p>继承认证基类, 写自己的认证类，并重写 authenticate（）方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthentication</span>(<span class="hljs-title class_ inherited__">SessionAuthentication</span>):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):  <br>        token = request.query_params.get(<span class="hljs-string">&#x27;token&#x27;</span>)  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:  <br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)  <br>        user_obj = Puser.objects.<span class="hljs-built_in">filter</span>(token=token).first()  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:  <br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)  <br>        <span class="hljs-keyword">return</span> user_obj, token<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&quot;MyAPI&quot;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>视图函数设置 authentication_classes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">authentication_classes = [MyAuthentication,]<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-权限"><a href="#2-权限" class="headerlink" title="2. 权限"></a>2. 权限</h3><h3 id="3-限流"><a href="#3-限流" class="headerlink" title="3. 限流"></a>3. 限流</h3><blockquote><p>控制用户或管理员等访问接口的频次，减轻服务压力</p></blockquote><p>1） AnonRateThrottle</p><p>限制所有匿名未认证用户，使用IP区分用户。【很多公司这样的，IP结合设备信息来判断，当然比IP要靠谱一点点而已】</p><p>使用<code>DEFAULT_THROTTLE_RATES[&#39;anon&#39;]</code> 来设置频次</p><p>2）UserRateThrottle</p><p>限制认证用户，使用User模型的 id主键 来区分。</p><p>使用<code>DEFAULT_THROTTLE_RATES[&#39;user&#39;]</code> 来设置频次</p><p>3）ScopedRateThrottle</p><p>限制用户对于每个视图的访问频次，使用 ip 或 user id。</p><p>settings.py，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 限流全局配置</span><br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>:[ <span class="hljs-comment"># 限流配置类</span><br>    <span class="hljs-comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;, # 未认证用户[未登录用户]</span><br>    <span class="hljs-comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;, # 已认证用户[已登录用户]</span><br>        <span class="hljs-string">&#x27;rest_framework.throttling.ScopedRateThrottle&#x27;</span>, <span class="hljs-comment"># 自定义限流</span><br>    ],<br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>:&#123; <span class="hljs-comment"># 频率配置</span><br>        <span class="hljs-string">&#x27;anon&#x27;</span>: <span class="hljs-string">&#x27;2/day&#x27;</span>,  <span class="hljs-comment"># 针对游客的访问频率进行限制，实际上，drf只是识别首字母，但是为了提高代码的维护性，建议写完整单词</span><br>        <span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;5/day&#x27;</span>, <span class="hljs-comment"># 针对会员的访问频率进行限制，</span><br>        <span class="hljs-string">&#x27;vip&#x27;</span>: <span class="hljs-string">&#x27;10/day&#x27;</span>, <span class="hljs-comment"># 针对会员的访问频率进行限制，</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>视图代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> UserRateThrottle<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 限流局部配置[这里需要配合在全局配置中的DEFAULT_THROTTLE_RATES来设置频率]</span><br>    <span class="hljs-comment"># throttle_classes = [UserRateThrottle] # 使用drf限流类来配置频率</span><br>    throttle_scope = <span class="hljs-string">&quot;vip&quot;</span> <span class="hljs-comment"># 自定义频率</span><br></code></pre></td></tr></table></figure><h3 id="4-过滤"><a href="#4-过滤" class="headerlink" title="4. 过滤"></a>4. 过滤</h3><blockquote><p>安装过滤器：<br><code>pip install django-filter </code></p></blockquote><p>在配置文件中增加过滤后端的设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    ...<br>    <span class="hljs-string">&#x27;django_filters&#x27;</span>,  <span class="hljs-comment"># 需要注册应用，</span><br>]<br><br>REST_FRAMEWORK = &#123;<br>    ...<br>    <span class="hljs-string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: (<span class="hljs-string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可通过过滤字段检索数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>): queryset = Student.objects.<span class="hljs-built_in">all</span>() serializer_class = StudentSerializer filter_fields = [<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="5-排序"><a href="#5-排序" class="headerlink" title="5. 排序"></a>5. 排序</h3><blockquote><p>对于列表数据，REST framework 提供了<strong>OrderingFilter</strong>过滤器来帮助我们快速指明数据按照指定字段进行排序。</p></blockquote><p>使用方法：</p><p>在类视图中设置filter_backends，使用<code>rest_framework.filters.OrderingFilter</code>过滤器，REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。</p><p>前端可以传递的ordering参数的可选字段值需要在ordering_fields中指明。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    filter_backends = [OrderingFilter]<br>    ordering_fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>]<br><br><span class="hljs-comment"># 127.0.0.1:8000/books/?ordering=-age</span><br><span class="hljs-comment"># -id 表示针对id字段进行倒序排序</span><br><span class="hljs-comment"># id  表示针对id字段进行升序排序</span><br></code></pre></td></tr></table></figure><p>如果需要在过滤以后再次进行排序，则需要两者结合!</p><blockquote><p>全局配置下的过滤组件不能和排序组件一起使用，只支持局部配置的过滤组件和排序组件一起使用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> ListAPIView<br><span class="hljs-keyword">from</span> students.models <span class="hljs-keyword">import</span> Student<br><span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> StudentModelSerializer<br><span class="hljs-keyword">from</span> django_filters.rest_framework <span class="hljs-keyword">import</span> DjangoFilterBackend<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    filter_fields = [<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>]<br>    <span class="hljs-comment"># 因为局部配置会覆盖全局配置,所以需要重新把过滤组件核心类再次声明,</span><br>    <span class="hljs-comment"># 否则过滤功能会失效</span><br>    filter_backends = [OrderingFilter,DjangoFilterBackend]<br>    ordering_fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="6-分页"><a href="#6-分页" class="headerlink" title="6. 分页"></a>6. 分页</h3><blockquote><p>因为 django 默认提供的分页器主要使用于前后端不分离的业务场景，所以 REST framework 也提供了分页的支持。</p></blockquote><p>我们可以在配置文件中设置全局的分页方式，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:  <span class="hljs-string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,<br>    <span class="hljs-string">&#x27;PAGE_SIZE&#x27;</span>: <span class="hljs-number">100</span>  <span class="hljs-comment"># 每页数目</span><br>&#125;<br>``````<br><br>```python<br><span class="hljs-comment"># 如果在配置settings.py文件中， 设置了全局分页，那么在drf中凡是调用了ListModelMixin的list()，都会自动分页。如果项目中出现大量需要分页的数据，只有少数部分的分页，则可以在少部分的视图类中关闭分页功能。</span><br><span class="hljs-comment"># 另外，视图类在使用过分页以后，务必在编写queryset属性时，模型.objects后面调用结果。例如：</span><br><span class="hljs-comment"># Student.objects.all()</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    pagination_class = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>也可通过自定义 Pagination 类，来为视图添加不同分页行为。在视图中通过 <code>pagination_clas</code> 属性来指明。</p><p>可选分页器：</p><p>1） <strong>PageNumberPagination</strong></p><p>前端访问网址形式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET  http://127.0.0.1:8000/students/?page=4<br></code></pre></td></tr></table></figure><p>可以在子类中定义的属性：</p><ul><li>  page_size 每页数目</li><li>  page_query_param 前端发送的页数关键字名，默认为”page”</li><li>  page_size_query_param 前端发送的每页数目关键字名，默认为None</li><li>  max_page_size 前端最多能设置的每页数量</li></ul><p>分页器类，<code>paginations</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span>  rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination,LimitOffsetPagination<br><span class="hljs-comment"># PageNumberPagination，以页码作为分页条件</span><br><span class="hljs-comment"># page=1&amp;size=10      第1页</span><br><span class="hljs-comment"># page=2&amp;size=10      第2页</span><br><span class="hljs-comment"># ...</span><br><span class="hljs-comment"># LimitOffsetPagination，以数据库查询的limit和offset数值作为分页条件</span><br><span class="hljs-comment"># limit=10&amp;offset=0   第1页</span><br><span class="hljs-comment"># limit=10&amp;offset=10  第2页</span><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-comment"># PageNumberPagination</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentPageNumberPagination</span>(<span class="hljs-title class_ inherited__">PageNumberPagination</span>):<br>    page_query_param = <span class="hljs-string">&quot;page&quot;</span> <span class="hljs-comment"># 查询字符串中代表页码的变量名</span><br>    page_size_query_param = <span class="hljs-string">&quot;size&quot;</span> <span class="hljs-comment"># 查询字符串中代表每一页数据的变量名</span><br>    page_size = <span class="hljs-number">2</span> <span class="hljs-comment"># 每一页的数据量</span><br>    max_page_size = <span class="hljs-number">4</span> <span class="hljs-comment"># 允许客户端通过查询字符串调整的最大单页数据量</span><br></code></pre></td></tr></table></figure><p>视图，<code>views</code> ，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 取消当前视图类的分页效果</span><br>    <span class="hljs-comment"># pagination_class = None</span><br>    <span class="hljs-comment"># 局部分页</span><br>    pagination_class = StudentPageNumberPagination<br></code></pre></td></tr></table></figure><p>2）<strong>LimitOffsetPagination</strong></p><p>前端访问网址形式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET http://127.0.0.1/four/students/?limit=100&amp;offset=100<br></code></pre></td></tr></table></figure><p>可以在子类中定义的属性：</p><ul><li>  default_limit 默认限制，默认值与<code>PAGE_SIZE</code>设置一直</li><li>  limit_query_param limit参数名，默认’limit’</li><li>  offset_query_param offset参数名，默认’offset’</li><li>  max_limit 最大limit限制，默认None</li></ul><p>分页类，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span>  rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination,LimitOffsetPagination<br><span class="hljs-comment"># PageNumberPagination，以页码作为分页条件</span><br><span class="hljs-comment"># page=1&amp;size=10      第1页</span><br><span class="hljs-comment"># page=2&amp;size=10      第2页</span><br><span class="hljs-comment"># LimitOffsetPagination，以数据库查询的limit和offset数值作为分页条件</span><br><span class="hljs-comment"># limit=10&amp;offset=0   第1页</span><br><span class="hljs-comment"># limit=10&amp;offset=10  第2页</span><br><br><span class="hljs-comment"># LimitOffsetPagination</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentLimitOffsetPagination</span>(<span class="hljs-title class_ inherited__">LimitOffsetPagination</span>):<br>    limit_query_param = <span class="hljs-string">&quot;limit&quot;</span> <span class="hljs-comment"># 查询字符串中代表每一页数据的变量名</span><br>    offset_query_param = <span class="hljs-string">&quot;offset&quot;</span> <span class="hljs-comment"># 查询字符串中代表页码的变量名</span><br>    default_limit = <span class="hljs-number">2</span> <span class="hljs-comment"># 每一页的数据量</span><br>    max_limit = <span class="hljs-number">4</span> <span class="hljs-comment"># 允许客户端通过查询字符串调整的最大单页数据量</span><br></code></pre></td></tr></table></figure><p>视图，<code>views</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 取消当前视图类的分页效果</span><br>    <span class="hljs-comment"># pagination_class = None</span><br>    <span class="hljs-comment"># 局部分页</span><br>    pagination_class = StudentLimitOffsetPagination<br></code></pre></td></tr></table></figure><h3 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7. 异常处理"></a>7. 异常处理</h3><blockquote><p>REST framework 提供了异常处理，我们可以自定义异常处理函数。例如我们想在要创建一个自定义异常函数，</p><p>这个函数，我们保存到当前子应用opt中[注意，开发时，我们会找个独立的公共目录来保存这种公共的函数/工具/类库]。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_exception_handler</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-comment"># 先调用REST framework默认的异常处理方法获得标准错误响应对象</span><br>    response = exception_handler(exc, context)<br><br>    <span class="hljs-comment"># 在此处补充自定义的异常处理</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        response.data[<span class="hljs-string">&#x27;status_code&#x27;</span>] = response.status_code<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>在配置文件中声明自定义的异常处理，<code>settings</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;drfdemo.exceptions.custom_excetion_handle&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果未声明，会采用默认的方式，如下</p><p>rest_frame/settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.views.exception_handler&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><p>补充上处理关于数据库的异常，这里使用其他异常来举例：</p><p><code>主应用.exceptions</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义异常函数: 在drf本身提供的异常函数基础上，我们增加更多的异常处理就可以了。</span><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> DatabaseError<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_excetion_handle</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    自定义异常函数，必须要在配置文件中注册才能被drf使用</span><br><span class="hljs-string">    exc: 异常对象，本次发生的异常对象</span><br><span class="hljs-string">    context: 字典，本次发生异常时，python解析器提供的执行上下文</span><br><span class="hljs-string">    所谓的执行上下文[context]，就是程序执行到当前一行代码时，能提供给开发者调用的环境信息异常发生时，代码所在的路径，时间，视图，客户端http请求等等...]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 先让drf处理它能识别的异常</span><br>    response = exception_handler(exc, context)<br>    <span class="hljs-comment"># 在经过了drf的异常处理以后，还是返回None则表示有2种情况:</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 异常发生时的视图对象</span><br>        view = context[<span class="hljs-string">&#x27;view&#x27;</span>]<br>        <span class="hljs-comment"># 异常发生时的http请求</span><br>        request = context[<span class="hljs-string">&quot;request&quot;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc, DatabaseError):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]: %s&#x27;</span> % (view, exc))<br>            response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;服务器内部错误&#x27;</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc, TypeError):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0不能作为除数~&quot;</span>)<br>            <span class="hljs-built_in">print</span>(request)<br>            response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;0不能作为除数&#x27;</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>视图中，故意报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects  <span class="hljs-comment"># 去掉 .all()，就会报错。</span><br>    serializer_class = StudentModelSerializer<br>    pagination_class = StudentPageNumberPagination<br></code></pre></td></tr></table></figure><h4 id="REST-framework定义的异常"><a href="#REST-framework定义的异常" class="headerlink" title="REST framework定义的异常"></a>REST framework定义的异常</h4><blockquote><ul><li>  APIException 所有异常的父类</li><li>  ParseError 解析错误</li><li>  AuthenticationFailed 认证失败</li><li>  NotAuthenticated 尚未认证</li><li>  PermissionDenied 权限决绝</li><li>  NotFound 未找到</li><li>  MethodNotAllowed 请求方式不支持</li><li>  NotAcceptable 要获取的数据格式不支持</li><li>  Throttled 超过限流次数</li><li>  ValidationError 校验失败</li></ul></blockquote><p>也就是说，很多的没有在上面列出来的异常，就需要我们在自定义异常中自己处理了。</p><h3 id="8-自动生成接口文档"><a href="#8-自动生成接口文档" class="headerlink" title="8. 自动生成接口文档"></a>8. 自动生成接口文档</h3><blockquote><p>REST framework 可以自动帮助我们生成接口文档。</p><p>接口文档以网页的方式呈现。</p><p>自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p></blockquote><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install coreapi<br></code></pre></td></tr></table></figure><h4 id="2-设置接口文档访问路径"><a href="#2-设置接口文档访问路径" class="headerlink" title="2. 设置接口文档访问路径"></a>2. 设置接口文档访问路径</h4><p>在总路由中添加接口文档路径。</p><p>文档路由对应的视图配置为<code>rest_framework.documentation.include_docs_urls</code>，</p><p>参数<code>title</code>为接口文档网站的标题。总路由，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.documentation <span class="hljs-keyword">import</span> include_docs_urls<br><br>urlpatterns = [<br>    ...<br>    path(<span class="hljs-string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="hljs-string">&#x27;站点页面标题&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><p>在settings.py中配置接口文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 。。。 其他选项</span><br>    <span class="hljs-comment"># 接口文档</span><br>    <span class="hljs-string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.schemas.AutoSchema&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-文档描述说明的定义位置"><a href="#3-文档描述说明的定义位置" class="headerlink" title="3. 文档描述说明的定义位置"></a>3. 文档描述说明的定义位置</h4><p>1） 单一方法的视图，可直接使用类视图的文档字符串，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListView</span>(generics.ListAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    返回所有图书信息.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListCreateView</span>(generics.ListCreateAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    get:</span><br><span class="hljs-string">    返回所有图书信息.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    post:</span><br><span class="hljs-string">    新建图书.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>3）对于视图集ViewSet，仍在类视图的文档字符串中封开定义，但是应使用action名称区分，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    list:</span><br><span class="hljs-string">    返回图书列表数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    retrieve:</span><br><span class="hljs-string">    返回图书详情数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    latest:</span><br><span class="hljs-string">    返回最新的图书数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    read:</span><br><span class="hljs-string">    修改图书的阅读量</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-访问接口文档网页"><a href="#4-访问接口文档网页" class="headerlink" title="4. 访问接口文档网页"></a>4. 访问接口文档网页</h4><p>浏览器访问 127.0.0.1:8000/docs/，即可看到自动生成的接口文档。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230427154626.png" alt="image.png"></p><p>swagger 接口文档<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230427154712.png" alt="image.png"></p><p>两点说明：</p><p>1） 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read</p><p>2）参数的Description需要在模型类或序列化器类的字段中以help_text选项定义，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):<br>    ...<br>    age = models.IntegerField(default=<span class="hljs-number">0</span>, verbose_name=<span class="hljs-string">&#x27;年龄&#x27;</span>, help_text=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    ...<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentSerializer</span>(serializers.ModelSerializer):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = Student<br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br>        extra_kwargs = &#123;<br>            <span class="hljs-string">&#x27;age&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>,<br>                <span class="hljs-string">&#x27;help_text&#x27;</span>: <span class="hljs-string">&#x27;年龄&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote><p><font color="#ff0000">本文参考了以下文档和视频结合个人感悟记录，若有侵权无意冒犯，及时联系进行处理。如果有看不懂本文的，可以移步查看更加详细的教程文档或者观看相关视频，支持原创作者。 </font></p></blockquote><ol><li><a href="http://www.yuan316.com/post/DRF/">DRF | YUAN</a></li><li><a href="https://www.bilibili.com/video/BV1z5411D7BQ/?p=21&spm_id_from=pageDriver&vd_source=9c896fa9c3f9023797e8efe7be0c113e">21 DRF应用的认证组件_哔哩哔哩_bilibili</a></li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script><meting-js metin="meting" auto=" https://y.qq.com/n/ryqq/song/003kIhRR4Vr0cV.html" autoplay=" true" ></meting-js>]]></content>
    
    
    <summary type="html">it is some basic usage of drf .</summary>
    
    
    
    <category term="Front_end_development" scheme="https://alleyf.github.io/categories/Front-end-development/"/>
    
    
    <category term="Django" scheme="https://alleyf.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>初识 uni-app</title>
    <link href="https://alleyf.github.io/2023/04/5d72eb9cc9af.html"/>
    <id>https://alleyf.github.io/2023/04/5d72eb9cc9af.html</id>
    <published>2023-04-16T08:49:22.000Z</published>
    <updated>2023-04-20T16:23:25.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><blockquote><p>知识点：网络请求、模板语法、打开页面和页面传参。</p></blockquote><h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><blockquote><p>基础组件分为以下十几大类：</p></blockquote><h2 id="视图容器（View-Container）："><a href="#视图容器（View-Container）：" class="headerlink" title="视图容器（View Container）："></a>视图容器（View Container）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/view">view</a></p><p>视图容器，类似于HTML中的div</p><p><a href="https://uniapp.dcloud.net.cn/component/scroll-view">scroll-view</a></p><p>可滚动视图容器</p><p><a href="https://uniapp.dcloud.net.cn/component/swiper">swiper</a></p><p>滑块视图容器，比如用于轮播banner</p><p><a href="https://uniapp.dcloud.net.cn/component/match-media">match-media</a></p><p>屏幕动态适配组件，比如窄屏上不显示某些内容</p><p><a href="https://uniapp.dcloud.net.cn/component/movable-view#movable-area">movable-area</a></p><p>可拖动区域</p><p><a href="https://uniapp.dcloud.net.cn/component/movable-view#movable-view">movable-view</a></p><p>可移动的视图容器，在页面中可以拖拽滑动或双指缩放。movable-view必须在movable-area组件中</p><p><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-view">cover-view</a></p><p>可覆盖在原生组件的上的文本组件</p><p><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-image">cover-image</a></p><p>可覆盖在原生组件的上的图片组件</p></blockquote><h2 id="基础内容（Basic-Content）："><a href="#基础内容（Basic-Content）：" class="headerlink" title="基础内容（Basic Content）："></a>基础内容（Basic Content）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/icon">icon</a></p><p>图标</p><p><a href="https://uniapp.dcloud.net.cn/component/text">text</a></p><p>文字</p><p><a href="https://uniapp.dcloud.net.cn/component/rich-text">rich-text</a></p><p>富文本显示组件</p><p><a href="https://uniapp.dcloud.net.cn/component/progress">progress</a></p><p>进度条</p></blockquote><h2 id="表单组件（Form）："><a href="#表单组件（Form）：" class="headerlink" title="表单组件（Form）："></a>表单组件（Form）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/button">button</a></p><p>按钮</p><p><a href="https://uniapp.dcloud.net.cn/component/checkbox">checkbox</a></p><p>多项选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/editor">editor</a></p><p>富文本输入框</p><p><a href="https://uniapp.dcloud.net.cn/component/form">form</a></p><p>表单</p><p><a href="https://uniapp.dcloud.net.cn/component/input">input</a></p><p>输入框</p><p><a href="https://uniapp.dcloud.net.cn/component/label">label</a></p><p>标签</p><p><a href="https://uniapp.dcloud.net.cn/component/picker">picker</a></p><p>弹出式列表选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/picker-view">picker-view</a></p><p>窗体内嵌式列表选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/radio">radio</a></p><p>单项选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/slider">slider</a></p><p>滑动选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/switch">switch</a></p><p>开关选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/textarea">textarea</a></p><p>多行文本输入框</p></blockquote><h2 id="路由与页面跳转（Navigation）："><a href="#路由与页面跳转（Navigation）：" class="headerlink" title="路由与页面跳转（Navigation）："></a>路由与页面跳转（Navigation）：</h2><blockquote><p>[!NOTE] 组件<br><a href="https://uniapp.dcloud.net.cn/component/navigator">navigator</a></p><p>页面链接。类似于HTML中的a标签</p><h2 id="媒体组件（Media）："><a href="#媒体组件（Media）：" class="headerlink" title="媒体组件（Media）："></a>媒体组件（Media）：</h2><p><a href="https://uniapp.dcloud.net.cn/component/audio">audio</a></p><p>音频</p><p><a href="https://uniapp.dcloud.net.cn/component/camera">camera</a></p><p>相机</p><p><a href="https://uniapp.dcloud.net.cn/component/image">image</a></p><p>图片</p><p><a href="https://uniapp.dcloud.net.cn/component/video">video</a></p><p>视频</p><p><a href="https://uniapp.dcloud.net.cn/component/live-player">live-player</a></p><p>直播播放</p><p><a href="https://uniapp.dcloud.net.cn/component/live-pusher">live-pusher</a></p><p>实时音视频录制，也称直播推流</p></blockquote><h2 id="地图（Map）："><a href="#地图（Map）：" class="headerlink" title="地图（Map）："></a>地图（Map）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/map">map</a></p><p>地图</p></blockquote><h2 id="画布（Canvas）："><a href="#画布（Canvas）：" class="headerlink" title="画布（Canvas）："></a>画布（Canvas）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/canvas">canvas</a></p><p>画布</p></blockquote><h2 id="webview（Web-view）："><a href="#webview（Web-view）：" class="headerlink" title="webview（Web-view）："></a>webview（Web-view）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/web-view">web-view</a></p><p>web浏览器组件</p></blockquote><blockquote><h2 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h2><p><a href="https://uniapp.dcloud.net.cn/component/ad">ad</a></p><p>广告组件</p><p><a href="https://uniapp.dcloud.net.cn/component/ad-draw">ad-draw</a></p><p>沉浸视频流广告组件</p></blockquote><h2 id="页面属性配置"><a href="#页面属性配置" class="headerlink" title="页面属性配置"></a>页面属性配置</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/custom-tab-bar">custom-tab-bar</a></p><p>底部tabbar自定义组件</p><p><a href="https://uniapp.dcloud.net.cn/component/navigation-bar">navigation-bar</a></p><p>页面顶部导航</p><p><a href="https://uniapp.dcloud.net.cn/component/page-meta">page-meta</a></p><p>页面属性配置节点</p></blockquote><h2 id="uniCloud"><a href="#uniCloud" class="headerlink" title="uniCloud"></a>uniCloud</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/uniCloud/unicloud-db">unicloud-db组件</a></p><p>uniCloud数据库访问和操作组件</p></blockquote>]]></content>
    
    
    <summary type="html">it is some basic usage of uni-app .</summary>
    
    
    
    <category term="Front_end_development" scheme="https://alleyf.github.io/categories/Front-end-development/"/>
    
    
    <category term="uni-app" scheme="https://alleyf.github.io/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>初识Vue</title>
    <link href="https://alleyf.github.io/2023/04/3dbbbdf5122f.html"/>
    <id>https://alleyf.github.io/2023/04/3dbbbdf5122f.html</id>
    <published>2023-04-16T08:29:16.000Z</published>
    <updated>2023-09-27T14:36:46.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-生命周期函数"><a href="#1-生命周期函数" class="headerlink" title="1. 生命周期函数"></a>1. 生命周期函数</h1><table><thead><tr><th>生命周期钩子函数</th><th>实例处于阶段</th><th>描述</th><th>能否获取到 el (this.$el)</th><th>能否获取到 data (this. Xxx)</th><th>能否使用 methods 中的方法 (this. Xxx ())</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td><td>实例已初始化,但数据观测,watch/event 事件回调还未配置</td><td>获取不到</td><td>不能</td><td>不能</td></tr><tr><td>created</td><td>创建后</td><td>已完成如下配置,数据观测 (data observer),property 和方法的运算,watch/event 事件回调</td><td>获取不到</td><td>能</td><td>能</td></tr><tr><td>beforeMount</td><td>挂载前</td><td>dom 已初始化,但并未挂载和渲染</td><td>能</td><td>能</td><td>能</td></tr><tr><td>mounted</td><td>挂载后</td><td>dom 已完成挂载和渲染</td><td>能</td><td>能</td><td>能</td></tr><tr><td>beforeUpdate</td><td>更新前</td><td>数据已改变,但 dom 未更新</td><td>能</td><td>能</td><td>能</td></tr><tr><td>updated</td><td>更新后</td><td>dom 已更新</td><td>能</td><td>能</td><td>能</td></tr><tr><td>beforeDestroy</td><td>销毁前</td><td>实例销毁前,实例仍然可用</td><td>能</td><td>能</td><td>能</td></tr><tr><td>destroyed</td><td>销毁后</td><td>实例已销毁,所有指令被解绑,事件监听器被移除,子实例都被销毁</td><td>能</td><td>能</td><td>能</td></tr></tbody></table><h1 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h1><h2 id="声明式-API"><a href="#声明式-API" class="headerlink" title="声明式 API"></a>声明式 API</h2><blockquote><p>Vue 的核心功能是<em><strong>声明式渲染</strong></em>:通过扩展于标准 HTML 的模板语法,我们可以根据 JavaScript 的状态来描述 HTML 应该是什么样子的。当状态改变时,HTML 会自动更新。</p></blockquote><p>我们可以使用 <code>data</code> 组件选项来声明响应式状态,该选项应该是一个返回对象的函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>message</code> 属性可以在模板中使用。下面展示了我们如何使用双花括号法,根据 <code>message</code> 的值来渲染动态文本:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在双花括号中的内容并<strong>不只限于标识符或路径</strong>——我们可以使用任何<em><strong>有效的 JavaScript 表达式</strong></em>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="组合式-API"><a href="#组合式-API" class="headerlink" title="组合式 API"></a>组合式 API</h2><p>我们可以使用 Vue 的 <code>reactive()</code> API 来声明响应式状态。由 <code>reactive()</code> 创建的对象都是 JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>,其行为与普通对象一样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-property">count</span>) <span class="hljs-comment">// 0</span><br>counter.<span class="hljs-property">count</span>++<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br><code>reactive()</code> 只适用于对象 (包括数组和内置类型,如 <code>Map</code> 和 <code>Set</code>)。而另一个 API <code>ref()</code> 则可以接受任何值类型。<code>ref</code> 会返回一个包裹对象,并在 <code>.value</code> 属性下暴露内部值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> message = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message.<span class="hljs-property">value</span>) <span class="hljs-comment">// &quot;Hello World!&quot;</span><br>message.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;Changed&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>在组件的 <code>&lt;script setup&gt;</code> 块中声明的响应式状态,可以直接在模板中使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>count is: &#123;&#123; counter.count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用任何<em><strong>有效的 JavaScript 表达式</strong></em></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h1 id="3-基础语法"><a href="#3-基础语法" class="headerlink" title="3. 基础语法"></a>3. 基础语法</h1><h2 id="1-属性绑定"><a href="#1-属性绑定" class="headerlink" title="1. 属性绑定"></a>1. 属性绑定</h2><blockquote><p>双大括号只能进行文本插值,为了给 attribute 绑定一个动态值,需要使用 <code>v-bind</code> 指令, 可以缩写只用 <code>:</code> 表示属性绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态绑定多个属性"><a href="#动态绑定多个属性" class="headerlink" title="动态绑定多个属性"></a>动态绑定多个属性</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> objectOfAttrs = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;container&#x27;</span>,<br>  <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;wrapper&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过不带参数的 <code>v-bind</code>,你可以将它们绑定到单个元素上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;objectOfAttrs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;info:info,danger:danger&#125;&quot;</span>&gt;</span>我叫:&#123;&#123;name&#125;&#125;,年龄:&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">info</span>: <span class="hljs-literal">true</span>,  <br><span class="hljs-attr">danger</span>: <span class="hljs-literal">false</span>,  <br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[info,danger]&quot;</span>&gt;</span>我叫:&#123;&#123;name&#125;&#125;,年龄:&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">info</span>: <span class="hljs-string">&quot;c1&quot;</span>, <br><span class="hljs-attr">danger</span>: <span class="hljs-string">&quot;c2&quot;</span>,  <br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><blockquote><p>可以在绑定的表达式中使用一个组件暴露的方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;toTitleDate(date)&quot;</span>&gt;</span><br>  &#123;&#123; formatDate(date) &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-事件监听"><a href="#2-事件监听" class="headerlink" title="2. 事件监听"></a>2. 事件监听</h2><blockquote><p>使用 <code>v-on</code> 指令监听 DOM 事件,可以简写为 <code>@</code>,表示事件监听</p></blockquote><h3 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 更新组件状态</span><br>  count.<span class="hljs-property">value</span>++<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="带传参"><a href="#带传参" class="headerlink" title="带传参"></a>带传参</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">mouseover</span>=<span class="hljs-string">&quot;dosomething(&#x27;过来了&#x27;)&quot;</span> @<span class="hljs-attr">mouseout</span>=<span class="hljs-string">&quot;dosomething(&#x27;离开了&#x27;)&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;  <br><span class="hljs-attr">dosomething</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>)&#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-表单绑定"><a href="#3-表单绑定" class="headerlink" title="3. 表单绑定"></a>3. 表单绑定</h2><blockquote><p>同时使用 <code>v-bind</code> 和 <code>v-on</code> 来在表单的输入元素上创建双向绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;onInput&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onInput</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// v-on 处理函数会接收原生 DOM 事件</span><br>  <span class="hljs-comment">// 作为其参数。</span><br>  text.<span class="hljs-property">value</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>简化双向绑定,Vue 提供了一个 <code>v-model</code> 指令,它实际上是上述操作的语法糖</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips</p><ol><li><code>v-model</code> 会将被绑定的值与 <code>&lt;input&gt;</code> 的值自动同步</li><li><code>v-model</code> 不仅支持文本输入框,也支持诸如多选框、单选框、下拉框之类的输入类型</li></ol></blockquote><p><strong>完整 demo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>const text = ref(&#x27;&#x27;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;input v-model=&quot;text&quot; placeholder=&quot;Type here&quot;&gt;<br>  &lt;p&gt;&#123;&#123; text &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><blockquote><p>demo</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.2.47/vue.global.min.js&quot;&gt;&lt;/script&gt;--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">  </span><br><span class="language-css"><span class="hljs-selector-class">.info</span> &#123;  </span><br><span class="language-css"><span class="hljs-attribute">color</span>: aquamarine;  </span><br><span class="language-css">&#125;  </span><br><span class="language-css"><span class="hljs-selector-class">.danger</span> &#123;  </span><br><span class="language-css"><span class="hljs-attribute">color</span>: red;  </span><br><span class="language-css">&#125;  </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br>男:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>  <br>女:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br>篮球:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>  <br>足球:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>  <br>排球:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.city&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c3&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c4&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.field&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f1&quot;</span>&gt;</span>前端<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f2&quot;</span>&gt;</span>后端<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f3&quot;</span>&gt;</span>运维<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f4&quot;</span>&gt;</span>算法<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.other&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clickme&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript">info : &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;1&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">hobby</span>: [<span class="hljs-string">&quot;h1&quot;</span>],  </span><br><span class="language-javascript"><span class="hljs-attr">city</span>: <span class="hljs-string">&quot;c1&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">field</span>: [<span class="hljs-string">&quot;f1&quot;</span>],  </span><br><span class="language-javascript"><span class="hljs-attr">other</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">clickme</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>)  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="4-条件渲染"><a href="#4-条件渲染" class="headerlink" title="4. 条件渲染"></a>4. 条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><blockquote><p>使用 <code>v-if</code> 指令来==<strong>有条件地渲染元素</strong>==（不一定渲染）, 也可以使用 <code>v-else</code> 和 <code>v-else-if</code> 来表示其他的条件分支</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;<span class="hljs-title class_">Vue</span> is awesome!&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>Oh no 😢<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><blockquote><p>v-show 根据**==变量的真假==<strong>决定是否显示该标签（</strong><em>一定会渲染但不一定显示</em>**）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=false&quot;</span>&gt;</span>用户名登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=true&quot;</span>&gt;</span>手机号登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">issms</span>: <span class="hljs-literal">false</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-列表渲染"><a href="#5-列表渲染" class="headerlink" title="5. 列表渲染"></a>5. 列表渲染</h2><blockquote><p>使用 <code>v-for</code> 指令来渲染一个基于源数组的列表</p></blockquote><h3 id="无索引"><a href="#无索引" class="headerlink" title="无索引"></a>无索引</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;todo.id&quot;</span>&gt;</span><br>    &#123;&#123; todo.text &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><ol><li><code>todo</code> 是一个局部变量,表示当前正在迭代的数组元素。它只能在 <code>v-for</code> 所绑定的元素上或是其内部访问,就像函数的作用域一样.</li><li>key 属性将它（唯一标识主键）作为<a href="https://cn.vuejs.org/api/built-in-special-attributes.html#key">特殊的 <code>key</code> attribute</a> 绑定到每个 <code>&lt;li&gt;</code></li></ol></blockquote><blockquote><p>更新列表有两种方式:<br>    1. 在源数组上调用变更方法:<br>        <code>todos.value.push(newTodo)</code><br>      2. 使用新的数组替代原数组:<br>        <code>todos.value = todos.value.filter(/* ... */)</code> </p></blockquote><p>完整 demo（实现列表动态增删）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-comment">// 给每个 todo 对象一个唯一的 id</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> newTodo = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> todos = <span class="hljs-title function_">ref</span>([</span><br><span class="language-javascript">  &#123; <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Learn HTML&#x27;</span> &#125;,</span><br><span class="language-javascript">  &#123; <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span><br><span class="language-javascript">  &#123; <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Learn Vue&#x27;</span> &#125;</span><br><span class="language-javascript">])</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// ...</span></span><br><span class="language-javascript">  todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">id</span>:id++,<span class="hljs-attr">text</span>:newTodo.<span class="hljs-property">value</span>&#125;)</span><br><span class="language-javascript">  newTodo.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeTodo</span>(<span class="hljs-params">todo</span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// 方法1</span></span><br><span class="language-javascript">  todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">pop</span>(todo)</span><br><span class="language-javascript">  <span class="hljs-comment">// 方法2</span></span><br><span class="language-javascript">  todos.<span class="hljs-property">value</span> = todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t !== todo)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;addTodo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;newTodo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Add Todo<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;todo.id&quot;</span>&gt;</span><br>      &#123;&#123; todo.text &#125;&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeTodo(todo)&quot;</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="有索引"><a href="#有索引" class="headerlink" title="有索引"></a>有索引</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(todo,index) in todos&quot;</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&#123;&#123;index&#125;&#125;</span>&gt;</span><br>    &#123;&#123; todo &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="有键值"><a href="#有键值" class="headerlink" title="有键值"></a>有键值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key) in item&quot;</span>&gt;</span><br>    &#123;&#123; key &#125;&#125;:&#123;&#123;value&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-计算属性"><a href="#6-计算属性" class="headerlink" title="6. 计算属性"></a>6. 计算属性</h2><blockquote><ol><li><a href="https://cn.vuejs.org/guide/essentials/computed.html"><code>computed()</code></a>。它可以让我们创建一个计算属性 ref,这个 ref 会动态地根据其他响应式数据源来计算其 <code>.value</code></li><li>computed <code>(计算属性)</code> 可用于快速计算视图（View）中显示的属性。这些计算将被<strong>缓存</strong>,并且只在需要时更新。computed 设置的初衷是能够<strong>解决复杂的计算</strong>,而不是直接在模板字符串里进行运算。</li></ol></blockquote><p>实现显示（隐藏）已完成的 todos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, computed &#125; from &#x27;vue&#x27;<br>let id = 0<br>const newTodo = ref(&#x27;&#x27;)<br>const hideCompleted = ref(false)<br>const todos = ref([<br>  &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;,<br>  &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;,<br>  &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;<br>])<br>const filteredTodos = computed(() =&gt; &#123;<br>  return hideCompleted.value<br>    ? todos.value.filter((t) =&gt; !t.done)<br>    : todos.value<br>&#125;)<br>function addTodo() &#123;<br>  todos.value.push(&#123; id: id++, text: newTodo.value, done: false &#125;)<br>  newTodo.value = &#x27;&#x27;<br>&#125;<br>function removeTodo(todo) &#123;<br>  todos.value = todos.value.filter((t) =&gt; t !== todo)<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;<br>    &lt;input v-model=&quot;newTodo&quot;&gt;<br>    &lt;button&gt;Add Todo&lt;/button&gt;<br>  &lt;/form&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;todo in filteredTodos&quot; :key=&quot;todo.id&quot;&gt;<br>      &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt;<br>      &lt;span :class=&quot;&#123; done: todo.done &#125;&quot;&gt;&#123;&#123; todo.text &#125;&#125;&lt;/span&gt;<br>      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>  &lt;button @click=&quot;hideCompleted = !hideCompleted&quot;&gt;<br>    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br>&lt;style&gt;<br>.done &#123;<br>  text-decoration: line-through;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="7-文本插值"><a href="#7-文本插值" class="headerlink" title="7. 文本插值"></a>7. 文本插值</h2><blockquote><p>最基本的数据绑定形式是文本插值,它使用的是“Mustache”语法 (即双大括号)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>双大括号标签会被替换为<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#declaring-reactive-state">相应组件实例中</a> <code>msg</code> 属性的值。同时每次 <code>msg</code> 属性更改时它也会同步更新。</p></blockquote><h2 id="8-原始-HTML"><a href="#8-原始-HTML" class="headerlink" title="8. 原始 HTML"></a>8. 原始 HTML</h2><blockquote><p>双大括号会将数据解释为纯文本,而不是 HTML。若想插入 HTML,需要使用 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-html"><code>v-html</code> 指令</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="4-Demo-1-表格增删"><a href="#4-Demo-1-表格增删" class="headerlink" title="4. Demo 1 表格增删"></a>4. Demo 1 表格增删</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;adduser&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(user,uid) in users&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.pwd&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.name!=&#x27;&#x27; &amp;&amp; user.pwd!=&#x27;&#x27;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deluser(uid)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">users</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-string">&quot;&quot;</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">adduser</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">let</span> userinfo = &#123;<span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">pwd</span>&#125;;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">push</span>(userinfo);  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>=<span class="hljs-string">&quot;&quot;</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">pwd</span>=<span class="hljs-string">&quot;&quot;</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userinfo);  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">deluser</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">uid</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">splice</span>(uid,<span class="hljs-number">1</span>);  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-Demo-2-登录（axios）"><a href="#5-Demo-2-登录（axios）" class="headerlink" title="5. Demo 2 登录（axios）"></a>5. Demo 2 登录（axios）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=false&quot;</span>&gt;</span>用户名登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=true&quot;</span>&gt;</span>手机号登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sms.phone&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>验证码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;验证码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sms.code&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">issms</span>: <span class="hljs-literal">false</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">info</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">sms</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">code</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">login</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">let</span> dataobj = <span class="hljs-variable language_">this</span>.<span class="hljs-property">issms</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">sms</span> : <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>;  </span><br><span class="language-javascript"><span class="hljs-title function_">axios</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost/login&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">parameters</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: dataobj,  </span><br><span class="language-javascript"><span class="hljs-attr">headers</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);  </span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-组件"><a href="#6-组件" class="headerlink" title="6. 组件"></a>6. 组件</h1><blockquote><p>提高相同代码的复用率。</p></blockquote><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><blockquote><pre><code class="hljs">局部组件需要挂载到 Vue 根组件上,***components: &#123;  alias: component&#125;  </code></pre></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo4<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- 引入局部子组件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">  </span></span><br><span class="language-xml"><span class="language-handlebars">const login = &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">data: function () &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">msg: &quot;局部组件&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">username: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">pwd: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">template: `  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars">`,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;;  </span></span><br><span class="language-xml"><span class="language-handlebars">var app = new Vue(&#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">el: &quot;#app&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">data: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">components: &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">login: login,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)  </span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><blockquote><pre><code class="hljs">全局子组件不用挂载到 Vue 上,直接用***Vue. Component (&#39;component_name&#39;,&#123;&#125;）***</code></pre></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo5<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- 引入全局子组件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">  </span></span><br><span class="language-xml"><span class="language-handlebars">Vue.component(&#x27;login&#x27;, &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">data: function () &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">msg: &quot;局部组件&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">username: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">pwd: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">template: `  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars">`,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);  </span></span><br><span class="language-xml"><span class="language-handlebars">var app = new Vue(&#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">el: &quot;#app&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">data: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)  </span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="7-路由"><a href="#7-路由" class="headerlink" title="7. 路由"></a>7. 路由</h1><blockquote><p>引入 vue-router:<br><code> &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.1.6/vue-router.global.min.js&quot;&gt;&lt;/script&gt;</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@3.5.3/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/course&quot;</span>&gt;</span>课程<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;首页组件&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Course</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;课程组件&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">routes</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/course&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Course</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;);  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">components</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-title class_">Home</span>: <span class="hljs-title class_">Home</span>,  </span><br><span class="language-javascript"><span class="hljs-title class_">Course</span>: <span class="hljs-title class_">Course</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">router</span>: router  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="8-路由使用"><a href="#8-路由使用" class="headerlink" title="8. 路由使用"></a>8. 路由使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@3.5.3/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">imgls</span>: [],  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-title function_">axios</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://picsum.photos/v2/list&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">headers</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>  </span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span> = res.<span class="hljs-property">data</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span>, res.<span class="hljs-property">data</span>);  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-comment">// console.log(error);  </span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span>)  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div class=&quot;red&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div v-for=&quot;img in imgls&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;a :href=&quot;img.download_url&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;img :src=&quot;img.url&quot; style=&quot;align-content: center&quot; alt=&quot;加载图片失败&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/a&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">routes</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;);  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">components</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-title class_">Home</span>: <span class="hljs-title class_">Home</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">router</span>: router,  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="9-Element-UI-使用"><a href="#9-Element-UI-使用" class="headerlink" title="9. Element-UI 使用"></a>9. Element-UI 使用</h1><blockquote><p>Element 是国内饿了么公司提供的一套开源前端框架,简洁优雅,提供了 Vue、React、Angular 等多个版本。<br>文档地址: <a href="https://element-plus.org/zh-CN/#/zh-CN">一个 Vue 3 UI 框架 | Element Plus</a><br>安装: npm i element-ui<br>引入 Element:<br>main. js (vue 2):</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>:#app,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>);<br></code></pre></td></tr></table></figure><p>main. js (vue 3):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="第三方图标库"><a href="#第三方图标库" class="headerlink" title="第三方图标库"></a>第三方图标库</h2><p>由于 Element UI 提供的字体图符较少,一般会采用其他图表库,如著名的 Font<br>Awesome<br>Font Awesome 提供了 675 个可缩放的矢量图标,可以使用 cSS 所提供的所有特<br>性对它们进行更改,包括大小、颜色、阴影或者其他任何支持的效果。<br>文档地址: <a href="http://fontawesome.dashgame.com/">http://fontawesome.dashgame.com/</a><br>安装: <code>npm i font-awesome</code><br>使用: <code>import &#39;font-awesome/css/font-awesome.min.css&#39;</code></p><h1 id="10-Axios"><a href="#10-Axios" class="headerlink" title="10. Axios"></a>10. Axios</h1><h2 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h2><blockquote><p>Axios 是一个基于 promise 网络请求库,作用于 node. js 和浏览器中。<br>Axios 在浏览器端使用 XMLHttpRequests 发送网络请求,并能自动完成 JSON<br>数据的转换。<br>安装: npm install axios<br>地址: <a href="https://www.axios-http.cn/">https://www.axios-http.cn/</a></p></blockquote><ol><li>Get 请求:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//向给定ID的用户发起请求</span><br>axios.<span class="hljs-title function_">get</span>(/user?<span class="hljs-variable constant_">ID</span>=<span class="hljs-number">12345</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string"> .then(function(response)&#123;</span><br><span class="hljs-string">   //处理成功情况</span><br><span class="hljs-string">   console.log(response);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .catch(function (error)(</span><br><span class="hljs-string">   //处理错误情况</span><br><span class="hljs-string">   console.log(error);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function （）&#123; </span><br><span class="hljs-string">  //总是会执行</span><br><span class="hljs-string"> &#125;);</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">/／上述请求也可以按以下方式完成（可选）<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user&#x27;,&#123;</span><br><span class="hljs-string">   params:&#123;</span><br><span class="hljs-string">    ID:12345</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function (response)&#123;</span><br><span class="hljs-string">   console.log(response);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .catch(function (error)&#123;</span><br><span class="hljs-string">   console.log(error);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function ()&#123; </span><br><span class="hljs-string">  //总是会执行</span><br><span class="hljs-string"> &#125;);</span><br></code></pre></td></tr></table></figure><ol start="2"><li>POST 请求:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>   <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;Fred&#x27;</span>,<br>   <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;Flintstone&#x27;</span><br>&#125;)<br> .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;)<br> .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br> &#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>异步回调问题（async/await）:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//支持async/await用法</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span>) (<br> <span class="hljs-keyword">try</span> (<br>   <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user?ID=12345&#x27;</span>);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br> &#125; <span class="hljs-keyword">catch</span> (error)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br></code></pre></td></tr></table></figure><ol start="4"><li>其他请求方式:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//发起一个post请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br> <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br> <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/user/12345&#x27;,</span><br><span class="hljs-string"> data: &#123;</span><br><span class="hljs-string">   firstName: &quot;</span><span class="hljs-title class_">Fred</span><span class="hljs-string">&#x27;,</span><br><span class="hljs-string">   lastName:&quot;Flintstone&#x27;</span><br> &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><pre><code class="hljs">axios.get (url, configl)axios.delete (url[, config])axios.head (uri[, config))axios.options (url, config])axios.post (url, datal, configl)axios.put (url, datal, config]l)axios.patch (url, datal, config]l)</code></pre><h2 id="2-与-Vue-整合"><a href="#2-与-Vue-整合" class="headerlink" title="2. 与 Vue 整合"></a>2. 与 Vue 整合</h2><h2 id="3-跨域"><a href="#3-跨域" class="headerlink" title="3. 跨域"></a>3. 跨域</h2><blockquote><ol><li>为了保证浏览器的安全,不同源的客户端脚本在没有明确授权的情况下,不能读写对方资源,称为同源策略,同源策略是浏览器安全的基石</li><li>同源策略 （Sameoriginpolicy）是一种约定,它是浏览器最核心也最基本的安全功能</li><li>所谓同源 (即指在同一个域) 就是两个页面具有相同的协议（protocol）,主机 (host) 和端口号  (port)</li><li>当一个请求 url 的协议、域名、端口三者之间任意一个与当前页面 url 不同即为跨域,此时无法读取非同源网页的 Cookie,无法向非同源地址发送 AJAX 请求</li></ol></blockquote><p>解决方案:</p><ul><li>CORS（Cross-Origin Resource Sharing）是由 W 3 C 制定的一种跨域资源共享技术标准,其目的就是为了解决前端的跨域请求。</li><li>CORS 可以在不破坏即有规则的情况下,通过后端服务器实现 CORS 接口,从而实现跨域通信。</li><li>CORS 将请求分为两类:简单请求和非简单请求,分别对跨域通信提供了支持。</li></ul><h3 id="1-Spring-Boot-中配置-CORS"><a href="#1-Spring-Boot-中配置-CORS" class="headerlink" title="1. Spring Boot 中配置 CORS"></a>1. Spring Boot 中配置 CORS</h3><p>在传统的 Java EE 开发中,可以通过过滤器统一配置,而 Spring Boot 中对此则提供了更加简洁的解决方案<br><strong>方法 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> (<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> (<br>     registry.addMapping（<span class="hljs-string">&quot;/**&quot;</span>）<span class="hljs-comment">//允许跨域访问的路径</span><br>      .allowedorigins（<span class="hljs-string">&quot;*&quot;</span>）<span class="hljs-comment">//允许跨域访问的源</span><br>.allowedMethods(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;OPTIONS&quot;</span>,<span class="hljs-string">&quot;DELETE&quot;</span>）<span class="hljs-comment">//允许请求方法</span><br>      .maxAge（<span class="hljs-number">168000</span>）/／预检间隔时间<br>      .allowedHeaders（<span class="hljs-string">&quot;*&quot;</span>）<span class="hljs-comment">//允许头部设置</span><br>      .allowCredentials（<span class="hljs-literal">true</span>）；<span class="hljs-comment">//是否发送cookie</span><br></code></pre></td></tr></table></figure><p><strong>方法 2:</strong><br>给控制器类前加 CrossOrigin 注解使用默认跨域配置<br><font color="#ff0000">@CrossOrigin</font></p><h2 id="4-全局配置-Axios"><a href="#4-全局配置-Axios" class="headerlink" title="4. 全局配置 Axios"></a>4. 全局配置 Axios</h2><blockquote><p>在实际项目开发中,几乎每个组件中都会用到 axios 发起数据请求。此时会遇到如下两个问题:<br>每个组件中都需要导入 axios<br>每次发请求都需要填写完整的请求路径<br>可以通过全局配置的方式解决上述问题:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//配置请求根路径</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;http://api.com&#x27;</span><br><span class="hljs-comment">//将 axios 作为全局的自定义属性,每个组件可以在内部直接访问 (Vue3)</span><br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$http</span> = axios<br><span class="hljs-comment">//将 axios 作为全局的自定义属性,每个组件可以在内部直接访问 (Vue2)</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$http</span> = axios<br></code></pre></td></tr></table></figure><hr><h1 id="11-VueRouter"><a href="#11-VueRouter" class="headerlink" title="11. VueRouter"></a>11. VueRouter</h1><h2 id="1-安装与使用"><a href="#1-安装与使用" class="headerlink" title="1. 安装与使用"></a>1. 安装与使用</h2><blockquote><ul><li>Vue 路由 vue-router 是官方的路由插件,能够轻松的管理 SPA 项目中组件的切换。</li><li>Vue 的单页面应用是基于路由和组件的,路由用于设定访问路径,并将路径和组件映射起来</li><li>vue-router 目前有 3. x 的版本和 4. x 的版本,vue-router 3. x 只能结合 vue 2 进行使用,vue-router 4. x 只能结合 vue 3 进行使用</li><li>安装: **npm install vue-router@4 **</li></ul></blockquote><h3 id="创建路由组件"><a href="#创建路由组件" class="headerlink" title="创建路由组件"></a>创建路由组件</h3><p>在项目中定义 Discover. vue、Friends. vue、MyMusic. vue 三个组件,将来要使用 vue-router 来控制它们的展示与切换:<br>Discover. vue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发现音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Discover&quot;</span>  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure> <template>     <div>        <h1>发现音乐</h1>     </div> </template>Friends. vue :<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>关注<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Friends&quot;</span>  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure> <template>     <div>         <h1>关注</h1>     </div> </template>MyMusic. vue:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;MyMusic&quot;</span>  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>---### 声明路由链接和占位标签> 可以使用 `<router-link>` 标签来声明路由链接,并使用 `<router-view>` 标签来声明路由占位符。示例代码如下:<p>App. vue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>APP 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--声明路由链接--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover&quot;</span>&gt;</span>发现音乐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mymusic&quot;</span>&gt;</span>我的音乐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/friend&quot;</span>&gt;</span>关注<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-comment">&lt;!--声明路由占位标签--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="创建路由模块"><a href="#创建路由模块" class="headerlink" title="创建路由模块"></a>创建路由模块</h3><p>在项目中创建 index. js 路由模块,加入以下代码:<br>vue 2 路由的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Discover</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Discover. vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Friends</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Friends. vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyMusic</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/MyMusic. vue&#x27;</span><br><span class="hljs-comment">//将 VueRouter 设置为 Vue 的插件</span><br><span class="hljs-title class_">Vue</span>. use (<span class="hljs-title class_">VueRouter</span>)<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (&#123;<br>     <span class="hljs-regexp">/ /</span>指定 hash 属性与组件的对应关系<br>     <span class="hljs-attr">routes</span>: [<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/discover&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Discover</span> &#125;,<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/friends&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Friends</span> &#125;,<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mymusic&#x27;, component: MyMusic&#125;,</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">export default router</span><br></code></pre></td></tr></table></figure><p>vue 3 路由的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView. vue&#x27;</span>  <br><span class="hljs-keyword">const</span> router = createRouter (&#123;  <br><span class="hljs-attr">history</span>: createWebHistory (<span class="hljs-keyword">import</span>. meta. env. <span class="hljs-variable constant_">BASE_URL</span>),  <br><span class="hljs-attr">routes</span>: [  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,  <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span>  <br>&#125;,  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,  <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,  <br><span class="hljs-comment">// route level code-splitting  </span><br><span class="hljs-comment">// this generates a separate chunk (About.[hash]. js) for this route  </span><br><span class="hljs-comment">// which is lazy-loaded when the route is visited.  </span><br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span> (<span class="hljs-string">&#x27;../views/AboutView. vue&#x27;</span>)  <br>&#125;  <br>]  <br>&#125;)  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><hr><h3 id="挂载路由模块"><a href="#挂载路由模块" class="headerlink" title="挂载路由模块"></a>挂载路由模块</h3><p>在 main. js 中导入并挂载 router</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App. vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-title class_">Vue</span>. config. productionTip = <span class="hljs-literal">false</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span> (&#123;<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h (<span class="hljs-title class_">App</span>),<br>router<br>&#125;).<span class="hljs-property">$mount</span> (<span class="hljs-string">&#x27; #app &#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><blockquote><p>路由重定向指的是:用户在访问地址 A 的时候,强制用户跳转到地址 C,从而展示特定的组件页面。</p><p>通过路由规则的 redirect 属性,指定一个新的路由地址,可以很方便地设置路由的重定向:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (t<br>    / /指定 hash 属性与组件的对应关系<br>    <span class="hljs-attr">routes</span>: [<br>       <span class="hljs-comment">//当用户访问／时,跳转到/discover</span><br>      &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/, redirect: &#x27;</span>/discover<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">      &#123;path: &#x27;</span>/discover<span class="hljs-string">&#x27;, component: Discover&#125;,</span><br><span class="hljs-string">      &#123;path: &#x27;</span>/friends<span class="hljs-string">&#x27;, component: Friends&#125;,</span><br><span class="hljs-string">      &#123;path: &#x27;</span>/my<span class="hljs-string">&#x27;, component: MyMusic&#125;</span><br><span class="hljs-string">   ]</span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-子路由"><a href="#2-子路由" class="headerlink" title="2. 子路由"></a>2. 子路由</h2><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><blockquote><p>在 Discover. vue 组件中,声明 toplist 和 playlist 的子路由链接以及子路由占位符。示例代码如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发现音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-comment">&lt;!--子路由链接--&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover/toplist&quot;</span>&gt;</span>推荐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover/playlist&quot;</span>&gt;</span>歌单<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br>在 <code>src/router/index. js</code> 路由模块中,导入需要的组件,并使用 children 属性声明子路由规则:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (t<br>     / /指定 hash 属性与组件的对应关系<br>     <span class="hljs-attr">routes</span>:[<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&#x27;, redirect: &quot;</span>/discover<span class="hljs-string">&#x27;&#125;,</span><br><span class="hljs-string">       &#123;</span><br><span class="hljs-string">           path: &#x27;</span>/discover<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">           component: Discover,</span><br><span class="hljs-string">           //通过 chi 1 dren 属性,嵌套声明子路由</span><br><span class="hljs-string">           chiidren: [</span><br><span class="hljs-string">               &#123; path: &quot;toplist&quot;, component: TopList &#125;,</span><br><span class="hljs-string">               &#123; path: &quot;playlist&quot;, component: PlayList &#125;,</span><br><span class="hljs-string">          ]</span><br><span class="hljs-string">       &#125;,</span><br><span class="hljs-string">&#123; path: &#x27;</span>/friends<span class="hljs-string">&#x27;, component: Friends &#125;,</span><br><span class="hljs-string">&#123; path: &#x27;</span>/mymusic<span class="hljs-string">&#x27;, component: MyMusic &#125;,</span><br><span class="hljs-string">   1</span><br><span class="hljs-string">3)</span><br></code></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>思考:有如下 3 个路由链接:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;router-link to=<span class="hljs-string">&quot;/product/1&quot;</span>&gt;商品 <span class="hljs-number">1</span>&lt;/router-link&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/product/2&quot;</span>&gt;</span>商品 2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/product/3&quot;</span>&gt;</span>商品 3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br> <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (t<br>    / /指定 hash 属性与组件的对应关系<br>    <span class="hljs-attr">routes</span>: [<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/product/1&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>,<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/product/2&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>,<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/product/3&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>,<br>   ]<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>上述方式复用性非常差。<br>动态路由指的是:把 Hash 地址中可变的部分定义为参数项,从而提高路由规则的复用性。在 vue-router 中使用英文的冒号（:）来定义路由的参数项。示例代码如下:<br><code>&#123;path: &quot;/product/: id&#39;, component: Product&#125;</code><br>通过动态路由匹配的方式染出来的组件中,可以使用 <code>$route. params</code> 对象访问到动态匹配的参数值,比如在商品详情组件的内部,<strong>根据 id 值,请求不同的商品数据</strong>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Product 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    ！--获取动态的 id 值--&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>($route. params. id)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br> &lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> t</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//组件的名称</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Product&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>为了简化路由参数的获取形式,vue-router 允许在路由规则中开启 <strong>props</strong> 传参。示例代码如下: <code>&#123; path:/: id&#39;, component: Product, props: true&#125;</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Product 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>   &lt;!--获取动态的id值--&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123;id&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//组件的名称</span></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Product&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"> props : [<span class="hljs-string">&quot;id&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><table><thead><tr><th align="center">声明式</th><th align="center">编程式</th></tr></thead><tbody><tr><td align="center"><code>&lt;router-link :to=&quot;...&quot; &gt;</code></td><td align="center"><code>router. push (...)</code></td></tr></tbody></table><blockquote><ul><li><p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接,我们还可以借助 router 的实例方法,通过编写代码来实现。</p></li><li><p>想要导航到不同的 URL,则使用 <code>router. push</code> 方法。这个方法会向 history 栈添加一个新的记录,所以,当用户点击浏览器后退按钮时,则回到之前的 URL。</p></li><li><p>当你点击 <code>&lt;router-link&gt;</code> 时,这个方法会在内部调用,所以说,点击<a href="router-link:to=&quot;...&quot;">router-link:to=&quot;...&quot;</a>等同于调用 router. push（…）。</p></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;template&gt;<br>    <span class="language-xml">&lt;button@click=&quot;gotoProduct(2)&quot;&gt;跳转到商品 2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br> &lt;/template&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    methods : &#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-attr">gotoProduct</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>. push (<span class="hljs-string">&#x27;/production/$&#123;id&#125;&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="3-导航守卫"><a href="#3-导航守卫" class="headerlink" title="3. 导航守卫"></a>3. 导航守卫</h2><blockquote><p>导航守卫可以控制路由的访问权限。示意图如下:<br>全局导航守卫会拦截每个路由规则,从而对每个路由进行访问权限的控制。<br>你可以使用 <code>router. beforeEach</code> 注册一个全局前置守卫:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">router. beforeEach (<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span>&#123;<br>   <span class="hljs-keyword">if</span> (to. path ===<span class="hljs-string">&#x27;/main&#x27;</span> &amp;&amp; ! isAuthenticated) &#123;<br>      next (<span class="hljs-string">&#x27;/login&#x27;</span>)<br>   &#125;<br>   <span class="hljs-keyword">else</span> &#123;<br>      next ()<br>   &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>to:即将要进入的目标</li><li>from:当前导航正要离开的路由</li><li>在守卫方法中如果声明了 next 形参,则必须调用 next () 函数,否则不允许用户访问任何一个路由！<ol><li>直接放行:<code>next ()</code></li><li>强制其停留在当前页面:<code>next (false)</code></li><li>强制其跳转到登录页面:<code>next (&#39;/login&#39;)</code></li></ol></li></ul><h1 id="12-VueX"><a href="#12-VueX" class="headerlink" title="12 VueX"></a>12 VueX</h1><h2 id="1-VueX-介绍"><a href="#1-VueX-介绍" class="headerlink" title="1 VueX 介绍"></a>1 VueX 介绍</h2><blockquote><p>对于组件化开发来说,大型应用的状态往往跨越多个组件。在多层嵌套的父子<br>组件之间传递状态已经十分麻烦,而 Vue 更是没有为兄弟组件提供直接共享数<br>据的办法。</p><p>基于这个问题,许多框架提供了解决方案使用全局的状态管理器,将所有<br>分散的共享数据交由状态管理器保管,Vue 也不例外。</p><p>Vuex 是一个专为 Vuejs 应用程序开发的状态管理库,采用集中式存储管理应<br>用的所有组件的状态。</p><p>简单的说,Vuex 用于管理分散在 Vue 各个组件中的数据。</p><p>安装: <code>npm install vuex@next</code></p></blockquote><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><blockquote><p>每一个 Vuex 应用的核心都是一个 store,与普通的全局对象不同的是,基于 Vue 数据与视图绑定的特点,当 store 中的状态发生变化时,与之绑定的视图也会被重新渲染。</p></blockquote><blockquote><p>store 中的状态不允许被直接修改,改变 store 中的状态的唯一途径就是显式地提交 (commit）mutation,这可以让我们方便地跟踪每一个状态的变化。</p><p>在大型复杂应用中,如果无法有效地跟踪到状态的变化,将会对理解和维护代&gt; 码带来极大的困扰。</p><p>Vuex 中有 5 个重要的概念:<strong>State、Getter、Mutation、Action、Module</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307272110993.png" alt="image.png|400"></p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><blockquote><p>State 用于维护所有应用层的状态,并确保应用只有唯一的数据源</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//创建一个新的 store 实例</span><br><span class="hljs-keyword">const</span> store = createstore (&#123;<br>  state () &#123;<br>   <span class="hljs-keyword">return</span>  &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>   &#125;<br> &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>   increment (state) &#123;<br>    state.<span class="hljs-property">count</span>++<br>   &#125;<br> &#125;<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 <code>this.$store.state.count</code> 访问数据,也可以先用 <strong>mapState</strong> 辅助函数将其映射下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在单独构建的版本中辅助函数为 Vuex.mapstate</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br> <span class="hljs-comment">// ...</span><br> <span class="hljs-attr">computed</span>: mapState (&#123;<br>  <span class="hljs-comment">//箭头函数可使代码更简练</span><br>   <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span>,<br>  <span class="hljs-comment">//传字符串参数‘count&#x27;等同于‘state =&gt; state. count&#x27;</span><br>  <span class="hljs-attr">countAlias</span>: <span class="hljs-string">&#x27;count&#x27;</span>,<br>   <span class="hljs-comment">//为了能够使用‘this＇获取局部状态,必须使用常规函数</span><br>   countplusLocalState (state) &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">localcount</span><br>    &#125;<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><blockquote><p>Mutation 提供修改 State 状态的方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//创建一个新的 store 实例</span><br> <span class="hljs-keyword">const</span> store = createstore (&#123;<br>  state <span class="hljs-keyword">return</span> &#123; <br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class="hljs-property">count</span>++<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 store.commit 来提交 mutation</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>  increment () &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>也可以先用 mapMutation 辅助函数将其映射下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-attr">methods</span>: &#123;<br>   ...mapMutations ([<br>    <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-comment">//将‘this.increment ()&#x27;映射为‘this.$store.commit (&#x27;increment&#x27;）</span><br>    <span class="hljs-comment">//‘mapMutations＇也支持载荷:</span><br>    <span class="hljs-string">&#x27;incrementBy&#x27;</span><span class="hljs-comment">//将‘this.incrementBy(amount)’映射为‘this.$store.commit(&#x27;increment&#x27;, amount)</span><br>]),<br></code></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote><p>Action 类似 Mutation,不同在于:</p></blockquote><blockquote><p>Action 不能直接修改状态,只能通过提交 mutation 来修改,<strong>Action 可以包含异步操作</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = createstore (&#123;<br> <span class="hljs-attr">state</span>: &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>&#125;,<br> <span class="hljs-attr">mutations</span>: &#123;<br>  increment (state) &#123;<br>    state. count++<br>  &#125;<br>&#125;,<br> <span class="hljs-attr">actions</span>: &#123;<br>  increment (context) <br>    context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>&#125;<br>&#125;<br> &#125;)<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 <code>this.$store.dispatch (xxx&#39;)</code> 分发 action,或者使用 <code>mapActions</code> 辅助函数先将其映射下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br>methods : &#123;<br>  ...<span class="hljs-title function_">mapActions</span>([<br>   <span class="hljs-string">&#x27;increment&#x27;</span>,<span class="hljs-comment">//将‘this.increment ()映射为‘this.$store.dispatch (&#x27;increment&#x27;)</span><br>   <span class="hljs-comment">//mapActions＇也支持载荷:</span><br>   <span class="hljs-string">&#x27;incrementBy&#x27;</span><span class="hljs-comment">//将‘this.incrementBy (amount)’映射为&#x27;this.$store.dispatch (&#x27;incrementBy&#x27;,amount)&#x27;</span><br> ]),<br></code></pre></td></tr></table></figure><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><blockquote><p>Getter 维护由 State 派生的一些状态,这些状态随着 State 状态的变化而变化</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = createstore (&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">todos</span>:[<br>     &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>     &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br>   ]<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-attr">doneTodos</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">done</span>)<br>     &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 <code>this.$store.getters.doneTodos</code>,也可以先用 <code>mapGetters</code> 辅助函数将其映射下来,代码如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br> <span class="hljs-comment">// ...</span><br> <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">//使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...mapGetters ([<br>     <span class="hljs-string">&#x27;doneTodosCount&#x27;</span><br>     <span class="hljs-string">&quot;anotherGetter&#x27;,</span><br><span class="hljs-string">    // ...</span><br><span class="hljs-string">  ])</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="通过属性访问"><a href="#通过属性访问" class="headerlink" title="通过属性访问"></a>通过属性访问</h4><blockquote><p>Getter 会暴露为 <code>store.getters</code> 对象,你可以以属性的形式访问这些值:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodos</span> <span class="hljs-comment">// -&gt; [&#123; id: 1, text: &#x27;...&#x27;, done: true &#125;]</span><br></code></pre></td></tr></table></figure><blockquote><p>Getter 也可以接受其他 getter 作为第二个参数:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// ...</span><br>  doneTodosCount (state, getters) &#123;<br>    <span class="hljs-keyword">return</span> getters.<span class="hljs-property">doneTodos</span>.<span class="hljs-property">length</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosCount</span> <span class="hljs-comment">// -&gt; 1</span><br></code></pre></td></tr></table></figure><blockquote><p>我们可以很容易地在任何组件中使用它:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  doneTodosCount () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosCount</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意,getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p></blockquote><h4 id="通过方法访问"><a href="#通过方法访问" class="headerlink" title="通过方法访问"></a>通过方法访问</h4><blockquote><p>你也可以通过让 getter 返回一个函数,来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">getTodoById</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> === id)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-property">getters</span>.<span class="hljs-title function_">getTodoById</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意,getter 在通过方法访问时,每次都会去进行调用,而不会缓存结果。</p></blockquote><h4 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a><code>mapGetters</code> 辅助函数</h4><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...<span class="hljs-title function_">mapGetters</span>([<br>      <span class="hljs-string">&#x27;doneTodosCount&#x27;</span>,<br>      <span class="hljs-string">&#x27;anotherGetter&#x27;</span>,<br>      <span class="hljs-comment">// ...</span><br>    ])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果你想将一个 getter 属性另取一个名字,使用对象形式:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">...<span class="hljs-title function_">mapGetters</span>(&#123;<br>  <span class="hljs-comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span><br>  <span class="hljs-attr">doneCount</span>: <span class="hljs-string">&#x27;doneTodosCount&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><hr><h2 id="2-Vuex-安装与使用"><a href="#2-Vuex-安装与使用" class="headerlink" title="2 Vuex 安装与使用"></a>2 Vuex 安装与使用</h2><blockquote><p>当一个组件需要获取多个状态的时候,将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题,我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性,让你少按几次键:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-comment">// 箭头函数可使代码更简练</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span>,<br>    <span class="hljs-comment">// 传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span><br>    <span class="hljs-attr">countAlias</span>: <span class="hljs-string">&#x27;count&#x27;</span>,<br>    <span class="hljs-comment">// 为了能够使用 `this` 获取局部状态,必须使用常规函数</span><br>    countPlusLocalState (state) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">localCount</span><br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当映射的计算属性的名称与 state 的子节点名称相同时,我们也可以给 <code>mapState</code> 传一个字符串数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>([<br>  <span class="hljs-comment">// 映射 this.count 为 store.state.count</span><br>  <span class="hljs-string">&#x27;count&#x27;</span><br>])<br></code></pre></td></tr></table></figure><hr><p><strong>eg:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;murl&quot;</span>&gt;</span>音乐&#123;&#123; mid &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;nmurl&quot;</span>&gt;</span>音乐&#123;&#123; mid + 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;nextMusic&quot;</span>&gt;</span>下一首<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;mapState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;MyMusic&quot;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// computed: &#123;  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// getMid() &#123;  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// return this.$store.state.mid  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// &#125;  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// &#125;,  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>([  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-string">&#x27;mid&#x27;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml">]),  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">murl</span>: <span class="hljs-string">&quot;/mymusic/0&quot;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">nmurl</span>: <span class="hljs-string">&quot;/mymusic/1&quot;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;,  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">nextMusic</span>(<span class="hljs-params"></span>) &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">murl</span> = <span class="hljs-string">&quot;/mymusic/&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">mid</span>  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">nmurl</span> = <span class="hljs-string">&quot;/mymusic/&quot;</span> + (<span class="hljs-variable language_">this</span>.<span class="hljs-property">mid</span> + <span class="hljs-number">1</span>)  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">mid</span>)  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>getter—eg:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>  <br><span class="hljs-comment">// 创建一个新的 store 实例  </span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;  <br><span class="hljs-attr">state</span>: &#123;  <br><span class="hljs-attr">mid</span>: <span class="hljs-number">0</span>,  <br><span class="hljs-attr">todos</span>: [  <br>&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学习&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,  <br>&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;吃饭&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,  <br>&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;  <br>]  <br>&#125;,  <br><span class="hljs-attr">getters</span>: &#123;  <br><span class="hljs-title function_">doneTodos</span>(<span class="hljs-params">state</span>) &#123;  <br><span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">done</span>)  <br>&#125;,  <br><span class="hljs-title function_">doneTodosCount</span>(<span class="hljs-params">state, getters</span>) &#123;  <br><span class="hljs-keyword">return</span> getters.<span class="hljs-property">doneTodos</span>.<span class="hljs-property">length</span>  <br>&#125;,  <br><span class="hljs-attr">getTodoById</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;  <br><span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> === id)  <br>&#125;  <br>&#125;,  <br><span class="hljs-attr">mutations</span>: &#123;  <br><span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;  <br>state.<span class="hljs-property">mid</span>++  <br>&#125;  <br>&#125;  <br>&#125;)  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><h1 id="13-MockJS"><a href="#13-MockJS" class="headerlink" title="13 MockJS"></a>13 MockJS</h1><h2 id="MockJs-介绍"><a href="#MockJs-介绍" class="headerlink" title="MockJs 介绍"></a>MockJs 介绍</h2><blockquote><p>Mock.js 是一款前端开发中<strong>拦截 Ajax 请求再生成随机数据响应</strong>的工具,可以用来模拟服务器响应</p><p>优点是非常简单方便,无侵入性,基本覆盖常用的接口数据类型.</p><p>支持生成随机的==文本、数字、布尔值、日期、邮箱、链接、图片、颜色==等。<br>安装: <code>npm install mockjs</code></p></blockquote><h2 id="MockJs-使用"><a href="#MockJs-使用" class="headerlink" title="MockJs 使用"></a>MockJs 使用</h2><blockquote><p>在项目中创建 mock 目录,新建 index.js 文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入 mockjs</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span><br><span class="hljs-comment">//使用 mockjs 模拟数据</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (<span class="hljs-string">&#x27;/product/search&#x27;</span>, &#123;<br>    <span class="hljs-string">&quot;ret&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:<br>&#123;<br>       <span class="hljs-string">&quot;mtime&quot;</span>: <span class="hljs-string">&quot;@datetime&quot;</span>,<span class="hljs-comment">//随机生成日期时间</span><br>       <span class="hljs-string">&quot;score|1-800&quot;</span>: <span class="hljs-number">800</span>,<span class="hljs-comment">//随机生成1-800的数字</span><br>       <span class="hljs-string">&quot;rank|1-100&quot;</span>:  <span class="hljs-number">100</span>,<span class="hljs-comment">//随机生成1-100的数字</span><br>       <span class="hljs-string">&quot;stars|1-5&quot;</span>: <span class="hljs-number">5</span>,<span class="hljs-comment">//随机生成1-5的数字</span><br>       <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//随机生成中文名字</span><br>       <span class="hljs-comment">//生成图片</span><br><span class="hljs-string">&quot;img&quot;</span>:<span class="hljs-string">&quot;@image(&#x27;200x100&#x27;,&#x27;#ffcc33&#x27;, &#x27;#FFF&#x27;,&#x27;png&#x27;,&#x27;Fast Mock&#x27;)&quot;</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>在 main. js 中导入 mock 下的 index.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createApp&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>  <br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>  <br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./mock&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/main.css&#x27;</span>  <br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)  <br>app.<span class="hljs-title function_">use</span>(router)  <br>app.<span class="hljs-title function_">use</span>(store)  <br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>组件中调用 <strong>mock. js</strong> 中模拟的数据接口,这时返回的 response 就是 mock.js 中用==Mock.mock (‘url’, data)中设置的 data==</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/prduct/search&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>   &#125;)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><p><code>Mock.mock(rurl?, rtype?, template|function ( options ) )</code></p><blockquote><p> rurl,表示需要拦截的 URL,可以是 <strong>URL 字符串或 URL 正则</strong><br> rtype,表示需要拦截的 <strong>Ajax 请求类型</strong>。例如 GET、POST、PUT、DELETE 等。<br> template,表示数据模板,可以是<strong>对象或字符串</strong><br> function,表示用于<strong>生成响应数据的函数</strong>。</p></blockquote><blockquote><p>设置延时请求到数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//延时 400 ms 请求到数据</span><br> <span class="hljs-title class_">Mock</span>.<span class="hljs-property">setup</span> (&#123;<br>   <span class="hljs-attr">timeout</span>: <span class="hljs-number">400</span><br>&#125;)<br> <span class="hljs-comment">//延时 200-600 毫秒请求到数据</span><br> <span class="hljs-title class_">Mock</span>.<span class="hljs-property">setup</span> (&#123;<br>   <span class="hljs-attr">timeout</span>: <span class="hljs-string">&#x27;200-600&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="数据生成规则"><a href="#数据生成规则" class="headerlink" title="数据生成规则"></a>数据生成规则</h2><blockquote><ul><li>mock 的语法规范包含两层规范:数据模板 （DTD）、数据占位符 (DPD)</li><li>数据模板中的每个属性由 3 部分构成:**属性名 name、生成规则 rule、属性值<br>  value: ‘name|rule’: value</li></ul></blockquote><blockquote><p>属性名和生成规则之间用竖线<code>|</code>分隔,生成规则是可选的,有 7 种格式:</p></blockquote><p><font color="#ff0000">‘name|min-max’: value</font><br><font color="#ff0000">‘namelcount’: value</font><br><font color="#ff0000">‘name|min-max.dmin-dmax’: value</font><br><font color="#ff0000">‘name|min-max.dcount’: value</font><br><font color="#ff0000">‘name|count.dmin-dmax’: value</font><br><font color="#ff0000">‘name|count.dcount’: value</font><br><font color="#ff0000">‘name|+step’: value</font></p><h2 id="生成规则与示例"><a href="#生成规则与示例" class="headerlink" title="生成规则与示例"></a>生成规则与示例</h2><ol><li>属性值是字符串 String</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过重复 string 生成一个字符串,重复次数大于等于 min,小于等于 max。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: string<br><span class="hljs-comment">//通过重复 string 生成一个字符串,重复次数等于 count。</span><br><span class="hljs-string">&#x27;name|count&#x27;</span>: string<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>   <span class="hljs-string">&#x27;name 1|1-3&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,  <span class="hljs-comment">//重复生成 1 到 3 个 a（随机）</span><br>   <span class="hljs-string">&#x27;name 2|2&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>   / /生成 bb<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>属性值是数字 Number</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">/ /属性值自动加 <span class="hljs-number">1</span>,初始值为 number。<br><span class="hljs-string">&#x27;name|+1&#x27;</span>: number<br><span class="hljs-comment">//生成一个大于等于 min、小于等于 max 的整数,属性值 number 只是用来确定类型。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: number<br><span class="hljs-comment">//生成一个浮点数,整数部分大于等于 min、小于等于 max,小数部分保留 dmin 到 dmax 位。</span><br><span class="hljs-string">&#x27;name|min-max.dmin-dmax&#x27;</span>: number<br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>     <span class="hljs-string">&#x27;number1|1-100.1-10&#x27;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&#x27;number2|123.1-10&#x27;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&#x27;number3|123.3&#x27;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&#x27;number4|123.10&#x27;</span>: <span class="hljs-number">1</span> <span class="hljs-number">123</span><br>&#125;)<br><span class="hljs-comment">//结果:</span><br>&#123;<br>    <span class="hljs-string">&quot;number1&quot;</span>: <span class="hljs-number">12.92</span>,<br>    <span class="hljs-string">&quot;number2&quot;</span>: <span class="hljs-number">123.51</span>,<br>    <span class="hljs-string">&quot;number3&quot;</span>: <span class="hljs-number">123.777</span>,<br>    <span class="hljs-string">&quot;number4&quot;</span>:<span class="hljs-number">123.1231091814</span><br>&#125;<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>    <span class="hljs-string">&#x27;name1|+1&#x27;</span>:<span class="hljs-number">4</span>,   <span class="hljs-comment">//生成4,如果循环每次加1</span><br>    <span class="hljs-string">&#x27;name2|1-7&#x27;</span>:<span class="hljs-number">2</span>,   <span class="hljs-comment">//生成一个数字,1到7之间</span><br>    <span class="hljs-string">&#x27;name3|1-4.5-8&#x27;</span>:<span class="hljs-number">1</span> <span class="hljs-comment">////生成一个小数,整数部分1到4,小数部分5到8位,数字1只是为了确定类型</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>属性值是布尔型 Boolean</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//随机生成一个布尔值,值为 true 的概率是 1/2,值为 false 的概率同样是1/2。</span><br><span class="hljs-string">&#x27;namel1&#x27;</span>: bolean<br><span class="hljs-comment">//随机生成一个布尔值,值为 value 的概率是 min/（min+max),值为!value 的概率是 max／（min+max）。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: value<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>    <span class="hljs-string">&#x27;name|1&#x27;</span>: <span class="hljs-literal">true</span>,   <span class="hljs-comment">//生成一个布尔值,各一半</span><br>    <span class="hljs-string">&#x27;name1|1-3&#x27;</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">//1/4 是 true,3/4 是 false</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>属性值是对象 Object</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//从属性值 object 中随机选取 count 个属性。</span><br><span class="hljs-string">&#x27;name|count&#x27;</span>: object<br><span class="hljs-comment">//从属性值 object 中随机选取 min 到 max 个属性。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: object<br><span class="hljs-keyword">var</span> obj = &#123;<br>   <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>   <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>   <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>   <span class="hljs-attr">d</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>    <span class="hljs-string">&#x27;name|1-3&#x27;</span>: obj,  <span class="hljs-comment">//随机从 obj 中寻找 1 到 3 个属性,新对象</span><br>    <span class="hljs-string">&#x27;name|2&#x27;</span>: obj   <span class="hljs-comment">//随机从 onj 中找到两个属性,新对象</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li>属性值是数组 Array</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//从属性值 array 中随机选取 1 个元素,作为最终值。</span><br><span class="hljs-string">&#x27;name|1&#x27;</span>: array<br><span class="hljs-comment">//从属性值 array 中顺序选取 1 个元素,作为最终值。</span><br><span class="hljs-string">&#x27;name|+1&#x27;</span>: array<br><span class="hljs-comment">//通过重复属性值 array 生成一个新数组,重复次数大于等于 min,小于等于 max。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: array<br><span class="hljs-comment">//通过重复属性值 array 生成一个新数组,重复次数为 count。</span><br><span class="hljs-string">&#x27;name|count&#x27;</span>: array<br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>   <span class="hljs-comment">//通过重复属性值 array 生成一个新数组,重复次数为 1-3次。</span><br>   <span class="hljs-string">&quot;favorite_games|1-3&quot;</span>: [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">23</span>,<span class="hljs-number">28</span>,<span class="hljs-number">42</span>,<span class="hljs-number">45</span>],<br>&#125;); <br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>   <span class="hljs-string">&#x27;namel|1&#x27;</span>: arr,   <span class="hljs-comment">//从数组里随机取出 1 个值</span><br>   <span class="hljs-string">&#x27;name2|2&#x27;</span>: arr,   <span class="hljs-comment">//数组重复 count 次,这里 count 为2</span><br>   <span class="hljs-string">&#x27;name3|1-3&#x27;</span>: arr,  <span class="hljs-comment">//数组重复 1 到 3 次</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="6"><li>属性值是函数 Function</li></ol><p>执行函数 function,取其返回值作为最终的属性值,函数的上下文为属性’name’所在的对象。<br>‘name’: function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>)<br>   <span class="hljs-keyword">return</span> x+<span class="hljs-number">10</span>;<br><span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>   <span class="hljs-string">&#x27;name&#x27;</span>: fun (<span class="hljs-number">10</span>)   <span class="hljs-comment">//返回函数的返回值 20</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="7"><li>属性值是正则表达式 RegExp</li></ol><p>根据正则表达式 regexp 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。<br>‘name’: regexp</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>    <span class="hljs-string">&#x27;regexp 1&#x27;</span>: <span class="hljs-regexp">/[a-z][A-z][0-9]/</span>,<br>    <span class="hljs-string">&#x27;regexp 2&#x27;</span>: <span class="hljs-regexp">/\w\w\s|s\d\D/</span>,<br>    <span class="hljs-string">&#x27;regexp 3&#x27;</span>: <span class="hljs-regexp">/d[5,103/</span><br><span class="hljs-regexp">&#125;)</span><br><span class="hljs-regexp">// =&gt;</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">    &quot;regexp1&quot;: &quot;pJ7&quot;,</span><br><span class="hljs-regexp">    &quot;regexp2&quot;: &quot;F)\fp1G&quot;,</span><br><span class="hljs-regexp">    &quot;regexp3&quot;: &quot;561659409&quot;</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="数据占位符-DPD"><a href="#数据占位符-DPD" class="headerlink" title="数据占位符 DPD"></a>数据占位符 DPD</h2><p>占位符只是在属性值字符串中占个位置,并不出现在最终的属性值中。<br>占位符的格式为:</p><blockquote><p><strong>@占位符<br>@占位符 (参数［,参数])</strong></p></blockquote><p>关于占位符需要知道以下几点</p><ul><li>用<code>@</code>标识符标识后面的字符串是占位符</li><li>占位符引用的是 <code>Mock.Random</code> 中的方法。</li><li>可以通过 <code>Mock.Random.extend (）</code>来扩展自定义占位符。</li><li>占位符也<strong>可以引用数据模板中的属性</strong>。</li><li>占位符会<strong>优先引用数据模板中的属性</strong>。</li><li>占位符支持<strong>相对路径和绝对路径</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入mockjs</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span><br><span class="hljs-comment">//使用mockjs模拟数据</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;/api/msdk/proxy/query_common_credit&#x27;</span>, &#123;<br>   <span class="hljs-string">&quot;ret&quot;</span>:<span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;data&quot;</span>:<br>   &#123;<br>       <span class="hljs-string">&quot;mtime&quot;</span>:<span class="hljs-string">&quot;@datetime&quot;</span>,<span class="hljs-comment">//随机生成日期时间</span><br>       <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-string">&quot;@natural(1,800)&quot;</span>,<span class="hljs-comment">//随机生成1-800的数字</span><br>       <span class="hljs-string">&quot;rank&quot;</span>:<span class="hljs-string">&quot;@natural(1,100)&quot;</span>,<span class="hljs-comment">//随机生成1-100的数字</span><br>       <span class="hljs-string">&quot;stars&quot;</span>:<span class="hljs-string">&quot;@natural(0,5)&quot;</span>,<span class="hljs-comment">//随机生成1-5的数字</span><br>       <span class="hljs-string">&quot;nickname&quot;</span>:<span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//随机生成中文名字</span><br>&#125;) ;<br></code></pre></td></tr></table></figure><h3 id="基础随机内容的生成"><a href="#基础随机内容的生成" class="headerlink" title="基础随机内容的生成"></a>基础随机内容的生成</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;string|1-10&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-comment">//随机生成 1 到 10 个等号</span><br>  <span class="hljs-string">&quot;string2|3&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-comment">//随机生成 2 个或者三个等号</span><br>  <span class="hljs-string">&quot;number|+1&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-comment">//从 o 开始自增</span><br>  <span class="hljs-string">&quot;number 2|1-10.1-3&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-comment">//生成一个小数,小数点前面 1 到 10,小数点后 1 到 3 位</span><br>  <span class="hljs-string">&quot;boolean&quot;</span>:<span class="hljs-string">&quot;@boolean（1,2,true）&quot;</span>,<span class="hljs-comment">//生成 boolean 值三个参数,1 表示第三个参数 true 出现的概率,2 表示 false 出现的概率</span><br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//随机生成中文姓名</span><br>  <span class="hljs-string">&quot;firstname&quot;</span>:<span class="hljs-string">&quot;@cfirst&quot;</span>,<span class="hljs-comment">//随机生成中文姓</span><br>  <span class="hljs-string">&quot;int&quot;</span>:<span class="hljs-string">&quot;@integer(1,10)&quot;</span>,<span class="hljs-comment">//随机生成 1-10 的整数</span><br>  <span class="hljs-string">&quot;float&quot;</span>:<span class="hljs-string">&quot;@float (1,2,3,4)&quot;</span>,<span class="hljs-comment">//随机生成浮点数,四个参数分别为,整数部分的最大最小值和小数部分的最大最小值</span><br>  <span class="hljs-string">&quot;range&quot;</span>:<span class="hljs-string">&quot;@range(1,100,10)&quot;</span>,<span class="hljs-comment">//随机生成整数数组,三个参数为,最大最小值和加的步长</span><br>  <span class="hljs-string">&quot;natural&quot;</span>:<span class="hljs-string">&quot;@natural(60,100)&quot;</span>,<span class="hljs-comment">//随机生成自然数（大于零的数）</span><br>  <span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;@email&quot;</span>,<span class="hljs-comment">//邮箱</span><br>  <span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;@ip&quot;</span>,<span class="hljs-comment">// ip</span><br>  <span class="hljs-string">&quot;datatime&quot;</span>:<span class="hljs-string">&quot;@date（&#x27;yy-MM-ddhh:mm: ss&#x27;)&quot;</span><span class="hljs-comment">//随机生成指定格式的时间</span><br>  <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="列表数据"><a href="#列表数据" class="headerlink" title="列表数据"></a>列表数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>;<span class="hljs-string">&quot;0000&quot;</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pageNo&quot;</span>: <span class="hljs-string">&quot;@integer (1, 100)&quot;</span>,<br>    <span class="hljs-string">&quot;totalRecord&quot;</span>: <span class="hljs-string">&quot;@integer (100, 1000)&quot;</span>,<br>    <span class="hljs-string">&quot;pagesize&quot;</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-string">&quot;list|10&quot;</span>: [&#123;<br>      <span class="hljs-string">&quot;id|+1&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;@cword(10)&quot;</span>,<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;@cword(20)&quot;</span>,<br>      <span class="hljs-string">&quot;descript&quot;</span>: <span class="hljs-string">&quot;@csentence(20,50)&quot;</span>,<br>      <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-string">&quot;@float(10,100,10,100)&quot;</span>,<br>   &#125;]<br> &#125;,<br>  <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>mockjs 可以生成任意大小，任意颜色块，且用文字填充内容的图片，使我们不用到处找图片资源就能轻松实现图片的模拟展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;0000&quot;</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pageNo&quot;</span>: <span class="hljs-string">&quot;@integer(1, 100)&quot;</span>,<br>    <span class="hljs-string">&quot;totalRecord&quot;</span>: <span class="hljs-string">&quot;@integer(100, 1000)&quot;</span>,<br>    <span class="hljs-string">&quot;pagesize&quot;</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-string">&quot;list|10&quot;</span>: [&#123;<br>     <span class="hljs-comment">//参数从左到右依次为，图片尺寸，背景色，前景色（及文字颜色），图片格式，图片中间的填充文字内容</span><br>     <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;@image (&#x27;200 x 100&#x27;，&#x27;#ffcc33 &#x27;，&#x27;#FFF&#x27;，&#x27;png&#x27;，&#x27;Fast Mock&#x27;)&quot;</span><br>   &#125;]<br>  &#125;,<br>  <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;成功&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mock-Random"><a href="#Mock-Random" class="headerlink" title="Mock. Random"></a>Mock. Random</h3><blockquote><p>Mock. Random 是一个工具类，用于生成各种随机数据。</p><p>Mock. Random 的方法在数据模板中称为『占位符』，书写格式为@占位符 (参数[, 参数)。<br>用法示例:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Random</span> = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span><br><span class="hljs-title class_">Random</span>.<span class="hljs-title function_">email</span>()<br><span class="hljs-comment">// =&gt; &quot; n.clark@mi1ler.io &quot;</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;@email&#x27;</span>)<br><span class="hljs-comment">// =&gt; &quot; y.lee@lewis.org &quot;</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;@email&#x27;</span>&#125;)<br><span class="hljs-comment">// =&gt; &#123; email: &quot;v.lewis@hall.gov&quot; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>[!NOTE] tips<br>如果前端请求的后端接口需要携带参数，那么前端 mock 的 index. js 里的拦截请求的写法应该如下所示（用正则表达式进行匹配接口）：<br><code>Mock.mock(RegExp(&#39;/product/search.*&#39;),&#123;...&#125;)</code></p></blockquote><h1 id="14-企业级集成方案"><a href="#14-企业级集成方案" class="headerlink" title="14 企业级集成方案"></a>14 企业级集成方案</h1><h2 id="vue-element-admin-介绍"><a href="#vue-element-admin-介绍" class="headerlink" title="vue-element-admin 介绍"></a>vue-element-admin 介绍</h2><blockquote><ul><li>vue-element-admin 是一个后台前端解决方案，它基于 vue 和 element-ui 实现。</li><li>内置了 i 18 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件。</li><li>可以快速搭建企业级中后台产品原型。</li><li>地址: <a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">https://panjiachen.github.io/vue-element-admin-site/zh/guide/</a></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆项目</span><br>git clone https://github.com/PanJiaChen/vue-admin-template.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入项目目录</span><br>cd vue-admin-template<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>npm install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题</span><br>npm install --registry=https://registry.npm.taobao.org<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>npm run dev<br></code></pre></td></tr></table></figure><h1 id="15-JWT-跨域认证"><a href="#15-JWT-跨域认证" class="headerlink" title="15. JWT 跨域认证"></a>15. JWT 跨域认证</h1><h2 id="1-Session-认证"><a href="#1-Session-认证" class="headerlink" title="1. Session 认证"></a>1. Session 认证</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p><blockquote><ul><li>用户向服务器发送<strong>用户名和密码</strong>。</li><li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等。</li><li>服务器向用户返回一个 session_id，写入用户的 Cookie。</li><li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</li><li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</li></ul></blockquote><p>session 认证流程：<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311353929.png" alt="|350"><br>session 认证的方式应用非常普遍，但也存在一些问题，扩展性不好，如果是服务<br>器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能<br>够读取 session，针对此种问题一般有两种方案:</p><blockquote><ol><li><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。</p></li><li><p>一种方案是服务器不再保存 session 数据，所有数据都保存在客户端，每次请求都发回服务器。Token 认证就是这种方案的一个代表。</p></li></ol></blockquote><h2 id="2-Token-认证"><a href="#2-Token-认证" class="headerlink" title="2. Token 认证"></a>2. Token 认证</h2><p>Token 是在服务端产生的一串字符串, 是客户端访问资源接口（API) 时所需要的资<br>源凭证，流程如下：</p><blockquote><ul><li>客户端使用用户名跟密码请求登录，服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端</li><li>客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 token，如果验证成功，就向客户端返回请求的数据</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311410745.png" alt="image.png|350"></p><ul><li><p>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放<br>token 数据。</p></li><li><p>用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力<br>减少频繁的查询数据库</p></li><li><p>token 完全由应用管理，所以它可以避开同源策略</p></li></ul><hr><h2 id="3-JWT-的使用"><a href="#3-JWT-的使用" class="headerlink" title="3. JWT 的使用"></a>3. JWT 的使用</h2><blockquote><p>JSON Web Token（简称 JWT）是一个 token 的具体实现方式，是目前最流行<br>的跨域认证解决方案。<br>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，具体如下:</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;姓名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;角色&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;管理员&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;到期时间&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2018 年 7 月 1 日 0 点 0 分&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。<br>为了防止用户篡改数据，服务器在生成这个对象的时候，会加上<strong>签名</strong>。</p></blockquote><blockquote><p>JWT 的由三个部分组成，依次如下：<br>  <em><strong>Header (头部)<br>  Payload (负载)<br>  Signature  (签名)</strong></em><br>  三部分最终组合为完整的字符串，中间使用·分隔，如下：<br>  Header.Payload.Signature<br>           <code>eyJhbGci0iJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdwIi0iIxMjMoNTY30DkwIiwibmFtzsI6IkpvaG4 gRG91IiwiaXNTb2NpYWwiOnRydwV9. 4pcPyMD09o1PSyXnrXCjTwXyr4BsezdI1AVTmud2fU4</code></p></blockquote><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><blockquote><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;H256&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>alg 属性表示签名的算法（<strong>algorithm</strong>），默认是 HMAC SHA 256 (写成</li></ul><p><strong>HS256</strong>)</p><ul><li>typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT</li><li>最后，将上面的 JSON 对象使用 Base 64 URL 算法转成字符串。</li></ul><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><blockquote><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了 7 个官方字段，供选用。</p></blockquote><ul><li>iss (issuer)：签发人</li><li>exp (expiration time): 过期时间</li><li>sub (subject): 主题</li><li>aud (audience): 受众</li><li>nbf (Not Before): 生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (WT ID): 编号</li></ul><blockquote><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在个部分。<br>   这个 JSON 对象也要使用 <strong>Base 64 URL</strong> 算法转成字符串。</p></blockquote><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><blockquote><p> Signature 部分是对前两部分的签名，防止数据篡改。<br>    首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户; 然后，使用 Header 里面指定的签名算法 （默认是 HMAC SHA 256），按照下面的公式产生签名。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">HMACSHA <span class="hljs-number">256</span> (<br>base64UrlEncode (header) + <span class="hljs-string">&quot;.&quot;</span> +<br>base64UrlEncode (payload)<span class="hljs-punctuation">,</span><br>secret)<br></code></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（’.’）分隔，就可以返回给用户。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311433682.png" alt="image.png|450"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</li><li>客户端每次与服务器通信，都要带上这个 JWT，可以把它放在 Cookie 里面自动发送，但是这样不能跨域。</li><li>更好的做法是放在 HTTP 请求的头信息’Authorization’字段里面，单独发送。</li></ul><h3 id="请求认证"><a href="#请求认证" class="headerlink" title="请求认证"></a>请求认证</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202309262023932.png" alt="image.png|525"></p><h3 id="JWT验证拦截器"><a href="#JWT验证拦截器" class="headerlink" title="JWT验证拦截器"></a>JWT验证拦截器</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202309272236587.png" alt="image.png|250"></p><p>定义拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.alibaba.fastjson2.JSON;  <br><span class="hljs-keyword">import</span> com.alleyf.sys.utils.Result;  <br><span class="hljs-keyword">import</span> com.alleyf.common.JwtUtils;  <br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;  <br>  <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;  <br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;  <br>  <br><span class="hljs-meta">@Component</span>  <br><span class="hljs-meta">@Slf4j</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtValidateInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> JwtUtils jwtUtils;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;X-Token&quot;</span>);  <br>        log.debug(request.getRequestURI() + <span class="hljs-string">&quot;待验证：&quot;</span> + token);  <br>        <span class="hljs-keyword">if</span> (token != <span class="hljs-literal">null</span>) &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                jwtUtils.getClaimsByToken(token);  <br>                log.debug(request.getRequestURI() + <span class="hljs-string">&quot; 验证通过&quot;</span>);  <br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>        &#125;  <br>        log.debug(request.getRequestURI() + <span class="hljs-string">&quot; 禁止访问&quot;</span>);  <br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);  <br>        response.getWriter().write(JSON.toJSONString(Result.error().message(<span class="hljs-string">&quot;jwt令牌无效，请重新登录&quot;</span>)));  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置使用拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.config;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.config.JwtValidateInterceptor;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistration;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;  <br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> JwtValidateInterceptor jwtValidateInterceptor;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;  <br>        <span class="hljs-type">InterceptorRegistration</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> registry.addInterceptor(jwtValidateInterceptor);  <br>        registration.addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).excludePathPatterns(  <br>                <span class="hljs-string">&quot;/user/login&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/register&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/logout&quot;</span>,  <br>                <span class="hljs-string">&quot;/user/info&quot;</span>,  <br>                <span class="hljs-string">&quot;/error&quot;</span>  <br>        );  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h3><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="生成-Token"><a href="#生成-Token" class="headerlink" title="生成 Token"></a>生成 Token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//7 天过期</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800</span>;<br><span class="hljs-comment">//32 位秘钥</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;<br><br><span class="hljs-comment">//生成 token</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span>&#123;<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> (now.getTime() + <span class="hljs-number">1000</span> * expire);<br>   <span class="hljs-keyword">return</span> Jwts.builder ()<br>            .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>)<br>            .setSubject(username)<br>            .setIssuedAt(now)<br>            .setExpiration(expiration)<br>            .signWith(SignatureAlgorithm.HS512, secret)<br>            .compact();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解析-token"><a href="#解析-token" class="headerlink" title="解析 token"></a>解析 token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>    <span class="hljs-keyword">return</span> Jwts.parser()  <br>            .setSigningKey(secret)  <br>            .parseClaimsJws(token)  <br>            .getBody();  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后端完整部分"><a href="#后端完整部分" class="headerlink" title="后端完整部分"></a>后端完整部分</h4><p><code>UserController. java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 6 - 1 19:56 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.controller;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.entity.User;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.mapper.UserMapper;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.JwtUtils;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.Result;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@Api(tags = &quot;用户&quot;, value = &quot;用户&quot;)</span>  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@CrossOrigin</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    UserMapper userMapper;  <br><br>    <span class="hljs-meta">@ApiOperation(&quot;用户登录&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtils.generateToken(user.getUsername());  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;token&quot;</span>, token);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;获取用户信息&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/info&quot;)</span>  <span class="hljs-comment">//&quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">info</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> JwtUtils.getClaimsByToken(token).getSubject();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://img2.baidu.com/it/u=1325995315,4158780794&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;</span>;  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;name&quot;</span>, username).data(<span class="hljs-string">&quot;avatar&quot;</span>, url);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;注销&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span> <span class="hljs-comment">// &quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> Result.ok();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;查询所有用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryAll&quot;)</span>  <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryAllUser</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.queryAllUserAndTask();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.selectByName(username);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMPName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMPName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名路径查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPMPName/&#123;username&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByPMPName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照页码查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPage/&#123;page&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;  <br>        Page&lt;User&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>);  <br>        <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> userMapper.selectPage(page1, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-keyword">return</span> iPage;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;添加用户&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.insert(user) &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;添加成功&quot;</span> : <span class="hljs-string">&quot;添加失败&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Result.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 5 - 29 &#125;9:52 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;  <br>    <span class="hljs-keyword">private</span> Boolean success;  <br>    <span class="hljs-keyword">private</span> Integer code;  <br>    <span class="hljs-keyword">private</span> String message;  <br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Success);  <br>        r.setSuccess(<span class="hljs-literal">true</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;成功&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Error);  <br>        r.setSuccess(<span class="hljs-literal">false</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;失败&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setSuccess(success);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">message</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setMessage(message);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">code</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setCode(code);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(String key, Object value)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data.put(key, value);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setData(map);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getSuccess</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.success = success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.code = code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.message = message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> data;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Map&lt;String, Object&gt; data)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data = data;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>JwtUtils.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;  <br>  <br><span class="hljs-keyword">import</span> java.util.Date;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;  <br>    <span class="hljs-comment">//7 天过期  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800L</span>;  <br>    <span class="hljs-comment">//32 位秘钥  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;  <br>  <br>    <span class="hljs-comment">//生成 token  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span> &#123;  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(now.getTime() + <span class="hljs-number">1000</span> * expire);  <br>        <span class="hljs-keyword">return</span> Jwts.builder()  <br>                .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>)  <br>                .setSubject(username)  <br>                .setIssuedAt(now)  <br>                .setExpiration(expiration)  <br>                .signWith(SignatureAlgorithm.HS512, secret)  <br>                .compact();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-keyword">return</span> Jwts.parser()  <br>                .setSigningKey(secret)  <br>                .parseClaimsJws(token)  <br>                .getBody();  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">it is some basic usage of vue.</summary>
    
    
    
    <category term="Front_end_development" scheme="https://alleyf.github.io/categories/Front-end-development/"/>
    
    
    <category term="vue" scheme="https://alleyf.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>图像分类</title>
    <link href="https://alleyf.github.io/2023/03/73453d2eb27d.html"/>
    <id>https://alleyf.github.io/2023/03/73453d2eb27d.html</id>
    <published>2023-03-17T11:11:25.000Z</published>
    <updated>2023-04-14T05:10:39.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><blockquote><ul><li><p>LeNet：Yan LeCun 等人于 1998 年第一次将卷积神经网络应用到图像分类任务上[1]，在手写数字识别任务上取得了巨大成功。</p></li><li><p>AlexNet：Alex Krizhevsky 等人在 2012 年提出了 AlexNet[2], 并应用在大尺寸图片数据集 ImageNet 上，获得了 2012 年 ImageNet 比赛冠军(ImageNet Large Scale Visual Recognition Challenge，ILSVRC）。</p></li><li><p>VGG：Simonyan 和 Zisserman 于 2014 年提出了 VGG 网络结构[3]，是当前最流行的卷积神经网络之一，由于其结构简单、应用性极强而深受广大研究者欢迎。</p></li><li><p>GoogLeNet：Christian Szegedy 等人在 2014 提出了 GoogLeNet[4]，并取得了 2014 年 ImageNet 比赛冠军。</p></li><li><p>ResNet：Kaiming He 等人在 2015 年提出了 ResNet[5]，通过引入残差模块加深网络层数，在 ImagNet 数据集上的错误率降低到 3.6%，超越了人眼识别水平。ResNet 的设计思想深刻地影响了后来的深度神经网络的设计。</p></li></ul></blockquote><h2 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h2><center><img src="https://ai-studio-static-online.cdn.bcebos.com/82e4124e2e6a4231bcde17e086bc86ba732d3e81dcd7415f86fb4ef050aa7772" width = "800"></center><center><br>图1：LeNet模型网络结构示意图</center><p><strong>【提示】：</strong></p><blockquote><p>[!NOTE] Tips<br>卷积层的输出特征图如何当作全连接层的输入使用呢？</p><p>卷积层的输出数据格式是 $[N, C, H, W]$，在输入全连接层的时候，会自动将数据拉平，</p><p>也就是对每个样本，自动将其转化为长度为 $K$ 的向量，</p><p>其中 $K = C \times H \times W$，一个 mini-batch 的数据维度变成了 $N\times K$ 的二维向量。</p></blockquote><hr><h3 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><h4 id="定义网络结构"><a href="#定义网络结构" class="headerlink" title="定义网络结构"></a>定义网络结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入需要的包</span><br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> Conv2D, MaxPool2D, Linear<br><br><br><br><span class="hljs-comment">## 组网</span><br><br><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><br><br><br><span class="hljs-comment"># 定义 LeNet 网络结构</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LeNet</span>(paddle.nn.Layer):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_classes=<span class="hljs-number">1</span></span>):<br><br>        <span class="hljs-built_in">super</span>(LeNet, self).__init__()<br><br>        <span class="hljs-comment"># 创建卷积和池化层</span><br>        <span class="hljs-comment"># 创建第1个卷积层</span><br><br>        self.conv1 = Conv2D(in_channels=<span class="hljs-number">1</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">5</span>)<br><br>        self.max_pool1 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：池化层未改变通道数；当前通道数为6</span><br>        <span class="hljs-comment"># 创建第2个卷积层</span><br><br>        self.conv2 = Conv2D(in_channels=<span class="hljs-number">6</span>, out_channels=<span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">5</span>)<br><br>        self.max_pool2 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 创建第3个卷积层</span><br><br>        self.conv3 = Conv2D(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">120</span>, kernel_size=<span class="hljs-number">4</span>)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span><br>        <span class="hljs-comment"># 输入size是[28,28]，经过三次卷积和两次池化之后，C*H*W等于120</span><br><br>        self.fc1 = Linear(in_features=<span class="hljs-number">120</span>, out_features=<span class="hljs-number">64</span>)<br><br>        <span class="hljs-comment"># 创建全连接层，第一个全连接层的输出神经元个数为64， 第二个全连接层输出神经元个数为分类标签的类别数</span><br><br>        self.fc2 = Linear(in_features=<span class="hljs-number">64</span>, out_features=num_classes)<br><br>    <span class="hljs-comment"># 网络的前向计算过程</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br><br>        x = self.conv1(x)<br><br>        <span class="hljs-comment"># 每个卷积层使用Sigmoid激活函数，后面跟着一个2x2的池化</span><br><br>        x = F.sigmoid(x)<br><br>        x = self.max_pool1(x)<br><br>        x = F.sigmoid(x)<br><br>        x = self.conv2(x)<br><br>        x = self.max_pool2(x)<br><br>        x = self.conv3(x)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span><br><br>        x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br><br>        x = self.fc1(x)<br><br>        x = F.sigmoid(x)<br><br>        x = self.fc2(x)<br><br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h4 id="查看网络各层形状"><a href="#查看网络各层形状" class="headerlink" title="查看网络各层形状"></a>查看网络各层形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入数据形状是 [N, 1, H, W]</span><br><br><span class="hljs-comment"># 这里用np.random创建一个随机数组作为输入数据</span><br><br>x = np.random.randn(*[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>])<br><br>x = x.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><br>  <br><br><span class="hljs-comment"># 创建LeNet类的实例，指定模型名称和分类的类别数目</span><br><br>model = LeNet(num_classes=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 通过调用LeNet从基类继承的sublayers()函数，</span><br><br><span class="hljs-comment"># 查看LeNet中所包含的子层</span><br><br><span class="hljs-built_in">print</span>(model.sublayers())<br><br>x = paddle.to_tensor(x)<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> model.sublayers():<br><br>    <span class="hljs-comment"># item是LeNet类中的一个子层</span><br><br>    <span class="hljs-comment"># 查看经过子层之后的输出数据形状</span><br><br>    <span class="hljs-keyword">try</span>:<br><br>        x = item(x)<br><br>    <span class="hljs-keyword">except</span>:<br><br>        x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br><br>        x = item(x)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item.parameters())==<span class="hljs-number">2</span>:<br><br>        <span class="hljs-comment"># 查看卷积和全连接层的数据和参数的形状，</span><br><br>        <span class="hljs-comment"># 其中item.parameters()[0]是权重参数w，item.parameters()[1]是偏置参数b</span><br><br>        <span class="hljs-built_in">print</span>(item.full_name(), x.shape, item.parameters()[<span class="hljs-number">0</span>].shape, item.parameters()[<span class="hljs-number">1</span>].shape)<br><br>    <span class="hljs-keyword">else</span>:<br><br>        <span class="hljs-comment"># 池化层没有参数</span><br><br>        <span class="hljs-built_in">print</span>(item.full_name(), x.shape)<br></code></pre></td></tr></table></figure><h4 id="数据读取模型训练"><a href="#数据读取模型训练" class="headerlink" title="数据读取模型训练"></a>数据读取模型训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># LeNet 识别手写数字</span><br><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">from</span> paddle.vision.transforms <span class="hljs-keyword">import</span> ToTensor<br><br><span class="hljs-keyword">from</span> paddle.vision.datasets <span class="hljs-keyword">import</span> MNIST<br><br>  <br><br><span class="hljs-comment"># 定义训练过程</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model, opt, train_loader, valid_loader</span>):<br><br>    <span class="hljs-comment"># 开启0号GPU训练</span><br><br>    use_gpu = <span class="hljs-literal">True</span><br><br>    paddle.device.set_device(<span class="hljs-string">&#x27;gpu:0&#x27;</span>) <span class="hljs-keyword">if</span> use_gpu <span class="hljs-keyword">else</span> paddle.device.set_device(<span class="hljs-string">&#x27;cpu&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start training ... &#x27;</span>)<br><br>    model.train()<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br><br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br><br>            img = data[<span class="hljs-number">0</span>]<br><br>            label = data[<span class="hljs-number">1</span>] <br><br>            <span class="hljs-comment"># 计算模型输出</span><br><br>            logits = model(img)<br><br>            <span class="hljs-comment"># 计算损失函数</span><br><br>            loss_func = paddle.nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br>            loss = loss_func(logits, label)<br><br>            avg_loss = paddle.mean(loss)<br><br>  <br><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">2000</span> == <span class="hljs-number">0</span>:<br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch_id: &#123;&#125;, loss is: &#123;:.4f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch, batch_id, <span class="hljs-built_in">float</span>(avg_loss.numpy())))<br><br>            avg_loss.backward()<br><br>            opt.step()<br><br>            opt.clear_grad()<br><br>  <br><br>        model.<span class="hljs-built_in">eval</span>()<br><br>        accuracies = []<br><br>        losses = []<br><br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(valid_loader()):<br><br>            img = data[<span class="hljs-number">0</span>]<br><br>            label = data[<span class="hljs-number">1</span>] <br><br>            <span class="hljs-comment"># 计算模型输出</span><br><br>            logits = model(img)<br><br>            pred = F.softmax(logits)<br><br>            <span class="hljs-comment"># 计算损失函数</span><br><br>            loss_func = paddle.nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br>            loss = loss_func(logits, label)<br><br>            acc = paddle.metric.accuracy(pred, label)<br><br>            accuracies.append(acc.numpy())<br><br>            losses.append(loss.numpy())<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[validation] accuracy/loss: &#123;:.4f&#125;/&#123;:.4f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(np.mean(accuracies), np.mean(losses)))<br><br>        model.train()<br><br>  <br><br>    <span class="hljs-comment"># 保存模型参数</span><br><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;mnist.pdparams&#x27;</span>)<br><br>  <br>  <br><br><span class="hljs-comment"># 创建模型</span><br><br>model = LeNet(num_classes=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 设置迭代轮数</span><br><br>EPOCH_NUM = <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 设置优化器为Momentum，学习率为0.001</span><br><br>opt = paddle.optimizer.Momentum(learning_rate=<span class="hljs-number">0.001</span>, momentum=<span class="hljs-number">0.9</span>, parameters=model.parameters())<br><br><span class="hljs-comment"># 定义数据读取器</span><br><br>train_loader = paddle.io.DataLoader(MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>, transform=ToTensor()), batch_size=<span class="hljs-number">10</span>, shuffle=<span class="hljs-literal">True</span>)<br><br>valid_loader = paddle.io.DataLoader(MNIST(mode=<span class="hljs-string">&#x27;test&#x27;</span>, transform=ToTensor()), batch_size=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 启动训练过程</span><br><br>train(model, opt, train_loader, valid_loader)<br><br></code></pre></td></tr></table></figure><hr><h1 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h1><blockquote><p>解决网络层数加深后模型效果没有提升。</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="残差块"><a href="#残差块" class="headerlink" title="残差块"></a>残差块</h3><p>实现方式：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230409204947.png" alt="image.png|250"></p><blockquote><p>一般残差块输出通道数为输入通道数的==四倍==。</p></blockquote><h3 id="ResNet-50"><a href="#ResNet-50" class="headerlink" title="ResNet-50"></a>ResNet-50</h3><blockquote><p> depth = <em><strong>[3,4,6,3]</strong></em><br> 表示 c2 有 3 个残差块，c 3 有 4 个，c 4 有 6 个，c 5 有 3 个。<br> <img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230409212006.png" alt="image.png|525"></p></blockquote><h3 id="飞浆高层-API"><a href="#飞浆高层-API" class="headerlink" title="飞浆高层 API:"></a>飞浆高层 API:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#从paddle.vis ion.models模块中import残差网络，VGG网络，LeNet网络</span><br><span class="hljs-keyword">from</span> paddle.vision.models <span class="hljs-keyword">import</span> resnet50, v9g16, LeNet<br><span class="hljs-keyword">from</span> paddle.vision.datasets <span class="hljs-keyword">import</span> Cifar10 <br><span class="hljs-keyword">from</span> paddle.optimizer <span class="hljs-keyword">import</span> Momentum<br><span class="hljs-keyword">from</span> paddle.regularizer <span class="hljs-keyword">import</span> L2Decay<br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> CrossEnt ropyLoss<br><span class="hljs-keyword">from</span> paddle.metric <span class="hljs-keyword">import</span> Accuracy<br><span class="hljs-keyword">from</span> paddle.vision. transforms <span class="hljs-keyword">import</span> Transpose<br><span class="hljs-comment">#确保从paddle.vis ion.datasets. Cifar10中加载的图像数据是np. ndarray类型</span><br>paddle.vision.set_image_backend( <span class="hljs-string">&#x27;cv2&#x27;</span> )<br><span class="hljs-comment">#调用resnet50模型</span><br>model = padd le .Model( resnet50(pretrained=<span class="hljs-literal">False</span>, num_classes=<span class="hljs-number">10</span>&#125; )<br><span class="hljs-comment">#使用Cifar10数据集</span><br>train_dataset = Cifar10(mode=<span class="hljs-string">&#x27;train&#x27;</span>, transform= =Transpose() )<br>val_dataset = Cifar10 (mode=<span class="hljs-string">&#x27;test&#x27;</span>, transform=Transpose())<br><span class="hljs-comment">#定义优化器</span><br>optimizer = Momentum( learning_rate=<span class="hljs-number">0.01</span>, momentum=<span class="hljs-number">0.9</span>,<br>weight_decay = L2Decay(<span class="hljs-number">1e-4</span>),<br>parameters = model. parameters())<br><span class="hljs-comment">#进行训练前准备</span><br>model.prepare(optimizer, CrossEntropyLoss(), Accuracy(topk=(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)))<br><span class="hljs-comment">#启动训练</span><br>model.fit(train_dataset ,<br>val_dataset ,<br>epochs=<span class="hljs-number">50</span>,<br>batch_size=<span class="hljs-number">64</span>,<br>save_dir=*<span class="hljs-string">&quot;./output&quot;</span>,<br>num_workers=<span class="hljs-number">8</span> )<br> <br></code></pre></td></tr></table></figure><hr><h2 id="图像分类-ResNet-实战：眼疾识别分类"><a href="#图像分类-ResNet-实战：眼疾识别分类" class="headerlink" title="图像分类 ResNet 实战：眼疾识别分类"></a>图像分类 ResNet 实战：眼疾识别分类</h2><h3 id="CV-任务研发流程"><a href="#CV-任务研发流程" class="headerlink" title="CV 任务研发流程"></a>CV 任务研发流程</h3><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230411205932.png" alt="image.png|425"></p><blockquote><p>[!NOTE] Tips<br>其中，基本的计算机视觉任务研发全流程包含模型训练、模型预测和模型部署三大步骤。每个步骤又包含单独的流程：</p><ul><li>数据准备：根据网络接收的数据格式，完成相应的预处理和跑批量数据读取器操作，保证模型正常读取；</li><li>模型构建：设计卷积网络结构；</li><li>特征提取：使用构建的模型提取数据的特征信息；</li><li>损失函数：通过损失函数衡量模型的预测值和真实值的不一致程度，通常损失函数越小，模型性能越好；</li><li>模型评估：在模型训练中或训练结束后岁模型进行评估测试，观察准确率；</li><li>模型预测：使用训练好的模型进行测试，也需要准备数据和模型特征提取，最后对结果进行解析。</li></ul></blockquote><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3>]]></content>
    
    
    <summary type="html">some notes dealing with image classification.</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Image Classify" scheme="https://alleyf.github.io/tags/Image-Classify/"/>
    
  </entry>
  
  <entry>
    <title>目标检测</title>
    <link href="https://alleyf.github.io/2023/03/3962ffddc056.html"/>
    <id>https://alleyf.github.io/2023/03/3962ffddc056.html</id>
    <published>2023-03-17T11:10:56.000Z</published>
    <updated>2023-08-18T10:29:39.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="YOLO算法"><a href="#YOLO算法" class="headerlink" title="YOLO算法"></a>YOLO算法</h1>]]></content>
    
    
    <summary type="html">some konwledge about target detection.</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV" scheme="https://alleyf.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络基础</title>
    <link href="https://alleyf.github.io/2023/03/f41646eecf81.html"/>
    <id>https://alleyf.github.io/2023/03/f41646eecf81.html</id>
    <published>2023-03-17T11:10:27.000Z</published>
    <updated>2023-07-04T14:04:59.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h1><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C,H,W]</code></p><h2 id="步幅（stride）"><a href="#步幅（stride）" class="headerlink" title="步幅（stride）"></a>步幅（stride）</h2><p>卷积核运算过程中==移动的距离大小==。<br>卷积后的输出尺寸计算公式如下：<br>$$ H_{out}= \frac{H+2p_{h}-k_{h}}{s_{h}}+1 $$<br>$$ W_{out}= \frac{W+2p_{w}-k_{w}}{s_{w}}+1 $$</p><blockquote><p>其中 $p_h$ 和 $p_w$ 分别为高度和宽度<strong>填充</strong>，$k_h$ 和 $k_w$ 分别为卷积核的高宽<strong>大小</strong>，$s_h$ 和 $s_w$ 分别为高度和宽度<strong>步幅</strong>。</p></blockquote><blockquote><p>[!NOTE] 提示<br>步幅越大，特征越小，<em><strong>stride=2</strong></em>，则<em><strong>特征缩小一半</strong></em>。</p></blockquote><h2 id="批量卷积"><a href="#批量卷积" class="headerlink" title="批量卷积"></a>批量卷积</h2><p>对RGB三通道，同时输入一个批次（batch）张图片做卷积运算，每张图像卷积后通道叠在一起（不是叠加），如下图所示：<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202303201948212.png" alt="image.png|525"></p><hr><h2 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h2><blockquote><p>感受野是指输出特征图上的像素点所能感受到的输入数据的范围。</p></blockquote><p>从下图可以看出感受野的大小：<br><img src="https://s2.loli.net/2023/03/20/dC7PyWFI5ZmHhxr.png" alt="image.png|250"><br><code>网络越深，越深层特征图的感受野越大，主要从输入的主对角线反映。</code></p><blockquote><p>[!NOTE] 提示<br>对于图像分类任务来说，感受野的大小与网络的性能存在一定的关系。感受野越大，网络可以获取到更广泛的上下文信息，从而更好地理解图像。但过大的感受野对图像分类也会有一定的影响，主要表现在以下两个方面：</p></blockquote><blockquote><ol><li>过大的感受野会<strong>引入过多的噪声和干扰信号</strong>。当感受野越大时，网络就会考虑更远的像素，这些像素可能与目标物体或图案无关，甚至会背离目标。这些噪声和干扰信号会干扰网络的学习，从而导致分类准确性的降低。</li></ol></blockquote><blockquote><ol start="2"><li>过大的感受野会<strong>降低网络的细节敏感度</strong>。当感受野的大小超出图像细节的尺度范围时，网络无法有效地捕捉到细节信息，从而导致分类准确性的降低。尤其是对于一些小尺寸物体和图案，小细节对分类结果的影响会更加显著。</li></ol></blockquote><blockquote><p>因此，对于图像分类任务来说，选择适当的感受野大小非常重要。通常，在<strong>保证网络全局感知能力的同时，应该将感受野限制在合适的尺度范围内</strong>，以避免过度拟合和过大感受野带来的问题。同时，还可以结合多尺度特征提取的方法，综合利用不同感受野下的信息，以获取更全面、更准确的特征，提高分类精度。</p></blockquote><h2 id="Paddle-API卷积"><a href="#Paddle-API卷积" class="headerlink" title="Paddle API卷积"></a>Paddle API卷积</h2><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320203438.png" alt="image.png|400"></p><h3 id="案例1-边缘检测二值图"><a href="#案例1-边缘检测二值图" class="headerlink" title="案例1-边缘检测二值图"></a>案例1-边缘检测二值图</h3><blockquote><p>检测图像黑白分界线。</p></blockquote><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320205235.png" alt="image.png|150"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> fluid. dygraph. guard():<br><span class="hljs-comment">#创建初始化权重参数w</span><br>w = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], dtype= <span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#将权重参数调整成维度为[cout, cin, kh, kw]的四维张里</span><br>w = w.reshape([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment">#创建卷积算子，设置输出通道数，卷积核大小，和初始化权重参数</span><br><span class="hljs-comment"># filter_size = [1, 3]表示kh = 1, kw=3</span><br><span class="hljs-comment">#创建卷积算子的时候，通过参数属性param_ attr, 指定参数初始化方式</span><br><span class="hljs-comment">#这里的初始化方式时，从numpy. ndarray初始化卷积参数</span><br><span class="hljs-comment">#num_channels:输入通道数；num_filters：输出通道数；filter_size：卷积核高宽，param_attr：初始化参数</span><br>conv = Conv2D(num_channels=<span class="hljs-number">1</span>, num_filters=<span class="hljs-number">1</span>, filter_size=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],param_attr=fluid.ParamAttr(<br>initializer=NumpyArrayInitializer(value=w)))<br><span class="hljs-comment">#创建输入图片，图片左边的像素点取值为1，右边的像素点取值为0</span><br>img = np.ones([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>], dtype=<span class="hljs-string">&#x27;f1oat32&#x27;</span>)<br>img[:, <span class="hljs-number">30</span>:] = <span class="hljs-number">0.</span><br><span class="hljs-comment">#将图片形状调整为[N(bach_size), C（chanel）, H, W]的形式</span><br>x = img.reshape([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>])<br><span class="hljs-comment">#将numpy.ndarray转化成paddle中的tensor</span><br>x = fluid.dygraph.to_variable(x)<br><span class="hljs-comment">#使用卷积算子作用在输入图片上</span><br>y = conv(x)<br><span class="hljs-comment">#将输出tensor转化为numpy.ndarray</span><br>out = y.numpy()<br></code></pre></td></tr></table></figure><blockquote><p>查看卷积层参数:<code>conv.parameters()</code><br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320205955.png" alt="image.png|450"></p></blockquote><hr><h3 id="案例2-边缘检测RGB彩图"><a href="#案例2-边缘检测RGB彩图" class="headerlink" title="案例2-边缘检测RGB彩图"></a>案例2-边缘检测RGB彩图</h3><blockquote><p><code>图片初始读入的形状为[H,W,C](垂直像素，水平像素，通道数)，需要调整为[N,C,H,W]格式。</code><br>卷积核：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213046.png" alt="image.png|175"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./work/ images/section1000000098520. jpg&#x27;)</span><br><span class="hljs-string">with fluid.dygraph.guard():</span><br><span class="hljs-string">#设置卷积核参数</span><br><span class="hljs-string">w = np.array([[-1,-1,-1], [-1,8,-1], [-1,-1,-1]], dtype= &#x27;float32&#x27;)/8</span><br><span class="hljs-string">w = w.reshape([1, 1, 3, 3])</span><br><span class="hljs-string">#由于输入通道数是3，将卷积核的形状从[1,1,3,3]调整为[1p3,p,3]</span><br><span class="hljs-string">w = np.repeat(w,3，axis=1)、</span><br><span class="hljs-string">#创建卷积算子，输出通道数为1，卷积核大小为3x3，</span><br><span class="hljs-string">#并使用上面的设置好的数值作为卷积核权重的初始化参数</span><br><span class="hljs-string">conv = Conv2D(num_channels=3, num_filters=1, filter_size=[3,3],param_attr=fluid.ParamAttr(initializer=NumpyArrayInitializer(value=w)))</span><br><span class="hljs-string">  #将读入的图片转化为float32类型的numpy.ndarray</span><br><span class="hljs-string">x = np.array(img).astype(&#x27;float32&#x27;)</span><br><span class="hljs-string">#图片读入成ndarry时，形状是[H, W, C]，</span><br><span class="hljs-string">#将通道这一维度调整到最前面</span><br><span class="hljs-string">x = np.transpose(x, (2,0,1))</span><br><span class="hljs-string">#将数据形状调整为[N, C, H, W]格式</span><br><span class="hljs-string">x = x.reshape(1, 3, img.height, img.width)</span><br><span class="hljs-string">x = fluid.dygraph.to_variable(x)#变为张量格式</span><br><span class="hljs-string">y = conv(x)</span><br><span class="hljs-string">out = y.numpy()#张量转numpy数组</span><br></code></pre></td></tr></table></figure><hr><h3 id="案例3-均值模糊"><a href="#案例3-均值模糊" class="headerlink" title="案例3-均值模糊"></a>案例3-均值模糊</h3><blockquote><p>卷积核：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213328.png" alt="image.png|200"><br>效果对比：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213358.png" alt="image.png|200"></p></blockquote><hr><h1 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h1><h2 id="形状-1"><a href="#形状-1" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C,H,W]</code></p><blockquote><p><code>池化</code>是使用某一位置的相邻输出的总体统计特征来代替网络在该位置的输出<br><code>理解</code>：取输入的局部统计特征作为输出，==可以掩盖变化的细节==。</p></blockquote><h2 id="池化方法"><a href="#池化方法" class="headerlink" title="池化方法"></a>池化方法</h2><ol><li>平均池化<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405140612.png" alt="image.png|200"></li></ol><ol start="2"><li>最大池化<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405140630.png" alt="image.png|200"><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2></li><li>池化的好处是当输入数据做出<strong>少量平移</strong>时，经过池化函数后的大多数输出还能<strong>保持不变</strong>,池化能够<strong>帮助输入的表示近似不变</strong>。</li><li>由于池化之后特征图会变得更小，如果后面连接的是全连接层，能<strong>有效的减小神经元的个数</strong>,<strong>节省存储空间并提高计算效率</strong>。<h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2></li></ol><ul><li>池化<strong>窗口大小</strong>：$pool_size = [k_h,k_w]$</li><li>池化窗口<strong>滑动步幅</strong>：$pool_stride = [stride_ h, stride_w]$</li><li>图片<strong>填充</strong>：$padding=[ph,pw]$</li><li>比较常见的参数配置是：$k_n =k_w=2,stride_h=stride_w=2,p_h=p_w=0$</li><li>采用这样的设置将会使得输出图片高和宽都减半<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2></li><li><strong>没有学习参数</strong></li><li><strong>通道数不变</strong>，每个通道独立进行池化</li><li>对<strong>微小的位置</strong>变化具有<strong>鲁棒性</strong></li></ul><hr><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><blockquote><p>通常在卷积或者全连接这样的线形操作之后，会加上一个非线性的函数，作用在每一个神经元的输出上，从而实现非线性变换的效果。</p></blockquote><h2 id="sigmoid激活函数"><a href="#sigmoid激活函数" class="headerlink" title="sigmoid激活函数"></a>sigmoid激活函数</h2><blockquote><p><strong>说明：</strong> Sigmoid函数只有在x接近于0的地方，导数才比较大，但最大值也只有1/4；在X的数值非常大或者非常小的地方，导数都接近于0<br>$$\begin{array}<br>\text { 反向传播 } \frac{\partial L}{\partial x}=\frac{\partial L}{\partial y} \cdot \frac{\partial y}{\partial x}<br>\text { 这将导致 } \frac{\partial L}{\partial x} \ \text { 会显著的小于 } \frac{\partial L}{\partial y}<br>这将导致张会显著的小于光<br>\end{array}$$</p></blockquote><ol><li>如果X是非常大整数或者非常小的负数，则<strong>x的梯度将接近于0</strong></li><li>即使x的数值接近于0，其梯度最大不超过y的<strong>梯度的1/4</strong>，如果有多层网络使用Sigmoid激活函数，将导致<strong>较靠前</strong>的那些层，<strong>梯度变得非常的小</strong></li></ol><p><em>在神经网络里面，将这种经过反向传播之后，梯度值衰减到接近于0的现象称作<strong>梯度消失</strong>现象</em><br>$$y=\frac{1}{1+e^{-x}}$$</p><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405151136.png" alt="image.png|250"></p><hr><h2 id="ReLU激活函数"><a href="#ReLU激活函数" class="headerlink" title="ReLU激活函数"></a>ReLU激活函数</h2><p>$$<br>y= \begin{cases}0, &amp; (x&lt;0) \ x, &amp; (x \geq 0)\end{cases}<br>$$<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405154029.png" alt="image.png|250"></p><blockquote><p>[!note]</p><ul><li>在x&gt;0的地方，ReLU函数的<strong>导数为1</strong>，能够将y的梯度完整的传递给×，而<strong>不会引起梯度消失</strong>。</li><li>在神经网络发展的早期Sigmoid函数用的比较多，而目前用的较多的激活函数是ReLU</li></ul></blockquote><hr><h1 id="批归一化BatchNorm"><a href="#批归一化BatchNorm" class="headerlink" title="批归一化BatchNorm"></a>批归一化BatchNorm</h1><h2 id="数据分布和模型的数值稳定性"><a href="#数据分布和模型的数值稳定性" class="headerlink" title="数据分布和模型的数值稳定性"></a>数据分布和模型的数值稳定性</h2><p><strong>模型收敛</strong>：需要稳定的数据分布</p><blockquote><p>[!note]<br>                       浅层神经网络—&gt;对输入数据做标准化（也称作归一化)</p><pre><code class="hljs">                   深度神经网络---&gt;仅仅标准化输入数据还不够</code></pre><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405155315.png" alt="image.png"></p></blockquote><p><strong>Batch Normalization 提升数值稳定性</strong></p><blockquote><p>对中间层的输出做标准化，可以保证在网络学习的过程中，网络层的输出具有稳定的分布。</p></blockquote><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>可以<strong>使学习快速进行</strong>（能够使用<strong>较大的学习率</strong>)</li><li>可以<strong>降低</strong>模型<strong>对初始值</strong>的<strong>敏感性</strong></li><li>可以从一定程度上<strong>抑制过拟合</strong></li></ul><h3 id="归一化公式"><a href="#归一化公式" class="headerlink" title="归一化公式"></a>归一化公式</h3><blockquote><p>每一项减去均值，除以方差加一个无穷小的数（$10^{-6}$）防止方差为0无意义.<br>$$<br>\hat{x_i} \leftarrow \frac{x_i-\mu_B}{\sqrt{\left(\sigma_B^2+\epsilon\right)}}<br>$$<br>对标准化输出进行平移和缩放<br>$$<br>y_i \leftarrow \gamma \hat{x}_i+\beta<br>$$<br>其中$\gamma$和$\beta$是可学习的参数，可以赋初始值$\gamma=1$,$\beta=0$,在训练过程中自动不断学习调整.</p></blockquote><h2 id="预测时使用BatchNorm"><a href="#预测时使用BatchNorm" class="headerlink" title="预测时使用BatchNorm"></a>预测时使用BatchNorm</h2><blockquote><p>[!解决方案]<br><strong>训练时</strong>计算在<strong>整个数据集上的均值和方差</strong>，并将<strong>结果保存预测时</strong>不计算样本内均值和方差，而是<strong>使用训练时保存的值</strong></p><ol><li>训练通过<strong>滚动平均</strong>的方式，计算在整个数据集上的均值和方差并保存</li><li>预测时直接加在训练时保存的均值和方差，而不用在样本内计算</li></ol></blockquote><hr><h1 id="丢弃法Dropout"><a href="#丢弃法Dropout" class="headerlink" title="丢弃法Dropout"></a>丢弃法Dropout</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>防止过拟合的方法<br><em><strong>训练阶段</strong></em>：每次随机的删除一部分神经元，不向前传播其所携带的信息，相当于每次都是让不同的模型在学习<br><em><strong>测试阶段</strong></em>：向前传播所有神经元的信息，相当于让这些不同的模型一起工作<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405172108.png" alt="image.png|350"></p></blockquote><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><blockquote><p>训练时随机丢弃了一部分神经元的信息，输出数据的总大小变小了<br>预测时不丢弃神经元，导致预测和训练时的数据分布不一样</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>==downgrade_in_infer==</li></ol><p><strong>训练</strong>时<strong>随机丢弃</strong>一部分神经元；<strong>预测时</strong>不丢弃神经元，但把它们<strong>数值变小</strong><br>2. ==<strong>upscale_in_train</strong>==<br><strong>训练</strong>时<strong>随机丢弃</strong>一部分神经元，但是把<strong>保留</strong>的那些<strong>神经元数值放大</strong>；<strong>预测</strong>时<strong>原样输出</strong>所有神经元的信息</p><blockquote><p>Paddle中默认是<code>downgrade_in_infer</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#设置随机数种子，这样可以保证每次运行结果一致</span><br>np.random.seed(<span class="hljs-number">100</span>)<br><span class="hljs-comment">#创建数据N,C,H,WM,一般对应卷积层的输出</span><br>data1 = np.random.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#创建数据N,K),一般对应全连接层的输出</span><br>data2 = np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>).reshape([-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#使用dropout作用在输入数据上</span><br><span class="hljs-keyword">with</span> fluid.dygraph.guard():<br>x1 = fluid.dygraph.to_variable(data1)<br>out1_1 = fluid.layers.dropout(x1,dropout_prob=<span class="hljs-number">0.5</span>,is_test=<span class="hljs-literal">False</span>)<br>out1_2 = fluid.layers.dropout(x1,dropout_prob=<span class="hljs-number">0.5</span>,is_test=<span class="hljs-literal">True</span>)<br><br>x2 = fluid.dygraph.to_variable(data2)<br>out2_1 = fluid.layers.dropout(x2,dropout_prob=<span class="hljs-number">0.5</span>,\<br>dropout_implementation=<span class="hljs-string">&#x27;upscale_in_train&#x27;</span>)<br>out2_2 = fluid.layers.dropout(x2,dropout_prob=<span class="hljs-number">0.5</span>,\<br>dropout_implementation=<span class="hljs-string">&#x27;upscale_in_train&#x27;</span>,is_test=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h1><blockquote><p>将输入全部转为1维进行线性求和</p></blockquote><h2 id="形状-2"><a href="#形状-2" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C]</code></p><blockquote><p>[!NOTE] 数据变换<br>尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]<br>        x = paddle.reshape(x, [x.shape[0], -1])</p></blockquote>]]></content>
    
    
    <summary type="html">some konwledge about CNN.</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CNN" scheme="https://alleyf.github.io/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉概述</title>
    <link href="https://alleyf.github.io/2023/03/cc1560495a8d.html"/>
    <id>https://alleyf.github.io/2023/03/cc1560495a8d.html</id>
    <published>2023-03-17T11:09:35.000Z</published>
    <updated>2023-04-05T11:34:43.789Z</updated>
    
    <content type="html"><![CDATA[<p>[[卷积神经网络基础]][[目标检测]][[图像分类]]</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>计算机视觉作为一门让机器学会如何去“看”的学科，具体的说，就是让机器去识别摄像机拍摄的图片或视频中的物体，检测出物体所在的位置，并对目标物体进行跟踪，从而理解并描述出图片或视频里的场景和故事，以此来模拟人脑视觉系统。因此，计算机视觉也通常被叫做机器视觉，其目的是建立能够从图像或者视频中“感知”信息的人工系统。</p><p>计算机视觉技术经过几十年的发展，已经在交通（车牌识别、道路违章抓拍）、安防（人脸闸机、小区监控）、金融（刷脸支付、柜台的自动票据识别）、医疗（医疗影像诊断）、工业生产（产品缺陷自动检测）等多个领域应用，影响或正在改变人们的日常生活和工业生产方式。未来，随着技术的不断演进，必将涌现出更多的产品和应用，为我们的生活创造更大的便利和更广阔的机会。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/93476b373dd342d1aae22397aa24c58fc60ab68307fd448189f16c8284723e9d" width = "500"></center><center>图1：计算机视觉技术在各领域的应用</center><p>飞桨为计算机视觉任务提供了丰富的API，并通过底层优化和加速保证了这些API的性能。同时，飞桨还提供了丰富的模型库，覆盖图像分类、检测、分割、文字识别和视频理解等多个领域。用户可以直接使用这些API组建模型，也可以在飞桨提供的模型库基础上进行二次研发。<br>由于篇幅所限，本章将重点介绍计算机视觉的经典模型（卷积神经网络）和两个典型任务（图像分类和目标检测）。主要涵盖如下内容：<br><strong>卷积神经网络</strong>：卷积神经网络（Convolutional Neural Networks, CNN）是计算机视觉技术最经典的模型结构。本教程主要介绍卷积神经网络的常用模块，包括：卷积、池化、激活函数、批归一化、丢弃法等。</p><ul><li><strong>图像分类</strong>：介绍图像分类算法的经典模型结构，包括：LeNet、AlexNet、VGG、GoogLeNet、ResNet，并通过眼疾筛查的案例展示算法的应用。</li><li><strong>目标检测</strong>：介绍目标检测YOLOv3算法，并通过林业病虫害检测案例展示YOLOv3算法的应用。</li></ul><h1 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h1><p>计算机视觉的发展历程要从生物视觉讲起。对于生物视觉的起源，目前学术界尚没有形成定论。有研究者认为最早的生物视觉形成于距今约<a href="https://www.pnas.org/content/109/46/18868">7亿年前的水母之中</a>，也有研究者认为生物视觉产生于距今约5亿年前寒武纪【<a href="https://doi.org/10.1038%2Fnature10097">1</a>, <a href="https://en.wikipedia.org/wiki/Evolution_of_the_eye">2</a>】。寒武纪生物大爆发的原因一直是个未解之谜，不过可以肯定的是在寒武纪动物具有了视觉能力，捕食者可以更容易地发现猎物，被捕食者也可以更早的发现天敌的位置。视觉能力加剧了猎手和猎物之间的博弈，也催生出更加激烈的生存演化规则。视觉系统的形成有力地推动了食物链的演化，加速了生物进化过程，是生物发展史上重要的里程碑。经过几亿年的演化，目前人类的视觉系统已经具备非常高的复杂度和强大的功能，人脑中神经元数目达到了1000亿个，这些神经元通过网络互相连接，这样庞大的视觉神经网络使得我们可以很轻松的观察周围的世界，如 <strong>图2</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/70d8475ed908487680057bf1f2760f10e367e7176acf43ebb380207b748b2377" width = "600"></center><center><br>图2：人类视觉感知</center><hr><p>对人类来说，识别猫和狗是件非常容易的事。但对计算机来说，即使是一个精通编程的高手，也很难轻松写出具有通用性的程序（比如：假设程序认为体型大的是狗，体型小的是猫，但由于拍摄角度不同，可能一张图片上猫占据的像素比狗还多）。那么，如何让计算机也能像人一样看懂周围的世界呢？研究者尝试着从不同的角度去解决这个问题，由此也发展出一系列的子任务，如 <strong>图3</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/d65f1ebcb0054dcb81a8eb50223adc529bb9b63265ab467d931a5df5b2864122" width = "500"></center><center><br>图3：计算机视觉子任务示意图</center>- **(a) Image Classification：** 图像分类，用于识别图像中物体的类别（如：bottle、cup、cube）。- **(b) Object Localization：** 目标检测，用于检测图像中每个物体的类别，并准确标出它们的位置。- **(c) Semantic Segmentation：** 图像语义分割，用于标出图像中每个像素点所属的类别，属于同一类别的像素点用一个颜色标识。- **(d) Instance Segmentation：** 实例分割，值得注意的是，（b）中的目标检测任务只需要标注出物体位置，而（d）中的实例分割任务不仅要标注出物体位置，还需要标注出物体的外形轮廓。在早期的图像分类任务中，通常是先人工提取图像特征，再用机器学习算法对这些特征进行分类，分类的结果强依赖于特征提取方法，往往只有经验丰富的研究者才能完成，如 **图4** 所示。<center><img src="https://ai-studio-static-online.cdn.bcebos.com/01179d17c9f74570b8a618d6123261ce6e10344f11c84dda8e47d44c1eb4fc81" width = "500"></center><center><br>图4：早期的图像分类任务</center>在这种背景下，基于神经网络的特征提取方法应运而生。Yann LeCun是最早将卷积神经网络应用到图像识别领域的，其主要逻辑是使用卷积神经网络提取图像特征，并对图像所属类别进行预测，通过训练数据不断调整网络参数，最终形成一套能自动提取图像特征并对这些特征进行分类的网络，如 **图5** 所示。<center><img src="https://ai-studio-static-online.cdn.bcebos.com/1ccd30567304415d98b0b373ec641a3d00f76d803f194ea4b14aa85ce85bf7bb" width = "500"></center><center><br>图5：早期的卷积神经网络处理图像任务示意</center><p>这一方法在手写数字识别任务上取得了极大的成功，但在接下来的时间里，却没有得到很好的发展。其主要原因一方面是数据集不完善，只能处理简单任务，在大尺寸的数据上容易发生过拟合；另一方面是硬件瓶颈，网络模型复杂时，计算速度会特别慢。<br>目前，随着互联网技术的不断进步，数据量呈现大规模的增长，越来越丰富的数据集不断涌现。另外，得益于硬件能力的提升，计算机的算力也越来越强大。不断有研究者将新的模型和算法应用到计算机视觉领域。由此催生了越来越丰富的模型结构和更加准确的精度，同时计算机视觉所处理的问题也越来越丰富，包括分类、检测、分割、场景描述、图像生成和风格变换等，甚至还不仅仅局限于2维图片，包括视频处理技术和3D视觉等。</p>]]></content>
    
    
    <summary type="html">some overview about DL_CV。</summary>
    
    
    
    <category term="机器学习" scheme="https://alleyf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV" scheme="https://alleyf.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>深度学习论文阅读总结</title>
    <link href="https://alleyf.github.io/2023/03/25848e23b2aa.html"/>
    <id>https://alleyf.github.io/2023/03/25848e23b2aa.html</id>
    <published>2023-03-17T11:09:35.000Z</published>
    <updated>2023-10-05T07:53:32.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>alex 团队使用大规模深度卷积神经网络对 ImageNet 图像分类竞赛中的 120 万张高分辨率图像进行分类的工作。主要总结如下:</p><ol><li>构建了一个包含<strong>6000 万参数、65 万个神经元</strong>的大型卷积神经网络, 包含<strong>5 个卷积层、若干（3）最大池化层和 3 个全连接层</strong>。</li><li>在 ImageNet 2010 比赛的数据集上, 该模型达到了<strong>top-1 错误率 37.5%, top-5 错误率 17.0%</strong>, 显著优于此前最佳结果。</li><li>使用<strong>非饱和神经元（ReLU）和高效（并行）的 GPU</strong> 卷积实现加速了训练。使用了新的 <strong>dropout 正则化</strong>方法减少全连接层过拟合。</li><li>在 ImageNet 2012 比赛中, 该模型的变体获得了 top-5 测试错误率 15.3%的获胜结果, 优于第二名的 26.2%。  </li></ol><hr><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><ol><li><p>当前的对象识别方法大量依赖机器学习, 可以通过收集<strong>更大的数据集</strong>、学习<strong>更强大的模型</strong>和使用<strong>更好的技术</strong>来<strong>防止过拟合</strong>来提高性能。</p></li><li><p><strong>以前</strong>的图像<strong>数据集相对较小</strong>, 新的更大数据集如 <strong>ImageNet</strong> 包含了<strong>上千万个带标签的高分辨率图像</strong>。</p></li><li><p><strong>卷积神经网络</strong> (CNN)是一个大容量的模型, 可以通过调节其<strong>深度和广度</strong>来控制其能力。它对图像的假设大多是正确的, 比标准前馈神经网络的<strong>参数更少, 更易训练</strong>。</p></li><li><p>当前的 <strong>GPU 和高度优化的 2 D 卷积</strong>实现足以训练有趣的大型 CNN, 大型数据集如 ImageNet 包含足够的标记样本来训练这些模型而不会严重过拟合。</p></li><li><p>本文训练了迄今为止<strong>最大的卷积神经网络之一</strong>, 在 ImageNet 数据集上取得了最好的结果。作者编写了<strong>高度优化的 GPU 2 D 卷积</strong>等操作实现。</p></li><li><p>网络的大小主要受当前 <strong>GPU 内存和可接受的训练时间</strong>的限制。作者使用了几种技术来防止过拟合。更深的网络层次似乎很重要。</p></li><li><p>实验表明, 可以通过等待<strong>更快的 GPU 和更大的数据集</strong>来进一步改进结果。</p></li></ol><hr><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-数据集"><a href="#1-数据集" class="headerlink" title="1. 数据集"></a>1. 数据集</h3><ol><li>将图像<strong>下采样</strong>至固定分辨率 <strong>256 × 256</strong>。</li><li><strong>重新缩放</strong>图像，使<strong>短边</strong>的长度为 <strong>256</strong></li></ol><hr><h3 id="2-架构"><a href="#2-架构" class="headerlink" title="2. 架构"></a>2. 架构</h3><h4 id="2-1-ReLU-Nonlinearity"><a href="#2-1-ReLU-Nonlinearity" class="headerlink" title="2.1 ReLU Nonlinearity"></a>2.1 ReLU Nonlinearity</h4><ol><li><p>传统的神经元模型使用 <strong>tanh 或 sigmoid</strong> 作为激活函数, <strong>训练时间较慢且易于梯度消失</strong>。</p></li><li><p>使用 <code>ReLU (f (x)=max (0, x))</code> 作为激活函数可以显著<strong>加快训练速度并且防止过拟合</strong>, 使大型网络的训练成为可能。</p></li></ol><blockquote><p>总之, 使用 ReLU 等非饱和激活函数可以显著加速训练, 这对于大规模深度学习模型非常重要。文章通过实验确证了这一点。</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308181911241.png" alt="image.png|325"></p><blockquote><p>ReLU（实线）在 CIFAR-10 上达到 25% 的训练错误率，比具有 tanh 神经元的等效网络（虚线）快六倍。</p></blockquote><hr><h4 id="2-2-Training-on-Multiple-GPUs"><a href="#2-2-Training-on-Multiple-GPUs" class="headerlink" title="2.2 Training on Multiple GPUs"></a>2.2 Training on Multiple GPUs</h4><ol><li><p>采用的并行化方案本质上是在<strong>每个 GPU 上各放一半的内核（或神经元）</strong>，还有一个额外的技巧：<strong>GPU 仅在某些层中进行通信</strong></p><ul><li>缺点：<span style="background:rgba(255, 183, 139, 0.55)">选择连接模式是交叉验证的一个问题</span></li><li>优点：<span style="background:rgba(205, 244, 105, 0.55)">能够精确调整通信量，直到它达到计算量的可接受的分数</span></li></ul></li><li><p>该方案将 top-1 和 top-5 错误率降低了 <strong>1.7% 和 1.2%</strong></p></li><li><p>双 GPU 网络的<strong>训练时间</strong>比单 GPU 网络略少</p></li></ol><hr><h4 id="2-3-Local-Response-Normalization"><a href="#2-3-Local-Response-Normalization" class="headerlink" title="2.3 Local Response Normalization"></a>2.3 Local Response Normalization</h4><p>局部正则化表达式：<br>$$b_{x,y}^{i}=a_{x,y}^{i}(k+ \alpha \sum <em>{j= \min(0,i-n/2)}^{min(N-1,i+n/2)}(a</em>{x,y}^{j})^{2})^{\beta}$$<br>参数：$k = 2, n = 5, α = 10−4, β = 0.75$ 均为超参数，N：层中内核总数，n：同一空间位置的 n 个“相邻”核，</p><blockquote><p>效果：该方案将 top-1 和 top-5 错误率分别降低了<strong>0.4%和 0.3%</strong></p></blockquote><hr><h4 id="2-4-Overlapping-Pooling"><a href="#2-4-Overlapping-Pooling" class="headerlink" title="2.4 Overlapping Pooling"></a>2.4 Overlapping Pooling</h4><ol><li><p>池化层对同一个核映射中相邻的神经元组输出进行汇总。</p></li><li><p>传统上, 相邻池化单元汇总的邻域不重叠 (非重叠池化)。</p></li><li><p>池化层可以看作是一个栅格, 每个池化单元之间间隔 s 像素, 并汇总一个大小为 z x z 的邻域。</p><ul><li>如果 <strong>s=z</strong>, 则为传统的非重叠池化。 </li><li>如果 <strong>s&lt;z</strong>, 则为有重叠的池化, 该网络采用了 s=2, z=3 的重叠池化。</li></ul></li><li><p>该方案将 top-1 和 top-5 错误率分别降低了**0.4%和 0.3%**。</p></li><li><p>具有重叠池化的模型在训练时往往<strong>更难过拟合</strong>。</p></li></ol><blockquote><p>与传统非重叠池化相比, 重叠池化层可以<strong>汇总有重叠的邻域</strong>, 往往可以<strong>提高准确率并减少过拟合</strong>。该网络采用了具体参数为 s=2, z=3 的重叠池化。</p></blockquote><hr><h4 id="2-5-Overall-Architecture"><a href="#2-5-Overall-Architecture" class="headerlink" title="2.5 Overall Architecture"></a>2.5 Overall Architecture</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308181930025.png" alt="image.png"></p><blockquote><ol><li>一个 GPU 运行图顶部的层部分，而另一个 GPU 运行底部的层部分。 GPU 仅在某些层进行通信。</li><li>第二到第五个卷积层顺序连接, 每层卷积核大小和数量分别为 256 个 5 x 5 x 48、384 个 3 x 3 x 256、384 个 3 x 3 x 192 和 256 个 3 x 3 x 192, 全连接层每个有 4096 个神经元。</li></ol></blockquote><hr><h3 id="3-防止过拟合"><a href="#3-防止过拟合" class="headerlink" title="3. 防止过拟合"></a>3. 防止过拟合</h3><h4 id="3-1-Data-Augmentation"><a href="#3-1-Data-Augmentation" class="headerlink" title="3.1 Data Augmentation"></a>3.1 Data Augmentation</h4><ol><li>普遍通用方式：使用<strong>标签保留转换</strong>人为地<strong>扩大数据集</strong></li><li>本文采用的方式：<ul><li>生成<strong>图像平移和水平反射</strong>（256 x 256 –&gt; 224 × 224 附带水平反射）</li><li><strong>改变</strong>训练图像中 <strong>RGB 通道的强度</strong>（ RGB 像素值集执行 <strong>PCA</strong>，对于每个训练图像，我们添加多个找到的主成分）</li></ul></li></ol><blockquote><p>[!NOTE] Conclusion</p><ul><li>该方案将 top-1 错误率降低了 1%以上</li><li>对象身份对于<strong>照明强度和颜色</strong>的变化是不变的</li></ul></blockquote><blockquote><p>新概念：<strong>PCA</strong><br>PCA (主成分分析)是一种广泛用于数据分析和机器学习的统计方法。它的主要作用是:</p><ol><li><strong>减维</strong>: PCA 通过正交变换, 将高维数据集投影到低维空间中, 同时尽量保留原数据的信息。</li><li><strong>去相关</strong>: PCA 可以去除数据间的相关性, 将高维数据转换为线性无关的低维特征。</li><li><strong>特征提取</strong>: PCA 可以将数据集中的主要特征提取出来, 去除噪声, 使得数据集中的特征更加显著。<br>其基本思想是利用正交变换把原始数据集投影到某个最佳子空间, 使得投影后的样本点能够最大限度保留原样本点的信息 (样本点的方差)。数学上, 它通过求数据协方差矩阵的特征向量来实现。PCA 是一种常用的无监督学习方法。</li></ol></blockquote><hr><h4 id="3-2-Dropout"><a href="#3-2-Dropout" class="headerlink" title="3.2 Dropout"></a>3.2 Dropout</h4><blockquote><p>具体做法：在前两个全连接层中使用 dropout，没有 dropout 时会过拟合，Dropout 大约使迭代次数加倍来收敛</p></blockquote><ul><li><p>Dropout 是一种很有效的模型集成技术, 在训练时<strong>随机让一半的隐层单元输出为 0</strong>。</p></li><li><p>Dropout 使得<strong>每次输入时神经网络采样不同的架构</strong>, 但这些架构<strong>共享权重</strong>。</p></li><li><p>这<strong>减少</strong>了<strong>神经元之间的复杂适应性</strong>, 迫使其学习更加鲁棒的特征。</p></li><li><p>在测试时使用所有神经元, 但将其<strong>输出乘以 0.5</strong> 来近似地取指数数量 dropout 网络的预测分布的几何平均。</p></li></ul><blockquote><p>总的来说, dropout 通过随机扰动实现模型集成, 减少过拟合, 但需要更多的迭代次数。</p></blockquote><hr><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ol><li>随机梯度下降，批量大小为 128 ，动量为 0.9，权重衰减为 0.0005，轮数为 90</li><li>初始化的每层的权重来自标准差为 0.01 的零均值高斯分布</li><li>第二、第四和第五卷积层以及全连接隐藏层中的神经元偏差为常数 1，其余层中的神经元偏差为常数 0</li><li>学习率初始化为 0.01，当验证错误率停止以当前学习率提高时，将学习率除以 10</li></ol><blockquote><p>新概念：L 2</p><ul><li>L 2 在深度学习中通常指 L 2 正则化 (L 2 regularization)。L 2 正则化是一种常用的正则化技术, 主要作用是为了<strong>防止模型过拟合</strong>。</li><li>L 2 正则化的具体做法是在模型的损失函数中<strong>引入权重参数的 L 2 范数作为惩罚项</strong>。也就是在损失函数中添加<em><em>λ</em>||w||^2</em>*, 其中 w 是模型的参数,||w||^2 表示参数 w 的 L 2 范数,λ是超参数用于控制惩罚力度。</li><li>引入 L 2 范数会惩罚模型参数的大小, <strong>使得参数向 0 收缩, 从而达到减小模型复杂度</strong>, 防止过拟合的目的。一般来说, L 2 正则化在实际应用中使用更为广泛, 因为 L 2 正则化更容易优化, 且可以<strong>防止参数爆炸</strong>。</li></ul></blockquote><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li><p>大型深层卷积神经网络通过<strong>纯监督学习</strong>在一个非常复杂的数据集上取得了<strong>记录性的结果</strong>。</p></li><li><p><strong>删除任何一个卷积层</strong>, 网络的<strong>性能</strong>都会<strong>下降</strong>, 如删除中间层会导致 top-1 性能降低约 <strong>2%</strong> </p></li><li><p>作者希望能在<strong>视频序列</strong>上应用<strong>更大更深的卷积网络</strong>, 因为时间信息可以提供静态图像中没有的有用信息。</p></li></ul><hr><h1 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h1><blockquote><p>VGGNet 是牛津大学视觉几何组 (Visual Geometry Group)提出的模型，该模型在 2014 ImageNet 图像分类与定位挑战赛 ILSVRC-2014 中取得在分类任务第二，定位任务第一的优异成绩。VGGNet 突出的贡献是证明了很小的卷积，通过增加网络深度可以有效提高性能。VGG 很好的继承了 Alexnet 的衣钵同时拥有着鲜明的特点。相比 Alexnet ，VGG 使用了更深的网络结构，证明了增加网络深度能够在一定程度上影响网络性能。 </p></blockquote><h2 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h2><ul><li>研究非常深的 CNN 在大规模图像分类中的效果</li><li>主要贡献: 通过增加网络深度来提高 ImageNet 分类性能</li><li>实验中深度从 11 层增加到 19 层, 使用 3 x 3 小卷积核</li><li>分类错误率随网络深度的增加而降低</li><li>在 ILSVRC 2014 分类任务中获得了第二名</li></ul><hr><h2 id="背景介绍-1"><a href="#背景介绍-1" class="headerlink" title="背景介绍"></a>背景介绍</h2><ul><li>CNN 近年来在图像识别中成功, 得益于大数据集和 GPU 计算</li><li>ILSVRC 竞赛推动了从浅层到深层网络的发展</li><li>本文通过增加深度来提升 CNN 性能</li><li>使用全 3 x 3 小卷积核, 增加非线性映射判别性, 减少参数量</li></ul><hr><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><h3 id="卷积网络配置"><a href="#卷积网络配置" class="headerlink" title="卷积网络配置"></a>卷积网络配置</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308191508459.png" alt="image.png|400"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308191506627.png" alt="image.png|400"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308191506264.png" alt="image.png|325"></p><ul><li>输入 224 x 224 RGB 图像, 均值归一化预处理</li><li>所有卷积层使用 3 x 3 小卷积核</li><li>1 x 1 卷积可看作通道上的线性变换</li><li>卷积步长为 1, 使用 padding 保持分辨率  </li><li>5 次最大池化下采样</li><li>3 个全连接层, 最后分类层 1000 个输出</li><li>所有隐层使用 ReLU 激活函数</li><li>提出了 11-19 层的 5 种配置进行比较</li></ul><h3 id="分类框架"><a href="#分类框架" class="headerlink" title="分类框架"></a>分类框架</h3><ul><li>SGD 优化, momentum, dropout, batchsize=256</li><li>先训练 11 层网络 A, 初始化更深网络部分层权重</li><li>训练集数据增强: 随机裁剪, 翻转, 颜色抖动 </li><li>测试时多尺度密集预测, 平均结果</li></ul><hr><h2 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h2><h3 id="分类实验"><a href="#分类实验" class="headerlink" title="分类实验"></a>分类实验</h3><ul><li>在 ImageNet 上评估不同配置</li><li>错误率随深度减小, 19 层效果趋于饱和</li><li>多尺度评估优于单尺度, 训练尺度抖动也优于固定尺度</li><li>模型融合进一步提升, 2 模型组合 top-5 错误率 6.8%</li></ul><h3 id="定位实验"><a href="#定位实验" class="headerlink" title="定位实验"></a>定位实验</h3><ul><li>使用深度 CNN 预测 bounding box 进行对象定位</li><li>每类回归优于共享回归, 微调所有层优于仅全连接层</li><li>最终定位错误率 25.3%, 优于之前 state-of-the-art (SOTA)</li></ul><h3 id="很深特征泛化性"><a href="#很深特征泛化性" class="headerlink" title="很深特征泛化性"></a>很深特征泛化性</h3><ul><li>在其他数据集上测试 ImageNet 预训练模型作为特征提取器</li><li>在 PASCAL VOC、Caltech 等数据集上获得了 state-of-the-art 的分类效果</li><li>显示了很深 CNN 模型学到的特征具有很强的泛化性</li></ul><hr><h2 id="重点总结"><a href="#重点总结" class="headerlink" title="重点总结"></a>重点总结</h2><blockquote><ol><li><p><strong>小卷积核组</strong>: 作者通过堆叠多个 3*3 的卷积核 (少数使用 1*1）来替代大的卷积核，以减少所需参数；</p></li><li><p><strong>小池化核</strong>: 相比较于 AlexNet 使用的 3*3 的池化核，VGG 全部为 2*2 的池化核；</p></li><li><p><strong>网络更深特征图更宽</strong>: 卷积核专注于扩大通道数，池化专注于缩小高和宽，使得模型更深更宽的同时，计算量的增加不断放缓；</p></li><li><p><strong>将卷积核替代全连接</strong>: 作者在测试阶段将三个全连接层替换为三个卷积，使得测试得到的模型结构可以接收任意高度或宽度的输入。</p></li><li><p><strong>多尺度</strong>: 作者从多尺度训练可以提升性能受到启发，训练和测试时使用整张图片的不同尺度的图像，以提高模型的性能。</p></li><li><p><strong>去掉了 LRN 层</strong>: 作者发现深度网络中 LRN（Local Response Normalization，局部响应归一化）层作用不明显。</p></li></ol></blockquote><hr><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h3><p><strong>感受野（感受野其实就是结果层一个神经元节点发生变动能影响多少个输入层神经元节点）</strong><br>计算公式：<br>$$feature_{i}=(feature_{i+1}-1)\times window_{-}strides+kernel_{-}size$$<br>$f_i$ 是第 i 层感受野，times 为第 i 步的步长，kernel_size 为卷积核或池化核大小。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308191524259.png" alt="image.png|450"></p><blockquote><ul><li>感受野决定了神经网络能“看到”输入图像的哪一部分。每个神经元只连接到输入图像的一小块区域, 这块区域就是这个神经元的感受野。</li><li>在卷积神经网络中, 通过设置卷积核的大小, 可以控制每个神经元的感受野大小。典型的卷积核大小是 <strong>3 x 3 或 5 x 5</strong>。</li><li><strong>网络层数越深, 神经元的感受野会越来越大</strong>。这是因为每个神经元不仅连接到输入, 还连接到前一层的神经元。所以层与层堆叠, 会逐步扩大感受野。</li><li>扩大感受野有利于<strong>捕捉输入图像的全局信息</strong>, 以及学习更抽象和高级的特征表示。但是计算量也会增加。所以需要在两者之间做 trade-off。</li><li>在<strong>全连接层</strong>, 每个神经元的感受野是<strong>整个输入图像</strong>。</li></ul><p>总体来说, 调整卷积网络的感受野大小, 是控制网络提取<strong>局部还是全局信息</strong>的一个重要方法。这在卷积网络设计中需要特别考虑。</p></blockquote><hr><h1 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h1><h2 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h2><p align="justify">这篇文章介绍了一个名为 Inception 的深度卷积神经网络架构，它在 ImageNet Large-Scale Visual Recognition Challenge 2014 (ILSVRC 14)的分类和检测任务中取得了新的最优结果。该架构的主要特点是在网络内部改进了计算资源的利用。通过精心设计，增加了网络的深度和宽度，同时保持了计算预算不变。为了优化质量，架构决策基于 Hebbian 原理和多尺度处理的直觉。在 ILSVRC 14 中使用的一个特定版本称为 GoogLeNet，是一个 22 层深的网络，其质量在分类和检测的背景下进行了评估</p><hr><h2 id="背景介绍-2"><a href="#背景介绍-2" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>想要更好的预测效果，就要从网络深度和网络宽度两个角度出发增加网络的复杂度。<br>但这个思路有两个较为明显的问题：</p><ol><li><p>首先，更复杂的网络意味着更多的参数，也很容易过拟合；</p></li><li><p>其次，更复杂的网络会消耗更多的计算资源，而且卷积核个数设计不合理，导致了卷积核中参数没有被完全利用 (多数权重都趋近 0)时，会造成大量计算资源的浪费。</p></li></ol><p>因此 GoogLeNet 在专注于加深网络结构的同时，引入了新的基本结构——Inception 模块，以增加网络的宽度。GoogLeNet 一共 22 层，没有全连接层，在 2014 年的 ImageNet 图像识别挑战赛中获得了冠军。</p><h3 id="2-1-稀疏运算特性"><a href="#2-1-稀疏运算特性" class="headerlink" title="2.1 稀疏运算特性"></a>2.1 稀疏运算特性</h3><h4 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h4><p>在矩阵中，<strong>若数值为 0 的元素数目远远多于非 0 元素的数目，并且非 0 元素分布没有规律时，则称该矩阵为稀疏矩阵</strong>；与之相反，若非 0 元素数目占大多数时，则称该矩阵为<strong>稠密矩阵</strong>。定义非零元素的总数比上矩阵所有元素的总数为<strong>矩阵的稠密度</strong>。</p><h4 id="稀疏运算"><a href="#稀疏运算" class="headerlink" title="稀疏运算"></a>稀疏运算</h4><p>根据上面的缺点，作者认为我们应该把<strong>全连接</strong>层替换成<strong>稀疏连接</strong>结构，这样就可以避免计算资源的浪费，加速收敛。作者还提到了<strong>Hebbian principle</strong>，主旨是： </p><ol><li>如果突触两侧的两个神经元（即连接）<strong>同时被激活</strong>，则该突触的<strong>强度会选择性地增加</strong>。</li><li>如果突触两侧的两个神经元被<strong>异步激活</strong>，则该突触被<strong>选择性地削弱或消除.</strong></li></ol><h3 id="2-2-并行计算"><a href="#2-2-并行计算" class="headerlink" title="2.2 并行计算"></a>2.2 并行计算</h3><p>随着现在计算硬件的飞速发展，我们如果在 gpu 上用稀疏计算，那么它的效率将为减少 100 倍，无论我们怎么调试，它的效果都不尽人意，所以作者认为要充分利用 gpu 并行计算。</p><h4 id="结合稀疏与并行"><a href="#结合稀疏与并行" class="headerlink" title="结合稀疏与并行"></a>结合稀疏与并行</h4><p>想要找到一个鱼与熊掌兼得的方案，<strong>在使用稀疏运算的优势的同时，还要充分利用 GPU</strong>。利用稀疏矩阵分解成密集矩阵计算的原理来加快收敛速度。举个例子下图左侧是个稀疏矩阵（很多元素都为 0，不均匀分布在矩阵中），和一个 2 x 2 的矩阵进行卷积，需要对稀疏矩阵中的每一个元素进行计算；如果像右图那样把稀疏矩阵分解成 2 个子密集矩阵，再和 2 x 2 矩阵进行卷积，稀疏矩阵中 0 较多的区域就可以不用计算，计算量就大大降低, 但是这些都是作者的假设，他也不能合理的解释其原因.<br><img src="https://pic1.zhimg.com/80/v2-ced223397595dd66bede062845e2f9ec_1440w.webp"></p><hr><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="3-1-Inception-模块"><a href="#3-1-Inception-模块" class="headerlink" title="3.1 Inception 模块"></a>3.1 Inception 模块</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308251404653.png" alt="image.png|450"><br>Inception 模块的基本组成结构可以分为四个部分：<strong>1 x 1 卷积、3 x 3 卷积、5 x 5 卷积和 3 x 3 最大池化</strong>。然后将这四部分的运算结果按通道进行组合。<br>这就是 Naive Inception（上图 a）的核心思想：<strong>利用不同大小的卷积核实现不同尺度上的特征提取，并最终将它们合并，以获得更好的图像表示</strong>（即探索特征图上不同邻域之间的“相关性”）。<br>注意：每个分支产生的<strong>特征矩阵的高度和宽度必须相同</strong>。<br>然而，Naive Inception 有两个缺点：</p><blockquote><ol><li>所有卷积层直接接收前一层输入的数据，导致卷积层的计算量很大（一次计算变为四次）。</li><li>在该模块中使用的最大池化层会保留输入数据的特征图的深度，因此合并后总输出的特征图深度一定会增加，这进一步增加了网络结构的计算量。</li></ol></blockquote><p>因此，增加了<strong>使用 1 x 1 卷积操作的目的是进行压缩降维，以减少参数量</strong>（即上图 b），从而让网络更深、更宽，更好地提取特征。这种思想也被称为 Pointwise Conv（逐点卷积），简称 PW。<br>压缩降维：通过调整卷积层的输出通道数来实现这一目标。</p><blockquote><p>减少参数量：假设输入通道数为 Cin，原本是直接要使用输出通道数为 Cout 的 N*N 卷积层来进行卷积，那么所需参数量为 Cin*Cout*N*N；如果加上输出通道数为 k 的 1*1 卷积核的话，所需参数量为：Cin*k+N*N*Cout*k，只要 k 足够小就能使参数量大幅度下降了。</p></blockquote><h3 id="3-2-辅助分类器"><a href="#3-2-辅助分类器" class="headerlink" title="3.2 辅助分类器"></a>3.2 辅助分类器</h3><p>因为神经网络的<strong>中间层也具有很强的识别能力</strong>，因此 GoogLeNet 在一些中间层中添加了含有多层的分类器。GoogLeNet 中共增加了<strong>两个辅助的 softmax 分支</strong>。网络结构如上图所示（其中的红圈圈就是辅助的分类器）。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308251417988.png" alt="image.png|400"><br>GoogLeNet 网络引入了辅助 softmax 分支的目的主要有三个作用。</p><ol><li><p>首先，为了<strong>避免梯度消失问题</strong>，在反向传播时，如果某一层求导为 0，则链式求导的结果也会为 0。因此，在中间层中<strong>添加辅助 softmax 分支可以保证梯度能够向前传递，避免梯度消失的问题</strong>，提高网络的训练效果。</p></li><li><p>其次，<strong>辅助 softmax 分支将中间某一层的输出用作分类器，起到了模型融合的作用</strong>。最终的分类结果不仅依赖于主分类器的结果，还考虑了这两个辅助分类器的结果，通过加权融合的方式得到最终的训练得到的分类结果。然而，在实际测试中，这两个辅助 softmax 分支通常会被去掉，因为它们的主要作用是向前传导梯度，在训练完成后就没有太多的价值，理应被丢弃。</p></li><li><p>另外，辅助分类器还起到了<strong>正则化的作用</strong>。在进一步的研究中，Google 团队发现，在训练早期，辅助分类器并没有改善收敛速度。在两种网络达到高精度之前，两种网络的训练进度几乎是相同的。直到接近训练结束时，有辅助分支的网络才开始超越没有任何分支的网络的准确性，达到更高的稳定水平。因此，辅助分类器更多地起到了正则化的作用，防止模型过拟合。</p></li></ol><p>综上所述，GoogLeNet 网络中的辅助 softmax 分支具有避免梯度消失、模型融合和正则化的作用。这一设计在提高网络的训练效果和稳定性方面取得了良好的效果。</p><h3 id="3-3-Average-pooling"><a href="#3-3-Average-pooling" class="headerlink" title="3.3 Average pooling"></a>3.3 Average pooling</h3><p align="justify">网络一共 22 层，为了减少参数作者把 alexnet 的两层全连接层换成了<font color="#ff0000">全局平均池化</font>，数据有多少类别，最后的 channel 数就是多少，把每个 channel 的 feature 换成这个 channel 所有 feature 的平均值，再经过 soft Max。最终通过实验发现，利用 average pooling 的精度比全连接层好了 6%。</p>### 3.4 网络结构共 5 段，9 个 inception 块，stage 3 两个，stage 4 五个，stage 5 两个。<p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308251448902.png" alt="image.png|250"><br>模型参数如下图所示：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308251449022.png" alt="image.png"></p><hr><h2 id="实验-2"><a href="#实验-2" class="headerlink" title="实验"></a>实验</h2><h3 id="训练方法-Training-Method"><a href="#训练方法-Training-Method" class="headerlink" title="训练方法 (Training Method)"></a>训练方法 (Training Method)</h3><h4 id="超参数设置"><a href="#超参数设置" class="headerlink" title="超参数设置"></a>超参数设置</h4><p>dropout：0.7 SGDM：momentum=0.9 learning rate：decreasing learning rate by 4% every 8 epoch。</p><h3 id="模型集成"><a href="#模型集成" class="headerlink" title="模型集成"></a>模型集成</h3><h4 id="训练阶段"><a href="#训练阶段" class="headerlink" title="训练阶段"></a>训练阶段</h4><p>作者训练了 7 个模型，这七个模型有相同的学习率策略，模型结构，初始化权重（由于作者的疏忽）。不同点： 根据不同的图像采样，随机的图像输入顺序。</p><h4 id="预测阶段"><a href="#预测阶段" class="headerlink" title="预测阶段"></a>预测阶段</h4><ol><li>把图像根据短边 resize 四个尺寸，分别为 256、288，320、352。</li><li>每个尺寸在根据左中右，上中下分别裁剪出三个小图。</li><li>把每张小图取四个角和中央，然后 resize 224 * 224。</li><li>然后每张图做一个镜像操作。根据上述操作，每张图可以变成 4 * 3 * 6 * 2 = 144 张，然后对结果取均值。</li></ol><p><img src="https://pic2.zhimg.com/80/v2-1e5a618c963df39db5d6ce274adf4619_1440w.webp"></p><hr><h2 id="重点总结-1"><a href="#重点总结-1" class="headerlink" title="重点总结"></a>重点总结</h2><blockquote><p>下面这幅图将 Inception 模块所使用到的参数信息标注在每个分支上，其中 # 1 x 1 对应着分支 1 上 1 x 1 的卷积核个数， # 3 x 3 reduce 对应着分支 2 上 1 x 1 的卷积核个数， # 3 x 3 对应着分支 2 上 3 x 3 的卷积核个数， # 5 x 5 reduce 对应着分支 3 上 1 x 1 的卷积核个数， # 5 x 5 对应着分支 3 上 5 x 5 的卷积核个数，poolproj 对应着分支 4 上 1 x 1 的卷积核个数。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200429112707888.png" alt="在这里插入图片描述"><br><strong>多个尺寸上进行卷积再聚合</strong><br>上图可以看到对输入做了 4 个分支，分别用不同尺寸的 filter 进行卷积或池化，最后再在特征维度上拼接到一起。这种全新的结构有什么好处呢？Szegedy 从多个角度进行了解释：<br><strong>解释 1</strong>：在直观感觉上在<strong>多个尺度上同时进行卷积，能提取到不同尺度的特征</strong>。特征更为丰富也意味着最后分类判断时更加准确。<br><strong>解释 2</strong>：利用<strong>稀疏矩阵分解成密集矩阵</strong>计算的原理来<strong>加快收敛速度</strong>。<br>举个例子下图左侧是个稀疏矩阵（很多元素都为 0，不均匀分布在矩阵中），和一个 2 x 2 的矩阵进行卷积，需要对稀疏矩阵中的每一个元素进行计算；如果像右图那样把稀疏矩阵分解成 2 个子密集矩阵，再和 2 x 2 矩阵进行卷积，稀疏矩阵中 0 较多的区域就可以不用计算，计算量就大大降低。<strong>这个原理应用到 inception 上就是要在特征维度上进行分解！</strong><br>传统的卷积层的输入数据只和一种尺度（比如 3 x 3）的卷积核进行卷积，输出固定维度（比如 256 个特征）的数据，所有 256 个输出特征基本上是均匀分布在 3 x 3 尺度范围上，这可以理解成输出了一个稀疏分布的特征集；而 inception 模块在多个尺度上提取特征（比如 1 x 1，3 x 3，5 x 5），输出的 256 个特征就不再是均匀分布，而是相关性强的特征聚集在一起（比如 1 x 1 的的 96 个特征聚集在一起，3 x 3 的 96 个特征聚集在一起，5 x 5 的 64 个特征聚集在一起），这可以理解成多个密集分布的子特征集。这样的特征集中因为相关性较强的特征聚集在了一起，不相关的非关键特征就被弱化，同样是输出 256 个特征，inception 方法输出的特征“冗余”的信息较少。用这样的“纯”的特征集层层传递最后作为反向计算的输入，自然收敛的速度更快。</p><p><img src="https://img-blog.csdnimg.cn/20200429114501229.png" alt="在这里插入图片描述"></p><p><strong>解释 3</strong>：Hebbin 赫布原理。<br>Hebbin 原理是神经科学上的一个理论，解释了在学习的过程中脑中的神经元所发生的变化，用一句话概括就是 fire togethter, wire together。赫布认为“两个神经元或者神经元系统，如果总是同时兴奋，就会形成一种‘组合’，其中一个神经元的兴奋会促进另一个的兴奋”。比如狗看到肉会流口水，反复刺激后，脑中识别肉的神经元会和掌管唾液分泌的神经元会相互促进，“缠绕”在一起，以后再看到肉就会更快流出口水。用在 inception 结构中就是要把相关性强的特征汇聚到一起。这有点类似上面的解释 2，把 1 x 1，3 x 3，5 x 5 的特征分开。因为训练收敛的最终目的就是要提取出独立的特征，所以预先把相关性强的特征汇聚，就能起到加速收敛的作用。<br>在 inception 模块中有一个分支使用了 max pooling，作者认为 pooling 也能起到提取特征的作用，所以也加入模块中。注意这个 pooling 的 stride=1，pooling 后没有减少数据的尺寸</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="http://www.taodudu.cc/news/show-1217904.html?action=onClick">GoogLeNet——CNN经典网络模型详解（pytorch实现）</a></li><li><a href="https://zhuanlan.zhihu.com/p/579891517">深度学习：GoogLeNet核心思想详细讲解 - 知乎</a></li><li><a href="https://blog.csdn.net/weixin_55073640/article/details/128550616">GoogLeNet详解_tt丫的博客-CSDN博客</a></li><li><a href="https://www.bilibili.com/video/BV1b5411g7Xo?p=1&vd_source=9c896fa9c3f9023797e8efe7be0c113e">GoogLeNet_哔哩哔哩_bilibili</a></li></ol><hr><h1 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h1><h2 id="摘要-3"><a href="#摘要-3" class="headerlink" title="摘要"></a>摘要</h2><p>本文提出了一个残差学习框架，用于训练深度神经网络。通过引入残差块，可以让网络更深，同时避免了梯度消失和梯度弥散的问题。在多个视觉识别任务中，残差网络都取得了比传统网络更好的结果。</p><hr><h2 id="背景介绍（相关研究）"><a href="#背景介绍（相关研究）" class="headerlink" title="背景介绍（相关研究）"></a>背景介绍（相关研究）</h2><p>在近些年中，深度网络逐渐往更深的方向发展，但是更深的网络训练更加困难，因为梯度消失和梯度弥散的问题会导致网络难以收敛。之前的研究提出了一些方法，如使用更好的初始化方法、使用更好的激活函数等，但是这些方法并不能完全解决问题。本文提出了一种新的方法，即残差学习框架，通过引入残差块来解决梯度消失和梯度弥散的问题。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211604278.png" alt="image.png|500"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211613960.png" alt="image.png|500"></p><hr><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><h3 id="Identity-Mapping-by-Shortcuts"><a href="#Identity-Mapping-by-Shortcuts" class="headerlink" title="Identity Mapping by Shortcuts"></a>Identity Mapping by Shortcuts</h3><p>$$y=F(x, \left{ W_{i}\right})+x$$</p><hr><p>$$y=F(x, \left{ W_{i}\right})+W_{s}x$$</p><blockquote><p>若残差块输入输出维度一致，则直接短接即可；<br>   若唯独不一致，则对输入进行降维增维处理将输入输出维度统一。</p></blockquote><h3 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211621589.png" alt="image.png|450"></p><blockquote><p>实现为等维直接短接，虚线为异维进行 A (0 填充) /B（投影快捷映射）</p></blockquote><hr><h2 id="实验-3"><a href="#实验-3" class="headerlink" title="实验"></a>实验</h2><h3 id="ImageNet"><a href="#ImageNet" class="headerlink" title="ImageNet"></a>ImageNet</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211631231.png" alt="image.png"></p><h3 id="CIFAR-10"><a href="#CIFAR-10" class="headerlink" title="CIFAR-10"></a>CIFAR-10</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211631353.png" alt="image.png|450"><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211632281.png" alt="image.png"><br>上图左边指的是 Plain Net, 然而 deeper 的时候，会出现明显的 <strong>degradation</strong>。当深度达到 100+的时候，plain Net 的错误率达到了 60%以上。<br>上图中间这是 ResNet，可以看到当 deeper 的时候，错误率也在降低，并没有出现所谓的 degradation。<br>然而右边则显示 <strong>1202 layers</strong> 的 ResNet 的错误率比 <strong>101 layers</strong> 的<strong>错误率高</strong>，作者认为这<strong>不是 degradation 导致</strong>，而是由于这么<strong>大的参数量在 cifar 10 这个小数据集上过拟合</strong>导致。</p><hr><h2 id="重点总结-2"><a href="#重点总结-2" class="headerlink" title="重点总结"></a>重点总结</h2><h3 id="1-残差块"><a href="#1-残差块" class="headerlink" title="1. 残差块"></a>1. 残差块</h3><p>作者发现，当加深模型深度时，模型的测试效果没有变好，反而变差。不符合所想的结果，因为浅层的网络应该是深层网络的一个子集，深层网络不应该比浅层网络表现的不好。然而实验的结果表明，当在浅层网络后加恒等映射层，深层网络的效果反而没有浅层网络好。为什么会出现这种原因呢？作者猜想，可能是因为深层网络难以训练。那么为什么会难以训练呢？可能是因为深层网络的最后面的层难以学习到恒等映射，因为浅层网络已经有很好的表现效果了，最后面的层如果找不到更好的表示效果就需要学习恒等映射，而让网络去学习恒等映射是很困难的。</p><blockquote><p>为了解决网络学习恒等映射困难的问题，作者就想，既然学习恒等映射困难，我们就让网络学习 $f(x)=0$ 这个映射。也就引出了参差学习块。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200221174711860.png" alt="20200221174711860.png|400"><br>正常网络的输入是 x ，输出是 f (x)，如果我们要学习恒等映射，也就是让网络的部分学会 f (x)=x，即图中 f (x) 的部分学会一个 f (x) = x 的映射关系，但是我们说直接让网络去学习恒等映射很困难，怎么办？</p><blockquote><p>假设网络的输出是 h (x)，那么不加 shortcut connection 的网络的输出就是 h (x)=f (x)=x，为了让网络更好拟合恒等映射，我们让 h (x)=f (x)+x，那么我们看网络要学习的映射 f (x)，就变为了 f (x)=h (x)−x，这时我们发现，如果直接让 f (x)=0，那么 h (x)=x，也就是说我们让网络输出的结果和恒等映射相同，而网络只学习了 f (x)=0 这个映射，这个映射要比 f (x)=x 恒等映射更好学习，即模型会更好训练，而不受深层的影响，因为深层中多余的层我们可以都学恒等映射，最起码结果不会比浅层的结果差。然而实验结果表明，加上 shortcut connection 的深层网络比不加 shortcut connection 的浅层网络效果还好，这也就说明了深层网络所能提取的信息更高，抽象能力更强。</p></blockquote><h3 id="2-恒等快捷映射和投影快捷映射"><a href="#2-恒等快捷映射和投影快捷映射" class="headerlink" title="2. 恒等快捷映射和投影快捷映射"></a>2. 恒等快捷映射和投影快捷映射</h3><p>当 shortcut 的输入通道数和输出通道数相同时，我们可以使用恒等映射即 $f (x)=x$，也就是将 shortcut 的输出直接加上输入即可（恒等快捷映射）。<br>但是，当 shortcut connection 的输入不等于输出的时候怎么办？（两种方法）</p><blockquote><p>① 将输入数据扩充维度，多余的维度的数据用 0 填充。<br>② 使用 1 x 1 的卷积扩充维度（投影快捷映射）</p><p>我们实际上有三种方式组合：<br>① 零填充快捷连接用来增加维度，所有的快捷连接是没有参数的。<br>② 投影快捷连接用来增加维度，其它的快捷连接是恒等的。<br>③ 所有的快捷连接都是投影。<br>以上三种情况都比没有加 shortcut connection 的好，效果 ③ &gt; ② &gt; ①，但是 ③ 的计算量太大，提升的效果也不大，所以我们一般不用，我们一般用的最多的是 ②。</p></blockquote><p>投影快捷映射：</p><ul><li>当输入和输出的维度不匹配时，使用一个额外的卷积层来进行维度匹配。</li><li>可以用于解决深度残差网络中的维度不匹配问题，从而提高网络的性能。</li><li>在 ResNet 中，投影快捷映射是指使用一个 1 x 1 的卷积层来进行维度匹配。<h3 id="3-Deeper-Bottleneck-Architectures"><a href="#3-Deeper-Bottleneck-Architectures" class="headerlink" title="3. Deeper Bottleneck Architectures"></a>3. Deeper Bottleneck Architectures</h3><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308211610964.png" alt="image.png"><blockquote><p>先用 1 x 1 降维，3 x 3 进行卷积，再用 1 x 1 进行升维。<br> 事实上，deeper 左边这种结构也能获得很好的效果。那么为什么要用右边这种结构呢？ 主要是源自于<strong>practical</strong>，因为<strong>左边</strong>这种结构在<strong>训练时间上要比右边结构长的多</strong>。</p></blockquote></li></ul><p align="justify">当换成上图右边这种 Bottleneck 结构的时候，可以发现 152 层的 ResNet 竟然比 VGG 16/19 都要少的复杂度</p>]]></content>
    
    
    <summary type="html">some overview about CV classical papers。</summary>
    
    
    
    <category term="科研学习" scheme="https://alleyf.github.io/categories/%E7%A7%91%E7%A0%94%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV" scheme="https://alleyf.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>algorithm</title>
    <link href="https://alleyf.github.io/2023/03/56d5f0383564.html"/>
    <id>https://alleyf.github.io/2023/03/56d5f0383564.html</id>
    <published>2023-03-17T11:06:15.000Z</published>
    <updated>2023-08-27T13:27:36.559Z</updated>
    
    <content type="html"><![CDATA[<ol><li>[[#1.1递归|1.1递归]]</li><li>[[#2.1 两数之和|2.1 两数之和]]</li><li>[[#2.2 合并两个有序数组|2.2 合并两个有序数组]]</li><li>[[#2.3 移动零|2.3 移动零]]</li><li>[[#2.4 找到所有数组中消失的数字|2.4 找到所有数组中消失的数字]]</li><li>[[#2.1 枚举|2.1 枚举]]<ol><li>[[#2.1 枚举#1. abc|1. abc]]</li><li>[[#2.1 枚举#2. 反序数|2. 反序数]]</li><li>[[#2.1 枚举#3. 对称平方数|3. 对称平方数]]</li><li>[[#2.1 枚举#4. 与 7 无关的数|4. 与 7 无关的数]]</li><li>[[#2.1 枚举#5. 百鸡问题|5. 百鸡问题]]</li><li>[[#2.1 枚举#6. Old Bill|6. Old Bill]]</li></ol></li><li>[[#2.2 模拟|2.2 模拟]]<ol><li>[[#2.2 模拟#1. 图形排版|1. 图形排版]]<ol><li>[[#1. 图形排版#1. 输出梯形|1. 输出梯形]]</li><li>[[#1. 图形排版#2. 叠筐|2. 叠筐]]</li></ol></li><li>[[#2.2 模拟#2. 日期|2. 日期]]<ol><li>[[#2. 日期#1. 今天是第几天|1. 今天是第几天]]</li><li>[[#2. 日期#2. 打印日期|2. 打印日期]]</li><li>[[#2. 日期#3. 日期累加|3. 日期累加]]<ol><li>[[#3. 日期累加#套路|套路]]</li><li>[[#3. 日期累加#技巧|技巧]]</li><li>[[#3. 日期累加#代码|代码]]</li></ol></li></ol></li><li>[[#2.2 模拟#3. 其他|3. 其他]]<ol><li>[[#3. 其他#1. 剩余的树|1. 剩余的树]]</li><li>[[#3. 其他#2. 手机键盘|2. 手机键盘]]</li><li>[[#3. 其他#3. xxx_定律|3. xxx_定律]]</li></ol></li></ol></li><li>[[#3.1 排序|3.1 排序]]<ol><li>[[#3.1 排序#1. 排序|1. 排序]]<ol><li>[[#1. 排序#大部分排序方法|大部分排序方法]]</li></ol></li><li>[[#3.1 排序#2. 成绩排序|2. 成绩排序]]</li><li>[[#3.1 排序#3. 成绩排序 2|3. 成绩排序 2]]</li></ol></li><li>[[#3.2 查找|3.2 查找]]<ol><li>[[#3.2 查找#1. 找 x|1. 找 x]]</li><li>[[#3.2 查找#2. 查找|2. 查找]]</li><li>[[#3.2 查找#3. extrenum_index|3. extrenum_index]]</li><li>[[#3.2 查找#4. 找位置|4. 找位置]]</li></ol></li><li>[[#4.1 字符串处理|4.1 字符串处理]]<ol><li>[[#4.1 字符串处理#1. <a href="http://t.cn/Ai8by9vW">特殊乘法</a>|1. <a href="http://t.cn/Ai8by9vW">特殊乘法</a>]]</li><li>[[#4.1 字符串处理#2. <a href="http://t.cn/Ai8bGaIx">密码翻译</a>|2. <a href="http://t.cn/Ai8bGaIx">密码翻译</a>]]</li><li>[[#4.1 字符串处理#3. <a href="http://t.cn/Ai8bih2z">简单密码</a>|3. <a href="http://t.cn/Ai8bih2z">简单密码</a>]]</li><li>[[#4.1 字符串处理#4. <a href="http://t.cn/Ai8fvq4I">统计字符</a>|4. <a href="http://t.cn/Ai8fvq4I">统计字符</a>]]</li><li>[[#4.1 字符串处理#5. <a href="http://t.cn/Ai8VB72e">字母统计</a>|5. <a href="http://t.cn/Ai8VB72e">字母统计</a>]]</li></ol></li><li>[[#4.2 字符串匹配|4.2 字符串匹配]]</li><li>[[#5.1 向量|5.1 向量]]<ol><li>[[#5.1 向量#<a href="http://t.cn/AiKEyQWW">完数与盈数</a>|<a href="http://t.cn/AiKEyQWW">完数与盈数</a>]]</li></ol></li><li>[[#5.2 队列|5.2 队列]]</li><li>[[#5.3 栈|5.3 栈]]</li><li>[[#简单题|简单题]]<ol><li>[[#简单题#1.<a href="https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524">数组中重复的数字</a>|1.<a href="https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524">数组中重复的数字</a>]]</li><li>[[#简单题#2.<a href="https://www.nowcoder.com/practice/0e26e5551f2b489b9f58bc83aa4b6c68">替换空格</a>|2.<a href="https://www.nowcoder.com/practice/0e26e5551f2b489b9f58bc83aa4b6c68">替换空格</a>]]</li><li>[[#简单题#3.<a href="https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035">从尾到头打印链表</a>|3.<a href="https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035">从尾到头打印链表</a>]]</li><li>[[#简单题#4.<a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6">用两个栈实现队列</a>|4.<a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6">用两个栈实现队列</a>]]</li></ol></li></ol><h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><hr><h2 id="1-1递归"><a href="#1-1递归" class="headerlink" title="1.1递归"></a>1.1递归</h2><p>***自顶向下递归<br>自底向上迭代</p><blockquote><p>问题特点</p><ol><li>一个问题的解可以<strong>分解为几个子问题</strong>的解。</li><li>这个问题与分解之后的子问题，<strong>除了数据规模不同，求解思路完全一样</strong>。</li><li><strong>存在基线终止条件</strong>。</li></ol></blockquote><p>爬楼梯问题：<br><img src="https://s2.loli.net/2023/05/22/tcH9QJ726li3Rng.png" alt="image.png|200"></p><p>解法 1：纯递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span> Map&lt;Integer , Integer&gt; storeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> climbStairs(n-<span class="hljs-number">1</span>)+climbStairs(n-<span class="hljs-number">2</span>);<br><br></code></pre></td></tr></table></figure><p>解法 2：递归并采用 HashMap 存储已求值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span> Map&lt;Integer , Integer&gt; storeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != storeMap.get(n))<br><span class="hljs-keyword">return</span> storeMap.get(n);<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> climbStairs(n-<span class="hljs-number">1</span>)+climbStairs(n-<span class="hljs-number">2</span>);<br>storeMap.put(n,result);<br><span class="hljs-keyword">return</span> result;<br><br></code></pre></td></tr></table></figure><p>解法 3：迭代自底向上循环累加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">prePre</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(inti=<span class="hljs-number">3</span>;i&lt;=n;++i)&#123;<br>result = pre + prePre;<br>prePre = pre;<br>pre = result;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>总结：</p><blockquote><p><span style="background:rgba(240, 107, 5, 0.2)">对于多次重复出现的值，可以通过 HashMap 存储，后续先扫描 HashMap 是否存在再做行动。</span></p></blockquote><h1 id="2-LeetCode"><a href="#2-LeetCode" class="headerlink" title="2. LeetCode"></a>2. LeetCode</h1><hr><h2 id="2-1-两数之和"><a href="#2-1-两数之和" class="headerlink" title="2.1 两数之和"></a>2.1 两数之和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">import</span> java.util.HashMap;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] <span class="hljs-built_in">twoSum</span>(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;  <br>HashMap&lt;Integer, Integer&gt; storeNums = <span class="hljs-keyword">new</span> <span class="hljs-built_in">HashMap</span>&lt;Integer, Integer&gt;(nums.length);  <br><span class="hljs-type">int</span>[] results = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">2</span>];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;  <br><span class="hljs-type">int</span> residue = target - nums[i];  <br>Integer index = storeNums.<span class="hljs-built_in">get</span>(residue);  <br><span class="hljs-keyword">if</span> (index != null) &#123;  <br>results[<span class="hljs-number">0</span>] = index;  <br>results[<span class="hljs-number">1</span>] = i;  <br><span class="hljs-keyword">break</span>;  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>storeNums.<span class="hljs-built_in">put</span>(nums[i], i);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> results;  <br>&#125;  <br>  <br>&#125;;  <br><span class="hljs-comment">//runtime:1 ms  </span><br><span class="hljs-comment">//memory:42.6 MB</span><br><br></code></pre></td></tr></table></figure><h2 id="2-2-合并两个有序数组"><a href="#2-2-合并两个有序数组" class="headerlink" title="2.2 合并两个有序数组"></a>2.2 合并两个有序数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br><span class="hljs-comment">// 方法1（直插排序法）  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;  <br><span class="hljs-keyword">auto</span> iter1 = nums1.<span class="hljs-built_in">begin</span>()+m;  <br><span class="hljs-keyword">auto</span> iter2 = nums1.<span class="hljs-built_in">end</span>();  <br>nums1.<span class="hljs-built_in">erase</span>(iter1,iter2);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>nums1.<span class="hljs-built_in">push_back</span>(nums2[i]);  <br>&#125;  <br><span class="hljs-comment">// nums1.erase(iter1,iter2);  </span><br><span class="hljs-comment">// nums1.insert(nums1.end(),nums2.begin(),nums2.end());  </span><br><span class="hljs-built_in">sort</span>(nums1.<span class="hljs-built_in">begin</span>(), nums1.<span class="hljs-built_in">end</span>());  <br>&#125;  <br><span class="hljs-comment">//方法2（前向双指针法）  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;  <br><span class="hljs-type">int</span> l = m+n,j=<span class="hljs-number">0</span>,index1 = <span class="hljs-number">0</span>,index2 = <span class="hljs-number">0</span>;  <br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">temp</span><span class="hljs-params">(l)</span></span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; ++i) &#123;  <br><span class="hljs-keyword">if</span> (index1&gt;=m)&#123;  <br>temp[i]=nums2[index2++];  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index2&gt;=n)&#123;  <br>temp[i]=nums1[index1++];  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums1[index1]&lt;nums2[index2])&#123;  <br>temp[i]=nums1[index1++];  <br>&#125;  <br><span class="hljs-keyword">else</span> &#123;  <br>temp[i]=nums2[index2++];  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item:temp)&#123;  <br>nums1[j++]=item;  <br>&#125;  <br>&#125;  <br><span class="hljs-comment">//方法3（反向双指针）  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;  <br><span class="hljs-type">int</span> l = m+n,index1 = m<span class="hljs-number">-1</span>,index2 = n<span class="hljs-number">-1</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;  <br><span class="hljs-keyword">if</span> (index1&lt;<span class="hljs-number">0</span>)&#123;  <br>nums1[i]=nums2[index2--];  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index2&lt;<span class="hljs-number">0</span>)&#123;  <br><span class="hljs-comment">// nums1[i]=nums1[index1--];  </span><br><span class="hljs-keyword">break</span>;  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums1[index1]&gt;=nums2[index2])&#123;  <br>nums1[i]=nums1[index1--];  <br>&#125;  <br><span class="hljs-keyword">else</span> &#123;  <br>nums1[i]=nums2[index2--];  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;;  <br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h2 id="2-3-移动零"><a href="#2-3-移动零" class="headerlink" title="2.3 移动零"></a>2.3 移动零</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//双指针</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br><span class="hljs-keyword">if</span>(!nums.<span class="hljs-built_in">size</span>())&#123;  <br><span class="hljs-keyword">return</span>;  <br>&#125;  <br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item:nums)&#123;  <br><span class="hljs-keyword">if</span> (item!=<span class="hljs-number">0</span>)  <br>nums[j++]=item;  <br>&#125;  <br><span class="hljs-keyword">while</span> (j&lt;nums.<span class="hljs-built_in">size</span>())&#123;  <br>nums[j++]=<span class="hljs-number">0</span>;  <br>&#125;  <br>&#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-4-找到所有数组中消失的数字"><a href="#2-4-找到所有数组中消失的数字" class="headerlink" title="2.4 找到所有数组中消失的数字"></a>2.4 找到所有数组中消失的数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//数组 哈希表</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findDisappearedNumbers</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br>vector&lt;<span class="hljs-type">int</span>&gt; disnums;  <br><span class="hljs-comment">// for(int item:nums)&#123;  </span><br><span class="hljs-comment">// item = item&gt;0 ? item : -item;  </span><br><span class="hljs-comment">// nums[item-1] = nums[item-1]&gt;0 ? nums[item-1] : -nums[item-1];  </span><br><span class="hljs-comment">// nums[item-1]=-nums[item-1];  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// for(int i=0;i&lt;nums.size();i++)&#123;  </span><br><span class="hljs-comment">// if (nums[i]&gt;0)  </span><br><span class="hljs-comment">// disnums.push_back(i+1);  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item:nums)&#123;  <br><span class="hljs-type">int</span> x = (item<span class="hljs-number">-1</span>)%n;  <br>nums[x]+=n;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;  <br><span class="hljs-keyword">if</span> (nums[i]&lt;=n)  <br>disnums.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);  <br>&#125;  <br><span class="hljs-keyword">return</span> disnums;  <br>&#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="王道机试指南"><a href="#王道机试指南" class="headerlink" title="王道机试指南"></a>王道机试指南</h1><hr><h1 id="第二章暴力求解"><a href="#第二章暴力求解" class="headerlink" title="第二章暴力求解"></a>第二章暴力求解</h1><h2 id="2-1-枚举"><a href="#2-1-枚举" class="headerlink" title="2.1 枚举"></a>2.1 枚举</h2><h3 id="1-abc"><a href="#1-abc" class="headerlink" title="1. abc"></a>1. abc</h3><p><strong>三重循环暴力求解</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-keyword">for</span> (a = <span class="hljs-number">0</span>; a &lt;= <span class="hljs-number">9</span>; a++) &#123;<br>        <span class="hljs-keyword">for</span> (b = <span class="hljs-number">0</span>; b &lt;= <span class="hljs-number">9</span>; b++) &#123;<br>            <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>; c &lt;= <span class="hljs-number">9</span>; c++) &#123;<br>                <span class="hljs-keyword">if</span> ((a * <span class="hljs-number">100</span> + b * <span class="hljs-number">10</span> + c) + (b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + c) == <span class="hljs-number">532</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, a, b, c);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-反序数"><a href="#2-反序数" class="headerlink" title="2. 反序数"></a>2. 反序数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1000</span>; <span class="hljs-number">9</span> * i &lt;= <span class="hljs-number">9999</span>; i++) &#123;<br><br>        <span class="hljs-type">int</span> k = <span class="hljs-number">9</span> * i;<br><br>        <span class="hljs-keyword">if</span> (k / <span class="hljs-number">1000</span> == i % <span class="hljs-number">10</span> &amp;&amp; k % <span class="hljs-number">1000</span> / <span class="hljs-number">100</span> == i % <span class="hljs-number">100</span> / <span class="hljs-number">10</span> &amp;&amp;<br><br>                k % <span class="hljs-number">100</span> / <span class="hljs-number">10</span> == i % <span class="hljs-number">1000</span> / <span class="hljs-number">100</span> &amp;&amp;<br><br>                k % <span class="hljs-number">10</span> == i / <span class="hljs-number">1000</span>) &#123;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-对称平方数"><a href="#3-对称平方数" class="headerlink" title="3. 对称平方数"></a>3. 对称平方数</h3><p>判断一个数是否为对称数核心:<br><font color="#ff0000">while (j) {</font><br><font color="#ff0000">sum = sum * 10 + j % 10;</font><br><font color="#ff0000">j /= 10;</font><br><font color="#ff0000">}</font><br><span style="background:#affad1">j 为对称数则 sum 等于 j*j </span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">256</span> ; i++) &#123;<br><br>        <span class="hljs-type">int</span> j = i * i, sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(j) &#123;<br><br>            sum = sum * <span class="hljs-number">10</span> + j % <span class="hljs-number">10</span>;<br><br>            j /= <span class="hljs-number">10</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(sum == i * i) &#123;<br><br>            cout &lt;&lt; i &lt;&lt; endl;<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-与-7-无关的数"><a href="#4-与-7-无关的数" class="headerlink" title="4. 与 7 无关的数"></a>4. 与 7 无关的数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> b, c, x, sum;<br><br>    cin &gt;&gt; x;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= x; ++i) &#123;<br><br>        b = i % <span class="hljs-number">10</span>;<br><br>        c = (i / <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>;<br><br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">7</span> != <span class="hljs-number">0</span> &amp;&amp; b != <span class="hljs-number">7</span> &amp;&amp; c != <span class="hljs-number">7</span>) &#123;<br><br>            sum = sum + i * i;<br><br>        &#125;<br><br>    &#125;<br><br>    cout &lt;&lt; sum &lt;&lt; endl;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-百鸡问题"><a href="#5-百鸡问题" class="headerlink" title="5. 百鸡问题"></a>5. 百鸡问题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> n;<br><br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt;= <span class="hljs-number">100</span>; ++x) &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt;= <span class="hljs-number">100</span>; ++y) &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> z = <span class="hljs-number">0</span>; z &lt;= <span class="hljs-number">100</span>; ++z) &#123;<br><br>                <span class="hljs-keyword">if</span> (x + y + z == <span class="hljs-number">100</span> &amp;&amp; ((<span class="hljs-number">5</span> * x + <span class="hljs-number">3</span> * y + z / <span class="hljs-number">3.0</span>) &lt;= n)) &#123;<br><br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d,y=%d,z=%d\n&quot;</span>, x, y, z);<br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-Old-Bill"><a href="#6-Old-Bill" class="headerlink" title="6. Old Bill"></a>6. Old Bill</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;title.h&quot;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n, x, y, z;  <br>vector&lt;<span class="hljs-type">int</span>&gt; buff;  <br>cin &gt;&gt; n;  <br>cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100000.0</span> / n; ++i) &#123;  <br><span class="hljs-type">int</span> sum = i * n;  <br><span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">10000</span>)  <br><span class="hljs-keyword">continue</span>;  <br><span class="hljs-type">int</span> a = sum % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> z1 = sum / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> y1 = sum / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> x1 = sum / <span class="hljs-number">1000</span> % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> b = sum / <span class="hljs-number">10000</span>;  <br><span class="hljs-keyword">if</span> (x == x1 &amp;&amp; y == y1 &amp;&amp; z == z1) &#123;  <br>buff.<span class="hljs-built_in">push_back</span>(b);  <br>buff.<span class="hljs-built_in">push_back</span>(a);  <br>buff.<span class="hljs-built_in">push_back</span>(i);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">if</span> (buff.<span class="hljs-built_in">empty</span>())  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);  <br><span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, buff[buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">3</span>], buff[buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>], buff[buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]);  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n, x, y, z;<span class="hljs-comment">//n火鸡数、xyz原价格中间三位</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        <span class="hljs-type">int</span> tot, f = <span class="hljs-number">0</span>;<span class="hljs-comment">//tot原价格、f标记是否存在能够整除火鸡数n的价格</span><br>        <span class="hljs-comment">//这里选择从9枚举到1是为了第一次输出就是最高价格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">9</span>; a &gt;= <span class="hljs-number">1</span>; a--)&#123;<span class="hljs-comment">//a控制原价格的万位[1,9]</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b = <span class="hljs-number">9</span>; b &gt;= <span class="hljs-number">0</span>; b--)&#123;<span class="hljs-comment">//b控制原价格的个位[0,9]</span><br>                tot = a * <span class="hljs-number">10000</span> + x * <span class="hljs-number">1000</span> + y * <span class="hljs-number">100</span> + z * <span class="hljs-number">10</span> + b;<br>                <span class="hljs-keyword">if</span>(tot % n == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//如果原价格tot能够整除火鸡数n</span><br>                    f = <span class="hljs-number">1</span>;<span class="hljs-comment">//则将整除标记置1</span><br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, a, b, tot / n);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;          <br>            &#125;<br>            <span class="hljs-keyword">if</span>(f) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//如果已经整除，则跳出枚举</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(!f) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<span class="hljs-comment">//如果没有可以整除的价格，则打印0</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-2-模拟"><a href="#2-2-模拟" class="headerlink" title="2.2 模拟"></a>2.2 模拟</h2><h3 id="1-图形排版"><a href="#1-图形排版" class="headerlink" title="1. 图形排版"></a>1. 图形排版</h3><h4 id="1-输出梯形"><a href="#1-输出梯形" class="headerlink" title="1. 输出梯形"></a>1. 输出梯形</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;title.h&quot;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> h;  <br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;h) != EOF) <span class="hljs-comment">//高度h  </span><br>&#123;  <br><span class="hljs-type">int</span> b = h + <span class="hljs-number">2</span> * (h - <span class="hljs-number">1</span>), t = h; <span class="hljs-comment">//下底边长，上底边长  </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= h; i++) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= b; j++) &#123;  <br><span class="hljs-keyword">if</span> (j &gt; b - t - <span class="hljs-number">2</span> * (i - <span class="hljs-number">1</span>))  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);  <br><span class="hljs-keyword">else</span>  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);  <br>&#125;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-叠筐"><a href="#2-叠筐" class="headerlink" title="2. 叠筐"></a>2. 叠筐</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">char</span> a,b;<br>    <span class="hljs-type">char</span> S[<span class="hljs-number">80</span>][<span class="hljs-number">80</span>];<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;a&gt;&gt;b)&#123;<br>        <span class="hljs-type">int</span> mid=n/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>        S[mid][mid]=a;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=mid;i++)&#123;<br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>;j++)&#123;<br>                    S[mid-i][mid-i+j]=b;<br>                    S[mid+i][mid-i+j]=b;<br>                    S[mid-i+j][mid-i]=b;<br>                    S[mid-i+j][mid+i]=b;<br>                    flag=<span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>;j++)&#123;<br>                    S[mid-i][mid-i+j]=a;<br>                    S[mid+i][mid-i+j]=a;<br>                    S[mid-i+j][mid-i]=a;<br>                    S[mid-i+j][mid+i]=a;<br>                    flag=<span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>        &#125;<br>        S[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=S[<span class="hljs-number">0</span>][n<span class="hljs-number">-1</span>]=S[n<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]=S[n<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>]=<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>                    cout&lt;&lt;S[i][j];<br>                cout&lt;&lt;endl;<br>            &#125;<br> <br>            cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-日期"><a href="#2-日期" class="headerlink" title="2. 日期"></a>2. 日期</h3><h4 id="1-今天是第几天"><a href="#1-今天是第几天" class="headerlink" title="1. 今天是第几天"></a>1. 今天是第几天</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><br><span class="hljs-comment">// Created by alleyf on 2023/6/23.</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> </span>&#123;<br><br>    <span class="hljs-keyword">return</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>  <br><br>    <span class="hljs-type">int</span> year, month, day;<br><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; year &gt;&gt; month &gt;&gt; day) &#123;<br><br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; monthDay&#123;<br><br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">28</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">6</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">8</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">10</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">11</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">12</span>, <span class="hljs-number">31</span>&#125;<br><br>        &#125;;<br><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isLeap</span>(year)) &#123;<br><br>            monthDay[<span class="hljs-number">2</span>] = <span class="hljs-number">29</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; month; i++) &#123;<br><br>            sum += monthDay[i];<br><br>        &#125;<br><br>        sum += day;<br><br>        cout &lt;&lt; sum &lt;&lt; endl;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-打印日期"><a href="#2-打印日期" class="headerlink" title="2. 打印日期"></a>2. 打印日期</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/23.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span></span>&#123;  <br><span class="hljs-keyword">return</span> (year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <br>  <br><span class="hljs-type">int</span> year,allday;  <br>string month,day;  <br><span class="hljs-keyword">while</span>(cin&gt;&gt;year&gt;&gt;allday)&#123;  <br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; monthDay&#123;  <br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">31</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">59</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">90</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">120</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">151</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">181</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">212</span>&#125;,&#123;<span class="hljs-number">8</span>,<span class="hljs-number">243</span>&#125;,&#123;<span class="hljs-number">9</span>,<span class="hljs-number">273</span>&#125;,&#123;<span class="hljs-number">10</span>,<span class="hljs-number">304</span>&#125;,&#123;<span class="hljs-number">11</span>,<span class="hljs-number">334</span>&#125;,&#123;<span class="hljs-number">12</span>,<span class="hljs-number">365</span>&#125;  <br>&#125;;  <br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isLeap</span>(year))&#123;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">12</span>;i++)&#123;  <br>monthDay[i]+=<span class="hljs-number">1</span>;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">12</span>;i++)&#123;  <br><span class="hljs-keyword">if</span>(monthDay[i]&gt;=allday)&#123;  <br>month = i&gt;=<span class="hljs-number">10</span> ? <span class="hljs-built_in">to_string</span>(i): (<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-built_in">to_string</span>(i));  <br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;  <br>day = allday&gt;=<span class="hljs-number">10</span> ? <span class="hljs-built_in">to_string</span>(allday): (<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-built_in">to_string</span>(allday));  <br>&#125;<span class="hljs-keyword">else</span> &#123;  <br>allday = allday - monthDay[i - <span class="hljs-number">1</span>];  <br>day = allday&gt;=<span class="hljs-number">10</span> ? <span class="hljs-built_in">to_string</span>(allday): (<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-built_in">to_string</span>(allday));  <br>&#125;  <br><span class="hljs-keyword">break</span>;  <br>&#125;;  <br>&#125;  <br>cout&lt;&lt;year&lt;&lt;<span class="hljs-string">&#x27;-&#x27;</span>&lt;&lt;month&lt;&lt;<span class="hljs-string">&#x27;-&#x27;</span>&lt;&lt;day&lt;&lt;endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-日期累加"><a href="#3-日期累加" class="headerlink" title="3. 日期累加"></a>3. 日期累加</h4><h5 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h5><p>以前大一的时候面对这个题，就是单纯按月份纯算，算的可谓是焦头烂额。现在学习了新的方法：</p><ol><li>计算是当年的第几天</li><li>这个数值 sum 加上需要累加的天数</li><li>计算进位的多少年，确定年份</li><li>根据剩下的第几天反解出这是几月几日</li><li>输出</li></ol><h5 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h5><p>用到的技巧包括打表、巧用 bool。<br>提前写出来每个月有多少天、每年有多少天。<br>还有判断是否闰年函数，用它能够得到 bool 值，0 和 1 可以分别对应于平年和闰年，所以上面的可以构造成二维数组。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> days[<span class="hljs-number">2</span>][<span class="hljs-number">12</span>]=&#123;<br>        &#123;<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;,<br>        &#123;<span class="hljs-number">31</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;,<br>    &#125;;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> current = <span class="hljs-number">0</span>; current&lt;n; current++)&#123;<br>        <span class="hljs-type">int</span> year,month,date,plus;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;year,&amp;month,&amp;date,&amp;plus);<br>        <span class="hljs-type">int</span> y=<span class="hljs-number">0</span>,m=<span class="hljs-number">1</span>,d=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">bool</span> leap = <span class="hljs-built_in">isLeap</span>(year);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;month;i++)&#123;<br>            sum+=days[leap][i<span class="hljs-number">-1</span>];<br>        &#125;<br>        sum+=date;<br>        sum+=plus;<br>        y=year;<br>        <span class="hljs-comment">//逐年增加，直到sum&lt;对应天数</span><br>        <span class="hljs-type">int</span> total[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">365</span>,<span class="hljs-number">366</span>&#125;;<br>        <span class="hljs-keyword">while</span>(sum&gt;total[<span class="hljs-built_in">isLeap</span>(y)])&#123;<br>            sum-=total[<span class="hljs-built_in">isLeap</span>(y)];<br>            y++;    <br>        &#125; <br>        <span class="hljs-comment">//反解为日期 </span><br>        leap = <span class="hljs-built_in">isLeap</span>(y);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;sum&gt;days[leap][i<span class="hljs-number">-1</span>];i++)&#123;<br>            m++;<br>            sum-=days[leap][i<span class="hljs-number">-1</span>];<br>        &#125;<br>        d=sum;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%04d-%02d-%02d\n&quot;</span>,y,m,d);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h3><h4 id="1-剩余的树"><a href="#1-剩余的树" class="headerlink" title="1. 剩余的树"></a>1. 剩余的树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by alleyf on 2023/6/24.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXL = <span class="hljs-number">100001</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">bool</span> flag[MAXL];<br>    <span class="hljs-type">int</span> l, m, num;<br>    cin &gt;&gt; l &gt;&gt; m;<br>    num = l + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= l; ++i) &#123;<br>        flag[i] = <span class="hljs-literal">true</span>;<br>    &#125;;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> left, right;<br>        cin &gt;&gt; left &gt;&gt; right;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = left; i &lt;= right; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (flag[i]) &#123;<br>                flag[i] = <span class="hljs-literal">false</span>;<br>                num--;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; num;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="#ff0000">1. 使用一个 l+1 长度的 array 存储所有树的存在状态，初始化所有树的状态为真；</font><br><font color="#ff0000">2. 根据区间循环判每棵树的状态，若为真则修改树输出总数的状态为假并将树的总数自减；</font><br><font color="#ff0000">3. 输出剩余树的数量。</font></p><h4 id="2-手机键盘"><a href="#2-手机键盘" class="headerlink" title="2. 手机键盘"></a>2. 手机键盘</h4><blockquote><ol><li>用一个数组按顺序保存每个字母所需要的时间段</li><li>循环每个输入的字母求和总次数，判断前后两字符是否在一个按键上，若果是则加两个时间段</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/24.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> letter_num[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;  <br>string s;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; s) &#123;  <br><span class="hljs-type">int</span> allNum = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); ++i) &#123;  <br>allNum += letter_num[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>];  <br><span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span> &amp;&amp; s[i] - s[i - <span class="hljs-number">1</span>] == letter_num[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>] - letter_num[s[i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>]) &#123;  <br>allNum += <span class="hljs-number">2</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; allNum &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-xxx-定律"><a href="#3-xxx-定律" class="headerlink" title="3. xxx_定律"></a>3. xxx_定律</h4><blockquote><p>既可递归实现也可 while 迭代迭代实现。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/24.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">xxx_law</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;num, <span class="hljs-type">int</span> &amp;cnt)</span> </span>&#123;  <br><span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) &#123;  <br><span class="hljs-keyword">return</span> cnt;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;  <br>cnt++;  <br>num = <span class="hljs-number">3</span> * num + <span class="hljs-number">1</span>;  <br>num /= <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">return</span> <span class="hljs-built_in">xxx_law</span>(num, cnt);  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>cnt++;  <br>num /= <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">return</span> <span class="hljs-built_in">xxx_law</span>(num, cnt);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> num;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; num) &#123;  <br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;  <br>cout &lt;&lt; <span class="hljs-built_in">xxx_law</span>(num, cnt) &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="第三章排序与查找"><a href="#第三章排序与查找" class="headerlink" title="第三章排序与查找"></a>第三章排序与查找</h1><h2 id="3-1-排序"><a href="#3-1-排序" class="headerlink" title="3.1 排序"></a>3.1 排序</h2><h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1. 排序"></a>1. 排序</h3><p><span style="background:#b1ffff">&gt; 冒泡排序：</span><br><span style="background:#b1ffff">&gt;     1. 升序：外层循环递减，内层循环递增直到外层循环变量；</span><br><span style="background:#b1ffff">&gt;     2. 降序：外层循环递增，内层循环从外层循环变量开始递增。</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n;  <br>cin &gt;&gt; n;  <br><span class="hljs-type">int</span> array[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; array[i];  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt; <span class="hljs-number">0</span>; --i) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) &#123;  <br><span class="hljs-keyword">if</span> (array[j] &gt; array[j + <span class="hljs-number">1</span>] &amp;&amp; j + <span class="hljs-number">1</span> &lt; n) &#123;  <br><span class="hljs-type">int</span> tmp = array[j + <span class="hljs-number">1</span>];  <br>array[j + <span class="hljs-number">1</span>] = array[j];  <br>array[j] = tmp;  <br>&#125;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value: array) &#123;  <br>cout &lt;&lt; value &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="大部分排序方法"><a href="#大部分排序方法" class="headerlink" title="大部分排序方法"></a>大部分排序方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//所有基本的排序方法了，桶排序、基数排序暂不写了  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, MAX = <span class="hljs-number">1e8</span>;  <br><span class="hljs-type">int</span> a[N];  <br><span class="hljs-type">int</span> n;  <br><span class="hljs-type">int</span> h[N], idx;<span class="hljs-comment">//heap_sort用  </span><br><span class="hljs-type">int</span> tmp[N];<span class="hljs-comment">//merge_sort用  </span><br><span class="hljs-type">int</span> bkt[MAX];<span class="hljs-comment">//counting_sort用  </span><br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buble_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span> - i; j++) &#123;  <br><span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>]) <span class="hljs-built_in">swap</span>(a[j], a[j + <span class="hljs-number">1</span>]);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;  <br><span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;  <br><span class="hljs-type">int</span> x = a[(l + r) / <span class="hljs-number">2</span>];  <br><span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">while</span> (i &lt; j) &#123;  <br><span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span> (a[i] &lt; x);  <br><span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span> (a[j] &gt; x);  <br><span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(a[i], a[j]);  <br>&#125;  <br><span class="hljs-built_in">quick_sort</span>(l, j);  <br><span class="hljs-built_in">quick_sort</span>(j + <span class="hljs-number">1</span>, r);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;  <br><span class="hljs-type">int</span> min_pos = i;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)  <br><span class="hljs-keyword">if</span> (a[j] &lt; a[min_pos]) min_pos = j;  <br><span class="hljs-built_in">swap</span>(a[i], a[min_pos]);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;  <br><span class="hljs-type">int</span> t = u;  <br><span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= idx &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= idx &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">if</span> (t != u) &#123;  <br><span class="hljs-built_in">swap</span>(h[t], h[u]);  <br><span class="hljs-built_in">down</span>(t);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) h[i] = a[i - <span class="hljs-number">1</span>];  <br>idx = n;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = idx / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--) <span class="hljs-built_in">down</span>(i);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <br>a[i] = h[<span class="hljs-number">1</span>];  <br>h[<span class="hljs-number">1</span>] = h[idx--];  <br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;  <br><span class="hljs-type">int</span> cur_idx = a[i];  <br><span class="hljs-type">int</span> j;  <br><span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; cur_idx; j--) &#123;  <br>a[j + <span class="hljs-number">1</span>] = a[j];  <br>&#125;  <br>a[j + <span class="hljs-number">1</span>] = cur_idx;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">binary_insertion_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;  <br><span class="hljs-type">int</span> cur_idx = a[i];  <br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = i - <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">while</span> (l &lt; r) &#123;  <br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">if</span> (a[mid] &lt;= cur_idx) l = mid;  <br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;  <br>&#125;  <br><span class="hljs-keyword">if</span> (a[l] &gt; cur_idx) l = <span class="hljs-number">-1</span>;  <br><span class="hljs-type">int</span> j;  <br><span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt; l; j--) a[j + <span class="hljs-number">1</span>] = a[j];  <br>a[j + <span class="hljs-number">1</span>] = cur_idx;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> gap = n / <span class="hljs-number">2</span>; gap &gt;= <span class="hljs-number">1</span>; gap /= <span class="hljs-number">2</span>) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = gap; i &lt; n; i++) &#123;  <br><span class="hljs-type">int</span> cur_idx = a[i];  <br><span class="hljs-type">int</span> j;  <br><span class="hljs-keyword">for</span> (j = i - gap; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; cur_idx; j -= gap) &#123;  <br>a[j + gap] = a[j];  <br>&#125;  <br>a[j + gap] = cur_idx;  <br>&#125;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;  <br><span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;  <br><span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;  <br><span class="hljs-built_in">merge_sort</span>(l, mid), <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);  <br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;  <br><span class="hljs-keyword">if</span> (a[i] &lt;= a[j]) tmp[k++] = a[i++];  <br><span class="hljs-keyword">else</span> tmp[k++] = a[j++];  <br>&#125;  <br><span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = a[i++];  <br><span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = a[j++];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l, j = <span class="hljs-number">0</span>; i &lt;= r; j++, i++) a[i] = tmp[j];  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">counting_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <br>bkt[a[i]]++;  <br><span class="hljs-keyword">if</span> (a[i] &gt; max) max = a[i];  <br>&#125;  <br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max + <span class="hljs-number">1</span>; i++) &#123;  <br><span class="hljs-keyword">while</span> (bkt[i]) &#123;  <br>a[j++] = i;  <br>bkt[i]--;  <br>&#125;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);  <br><span class="hljs-comment">// buble_sort();  </span><br><span class="hljs-comment">// quick_sort(0, n - 1);  </span><br><span class="hljs-comment">// selection_sort();  </span><br><span class="hljs-comment">// heap_sort();  </span><br><span class="hljs-comment">// insertion_sort();  </span><br><span class="hljs-comment">// binary_insertion_sort();  </span><br><span class="hljs-comment">// shell_sort();  </span><br><span class="hljs-comment">// merge_sort(0, n - 1);  </span><br><span class="hljs-built_in">counting_sort</span>();  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-成绩排序"><a href="#2-成绩排序" class="headerlink" title="2. 成绩排序"></a>2. 成绩排序</h3><p><font color="#f79646">- 定义一个结构体包含学号与成绩</font><br><font color="#f79646">- 写一个比较器 Compare</font><br><font color="#f79646">- 使用内置 sort 算法，设置迭代头和尾（地址）以及比较规则（比较器）</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-comment">//定义学生结构体  </span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;  <br><span class="hljs-type">int</span> number;  <br><span class="hljs-type">int</span> score;  <br>  <br><span class="hljs-built_in">Student</span>() &#123;&#125;  <br>  <br><span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> s) : <span class="hljs-built_in">number</span>(n), <span class="hljs-built_in">score</span>(s) &#123;&#125;  <br>&#125;;  <br>  <br><span class="hljs-comment">//定义比较函数  </span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Compare</span><span class="hljs-params">(Student s1, Student s2)</span> </span>&#123;  <br><span class="hljs-comment">//成绩相同比学号  </span><br><span class="hljs-keyword">if</span> (s1.score == s2.score) &#123;  <br><span class="hljs-keyword">return</span> s1.number &lt; s2.number; <span class="hljs-comment">//&#x27;&lt;&#x27;,指按照比较的参数由小到大排序  </span><br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-keyword">return</span> s1.score &lt; s2.score; <span class="hljs-comment">////&#x27;&lt;&#x27;,指按照比较的参数由小到大排序,同理，如果是&#x27;&gt;&#x27;，指按照由大到小排序  </span><br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n;  <br>cin &gt;&gt; n;  <br><span class="hljs-comment">//定义数组保存比较学生的基本信息  </span><br>Student arr[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i].number &gt;&gt; arr[i].score;  <br>&#125;  <br><span class="hljs-built_in">sort</span>(arr, arr + n, Compare);  <br><span class="hljs-keyword">for</span> (Student s: arr) &#123;  <br>cout &lt;&lt; s.number &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s.score &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-成绩排序-2"><a href="#3-成绩排序-2" class="headerlink" title="3. 成绩排序 2"></a>3. 成绩排序 2</h3><p>方法 1：<br><font color="#ff0000">sort 是不稳定排序，stable_sort 才是稳定排序，稳定排序不改变输入的顺序</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-type">int</span> num, sort_flag;  <br>  <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;  <br>string name;  <br><span class="hljs-type">int</span> score;  <br>  <br><span class="hljs-built_in">Student</span>() &#123;&#125;;  <br>  <br><span class="hljs-built_in">Student</span>(string n, <span class="hljs-type">int</span> s) : <span class="hljs-built_in">name</span>(n), <span class="hljs-built_in">score</span>(s) &#123;&#125;  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Compare</span><span class="hljs-params">(Student s1, Student s2)</span> </span>&#123;  <br><span class="hljs-keyword">return</span> sort_flag ? s1.score &lt; s2.score : s1.score &gt; s2.score;<span class="hljs-comment">//sort_flag为真则升序否则降序  </span><br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; num &gt;&gt; sort_flag) &#123;  <br>Student arr[num];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;  <br>cin &gt;&gt; arr[i].name &gt;&gt; arr[i].score;  <br>&#125;  <br><span class="hljs-built_in">stable_sort</span>(arr, arr + num, Compare);<span class="hljs-comment">//重点：sort是不稳定排序，stable_sort才是稳定排序，稳定排序不改变输入的顺序  </span><br><span class="hljs-keyword">for</span> (Student s: arr) &#123;  <br>cout &lt;&lt; s.name &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s.score &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：<br>用一个编号保存每个学生的顺序，排序比较器里成绩相等的按照编号升序排</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span>&#123;<br>string name;<br><span class="hljs-type">int</span> score;<br><span class="hljs-type">int</span> num; <br>&#125;;<br><span class="hljs-type">int</span> flag; <span class="hljs-comment">//升序还是降序 </span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a,student b)</span></span>&#123;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>(a.score==b.score) <span class="hljs-keyword">return</span> a.num&lt;b.num;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.score&gt;b.score;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(a.score==b.score) <span class="hljs-keyword">return</span> a.num&lt;b.num;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.score&lt;b.score;<span class="hljs-comment">//这里必须写else，否则牛客会编译失败 </span><br>&#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n)&#123;<br>cin&gt;&gt;flag;<br>student stu[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;stu[i].name&gt;&gt;stu[i].score;<br>stu[i].num=i;<br>&#125; <br><span class="hljs-built_in">sort</span>(&amp;stu[<span class="hljs-number">0</span>],&amp;stu[n],cmp); <span class="hljs-comment">//重点：sort是不稳定排序，stable_sort才是稳定排序 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) cout&lt;&lt;stu[i].name&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;stu[i].score&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="3-2-查找"><a href="#3-2-查找" class="headerlink" title="3.2 查找"></a>3.2 查找</h2><h3 id="1-找-x"><a href="#1-找-x" class="headerlink" title="1. 找 x"></a>1. 找 x</h3><p>方法 1：<br>用 flag 标志是否找到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n, t;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;  <br><span class="hljs-type">int</span> arr[n];  <br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i];  <br>&#125;  <br>cin &gt;&gt; t;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br><span class="hljs-keyword">if</span> (t == arr[i]) &#123;  <br>cout &lt;&lt; i &lt;&lt; endl;  <br>flag = ~flag;  <br><span class="hljs-keyword">break</span>;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">if</span> (!flag)  <br>cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：<br>设置初始默认为-1，找到则修改状态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> maxn=<span class="hljs-number">200</span>+<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> arr[maxn];<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i]);<br>        &#125;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-type">int</span> answer=<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i]==x)&#123;<br>                answer=i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,answer);<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="2-查找"><a href="#2-查找" class="headerlink" title="2. 查找"></a>2. 查找</h3><p>方法 1：复杂度 O（n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n) &#123;<br>        map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">bool</span>&gt; mp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> temp;<br>            cin&gt;&gt;temp;<br>            mp[temp] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        cin&gt;&gt;m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-type">int</span> temp;<br>            cin&gt;&gt;temp;<br>            <span class="hljs-keyword">if</span> (mp.<span class="hljs-built_in">find</span>(temp) != mp.<span class="hljs-built_in">end</span>()) &#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：复杂度 O（m·n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n, m;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;  <br><span class="hljs-type">int</span> arr[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i];  <br>&#125;  <br>cin &gt;&gt; m;  <br><span class="hljs-type">int</span> tar[m];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;  <br>cin &gt;&gt; tar[i];  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;  <br>string status = <span class="hljs-string">&quot;NO&quot;</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;  <br><span class="hljs-keyword">if</span> (arr[j] == tar[i]) &#123;  <br>status = <span class="hljs-string">&quot;YES&quot;</span>;  <br><span class="hljs-keyword">break</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; status &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-extrenum-index"><a href="#3-extrenum-index" class="headerlink" title="3. extrenum_index"></a>3. extrenum_index</h3><p>方法 1：<br>空间复杂度为 O（1）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, i, left, mid, right;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;<br>cin &gt;&gt; mid &gt;&gt; right;<br><span class="hljs-keyword">if</span> (mid != right)<br>cout &lt;&lt; <span class="hljs-string">&quot;0 &quot;</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>left = mid;<br>mid = right;<br>cin &gt;&gt; right;<br><span class="hljs-keyword">if</span> ((mid - left) * (mid - right) &gt; <span class="hljs-number">0</span>)<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (mid != right)<br>cout &lt;&lt; i;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;  <br><span class="hljs-type">int</span> arr[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i];  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;  <br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; arr[i] != arr[i + <span class="hljs-number">1</span>]) &#123;  <br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((arr[i] &gt; arr[i - <span class="hljs-number">1</span>] &amp;&amp; arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) || (arr[i] &lt; arr[i - <span class="hljs-number">1</span>] &amp;&amp; arr[i] &lt; arr[i + <span class="hljs-number">1</span>])) &#123;  <br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br><span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">2</span> &amp;&amp; arr[i] != arr[i + <span class="hljs-number">1</span>]) &#123;  <br>cout &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-找位置"><a href="#4-找位置" class="headerlink" title="4. 找位置"></a>4. 找位置</h3><p><span style="background:#b1ffff">时间复杂度为 O (n)</span></p><p><font color="#ff0000">1. 用一个额外的矢量 orderS 不重复的添加字符，以保证输出时字符顺序</font><br><font color="#ff0000">2. 用 map 的 key 记录字符，value 记录重复出现的次数</font><br><font color="#ff0000">3. 最后按照 orderS 的顺序遍历输出</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string s;  <br>map&lt;<span class="hljs-type">char</span>, vector&lt;<span class="hljs-type">int</span>&gt;&gt; sm;  <br>vector&lt;<span class="hljs-type">char</span>&gt; orderS;  <br>cin &gt;&gt; s;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;  <br><span class="hljs-keyword">if</span> (sm.<span class="hljs-built_in">find</span>(s[i]) != sm.<span class="hljs-built_in">end</span>()) &#123;  <br>sm[s[i]].<span class="hljs-built_in">push_back</span>(i);  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>sm[s[i]] = vector&lt;<span class="hljs-type">int</span>&gt;&#123;i&#125;;  <br>orderS.<span class="hljs-built_in">push_back</span>(s[i]);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> item: orderS) &#123;  <br><span class="hljs-keyword">auto</span> tmp = sm.<span class="hljs-built_in">find</span>(item);  <br><span class="hljs-keyword">if</span> (tmp != sm.<span class="hljs-built_in">end</span>() &amp;&amp; tmp-&gt;second.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index: tmp-&gt;second) &#123;  <br><span class="hljs-keyword">if</span> (index != tmp-&gt;second.<span class="hljs-built_in">back</span>())  <br>cout &lt;&lt; tmp-&gt;first &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; index &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span>;  <br><span class="hljs-keyword">else</span>  <br>cout &lt;&lt; tmp-&gt;first &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; index &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="第四章字符串"><a href="#第四章字符串" class="headerlink" title="第四章字符串"></a>第四章字符串</h1><h2 id="4-1-字符串处理"><a href="#4-1-字符串处理" class="headerlink" title="4.1 字符串处理"></a>4.1 字符串处理</h2><h3 id="1-特殊乘法"><a href="#1-特殊乘法" class="headerlink" title="1. 特殊乘法"></a>1. <a href="http://t.cn/Ai8by9vW">特殊乘法</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string a, b;  <br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> i: a) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> j: b) &#123;  <br>sum += (i - <span class="hljs-string">&#x27;0&#x27;</span>) * (j - <span class="hljs-string">&#x27;0&#x27;</span>);  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; sum &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-密码翻译"><a href="#2-密码翻译" class="headerlink" title="2. 密码翻译"></a>2. <a href="http://t.cn/Ai8bGaIx">密码翻译</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string s;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; s) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;  <br><span class="hljs-keyword">if</span> ((s[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;Y&#x27;</span>) || (s[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;y&#x27;</span>)) &#123;  <br>s[i] += <span class="hljs-number">1</span>;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;z&#x27;</span> || s[i] == <span class="hljs-string">&#x27;Z&#x27;</span>) &#123;  <br>s[i] = s[i] == <span class="hljs-string">&#x27;z&#x27;</span> ? <span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-string">&#x27;A&#x27;</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; s &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-简单密码"><a href="#3-简单密码" class="headerlink" title="3. 简单密码"></a>3. <a href="http://t.cn/Ai8bih2z">简单密码</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 方法1：</span><br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, s)) &#123;<br>        <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;ENDOFINPUT&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;START&quot;</span> &amp;&amp; s != <span class="hljs-string">&quot;END&quot;</span>) &#123;<br>                <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> item : s) &#123;<br>                    <span class="hljs-keyword">if</span> ((item &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; item &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>))<br>                       s[i] = <span class="hljs-string">&#x27;A&#x27;</span> + (item - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">21</span>) % <span class="hljs-number">26</span>;<br>                    i++;<br>                &#125;<br>                cout &lt;&lt; s &lt;&lt; endl;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 方法2:</span><br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">char</span>&gt; pwd_map&#123;<br>    &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>&#125;,<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, s)) &#123;<br>        <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;ENDOFINPUT&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;START&quot;</span> &amp;&amp; s != <span class="hljs-string">&quot;END&quot;</span>) &#123;<br>                <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> item : s) &#123;<br>                    <span class="hljs-keyword">if</span> ((item &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; item &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>))<br>                       s[i] = pwd_map[item];<br>                    i++;<br>                &#125;<br>                cout &lt;&lt; s &lt;&lt; endl;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-统计字符"><a href="#4-统计字符" class="headerlink" title="4. 统计字符"></a>4. <a href="http://t.cn/Ai8fvq4I">统计字符</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/30.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string ts, s;  <br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, ts)) &#123;  <br><span class="hljs-keyword">if</span> (ts == <span class="hljs-string">&quot;#&quot;</span>)  <br><span class="hljs-keyword">break</span>;  <br><span class="hljs-built_in">getline</span>(cin, s);  <br><span class="hljs-type">int</span> cnum[ts.<span class="hljs-built_in">length</span>()];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ts.<span class="hljs-built_in">length</span>(); ++i) &#123;  <br>cnum[i] = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> j: s) &#123;  <br><span class="hljs-keyword">if</span> (j == ts[i]) &#123;  <br>cnum[i]++;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; ts[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; cnum[i] &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br>  <br>&#125;  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment">* 方法2：  </span><br><span class="hljs-comment">* using namespace std;  </span><br><span class="hljs-comment">//1：注意读题，i ng是当四个字符处理，而非i和ng  </span><br><span class="hljs-comment">//2：如何持续输入？while持续输入第一个字符，循环体内输入第二个  </span><br><span class="hljs-comment">//如何捕捉结束字符？在第一个字符串输入时识别  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">int number[128];  </span><br><span class="hljs-comment">int main()  </span><br><span class="hljs-comment">&#123;  </span><br><span class="hljs-comment">string str1,str2;  </span><br><span class="hljs-comment">while(getline(cin,str1))&#123;  </span><br><span class="hljs-comment">if(str1==&quot;#&quot;) break;  </span><br><span class="hljs-comment">getline(cin,str2);  </span><br><span class="hljs-comment">memset(number,0,sizeof(number)); //number数组记录该字符，出现的次数  </span><br><span class="hljs-comment">for(int i=0;i&lt;str2.size();i++)&#123;  </span><br><span class="hljs-comment">number[str2[i]]++; //长字符串的字符对应ASCII码的下标+1  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">for(int i=0;i&lt;str1.size();i++)&#123;  </span><br><span class="hljs-comment">printf(&quot;%c %d\n&quot;,str1[i],number[str1[i]]);  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">//学到的方法：ASCII码不大，想统计每个字符，直接将其对应的ASCII码下标的元素加1即可！  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="5-字母统计"><a href="#5-字母统计" class="headerlink" title="5. 字母统计"></a>5. <a href="http://t.cn/Ai8VB72e">字母统计</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/30.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; c_map&#123;  <br>&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string s;  <br><span class="hljs-built_in">getline</span>(cin, s);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c: s) &#123;  <br><span class="hljs-keyword">if</span> (c_map.<span class="hljs-built_in">find</span>(c) != c_map.<span class="hljs-built_in">end</span>()) &#123;  <br>c_map[c]++;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> item: c_map) &#123;  <br>cout &lt;&lt; item.first &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; item.second &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-2-字符串匹配"><a href="#4-2-字符串匹配" class="headerlink" title="4.2 字符串匹配"></a>4.2 字符串匹配</h2><h1 id="第五章基础数据结构"><a href="#第五章基础数据结构" class="headerlink" title="第五章基础数据结构"></a>第五章基础数据结构</h1><h2 id="5-1-向量"><a href="#5-1-向量" class="headerlink" title="5.1 向量"></a>5.1 向量</h2><h3 id="完数与盈数"><a href="#完数与盈数" class="headerlink" title="完数与盈数"></a><a href="http://t.cn/AiKEyQWW">完数与盈数</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/8/17.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge_EG</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;  <br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= num / <span class="hljs-number">2</span>; ++i) &#123;  <br><span class="hljs-keyword">if</span> (num % i == <span class="hljs-number">0</span>)  <br>sum += i;  <br>&#125;  <br><span class="hljs-keyword">if</span> (sum == num)  <br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; num)  <br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;   <br><span class="hljs-comment">// vector&lt;int&gt; E, G;  </span><br>string E = <span class="hljs-string">&quot;E:&quot;</span>, G = <span class="hljs-string">&quot;G:&quot;</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">60</span>; ++i) &#123;  <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge_EG</span>(i) == <span class="hljs-number">1</span>)  <br>E += <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">to_string</span>(i);  <br><span class="hljs-comment">// E.push_back(i);  </span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">judge_EG</span>(i) == <span class="hljs-number">2</span>)  <br>G += <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">to_string</span>(i);  <br><span class="hljs-comment">// G.push_back(i);  </span><br>&#125;  <br>cout &lt;&lt; E &lt;&lt; endl &lt;&lt; G;  <br><span class="hljs-comment">// cout &lt;&lt; &quot;E:&quot;;  </span><br><span class="hljs-comment">// for (auto e: E) &#123;  </span><br><span class="hljs-comment">// cout &lt;&lt; &quot; &quot; &lt;&lt; e;  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// cout &lt;&lt; endl &lt;&lt; &quot;G:&quot;;  </span><br><span class="hljs-comment">// for (auto g: G) &#123;  </span><br><span class="hljs-comment">// cout &lt;&lt; &quot; &quot; &lt;&lt; g;  </span><br><span class="hljs-comment">// &#125;  </span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li>思路：<font color="#ff0000">获取一个数的所有因子可以通过循环取余，判断余数是否为零来获得，若为零则为因子，反之不为因子</font></li><li>细节：<font color="#ff0000">关键在于格式输出的问题</font></li></ol></blockquote><h2 id="5-2-队列"><a href="#5-2-队列" class="headerlink" title="5.2 队列"></a>5.2 队列</h2><h2 id="5-3-栈"><a href="#5-3-栈" class="headerlink" title="5.3 栈"></a>5.3 栈</h2><h1 id="剑指offer"><a href="#剑指offer" class="headerlink" title="剑指offer"></a>剑指offer</h1><h2 id="简单题"><a href="#简单题" class="headerlink" title="简单题"></a>简单题</h2><h3 id="1-数组中重复的数字"><a href="#1-数组中重复的数字" class="headerlink" title="1.数组中重复的数字"></a>1.<a href="https://www.nowcoder.com/practice/6fe361ede7e54db1b84adc81d09d8524">数组中重复的数字</a></h3><blockquote><p><strong>桶排序思想</strong></p><ol><li>首先定义一个与输入长度相等的数组，并将所有值置零；</li><li>遍历输入向量，对遇到的值作为数组下标进行自增；</li><li>判断自增后的值是否大于1，若是则为重复数则直接返回。</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param numbers int整型vector</span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">duplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (numbers.<span class="hljs-built_in">size</span>() != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> a[numbers.<span class="hljs-built_in">size</span>()];<br>            <span class="hljs-comment">//数组元素置零</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i; i &lt; numbers.<span class="hljs-built_in">size</span>(); i++) &#123;<br>                a[i] = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">//遍历计数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : numbers) &#123;<br>                a[item]++;<br>                <span class="hljs-keyword">if</span> (a[item] &gt; <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> item;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><strong>位置重排</strong></p><ol><li>遍历数组，遇到数组元素与下标相同的不用管。</li><li>遇到数组元素与下标不同，就将其交换到属于它的位置，交换前检查那个位置是否有相同的元素，若有则重复。</li><li>遍历结束完全交换也没重复，则返回-1.</li></ol></blockquote><p><img src="https://uploadfiles.nowcoder.com/images/20220421/397721558_1650511844449/985457EF766F228F555A31DC0363FE81" alt="|550"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">duplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numbers.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-comment">//该位置本来就是对的</span><br>            <span class="hljs-keyword">if</span>(numbers[i] == i)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">//位置不对，需要换到自己对应的位置</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//对应位置相等，重复</span><br>                <span class="hljs-keyword">if</span>(numbers[i] == numbers[numbers[i]])<br>                    <span class="hljs-keyword">return</span> numbers[i];<br>                <span class="hljs-comment">//交换位置</span><br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-built_in">swap</span>(numbers[i], numbers[numbers[i]]);<br>                  i--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//没有重复</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p><strong>哈希表</strong></p><ol><li>遍历数组，将没有出现过的元素加入哈希表。</li><li>遇到的元素在哈希表中出现过就是重复数组。</li><li>遍历结束也没找到就返回-1.</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">duplicate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers)</span> </span>&#123;<br>        <span class="hljs-comment">//哈希表记录重复</span><br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>        <span class="hljs-comment">//遍历数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numbers.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-comment">//如果没有出现过就加入哈希表</span><br>            <span class="hljs-keyword">if</span>(mp.<span class="hljs-built_in">find</span>(numbers[i]) == mp.<span class="hljs-built_in">end</span>())<br>                mp[numbers[i]]++;<br>            <span class="hljs-comment">//否则就是重复数字</span><br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> numbers[i];<br>        &#125;<br>        <span class="hljs-comment">//没有重复</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><h3 id="2-替换空格"><a href="#2-替换空格" class="headerlink" title="2.替换空格"></a>2.<a href="https://www.nowcoder.com/practice/0e26e5551f2b489b9f58bc83aa4b6c68">替换空格</a></h3><blockquote><p>python直接用字符串函数<code>replace</code>全局替换即可</p></blockquote><blockquote><p><strong>遍历覆盖法</strong><br>定义一个新字符串，遍历原字符串，遇到空格新字符串加要求替换的字符，否则添加原字符。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>  <span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * @param s string字符串</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * @return string字符串</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-function">string <span class="hljs-title">replaceSpace</span><span class="hljs-params">(string s)</span> </span>&#123;<br><br>        string new_s;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i; i &lt; s.<span class="hljs-built_in">length</span>(); i++) &#123;<br><br>            <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br><br>                new_s += <span class="hljs-string">&quot;%20&quot;</span>;<br><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                new_s += s[i];<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> new_s;<br><br>    &#125;<br><br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="3-从尾到头打印链表"><a href="#3-从尾到头打印链表" class="headerlink" title="3.从尾到头打印链表"></a>3.<a href="https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035">从尾到头打印链表</a></h3><p><strong>1.数组逆向拷贝</strong></p><blockquote><ol><li>遍历链表，用一个数组顺序添加节点值</li><li>逆向遍历数组，添加数组值到新数组中</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  struct ListNode &#123;</span><br><span class="hljs-comment">*        int val;</span><br><span class="hljs-comment">*        struct ListNode *next;</span><br><span class="hljs-comment">*        ListNode(int x) :</span><br><span class="hljs-comment">*              val(x), next(NULL) &#123;</span><br><span class="hljs-comment">*        &#125;</span><br><span class="hljs-comment">*  &#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>     <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">printListFromTailToHead</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>         vector&lt;<span class="hljs-type">int</span>&gt; a, b;<br>         <span class="hljs-keyword">while</span> (head != <span class="hljs-literal">nullptr</span>) &#123;<br>             a.<span class="hljs-built_in">push_back</span>(head-&gt;val);<br>             head = head-&gt;next;<br>         &#125;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>             b.<span class="hljs-built_in">push_back</span>(a[i]);<br>         &#125;<br>         <span class="hljs-keyword">return</span> b;<br>     &#125;<br><br>&#125;;<br><br></code></pre></td></tr></table></figure><p><strong>2.递归</strong></p><blockquote><ol><li>从表头开始往后递归进入每一个节点。</li><li>遇到尾节点后开始返回，每次返回依次添加一个值进入输出数组。</li><li>直到递归返回表头</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*  struct ListNode &#123;</span><br><span class="hljs-comment">*        int val;</span><br><span class="hljs-comment">*        struct ListNode *next;</span><br><span class="hljs-comment">*        ListNode(int x) :</span><br><span class="hljs-comment">*              val(x), next(NULL) &#123;</span><br><span class="hljs-comment">*        &#125;</span><br><span class="hljs-comment">*  &#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//递归函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">recursion</span><span class="hljs-params">(ListNode* head, vector&lt;<span class="hljs-type">int</span>&gt;&amp; res)</span></span>&#123; <br>        <span class="hljs-keyword">if</span>(head != <span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-comment">//先往链表深处遍历</span><br>            <span class="hljs-built_in">recursion</span>(head-&gt;next, res); <br>            <span class="hljs-comment">//再填充到数组就是逆序</span><br>            res.<span class="hljs-built_in">push_back</span>(head-&gt;val); <br>        &#125;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">printListFromTailToHead</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        <span class="hljs-comment">//递归函数打印</span><br>        <span class="hljs-built_in">recursion</span>(head, res); <br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><p><strong>3.栈</strong></p><blockquote><ol><li>我们可以顺序遍历链表，将链表的值push到栈中。</li><li>然后再依次弹出栈中的元素，加入到数组中，即可实现链表逆序。</li></ol></blockquote><p><img src="https://uploadfiles.nowcoder.com/images/20210929/397721558_1632894642785/BE964CB47EFCAE9EDFDA27F797D795C0"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">printListFromTailToHead</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res;<br>        stack&lt;<span class="hljs-type">int</span>&gt; s;<br>        <span class="hljs-comment">//正序输出链表到栈中</span><br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">NULL</span>)&#123; <br>            s.<span class="hljs-built_in">push</span>(head-&gt;val);<br>            head = head-&gt;next;<br>        &#125;<br>        <span class="hljs-comment">//输出栈中元素到数组中</span><br>        <span class="hljs-keyword">while</span>(!s.<span class="hljs-built_in">empty</span>())&#123; <br>            res.<span class="hljs-built_in">push_back</span>(s.<span class="hljs-built_in">top</span>());<br>            s.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-用两个栈实现队列"><a href="#4-用两个栈实现队列" class="headerlink" title="4.用两个栈实现队列"></a>4.<a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6">用两个栈实现队列</a></h3><p><strong>解题思路</strong>：</p><p>借助栈的<strong>先进后出</strong>规则模拟实现队列的<strong>先进先出</strong></p><ol><li>**当插入时，直接插入 stack1</li><li>当弹出时，当 <strong>stack2 不为空</strong>，<strong>弹出 stack2 栈顶元素</strong>，如果 stack2 <strong>为空</strong>，<strong>将 stack1 中的全部数逐个出栈入栈 stack2，再弹出 stack2 栈顶元素</strong></li></ol><p><strong>图解</strong>：</p><p><img src="https://uploadfiles.nowcoder.com/images/20210630/889362376_1625037262242/6A83CFA85D068C98792D42B93A33518D">  </p><p><strong>代码展示：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> node)</span> </span>&#123;<br>        stack1.<span class="hljs-built_in">push</span>(node);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (stack2.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">while</span> (!stack1.<span class="hljs-built_in">empty</span>()) &#123;<br>                stack2.<span class="hljs-built_in">push</span>(stack1.<span class="hljs-built_in">top</span>());<br>                stack1.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> node = stack2.<span class="hljs-built_in">top</span>();<br>        stack2.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br> <br>  <span class="hljs-keyword">private</span>:<br>    stack&lt;<span class="hljs-type">int</span>&gt; stack1;<br>    stack&lt;<span class="hljs-type">int</span>&gt; stack2;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong>：</p><blockquote><ul><li><p>时间复杂度：对于插入和删除操作，时间复杂度均为 O(1)。插入不多说，对于删除操作，虽然看起来是 O(n) 的时间复杂度，但是仔细考虑下每个元素只会「至多被插入和弹出 stack2 一次」，因此均摊下来每个元素被删除的时间复杂度仍为 O(1)。</p></li><li><p>空间复杂度O(N)：辅助栈的空间，最差的情况下两个栈共存储N个元素.</p></li></ul></blockquote><h3 id="5-旋转数组的最小数字"><a href="#5-旋转数组的最小数字" class="headerlink" title="5.旋转数组的最小数字"></a>5.<a href="https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba">旋转数组的最小数字</a></h3><p><strong>求解思路：</strong></p><ol><li>暴力法</li></ol><blockquote><ul><li>特殊情况，如果数组为空，则直接返回0</li><li>创建最小值 min</li><li>遍历数组每一个元素nums，并更新最小值 min = min(min，num)</li><li>遍历结束，直接返回 min</li></ul></blockquote><p>时间复杂度O(N)：N表示数组的长度，遍历整个数组O(N)<br>空间复杂度O(1)：仅使用一个额外空间变量O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minNumberInRotateArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>         <span class="hljs-type">int</span> min = <span class="hljs-number">10000</span>;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : nums) &#123;<br>             <span class="hljs-keyword">if</span> (min &gt;= item)<br>                 min = item;<br>         &#125;<br>         <span class="hljs-keyword">return</span> min;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><ol start="2"><li>二分法</li></ol><blockquote><ul><li><strong>初始化</strong>：定义二分端点双指针<code>i，j</code>，<code>m=（i+j）/ 2</code>为每次二分的中点（ “/“ 代表向下取整除法）</li><li><strong>循环二分</strong>：循环不成立则按照以下规则更新双指针：<ol><li>当 array[m] &gt; array[j] 时： m 一定在左排序数组中，即旋转点 x 一定在 [m + 1, j] 闭区间内，因此执行 i = m + 1；</li><li>当 array[m] &lt; array[j] 时： m 一定在右排序数组中，即旋转点 x 一定在[i, m]闭区间内，因此执行 j = m；</li><li>当 array[m] = array[j] 时： 无法判断 mm 在哪个排序数组中，即无法判断旋转点 x 在 [i, m] 还是 [m + 1, j] 区间中。解决方案： 执行 j = j - 1 缩小判断范围</li></ol></li><li><strong>返回值</strong>： 当 i = j 时跳出二分循环，并返回旋转点的值 array[i] 即可。</li></ul></blockquote><p><img src="https://uploadfiles.nowcoder.com/images/20210716/889362376_1626418937573/3C28F80DBB0E1E084CB71A32958F04F9" alt="|500"></p><p>时间复杂度O(logN)：N表示数组的长度，二分查找O(logN)<br>空间复杂度O(1)：仅使用常数（i, j, m）额外空间变量O(1)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minNumberInRotateArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i != j) &#123;<br>            <span class="hljs-type">int</span> m = (i + j) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[m] &gt; nums[j])<br>                i = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[m] &lt; nums[j])<br>                j = m;<br>            <span class="hljs-keyword">else</span><br>                j -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums[i];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="6-二进制中1的个数"><a href="#6-二进制中1的个数" class="headerlink" title="6.二进制中1的个数"></a>6.<a href="https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8">二进制中1的个数</a></h3><p><strong>求解思路：</strong></p><ol><li>循环按位比较法（推荐使用）</li></ol><p><strong>知识点：位运算</strong></p><p>计算机的数字由二进制表示，我们平常的运算是对整个数字进行运算，但是还可以按照二进制的每一位分别进行运算。常见运算有位与、位或、移位、位异或等。</p><p><strong>思路：</strong></p><p>我们可以检查该数字的二进制每一位是否为1，如果遍历二进制每一位呢？可以考虑移位运算，每次移动一位就可以。至于怎么统计到1呢？我们都只知道数字1与数字相位与运算，其实只是最后一位为1就是1，最后一位为0就是0，这样我们只需要将数字1移位运算，就可以遍历二进制的每一位，再去做位与运算，结果为1的就是二进制中为1的。</p><p><strong>具体做法：</strong></p><blockquote><ul><li>遍历二进制的32位，通过移位0-31次实现。</li><li>将移位后的1与数字进行位与运算，从而判断数字的二进制每一位结果，结果为1就记录一次。</li></ul></blockquote><p><strong>复杂度分析：</strong></p><ul><li>时间复杂度：O(k)O(k)O(k)，kkk为int型的32位，一次遍历</li><li>空间复杂度：O(1)O(1)O(1)，常数级变量，没有额外辅助空间</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">NumberOf1</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//遍历32位</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)&#123;<br>            <span class="hljs-comment">//按位比较</span><br>            <span class="hljs-keyword">if</span>((n &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) != <span class="hljs-number">0</span>)   <br>                res++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>     &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>暴力法</li></ol><blockquote><ul><li>判断数n是否为负数，负数则转化为相同二进制表示的正数（$P_b = 2^N+n,N为二进制位数$）</li><li>通过连除法，用结果累加n%2的余数，并更新n=n/2</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">NumberOf1</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> m = n;<br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>)<br>            m = n + <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">32</span>);<br>        <span class="hljs-keyword">while</span> (m != <span class="hljs-number">0</span>) &#123;<br>            sum += m % <span class="hljs-number">2</span>;<br>            m /= <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>位运算优化法（扩展思路）</li></ol><p><strong>思路：</strong></p><p><strong>有一个性质：$n&amp;(n−1)$，会将n的二进制中最低位由1变成0</strong></p><p>我们可以不断让当前的 n与 n−1做位与运算，直到 n的二进制全部变为 0 停止。因为每次运算会使得 n 的最低位的 1 被翻转成0，因此运算次数就等于 n 的二进制位中 1 的个数，由此统计1的个数。</p><p><strong>具体做法：</strong></p><blockquote><ul><li>使用循环检查n是否为0.</li><li>不为0就与n−1做位与运算，去掉二进制最后一位的1，并统计次数。</li></ul></blockquote><p><strong>图示：</strong></p><p><img src="https://uploadfiles.nowcoder.com/images/20220419/397721558_1650336051737/D2B5CA33BD970F64A6301FA75AE2EB22"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">NumberOf1</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//当n为0时停止比较</span><br>        <span class="hljs-keyword">while</span>(n)&#123;  <br>            n &amp;= n - <span class="hljs-number">1</span>;<br>            res++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>     &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">some solutions about common algorithms</summary>
    
    
    
    <category term="前后端开发" scheme="https://alleyf.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Algorithm" scheme="https://alleyf.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Dateframe—Algorithm</title>
    <link href="https://alleyf.github.io/2023/03/2e76a383274a.html"/>
    <id>https://alleyf.github.io/2023/03/2e76a383274a.html</id>
    <published>2023-03-17T11:06:15.000Z</published>
    <updated>2023-05-24T09:15:40.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-线性表"><a href="#1-线性表" class="headerlink" title="1.线性表"></a>1.线性表</h1><blockquote><p>无论哪种数据结构，都存在<font color="#ff0000">增删改查 (按值查找)查（按位查找）</font>操作，对应不同操作的<font color="#4bacc6">时间复杂度不同</font>，要根据实际数据的形式选择合适的数据结构进行存储，再选择合适算法进行处理。</p></blockquote><h2 id="顺序表（sequence-list）"><a href="#顺序表（sequence-list）" class="headerlink" title="顺序表（sequence list）"></a>顺序表（sequence list）</h2><h3 id="1初始化"><a href="#1初始化" class="headerlink" title="1初始化"></a>1初始化</h3><h3 id="2增加元素"><a href="#2增加元素" class="headerlink" title="2增加元素"></a>2增加元素</h3><h3 id="3删除元素"><a href="#3删除元素" class="headerlink" title="3删除元素"></a>3删除元素</h3><h3 id="4修改元素"><a href="#4修改元素" class="headerlink" title="4修改元素"></a>4修改元素</h3><h3 id="5查找元素"><a href="#5查找元素" class="headerlink" title="5查找元素"></a>5查找元素</h3><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><h2 id="链表（link-list）"><a href="#链表（link-list）" class="headerlink" title="链表（link list）"></a>链表（link list）</h2><h3 id="1初始化-1"><a href="#1初始化-1" class="headerlink" title="1初始化"></a>1初始化</h3><h3 id="2增加元素-1"><a href="#2增加元素-1" class="headerlink" title="2增加元素"></a>2增加元素</h3><h4 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h4><h4 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h4><h3 id="3删除元素-1"><a href="#3删除元素-1" class="headerlink" title="3删除元素"></a>3删除元素</h3><h3 id="4修改元素-1"><a href="#4修改元素-1" class="headerlink" title="4修改元素"></a>4修改元素</h3><h3 id="5查找元素-1"><a href="#5查找元素-1" class="headerlink" title="5查找元素"></a>5查找元素</h3><h4 id="按值查找-1"><a href="#按值查找-1" class="headerlink" title="按值查找"></a>按值查找</h4><h4 id="按位查找-1"><a href="#按位查找-1" class="headerlink" title="按位查找"></a>按位查找</h4><h1 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h1><blockquote><p>栈是一种<font color="#8064a2">后进先出（LIFO）</font>的线性表结构。</p></blockquote><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>SElemType *base;<br>SElemType *top;<br><span class="hljs-type">int</span> stacksize;&#125; SgStack;<br></code></pre></td></tr></table></figure><p><span style="background:#b1ffff">链栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span>&#123;</span><br>SElemType data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span> *<span class="hljs-title">next</span>;</span>&#125;StackNode,*LinkStack;<br><br></code></pre></td></tr></table></figure><h2 id="1初始化-2"><a href="#1初始化-2" class="headerlink" title="1初始化"></a>1初始化</h2><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitStack</span><span class="hljs-params">(SgStack &amp;S,<span class="hljs-type">int</span> MAXSIZE&#123;</span><br><span class="hljs-params">S.base =new SElemType [MAXSIZE]；</span><br><span class="hljs-params"><span class="hljs-keyword">if</span>(!S.base） </span><br><span class="hljs-params">   <span class="hljs-keyword">return</span> OVERFLOW;</span><br><span class="hljs-params">   S.top = S.base;</span><br><span class="hljs-params">   S.stacksize = MAXSIZE；</span><br><span class="hljs-params">   <span class="hljs-keyword">return</span> OK;</span><br></code></pre></td></tr></table></figure><p><span style="background:#b1ffff">链栈：</span></p><p><strong>不带头节点：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Initstack</span> <span class="hljs-params">(LinkStack &amp;S)</span><br>&#123;<br>S=<span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-入栈"><a href="#2-入栈" class="headerlink" title="2 入栈"></a>2 入栈</h2><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span><br>时间复杂度：O（1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><br>Status <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack &amp;S,SElemType e)</span><br>&#123;<br><span class="hljs-keyword">if</span>(S.top - S.base==S.stacksize）<span class="hljs-keyword">return</span> ERROR;<br>*S.top++=e;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是一个名为 <code>Push</code> 的函数，它接受两个参数：一个指向栈 <code>S</code> 的指针引用和要入栈的元素 <code>e</code>。<code>SqStack</code> 表示栈的类型，在这里推测它是由结构体或类定义的。<code>&amp;S</code> 表示将栈变量的地址传递给函数，通过引用来修改栈的内容。在 C/C++中，引用有时候也被称为别名(alias)，它允许我们使用类似于指针的语法来操作对象，但是具有更好的安全性和易读性。<code>SElemType</code> 是栈元素的数据类型，可以是任何合法的数据类型。</p><p>这个函数的作用是将元素e压入到栈S中，如果栈已满则返回ERROR，否则在栈顶插入元素e并返回OK。其中<code>S.top - S.base</code> 表示当前栈中已有元素的个数，如果这个值等于<code>S.stacksize</code>就意味着栈已经满了。<code>*S.top++=e</code>表示将元素e存储在栈顶，并将栈指针往上移动一位，准备接收下一个元素。最后，函数返回插入操作的结果，OK表示成功，ERROR表示失败。</p><p><span style="background:#b1ffff">链栈：</span><br><strong>头插</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">Push</span> <span class="hljs-params">(LinkStack&amp;S,ElemType e)</span>&#123;<br>p=new StackNode;<span class="hljs-comment">//生成新结点p</span><br><span class="hljs-keyword">if</span> (!p)<span class="hljs-keyword">return</span> OVERFLOW;<br>p-&gt;data=e;<br>p-&gt;next=S;<br>S=p;<span class="hljs-comment">//S始终指向当前第一个节点(栈顶节点)</span><br><span class="hljs-keyword">return</span> OK;<br><br></code></pre></td></tr></table></figure><h2 id="3-出栈"><a href="#3-出栈" class="headerlink" title="3 出栈"></a>3 出栈</h2><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack &amp;S,SElemType &amp;e)</span><br>&#123;<br><span class="hljs-keyword">if</span>(S.top == S.base）<span class="hljs-keyword">return</span> ERROR;<br>e=*--S.top;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#b1ffff">链栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">Pop</span> <span class="hljs-params">(LinkStack &amp;S,SElemType &amp;e)</span><br>&#123;<br><span class="hljs-keyword">if</span> (S==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> ERROR;<br>e = S-&gt;data;<br>p = S;<br>S = S-&gt;next;<br>delete p;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-队列"><a href="#3-队列" class="headerlink" title="3. 队列"></a>3. 队列</h1><blockquote><p>队列是一种先进先出（FIFO）的线性表，只允许在表的一端插入，另一端删除。</p></blockquote><p><font color="#8064a2">顺序队列：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">Typedef <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>QElemType *base;<span class="hljs-comment">//初始化的动态分配存储空间</span><br><span class="hljs-type">int</span> front;<span class="hljs-comment">//头指针</span><br><span class="hljs-type">int</span> rear;<span class="hljs-comment">//尾指针</span><br>&#125;SgQueue;<br><br></code></pre></td></tr></table></figure><p><font color="#f79646">链队列：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span></span><br><span class="hljs-class">&#123;</span><br>QElemType data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Qnode</span> *<span class="hljs-title">next</span>;</span><br>&#125;Qnode,*QueuePtr;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>QueuePtr front;<span class="hljs-comment">//队头指针</span><br>QueuePtr rear;<span class="hljs-comment">//队尾指针</span><br>&#125;LinkQueue;<br><br></code></pre></td></tr></table></figure><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1 初始化"></a>1 初始化</h2><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitQueue</span> <span class="hljs-params">(SgQueue &amp;Q)</span><br>&#123;<br>Q.base = new QElemType[MAXQSIZE];<br><span class="hljs-keyword">if</span> (!Q.base)<br><span class="hljs-built_in">exit</span> (OVERFLOW);<br>Q.front=Q.rear=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#fdbfff">链队列：</span><br><strong>有头节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitQueue</span> <span class="hljs-params">(LinkQueue &amp;Q)</span>&#123;<br>Q.front=(QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br><span class="hljs-keyword">if</span>(!Q.front)<br><span class="hljs-built_in">exit</span>(OVERFLOW);<br>Q.rear=Q.front;<br>Q.front-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#d3f8b6">队空标志：front==rear</span><br><span style="background:#d3f8b6">队满标志：（rear+1）%M=front</span>（循环队列）</p><h2 id="2-入队"><a href="#2-入队" class="headerlink" title="2 入队"></a>2 入队</h2><p><strong>链接新节点，更新队尾节点</strong></p><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q,QElemType e)</span><br>&#123;<span class="hljs-keyword">if</span>((Q.rear+<span class="hljs-number">1</span>)%MAXQSIZE==Q.front)<br><span class="hljs-keyword">return</span> ERROR;<br>Q.base[Q.rear]=e;<br>Q.rear=(Q.rear+<span class="hljs-number">1</span>)%MAXQSIZE;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#fdbfff">链队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">EnQueue</span> <span class="hljs-params">(LinkQueue &amp;Q,QElemType e)</span>&#123;<br>p=(QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (QNode));<br><span class="hljs-keyword">if</span>(!p)<br><span class="hljs-built_in">exit</span>(OVERFLOW);<br>p-&gt;data=e;<br>p-&gt;next=<span class="hljs-literal">NULL</span>;<br>Q.rear-&gt;next=p;<br>Q.rear=p;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-出队"><a href="#3-出队" class="headerlink" title="3 出队"></a>3 出队</h2><p><strong>临时存储首元节点，队头节点指向首元节点的下一个节点，删除释放首元节点</strong></p><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">DeQueue</span> <span class="hljs-params">(LinkQueue &amp;Q,QElemType &amp;e)</span><br>&#123;<br><span class="hljs-keyword">if</span>(Q.front==Q.rear)<br><span class="hljs-keyword">return</span> ERROR;<br>e=Q.base[Q.front];<br>Q.front=(Q.front+<span class="hljs-number">1</span>)%MAXQSIZE;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background:#fdbfff">链队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">DeQueue</span> <span class="hljs-params">(LinkQueue &amp;Q,QElemType &amp;e&#123;</span><br><span class="hljs-params"><span class="hljs-keyword">if</span>(Q.front==Q.rear)</span><br><span class="hljs-params"><span class="hljs-keyword">return</span> ERROR;</span><br><span class="hljs-params">p=Q.front-&gt;next;</span><br><span class="hljs-params">e=p-&gt;data;</span><br><span class="hljs-params">Q.front-&gt;next=p-&gt;next;</span><br><span class="hljs-params"><span class="hljs-keyword">if</span>(Q.rear==p)</span><br><span class="hljs-params">Q.rear=Q.front;</span><br><span class="hljs-params"><span class="hljs-built_in">free</span>(p);</span><br><span class="hljs-params"><span class="hljs-keyword">return</span> OK;</span><br><span class="hljs-params">&#125;</span><br></code></pre></td></tr></table></figure><p><span style="background:rgba(240, 200, 0, 0.2)">最后一个节点的时候，不删除，要让队头等于队尾节点。</span></p><h2 id="4-取队列长度"><a href="#4-取队列长度" class="headerlink" title="4 取队列长度"></a>4 取队列长度</h2><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">QueueLength</span><span class="hljs-params">(SqQueue Q)</span><br>&#123;<br><span class="hljs-keyword">return</span> (Q.rear-Q.front+MAXQSIZE)%MAXQSIZE;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h1 id="4-串、数组和广义表"><a href="#4-串、数组和广义表" class="headerlink" title="4. 串、数组和广义表"></a>4. 串、数组和广义表</h1><blockquote><p> 串就是字符串<br> 数组包括一维数组和二维数组<br> 广义表类似于 python 中的列表，可以表嵌套</p></blockquote><h1 id="5-树"><a href="#5-树" class="headerlink" title="5. 树"></a>5. 树</h1><p>n 个节点的有限集合</p><h2 id="1性质"><a href="#1性质" class="headerlink" title="1性质"></a>1性质</h2><ul><li>具有 n 个节点的完全二叉树的深度为<br>$$<a href="%E5%8F%96%E4%B8%8B%E7%95%8C">log_2 n</a>+1$$</li></ul><p>两类特殊的二叉树：</p><ol><li>满二叉树：<span style="background:#b1ffff">指深度为 k 且含有</span> $2^k-1$ <span style="background:#b1ffff">个节点的二叉树。</span></li><li>完全二叉树：<span style="background:#affad1">书中所含的 n 个节点和满二叉树中编号为 1 至 n 的节点一一对应。</span></li></ol><h2 id="2存储结构"><a href="#2存储结构" class="headerlink" title="2存储结构"></a>2存储结构</h2><p>顺序存储：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAXSIZE 100</span><br><span class="hljs-keyword">typedef</span> TElemType SqBiTree[MAXSIZE];<br>SqBiTree bt;<br></code></pre></td></tr></table></figure><p>链式存储：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>   TEIemType data;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">Ichild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125;BiTNode, *BiTree;<br></code></pre></td></tr></table></figure><h2 id="3遍历方式"><a href="#3遍历方式" class="headerlink" title="3遍历方式"></a>3遍历方式</h2><blockquote><p>先中后的顺序指的是根据点访问的顺序，如先序遍历就是<font color="#f79646">根左右</font>，后序遍历就是<font color="#f79646">左右根</font>。</p></blockquote><p><img src="https://s2.loli.net/2023/05/24/kyjJIXU7eLSbCFW.png" alt="遍历图|275"></p><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>ABCDEFGHK</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Preorder</span> <span class="hljs-params">(BiTree T)</span><br>&#123;<br>   <span class="hljs-keyword">if</span> (T)&#123;<br>      visit(T-&gt;data);<br>      Preorder(T-&gt;IchiId);<br>      Preorder(T-&gt;rchiId);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>BDCAEHGKF</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Inorder</span> <span class="hljs-params">(BiTree T)</span><br>&#123;<br>   <span class="hljs-keyword">if</span> (T) &#123;<br>      Inorder(T-&gt;lchiId);<br>      visit(T-&gt;data);<br>      Ineorder(T-&gt;rchiId);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>中序非递归：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Inorder1</span> <span class="hljs-params">(BiTree T)</span><br>&#123; <br>Initstack(S); p=T;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">while</span>(p) &#123;Push(S,p);p=p-&gt;lchild;&#125;<span class="hljs-comment">//先将左孩子全部入栈</span><br><span class="hljs-keyword">if</span>(StackEmpty(S)) <span class="hljs-keyword">return</span>;<br>Pop(S,p);<span class="hljs-comment">//出一个左孩子</span><br><span class="hljs-built_in">cout</span>&lt;&lt;P-&gt;data;<br>p=p-&gt;rchild;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>DCBHKGFEA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bkorder</span> <span class="hljs-params">(BiTree T)</span><br>&#123;<br>   <span class="hljs-keyword">if</span> (T) &#123;<br>      bkorder(T-&gt;lchiId);<br>      bkorder(T-&gt;rchiId);<br>      visit(T-&gt;data);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>ABECFDGHK</p><h3 id="4-常见应用"><a href="#4-常见应用" class="headerlink" title="4 常见应用"></a>4 常见应用</h3><ol><li>统计二叉树中叶子节点的个数：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CountLeaf</span> <span class="hljs-params">(BiTree T, <span class="hljs-type">int</span> &amp; count)</span> &#123;<br><span class="hljs-keyword">if</span>(T)&#123;<br><span class="hljs-keyword">if</span>(!T-&gt;lchild&amp;&amp;!T-&gt;rchild)<br>count++;<br>CountLeaf(T-&gt;lchild, count);<br>CountLeaf(T-&gt;rchild, count);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>求二叉树的深度：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Depth</span> <span class="hljs-params">(BiTree I)</span>&#123;<br> <span class="hljs-keyword">if</span> (!T) depthval = O;<br> <span class="hljs-keyword">else</span> &#123;<br>    depthL= Depth(T-&gt;IchiId);<span class="hljs-comment">//求左子树的深度</span><br>    depthR= Depth(T-&gt;rchild);<span class="hljs-comment">//求右子树的深度</span><br>    depthval=<span class="hljs-number">1</span>+ (depthL&gt;depthR?depthL:depthR);<span class="hljs-comment">//取较大者相加</span><br>   &#125;<br> <span class="hljs-keyword">return</span> depthval;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>建立二叉树的存储结构：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CreateBiTree</span><span class="hljs-params">(BiTree &amp;T)</span>&#123;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;ch);<br><span class="hljs-keyword">if</span>(ch=<span class="hljs-string">&quot;&quot;</span>)<br>T=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>T = new BiTNode;<br>T-&gt;data = ch;<br>CreteBiTree(T-&gt;lchild);<span class="hljs-comment">//创建左子树</span><br>CreteBiTree(T-&gt;rchild);<span class="hljs-comment">//创建右子树</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>查询二叉树中的某个节点：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">Preorder</span> <span class="hljs-params">(BiTree T, ElemType x, BiTree &amp;p)</span>&#123;<br><span class="hljs-keyword">if</span>(T)&#123;<br>    <span class="hljs-keyword">if</span>(T-&gt;data==x)<span class="hljs-comment">//递归终止条件</span><br>    &#123; <br>    p = T;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br>elseif&#123; <br><span class="hljs-keyword">if</span>(Preorder(T-&gt;lchild, x, p))<br><span class="hljs-keyword">return</span> TRUE;<br>elseif&#123;<br><span class="hljs-keyword">if</span>(Preorder(T-&gt;rchild, x, p))<br><span class="hljs-keyword">return</span> TRUE;<br><span class="hljs-keyword">else</span>&#123;<br>p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> False;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> False;<br></code></pre></td></tr></table></figure><ol start="5"><li>线索二叉树：</li></ol><p>在中序线索二叉树中，查找结点*p的中序后继结点<br><span style="background:rgba(240, 200, 0, 0.2)">1. 若 P-&gt;Rtag 为 1, 则 P 的右线索指向其后继结点<em>q;</span><br><span style="background:rgba(240, 200, 0, 0.2)">2. 若 P-&gt;Rtag 为 0, 则其后继结点</em>q 是右子树中的最左结点。</span></p><ol start="6"><li>森林于树之间的转换</li></ol><blockquote><p>左孩子右兄弟连接原则：左子树均为孩子节点，右子树均为兄弟节点。</p></blockquote><ol start="7"><li>哈夫曼树，降序排列，从低到高，两两（多多）做兄弟构造新树，循环往复<br>所有叶子节点带权长度之和：<br>$$<br>WPL(T)=\sum W_kl_k(对所有叶子节点)<br>$$<blockquote><p>WPL 最小的哈夫曼树为<font color="#8db3e2">最优哈夫曼树</font>。<br>哈夫曼编码原则：<font color="#ff0000">左 0 右 1 原则</font></p></blockquote></li></ol><h1 id="6-图"><a href="#6-图" class="headerlink" title="6. 图"></a>6. 图</h1><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1>]]></content>
    
    
    <summary type="html">some key points with respect to dataframe-algorithm</summary>
    
    
    
    <category term="前后端开发" scheme="https://alleyf.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Dataframe-Algorithm" scheme="https://alleyf.github.io/tags/Dataframe-Algorithm/"/>
    
  </entry>
  
</feed>

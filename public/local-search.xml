<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DeepLearing</title>
    <link href="/2023/05/0950da3fc570.html"/>
    <url>/2023/05/0950da3fc570.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h1><p><img src="https://s2.loli.net/2023/05/31/mlfBuXI7pt2eCic.png" alt="image.png|400"></p><blockquote><p>特征工程的作用：<br>    - 数据特征决定了模型的上限<br>    - 预处理和特征提取是最核心的<br>    - 算法与参数选择决定了如何逼近这个上限</p></blockquote><h2 id="1-1反向传播"><a href="#1-1反向传播" class="headerlink" title="1.1反向传播"></a>1.1反向传播</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251455407.png"/><h2 id="1-2正则化"><a href="#1-2正则化" class="headerlink" title="1.2正则化"></a>1.2正则化</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251607343.png" alt="image.png"></p><h2 id="1-3神经元"><a href="#1-3神经元" class="headerlink" title="1.3神经元"></a>1.3神经元</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251610745.png" alt="image.png"></p><h2 id="1-4激活函数"><a href="#1-4激活函数" class="headerlink" title="1.4激活函数"></a>1.4激活函数</h2><blockquote><p>引入<strong>非线性特性</strong>，从而逼近任何分布结果。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251611276.png" alt="image.png"></p></blockquote><p>激活函数对比：</p><blockquote><p><strong>Relu 为为主流，Sigmoid 会出现梯度消失现象</strong><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307251616218.png" alt="image.png"></p></blockquote><h2 id="1-5数据预处理"><a href="#1-5数据预处理" class="headerlink" title="1.5数据预处理"></a>1.5数据预处理</h2><blockquote><p>不同的预处理结果会使得模型的效果发生很大的差异！<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308012100980.png" alt="image.png"></p></blockquote><ol><li>参数初始化</li></ol><ul><li>参数初始化同样非常重要！</li><li>通常我们都使用随机策略来进行参数初始化<br>$$W = 0.01*np.random.randn (D, H)$$</li></ul><h2 id="1-6Drop-Out"><a href="#1-6Drop-Out" class="headerlink" title="1.6Drop-Out"></a>1.6Drop-Out</h2><blockquote><p>过拟合是神经网络非常头疼的一个大问题！<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308012106533.png" alt="image.png"></p></blockquote><h2 id="1-7卷积"><a href="#1-7卷积" class="headerlink" title="1.7卷积"></a>1.7卷积</h2><blockquote><p>计算过程如下图所示：</p><ul><li>分别计算三个通道输入与卷积核进行内积，再将三通道结果求和得到输出（特征图）</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021949385.png" alt="image.png"></p><blockquote><p>特征图的个数（深度）等于卷积核的个数，如上图所见两个卷积核进行多尺度特征提取得到两个特征图。</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121103471.png" alt="image.png"></p><h3 id="1-7-1步长"><a href="#1-7-1步长" class="headerlink" title="1.7.1步长"></a>1.7.1步长</h3><blockquote><p>步长就是卷积时滑动窗口的距离，一般为 1/2.</p></blockquote><h3 id="1-7-2边缘填充"><a href="#1-7-2边缘填充" class="headerlink" title="1.7.2边缘填充"></a>1.7.2边缘填充</h3><blockquote><p>边缘填充是在原输入的数据上加上一层 0 填充，不仅增加了原始边缘数据的卷积次数还保证了 0 填充填充不影响特征提取。</p></blockquote><h3 id="1-7-3卷积计算结果"><a href="#1-7-3卷积计算结果" class="headerlink" title="1.7.3卷积计算结果"></a>1.7.3卷积计算结果</h3><p>长度：$$H_{2}= \frac{H_{1}-F_{H}+2P}{S}+1$$<br>宽度： $$W_{2}= \frac{W_{1}-F_{W}+2P}{S}+1$$</p><blockquote><p>其中 W 1、H 1 表示输入的宽度、长度；W 2、H 2 表示输出特征图的宽度、长度；F 表示卷积核长和宽的大小；S 表示滑动窗口的步长; P 表示边界填充 (加几圈 0)。</p></blockquote><h2 id="1-8池化"><a href="#1-8池化" class="headerlink" title="1.8池化"></a>1.8池化</h2><h3 id="最大池化"><a href="#最大池化" class="headerlink" title="最大池化"></a>最大池化</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121141086.png" alt="image.png"></p><blockquote><p>在原始特征图上<strong>分块</strong>选择<strong>最大（最重要）的特征值</strong>，从而对特征图进行<strong>下采样压缩大小</strong>，但<strong>特征图个数不变</strong></p></blockquote><h2 id="1-9总体架构"><a href="#1-9总体架构" class="headerlink" title="1.9总体架构"></a>1.9总体架构</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121153214.png" alt="image.png"></p><blockquote><p>只有带参数的才能称之为一层，卷积层和全连接层属于，而激活函数和池化层不属于。</p></blockquote><p><strong>特征图变化：</strong><br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308121157274.png" alt="image.png"></p><p>感受野</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV，NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machinelearning DeepLearing</title>
    <link href="/2023/05/14870b008a81.html"/>
    <url>/2023/05/14870b008a81.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>机器学习主要分为以下两种：</p><p><span style="background:#affad1">1. 监督学习（supervised learning）</span><br><span style="background:#affad1">2. 无监督学习（unsupervised learning）</span></p><h1 id="2-监督学习"><a href="#2-监督学习" class="headerlink" title="2. 监督学习"></a>2. 监督学习</h1><p>分类：</p><p>回归，分类</p><h1 id="3-无监督学习"><a href="#3-无监督学习" class="headerlink" title="3. 无监督学习"></a>3. 无监督学习</h1><p>分类：<br>聚类（clustering）</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AIGC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTorch快速入门</title>
    <link href="/2023/05/891ff30b7b9b.html"/>
    <url>/2023/05/891ff30b7b9b.html</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS</title>
    <link href="/2023/05/8e2ac1a55f44.html"/>
    <url>/2023/05/8e2ac1a55f44.html</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>CS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CS</tag>
      
      <tag>OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot启示录</title>
    <link href="/2023/04/218510a8c5b9.html"/>
    <url>/2023/04/218510a8c5b9.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-开发环境热部署"><a href="#1-开发环境热部署" class="headerlink" title="1.开发环境热部署"></a>1.开发环境热部署</h1><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><blockquote><ol><li>在实际的项目开发调试过程中会频繁地修改后台类文件，导致需要重新编译、重新启动，整个过程非常麻烦，影响开发效率。</li><li>Spring Boot 提供了 spring-boot-devtools 组件，使得无须手动重启 SpringBoot 应用即可重新编译、启动项目，大大缩短编译启动的时间。devtools 会监听 classpath 下的文件变动，触发 Restart 类加载器重新加载该类,从而实现类文件和属性文件的热部署。</li><li>并不是所有的更改都需要重启应用 (如静态资源、视图模板)，可以通过设置spring. devtools. restart. exclude 属性来指定一些文件或目录的修改不用重启应用</li></ol></blockquote><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><blockquote><p>在 <strong>pom. xml</strong> 配置文件中添加 <strong>dev-tools 依赖</strong>。<br>使用 <strong>optional=true</strong> 表示依赖<strong>不会传递</strong>，即该项目依赖 devtools; 其他项目如果引入此项目生成的 JAR 包，则不会包含 devtools</p></blockquote><h3 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom. xml"></a>1.pom. xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>&lt;optional&gt;<span class="hljs-literal">true</span>&lt;/optional&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2. application. properties"></a>2. application. properties</h3><blockquote><p>在 application. properties 中配置 <strong>devtools.</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">#热部署生效<br>spring.devtools.restart.enabLed=<span class="hljs-literal">true</span><br>#设置重启目录<br>spring.devtooLs.restart.additional-paths=src/main/java<br>#设置classpath目录下的 WEB-INF 文件夹内容修改不重启<br>spring.devtooLs.restart.exclude=<span class="hljs-keyword">static</span><span class="hljs-comment">/**</span><br></code></pre></td></tr></table></figure><ul><li>如果使用了<span style="background:rgba(240, 200, 0, 0.2)"> Eclipse</span>, 那么在修改完代码并保存之后，项目将自动编译并触发重启，而如果使用了 <span style="background:rgba(160, 204, 246, 0.55)">IntelliJ IDEA</span>, 还需要配置项目自动编译。</li><li>打开<font color="#245bdb"> Settings </font>页面，在左边的菜单栏依次找到Build, Execution, Deployment-→Compile, 勾选 <font color="#ffc000">Build project automatically</font></li><li>按 <font color="#4bacc6">Ctrl+ Shift+ Alt+ /</font>快捷键调出 Maintenance 页面，单击 <font color="#9bbb59">Registry</font>, 勾选<font color="#8064a2">compiler.automake.allow.when.app.running </font>复选框 (可能找不到，修改设置为下图即可解决)。</li><li>做完这两步配置之后，若开发者再次在 IntelliJ IDEA 中修改代码，则项目会自动重启。</li></ul><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230428173445.png" alt="image.png|425"></p><h1 id="2-控制器"><a href="#2-控制器" class="headerlink" title="2. 控制器"></a>2. 控制器</h1><blockquote><ol><li>Spring Boot 提供了<font color="#f79646">@Controller</font> 和<font color="#c0504d">@RestController</font> 两种注解来标识此类负责<span style="background:rgba(240, 107, 5, 0.2)">接收和处理 HTTP 请求</span>。</li><li>如果请求的是<font color="#00b0f0">页面和数据</font>，使用<font color="#0070c0">@Controller </font>注解即可; 如果只是请求<font color="#ff0000">数据</font>,则可以使用<font color="#c00000">@RestController </font>注解。</li></ol></blockquote><h2 id="1-demo"><a href="#1-demo" class="headerlink" title="1.demo"></a>1.demo</h2><p>@ RestController 的用法<br>默认情况下，@RestController 注解会将返回的对象数据转换为 <strong>JSON 格式</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br><span class="hljs-meta">@RequestMapping</span> (<span class="hljs-string">&quot;/user&quot;</span>)<br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setUsername (<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>user.setPassword (<span class="hljs-string">&quot;123&quot;</span>) ;<br><span class="hljs-keyword">return</span> user;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-路由映射"><a href="#2-路由映射" class="headerlink" title="2.路由映射"></a>2.路由映射</h2><blockquote><p>@RequestMapping 注解主要负责 URL 的路由映射。它可以添加Controller类或者具体的方法上。<br>如果添加在 Controller 类上，则这个 Controller 中的所有路由映射都将会加上此映射规则，如果添加在方法上，则只对当前方法生效。<br>@RequestMapping 注解包含很多属性参数来定义 HTTP 的请求映射规则。常用的属性参数如下:<br><span style="background:#d3f8b6">- value: 请求 URL 的路径, 支持 URL 模板、正则表达式</span><br><span style="background:#d3f8b6">- method: HTTP 请求方法</span></p></blockquote><ul><li>consumes:请求的媒体类型 (Content- Type)，如 application/json</li><li>produces: 响应的媒体类型<br><span style="background:#d3f8b6">- params, headers: 请求的参数及请求头的值</span></li></ul><h3 id="1-路由规则"><a href="#1-路由规则" class="headerlink" title="1. 路由规则"></a>1. 路由规则</h3><ol><li>@RequestMapping 的 <font color="#0070c0">value </font>属性用于<font color="#0070c0">匹配 URL 映射</font>，value 支持简单表达式</li><li>@RequestMapping (“/user”)</li><li>@RequestMapping 支持使用通配符匹配 URL，用于统一映射某些 URL 规则类似的请求: @RequestMapping (“/getJson/*. json”), 当在浏览器中请求/getJson/a.json 或者/getJson/b.json 时都会匹配到后台的 Json 方法</li><li>@RequestMapping 的通配符匹配非常简单实用，支持**<span style="background:#b1ffff">“*“  “?” “**“</span>** 等通配符</li><li>符号<font color="#ffc000"> “*“ </font>匹配<font color="#ffc000">任意字符</font>，符号 <font color="#00b050">“**“</font> 匹配<font color="#00b050">任意路径</font>，符号<font color="#00b0f0"> “?” </font>匹配<font color="#0070c0">单个字符</font>。有通配符的优先级低于没有通配符的，比如/user/addjson 比/user/* .json 优先匹配。有“**” 通配符的优先级低于有”*“ 通配符的。</li></ol><h3 id="2-Method-匹配"><a href="#2-Method-匹配" class="headerlink" title="2. Method 匹配"></a>2. Method 匹配</h3><ul><li>HTTP 请求 Method 有 <span style="background:#affad1">GET、POST、 PUT、DELETE </span>等方式。HTTP 支持的全部Method</li><li>@RequestMapping 注解提供了 method 参数指定请求的 Method 类型，包括<span style="background:rgba(205, 244, 105, 0.55)">RequestMethod. GET、RequestMethod. POST、RequestMethod.DELETE、RequestMethod. PUT</span> 等值，分别对应 HTTP 请求的 Method<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span> (value = <span class="hljs-string">&quot;/getData&quot;</span> , method = RequestMethod.GET)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getData</span> <span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>Method 匹配也可以使用<span style="background:rgba(3, 135, 102, 0.2)">@GetMapping、@PostMapping </span>等注解代替。</li></ul><h3 id="3-参数传递"><a href="#3-参数传递" class="headerlink" title="3. 参数传递"></a>3. 参数传递</h3><h4 id="1-get-请求"><a href="#1-get-请求" class="headerlink" title="1. get 请求"></a>1. get 请求</h4><blockquote><p>视图函数定义 query_params 路由参数，函数体内可以直接获取该参数。</p></blockquote><p>demo：</p><p>方式 1 同参（参数可有可无都能成功响应）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;  <br><span class="hljs-comment">// get注解  </span><br><span class="hljs-meta">@RequestMapping(value = &quot;/index1&quot;,method = RequestMethod.GET)</span><br><span class="hljs-comment">// @GetMapping(&quot;/index1&quot;)  </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello1</span><span class="hljs-params">(String name)</span>&#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;欢迎您：&quot;</span>+name;  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>方式 2 不同参（参数必须携带，否则 400 错误响应）</p><blockquote><p>将参数 usrname 映射为 name，默认<font color="#0070c0"> require=true</font>（必须携带参数否则报错），设置为 false 可以<font color="#6425d0">不携带参数访问</font><br><code>public String hello2(@RequestParam(value = &quot;usrname&quot;,required = false) String name)</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/index2&quot;,method = RequestMethod.GET)</span>  <br><span class="hljs-comment">// @GetMapping(&quot;/index&quot;)  </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;usrname&quot;)</span> String name)</span>&#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;欢迎您：&quot;</span>+name;  <br>&#125;<br></code></pre></td></tr></table></figure><p>通配符匹配路由：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;test/*&quot;)</span>  <span class="hljs-comment">// 匹配同级任何路由</span><br><span class="hljs-meta">@GetMapping(&quot;test/**&quot;)</span>  <span class="hljs-comment">// 匹配任何路由（包括子级）</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;匹配同级任意路径&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Post-请求"><a href="#2-Post-请求" class="headerlink" title="2.Post 请求"></a>2.Post 请求</h4><h5 id="1-urlencode-格式数据"><a href="#1-urlencode-格式数据" class="headerlink" title="1. urlencode 格式数据"></a>1. urlencode 格式数据</h5><p>方式 1 直接传数据：</p><blockquote><p>适合参数少的情景</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(String name,String pwd)</span>&#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span>+name);  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span>+pwd);  <br><span class="hljs-keyword">return</span> name!=<span class="hljs-literal">null</span> &amp;&amp; pwd!=<span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>方式 2 对象传数据：</p><blockquote><p>适合参数多的情景，<font color="#6425d0">User 为实体类</font></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login2/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login2</span><span class="hljs-params">(User user)</span> &#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + user.getUsername());  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span> + user.getPassword());  <br>System.out.println(user);  <br><span class="hljs-keyword">return</span> user.getUsername() != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword() != <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br><span style="background:#ff4d4f">上述两种方式，发送的 data 数据必须经过 urlencode 编码，否则接收不到。</span></p></blockquote><h5 id="2-json-格式数据"><a href="#2-json-格式数据" class="headerlink" title="2. json 格式数据"></a>2. json 格式数据</h5><blockquote><p>需要给视图函数形参中添加注解<font color="#245bdb">@RequestBody</font>，且 json data 中的参数键名需要与后端中的实体类的属性并一致。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;login3/&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login3</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;  <br>System.out.println(<span class="hljs-string">&quot;name:&quot;</span> + user.getUsername());  <br>System.out.println(<span class="hljs-string">&quot;pwd:&quot;</span> + user.getPassword());  <br>System.out.println(user);  <br><span class="hljs-keyword">return</span> user.getUsername() != <span class="hljs-literal">null</span> &amp;&amp; user.getPassword() != <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;登陆成功&quot;</span> : <span class="hljs-string">&quot;登陆失败&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230428185132.png" alt="image.png|500"></p><h1 id="3-文件上传"><a href="#3-文件上传" class="headerlink" title="3. 文件上传"></a>3. 文件上传</h1><h2 id="1-静态资源访问"><a href="#1-静态资源访问" class="headerlink" title="1. 静态资源访问"></a>1. 静态资源访问</h2><ol><li>使用 IDEA 创建 Spring Boot 项目，会默认创建出 <font color="#245bdb">classpath:/static/</font>目录, 静态资源一般放在这个目录下即可。</li><li>如果默认的静态资源过滤策略不能满足开发需求，也可以自定义静态资源过滤策略。</li><li>在 <span style="background:#d3f8b6">application. properties </span>中直接定义过滤规则和静态资源位置: </li></ol><ul><li><code>spring.mvc.static-path-pattern=/static/\*\*</code> </li><li><code>spring.web.resources.static-locations=classpath:/static/</code></li></ul><ol start="4"><li>过滤规则为<font color="#00b0f0">/static/**</font>，静态资源位置为<font color="#00b0f0"> classpath:/static/</font></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#设置静态路径过滤规则  </span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">images/**  </span><br><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">classpath:/static/images/</span><br></code></pre></td></tr></table></figure><h2 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2. 文件上传"></a>2. 文件上传</h2><h3 id="1-文件上传原理"><a href="#1-文件上传原理" class="headerlink" title="1. 文件上传原理"></a>1. 文件上传原理</h3><ul><li>表单的<font color="#ffff00"> enctype 属性</font>规定在发送到服务器之前对表单数据的<font color="#ffff00">编码方式</font>。</li><li>当表单的 enctype=”<font color="#ffc000">application/x-www-form-urlencoded</font>“ (默认)时,<br>form 表单中的数据格式为: <font color="#ffc000">key=value&amp;key=value</font></li><li>当表单的 enctype=”<font color="#00b0f0">multipart/form-data</font>“时，其传输数据形式如下：<br><img src="https://s2.loli.net/2023/04/28/jh6pWVrx2yZSB43.png" alt="image.png|425"></li></ul><h3 id="2-配置文件大小"><a href="#2-配置文件大小" class="headerlink" title="2. 配置文件大小"></a>2. 配置文件大小</h3><ul><li>Spring Boot 工程嵌入的 tomcat 限制了请求的文件大小，每个文件的配置最大为 1 Mb，单次请求的文件的总数不能大于 10 Mb.</li><li>要更改这个默认值需要在配置文件 (如<font color="#00b0f0"> application.properties</font>) 中加入两个配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.servlet.multipart.max-file-size=10MB<br>spring.servlet.multipart.max-request-size=10MB<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>当表单的 enctype= “<font color="#9bbb59">multipart/form-data</font>“时, 可以使用<font color="#9bbb59"> MultipartFile </font>获取上传的文件数据，再通过 <font color="#9bbb59">transferTo </font>方法将其写入到磁盘中</p></blockquote><p>demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.controller;  <br>  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServlet;  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;  <br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;  <br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;  <br>  <br><span class="hljs-keyword">import</span> java.io.File;  <br><span class="hljs-keyword">import</span> java.io.IOException;  <br>  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUploadController</span> &#123;  <br><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(String name, MultipartFile avatar, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>System.out.println(name);  <br>System.out.println(<span class="hljs-string">&quot;filename:&quot;</span> + avatar.getOriginalFilename());  <br><span class="hljs-comment">// 获取文件类型  </span><br>System.out.println(avatar.getContentType());  <br><span class="hljs-comment">// 获取当前程序运行路径，部署时动态改变  </span><br><span class="hljs-comment">// String path = request.getServletContext().getRealPath(&quot;/upload/&quot;);  </span><br><span class="hljs-comment">// 固定为本地地址便于测试</span><br><span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\IDEAProjects\\helloworld\\src\\main\\resources\\static\\images\\&quot;</span>;  <br>System.out.println(path);  <br>saveFile(avatar, path);  <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功&quot;</span>;  <br>&#125;  <br>  <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveFile</span><span class="hljs-params">(MultipartFile avatar, String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br><span class="hljs-comment">// 获取上传文件夹  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);  <br><span class="hljs-comment">// 判断文件夹是否存在，不存在则创建  </span><br><span class="hljs-keyword">if</span> (!dir.exists()) &#123;  <br>dir.mkdir();  <br>&#125;  <br><span class="hljs-comment">// 实例化上传文件  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + avatar.getOriginalFilename());  <br>System.out.println(file.getPath());  <br><span class="hljs-comment">// 保存上传的文件  </span><br>avatar.transferTo(file);  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-拦截器"><a href="#3-拦截器" class="headerlink" title="3. 拦截器"></a>3. 拦截器</h2><p>简介：</p><blockquote><ol><li>拦截器在 Web 系统中非常常见，对于某些全局统一-的操作，我们可以把它提取到拦截器中实现。总结起来，拦截器大致有以下几种使用场景:</li><li><font color="#7030a0">权限检查:</font> 如登录检测，进入处理程序检测是否登录，如果没有，则直接返回登录页面。<br>3<font color="#7030a0">. 性能监控: </font>有时系统在某段时间莫名其妙很慢，可以通过拦截器在进入处理程序之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间</li><li><font color="#548dd4">通用行为: </font>读取 cookie 得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有提取 Locale、Theme 信息等，只要是多个处理程序都需要的，即可使用拦截器实现。</li></ol></blockquote><blockquote><p>[!NOTE] tips</p><ol><li>Spring Boot 定义了 <span style="background:#d2cbff">HandlerInterceptor 接口</span>来实现自定义拦截器的功能</li><li>HandlerInterceptor 接口定义了<span style="background:#40a9ff"> preHandle、postHandle、 afterCompletion</span> 三种方法，通过重写这三种方法实现请求前、请求后等操作<br><img src="https://s2.loli.net/2023/04/29/dvnpCAF81RxlBK5.png" alt="image.png|375"></li></ol></blockquote><h3 id="1-拦截器定义"><a href="#1-拦截器定义" class="headerlink" title="1. 拦截器定义"></a>1. 拦截器定义</h3><blockquote><p>类似于 django 的<font color="#4bacc6"> Midleware </font>中间件，控制请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">pub1ic <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*在请求处理之前进行调用(Control1er方法调用之前)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@override</span><br>pub1ic <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServ1etRequest request, HttpServ1etResponse response, object handTer)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (条件) &#123;<br>System.out.print1n(<span class="hljs-string">&quot;通过&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.print1n(<span class="hljs-string">&quot;不通过&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>返回为 true 则进入下一个拦截器，否则拒绝通过。</p></blockquote><h3 id="2-拦截器注册"><a href="#2-拦截器注册" class="headerlink" title="2. 拦截器注册"></a>2. 拦截器注册</h3><ul><li><span style="background:#affad1"> addPathPatterns </span>方法定义拦截的地址</li><li><span style="background:#b1ffff">excludePathPatterns </span>定义排除某些地址不被拦截</li><li>添加的一个拦截器没有 addPathPattern 任何一个 url 则<font color="#92d050">默认拦截所有请求</font></li><li>如果没有 excludePathPatterns 任何一个请求，则<font color="#92cddc">默认不放过任何一个请求</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;  <br><span class="hljs-comment">// 只拦截user路由下的所有路由  </span><br><span class="hljs-comment">// registry.addInterceptor(new LoginInterceptor()).addPathPatterns(&quot;/admin/**&quot;);  </span><br><span class="hljs-comment">// 拦截所有路由  </span><br>registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>());  <br>  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-RESTful"><a href="#4-RESTful" class="headerlink" title="4. RESTful"></a>4. RESTful</h1><h2 id="1-RESTful-介绍"><a href="#1-RESTful-介绍" class="headerlink" title="1.RESTful 介绍"></a>1.RESTful 介绍</h2><ol><li>HTTP 提供了<font color="#4bacc6"> POST、GET、 PUT、DELETE</font> 等操作类型对某个 Web 资源进行 <font color="#4bacc6">Create、Read、 Update 和 Delete </font>操作。</li><li>一个 HTTP 请求除了利用 URI 标志目标资源之外，还需要通过 HTTP Method 指定针对该资源的操作类型，一些常见的 HTTP 方法及其在 RESTful 风格下的使用:</li></ol><p><img src="https://s2.loli.net/2023/04/29/wokjgHNQVc4TCSW.png" alt="image.png|425"></p><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><ul><li>HTTP 状态码就是服务向用户返回的状态码和提示信息，客户端的每一次请求，服务都必须给出回应，回应包括<font color="#8064a2"> HTTP 状态码和数据</font>两部分。</li><li>HTTP 定义了 40 个标准状态码，可用于传达客户端请求的结果。状态码分为以下<br><font color="#f79646">5 个类别:</font><blockquote><p>1 xx: 信息，通信传输协议级信息<br>2 xx: 成功，表示客户端的请求已成功接受<br>3 xx: 重定向，表示客户端必须执行一些其他操作才能完成其请求<br>4 xx: 客户端错误，此类错误状态码指向客户端<br>5 xx: 服务器错误，服务器负责这写错误状态码</p></blockquote></li></ul><h2 id="2-构建-RESTful-应用接口"><a href="#2-构建-RESTful-应用接口" class="headerlink" title="2. 构建 RESTful 应用接口"></a>2. 构建 RESTful 应用接口</h2><p>Spring Boot 提供的<span style="background:rgba(240, 107, 5, 0.2)"> spring-boot-starter-web </span>组件完全支持开发 RESTful API, 提供了与 REST 操作方式 (GET、POST、 PUT、DELETE) 对应的注解。</p><ol><li><code>@GetMapping:</code> 处理 GET 请求，获取资源。</li><li><code>@PostMapping:</code> 处理 POST 请求，新增资源。</li><li><code>@PutMapping:</code> 处理 PUT 请求，更新资源。</li><li><code>@DeleteMapping:</code> 处理 DELETE 请求，删除资源。</li><li><code>@PatchMapping:</code> 处理 PATCH 请求，用于部分更新资源。</li></ol><blockquote><p>类似于 django 的视图装饰器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> cLass UserController &#123;<br><span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserById</span> <span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;根据ID获取用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@PostMapping(&quot;/user&quot; )</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;添加用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@PutMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;更新用户&quot;</span>;<br>&#125;<br><span class="hljs-meta">@DeleteMapping(&quot;/user/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; 根据ID删除用户&quot;</span>;<br><span class="hljs-number">1</span>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-Swagger-生成-API-接口文档"><a href="#3-Swagger-生成-API-接口文档" class="headerlink" title="3. Swagger 生成 API 接口文档"></a>3. Swagger 生成 API 接口文档</h2><blockquote><ol><li>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务，是非常流行的 API 表达工具。</li><li>Swagger 能够自动生成完善的 RESTful API 文档，同时并根据后台代码的修改同步更新，同时提供完整的测试页面来调试 APl。</li></ol></blockquote><p><font color="#f79646">pom. xml 依赖配置:</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- swagger依赖--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.config;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;  <br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;  <br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;  <br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;  <br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;  <br>  <br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//告诉Spring容器， 这个类是一个配置类  </span><br><span class="hljs-meta">@EnableSwagger2</span> <span class="hljs-comment">//启用Swagger2功能  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;  <br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)  <br>.apiInfo(apiInfo())  <br>.select()  <br><span class="hljs-comment">// com 包下所有API都交给Swagger2管理  </span><br>.apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com&quot;</span>))  <br>.paths(PathSelectors.any()).build();  <br>&#125;  <br>  <br><span class="hljs-comment">// API文档页面显示信息  </span><br><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()  <br>.title(<span class="hljs-string">&quot;演示项目API&quot;</span>) <span class="hljs-comment">//标题  </span><br>.description(<span class="hljs-string">&quot;学习Swagger2的演示项目&quot;</span>) <span class="hljs-comment">//描述  </span><br>.version(<span class="hljs-string">&quot;1.0&quot;</span>)  <br>.build();  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>spring 3 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring3版本的swagger依赖--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.helloworld.config;  <br>  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br>  <br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.OpenAPI;  <br><span class="hljs-keyword">import</span> io.swagger.v3.oas.models.info.Info;  <br>  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OpenApiConfig</span> &#123;  <br>  <br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">springOpenAPI</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>().info(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>() <span class="hljs-comment">//  </span><br>.title(<span class="hljs-string">&quot;SpringDoc API Test&quot;</span>) <span class="hljs-comment">//  </span><br>.description(<span class="hljs-string">&quot;SpringDoc Simple Application Test&quot;</span>) <span class="hljs-comment">//  </span><br>.version(<span class="hljs-string">&quot;0.0.1&quot;</span>));  <br>&#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-注解"><a href="#1-注解" class="headerlink" title="1.注解"></a>1.注解</h3><p>swagger 常用注解如下图所示：</p><p><img src="https://s2.loli.net/2023/05/02/sgfWcYZxHa2rJKm.png" alt="image.png|375"></p><p>从 Springfox 迁移过来的，需要修改注解：</p><p><span style="background:rgba(3, 135, 102, 0.2)">&gt; 1. @Api → @Tag</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 2. @ApiIgnore → @Parameter (hidden = true) or @Operation (hidden = true) or @Hidden</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 3. @ApiImplicitParam → @Parameter</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 4. @ApiImplicitParams → @Parameters</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 5. @ApiModel → @Schema</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 6. @ApiModelProperty (hidden = true) → @Schema (accessMode = READ_ONLY)</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 7. @ApiModelProperty → @Schema</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 8. @ApiOperation (value = “foo”, notes = “bar”) → @Operation (summary = “foo”, description = “bar”)</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 9. @ApiParam → @Parameter</span><br><span style="background:rgba(3, 135, 102, 0.2)">&gt; 10. @ApiResponse (code = 404, message = “foo”) → @ApiResponse (responseCode = “404”, description = “foo”)</span></p><h3 id="2-访问-swagger"><a href="#2-访问-swagger" class="headerlink" title="2.访问 swagger"></a>2.访问 swagger</h3><ol><li>swagger 2： <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></li><li>swagger 3: <ul><li><a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a></li><li><a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></li></ul></li></ol><h1 id="5-MybatisPlus"><a href="#5-MybatisPlus" class="headerlink" title="5. MybatisPlus"></a>5. MybatisPlus</h1><h2 id="1-ORM-介绍"><a href="#1-ORM-介绍" class="headerlink" title="1.ORM 介绍"></a>1.ORM 介绍</h2><ul><li><p>ORM，（Object Relational Mapping，对象关系映射）是为了解决面向对象与关系数据库存在的互不匹配现象的一种技术。</p></li><li><p>ORM 通过使用描述对象和数据库之间映射的元数据将程序中的对象自动持久化到关系数据库中。</p></li><li><p>ORM 框架的本质是简化编程中操作数据库的编码。</p></li></ul><p><img src="https://s2.loli.net/2023/05/29/PcG5L8ZYouWhyp6.png" alt="image.png|350"></p><h2 id="2-MyBatis-Plus-介绍"><a href="#2-MyBatis-Plus-介绍" class="headerlink" title="2.MyBatis-Plus 介绍"></a>2.MyBatis-Plus 介绍</h2><ul><li>MyBatis 是一款优秀的数据持久层 ORM 框架，被广泛地应用于应用系统。</li><li>MyBatis 能够非常灵活地实现动态 SQL，可以使用 XML 或注解来配置和映射原生信息，能够轻松地将 Java 的 POJO（PlainOrdinaryJavaObject，普通的Java 对象）与数据库中的表和字段进行映射关联。</li><li>MyBatis-Plus 是一个 MyBatis 的增强工具，在 MyBatis 的基础上做了增强，简化了开发。</li></ul><p><font color="#8db3e2">添加依赖：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;! MyBatisPlus依赖<br>&lt;dependency&gt;<br>   &lt;groupId&gt;com.baomidou&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!--mysql驱动依赖<br>&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.47</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!-- 数据连接池druid<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.20</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><font color="#f79646">全局配置：</font></p><ul><li>配置数据库相关信息（application.properties）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">spring.datasource.type=com.alibaba.druid.pool.DruidDatasource<br>spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver<br>spring.datasource.ur1=jdbc:mysql:<span class="hljs-comment">//1ocalhost:3306/mydb?usessL=false</span><br>spring.datasource.username=root<br>spring.datasource.password=<span class="hljs-number">123456</span><br>mybatis-plus.configuration.1og-impl=org.apache.ibatis.logging.stdout.stdoutImp1<br><br></code></pre></td></tr></table></figure><ul><li>添加@MapperScan 注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@springBootApplication</span><br><span class="hljs-meta">@Mapperscan(&quot;com.xx.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusDemoApplication</span> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(string[] args)</span>&#123;<br>       SpringApplication.run(MybatisplusDemoApplication.class,args);<br><br></code></pre></td></tr></table></figure><p>Mybitis CRUD 注解：<br>注解功能<br><font color="#00b0f0">@Insert     实现插入</font><br><font color="#00b0f0">@Update   实现更新</font><br><font color="#00b0f0">@Delete    实现删除</font><br><font color="#00b0f0">@Select    实现查询</font><br><font color="#00b0f0">@Result    实现结果集封装</font><br><font color="#00b0f0">@Results  可以与@Result 一起使用，封装多个结果集</font><br><font color="#00b0f0">@One       实现一对一结果集封装</font><br><font color="#00b0f0">@Many     实现一对多结果集封装</font></p><h2 id="3-MyBatis-Plus-CRUD-操作"><a href="#3-MyBatis-Plus-CRUD-操作" class="headerlink" title="3.MyBatis-Plus CRUD 操作"></a>3.MyBatis-Plus CRUD 操作</h2><p><font color="#ffc000">mybatis 的 Mapper 操作方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>   <span class="hljs-meta">@Insert(&quot;insert into user values(#&#123;id),#(username&#125;,#(password),#(birthday)&quot;)//id,username等属性为user对象的属性</span><br><span class="hljs-meta">    int add(User user);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @update(&quot;update user set username=#(username&#125;,password=#(password),birthday=#(birthday&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-meta">    int update(User user);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @Delete(&quot;delete from user where id=#(id&quot;)</span><br><span class="hljs-meta">    int delete(int id);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @select(&quot;select * from user where id=#(id&quot;)</span><br><span class="hljs-meta">   User findByid(int id);</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">   @select(&quot;select * from user&quot;)</span><br><span class="hljs-meta">   List&lt;User&gt; getA11();</span><br></code></pre></td></tr></table></figure><p><font color="#ff0000">mybatis-plus 的操作方法</font></p><blockquote><p>BaseMapper 泛型类里已经实现了基本的增删改查任务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意<br>Mybatis-plus 有一些对 entity 里的实体类的<strong>注解</strong>，标识对应的表名、主键和字段名等，如果不进行注解则实体类的类名必须与数据表名一致，属性必须与数据表的字段名一致。<br><a href="https://baomidou.com/pages/24112f/#%E7%89%B9%E6%80%A7">注解细节</a></p></blockquote><h2 id="4-多表查询"><a href="#4-多表查询" class="headerlink" title="4. 多表查询"></a>4. 多表查询</h2><blockquote><p>实现复杂关系映射，可以使用@Results 注解，@Result 注解，@One 注解，<br>@Many 注解组合完成复杂关系的配置。</p></blockquote><p><img src="https://s2.loli.net/2023/06/01/Z6TuNLREyqGFazH.png" alt="注解说明|325"></p><p>示例：<br><strong>任务表</strong></p><p>entity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.entity;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;  <br>  <br><span class="hljs-keyword">import</span> java.sql.Date;  <br><span class="hljs-keyword">import</span> java.time.LocalDateTime;  <br>  <br><span class="hljs-meta">@TableName(value = &quot;u_task&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;  <br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> uid;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> String content;  <br>    <span class="hljs-meta">@TableField(value = &quot;b_date&quot;)</span>  <br>    <span class="hljs-keyword">private</span> LocalDateTime b_date;  <br>    <span class="hljs-meta">@TableField(value = &quot;e_date&quot;)</span>  <br>    <span class="hljs-keyword">private</span> LocalDateTime e_date;  <br>    <span class="hljs-meta">@TableField(exist = false)</span>  <br>    <span class="hljs-keyword">private</span> User user;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TaskMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Task&gt; &#123;  <br>    <span class="hljs-meta">@Select(&quot;select * from task where uid = #&#123;uid&#125;&quot;)</span>  <br>    List&lt;Task&gt; <span class="hljs-title function_">selectByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> uid)</span>;  <br><br><span class="hljs-meta">@Select(&quot;select * from task&quot;)</span>  <br><span class="hljs-meta">@Results(  </span><br><span class="hljs-meta">        &#123;  </span><br><span class="hljs-meta">                @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;name&quot;, property = &quot;name&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;content&quot;, property = &quot;content&quot;),  </span><br><span class="hljs-meta">                @Result(column = &quot;b_date&quot;, property = &quot;b_date&quot;, javaType = LocalDateTime.class, jdbcType = JdbcType.TIMESTAMP),  </span><br><span class="hljs-meta">                @Result(column = &quot;e_date&quot;, property = &quot;e_date&quot;, javaType = LocalDateTime.class, jdbcType = JdbcType.TIMESTAMP),  </span><br><span class="hljs-meta">                @Result(column = &quot;uid&quot;, property = &quot;user&quot;, javaType = User.class,  </span><br><span class="hljs-meta">                        one = @One(select = &quot;com.alleyf.airesume.mapper.UserMapper.selectById&quot;)),  </span><br><span class="hljs-meta">        &#125;  </span><br><span class="hljs-meta">)</span>  <br>List&lt;Task&gt; <span class="hljs-title function_">queryAllTaskAndUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用户表</strong></p><p>entity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.entity;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@TableName(value = &quot;user&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;  <br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;  <br>    <span class="hljs-keyword">private</span> String username;  <br>    <span class="hljs-keyword">private</span> String password;  <br>    <span class="hljs-meta">@TableField(exist = false)</span>  <br>    <span class="hljs-keyword">private</span> List&lt;Task&gt; tasks;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>  <br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>  <br>    <span class="hljs-meta">@Results(  </span><br><span class="hljs-meta">            &#123;  </span><br><span class="hljs-meta">                    @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;username&quot;, property = &quot;username&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;password&quot;, property = &quot;password&quot;),  </span><br><span class="hljs-meta">                    @Result(column = &quot;id&quot;, property = &quot;tasks&quot;, javaType = List.class,  </span><br><span class="hljs-meta">                            many = @Many(select = &quot;com.alleyf.airesume.mapper.TaskMapper.selectByUid&quot;)),  </span><br><span class="hljs-meta">            &#125;  </span><br><span class="hljs-meta">    )</span>  <br>    List&lt;User&gt; <span class="hljs-title function_">queryAllUserAndTasks</span><span class="hljs-params">()</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 注意<br>查询用户的同时查出与用户相关联的所有任务<br>Result 中的 column 的字段为查询到的数据库字段值，用来赋值给后面类对象的属性 property，对应的属性与字段相同，含有不存在的属性则使用外键间接查询。</p></blockquote><h2 id="5-条件查询"><a href="#5-条件查询" class="headerlink" title="5. 条件查询"></a>5. 条件查询</h2><p><span style="background:#affad1">Mybatis 实现：</span></p><blockquote><p>在 mapper 的接口中写 sql 语句进行条件查询。</p></blockquote><p>示例：<br>mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * 按照任务名查询用户 * * <span class="hljs-doctag">@param</span> username 用户名  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 所有用户列表  </span><br><span class="hljs-comment"> */</span><span class="hljs-meta">@Select(&quot;select * from user where username = #&#123;username&#125;&quot;)</span>  <br><span class="hljs-meta">@Results(&#123;  </span><br><span class="hljs-meta">        @Result(column = &quot;id&quot;, property = &quot;id&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;username&quot;, property = &quot;username&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;password&quot;, property = &quot;password&quot;),  </span><br><span class="hljs-meta">        @Result(column = &quot;id&quot;, property = &quot;tasks&quot;, javaType = List.class,  </span><br><span class="hljs-meta">                many = @Many(select = &quot;com.alleyf.airesume.mapper.TaskMapper.selectByUid&quot;)),  </span><br><span class="hljs-meta">&#125;)</span>  <br>User <span class="hljs-title function_">selectByName</span><span class="hljs-params">(String username)</span>;<br><br></code></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.selectByName(username);  <br>    &#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:rgba(136, 49, 204, 0.2)">Mybatis-Plus 实现：</span></p><blockquote><ul><li>使用 <strong>QueryWrapper</strong> （条件查询）和 <strong>UpdateWrapper</strong>（条件更新） 两个条件查询类进行条件查询。</li><li>可选条件有：eq（等于），lt（大于），st（小于），le（大于等于），se（小于等于）等</li></ul></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户(MP)&quot;)</span>  <br><span class="hljs-meta">@GetMapping(&quot;/queryByMPName&quot;)</span>  <br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMPName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br>    <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-分页查询"><a href="#6-分页查询" class="headerlink" title="6. 分页查询"></a>6. 分页查询</h2><p>编写配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.config;  <br>  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;  <br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;  <br>  <br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaginationConfig</span> &#123;  <br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();  <br>        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">paginationInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);  <br>        interceptor.addInnerInterceptor(paginationInterceptor);  <br>        <span class="hljs-keyword">return</span> interceptor;  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查询所有用户：1oca1host：8080/findA11</span><br><span class="hljs-meta">@GetMapping(&quot;findAll&quot;)</span><br><span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">findAl1</span><span class="hljs-params">()</span>t<br>   <span class="hljs-comment">//设置起始值及每页条数</span><br>   Page&lt;User&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>   <span class="hljs-keyword">return</span> userMapper.selectPage(page,nul1);<br><br><span class="hljs-meta">@ApiOperation(&quot;按照页码查询用户(MP)&quot;)</span>  <br><span class="hljs-meta">@GetMapping(&quot;/queryByPage/&#123;page&#125;&quot;)</span>  <br><span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;  <br>    Page&lt;User&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>);  <br>    <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> userMapper.selectPage(page1, <span class="hljs-literal">null</span>);  <br>    <span class="hljs-keyword">return</span> iPage;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="6-Vue-框架快速上手"><a href="#6-Vue-框架快速上手" class="headerlink" title="6.Vue 框架快速上手"></a>6.Vue 框架快速上手</h1><p>[[Vue]]</p><h2 id="1-前端环境准备"><a href="#1-前端环境准备" class="headerlink" title="1. 前端环境准备"></a>1. 前端环境准备</h2><p>Vscode 或者WebStorm</p><h2 id="2-Vue-框架介绍"><a href="#2-Vue-框架介绍" class="headerlink" title="2.Vue 框架介绍"></a>2.Vue 框架介绍</h2><p>尤雨溪制作的渐进式 js 框架</p><h2 id="3-Vue-快速入门"><a href="#3-Vue-快速入门" class="headerlink" title="3.Vue 快速入门"></a>3.Vue 快速入门</h2><ul><li>导入 vue. js 的 script 脚本文件</li></ul><p> <code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></p><ul><li>在页面中声明一个将要被 vue 所控制的 DOM 区域，既 MVVM 中的 View</li></ul><pre><code class="hljs">`&lt;div id=&quot;app&quot;&gt;  &#123;&#123; message &#125;&#125;&lt;/div&gt;`</code></pre><ul><li>创建 vm 实例对象 (vue 实例对象)</li></ul><p><code>const hello = &#123;    //指定数据源，既 MVVM 中的 Mode1    data: function () &#123;       return &#123;          message: &#39;Hello Vue!&#39;       &#125; &#125; const app = Vue.createApp (hello) app. mount（&#39; #app &#39;）/／指定当前 vue 实例要控制页面的哪个区域</code></p><h1 id="7-项目部署"><a href="#7-项目部署" class="headerlink" title="7. 项目部署"></a>7. 项目部署</h1><h2 id="1-云端环境准备"><a href="#1-云端环境准备" class="headerlink" title="1. 云端环境准备"></a>1. 云端环境准备</h2><h3 id="安装-Mysql"><a href="#安装-Mysql" class="headerlink" title="安装 Mysql"></a>安装 Mysql</h3><table><thead><tr><th>环境</th><th>准备</th><th align="center"></th><th></th></tr></thead><tbody><tr><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021153950.png"/></td><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021200042.png"/></td><td align="center"></td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021206531.png" alt="image.png"></td><td></td><td align="center"></td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021214865.png" alt="image.png"></td><td></td><td align="center"></td><td></td></tr></tbody></table><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release<br>yum update<br>yum -y install nginx<br></code></pre></td></tr></table></figure><p>nginx 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx #开启nginx服务<br>systemctl stop nginx #停止nginx服务<br>systemctl restart nginx #重启nginx服务<br></code></pre></td></tr></table></figure><h3 id="配置-JDK"><a href="#配置-JDK" class="headerlink" title="配置 JDK"></a>配置 JDK</h3><p>下载 JDK，登录官方 <a href="https://www.oracle.com/java/technologies/downloads/java8%E4%B8%8B%E8%BD%BD%E6%89%80%E9%9C%80%E7%89%88%E6%9C%AC%E7%9A%84JDK">https://www.oracle.com/java/technologies/downloads/java8下载所需版本的JDK</a> ，版本为 JDK1.8</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021240929.png" alt="image.png"><br>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zvxf jdk-8u131-linux-x64.tar.gz<br></code></pre></td></tr></table></figure><p>编辑/etc/profile 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/profile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">文件末尾增加</span><br>export JAVA_HOME=/usr/server/jdk1.8.0_131<br></code></pre></td></tr></table></figure><p>执行 source 命令，使配置立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /etc/profile<br></code></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="部署-Vue-项目"><a href="#部署-Vue-项目" class="headerlink" title="部署 Vue 项目"></a>部署 Vue 项目</h3><h4 id="打包-vue-项目"><a href="#打包-vue-项目" class="headerlink" title="打包 vue 项目"></a>打包 vue 项目</h4><p>进入到 Vue 项目目录，执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run build<br></code></pre></td></tr></table></figure><p>将生成的 dist 目录上传至服务器/usr/vue/dist</p><h4 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h4><p>进入到/etc/nginx/conf.d 目录，创建 vue.conf 文件，内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>   listen  80;<br>   server_name locahost;<br><br>   1ocation / &#123;<br>       root /usr/app/dist;<br>       index index.html;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="打包-Java-程序"><a href="#打包-Java-程序" class="headerlink" title="打包 Java 程序"></a>打包 Java 程序</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202308021501320.png" alt="image.png"><br>因为 springboot 有内置 tomcat 容器，这点比较方便，省去了 tomcat 的部署。我们到时候直接可以直接把 jar 包扔到 linux 上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup java -jar demo-0.0.1-SNAPSHOT.jar &gt; logName.1og 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.bilibili.com/video/BV1nV4y1s7ZN/">1天搞定SpringBoot+Vue全栈开发_哔哩哔哩_bilibili</a></li><li><a href="https://blog.csdn.net/javaDeveloper2010/article/details/129119489">Springdoc和Springfox</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DRF速通</title>
    <link href="/2023/04/fbae7fa42803.html"/>
    <url>/2023/04/fbae7fa42803.html</url>
    
    <content type="html"><![CDATA[<blockquote><p> 其他相关文章-&gt; [[网页开发]]， #DRF #Django</p></blockquote><h1 id="1-api-接口"><a href="#1-api-接口" class="headerlink" title="1. api 接口"></a>1. api 接口</h1><p>目前市面上大部分公司开发人员使用的接口实现规范主要有：restful、RPC。<br>RPC（ Remote Procedure Call ）: 翻译成中文:远程过程调用[远程服务调用]. 从字面上理解就是访问/调用远程服务端提供的api接口。这种接口一般以服务或者过程式代码提供。<br>restful: 翻译成中文: 资源状态转换.(表征性状态转移)</p><ul><li>把服务端提供的所有的数据/文件都看成资源， 那么通过api接口请求数据的操作，本质上来说就是对资源的操作了.  因此，restful中要求，我们把当前接口对外提供哪种资源进行操作，就把<strong>资源的名称写在url地址</strong>。</li><li>  web开发中操作资源，最常见的最通用的无非就是增删查改，所以restful要求在地址栏中声明要操作的资源是什么。然后通过<strong>http请求动词</strong>来说明对该资源进行哪一种操作.</li></ul><blockquote><p>POST <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> 添加学生数据</p><p>GET <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> 获取所有学生</p><p>GET <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 获取id=pk的学生</p><p>DELETE <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 删除id=pk的一个学生</p><p>PUT <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a>/ 修改一个学生的全部信息 [id,name,sex,age,]</p><p>PATCH <a href="http://www.xxx.com/api/students/">http://www.xxx.com/api/students/</a> / 修改一个学生的部分信息[age]</p></blockquote><p>请求方式：<em><strong>增删改查查</strong></em></p><ol><li>restful 是以资源为主的 api 接口规范，体现在地址上就是资源就是以名词表达。</li><li>rpc 则以动作为主的 api 接口规范，体现在接口名称上往往附带操作数据的动作。</li></ol><hr><h1 id="2-Django-的-CBV"><a href="#2-Django-的-CBV" class="headerlink" title="2.Django 的 CBV"></a>2.Django 的 CBV</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># CBV模式,views.py</span><br><span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> View<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">View</span>) ;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, reguest</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View GET请求...&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, reguest</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View POST请求...&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;View DELETE请求&#x27;&#x27;&#x27;&quot;</span>)<br><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django. contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> book <span class="hljs-keyword">import</span> views<br>urlpatterns = [<br>path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin. site.urls) ,<br><span class="hljs-comment"># path( &#x27;book/&#x27;, views.book) ,</span><br>path(<span class="hljs-string">&quot;book/&quot;</span>.views . BookView.asTview()) <span class="hljs-comment">#路由中的“/”不能丢，否则自动重定向为get请求</span><br>]<br></code></pre></td></tr></table></figure><hr><h1 id="3-反射"><a href="#3-反射" class="headerlink" title="3. 反射"></a>3. 反射</h1><p>通过反射 <code>func = getattr(self,func_name_str)</code> 可以将<strong>字符串转变为变量 (函数)<strong>，接着就可以直接调用 func () 从而</strong>动态调用函数</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age,func_str</span>):<br>self.name = name<br>self.age = age<br>func = <span class="hljs-built_in">getattr</span>(self,func_str)<br>func() <span class="hljs-comment"># 等价于self.slepp() </span><br>a = Animal(<span class="hljs-string">&quot;alleyf&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;sleep&quot;</span>)<br></code></pre></td></tr></table></figure><hr><h1 id="4-Drf"><a href="#4-Drf" class="headerlink" title="4. Drf"></a>4. Drf</h1><blockquote><p>安装 drf：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install djangorestframework<br></code></pre></td></tr></table></figure><blockquote><p>注册 drf app：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>... ,<br><span class="hljs-string">&#x27;rest_framework&#x27;</span>, <br>]<br></code></pre></td></tr></table></figure><hr><h2 id="1-APIView"><a href="#1-APIView" class="headerlink" title="1. APIView"></a>1. APIView</h2><ol><li>重写了 View 的 as_view ()和 dispatch（）方法，构建了新的 request 对象实现<strong>认证、权限和限流</strong>作用。</li><li><code>request. Get ()-&gt;request. Query_params ()</code>获取 get 请求参数</li><li><code>request. Post ()-&gt;request. Data ()</code> 获取 post(put 等)请求体数据，包括 files 都封装在一起反序列化了，支持前端 urlcoded 格式和 json 等其他任何格式。</li></ol><p>路由执行过程：<br><span style="background:#b1ffff">as_view ()-&gt;view ()-&gt;dispatch ()-&gt;get/post· · ·</span></p><hr><h2 id="2-Serializer-（反）序列化器"><a href="#2-Serializer-（反）序列化器" class="headerlink" title="2.Serializer （反）序列化器"></a>2.Serializer （反）序列化器</h2><p><img src="https://s2.loli.net/2023/04/26/VukBIX39lj2Kbx6.png" alt="（反）序列化器|425"></p><blockquote><p>[!NOTE] keys</p><ul><li>序列化：数据表数据-&gt;前端显示的 json 数据 （get 请求，<strong>取数据</strong>）</li><li>反序列化：前端提交的 json 数据-&gt;数据表数据（post、put、patch、delete 等请求，<strong>存数据</strong>）</li></ul></blockquote><h3 id="1-序列化与反序列化"><a href="#1-序列化与反序列化" class="headerlink" title="1.序列化与反序列化"></a>1.序列化与反序列化</h3><p><strong>常用字段类型</strong>：<br>| 字段                    | 构造方式                                                                             |<br>| ———————– | ———————————————————————————— |<br>| <strong>BooleanField</strong>        | BooleanField()                                                                       |<br>| <strong>CharField</strong>           | CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True) |<br>| <strong>EmailField</strong>          | EmailField(max_length=None, min_length=None, allow_blank=False)                      |<br>| <strong>URLField</strong>            | URLField(max_length=200, min_length=None, allow_blank=False)                         |<br>| <strong>IPAddressField</strong>      | IPAddressField(protocol=‘both’, unpack_ipv4=False, options)                          |<br>| <strong>IntegerField</strong>        | IntegerField(max_value=None, min_value=None)                                         |<br>| <strong>FloatField</strong>          | FloatField(max_value=None, min_value=None)                                           |<br>| <strong>DateTimeField</strong>       | DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)               |<br>| <strong>DateField</strong>           | DateField(format=api_settings.DATE_FORMAT, input_formats=None)                       |<br>| <strong>TimeField</strong>           | TimeField(format=api_settings.TIME_FORMAT, input_formats=None)                       |<br>| <strong>ChoiceField</strong>         | ChoiceField(choices) choices 与 Django 的用法相同                                    |<br>| <strong>MultipleChoiceField</strong> | MultipleChoiceField(choices)                                                         |<br>| <strong>FileField</strong>           | FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)   |<br>| <strong>ImageField</strong>          | ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)  |<br>| <strong>ListField</strong>           | ListField(child=, min_length=None, max_length=None)                                  |<br>| <strong>DictField</strong>           | DictField(child=)                                                                    |<br><strong>选项参数：</strong><br>| 参数名称            | 作用             |<br>| ——————- | —————- |<br>| <strong>max_length</strong>      | 最大长度         |<br>| <strong>min_lenght</strong>      | 最小长度         |<br>| <strong>allow_blank</strong>     | 是否允许为空     |<br>| <strong>trim_whitespace</strong> | 是否截断空白字符 |<br>| <strong>max_value</strong>       | 最小值           |<br>| <strong>min_value</strong>       |     最大值             |<br><strong>通用参数：</strong><br>| 参数名称           | 说明                                      |<br>| —————— | —————————————– |<br>| <strong>read_only</strong>      | 表明该字段仅用于序列化输出，默认False     |<br>| <strong>write_only</strong>     | 表明该字段仅用于反序列化输入，默认False   |<br>| <strong>required</strong>       | 表明该字段在反序列化时必须输入，默认True  |<br>| <strong>default</strong>        | 反序列化时使用的默认值                    |<br>| <strong>allow_null</strong>     | 表明该字段是否允许传入 None，默认 False   |<br>| <strong>validators</strong>     | 该字段使用的验证器                        |<br>| <strong>error_messages</strong> | 包含错误编号与错误信息的字典              |<br>| <strong>label</strong>          | 用于 HTML 展示 API 页面时，显示的字段名称 |<br>| <strong>help_text</strong>      |  用于HTML展示API页面时，显示的字段帮助提示信息                                         |</p><ol><li>新建模型（反）序列化器</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookSerializers</span>(serializers.Serializer):<br><span class="hljs-string">&quot;&quot;&quot;Book的(反)序列化器&quot;&quot;&quot;</span><br>title = serializers.CharField (max_length=<span class="hljs-number">3</span>)<br>price = serializers.IntegerField(require=<span class="hljs-literal">True</span>)<br>date = serializers.DateField(source=<span class="hljs-string">&quot;pub_date&quot;</span>)<br><span class="hljs-comment"># 该方法必须被重写否则无法使用serializer.save()新建数据,实现view与serializer解耦</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self,validated_data</span>):<br>new_book = Book.objects.create(**serializer.validated_data)<br><span class="hljs-keyword">return</span> new_book<br><span class="hljs-comment"># 该方法必须被重写否则无法使用serializer.save()更新数据，实现view与serializer解耦</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self,validated_data</span>):<br><span class="hljs-comment"># 修改数据</span><br>Book.objects.<span class="hljs-built_in">filter</span>(pk=instance.pk).update(**serializer.validated_data)<br><span class="hljs-comment"># 设置序列化器的实例为更新后的对象</span><br>updated_book = Book.objects.get(pk=instance.pk)<br><span class="hljs-keyword">return</span> updated_book<br></code></pre></td></tr></table></figure><blockquote><ol><li>（反）序列化器的字段名与数据表的字段名必须一致，否则需要指定 <code>source</code> 指向某个字段</li><li>字段规则要根据数据表的规则设置</li></ol></blockquote><ol start="2"><li>新建模型视图类</li></ol><blockquote><ul><li><strong>根据需求重写 get、post、put、delete 等方法</strong></li><li>除了 <strong>delete 返回 none</strong> 外，其他方法都要返回改变的<strong>序列化为 json 后的数据</strong></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> viewsets<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&quot;&quot;&quot;序列化&quot;&quot;&quot;</span><br><span class="hljs-comment"># query_params = request.query_params() 获取get的url请求参数 </span><br>queryset = Book.objects.<span class="hljs-built_in">all</span>() <span class="hljs-comment"># 当查询过滤得到一个对象时，many=False</span><br><span class="hljs-comment"># 构建序列化对象</span><br>serializer = BookSerializer(instance=queryset,many=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> Response(serilaizer.data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&quot;&quot;&quot;反序列化&quot;&quot;&quot;</span><br><span class="hljs-comment"># 构建反序列化对象 </span><br>serializer = BookSerializer(data=request.data)<br><span class="hljs-comment"># 数据校验</span><br><span class="hljs-keyword">if</span> serializer.is_valid():<br><span class="hljs-comment"># 校验通过创建新数据，返回新建的json数据 </span><br>serializer.save()<br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 校验失败，返回错误 </span><br><span class="hljs-keyword">return</span> Response(serializer.errors) <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDetailView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">从数据库获取指定id的数据</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>singleBook = Book.objects.get(pk=<span class="hljs-built_in">id</span>)<br><span class="hljs-comment"># 构建序列化器转为json数据</span><br>serializer = Serializer(instance=singleBook,many=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br><span class="hljs-string">&quot;&quot;&quot;修改指定id的数据&quot;&quot;&quot;</span><br>update_bookobj = Book.objects.get(pk=<span class="hljs-built_in">id</span>)<br><span class="hljs-comment"># 构建反序列化器</span><br>serializer = Serializer(instance=update_bookobj,data=request.data)<br><span class="hljs-comment"># 数据校验</span><br><span class="hljs-keyword">if</span> serializer.is_valid():<br>serializer.save()<br><span class="hljs-comment"># 序列化修改后的对象并返回</span><br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-comment"># 校验失败，返回错误 </span><br><span class="hljs-keyword">return</span> Response(serializer.errors) <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br>Book.objects.get(pk=<span class="hljs-built_in">id</span>).delete()<br><span class="hljs-comment"># 直接返回空</span><br><span class="hljs-keyword">return</span> Response()<br></code></pre></td></tr></table></figure><ol start="3"><li>路由配置（urls.py）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path,re_path ,include<br><span class="hljs-keyword">from</span> views <span class="hljs-keyword">import</span> Bookview , BookDetailview<br>urlpatterns = [<br>path(<span class="hljs-string">&#x27;books/&#x27;</span>,Bookview.as_view()),<br>re_path(<span class="hljs-string">&#x27;books/(?P&lt;pk&gt;\d+)/&#x27;</span>,BookDetailview.as_view()),<br>]<br></code></pre></td></tr></table></figure><h3 id="2-Response"><a href="#2-Response" class="headerlink" title="2. Response"></a>2. Response</h3><blockquote><p>drf 重写后的 response<br><code>Response(data, status=None, template_name=None, headers=None, content_type=None)</code></p></blockquote><blockquote><p>[!NOTE] 常用参数概念</p><ol><li><code>data</code> ：python 的基本数据类型或者序列化后的数据</li><li><code>status</code>：返回状态码，eg：200，403 etc</li><li><code>template_name</code>: 模板名称，如果使用 <code>HTMLRenderer</code> 时需指明；</li><li> <code>headers</code>: 用于存放响应头信息的字典；</li><li> <code>content_type</code>: 响应数据的 Content-Type，通常此参数无需传递，REST framework 会根据前端所需类型数据来设置该参数</li></ol></blockquote><h3 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3. 状态码"></a>3. 状态码</h3><blockquote><p>为了方便设置状态码，REST framewrok在<code>rest_framework.status</code>模块中提供了常用http状态码的常量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1）信息告知 - 1xx </span><br>HTTP_100_CONTINUE <br>HTTP_101_SWITCHING_PROTOCOLS <br><span class="hljs-comment"># 2）成功 - 2xx </span><br>HTTP_200_OK <br>HTTP_201_CREATED <br>HTTP_202_ACCEPTED <br>HTTP_203_NON_AUTHORITATIVE_INFORMATION HTTP_204_NO_CONTENT <br>HTTP_205_RESET_CONTENT <br>HTTP_206_PARTIAL_CONTENT <br>HTTP_207_MULTI_STATUS <br><span class="hljs-comment"># 3）重定向 - 3xx </span><br>HTTP_300_MULTIPLE_CHOICES <br>HTTP_301_MOVED_PERMANENTLY <br>HTTP_302_FOUND <br>HTTP_303_SEE_OTHER <br>HTTP_304_NOT_MODIFIED <br>HTTP_305_USE_PROXY <br>HTTP_306_RESERVED <br>HTTP_307_TEMPORARY_REDIRECT <br><span class="hljs-comment"># 4）客户端错误 - 4xx </span><br>HTTP_400_BAD_REQUEST <br>HTTP_401_UNAUTHORIZED <br>HTTP_402_PAYMENT_REQUIRED <br>HTTP_403_FORBIDDEN <br>HTTP_404_NOT_FOUND <br>HTTP_405_METHOD_NOT_ALLOWED <br>HTTP_406_NOT_ACCEPTABLE HTTP_407_PROXY_AUTHENTICATION_REQUIRED HTTP_408_REQUEST_TIMEOUT <br>HTTP_409_CONFLICT <br>HTTP_410_GONE <br>HTTP_411_LENGTH_REQUIRED <br>HTTP_412_PRECONDITION_FAILED HTTP_413_REQUEST_ENTITY_TOO_LARGE HTTP_414_REQUEST_URI_TOO_LONG HTTP_415_UNSUPPORTED_MEDIA_TYPE HTTP_416_REQUESTED_RANGE_NOT_SATISFIABLE HTTP_417_EXPECTATION_FAILED <br>HTTP_422_UNPROCESSABLE_ENTITY <br>HTTP_423_LOCKED <br>HTTP_424_FAILED_DEPENDENCY <br>HTTP_428_PRECONDITION_REQUIRED <br>HTTP_429_TOO_MANY_REQUESTS HTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE HTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS <br><span class="hljs-comment"># 5）服务器错误 - 5xx </span><br>HTTP_500_INTERNAL_SERVER_ERROR <br>HTTP_501_NOT_IMPLEMENTED <br>HTTP_502_BAD_GATEWAY <br>HTTP_503_SERVICE_UNAVAILABLE <br>HTTP_504_GATEWAY_TIMEOUT HTTP_505_HTTP_VERSION_NOT_SUPPORTED HTTP_507_INSUFFICIENT_STORAGE HTTP_511_NETWORK_AUTHENTICATION_REQUIRED<br></code></pre></td></tr></table></figure><hr><h2 id="3-ModelSerializer"><a href="#3-ModelSerializer" class="headerlink" title="3.ModelSerializer"></a>3.ModelSerializer</h2><blockquote><p>模型类序列化器，根据模型简化序列化过程，根据模型表<strong>自动创建序列化字段</strong>，并且内部实现了 <strong>create 方法和 update 方法</strong>，也可以根据实际需要重写逻辑。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Book<br><span class="hljs-comment"># 对全部字段进行序列化</span><br>fields = <span class="hljs-string">&#x27;__al__&#x27;</span><br><span class="hljs-comment"># 对指定字段进行序列化</span><br>fields = [<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;id&#x27;</span>,···]<br><span class="hljs-comment"># 排除指定字段不进行序列化</span><br>exclude = [<span class="hljs-string">&#x27;id&#x27;</span>]<br>extra_kwargs = &#123; <span class="hljs-string">&#x27;id&#x27;</span>: &#123;<span class="hljs-string">&#x27;min_value&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>&#125;, <span class="hljs-string">&#x27;title&#x27;</span>: &#123;<span class="hljs-string">&#x27;min_value&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>&#125;, &#125;<br></code></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 全局钩子  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, attrs</span>):  <br>    name = attrs.get(<span class="hljs-string">&#x27;name&#x27;</span>)  <br>    <span class="hljs-keyword">if</span> Resume.objects.<span class="hljs-built_in">filter</span>(name=name).exists():  <br>        <span class="hljs-keyword">raise</span> exceptions.ValidationError(name + <span class="hljs-string">&#x27;的简历已存在!&#x27;</span>)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> attrs  <br><span class="hljs-comment"># 局部钩子  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_name</span>(<span class="hljs-params">self, value</span>):  <br>     response = &#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;成功&#x27;</span>&#125;  <br>     res = Resume.objects.<span class="hljs-built_in">filter</span>(name=value)  <br>     <span class="hljs-keyword">if</span> res:  <br>         <span class="hljs-keyword">raise</span> exceptions.ValidationError(<span class="hljs-string">&#x27;简历重复!&#x27;</span>)  <br>     <span class="hljs-keyword">else</span>:  <br>         <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><hr><h2 id="4-视图"><a href="#4-视图" class="headerlink" title="4. 视图"></a>4. 视图</h2><h3 id="1-GenericAPIView"><a href="#1-GenericAPIView" class="headerlink" title="1. GenericAPIView"></a>1. GenericAPIView</h3><p>导入 <code>GenericAPIView</code></p><blockquote><p><code>from rest_framework.viewsets import generics</code></p></blockquote><blockquote><p>在 APIView 上扩展了一些新方法</p></blockquote><p>可设置的属性变量：</p><ul><li>  <strong>pagination_class</strong> 指明分页控制类</li><li>  <strong>filter_backends</strong> 指明过滤控制后端</li></ul><h4 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h4><h5 id="（1）get-serializer-class-self"><a href="#（1）get-serializer-class-self" class="headerlink" title="（1）get_serializer_class(self)"></a>（1）get_serializer_class(self)</h5><blockquote><p>当出现一个视图类中调用多个序列化器时,那么可以通过条件判断在get_serializer_class方法中通过返回不同的序列化器类名就可以让视图方法执行不同的序列化器对象了。<br>返回序列化器类，默认返回<code>serializer_class</code>，可以重写</p></blockquote><h5 id="（2）get-serializer-self-args-kwargs"><a href="#（2）get-serializer-self-args-kwargs" class="headerlink" title="（2）get_serializer(self, *args, **kwargs)"></a>（2）get_serializer(self, *args, **kwargs)</h5><blockquote><p>返回序列化器对象，主要用来提供给Mixin扩展类使用，如果我们在视图中想要获取序列化器对象，也可以直接调用此方法。</p><p><strong>注意，该方法在提供序列化器对象的时候，会向序列化器对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</strong></p><ul><li>  <strong>request</strong> 当前视图的请求对象</li><li>  <strong>view</strong> 当前请求的类视图对象</li><li>  <strong>format</strong> 当前请求期望返回的数据格式</li></ul></blockquote><h5 id="（3）get-queryset-self"><a href="#（3）get-queryset-self" class="headerlink" title="（3）get_queryset(self)"></a>（3）get_queryset(self)</h5><blockquote><p>返回视图使用的查询集，主要用来提供给 Mixin 扩展类使用，是列表视图与详情视图获取数据的基础，默认返回 <code>queryset</code> 属性，可以重写.</p></blockquote><h5 id="（4）get-object-self"><a href="#（4）get-object-self" class="headerlink" title="（4）get_object(self)"></a>（4）get_object(self)</h5><blockquote><p>返回详情视图所需的模型类数据对象，主要用来提供给Mixin扩展类使用。</p><p>在试图中可以调用该方法获取详情信息的模型类对象。</p><p><strong>若详情访问的模型类对象不存在，会返回404。</strong></p><p>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</p></blockquote><h4 id="1-方法重写"><a href="#1-方法重写" class="headerlink" title="1. 方法重写"></a>1. 方法重写</h4><p><code>设置urls.py中的普通路由，正则路由指定参数为pk</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>path(<span class="hljs-string">&#x27;books/&#x27;</span>,views.BookView.as_view()),<br>re_path(<span class="hljs-string">&#x27;books/(?P&lt;pk&gt;\d+)&#x27;</span>,views.BookDetailView.as_view()),<br>]<br></code></pre></td></tr></table></figure><p><strong>get：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;获取所有岗位信息&quot;&quot;&quot;</span>  <br>    serializer = self.get_serializer(instance=self.get_queryset(), many=<span class="hljs-literal">True</span>)  <br>    <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p><strong><font color="#f79646">post</font>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">    添加岗位信息  </span><br><span class="hljs-string">    :param request:    :return: 添加后的岗位信息  </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>    serializer = self.get_serializer(data=request.data)  <br>    <span class="hljs-keyword">if</span> serializer.is_valid():  <br>        serializer.save()  <br>        <span class="hljs-keyword">return</span> Response(serializer.data)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></td></tr></table></figure><p><strong><font color="#2DC26B">get（单个数据）</font>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, pk</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;获取指定id的岗位信息&quot;&quot;&quot;</span>  <br>    serializer = self.get_serializer(instance=self.get_object(), many=<span class="hljs-literal">True</span>)  <br>    <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p><font color="#00b0f0">put（单个数据）：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, request, pk</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">    修改指定id的岗位信息  </span><br><span class="hljs-string">    :param request:    :return: 添加后的岗位信息  </span><br><span class="hljs-string">    &quot;&quot;&quot;</span>    serializer = self.get_serializer(instance=self.get_object(), data=request.data)  <br>    <span class="hljs-keyword">if</span> serializer.is_valid():  <br>        serializer.save()  <br>        <span class="hljs-keyword">return</span> Response(serializer.data)  <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></td></tr></table></figure><p><font color="#7030a0">delete (单个数据)：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request,<span class="hljs-built_in">id</span></span>):<br>self.get_object().delete()<br><span class="hljs-comment"># 直接返回空</span><br><span class="hljs-keyword">return</span> Response()<br></code></pre></td></tr></table></figure><h3 id="2-ViewSet"><a href="#2-ViewSet" class="headerlink" title="2. ViewSet"></a>2. ViewSet</h3><h4 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h4><p>继承自 <code>APIView</code> 与 <code>ViewSetMixin</code>，作用也与 APIView 基本类似，提供了身份认证、权限校验、流量管理等。<br><strong>ViewSet主要通过继承ViewSetMixin来实现在调用as_view()时传入字典{“http请求”：“视图方法”}的映射处理工作，如{‘get’:’list’}，</strong></p><blockquote><ol><li>通过路由指定不同请求执行不同视图函数，从而修改路由分配方法。</li><li>项目加载时执行 <code>as_view ()</code> 函数，当发起请求时才执行 <code>view</code> 函数根据反射获取重写的<strong>函数变量</strong>，设置<strong>请求映射</strong>到该函数变量，进而根据不同请求分发匹配不同的视图函数。</li></ol></blockquote><p>在 ViewSet 中，没有提供任何动作 action 方法，需要我们自己实现 action 方法。<br>使用视图集ViewSet，可以将一系列视图相关的代码逻辑和相关的http请求动作封装到一个类中：<br><font color="#4bacc6">&gt; -   list() 提供一组数据</font><br><font color="#4bacc6">&gt; -   retrieve() 提供单个数据</font><br><font color="#4bacc6">&gt; -   create() 创建数据</font><br><font color="#4bacc6">&gt; -   update() 保存数据</font><br><font color="#4bacc6">&gt; -   destory() 删除数据</font></p><blockquote><p>ViewSet视图集类不再限制视图方法名只允许get()、post()等这种情况了，而是实现允许开发者根据自己的需要定义自定义方法名，例如 list() 、create() 等，然后经过路由中使用http和这些视图方法名进行绑定调用。</p></blockquote><h3 id="3-GenericViewSet"><a href="#3-GenericViewSet" class="headerlink" title="3. GenericViewSet"></a>3. GenericViewSet</h3><blockquote><p>继承了 GenericAPIView 和 ViewSetMixin，即继承了增删改查查方法，也修改了视图分发方法。</p></blockquote><p><strong>GenericViewSet</strong>就帮助我们完成了这样的继承工作，继承自<code>GenericAPIView</code>与<code>ViewSetMixin</code>，在实现了调用as_view()时传入字典（如<code>&#123;&#39;get&#39;:&#39;list&#39;&#125;</code>）的映射处理工作的同时，还提供了<code>GenericAPIView</code>提供的基础方法，可以直接搭配Mixin扩展类使用。<br>url. py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path <br><span class="hljs-keyword">from</span> vset.views <span class="hljs-keyword">import</span> BookView <br>urlpatterns = [ <br><span class="hljs-comment"># path(&quot;set&quot;, views.BookView.as_view(&#123;&quot;http请求&quot;:&quot;视图方法&quot;&#125;)), </span><br>path(<span class="hljs-string">&quot;books/&quot;</span>, BookView.as_view(&#123; <br> <span class="hljs-string">&quot;get&quot;</span>: <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;post&quot;</span>: <span class="hljs-string">&quot;create&quot;</span> <br> &#125;)), re_path(<span class="hljs-string">&quot;^books/(?P&lt;pk&gt;\d+)$&quot;</span>, BookView.as_view(&#123;<br>  <span class="hljs-string">&quot;get&quot;</span>: <span class="hljs-string">&quot;retrieve&quot;</span>, <br>  <span class="hljs-string">&quot;put&quot;</span>: <span class="hljs-string">&quot;update&quot;</span>, <br>  <span class="hljs-string">&quot;delete&quot;</span>: <span class="hljs-string">&quot;delete&quot;</span>, &#125;)), ]<br></code></pre></td></tr></table></figure><p>views. py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet<br><span class="hljs-keyword">from</span> rest_framework.mixins <span class="hljs-keyword">import</span> ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, \ DestroyModelMixin<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(GenericViewSet, ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin): <br>queryset = Book.objects <br>serializer_class = BookSerializer<br></code></pre></td></tr></table></figure><h3 id="4-ModelViewSet"><a href="#4-ModelViewSet" class="headerlink" title="4. ModelViewSet"></a>4. ModelViewSet</h3><blockquote><p>进一步封装，继承了五个 Mixin 类和 GenericViewSet。</p></blockquote><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelViewSet</span>(mixins.CreateModelMixin,  <br>                   mixins.RetrieveModelMixin,  <br>                   mixins.UpdateModelMixin,  <br>                   mixins.DestroyModelMixin,  <br>                   mixins.ListModelMixin,  <br>                   GenericViewSet):<br>            <span class="hljs-string">&quot;&quot;&quot;  </span><br><span class="hljs-string">A viewset that provides default `create()`, `retrieve()`, `update()`,  </span><br><span class="hljs-string">`partial_update()`, `destroy()` and `list()` actions.  </span><br><span class="hljs-string">&quot;&quot;&quot;</span>  <br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] 局限：<br>    不够灵活，直接自带了六个增删改改查查视图函数，需要其他处理需要重写对应方法。</p></blockquote><h3 id="5-扩展视图方法"><a href="#5-扩展视图方法" class="headerlink" title="5. 扩展视图方法"></a>5. 扩展视图方法</h3><blockquote><p>根据需要扩展其他视图函数接口，匹配对应的 get、put、post、delete 等请求，并将接口注册到路由，</p></blockquote><h4 id="1-路由注册"><a href="#1-路由注册" class="headerlink" title="1. 路由注册"></a>1. 路由注册</h4><p><font color="#6425d0">views. py:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">self, request</span>):  <br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        自定义action  </span><br><span class="hljs-string">        return: JSON数据  </span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>        <span class="hljs-keyword">pass</span><span class="hljs-comment">#示例：  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">latest</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-string">&#x27;&#x27;&#x27;获取最后一条记录&#x27;&#x27;&#x27;</span>  <br>    <span class="hljs-comment"># 获取模型数据  </span><br>    book = BookInfo.objects.latest(<span class="hljs-string">&#x27;id&#x27;</span>)    <span class="hljs-comment"># 获取序列化器对象  </span><br>    s = BookInfoModelSerializer(instance=book)    <span class="hljs-keyword">return</span> Response(s.data)<br></code></pre></td></tr></table></figure><p><font color="#4bacc6">urls. py:</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>   <span class="hljs-comment"># url(r&#x27;^books/$&#x27;,views.BookInfoViewSet.as_view(&#123;&#x27;get&#x27;:&#x27;action函数名&#x27;&#125;)),  </span><br><span class="hljs-comment">#示例：  </span><br>url(<span class="hljs-string">r&#x27;^books/$&#x27;</span>, views.BookInfoViewSet.as_view(&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;latest&#x27;</span>&#125;)),  <br>]<br></code></pre></td></tr></table></figure><h4 id="装饰器注册"><a href="#装饰器注册" class="headerlink" title="装饰器注册"></a>装饰器注册</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> action<br><span class="hljs-meta">@action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>], detail=<span class="hljs-literal">False</span>, url_path=<span class="hljs-string">&#x27;test&#x27;</span></span>)  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-built_in">print</span>(request.data)  <br>    <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;成功了&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>methods: 声明该 action 对应的请求方式，列表传递  </li><li>detail: 声明该 action 路径是否为单一资源对应(False 查询所有数据接口，True 查询单条数据接口)，生成路由时是否拼接 <strong>pk</strong> 参数，detail为<code>True</code>，表示路径名格式应该为 <code>book/&#123;pk&#125;/login/</code></li><li>url_path：<strong>路由名称</strong>，不设置默认为函数名</li></ul><h2 id="5-路由"><a href="#5-路由" class="headerlink" title="5. 路由"></a>5. 路由</h2><blockquote><p>对于视图集 ViewSet，我们除了可以自己手动指明请求方式与动作 action 之间的对应关系外，还可以使用 Routers 来帮助我们快速实现路由信息。</p></blockquote><p>REST framework提供了两个router</p><ul><li>  <strong>SimpleRouter</strong></li><li>  <strong>DefaultRouter</strong></li></ul><h3 id="1-用法"><a href="#1-用法" class="headerlink" title="1. 用法"></a>1. 用法</h3><p><span style="background:rgba(240, 200, 0, 0.2)">1. 创建 router 对象，并注册视图集</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routers <br>router = routers.DefaultRouter() router.register(<span class="hljs-string">&#x27;book&#x27;</span>, BookView, base_name=<span class="hljs-string">&#x27;book&#x27;</span>)<br></code></pre></td></tr></table></figure><p>register(prefix, viewset, base_name)</p><blockquote><ul><li>  prefix 该视图集的路由前缀</li><li>  viewset 视图集</li><li>  base_name 路由别名的前缀</li></ul></blockquote><p>如上述代码会形成的路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">^book/$    name: book-<span class="hljs-built_in">list</span><br>^book/&#123;pk&#125;/$   name: book-detail<br></code></pre></td></tr></table></figure><p><span style="background:rgba(136, 49, 204, 0.2)">2. 添加路由数据：</span></p><ul><li><p>方式 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    ...<br>]<br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure></li><li><p>方式 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    ...<br>    path(<span class="hljs-string">&#x27;^&#x27;</span>, include(router.urls))<br>]<br></code></pre></td></tr></table></figure></li></ul><p><span style="background:#40a9ff">3. 完整 demo：</span></p><blockquote><p>附带了 <code>swagger</code> 的接口路由和 <code>django-admin</code> 后台管理路由</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url  <br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin  <br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> include, path, re_path  <br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve  <br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> routers  <br><span class="hljs-keyword">from</span> rest_framework.documentation <span class="hljs-keyword">import</span> include_docs_urls  <br><span class="hljs-keyword">from</span> rest_framework.schemas <span class="hljs-keyword">import</span> get_schema_view  <br><span class="hljs-keyword">from</span> rest_framework_swagger.renderers <span class="hljs-keyword">import</span> SwaggerUIRenderer, OpenAPICodec  <br><span class="hljs-keyword">from</span> AIResume <span class="hljs-keyword">import</span> settings  <br><span class="hljs-keyword">from</span> smartresume.views <span class="hljs-keyword">import</span> auth_user_api, platform_user_api, resume_api, job_api  <br>  <br>schema_view = get_schema_view(title=<span class="hljs-string">&#x27;智能简历平台接口文档&#x27;</span>, renderer_classes=[SwaggerUIRenderer, OpenAPICodec])  <br>  <br>router = routers.DefaultRouter()  <br>  <br>router.register(<span class="hljs-string">r&#x27;users&#x27;</span>, auth_user_api.UserViewSet, basename=<span class="hljs-string">&quot;auth_users_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;groups&#x27;</span>, auth_user_api.GroupViewSet, basename=<span class="hljs-string">&quot;auth_groups_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;platform_users&#x27;</span>, platform_user_api.PuserViewSet, basename=<span class="hljs-string">&quot;platform_users_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;resumes&#x27;</span>, resume_api.ResumeViewSet, basename=<span class="hljs-string">&quot;resume_api&quot;</span>)  <br>router.register(<span class="hljs-string">r&#x27;jobs&#x27;</span>, job_api.JobViewSet, basename=<span class="hljs-string">&quot;job_api&quot;</span>)  <br>urlpatterns = [  <br>    re_path(<span class="hljs-string">r&quot;^static/(?P&lt;path&gt;.*)$&quot;</span>, serve, &#123;<span class="hljs-string">&quot;document_root&quot;</span>: settings.STATIC_ROOT&#125;, name=<span class="hljs-string">&#x27;static&#x27;</span>),  <span class="hljs-comment"># 新增的路径  </span><br>    re_path(<span class="hljs-string">r&#x27;^media/(?P&lt;path&gt;.*)$&#x27;</span>, serve, &#123;<span class="hljs-string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;, name=<span class="hljs-string">&#x27;media&#x27;</span>),  <br>    path(<span class="hljs-string">r&#x27;&#x27;</span>, include(router.urls)),  <br>    path(<span class="hljs-string">r&#x27;api-auth/&#x27;</span>, include(<span class="hljs-string">&#x27;rest_framework.urls&#x27;</span>)),  <br>    url(<span class="hljs-string">r&#x27;^admin/&#x27;</span>, admin.site.urls),  <br>    path(<span class="hljs-string">&#x27;docs2/&#x27;</span>, schema_view, name=<span class="hljs-string">&#x27;docs&#x27;</span>),  <br>    path(<span class="hljs-string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="hljs-string">&#x27;智能简历平台接口文档&#x27;</span>)),  <br>]  <br>  <br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure><h2 id="2-视图集中附加-action-的声明"><a href="#2-视图集中附加-action-的声明" class="headerlink" title="2. 视图集中附加 action 的声明"></a>2. 视图集中附加 action 的声明</h2><blockquote><p>在视图集中，如果想要让 Router 自动帮助我们为自定义的动作生成路由信息，需要使用 <code>rest_framework.decorators.action</code> 装饰器。</p></blockquote><pre><code class="hljs">以 action 装饰器装饰的方法名会作为 action 动作名，与 list、retrieve 等同。</code></pre><p>action装饰器可以接收两个参数：</p><ul><li><strong>methods</strong>: 声明该action对应的请求方式，列表传递</li><li><strong>detail</strong>: 声明该action的路径是否与单一资源对应  <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">路由前缀/&lt;pk&gt;<span class="hljs-regexp">/action方法名/</span><br></code></pre></td></tr></table></figure><ul><li>  True 表示路径格式是<code>xxx/&lt;pk&gt;/action方法名/</code></li><li>  False 表示路径格式是<code>xxx/action方法名/</code></li></ul></li><li>  url_path：声明该 action 的路由尾缀。</li></ul><p>demo：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> ModelViewSet<br><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> action<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookView</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Book.objects<br>    serializer_class = BookSerializer<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    action装饰器的作用：告诉路由类给视图集的自定义方法生成路由信息</span><br><span class="hljs-string">    methods, 列表，允许哪些http请求能访问当前视图方法</span><br><span class="hljs-string">    detail，布尔，生成路由时是否拼接pk参数</span><br><span class="hljs-string">            detail为True，表示路径名格式应该为 book/&#123;pk&#125;/login/</span><br><span class="hljs-string">    url_path，字符串，生成路由时末尾路由路径，如果没有声明，则自动以当前方法名作为路由尾缀</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-meta">    @action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>], detail=<span class="hljs-literal">True</span>,url_path=<span class="hljs-string">&quot;login&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self, request,pk</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;登录&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;msg&quot;</span>:request.method&#125;)<br><br>    <span class="hljs-comment"># detail为False 表示路径名格式应该为 book/get_new_5/</span><br><span class="hljs-meta">    @action(<span class="hljs-params">methods=[<span class="hljs-string">&#x27;get&#x27;</span>], detail=<span class="hljs-literal">False</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_5</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;获取最新添加的5本书&quot;&quot;&quot;</span><br>        ...<br></code></pre></td></tr></table></figure><p>上述方法自动为此视图集自定义 action 方法形成的路由会是如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">^book/get_new_5/$    name: book-get_new_5<br>^book/&#123;pk&#125;/login/$   name: book-login<br></code></pre></td></tr></table></figure><hr><h2 id="6-其它组件"><a href="#6-其它组件" class="headerlink" title="6. 其它组件"></a>6. 其它组件</h2><h3 id="1-认证"><a href="#1-认证" class="headerlink" title="1. 认证"></a>1. 认证</h3><h4 id="1-全局认证"><a href="#1-全局认证" class="headerlink" title="1. 全局认证"></a>1. 全局认证</h4><blockquote><p>没有设置用户配置认证时，默认认证为以下两个认证。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;  <br><span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [  <br>    <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,  <br>    <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>  <br>],<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-局部认证"><a href="#2-局部认证" class="headerlink" title="2. 局部认证"></a>2. 局部认证</h4><ol><li><p>继承认证基类, 写自己的认证类，并重写 authenticate（）方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthentication</span>(<span class="hljs-title class_ inherited__">SessionAuthentication</span>):  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):  <br>        token = request.query_params.get(<span class="hljs-string">&#x27;token&#x27;</span>)  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token:  <br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)  <br>        user_obj = Puser.objects.<span class="hljs-built_in">filter</span>(token=token).first()  <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_obj:  <br>            <span class="hljs-keyword">raise</span> AuthenticationFailed(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;认证失败&quot;</span>&#125;)  <br>        <span class="hljs-keyword">return</span> user_obj, token<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate_header</span>(<span class="hljs-params">self, request</span>):  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&quot;MyAPI&quot;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>视图函数设置 authentication_classes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">authentication_classes = [MyAuthentication,]<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-权限"><a href="#2-权限" class="headerlink" title="2. 权限"></a>2. 权限</h3><h3 id="3-限流"><a href="#3-限流" class="headerlink" title="3. 限流"></a>3. 限流</h3><blockquote><p>控制用户或管理员等访问接口的频次，减轻服务压力</p></blockquote><p>1） AnonRateThrottle</p><p>限制所有匿名未认证用户，使用IP区分用户。【很多公司这样的，IP结合设备信息来判断，当然比IP要靠谱一点点而已】</p><p>使用<code>DEFAULT_THROTTLE_RATES[&#39;anon&#39;]</code> 来设置频次</p><p>2）UserRateThrottle</p><p>限制认证用户，使用User模型的 id主键 来区分。</p><p>使用<code>DEFAULT_THROTTLE_RATES[&#39;user&#39;]</code> 来设置频次</p><p>3）ScopedRateThrottle</p><p>限制用户对于每个视图的访问频次，使用 ip 或 user id。</p><p>settings.py，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 限流全局配置</span><br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>:[ <span class="hljs-comment"># 限流配置类</span><br>    <span class="hljs-comment">#     &#x27;rest_framework.throttling.AnonRateThrottle&#x27;, # 未认证用户[未登录用户]</span><br>    <span class="hljs-comment">#     &#x27;rest_framework.throttling.UserRateThrottle&#x27;, # 已认证用户[已登录用户]</span><br>        <span class="hljs-string">&#x27;rest_framework.throttling.ScopedRateThrottle&#x27;</span>, <span class="hljs-comment"># 自定义限流</span><br>    ],<br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>:&#123; <span class="hljs-comment"># 频率配置</span><br>        <span class="hljs-string">&#x27;anon&#x27;</span>: <span class="hljs-string">&#x27;2/day&#x27;</span>,  <span class="hljs-comment"># 针对游客的访问频率进行限制，实际上，drf只是识别首字母，但是为了提高代码的维护性，建议写完整单词</span><br>        <span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;5/day&#x27;</span>, <span class="hljs-comment"># 针对会员的访问频率进行限制，</span><br>        <span class="hljs-string">&#x27;vip&#x27;</span>: <span class="hljs-string">&#x27;10/day&#x27;</span>, <span class="hljs-comment"># 针对会员的访问频率进行限制，</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>视图代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.throttling <span class="hljs-keyword">import</span> UserRateThrottle<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 限流局部配置[这里需要配合在全局配置中的DEFAULT_THROTTLE_RATES来设置频率]</span><br>    <span class="hljs-comment"># throttle_classes = [UserRateThrottle] # 使用drf限流类来配置频率</span><br>    throttle_scope = <span class="hljs-string">&quot;vip&quot;</span> <span class="hljs-comment"># 自定义频率</span><br></code></pre></td></tr></table></figure><h3 id="4-过滤"><a href="#4-过滤" class="headerlink" title="4. 过滤"></a>4. 过滤</h3><blockquote><p>安装过滤器：<br><code>pip install django-filter </code></p></blockquote><p>在配置文件中增加过滤后端的设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    ...<br>    <span class="hljs-string">&#x27;django_filters&#x27;</span>,  <span class="hljs-comment"># 需要注册应用，</span><br>]<br><br>REST_FRAMEWORK = &#123;<br>    ...<br>    <span class="hljs-string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: (<span class="hljs-string">&#x27;django_filters.rest_framework.DjangoFilterBackend&#x27;</span>,)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可通过过滤字段检索数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>): queryset = Student.objects.<span class="hljs-built_in">all</span>() serializer_class = StudentSerializer filter_fields = [<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="5-排序"><a href="#5-排序" class="headerlink" title="5. 排序"></a>5. 排序</h3><blockquote><p>对于列表数据，REST framework 提供了<strong>OrderingFilter</strong>过滤器来帮助我们快速指明数据按照指定字段进行排序。</p></blockquote><p>使用方法：</p><p>在类视图中设置filter_backends，使用<code>rest_framework.filters.OrderingFilter</code>过滤器，REST framework会在请求的查询字符串参数中检查是否包含了ordering参数，如果包含了ordering参数，则按照ordering参数指明的排序字段对数据集进行排序。</p><p>前端可以传递的ordering参数的可选字段值需要在ordering_fields中指明。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    filter_backends = [OrderingFilter]<br>    ordering_fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>]<br><br><span class="hljs-comment"># 127.0.0.1:8000/books/?ordering=-age</span><br><span class="hljs-comment"># -id 表示针对id字段进行倒序排序</span><br><span class="hljs-comment"># id  表示针对id字段进行升序排序</span><br></code></pre></td></tr></table></figure><p>如果需要在过滤以后再次进行排序，则需要两者结合!</p><blockquote><p>全局配置下的过滤组件不能和排序组件一起使用，只支持局部配置的过滤组件和排序组件一起使用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.generics <span class="hljs-keyword">import</span> ListAPIView<br><span class="hljs-keyword">from</span> students.models <span class="hljs-keyword">import</span> Student<br><span class="hljs-keyword">from</span> .serializers <span class="hljs-keyword">import</span> StudentModelSerializer<br><span class="hljs-keyword">from</span> django_filters.rest_framework <span class="hljs-keyword">import</span> DjangoFilterBackend<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ListView</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    filter_fields = [<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;sex&#x27;</span>]<br>    <span class="hljs-comment"># 因为局部配置会覆盖全局配置,所以需要重新把过滤组件核心类再次声明,</span><br>    <span class="hljs-comment"># 否则过滤功能会失效</span><br>    filter_backends = [OrderingFilter,DjangoFilterBackend]<br>    ordering_fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="6-分页"><a href="#6-分页" class="headerlink" title="6. 分页"></a>6. 分页</h3><blockquote><p>因为 django 默认提供的分页器主要使用于前后端不分离的业务场景，所以 REST framework 也提供了分页的支持。</p></blockquote><p>我们可以在配置文件中设置全局的分页方式，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>:  <span class="hljs-string">&#x27;rest_framework.pagination.PageNumberPagination&#x27;</span>,<br>    <span class="hljs-string">&#x27;PAGE_SIZE&#x27;</span>: <span class="hljs-number">100</span>  <span class="hljs-comment"># 每页数目</span><br>&#125;<br>``````<br><br>```python<br><span class="hljs-comment"># 如果在配置settings.py文件中， 设置了全局分页，那么在drf中凡是调用了ListModelMixin的list()，都会自动分页。如果项目中出现大量需要分页的数据，只有少数部分的分页，则可以在少部分的视图类中关闭分页功能。</span><br><span class="hljs-comment"># 另外，视图类在使用过分页以后，务必在编写queryset属性时，模型.objects后面调用结果。例如：</span><br><span class="hljs-comment"># Student.objects.all()</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ListAPIView</span>):<br>    pagination_class = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>也可通过自定义 Pagination 类，来为视图添加不同分页行为。在视图中通过 <code>pagination_clas</code> 属性来指明。</p><p>可选分页器：</p><p>1） <strong>PageNumberPagination</strong></p><p>前端访问网址形式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET  http://127.0.0.1:8000/students/?page=4<br></code></pre></td></tr></table></figure><p>可以在子类中定义的属性：</p><ul><li>  page_size 每页数目</li><li>  page_query_param 前端发送的页数关键字名，默认为”page”</li><li>  page_size_query_param 前端发送的每页数目关键字名，默认为None</li><li>  max_page_size 前端最多能设置的每页数量</li></ul><p>分页器类，<code>paginations</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span>  rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination,LimitOffsetPagination<br><span class="hljs-comment"># PageNumberPagination，以页码作为分页条件</span><br><span class="hljs-comment"># page=1&amp;size=10      第1页</span><br><span class="hljs-comment"># page=2&amp;size=10      第2页</span><br><span class="hljs-comment"># ...</span><br><span class="hljs-comment"># LimitOffsetPagination，以数据库查询的limit和offset数值作为分页条件</span><br><span class="hljs-comment"># limit=10&amp;offset=0   第1页</span><br><span class="hljs-comment"># limit=10&amp;offset=10  第2页</span><br><span class="hljs-comment"># ...</span><br><br><span class="hljs-comment"># PageNumberPagination</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentPageNumberPagination</span>(<span class="hljs-title class_ inherited__">PageNumberPagination</span>):<br>    page_query_param = <span class="hljs-string">&quot;page&quot;</span> <span class="hljs-comment"># 查询字符串中代表页码的变量名</span><br>    page_size_query_param = <span class="hljs-string">&quot;size&quot;</span> <span class="hljs-comment"># 查询字符串中代表每一页数据的变量名</span><br>    page_size = <span class="hljs-number">2</span> <span class="hljs-comment"># 每一页的数据量</span><br>    max_page_size = <span class="hljs-number">4</span> <span class="hljs-comment"># 允许客户端通过查询字符串调整的最大单页数据量</span><br></code></pre></td></tr></table></figure><p>视图，<code>views</code> ，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 取消当前视图类的分页效果</span><br>    <span class="hljs-comment"># pagination_class = None</span><br>    <span class="hljs-comment"># 局部分页</span><br>    pagination_class = StudentPageNumberPagination<br></code></pre></td></tr></table></figure><p>2）<strong>LimitOffsetPagination</strong></p><p>前端访问网址形式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">GET http://127.0.0.1/four/students/?limit=100&amp;offset=100<br></code></pre></td></tr></table></figure><p>可以在子类中定义的属性：</p><ul><li>  default_limit 默认限制，默认值与<code>PAGE_SIZE</code>设置一直</li><li>  limit_query_param limit参数名，默认’limit’</li><li>  offset_query_param offset参数名，默认’offset’</li><li>  max_limit 最大limit限制，默认None</li></ul><p>分页类，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span>  rest_framework.pagination <span class="hljs-keyword">import</span> PageNumberPagination,LimitOffsetPagination<br><span class="hljs-comment"># PageNumberPagination，以页码作为分页条件</span><br><span class="hljs-comment"># page=1&amp;size=10      第1页</span><br><span class="hljs-comment"># page=2&amp;size=10      第2页</span><br><span class="hljs-comment"># LimitOffsetPagination，以数据库查询的limit和offset数值作为分页条件</span><br><span class="hljs-comment"># limit=10&amp;offset=0   第1页</span><br><span class="hljs-comment"># limit=10&amp;offset=10  第2页</span><br><br><span class="hljs-comment"># LimitOffsetPagination</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentLimitOffsetPagination</span>(<span class="hljs-title class_ inherited__">LimitOffsetPagination</span>):<br>    limit_query_param = <span class="hljs-string">&quot;limit&quot;</span> <span class="hljs-comment"># 查询字符串中代表每一页数据的变量名</span><br>    offset_query_param = <span class="hljs-string">&quot;offset&quot;</span> <span class="hljs-comment"># 查询字符串中代表页码的变量名</span><br>    default_limit = <span class="hljs-number">2</span> <span class="hljs-comment"># 每一页的数据量</span><br>    max_limit = <span class="hljs-number">4</span> <span class="hljs-comment"># 允许客户端通过查询字符串调整的最大单页数据量</span><br></code></pre></td></tr></table></figure><p>视图，<code>views</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>    serializer_class = StudentModelSerializer<br>    <span class="hljs-comment"># 取消当前视图类的分页效果</span><br>    <span class="hljs-comment"># pagination_class = None</span><br>    <span class="hljs-comment"># 局部分页</span><br>    pagination_class = StudentLimitOffsetPagination<br></code></pre></td></tr></table></figure><h3 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7. 异常处理"></a>7. 异常处理</h3><blockquote><p>REST framework 提供了异常处理，我们可以自定义异常处理函数。例如我们想在要创建一个自定义异常函数，</p><p>这个函数，我们保存到当前子应用opt中[注意，开发时，我们会找个独立的公共目录来保存这种公共的函数/工具/类库]。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_exception_handler</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-comment"># 先调用REST framework默认的异常处理方法获得标准错误响应对象</span><br>    response = exception_handler(exc, context)<br><br>    <span class="hljs-comment"># 在此处补充自定义的异常处理</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        response.data[<span class="hljs-string">&#x27;status_code&#x27;</span>] = response.status_code<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>在配置文件中声明自定义的异常处理，<code>settings</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;drfdemo.exceptions.custom_excetion_handle&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果未声明，会采用默认的方式，如下</p><p>rest_frame/settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.views.exception_handler&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>例如：</p><p>补充上处理关于数据库的异常，这里使用其他异常来举例：</p><p><code>主应用.exceptions</code>，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义异常函数: 在drf本身提供的异常函数基础上，我们增加更多的异常处理就可以了。</span><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> exception_handler<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> DatabaseError<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> status<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_excetion_handle</span>(<span class="hljs-params">exc, context</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    自定义异常函数，必须要在配置文件中注册才能被drf使用</span><br><span class="hljs-string">    exc: 异常对象，本次发生的异常对象</span><br><span class="hljs-string">    context: 字典，本次发生异常时，python解析器提供的执行上下文</span><br><span class="hljs-string">    所谓的执行上下文[context]，就是程序执行到当前一行代码时，能提供给开发者调用的环境信息异常发生时，代码所在的路径，时间，视图，客户端http请求等等...]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 先让drf处理它能识别的异常</span><br>    response = exception_handler(exc, context)<br>    <span class="hljs-comment"># 在经过了drf的异常处理以后，还是返回None则表示有2种情况:</span><br>    <span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 异常发生时的视图对象</span><br>        view = context[<span class="hljs-string">&#x27;view&#x27;</span>]<br>        <span class="hljs-comment"># 异常发生时的http请求</span><br>        request = context[<span class="hljs-string">&quot;request&quot;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc, DatabaseError):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]: %s&#x27;</span> % (view, exc))<br>            response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;服务器内部错误&#x27;</span>&#125;, status=status.HTTP_507_INSUFFICIENT_STORAGE)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc, TypeError):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0不能作为除数~&quot;</span>)<br>            <span class="hljs-built_in">print</span>(request)<br>            response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;0不能作为除数&#x27;</span>&#125;, status=status.HTTP_500_INTERNAL_SERVER_ERROR)<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>视图中，故意报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> .paginations <span class="hljs-keyword">import</span> StudentPageNumberPagination,StudentLimitOffsetPagination<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3ModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>    queryset = Student.objects  <span class="hljs-comment"># 去掉 .all()，就会报错。</span><br>    serializer_class = StudentModelSerializer<br>    pagination_class = StudentPageNumberPagination<br></code></pre></td></tr></table></figure><h4 id="REST-framework定义的异常"><a href="#REST-framework定义的异常" class="headerlink" title="REST framework定义的异常"></a>REST framework定义的异常</h4><blockquote><ul><li>  APIException 所有异常的父类</li><li>  ParseError 解析错误</li><li>  AuthenticationFailed 认证失败</li><li>  NotAuthenticated 尚未认证</li><li>  PermissionDenied 权限决绝</li><li>  NotFound 未找到</li><li>  MethodNotAllowed 请求方式不支持</li><li>  NotAcceptable 要获取的数据格式不支持</li><li>  Throttled 超过限流次数</li><li>  ValidationError 校验失败</li></ul></blockquote><p>也就是说，很多的没有在上面列出来的异常，就需要我们在自定义异常中自己处理了。</p><h3 id="8-自动生成接口文档"><a href="#8-自动生成接口文档" class="headerlink" title="8. 自动生成接口文档"></a>8. 自动生成接口文档</h3><blockquote><p>REST framework 可以自动帮助我们生成接口文档。</p><p>接口文档以网页的方式呈现。</p><p>自动接口文档能生成的是继承自<code>APIView</code>及其子类的视图。</p></blockquote><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><p>REST framewrok生成接口文档需要<code>coreapi</code>库的支持。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install coreapi<br></code></pre></td></tr></table></figure><h4 id="2-设置接口文档访问路径"><a href="#2-设置接口文档访问路径" class="headerlink" title="2. 设置接口文档访问路径"></a>2. 设置接口文档访问路径</h4><p>在总路由中添加接口文档路径。</p><p>文档路由对应的视图配置为<code>rest_framework.documentation.include_docs_urls</code>，</p><p>参数<code>title</code>为接口文档网站的标题。总路由，代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.documentation <span class="hljs-keyword">import</span> include_docs_urls<br><br>urlpatterns = [<br>    ...<br>    path(<span class="hljs-string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="hljs-string">&#x27;站点页面标题&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><p>在settings.py中配置接口文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 。。。 其他选项</span><br>    <span class="hljs-comment"># 接口文档</span><br>    <span class="hljs-string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.schemas.AutoSchema&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-文档描述说明的定义位置"><a href="#3-文档描述说明的定义位置" class="headerlink" title="3. 文档描述说明的定义位置"></a>3. 文档描述说明的定义位置</h4><p>1） 单一方法的视图，可直接使用类视图的文档字符串，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListView</span>(generics.ListAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    返回所有图书信息.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>2）包含多个方法的视图，在类视图的文档字符串中，分开方法定义，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookListCreateView</span>(generics.ListCreateAPIView):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    get:</span><br><span class="hljs-string">    返回所有图书信息.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    post:</span><br><span class="hljs-string">    新建图书.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>3）对于视图集ViewSet，仍在类视图的文档字符串中封开定义，但是应使用action名称区分，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    list:</span><br><span class="hljs-string">    返回图书列表数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    retrieve:</span><br><span class="hljs-string">    返回图书详情数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    latest:</span><br><span class="hljs-string">    返回最新的图书数据</span><br><span class="hljs-string"></span><br><span class="hljs-string">    read:</span><br><span class="hljs-string">    修改图书的阅读量</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="4-访问接口文档网页"><a href="#4-访问接口文档网页" class="headerlink" title="4. 访问接口文档网页"></a>4. 访问接口文档网页</h4><p>浏览器访问 127.0.0.1:8000/docs/，即可看到自动生成的接口文档。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230427154626.png" alt="image.png"></p><p>swagger 接口文档<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/20230427154712.png" alt="image.png"></p><p>两点说明：</p><p>1） 视图集ViewSet中的retrieve名称，在接口文档网站中叫做read</p><p>2）参数的Description需要在模型类或序列化器类的字段中以help_text选项定义，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):<br>    ...<br>    age = models.IntegerField(default=<span class="hljs-number">0</span>, verbose_name=<span class="hljs-string">&#x27;年龄&#x27;</span>, help_text=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    ...<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentSerializer</span>(serializers.ModelSerializer):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = Student<br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br>        extra_kwargs = &#123;<br>            <span class="hljs-string">&#x27;age&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;required&#x27;</span>: <span class="hljs-literal">True</span>,<br>                <span class="hljs-string">&#x27;help_text&#x27;</span>: <span class="hljs-string">&#x27;年龄&#x27;</span><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote><p><font color="#ff0000">本文参考了以下文档和视频结合个人感悟记录，若有侵权无意冒犯，及时联系进行处理。如果有看不懂本文的，可以移步查看更加详细的教程文档或者观看相关视频，支持原创作者。 </font></p></blockquote><ol><li><a href="http://www.yuan316.com/post/DRF/">DRF | YUAN</a></li><li><a href="https://www.bilibili.com/video/BV1z5411D7BQ/?p=21&spm_id_from=pageDriver&vd_source=9c896fa9c3f9023797e8efe7be0c113e">21 DRF应用的认证组件_哔哩哔哩_bilibili</a></li></ol><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script><meting-js metin="meting" auto=" https://y.qq.com/n/ryqq/song/003kIhRR4Vr0cV.html" autoplay=" true" ></meting-js>]]></content>
    
    
    <categories>
      
      <category>Front_end_development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识 uni-app</title>
    <link href="/2023/04/5d72eb9cc9af.html"/>
    <url>/2023/04/5d72eb9cc9af.html</url>
    
    <content type="html"><![CDATA[<h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><blockquote><p>知识点：网络请求、模板语法、打开页面和页面传参。</p></blockquote><h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><blockquote><p>基础组件分为以下十几大类：</p></blockquote><h2 id="视图容器（View-Container）："><a href="#视图容器（View-Container）：" class="headerlink" title="视图容器（View Container）："></a>视图容器（View Container）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/view">view</a></p><p>视图容器，类似于HTML中的div</p><p><a href="https://uniapp.dcloud.net.cn/component/scroll-view">scroll-view</a></p><p>可滚动视图容器</p><p><a href="https://uniapp.dcloud.net.cn/component/swiper">swiper</a></p><p>滑块视图容器，比如用于轮播banner</p><p><a href="https://uniapp.dcloud.net.cn/component/match-media">match-media</a></p><p>屏幕动态适配组件，比如窄屏上不显示某些内容</p><p><a href="https://uniapp.dcloud.net.cn/component/movable-view#movable-area">movable-area</a></p><p>可拖动区域</p><p><a href="https://uniapp.dcloud.net.cn/component/movable-view#movable-view">movable-view</a></p><p>可移动的视图容器，在页面中可以拖拽滑动或双指缩放。movable-view必须在movable-area组件中</p><p><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-view">cover-view</a></p><p>可覆盖在原生组件的上的文本组件</p><p><a href="https://uniapp.dcloud.net.cn/component/cover-view#cover-image">cover-image</a></p><p>可覆盖在原生组件的上的图片组件</p></blockquote><h2 id="基础内容（Basic-Content）："><a href="#基础内容（Basic-Content）：" class="headerlink" title="基础内容（Basic Content）："></a>基础内容（Basic Content）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/icon">icon</a></p><p>图标</p><p><a href="https://uniapp.dcloud.net.cn/component/text">text</a></p><p>文字</p><p><a href="https://uniapp.dcloud.net.cn/component/rich-text">rich-text</a></p><p>富文本显示组件</p><p><a href="https://uniapp.dcloud.net.cn/component/progress">progress</a></p><p>进度条</p></blockquote><h2 id="表单组件（Form）："><a href="#表单组件（Form）：" class="headerlink" title="表单组件（Form）："></a>表单组件（Form）：</h2><blockquote><p>[!NOTE] 组件</p><p><a href="https://uniapp.dcloud.net.cn/component/button">button</a></p><p>按钮</p><p><a href="https://uniapp.dcloud.net.cn/component/checkbox">checkbox</a></p><p>多项选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/editor">editor</a></p><p>富文本输入框</p><p><a href="https://uniapp.dcloud.net.cn/component/form">form</a></p><p>表单</p><p><a href="https://uniapp.dcloud.net.cn/component/input">input</a></p><p>输入框</p><p><a href="https://uniapp.dcloud.net.cn/component/label">label</a></p><p>标签</p><p><a href="https://uniapp.dcloud.net.cn/component/picker">picker</a></p><p>弹出式列表选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/picker-view">picker-view</a></p><p>窗体内嵌式列表选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/radio">radio</a></p><p>单项选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/slider">slider</a></p><p>滑动选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/switch">switch</a></p><p>开关选择器</p><p><a href="https://uniapp.dcloud.net.cn/component/textarea">textarea</a></p><p>多行文本输入框</p></blockquote><h2 id="路由与页面跳转（Navigation）："><a href="#路由与页面跳转（Navigation）：" class="headerlink" title="路由与页面跳转（Navigation）："></a>路由与页面跳转（Navigation）：</h2><blockquote><p>[!NOTE] 组件<br><a href="https://uniapp.dcloud.net.cn/component/navigator">navigator</a></p><p>页面链接。类似于HTML中的a标签</p><h2 id="媒体组件（Media）："><a href="#媒体组件（Media）：" class="headerlink" title="媒体组件（Media）："></a>媒体组件（Media）：</h2><p><a href="https://uniapp.dcloud.net.cn/component/audio">audio</a></p><p>音频</p><p><a href="https://uniapp.dcloud.net.cn/component/camera">camera</a></p><p>相机</p><p><a href="https://uniapp.dcloud.net.cn/component/image">image</a></p><p>图片</p><p><a href="https://uniapp.dcloud.net.cn/component/video">video</a></p><p>视频</p><p><a href="https://uniapp.dcloud.net.cn/component/live-player">live-player</a></p><p>直播播放</p><p><a href="https://uniapp.dcloud.net.cn/component/live-pusher">live-pusher</a></p><p>实时音视频录制，也称直播推流</p></blockquote><h2 id="地图（Map）："><a href="#地图（Map）：" class="headerlink" title="地图（Map）："></a>地图（Map）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/map">map</a></p><p>地图</p></blockquote><h2 id="画布（Canvas）："><a href="#画布（Canvas）：" class="headerlink" title="画布（Canvas）："></a>画布（Canvas）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/canvas">canvas</a></p><p>画布</p></blockquote><h2 id="webview（Web-view）："><a href="#webview（Web-view）：" class="headerlink" title="webview（Web-view）："></a>webview（Web-view）：</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/web-view">web-view</a></p><p>web浏览器组件</p></blockquote><blockquote><h2 id="广告"><a href="#广告" class="headerlink" title="广告"></a>广告</h2><p><a href="https://uniapp.dcloud.net.cn/component/ad">ad</a></p><p>广告组件</p><p><a href="https://uniapp.dcloud.net.cn/component/ad-draw">ad-draw</a></p><p>沉浸视频流广告组件</p></blockquote><h2 id="页面属性配置"><a href="#页面属性配置" class="headerlink" title="页面属性配置"></a>页面属性配置</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/component/custom-tab-bar">custom-tab-bar</a></p><p>底部tabbar自定义组件</p><p><a href="https://uniapp.dcloud.net.cn/component/navigation-bar">navigation-bar</a></p><p>页面顶部导航</p><p><a href="https://uniapp.dcloud.net.cn/component/page-meta">page-meta</a></p><p>页面属性配置节点</p></blockquote><h2 id="uniCloud"><a href="#uniCloud" class="headerlink" title="uniCloud"></a>uniCloud</h2><blockquote><p><a href="https://uniapp.dcloud.net.cn/uniCloud/unicloud-db">unicloud-db组件</a></p><p>uniCloud数据库访问和操作组件</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Front_end_development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Vue</title>
    <link href="/2023/04/3dbbbdf5122f.html"/>
    <url>/2023/04/3dbbbdf5122f.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-生命周期函数"><a href="#1-生命周期函数" class="headerlink" title="1. 生命周期函数"></a>1. 生命周期函数</h1><table><thead><tr><th>生命周期钩子函数</th><th>实例处于阶段</th><th>描述</th><th>能否获取到 el (this.$el)</th><th>能否获取到 data (this. Xxx)</th><th>能否使用 methods 中的方法 (this. Xxx ())</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td><td>实例已初始化,但数据观测,watch/event 事件回调还未配置</td><td>获取不到</td><td>不能</td><td>不能</td></tr><tr><td>created</td><td>创建后</td><td>已完成如下配置,数据观测 (data observer),property 和方法的运算,watch/event 事件回调</td><td>获取不到</td><td>能</td><td>能</td></tr><tr><td>beforeMount</td><td>挂载前</td><td>dom 已初始化,但并未挂载和渲染</td><td>能</td><td>能</td><td>能</td></tr><tr><td>mounted</td><td>挂载后</td><td>dom 已完成挂载和渲染</td><td>能</td><td>能</td><td>能</td></tr><tr><td>beforeUpdate</td><td>更新前</td><td>数据已改变,但 dom 未更新</td><td>能</td><td>能</td><td>能</td></tr><tr><td>updated</td><td>更新后</td><td>dom 已更新</td><td>能</td><td>能</td><td>能</td></tr><tr><td>beforeDestroy</td><td>销毁前</td><td>实例销毁前,实例仍然可用</td><td>能</td><td>能</td><td>能</td></tr><tr><td>destroyed</td><td>销毁后</td><td>实例已销毁,所有指令被解绑,事件监听器被移除,子实例都被销毁</td><td>能</td><td>能</td><td>能</td></tr></tbody></table><h1 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h1><h2 id="声明式-API"><a href="#声明式-API" class="headerlink" title="声明式 API"></a>声明式 API</h2><blockquote><p>Vue 的核心功能是<em><strong>声明式渲染</strong></em>:通过扩展于标准 HTML 的模板语法,我们可以根据 JavaScript 的状态来描述 HTML 应该是什么样子的。当状态改变时,HTML 会自动更新。</p></blockquote><p>我们可以使用 <code>data</code> 组件选项来声明响应式状态,该选项应该是一个返回对象的函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>message</code> 属性可以在模板中使用。下面展示了我们如何使用双花括号法,根据 <code>message</code> 的值来渲染动态文本:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在双花括号中的内容并<strong>不只限于标识符或路径</strong>——我们可以使用任何<em><strong>有效的 JavaScript 表达式</strong></em>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="组合式-API"><a href="#组合式-API" class="headerlink" title="组合式 API"></a>组合式 API</h2><p>我们可以使用 Vue 的 <code>reactive()</code> API 来声明响应式状态。由 <code>reactive()</code> 创建的对象都是 JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>,其行为与普通对象一样:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-property">count</span>) <span class="hljs-comment">// 0</span><br>counter.<span class="hljs-property">count</span>++<br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br><code>reactive()</code> 只适用于对象 (包括数组和内置类型,如 <code>Map</code> 和 <code>Set</code>)。而另一个 API <code>ref()</code> 则可以接受任何值类型。<code>ref</code> 会返回一个包裹对象,并在 <code>.value</code> 属性下暴露内部值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> message = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message.<span class="hljs-property">value</span>) <span class="hljs-comment">// &quot;Hello World!&quot;</span><br>message.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;Changed&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>在组件的 <code>&lt;script setup&gt;</code> 块中声明的响应式状态,可以直接在模板中使用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>count is: &#123;&#123; counter.count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>使用任何<em><strong>有效的 JavaScript 表达式</strong></em></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h1 id="3-基础语法"><a href="#3-基础语法" class="headerlink" title="3. 基础语法"></a>3. 基础语法</h1><h2 id="1-属性绑定"><a href="#1-属性绑定" class="headerlink" title="1. 属性绑定"></a>1. 属性绑定</h2><blockquote><p>双大括号只能进行文本插值,为了给 attribute 绑定一个动态值,需要使用 <code>v-bind</code> 指令, 可以缩写只用 <code>:</code> 表示属性绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="动态绑定多个属性"><a href="#动态绑定多个属性" class="headerlink" title="动态绑定多个属性"></a>动态绑定多个属性</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> objectOfAttrs = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;container&#x27;</span>,<br>  <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;wrapper&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过不带参数的 <code>v-bind</code>,你可以将它们绑定到单个元素上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;objectOfAttrs&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;info:info,danger:danger&#125;&quot;</span>&gt;</span>我叫:&#123;&#123;name&#125;&#125;,年龄:&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">info</span>: <span class="hljs-literal">true</span>,  <br><span class="hljs-attr">danger</span>: <span class="hljs-literal">false</span>,  <br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[info,danger]&quot;</span>&gt;</span>我叫:&#123;&#123;name&#125;&#125;,年龄:&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">info</span>: <span class="hljs-string">&quot;c1&quot;</span>, <br><span class="hljs-attr">danger</span>: <span class="hljs-string">&quot;c2&quot;</span>,  <br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><blockquote><p>可以在绑定的表达式中使用一个组件暴露的方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;toTitleDate(date)&quot;</span>&gt;</span><br>  &#123;&#123; formatDate(date) &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-事件监听"><a href="#2-事件监听" class="headerlink" title="2. 事件监听"></a>2. 事件监听</h2><blockquote><p>使用 <code>v-on</code> 指令监听 DOM 事件,可以简写为 <code>@</code>,表示事件监听</p></blockquote><h3 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 更新组件状态</span><br>  count.<span class="hljs-property">value</span>++<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="带传参"><a href="#带传参" class="headerlink" title="带传参"></a>带传参</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">mouseover</span>=<span class="hljs-string">&quot;dosomething(&#x27;过来了&#x27;)&quot;</span> @<span class="hljs-attr">mouseout</span>=<span class="hljs-string">&quot;dosomething(&#x27;离开了&#x27;)&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;  <br><span class="hljs-attr">dosomething</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>)&#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)  <br>&#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-表单绑定"><a href="#3-表单绑定" class="headerlink" title="3. 表单绑定"></a>3. 表单绑定</h2><blockquote><p>同时使用 <code>v-bind</code> 和 <code>v-on</code> 来在表单的输入元素上创建双向绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;onInput&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onInput</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-comment">// v-on 处理函数会接收原生 DOM 事件</span><br>  <span class="hljs-comment">// 作为其参数。</span><br>  text.<span class="hljs-property">value</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>简化双向绑定,Vue 提供了一个 <code>v-model</code> 指令,它实际上是上述操作的语法糖</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips</p><ol><li><code>v-model</code> 会将被绑定的值与 <code>&lt;input&gt;</code> 的值自动同步</li><li><code>v-model</code> 不仅支持文本输入框,也支持诸如多选框、单选框、下拉框之类的输入类型</li></ol></blockquote><p><strong>完整 demo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>const text = ref(&#x27;&#x27;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;input v-model=&quot;text&quot; placeholder=&quot;Type here&quot;&gt;<br>  &lt;p&gt;&#123;&#123; text &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><blockquote><p>demo</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.2.47/vue.global.min.js&quot;&gt;&lt;/script&gt;--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">  </span><br><span class="language-css"><span class="hljs-selector-class">.info</span> &#123;  </span><br><span class="language-css"><span class="hljs-attribute">color</span>: aquamarine;  </span><br><span class="language-css">&#125;  </span><br><span class="language-css"><span class="hljs-selector-class">.danger</span> &#123;  </span><br><span class="language-css"><span class="hljs-attribute">color</span>: red;  </span><br><span class="language-css">&#125;  </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br>男:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>  <br>女:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br>篮球:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>  <br>足球:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h2&quot;</span>&gt;</span>  <br>排球:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;h3&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.city&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c3&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c4&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.field&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f1&quot;</span>&gt;</span>前端<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f2&quot;</span>&gt;</span>后端<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f3&quot;</span>&gt;</span>运维<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;f4&quot;</span>&gt;</span>算法<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.other&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clickme&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript">info : &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">gender</span>: <span class="hljs-string">&quot;1&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">hobby</span>: [<span class="hljs-string">&quot;h1&quot;</span>],  </span><br><span class="language-javascript"><span class="hljs-attr">city</span>: <span class="hljs-string">&quot;c1&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">field</span>: [<span class="hljs-string">&quot;f1&quot;</span>],  </span><br><span class="language-javascript"><span class="hljs-attr">other</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">clickme</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>)  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="4-条件渲染"><a href="#4-条件渲染" class="headerlink" title="4. 条件渲染"></a>4. 条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><blockquote><p>使用 <code>v-if</code> 指令来==<strong>有条件地渲染元素</strong>==（不一定渲染）, 也可以使用 <code>v-else</code> 和 <code>v-else-if</code> 来表示其他的条件分支</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h1 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;<span class="hljs-title class_">Vue</span> is awesome!&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>Oh no 😢<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><blockquote><p>v-show 根据**==变量的真假==<strong>决定是否显示该标签（</strong><em>一定会渲染但不一定显示</em>**）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=false&quot;</span>&gt;</span>用户名登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=true&quot;</span>&gt;</span>手机号登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">issms</span>: <span class="hljs-literal">false</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-列表渲染"><a href="#5-列表渲染" class="headerlink" title="5. 列表渲染"></a>5. 列表渲染</h2><blockquote><p>使用 <code>v-for</code> 指令来渲染一个基于源数组的列表</p></blockquote><h3 id="无索引"><a href="#无索引" class="headerlink" title="无索引"></a>无索引</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;todo.id&quot;</span>&gt;</span><br>    &#123;&#123; todo.text &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><ol><li><code>todo</code> 是一个局部变量,表示当前正在迭代的数组元素。它只能在 <code>v-for</code> 所绑定的元素上或是其内部访问,就像函数的作用域一样.</li><li>key 属性将它（唯一标识主键）作为<a href="https://cn.vuejs.org/api/built-in-special-attributes.html#key">特殊的 <code>key</code> attribute</a> 绑定到每个 <code>&lt;li&gt;</code></li></ol></blockquote><blockquote><p>更新列表有两种方式:<br>    1. 在源数组上调用变更方法:<br>        <code>todos.value.push(newTodo)</code><br>      2. 使用新的数组替代原数组:<br>        <code>todos.value = todos.value.filter(/* ... */)</code> </p></blockquote><p>完整 demo（实现列表动态增删）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"><span class="hljs-comment">// 给每个 todo 对象一个唯一的 id</span></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> newTodo = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> todos = <span class="hljs-title function_">ref</span>([</span><br><span class="language-javascript">  &#123; <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Learn HTML&#x27;</span> &#125;,</span><br><span class="language-javascript">  &#123; <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span><br><span class="language-javascript">  &#123; <span class="hljs-attr">id</span>: id++, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Learn Vue&#x27;</span> &#125;</span><br><span class="language-javascript">])</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addTodo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// ...</span></span><br><span class="language-javascript">  todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">id</span>:id++,<span class="hljs-attr">text</span>:newTodo.<span class="hljs-property">value</span>&#125;)</span><br><span class="language-javascript">  newTodo.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeTodo</span>(<span class="hljs-params">todo</span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-comment">// 方法1</span></span><br><span class="language-javascript">  todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">pop</span>(todo)</span><br><span class="language-javascript">  <span class="hljs-comment">// 方法2</span></span><br><span class="language-javascript">  todos.<span class="hljs-property">value</span> = todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">t</span>) =&gt;</span> t !== todo)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;addTodo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;newTodo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Add Todo<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;todo.id&quot;</span>&gt;</span><br>      &#123;&#123; todo.text &#125;&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;removeTodo(todo)&quot;</span>&gt;</span>X<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="有索引"><a href="#有索引" class="headerlink" title="有索引"></a>有索引</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(todo,index) in todos&quot;</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&#123;&#123;index&#125;&#125;</span>&gt;</span><br>    &#123;&#123; todo &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="有键值"><a href="#有键值" class="headerlink" title="有键值"></a>有键值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key) in item&quot;</span>&gt;</span><br>    &#123;&#123; key &#125;&#125;:&#123;&#123;value&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-计算属性"><a href="#6-计算属性" class="headerlink" title="6. 计算属性"></a>6. 计算属性</h2><blockquote><ol><li><a href="https://cn.vuejs.org/guide/essentials/computed.html"><code>computed()</code></a>。它可以让我们创建一个计算属性 ref,这个 ref 会动态地根据其他响应式数据源来计算其 <code>.value</code></li><li>computed <code>(计算属性)</code> 可用于快速计算视图（View）中显示的属性。这些计算将被<strong>缓存</strong>,并且只在需要时更新。computed 设置的初衷是能够<strong>解决复杂的计算</strong>,而不是直接在模板字符串里进行运算。</li></ol></blockquote><p>实现显示（隐藏）已完成的 todos</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; ref, computed &#125; from &#x27;vue&#x27;<br>let id = 0<br>const newTodo = ref(&#x27;&#x27;)<br>const hideCompleted = ref(false)<br>const todos = ref([<br>  &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;,<br>  &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;,<br>  &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;<br>])<br>const filteredTodos = computed(() =&gt; &#123;<br>  return hideCompleted.value<br>    ? todos.value.filter((t) =&gt; !t.done)<br>    : todos.value<br>&#125;)<br>function addTodo() &#123;<br>  todos.value.push(&#123; id: id++, text: newTodo.value, done: false &#125;)<br>  newTodo.value = &#x27;&#x27;<br>&#125;<br>function removeTodo(todo) &#123;<br>  todos.value = todos.value.filter((t) =&gt; t !== todo)<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;<br>    &lt;input v-model=&quot;newTodo&quot;&gt;<br>    &lt;button&gt;Add Todo&lt;/button&gt;<br>  &lt;/form&gt;<br>  &lt;ul&gt;<br>    &lt;li v-for=&quot;todo in filteredTodos&quot; :key=&quot;todo.id&quot;&gt;<br>      &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt;<br>      &lt;span :class=&quot;&#123; done: todo.done &#125;&quot;&gt;&#123;&#123; todo.text &#125;&#125;&lt;/span&gt;<br>      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>  &lt;button @click=&quot;hideCompleted = !hideCompleted&quot;&gt;<br>    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;<br>  &lt;/button&gt;<br>&lt;/template&gt;<br>&lt;style&gt;<br>.done &#123;<br>  text-decoration: line-through;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="7-文本插值"><a href="#7-文本插值" class="headerlink" title="7. 文本插值"></a>7. 文本插值</h2><blockquote><p>最基本的数据绑定形式是文本插值,它使用的是“Mustache”语法 (即双大括号)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>双大括号标签会被替换为<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html#declaring-reactive-state">相应组件实例中</a> <code>msg</code> 属性的值。同时每次 <code>msg</code> 属性更改时它也会同步更新。</p></blockquote><h2 id="8-原始-HTML"><a href="#8-原始-HTML" class="headerlink" title="8. 原始 HTML"></a>8. 原始 HTML</h2><blockquote><p>双大括号会将数据解释为纯文本,而不是 HTML。若想插入 HTML,需要使用 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-html"><code>v-html</code> 指令</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="4-Demo-1-表格增删"><a href="#4-Demo-1-表格增删" class="headerlink" title="4. Demo 1 表格增删"></a>4. Demo 1 表格增删</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;adduser&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(user,uid) in users&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;user.pwd&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.name!=&#x27;&#x27; &amp;&amp; user.pwd!=&#x27;&#x27;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deluser(uid)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">users</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-string">&quot;&quot;</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">adduser</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">let</span> userinfo = &#123;<span class="hljs-attr">name</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">pwd</span>&#125;;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">push</span>(userinfo);  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span>=<span class="hljs-string">&quot;&quot;</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">pwd</span>=<span class="hljs-string">&quot;&quot;</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(userinfo);  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">deluser</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">uid</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">users</span>.<span class="hljs-title function_">splice</span>(uid,<span class="hljs-number">1</span>);  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-Demo-2-登录（axios）"><a href="#5-Demo-2-登录（axios）" class="headerlink" title="5. Demo 2 登录（axios）"></a>5. Demo 2 登录（axios）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VueDemo3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=false&quot;</span>&gt;</span>用户名登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;issms=true&quot;</span>&gt;</span>手机号登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.username&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;info.pwd&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;issms&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;手机号&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sms.phone&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>验证码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;验证码&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sms.code&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">issms</span>: <span class="hljs-literal">false</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">info</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">username</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">pwd</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">sms</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">phone</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">code</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">login</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">let</span> dataobj = <span class="hljs-variable language_">this</span>.<span class="hljs-property">issms</span> ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">sms</span> : <span class="hljs-variable language_">this</span>.<span class="hljs-property">info</span>;  </span><br><span class="language-javascript"><span class="hljs-title function_">axios</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost/login&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">parameters</span>: <span class="hljs-string">&quot;&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: dataobj,  </span><br><span class="language-javascript"><span class="hljs-attr">headers</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);  </span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-组件"><a href="#6-组件" class="headerlink" title="6. 组件"></a>6. 组件</h1><blockquote><p>提高相同代码的复用率。</p></blockquote><h2 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h2><blockquote><pre><code class="hljs">局部组件需要挂载到 Vue 根组件上,***components: &#123;  alias: component&#125;  </code></pre></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo4<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- 引入局部子组件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">  </span></span><br><span class="language-xml"><span class="language-handlebars">const login = &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">data: function () &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">msg: &quot;局部组件&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">username: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">pwd: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">template: `  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars">`,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;;  </span></span><br><span class="language-xml"><span class="language-handlebars">var app = new Vue(&#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">el: &quot;#app&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">data: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">components: &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">login: login,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)  </span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><blockquote><pre><code class="hljs">全局子组件不用挂载到 Vue 上,直接用***Vue. Component (&#39;component_name&#39;,&#123;&#125;）***</code></pre></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo5<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- 引入全局子组件--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">login</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">login</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">  </span></span><br><span class="language-xml"><span class="language-handlebars">Vue.component(&#x27;login&#x27;, &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">data: function () &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">return &#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">msg: &quot;局部组件&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">username: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">pwd: &quot;&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">template: `  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span></span><br><span class="language-xml"><span class="language-handlebars">`,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);  </span></span><br><span class="language-xml"><span class="language-handlebars">var app = new Vue(&#123;  </span></span><br><span class="language-xml"><span class="language-handlebars">el: &quot;#app&quot;,  </span></span><br><span class="language-xml"><span class="language-handlebars">data: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">methods: &#123;&#125;,  </span></span><br><span class="language-xml"><span class="language-handlebars">&#125;)  </span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="7-路由"><a href="#7-路由" class="headerlink" title="7. 路由"></a>7. 路由</h1><blockquote><p>引入 vue-router:<br><code> &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/4.1.6/vue-router.global.min.js&quot;&gt;&lt;/script&gt;</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@3.5.3/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/course&quot;</span>&gt;</span>课程<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;首页组件&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Course</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;课程组件&quot;</span>,  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">routes</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/course&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Course</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;);  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">components</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-title class_">Home</span>: <span class="hljs-title class_">Home</span>,  </span><br><span class="language-javascript"><span class="hljs-title class_">Course</span>: <span class="hljs-title class_">Course</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">router</span>: router  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="8-路由使用"><a href="#8-路由使用" class="headerlink" title="8. 路由使用"></a>8. 路由使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>vuedemo6<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue-router@3.5.3/dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>Logo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Home</span> = &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-attr">imgls</span>: [],  </span><br><span class="language-javascript">&#125;  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-title function_">axios</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://picsum.photos/v2/list&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">headers</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>  </span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span> = res.<span class="hljs-property">data</span>;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span>, res.<span class="hljs-property">data</span>);  </span><br><span class="language-javascript">&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;  </span><br><span class="language-javascript"><span class="hljs-comment">// console.log(error);  </span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(error.<span class="hljs-property">message</span>)  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;  </span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">imgls</span>)  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">template</span>: <span class="hljs-string">`  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div class=&quot;red&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;div v-for=&quot;img in imgls&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;a :href=&quot;img.download_url&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;img :src=&quot;img.url&quot; style=&quot;align-content: center&quot; alt=&quot;加载图片失败&quot;&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/a&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">&lt;/div&gt;  </span></span><br><span class="hljs-string"><span class="language-javascript">`</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript">&#125;;  </span><br><span class="language-javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">routes</span>: [  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>&#125;,  </span><br><span class="language-javascript">],  </span><br><span class="language-javascript">&#125;);  </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;  </span><br><span class="language-javascript"><span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,  </span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">methods</span>: &#123;&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">components</span>: &#123;  </span><br><span class="language-javascript"><span class="hljs-title class_">Home</span>: <span class="hljs-title class_">Home</span>,  </span><br><span class="language-javascript">&#125;,  </span><br><span class="language-javascript"><span class="hljs-attr">router</span>: router,  </span><br><span class="language-javascript">&#125;)  </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="9-Element-UI-使用"><a href="#9-Element-UI-使用" class="headerlink" title="9. Element-UI 使用"></a>9. Element-UI 使用</h1><blockquote><p>Element 是国内饿了么公司提供的一套开源前端框架,简洁优雅,提供了 Vue、React、Angular 等多个版本。<br>文档地址: <a href="https://element-plus.org/zh-CN/#/zh-CN">一个 Vue 3 UI 框架 | Element Plus</a><br>安装: npm i element-ui<br>引入 Element:<br>main. js (vue 2):</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>:#app,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>);<br></code></pre></td></tr></table></figure><p>main. js (vue 3):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.ts</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="第三方图标库"><a href="#第三方图标库" class="headerlink" title="第三方图标库"></a>第三方图标库</h2><p>由于 Element UI 提供的字体图符较少,一般会采用其他图表库,如著名的 Font<br>Awesome<br>Font Awesome 提供了 675 个可缩放的矢量图标,可以使用 cSS 所提供的所有特<br>性对它们进行更改,包括大小、颜色、阴影或者其他任何支持的效果。<br>文档地址: <a href="http://fontawesome.dashgame.com/">http://fontawesome.dashgame.com/</a><br>安装: <code>npm i font-awesome</code><br>使用: <code>import &#39;font-awesome/css/font-awesome.min.css&#39;</code></p><h1 id="10-Axios"><a href="#10-Axios" class="headerlink" title="10. Axios"></a>10. Axios</h1><h2 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h2><blockquote><p>Axios 是一个基于 promise 网络请求库,作用于 node. js 和浏览器中。<br>Axios 在浏览器端使用 XMLHttpRequests 发送网络请求,并能自动完成 JSON<br>数据的转换。<br>安装: npm install axios<br>地址: <a href="https://www.axios-http.cn/">https://www.axios-http.cn/</a></p></blockquote><ol><li>Get 请求:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//向给定ID的用户发起请求</span><br>axios.<span class="hljs-title function_">get</span>(/user?<span class="hljs-variable constant_">ID</span>=<span class="hljs-number">12345</span><span class="hljs-string">&#x27;)</span><br><span class="hljs-string"> .then(function(response)&#123;</span><br><span class="hljs-string">   //处理成功情况</span><br><span class="hljs-string">   console.log(response);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .catch(function (error)(</span><br><span class="hljs-string">   //处理错误情况</span><br><span class="hljs-string">   console.log(error);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function （）&#123; </span><br><span class="hljs-string">  //总是会执行</span><br><span class="hljs-string"> &#125;);</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">/／上述请求也可以按以下方式完成（可选）<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/user&#x27;,&#123;</span><br><span class="hljs-string">   params:&#123;</span><br><span class="hljs-string">    ID:12345</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function (response)&#123;</span><br><span class="hljs-string">   console.log(response);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .catch(function (error)&#123;</span><br><span class="hljs-string">   console.log(error);</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"> .then(function ()&#123; </span><br><span class="hljs-string">  //总是会执行</span><br><span class="hljs-string"> &#125;);</span><br></code></pre></td></tr></table></figure><ol start="2"><li>POST 请求:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>   <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;Fred&#x27;</span>,<br>   <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;Flintstone&#x27;</span><br>&#125;)<br> .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;)<br> .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br> &#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>异步回调问题（async/await）:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//支持async/await用法</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUser</span>(<span class="hljs-params"></span>) (<br> <span class="hljs-keyword">try</span> (<br>   <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user?ID=12345&#x27;</span>);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response)<br> &#125; <span class="hljs-keyword">catch</span> (error)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br></code></pre></td></tr></table></figure><ol start="4"><li>其他请求方式:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//发起一个post请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br> <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br> <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/user/12345&#x27;,</span><br><span class="hljs-string"> data: &#123;</span><br><span class="hljs-string">   firstName: &quot;</span><span class="hljs-title class_">Fred</span><span class="hljs-string">&#x27;,</span><br><span class="hljs-string">   lastName:&quot;Flintstone&#x27;</span><br> &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><pre><code class="hljs">axios.get (url, configl)axios.delete (url[, config])axios.head (uri[, config))axios.options (url, config])axios.post (url, datal, configl)axios.put (url, datal, config]l)axios.patch (url, datal, config]l)</code></pre><h2 id="2-与-Vue-整合"><a href="#2-与-Vue-整合" class="headerlink" title="2. 与 Vue 整合"></a>2. 与 Vue 整合</h2><h2 id="3-跨域"><a href="#3-跨域" class="headerlink" title="3. 跨域"></a>3. 跨域</h2><blockquote><ol><li>为了保证浏览器的安全,不同源的客户端脚本在没有明确授权的情况下,不能读写对方资源,称为同源策略,同源策略是浏览器安全的基石</li><li>同源策略 （Sameoriginpolicy）是一种约定,它是浏览器最核心也最基本的安全功能</li><li>所谓同源 (即指在同一个域) 就是两个页面具有相同的协议（protocol）,主机 (host) 和端口号  (port)</li><li>当一个请求 url 的协议、域名、端口三者之间任意一个与当前页面 url 不同即为跨域,此时无法读取非同源网页的 Cookie,无法向非同源地址发送 AJAX 请求</li></ol></blockquote><p>解决方案:</p><ul><li>CORS（Cross-Origin Resource Sharing）是由 W 3 C 制定的一种跨域资源共享技术标准,其目的就是为了解决前端的跨域请求。</li><li>CORS 可以在不破坏即有规则的情况下,通过后端服务器实现 CORS 接口,从而实现跨域通信。</li><li>CORS 将请求分为两类:简单请求和非简单请求,分别对跨域通信提供了支持。</li></ul><h3 id="1-Spring-Boot-中配置-CORS"><a href="#1-Spring-Boot-中配置-CORS" class="headerlink" title="1. Spring Boot 中配置 CORS"></a>1. Spring Boot 中配置 CORS</h3><p>在传统的 Java EE 开发中,可以通过过滤器统一配置,而 Spring Boot 中对此则提供了更加简洁的解决方案<br><strong>方法 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> (<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> (<br>     registry.addMapping（<span class="hljs-string">&quot;/**&quot;</span>）<span class="hljs-comment">//允许跨域访问的路径</span><br>      .allowedorigins（<span class="hljs-string">&quot;*&quot;</span>）<span class="hljs-comment">//允许跨域访问的源</span><br>.allowedMethods(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;OPTIONS&quot;</span>,<span class="hljs-string">&quot;DELETE&quot;</span>）<span class="hljs-comment">//允许请求方法</span><br>      .maxAge（<span class="hljs-number">168000</span>）/／预检间隔时间<br>      .allowedHeaders（<span class="hljs-string">&quot;*&quot;</span>）<span class="hljs-comment">//允许头部设置</span><br>      .allowCredentials（<span class="hljs-literal">true</span>）；<span class="hljs-comment">//是否发送cookie</span><br></code></pre></td></tr></table></figure><p><strong>方法 2:</strong><br>给控制器类前加 CrossOrigin 注解使用默认跨域配置<br><font color="#ff0000">@CrossOrigin</font></p><h2 id="4-全局配置-Axios"><a href="#4-全局配置-Axios" class="headerlink" title="4. 全局配置 Axios"></a>4. 全局配置 Axios</h2><blockquote><p>在实际项目开发中,几乎每个组件中都会用到 axios 发起数据请求。此时会遇到如下两个问题:<br>每个组件中都需要导入 axios<br>每次发请求都需要填写完整的请求路径<br>可以通过全局配置的方式解决上述问题:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//配置请求根路径</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;http://api.com&#x27;</span><br><span class="hljs-comment">//将 axios 作为全局的自定义属性,每个组件可以在内部直接访问 (Vue3)</span><br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$http</span> = axios<br><span class="hljs-comment">//将 axios 作为全局的自定义属性,每个组件可以在内部直接访问 (Vue2)</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$http</span> = axios<br></code></pre></td></tr></table></figure><hr><h1 id="11-VueRouter"><a href="#11-VueRouter" class="headerlink" title="11. VueRouter"></a>11. VueRouter</h1><h2 id="1-安装与使用"><a href="#1-安装与使用" class="headerlink" title="1. 安装与使用"></a>1. 安装与使用</h2><blockquote><ul><li>Vue 路由 vue-router 是官方的路由插件,能够轻松的管理 SPA 项目中组件的切换。</li><li>Vue 的单页面应用是基于路由和组件的,路由用于设定访问路径,并将路径和组件映射起来</li><li>vue-router 目前有 3. x 的版本和 4. x 的版本,vue-router 3. x 只能结合 vue 2 进行使用,vue-router 4. x 只能结合 vue 3 进行使用</li><li>安装: **npm install vue-router@4 **</li></ul></blockquote><h3 id="创建路由组件"><a href="#创建路由组件" class="headerlink" title="创建路由组件"></a>创建路由组件</h3><p>在项目中定义 Discover. vue、Friends. vue、MyMusic. vue 三个组件,将来要使用 vue-router 来控制它们的展示与切换:<br>Discover. vue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发现音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Discover&quot;</span>  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure> <template>     <div>        <h1>发现音乐</h1>     </div> </template>Friends. vue :<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>关注<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Friends&quot;</span>  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure> <template>     <div>         <h1>关注</h1>     </div> </template>MyMusic. vue:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;MyMusic&quot;</span>  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure>---### 声明路由链接和占位标签> 可以使用 `<router-link>` 标签来声明路由链接,并使用 `<router-view>` 标签来声明路由占位符。示例代码如下:<p>App. vue:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>APP 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--声明路由链接--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover&quot;</span>&gt;</span>发现音乐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/mymusic&quot;</span>&gt;</span>我的音乐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/friend&quot;</span>&gt;</span>关注<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-comment">&lt;!--声明路由占位标签--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="创建路由模块"><a href="#创建路由模块" class="headerlink" title="创建路由模块"></a>创建路由模块</h3><p>在项目中创建 index. js 路由模块,加入以下代码:<br>vue 2 路由的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Discover</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Discover. vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Friends</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Friends. vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyMusic</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/MyMusic. vue&#x27;</span><br><span class="hljs-comment">//将 VueRouter 设置为 Vue 的插件</span><br><span class="hljs-title class_">Vue</span>. use (<span class="hljs-title class_">VueRouter</span>)<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (&#123;<br>     <span class="hljs-regexp">/ /</span>指定 hash 属性与组件的对应关系<br>     <span class="hljs-attr">routes</span>: [<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/discover&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Discover</span> &#125;,<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/friends&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Friends</span> &#125;,<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/mymusic&#x27;, component: MyMusic&#125;,</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">export default router</span><br></code></pre></td></tr></table></figure><p>vue 3 路由的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">HomeView</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/HomeView. vue&#x27;</span>  <br><span class="hljs-keyword">const</span> router = createRouter (&#123;  <br><span class="hljs-attr">history</span>: createWebHistory (<span class="hljs-keyword">import</span>. meta. env. <span class="hljs-variable constant_">BASE_URL</span>),  <br><span class="hljs-attr">routes</span>: [  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,  <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,  <br><span class="hljs-attr">component</span>: <span class="hljs-title class_">HomeView</span>  <br>&#125;,  <br>&#123;  <br><span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,  <br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,  <br><span class="hljs-comment">// route level code-splitting  </span><br><span class="hljs-comment">// this generates a separate chunk (About.[hash]. js) for this route  </span><br><span class="hljs-comment">// which is lazy-loaded when the route is visited.  </span><br><span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span> (<span class="hljs-string">&#x27;../views/AboutView. vue&#x27;</span>)  <br>&#125;  <br>]  <br>&#125;)  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><hr><h3 id="挂载路由模块"><a href="#挂载路由模块" class="headerlink" title="挂载路由模块"></a>挂载路由模块</h3><p>在 main. js 中导入并挂载 router</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App. vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-title class_">Vue</span>. config. productionTip = <span class="hljs-literal">false</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span> (&#123;<br><span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h (<span class="hljs-title class_">App</span>),<br>router<br>&#125;).<span class="hljs-property">$mount</span> (<span class="hljs-string">&#x27; #app &#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><blockquote><p>路由重定向指的是:用户在访问地址 A 的时候,强制用户跳转到地址 C,从而展示特定的组件页面。</p><p>通过路由规则的 redirect 属性,指定一个新的路由地址,可以很方便地设置路由的重定向:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (t<br>    / /指定 hash 属性与组件的对应关系<br>    <span class="hljs-attr">routes</span>: [<br>       <span class="hljs-comment">//当用户访问／时,跳转到/discover</span><br>      &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/, redirect: &#x27;</span>/discover<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">      &#123;path: &#x27;</span>/discover<span class="hljs-string">&#x27;, component: Discover&#125;,</span><br><span class="hljs-string">      &#123;path: &#x27;</span>/friends<span class="hljs-string">&#x27;, component: Friends&#125;,</span><br><span class="hljs-string">      &#123;path: &#x27;</span>/my<span class="hljs-string">&#x27;, component: MyMusic&#125;</span><br><span class="hljs-string">   ]</span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-子路由"><a href="#2-子路由" class="headerlink" title="2. 子路由"></a>2. 子路由</h2><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><blockquote><p>在 Discover. vue 组件中,声明 toplist 和 playlist 的子路由链接以及子路由占位符。示例代码如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>发现音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-comment">&lt;!--子路由链接--&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover/toplist&quot;</span>&gt;</span>推荐<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/discover/playlist&quot;</span>&gt;</span>歌单<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>[!NOTE] Tips<br>在 <code>src/router/index. js</code> 路由模块中,导入需要的组件,并使用 children 属性声明子路由规则:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (t<br>     / /指定 hash 属性与组件的对应关系<br>     <span class="hljs-attr">routes</span>:[<br>       &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&#x27;, redirect: &quot;</span>/discover<span class="hljs-string">&#x27;&#125;,</span><br><span class="hljs-string">       &#123;</span><br><span class="hljs-string">           path: &#x27;</span>/discover<span class="hljs-string">&#x27;,</span><br><span class="hljs-string">           component: Discover,</span><br><span class="hljs-string">           //通过 chi 1 dren 属性,嵌套声明子路由</span><br><span class="hljs-string">           chiidren: [</span><br><span class="hljs-string">               &#123; path: &quot;toplist&quot;, component: TopList &#125;,</span><br><span class="hljs-string">               &#123; path: &quot;playlist&quot;, component: PlayList &#125;,</span><br><span class="hljs-string">          ]</span><br><span class="hljs-string">       &#125;,</span><br><span class="hljs-string">&#123; path: &#x27;</span>/friends<span class="hljs-string">&#x27;, component: Friends &#125;,</span><br><span class="hljs-string">&#123; path: &#x27;</span>/mymusic<span class="hljs-string">&#x27;, component: MyMusic &#125;,</span><br><span class="hljs-string">   1</span><br><span class="hljs-string">3)</span><br></code></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>思考:有如下 3 个路由链接:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;router-link to=<span class="hljs-string">&quot;/product/1&quot;</span>&gt;商品 <span class="hljs-number">1</span>&lt;/router-link&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/product/2&quot;</span>&gt;</span>商品 2<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/product/3&quot;</span>&gt;</span>商品 3<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br> <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span> (t<br>    / /指定 hash 属性与组件的对应关系<br>    <span class="hljs-attr">routes</span>: [<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/product/1&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>,<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/product/2&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>,<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/product/3&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">Product</span>,<br>   ]<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>上述方式复用性非常差。<br>动态路由指的是:把 Hash 地址中可变的部分定义为参数项,从而提高路由规则的复用性。在 vue-router 中使用英文的冒号（:）来定义路由的参数项。示例代码如下:<br><code>&#123;path: &quot;/product/: id&#39;, component: Product&#125;</code><br>通过动态路由匹配的方式染出来的组件中,可以使用 <code>$route. params</code> 对象访问到动态匹配的参数值,比如在商品详情组件的内部,<strong>根据 id 值,请求不同的商品数据</strong>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Product 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    ！--获取动态的 id 值--&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>($route. params. id)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br> &lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> t</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//组件的名称</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Product&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>为了简化路由参数的获取形式,vue-router 允许在路由规则中开启 <strong>props</strong> 传参。示例代码如下: <code>&#123; path:/: id&#39;, component: Product, props: true&#125;</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Product 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>   &lt;!--获取动态的id值--&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> &#123;&#123;id&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//组件的名称</span></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Product&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"> props : [<span class="hljs-string">&quot;id&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><table><thead><tr><th align="center">声明式</th><th align="center">编程式</th></tr></thead><tbody><tr><td align="center"><code>&lt;router-link :to=&quot;...&quot; &gt;</code></td><td align="center"><code>router. push (...)</code></td></tr></tbody></table><blockquote><ul><li><p>除了使用 <code>&lt;router-link&gt;</code> 创建 a 标签来定义导航链接,我们还可以借助 router 的实例方法,通过编写代码来实现。</p></li><li><p>想要导航到不同的 URL,则使用 <code>router. push</code> 方法。这个方法会向 history 栈添加一个新的记录,所以,当用户点击浏览器后退按钮时,则回到之前的 URL。</p></li><li><p>当你点击 <code>&lt;router-link&gt;</code> 时,这个方法会在内部调用,所以说,点击<a href="router-link:to=&quot;...&quot;">router-link:to=&quot;...&quot;</a>等同于调用 router. push（…）。</p></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> &lt;template&gt;<br>    <span class="language-xml">&lt;button@click=&quot;gotoProduct(2)&quot;&gt;跳转到商品 2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br> &lt;/template&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    methods : &#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-attr">gotoProduct</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>. push (<span class="hljs-string">&#x27;/production/$&#123;id&#125;&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h2 id="3-导航守卫"><a href="#3-导航守卫" class="headerlink" title="3. 导航守卫"></a>3. 导航守卫</h2><blockquote><p>导航守卫可以控制路由的访问权限。示意图如下:<br>全局导航守卫会拦截每个路由规则,从而对每个路由进行访问权限的控制。<br>你可以使用 <code>router. beforeEach</code> 注册一个全局前置守卫:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">router. beforeEach (<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span>&#123;<br>   <span class="hljs-keyword">if</span> (to. path ===<span class="hljs-string">&#x27;/main&#x27;</span> &amp;&amp; ! isAuthenticated) &#123;<br>      next (<span class="hljs-string">&#x27;/login&#x27;</span>)<br>   &#125;<br>   <span class="hljs-keyword">else</span> &#123;<br>      next ()<br>   &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>to:即将要进入的目标</li><li>from:当前导航正要离开的路由</li><li>在守卫方法中如果声明了 next 形参,则必须调用 next () 函数,否则不允许用户访问任何一个路由！<ol><li>直接放行:<code>next ()</code></li><li>强制其停留在当前页面:<code>next (false)</code></li><li>强制其跳转到登录页面:<code>next (&#39;/login&#39;)</code></li></ol></li></ul><h1 id="12-VueX"><a href="#12-VueX" class="headerlink" title="12 VueX"></a>12 VueX</h1><h2 id="1-VueX-介绍"><a href="#1-VueX-介绍" class="headerlink" title="1 VueX 介绍"></a>1 VueX 介绍</h2><blockquote><p>对于组件化开发来说,大型应用的状态往往跨越多个组件。在多层嵌套的父子<br>组件之间传递状态已经十分麻烦,而 Vue 更是没有为兄弟组件提供直接共享数<br>据的办法。</p><p>基于这个问题,许多框架提供了解决方案使用全局的状态管理器,将所有<br>分散的共享数据交由状态管理器保管,Vue 也不例外。</p><p>Vuex 是一个专为 Vuejs 应用程序开发的状态管理库,采用集中式存储管理应<br>用的所有组件的状态。</p><p>简单的说,Vuex 用于管理分散在 Vue 各个组件中的数据。</p><p>安装: <code>npm install vuex@next</code></p></blockquote><h3 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h3><blockquote><p>每一个 Vuex 应用的核心都是一个 store,与普通的全局对象不同的是,基于 Vue 数据与视图绑定的特点,当 store 中的状态发生变化时,与之绑定的视图也会被重新渲染。</p></blockquote><blockquote><p>store 中的状态不允许被直接修改,改变 store 中的状态的唯一途径就是显式地提交 (commit）mutation,这可以让我们方便地跟踪每一个状态的变化。</p><p>在大型复杂应用中,如果无法有效地跟踪到状态的变化,将会对理解和维护代&gt; 码带来极大的困扰。</p><p>Vuex 中有 5 个重要的概念:<strong>State、Getter、Mutation、Action、Module</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307272110993.png" alt="image.png|400"></p><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><blockquote><p>State 用于维护所有应用层的状态,并确保应用只有唯一的数据源</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//创建一个新的 store 实例</span><br><span class="hljs-keyword">const</span> store = createstore (&#123;<br>  state () &#123;<br>   <span class="hljs-keyword">return</span>  &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>   &#125;<br> &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>   increment (state) &#123;<br>    state.<span class="hljs-property">count</span>++<br>   &#125;<br> &#125;<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 <code>this.$store.state.count</code> 访问数据,也可以先用 <strong>mapState</strong> 辅助函数将其映射下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在单独构建的版本中辅助函数为 Vuex.mapstate</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br> <span class="hljs-comment">// ...</span><br> <span class="hljs-attr">computed</span>: mapState (&#123;<br>  <span class="hljs-comment">//箭头函数可使代码更简练</span><br>   <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span>,<br>  <span class="hljs-comment">//传字符串参数‘count&#x27;等同于‘state =&gt; state. count&#x27;</span><br>  <span class="hljs-attr">countAlias</span>: <span class="hljs-string">&#x27;count&#x27;</span>,<br>   <span class="hljs-comment">//为了能够使用‘this＇获取局部状态,必须使用常规函数</span><br>   countplusLocalState (state) &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">localcount</span><br>    &#125;<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><blockquote><p>Mutation 提供修改 State 状态的方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//创建一个新的 store 实例</span><br> <span class="hljs-keyword">const</span> store = createstore (&#123;<br>  state <span class="hljs-keyword">return</span> &#123; <br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    increment (state) &#123;<br>      state.<span class="hljs-property">count</span>++<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 store.commit 来提交 mutation</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>  increment () &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>也可以先用 mapMutation 辅助函数将其映射下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-attr">methods</span>: &#123;<br>   ...mapMutations ([<br>    <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-comment">//将‘this.increment ()&#x27;映射为‘this.$store.commit (&#x27;increment&#x27;）</span><br>    <span class="hljs-comment">//‘mapMutations＇也支持载荷:</span><br>    <span class="hljs-string">&#x27;incrementBy&#x27;</span><span class="hljs-comment">//将‘this.incrementBy(amount)’映射为‘this.$store.commit(&#x27;increment&#x27;, amount)</span><br>]),<br></code></pre></td></tr></table></figure><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote><p>Action 类似 Mutation,不同在于:</p></blockquote><blockquote><p>Action 不能直接修改状态,只能通过提交 mutation 来修改,<strong>Action 可以包含异步操作</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = createstore (&#123;<br> <span class="hljs-attr">state</span>: &#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>&#125;,<br> <span class="hljs-attr">mutations</span>: &#123;<br>  increment (state) &#123;<br>    state. count++<br>  &#125;<br>&#125;,<br> <span class="hljs-attr">actions</span>: &#123;<br>  increment (context) <br>    context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>&#125;<br>&#125;<br> &#125;)<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 <code>this.$store.dispatch (xxx&#39;)</code> 分发 action,或者使用 <code>mapActions</code> 辅助函数先将其映射下来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br>methods : &#123;<br>  ...<span class="hljs-title function_">mapActions</span>([<br>   <span class="hljs-string">&#x27;increment&#x27;</span>,<span class="hljs-comment">//将‘this.increment ()映射为‘this.$store.dispatch (&#x27;increment&#x27;)</span><br>   <span class="hljs-comment">//mapActions＇也支持载荷:</span><br>   <span class="hljs-string">&#x27;incrementBy&#x27;</span><span class="hljs-comment">//将‘this.incrementBy (amount)’映射为&#x27;this.$store.dispatch (&#x27;incrementBy&#x27;,amount)&#x27;</span><br> ]),<br></code></pre></td></tr></table></figure><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><blockquote><p>Getter 维护由 State 派生的一些状态,这些状态随着 State 状态的变化而变化</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> store = createstore (&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">todos</span>:[<br>     &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,<br>     &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;...&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br>   ]<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-attr">doneTodos</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">done</span>)<br>     &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>在组件中,可以直接使用 <code>this.$store.getters.doneTodos</code>,也可以先用 <code>mapGetters</code> 辅助函数将其映射下来,代码如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br> <span class="hljs-comment">// ...</span><br> <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">//使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...mapGetters ([<br>     <span class="hljs-string">&#x27;doneTodosCount&#x27;</span><br>     <span class="hljs-string">&quot;anotherGetter&#x27;,</span><br><span class="hljs-string">    // ...</span><br><span class="hljs-string">  ])</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="通过属性访问"><a href="#通过属性访问" class="headerlink" title="通过属性访问"></a>通过属性访问</h4><blockquote><p>Getter 会暴露为 <code>store.getters</code> 对象,你可以以属性的形式访问这些值:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodos</span> <span class="hljs-comment">// -&gt; [&#123; id: 1, text: &#x27;...&#x27;, done: true &#125;]</span><br></code></pre></td></tr></table></figure><blockquote><p>Getter 也可以接受其他 getter 作为第二个参数:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// ...</span><br>  doneTodosCount (state, getters) &#123;<br>    <span class="hljs-keyword">return</span> getters.<span class="hljs-property">doneTodos</span>.<span class="hljs-property">length</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosCount</span> <span class="hljs-comment">// -&gt; 1</span><br></code></pre></td></tr></table></figure><blockquote><p>我们可以很容易地在任何组件中使用它:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: &#123;<br>  doneTodosCount () &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">doneTodosCount</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意,getter 在通过属性访问时是作为 Vue 的响应式系统的一部分缓存其中的。</p></blockquote><h4 id="通过方法访问"><a href="#通过方法访问" class="headerlink" title="通过方法访问"></a>通过方法访问</h4><blockquote><p>你也可以通过让 getter 返回一个函数,来实现给 getter 传参。在你对 store 里的数组进行查询时非常有用。</p></blockquote> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">getters</span>: &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">getTodoById</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> === id)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">store.<span class="hljs-property">getters</span>.<span class="hljs-title function_">getTodoById</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// -&gt; &#123; id: 2, text: &#x27;...&#x27;, done: false &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意,getter 在通过方法访问时,每次都会去进行调用,而不会缓存结果。</p></blockquote><h4 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a><code>mapGetters</code> 辅助函数</h4><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...<span class="hljs-title function_">mapGetters</span>([<br>      <span class="hljs-string">&#x27;doneTodosCount&#x27;</span>,<br>      <span class="hljs-string">&#x27;anotherGetter&#x27;</span>,<br>      <span class="hljs-comment">// ...</span><br>    ])<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果你想将一个 getter 属性另取一个名字,使用对象形式:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">...<span class="hljs-title function_">mapGetters</span>(&#123;<br>  <span class="hljs-comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span><br>  <span class="hljs-attr">doneCount</span>: <span class="hljs-string">&#x27;doneTodosCount&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><hr><h2 id="2-Vuex-安装与使用"><a href="#2-Vuex-安装与使用" class="headerlink" title="2 Vuex 安装与使用"></a>2 Vuex 安装与使用</h2><blockquote><p>当一个组件需要获取多个状态的时候,将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题,我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性,让你少按几次键:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-comment">// 箭头函数可使代码更简练</span><br>    <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span>,<br>    <span class="hljs-comment">// 传字符串参数 &#x27;count&#x27; 等同于 `state =&gt; state.count`</span><br>    <span class="hljs-attr">countAlias</span>: <span class="hljs-string">&#x27;count&#x27;</span>,<br>    <span class="hljs-comment">// 为了能够使用 `this` 获取局部状态,必须使用常规函数</span><br>    countPlusLocalState (state) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">localCount</span><br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当映射的计算属性的名称与 state 的子节点名称相同时,我们也可以给 <code>mapState</code> 传一个字符串数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>([<br>  <span class="hljs-comment">// 映射 this.count 为 store.state.count</span><br>  <span class="hljs-string">&#x27;count&#x27;</span><br>])<br></code></pre></td></tr></table></figure><hr><p><strong>eg:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的音乐<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;murl&quot;</span>&gt;</span>音乐&#123;&#123; mid &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;nmurl&quot;</span>&gt;</span>音乐&#123;&#123; mid + 1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;nextMusic&quot;</span>&gt;</span>下一首<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>  <br>&lt;/template&gt;  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;mapState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;MyMusic&quot;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// computed: &#123;  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// getMid() &#123;  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// return this.$store.state.mid  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// &#125;  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// &#125;,  </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>([  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-string">&#x27;mid&#x27;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml">]),  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">return</span> &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">murl</span>: <span class="hljs-string">&quot;/mymusic/0&quot;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">nmurl</span>: <span class="hljs-string">&quot;/mymusic/1&quot;</span>,  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;,  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>: &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">nextMusic</span>(<span class="hljs-params"></span>) &#123;  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">murl</span> = <span class="hljs-string">&quot;/mymusic/&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">mid</span>  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">nmurl</span> = <span class="hljs-string">&quot;/mymusic/&quot;</span> + (<span class="hljs-variable language_">this</span>.<span class="hljs-property">mid</span> + <span class="hljs-number">1</span>)  </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">mid</span>)  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml">&#125;  </span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span>  <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span>  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>getter—eg:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>  <br><span class="hljs-comment">// 创建一个新的 store 实例  </span><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;  <br><span class="hljs-attr">state</span>: &#123;  <br><span class="hljs-attr">mid</span>: <span class="hljs-number">0</span>,  <br><span class="hljs-attr">todos</span>: [  <br>&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学习&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,  <br>&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;吃饭&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;,  <br>&#123;<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;  <br>]  <br>&#125;,  <br><span class="hljs-attr">getters</span>: &#123;  <br><span class="hljs-title function_">doneTodos</span>(<span class="hljs-params">state</span>) &#123;  <br><span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">done</span>)  <br>&#125;,  <br><span class="hljs-title function_">doneTodosCount</span>(<span class="hljs-params">state, getters</span>) &#123;  <br><span class="hljs-keyword">return</span> getters.<span class="hljs-property">doneTodos</span>.<span class="hljs-property">length</span>  <br>&#125;,  <br><span class="hljs-attr">getTodoById</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> <span class="hljs-function">(<span class="hljs-params">id</span>) =&gt;</span> &#123;  <br><span class="hljs-keyword">return</span> state.<span class="hljs-property">todos</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">todo</span> =&gt;</span> todo.<span class="hljs-property">id</span> === id)  <br>&#125;  <br>&#125;,  <br><span class="hljs-attr">mutations</span>: &#123;  <br><span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;  <br>state.<span class="hljs-property">mid</span>++  <br>&#125;  <br>&#125;  <br>&#125;)  <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><h1 id="13-MockJS"><a href="#13-MockJS" class="headerlink" title="13 MockJS"></a>13 MockJS</h1><h2 id="MockJs-介绍"><a href="#MockJs-介绍" class="headerlink" title="MockJs 介绍"></a>MockJs 介绍</h2><blockquote><p>Mock.js 是一款前端开发中<strong>拦截 Ajax 请求再生成随机数据响应</strong>的工具,可以用来模拟服务器响应</p><p>优点是非常简单方便,无侵入性,基本覆盖常用的接口数据类型.</p><p>支持生成随机的==文本、数字、布尔值、日期、邮箱、链接、图片、颜色==等。<br>安装: <code>npm install mockjs</code></p></blockquote><h2 id="MockJs-使用"><a href="#MockJs-使用" class="headerlink" title="MockJs 使用"></a>MockJs 使用</h2><blockquote><p>在项目中创建 mock 目录,新建 index.js 文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入 mockjs</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span><br><span class="hljs-comment">//使用 mockjs 模拟数据</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (<span class="hljs-string">&#x27;/product/search&#x27;</span>, &#123;<br>    <span class="hljs-string">&quot;ret&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:<br>&#123;<br>       <span class="hljs-string">&quot;mtime&quot;</span>: <span class="hljs-string">&quot;@datetime&quot;</span>,<span class="hljs-comment">//随机生成日期时间</span><br>       <span class="hljs-string">&quot;score|1-800&quot;</span>: <span class="hljs-number">800</span>,<span class="hljs-comment">//随机生成1-800的数字</span><br>       <span class="hljs-string">&quot;rank|1-100&quot;</span>:  <span class="hljs-number">100</span>,<span class="hljs-comment">//随机生成1-100的数字</span><br>       <span class="hljs-string">&quot;stars|1-5&quot;</span>: <span class="hljs-number">5</span>,<span class="hljs-comment">//随机生成1-5的数字</span><br>       <span class="hljs-string">&quot;nickname&quot;</span>: <span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//随机生成中文名字</span><br>       <span class="hljs-comment">//生成图片</span><br><span class="hljs-string">&quot;img&quot;</span>:<span class="hljs-string">&quot;@image(&#x27;200x100&#x27;,&#x27;#ffcc33&#x27;, &#x27;#FFF&#x27;,&#x27;png&#x27;,&#x27;Fast Mock&#x27;)&quot;</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>在 main. js 中导入 mock 下的 index.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createApp&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span>  <br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>  <br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./mock&#x27;</span>  <br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/main.css&#x27;</span>  <br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)  <br>app.<span class="hljs-title function_">use</span>(router)  <br>app.<span class="hljs-title function_">use</span>(store)  <br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>组件中调用 <strong>mock. js</strong> 中模拟的数据接口,这时返回的 response 就是 mock.js 中用==Mock.mock (‘url’, data)中设置的 data==</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">mounted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/prduct/search&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>   &#125;)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><p><code>Mock.mock(rurl?, rtype?, template|function ( options ) )</code></p><blockquote><p> rurl,表示需要拦截的 URL,可以是 <strong>URL 字符串或 URL 正则</strong><br> rtype,表示需要拦截的 <strong>Ajax 请求类型</strong>。例如 GET、POST、PUT、DELETE 等。<br> template,表示数据模板,可以是<strong>对象或字符串</strong><br> function,表示用于<strong>生成响应数据的函数</strong>。</p></blockquote><blockquote><p>设置延时请求到数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//延时 400 ms 请求到数据</span><br> <span class="hljs-title class_">Mock</span>.<span class="hljs-property">setup</span> (&#123;<br>   <span class="hljs-attr">timeout</span>: <span class="hljs-number">400</span><br>&#125;)<br> <span class="hljs-comment">//延时 200-600 毫秒请求到数据</span><br> <span class="hljs-title class_">Mock</span>.<span class="hljs-property">setup</span> (&#123;<br>   <span class="hljs-attr">timeout</span>: <span class="hljs-string">&#x27;200-600&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="数据生成规则"><a href="#数据生成规则" class="headerlink" title="数据生成规则"></a>数据生成规则</h2><blockquote><ul><li>mock 的语法规范包含两层规范:数据模板 （DTD）、数据占位符 (DPD)</li><li>数据模板中的每个属性由 3 部分构成:**属性名 name、生成规则 rule、属性值<br>  value: ‘name|rule’: value</li></ul></blockquote><blockquote><p>属性名和生成规则之间用竖线<code>|</code>分隔,生成规则是可选的,有 7 种格式:</p></blockquote><p><font color="#ff0000">‘name|min-max’: value</font><br><font color="#ff0000">‘namelcount’: value</font><br><font color="#ff0000">‘name|min-max.dmin-dmax’: value</font><br><font color="#ff0000">‘name|min-max.dcount’: value</font><br><font color="#ff0000">‘name|count.dmin-dmax’: value</font><br><font color="#ff0000">‘name|count.dcount’: value</font><br><font color="#ff0000">‘name|+step’: value</font></p><h2 id="生成规则与示例"><a href="#生成规则与示例" class="headerlink" title="生成规则与示例"></a>生成规则与示例</h2><ol><li>属性值是字符串 String</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过重复 string 生成一个字符串,重复次数大于等于 min,小于等于 max。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: string<br><span class="hljs-comment">//通过重复 string 生成一个字符串,重复次数等于 count。</span><br><span class="hljs-string">&#x27;name|count&#x27;</span>: string<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>   <span class="hljs-string">&#x27;name 1|1-3&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,  <span class="hljs-comment">//重复生成 1 到 3 个 a（随机）</span><br>   <span class="hljs-string">&#x27;name 2|2&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>   / /生成 bb<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>属性值是数字 Number</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">/ /属性值自动加 <span class="hljs-number">1</span>,初始值为 number。<br><span class="hljs-string">&#x27;name|+1&#x27;</span>: number<br><span class="hljs-comment">//生成一个大于等于 min、小于等于 max 的整数,属性值 number 只是用来确定类型。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: number<br><span class="hljs-comment">//生成一个浮点数,整数部分大于等于 min、小于等于 max,小数部分保留 dmin 到 dmax 位。</span><br><span class="hljs-string">&#x27;name|min-max.dmin-dmax&#x27;</span>: number<br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>     <span class="hljs-string">&#x27;number1|1-100.1-10&#x27;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&#x27;number2|123.1-10&#x27;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&#x27;number3|123.3&#x27;</span>: <span class="hljs-number">1</span>,<br>     <span class="hljs-string">&#x27;number4|123.10&#x27;</span>: <span class="hljs-number">1</span> <span class="hljs-number">123</span><br>&#125;)<br><span class="hljs-comment">//结果:</span><br>&#123;<br>    <span class="hljs-string">&quot;number1&quot;</span>: <span class="hljs-number">12.92</span>,<br>    <span class="hljs-string">&quot;number2&quot;</span>: <span class="hljs-number">123.51</span>,<br>    <span class="hljs-string">&quot;number3&quot;</span>: <span class="hljs-number">123.777</span>,<br>    <span class="hljs-string">&quot;number4&quot;</span>:<span class="hljs-number">123.1231091814</span><br>&#125;<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>    <span class="hljs-string">&#x27;name1|+1&#x27;</span>:<span class="hljs-number">4</span>,   <span class="hljs-comment">//生成4,如果循环每次加1</span><br>    <span class="hljs-string">&#x27;name2|1-7&#x27;</span>:<span class="hljs-number">2</span>,   <span class="hljs-comment">//生成一个数字,1到7之间</span><br>    <span class="hljs-string">&#x27;name3|1-4.5-8&#x27;</span>:<span class="hljs-number">1</span> <span class="hljs-comment">////生成一个小数,整数部分1到4,小数部分5到8位,数字1只是为了确定类型</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>属性值是布尔型 Boolean</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//随机生成一个布尔值,值为 true 的概率是 1/2,值为 false 的概率同样是1/2。</span><br><span class="hljs-string">&#x27;namel1&#x27;</span>: bolean<br><span class="hljs-comment">//随机生成一个布尔值,值为 value 的概率是 min/（min+max),值为!value 的概率是 max／（min+max）。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: value<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>    <span class="hljs-string">&#x27;name|1&#x27;</span>: <span class="hljs-literal">true</span>,   <span class="hljs-comment">//生成一个布尔值,各一半</span><br>    <span class="hljs-string">&#x27;name1|1-3&#x27;</span>: <span class="hljs-literal">true</span>  <span class="hljs-comment">//1/4 是 true,3/4 是 false</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>属性值是对象 Object</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//从属性值 object 中随机选取 count 个属性。</span><br><span class="hljs-string">&#x27;name|count&#x27;</span>: object<br><span class="hljs-comment">//从属性值 object 中随机选取 min 到 max 个属性。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: object<br><span class="hljs-keyword">var</span> obj = &#123;<br>   <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>   <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>   <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>,<br>   <span class="hljs-attr">d</span>: <span class="hljs-number">4</span><br>&#125;<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>    <span class="hljs-string">&#x27;name|1-3&#x27;</span>: obj,  <span class="hljs-comment">//随机从 obj 中寻找 1 到 3 个属性,新对象</span><br>    <span class="hljs-string">&#x27;name|2&#x27;</span>: obj   <span class="hljs-comment">//随机从 onj 中找到两个属性,新对象</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li>属性值是数组 Array</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//从属性值 array 中随机选取 1 个元素,作为最终值。</span><br><span class="hljs-string">&#x27;name|1&#x27;</span>: array<br><span class="hljs-comment">//从属性值 array 中顺序选取 1 个元素,作为最终值。</span><br><span class="hljs-string">&#x27;name|+1&#x27;</span>: array<br><span class="hljs-comment">//通过重复属性值 array 生成一个新数组,重复次数大于等于 min,小于等于 max。</span><br><span class="hljs-string">&#x27;name|min-max&#x27;</span>: array<br><span class="hljs-comment">//通过重复属性值 array 生成一个新数组,重复次数为 count。</span><br><span class="hljs-string">&#x27;name|count&#x27;</span>: array<br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<br>   <span class="hljs-comment">//通过重复属性值 array 生成一个新数组,重复次数为 1-3次。</span><br>   <span class="hljs-string">&quot;favorite_games|1-3&quot;</span>: [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">23</span>,<span class="hljs-number">28</span>,<span class="hljs-number">42</span>,<span class="hljs-number">45</span>],<br>&#125;); <br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>   <span class="hljs-string">&#x27;namel|1&#x27;</span>: arr,   <span class="hljs-comment">//从数组里随机取出 1 个值</span><br>   <span class="hljs-string">&#x27;name2|2&#x27;</span>: arr,   <span class="hljs-comment">//数组重复 count 次,这里 count 为2</span><br>   <span class="hljs-string">&#x27;name3|1-3&#x27;</span>: arr,  <span class="hljs-comment">//数组重复 1 到 3 次</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="6"><li>属性值是函数 Function</li></ol><p>执行函数 function,取其返回值作为最终的属性值,函数的上下文为属性’name’所在的对象。<br>‘name’: function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>)<br>   <span class="hljs-keyword">return</span> x+<span class="hljs-number">10</span>;<br><span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>   <span class="hljs-string">&#x27;name&#x27;</span>: fun (<span class="hljs-number">10</span>)   <span class="hljs-comment">//返回函数的返回值 20</span><br>&#125;)<br></code></pre></td></tr></table></figure><ol start="7"><li>属性值是正则表达式 RegExp</li></ol><p>根据正则表达式 regexp 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。<br>‘name’: regexp</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Mock</span>.<span class="hljs-property">mock</span> (&#123;<br>    <span class="hljs-string">&#x27;regexp 1&#x27;</span>: <span class="hljs-regexp">/[a-z][A-z][0-9]/</span>,<br>    <span class="hljs-string">&#x27;regexp 2&#x27;</span>: <span class="hljs-regexp">/\w\w\s|s\d\D/</span>,<br>    <span class="hljs-string">&#x27;regexp 3&#x27;</span>: <span class="hljs-regexp">/d[5,103/</span><br><span class="hljs-regexp">&#125;)</span><br><span class="hljs-regexp">// =&gt;</span><br><span class="hljs-regexp">&#123;</span><br><span class="hljs-regexp">    &quot;regexp1&quot;: &quot;pJ7&quot;,</span><br><span class="hljs-regexp">    &quot;regexp2&quot;: &quot;F)\fp1G&quot;,</span><br><span class="hljs-regexp">    &quot;regexp3&quot;: &quot;561659409&quot;</span><br><span class="hljs-regexp">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="数据占位符-DPD"><a href="#数据占位符-DPD" class="headerlink" title="数据占位符 DPD"></a>数据占位符 DPD</h2><p>占位符只是在属性值字符串中占个位置,并不出现在最终的属性值中。<br>占位符的格式为:</p><blockquote><p><strong>@占位符<br>@占位符 (参数［,参数])</strong></p></blockquote><p>关于占位符需要知道以下几点</p><ul><li>用<code>@</code>标识符标识后面的字符串是占位符</li><li>占位符引用的是 <code>Mock.Random</code> 中的方法。</li><li>可以通过 <code>Mock.Random.extend (）</code>来扩展自定义占位符。</li><li>占位符也<strong>可以引用数据模板中的属性</strong>。</li><li>占位符会<strong>优先引用数据模板中的属性</strong>。</li><li>占位符支持<strong>相对路径和绝对路径</strong>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//引入mockjs</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Mock</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span><br><span class="hljs-comment">//使用mockjs模拟数据</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;/api/msdk/proxy/query_common_credit&#x27;</span>, &#123;<br>   <span class="hljs-string">&quot;ret&quot;</span>:<span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;data&quot;</span>:<br>   &#123;<br>       <span class="hljs-string">&quot;mtime&quot;</span>:<span class="hljs-string">&quot;@datetime&quot;</span>,<span class="hljs-comment">//随机生成日期时间</span><br>       <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-string">&quot;@natural(1,800)&quot;</span>,<span class="hljs-comment">//随机生成1-800的数字</span><br>       <span class="hljs-string">&quot;rank&quot;</span>:<span class="hljs-string">&quot;@natural(1,100)&quot;</span>,<span class="hljs-comment">//随机生成1-100的数字</span><br>       <span class="hljs-string">&quot;stars&quot;</span>:<span class="hljs-string">&quot;@natural(0,5)&quot;</span>,<span class="hljs-comment">//随机生成1-5的数字</span><br>       <span class="hljs-string">&quot;nickname&quot;</span>:<span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//随机生成中文名字</span><br>&#125;) ;<br></code></pre></td></tr></table></figure><h3 id="基础随机内容的生成"><a href="#基础随机内容的生成" class="headerlink" title="基础随机内容的生成"></a>基础随机内容的生成</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;string|1-10&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-comment">//随机生成 1 到 10 个等号</span><br>  <span class="hljs-string">&quot;string2|3&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-comment">//随机生成 2 个或者三个等号</span><br>  <span class="hljs-string">&quot;number|+1&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-comment">//从 o 开始自增</span><br>  <span class="hljs-string">&quot;number 2|1-10.1-3&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-comment">//生成一个小数,小数点前面 1 到 10,小数点后 1 到 3 位</span><br>  <span class="hljs-string">&quot;boolean&quot;</span>:<span class="hljs-string">&quot;@boolean（1,2,true）&quot;</span>,<span class="hljs-comment">//生成 boolean 值三个参数,1 表示第三个参数 true 出现的概率,2 表示 false 出现的概率</span><br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;@cname&quot;</span>,<span class="hljs-comment">//随机生成中文姓名</span><br>  <span class="hljs-string">&quot;firstname&quot;</span>:<span class="hljs-string">&quot;@cfirst&quot;</span>,<span class="hljs-comment">//随机生成中文姓</span><br>  <span class="hljs-string">&quot;int&quot;</span>:<span class="hljs-string">&quot;@integer(1,10)&quot;</span>,<span class="hljs-comment">//随机生成 1-10 的整数</span><br>  <span class="hljs-string">&quot;float&quot;</span>:<span class="hljs-string">&quot;@float (1,2,3,4)&quot;</span>,<span class="hljs-comment">//随机生成浮点数,四个参数分别为,整数部分的最大最小值和小数部分的最大最小值</span><br>  <span class="hljs-string">&quot;range&quot;</span>:<span class="hljs-string">&quot;@range(1,100,10)&quot;</span>,<span class="hljs-comment">//随机生成整数数组,三个参数为,最大最小值和加的步长</span><br>  <span class="hljs-string">&quot;natural&quot;</span>:<span class="hljs-string">&quot;@natural(60,100)&quot;</span>,<span class="hljs-comment">//随机生成自然数（大于零的数）</span><br>  <span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;@email&quot;</span>,<span class="hljs-comment">//邮箱</span><br>  <span class="hljs-string">&quot;ip&quot;</span>: <span class="hljs-string">&quot;@ip&quot;</span>,<span class="hljs-comment">// ip</span><br>  <span class="hljs-string">&quot;datatime&quot;</span>:<span class="hljs-string">&quot;@date（&#x27;yy-MM-ddhh:mm: ss&#x27;)&quot;</span><span class="hljs-comment">//随机生成指定格式的时间</span><br>  <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="列表数据"><a href="#列表数据" class="headerlink" title="列表数据"></a>列表数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>;<span class="hljs-string">&quot;0000&quot;</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pageNo&quot;</span>: <span class="hljs-string">&quot;@integer (1, 100)&quot;</span>,<br>    <span class="hljs-string">&quot;totalRecord&quot;</span>: <span class="hljs-string">&quot;@integer (100, 1000)&quot;</span>,<br>    <span class="hljs-string">&quot;pagesize&quot;</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-string">&quot;list|10&quot;</span>: [&#123;<br>      <span class="hljs-string">&quot;id|+1&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;@cword(10)&quot;</span>,<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;@cword(20)&quot;</span>,<br>      <span class="hljs-string">&quot;descript&quot;</span>: <span class="hljs-string">&quot;@csentence(20,50)&quot;</span>,<br>      <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-string">&quot;@float(10,100,10,100)&quot;</span>,<br>   &#125;]<br> &#125;,<br>  <span class="hljs-string">&quot;desc&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>mockjs 可以生成任意大小，任意颜色块，且用文字填充内容的图片，使我们不用到处找图片资源就能轻松实现图片的模拟展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;0000&quot;</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;pageNo&quot;</span>: <span class="hljs-string">&quot;@integer(1, 100)&quot;</span>,<br>    <span class="hljs-string">&quot;totalRecord&quot;</span>: <span class="hljs-string">&quot;@integer(100, 1000)&quot;</span>,<br>    <span class="hljs-string">&quot;pagesize&quot;</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-string">&quot;list|10&quot;</span>: [&#123;<br>     <span class="hljs-comment">//参数从左到右依次为，图片尺寸，背景色，前景色（及文字颜色），图片格式，图片中间的填充文字内容</span><br>     <span class="hljs-string">&quot;image&quot;</span>: <span class="hljs-string">&quot;@image (&#x27;200 x 100&#x27;，&#x27;#ffcc33 &#x27;，&#x27;#FFF&#x27;，&#x27;png&#x27;，&#x27;Fast Mock&#x27;)&quot;</span><br>   &#125;]<br>  &#125;,<br>  <span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;成功&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mock-Random"><a href="#Mock-Random" class="headerlink" title="Mock. Random"></a>Mock. Random</h3><blockquote><p>Mock. Random 是一个工具类，用于生成各种随机数据。</p><p>Mock. Random 的方法在数据模板中称为『占位符』，书写格式为@占位符 (参数[, 参数)。<br>用法示例:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Random</span> = <span class="hljs-title class_">Mock</span>.<span class="hljs-property">Random</span><br><span class="hljs-title class_">Random</span>.<span class="hljs-title function_">email</span>()<br><span class="hljs-comment">// =&gt; &quot; n.clark@mi1ler.io &quot;</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(<span class="hljs-string">&#x27;@email&#x27;</span>)<br><span class="hljs-comment">// =&gt; &quot; y.lee@lewis.org &quot;</span><br><span class="hljs-title class_">Mock</span>.<span class="hljs-title function_">mock</span>(&#123;<span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;@email&#x27;</span>&#125;)<br><span class="hljs-comment">// =&gt; &#123; email: &quot;v.lewis@hall.gov&quot; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>[!NOTE] tips<br>如果前端请求的后端接口需要携带参数，那么前端 mock 的 index. js 里的拦截请求的写法应该如下所示（用正则表达式进行匹配接口）：<br><code>Mock.mock(RegExp(&#39;/product/search.*&#39;),&#123;...&#125;)</code></p></blockquote><h1 id="14-企业级集成方案"><a href="#14-企业级集成方案" class="headerlink" title="14 企业级集成方案"></a>14 企业级集成方案</h1><h2 id="vue-element-admin-介绍"><a href="#vue-element-admin-介绍" class="headerlink" title="vue-element-admin 介绍"></a>vue-element-admin 介绍</h2><blockquote><ul><li>vue-element-admin 是一个后台前端解决方案，它基于 vue 和 element-ui 实现。</li><li>内置了 i 18 国际化解决方案，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件。</li><li>可以快速搭建企业级中后台产品原型。</li><li>地址: <a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/">https://panjiachen.github.io/vue-element-admin-site/zh/guide/</a></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">克隆项目</span><br>git clone https://github.com/PanJiaChen/vue-admin-template.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入项目目录</span><br>cd vue-admin-template<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>npm install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题</span><br>npm install --registry=https://registry.npm.taobao.org<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>npm run dev<br></code></pre></td></tr></table></figure><h1 id="15-JWT-跨域认证"><a href="#15-JWT-跨域认证" class="headerlink" title="15. JWT 跨域认证"></a>15. JWT 跨域认证</h1><h2 id="1-Session-认证"><a href="#1-Session-认证" class="headerlink" title="1. Session 认证"></a>1. Session 认证</h2><p>互联网服务离不开用户认证。一般流程是下面这样。</p><blockquote><ul><li>用户向服务器发送<strong>用户名和密码</strong>。</li><li>服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等。</li><li>服务器向用户返回一个 session_id，写入用户的 Cookie。</li><li>用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</li><li>服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</li></ul></blockquote><p>session 认证流程：<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311353929.png" alt="|350"><br>session 认证的方式应用非常普遍，但也存在一些问题，扩展性不好，如果是服务<br>器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能<br>够读取 session，针对此种问题一般有两种方案:</p><blockquote><ol><li><p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。</p></li><li><p>一种方案是服务器不再保存 session 数据，所有数据都保存在客户端，每次请求都发回服务器。Token 认证就是这种方案的一个代表。</p></li></ol></blockquote><h2 id="2-Token-认证"><a href="#2-Token-认证" class="headerlink" title="2. Token 认证"></a>2. Token 认证</h2><p>Token 是在服务端产生的一串字符串, 是客户端访问资源接口（API) 时所需要的资<br>源凭证，流程如下：</p><blockquote><ul><li>客户端使用用户名跟密码请求登录，服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端</li><li>客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 token，如果验证成功，就向客户端返回请求的数据</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311410745.png" alt="image.png|350"></p><ul><li><p>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放<br>token 数据。</p></li><li><p>用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力<br>减少频繁的查询数据库</p></li><li><p>token 完全由应用管理，所以它可以避开同源策略</p></li></ul><hr><h2 id="3-JWT-的使用"><a href="#3-JWT-的使用" class="headerlink" title="3. JWT 的使用"></a>3. JWT 的使用</h2><blockquote><p>JSON Web Token（简称 JWT）是一个 token 的具体实现方式，是目前最流行<br>的跨域认证解决方案。<br>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，具体如下:</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;姓名&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;角色&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;管理员&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;到期时间&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2018 年 7 月 1 日 0 点 0 分&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。<br>为了防止用户篡改数据，服务器在生成这个对象的时候，会加上<strong>签名</strong>。</p></blockquote><blockquote><p>JWT 的由三个部分组成，依次如下：<br>  <em><strong>Header (头部)<br>  Payload (负载)<br>  Signature  (签名)</strong></em><br>  三部分最终组合为完整的字符串，中间使用·分隔，如下：<br>  Header.Payload.Signature<br>           <code>eyJhbGci0iJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdwIi0iIxMjMoNTY30DkwIiwibmFtzsI6IkpvaG4 gRG91IiwiaXNTb2NpYWwiOnRydwV9. 4pcPyMD09o1PSyXnrXCjTwXyr4BsezdI1AVTmud2fU4</code></p></blockquote><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><blockquote><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;H256&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>alg 属性表示签名的算法（<strong>algorithm</strong>），默认是 HMAC SHA 256 (写成</li></ul><p><strong>HS256</strong>)</p><ul><li>typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT</li><li>最后，将上面的 JSON 对象使用 Base 64 URL 算法转成字符串。</li></ul><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><blockquote><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了 7 个官方字段，供选用。</p></blockquote><ul><li>iss (issuer)：签发人</li><li>exp (expiration time): 过期时间</li><li>sub (subject): 主题</li><li>aud (audience): 受众</li><li>nbf (Not Before): 生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (WT ID): 编号</li></ul><blockquote><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在个部分。<br>   这个 JSON 对象也要使用 <strong>Base 64 URL</strong> 算法转成字符串。</p></blockquote><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><blockquote><p> Signature 部分是对前两部分的签名，防止数据篡改。<br>    首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户; 然后，使用 Header 里面指定的签名算法 （默认是 HMAC SHA 256），按照下面的公式产生签名。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">HMACSHA <span class="hljs-number">256</span> (<br>base64UrlEncode (header) + <span class="hljs-string">&quot;.&quot;</span> +<br>base64UrlEncode (payload)<span class="hljs-punctuation">,</span><br>secret)<br></code></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（’.’）分隔，就可以返回给用户。<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307311433682.png" alt="image.png|450"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</li><li>客户端每次与服务器通信，都要带上这个 JWT，可以把它放在 Cookie 里面自动发送，但是这样不能跨域。</li><li>更好的做法是放在 HTTP 请求的头信息’Authorization’字段里面，单独发送。</li></ul><h3 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h3><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="生成-Token"><a href="#生成-Token" class="headerlink" title="生成 Token"></a>生成 Token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//7 天过期</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800</span>;<br><span class="hljs-comment">//32 位秘钥</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;<br><br><span class="hljs-comment">//生成 token</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span>&#123;<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span> (now.getTime() + <span class="hljs-number">1000</span> * expire);<br>   <span class="hljs-keyword">return</span> Jwts.builder ()<br>            .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>)<br>            .setSubject(username)<br>            .setIssuedAt(now)<br>            .setExpiration(expiration)<br>            .signWith(SignatureAlgorithm.HS512, secret)<br>            .compact();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解析-token"><a href="#解析-token" class="headerlink" title="解析 token"></a>解析 token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>    <span class="hljs-keyword">return</span> Jwts.parser()  <br>            .setSigningKey(secret)  <br>            .parseClaimsJws(token)  <br>            .getBody();  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="后端完整部分"><a href="#后端完整部分" class="headerlink" title="后端完整部分"></a>后端完整部分</h4><p><code>UserController. java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 6 - 1 19:56 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.controller;  <br>  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.entity.User;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.mapper.UserMapper;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.JwtUtils;  <br><span class="hljs-keyword">import</span> com.alleyf.airesume.utils.Result;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;  <br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;  <br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;  <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  <br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;  <br>  <br><span class="hljs-keyword">import</span> java.util.List;  <br>  <br><span class="hljs-meta">@Api(tags = &quot;用户&quot;, value = &quot;用户&quot;)</span>  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-meta">@CrossOrigin</span>  <br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;  <br>    <span class="hljs-meta">@Autowired</span>  <br>    UserMapper userMapper;  <br><br>    <span class="hljs-meta">@ApiOperation(&quot;用户登录&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JwtUtils.generateToken(user.getUsername());  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;token&quot;</span>, token);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;获取用户信息&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/info&quot;)</span>  <span class="hljs-comment">//&quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">info</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> JwtUtils.getClaimsByToken(token).getSubject();  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://img2.baidu.com/it/u=1325995315,4158780794&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;</span>;  <br>        <span class="hljs-keyword">return</span> Result.ok().data(<span class="hljs-string">&quot;name&quot;</span>, username).data(<span class="hljs-string">&quot;avatar&quot;</span>, url);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;注销&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/logout&quot;)</span> <span class="hljs-comment">// &quot;token:xxx&quot;  </span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> Result.ok();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;查询所有用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryAll&quot;)</span>  <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryAllUser</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.queryAllUserAndTask();  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br><span class="hljs-comment">//        return userMapper.selectList(null);  </span><br>        <span class="hljs-keyword">return</span> userMapper.selectByName(username);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByMPName&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByMPName</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照用户名路径查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPMPName/&#123;username&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryByPMPName</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.selectOne(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="hljs-string">&quot;username&quot;</span>, username));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;按照页码查询用户(MP)&quot;)</span>  <br>    <span class="hljs-meta">@GetMapping(&quot;/queryByPage/&#123;page&#125;&quot;)</span>  <br>    <span class="hljs-keyword">public</span> IPage <span class="hljs-title function_">queryByPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-type">int</span> page)</span> &#123;  <br>        Page&lt;User&gt; page1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, <span class="hljs-number">5</span>);  <br>        <span class="hljs-type">IPage</span> <span class="hljs-variable">iPage</span> <span class="hljs-operator">=</span> userMapper.selectPage(page1, <span class="hljs-literal">null</span>);  <br>        <span class="hljs-keyword">return</span> iPage;  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@ApiOperation(&quot;添加用户&quot;)</span>  <br>    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;  <br>        <span class="hljs-keyword">return</span> userMapper.insert(user) &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;添加成功&quot;</span> : <span class="hljs-string">&quot;添加失败&quot;</span>;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Result.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*  </span><br><span class="hljs-comment"> * Copyright (c) alleyf 2023 - 5 - 29 &#125;9:52 * 适度编码益脑，沉迷编码伤身，合理安排时间，享受快乐生活。 * */</span>  <br><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;  <br>    <span class="hljs-keyword">private</span> Boolean success;  <br>    <span class="hljs-keyword">private</span> Integer code;  <br>    <span class="hljs-keyword">private</span> String message;  <br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Result</span><span class="hljs-params">()</span> &#123;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">ok</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Success);  <br>        r.setSuccess(<span class="hljs-literal">true</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;成功&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Result</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();  <br>        r.setCode(ResultCode.Error);  <br>        r.setSuccess(<span class="hljs-literal">false</span>);  <br>        r.setMessage(<span class="hljs-string">&quot;失败&quot;</span>);  <br>        <span class="hljs-keyword">return</span> r;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">success</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setSuccess(success);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">message</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setMessage(message);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">code</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setCode(code);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(String key, Object value)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data.put(key, value);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">data</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.setData(map);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getSuccess</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSuccess</span><span class="hljs-params">(Boolean success)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.success = success;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(Integer code)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.code = code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.message = message;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> data;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(Map&lt;String, Object&gt; data)</span> &#123;  <br>        <span class="hljs-built_in">this</span>.data = data;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>JwtUtils.java:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.alleyf.airesume.utils;  <br>  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Claims;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.Jwts;  <br><span class="hljs-keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;  <br>  <br><span class="hljs-keyword">import</span> java.util.Date;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtUtils</span> &#123;  <br>    <span class="hljs-comment">//7 天过期  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expire</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800L</span>;  <br>    <span class="hljs-comment">//32 位秘钥  </span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdfghiabcdfghiabcdfghiabcdfghi&quot;</span>;  <br>  <br>    <span class="hljs-comment">//生成 token  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateToken</span><span class="hljs-params">(String username)</span> &#123;  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(now.getTime() + <span class="hljs-number">1000</span> * expire);  <br>        <span class="hljs-keyword">return</span> Jwts.builder()  <br>                .setHeaderParam(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;JWT&quot;</span>)  <br>                .setSubject(username)  <br>                .setIssuedAt(now)  <br>                .setExpiration(expiration)  <br>                .signWith(SignatureAlgorithm.HS512, secret)  <br>                .compact();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Claims <span class="hljs-title function_">getClaimsByToken</span><span class="hljs-params">(String token)</span> &#123;  <br>        <span class="hljs-keyword">return</span> Jwts.parser()  <br>                .setSigningKey(secret)  <br>                .parseClaimsJws(token)  <br>                .getBody();  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Front_end_development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像分类</title>
    <link href="/2023/03/73453d2eb27d.html"/>
    <url>/2023/03/73453d2eb27d.html</url>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><blockquote><ul><li><p>LeNet：Yan LeCun 等人于 1998 年第一次将卷积神经网络应用到图像分类任务上[1]，在手写数字识别任务上取得了巨大成功。</p></li><li><p>AlexNet：Alex Krizhevsky 等人在 2012 年提出了 AlexNet[2], 并应用在大尺寸图片数据集 ImageNet 上，获得了 2012 年 ImageNet 比赛冠军(ImageNet Large Scale Visual Recognition Challenge，ILSVRC）。</p></li><li><p>VGG：Simonyan 和 Zisserman 于 2014 年提出了 VGG 网络结构[3]，是当前最流行的卷积神经网络之一，由于其结构简单、应用性极强而深受广大研究者欢迎。</p></li><li><p>GoogLeNet：Christian Szegedy 等人在 2014 提出了 GoogLeNet[4]，并取得了 2014 年 ImageNet 比赛冠军。</p></li><li><p>ResNet：Kaiming He 等人在 2015 年提出了 ResNet[5]，通过引入残差模块加深网络层数，在 ImagNet 数据集上的错误率降低到 3.6%，超越了人眼识别水平。ResNet 的设计思想深刻地影响了后来的深度神经网络的设计。</p></li></ul></blockquote><h2 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h2><center><img src="https://ai-studio-static-online.cdn.bcebos.com/82e4124e2e6a4231bcde17e086bc86ba732d3e81dcd7415f86fb4ef050aa7772" width = "800"></center><center><br>图1：LeNet模型网络结构示意图</center><p><strong>【提示】：</strong></p><blockquote><p>[!NOTE] Tips<br>卷积层的输出特征图如何当作全连接层的输入使用呢？</p><p>卷积层的输出数据格式是 $[N, C, H, W]$，在输入全连接层的时候，会自动将数据拉平，</p><p>也就是对每个样本，自动将其转化为长度为 $K$ 的向量，</p><p>其中 $K = C \times H \times W$，一个 mini-batch 的数据维度变成了 $N\times K$ 的二维向量。</p></blockquote><hr><h3 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><h4 id="定义网络结构"><a href="#定义网络结构" class="headerlink" title="定义网络结构"></a>定义网络结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入需要的包</span><br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> Conv2D, MaxPool2D, Linear<br><br><br><br><span class="hljs-comment">## 组网</span><br><br><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><br><br><br><span class="hljs-comment"># 定义 LeNet 网络结构</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LeNet</span>(paddle.nn.Layer):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_classes=<span class="hljs-number">1</span></span>):<br><br>        <span class="hljs-built_in">super</span>(LeNet, self).__init__()<br><br>        <span class="hljs-comment"># 创建卷积和池化层</span><br>        <span class="hljs-comment"># 创建第1个卷积层</span><br><br>        self.conv1 = Conv2D(in_channels=<span class="hljs-number">1</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">5</span>)<br><br>        self.max_pool1 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：池化层未改变通道数；当前通道数为6</span><br>        <span class="hljs-comment"># 创建第2个卷积层</span><br><br>        self.conv2 = Conv2D(in_channels=<span class="hljs-number">6</span>, out_channels=<span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">5</span>)<br><br>        self.max_pool2 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 创建第3个卷积层</span><br><br>        self.conv3 = Conv2D(in_channels=<span class="hljs-number">16</span>, out_channels=<span class="hljs-number">120</span>, kernel_size=<span class="hljs-number">4</span>)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span><br>        <span class="hljs-comment"># 输入size是[28,28]，经过三次卷积和两次池化之后，C*H*W等于120</span><br><br>        self.fc1 = Linear(in_features=<span class="hljs-number">120</span>, out_features=<span class="hljs-number">64</span>)<br><br>        <span class="hljs-comment"># 创建全连接层，第一个全连接层的输出神经元个数为64， 第二个全连接层输出神经元个数为分类标签的类别数</span><br><br>        self.fc2 = Linear(in_features=<span class="hljs-number">64</span>, out_features=num_classes)<br><br>    <span class="hljs-comment"># 网络的前向计算过程</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br><br>        x = self.conv1(x)<br><br>        <span class="hljs-comment"># 每个卷积层使用Sigmoid激活函数，后面跟着一个2x2的池化</span><br><br>        x = F.sigmoid(x)<br><br>        x = self.max_pool1(x)<br><br>        x = F.sigmoid(x)<br><br>        x = self.conv2(x)<br><br>        x = self.max_pool2(x)<br><br>        x = self.conv3(x)<br><br>        <span class="hljs-comment"># 尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]</span><br><br>        x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br><br>        x = self.fc1(x)<br><br>        x = F.sigmoid(x)<br><br>        x = self.fc2(x)<br><br>        <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><h4 id="查看网络各层形状"><a href="#查看网络各层形状" class="headerlink" title="查看网络各层形状"></a>查看网络各层形状</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入数据形状是 [N, 1, H, W]</span><br><br><span class="hljs-comment"># 这里用np.random创建一个随机数组作为输入数据</span><br><br>x = np.random.randn(*[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>])<br><br>x = x.astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><br>  <br><br><span class="hljs-comment"># 创建LeNet类的实例，指定模型名称和分类的类别数目</span><br><br>model = LeNet(num_classes=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 通过调用LeNet从基类继承的sublayers()函数，</span><br><br><span class="hljs-comment"># 查看LeNet中所包含的子层</span><br><br><span class="hljs-built_in">print</span>(model.sublayers())<br><br>x = paddle.to_tensor(x)<br><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> model.sublayers():<br><br>    <span class="hljs-comment"># item是LeNet类中的一个子层</span><br><br>    <span class="hljs-comment"># 查看经过子层之后的输出数据形状</span><br><br>    <span class="hljs-keyword">try</span>:<br><br>        x = item(x)<br><br>    <span class="hljs-keyword">except</span>:<br><br>        x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br><br>        x = item(x)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(item.parameters())==<span class="hljs-number">2</span>:<br><br>        <span class="hljs-comment"># 查看卷积和全连接层的数据和参数的形状，</span><br><br>        <span class="hljs-comment"># 其中item.parameters()[0]是权重参数w，item.parameters()[1]是偏置参数b</span><br><br>        <span class="hljs-built_in">print</span>(item.full_name(), x.shape, item.parameters()[<span class="hljs-number">0</span>].shape, item.parameters()[<span class="hljs-number">1</span>].shape)<br><br>    <span class="hljs-keyword">else</span>:<br><br>        <span class="hljs-comment"># 池化层没有参数</span><br><br>        <span class="hljs-built_in">print</span>(item.full_name(), x.shape)<br></code></pre></td></tr></table></figure><h4 id="数据读取模型训练"><a href="#数据读取模型训练" class="headerlink" title="数据读取模型训练"></a>数据读取模型训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># LeNet 识别手写数字</span><br><br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-keyword">from</span> paddle.vision.transforms <span class="hljs-keyword">import</span> ToTensor<br><br><span class="hljs-keyword">from</span> paddle.vision.datasets <span class="hljs-keyword">import</span> MNIST<br><br>  <br><br><span class="hljs-comment"># 定义训练过程</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model, opt, train_loader, valid_loader</span>):<br><br>    <span class="hljs-comment"># 开启0号GPU训练</span><br><br>    use_gpu = <span class="hljs-literal">True</span><br><br>    paddle.device.set_device(<span class="hljs-string">&#x27;gpu:0&#x27;</span>) <span class="hljs-keyword">if</span> use_gpu <span class="hljs-keyword">else</span> paddle.device.set_device(<span class="hljs-string">&#x27;cpu&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start training ... &#x27;</span>)<br><br>    model.train()<br><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br><br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br><br>            img = data[<span class="hljs-number">0</span>]<br><br>            label = data[<span class="hljs-number">1</span>] <br><br>            <span class="hljs-comment"># 计算模型输出</span><br><br>            logits = model(img)<br><br>            <span class="hljs-comment"># 计算损失函数</span><br><br>            loss_func = paddle.nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br>            loss = loss_func(logits, label)<br><br>            avg_loss = paddle.mean(loss)<br><br>  <br><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">2000</span> == <span class="hljs-number">0</span>:<br><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch_id: &#123;&#125;, loss is: &#123;:.4f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch, batch_id, <span class="hljs-built_in">float</span>(avg_loss.numpy())))<br><br>            avg_loss.backward()<br><br>            opt.step()<br><br>            opt.clear_grad()<br><br>  <br><br>        model.<span class="hljs-built_in">eval</span>()<br><br>        accuracies = []<br><br>        losses = []<br><br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(valid_loader()):<br><br>            img = data[<span class="hljs-number">0</span>]<br><br>            label = data[<span class="hljs-number">1</span>] <br><br>            <span class="hljs-comment"># 计算模型输出</span><br><br>            logits = model(img)<br><br>            pred = F.softmax(logits)<br><br>            <span class="hljs-comment"># 计算损失函数</span><br><br>            loss_func = paddle.nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br><br>            loss = loss_func(logits, label)<br><br>            acc = paddle.metric.accuracy(pred, label)<br><br>            accuracies.append(acc.numpy())<br><br>            losses.append(loss.numpy())<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[validation] accuracy/loss: &#123;:.4f&#125;/&#123;:.4f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(np.mean(accuracies), np.mean(losses)))<br><br>        model.train()<br><br>  <br><br>    <span class="hljs-comment"># 保存模型参数</span><br><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;mnist.pdparams&#x27;</span>)<br><br>  <br>  <br><br><span class="hljs-comment"># 创建模型</span><br><br>model = LeNet(num_classes=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 设置迭代轮数</span><br><br>EPOCH_NUM = <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 设置优化器为Momentum，学习率为0.001</span><br><br>opt = paddle.optimizer.Momentum(learning_rate=<span class="hljs-number">0.001</span>, momentum=<span class="hljs-number">0.9</span>, parameters=model.parameters())<br><br><span class="hljs-comment"># 定义数据读取器</span><br><br>train_loader = paddle.io.DataLoader(MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>, transform=ToTensor()), batch_size=<span class="hljs-number">10</span>, shuffle=<span class="hljs-literal">True</span>)<br><br>valid_loader = paddle.io.DataLoader(MNIST(mode=<span class="hljs-string">&#x27;test&#x27;</span>, transform=ToTensor()), batch_size=<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 启动训练过程</span><br><br>train(model, opt, train_loader, valid_loader)<br><br></code></pre></td></tr></table></figure><hr><h1 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h1><blockquote><p>解决网络层数加深后模型效果没有提升。</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="残差块"><a href="#残差块" class="headerlink" title="残差块"></a>残差块</h3><p>实现方式：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230409204947.png" alt="image.png|250"></p><blockquote><p>一般残差块输出通道数为输入通道数的==四倍==。</p></blockquote><h3 id="ResNet-50"><a href="#ResNet-50" class="headerlink" title="ResNet-50"></a>ResNet-50</h3><blockquote><p> depth = <em><strong>[3,4,6,3]</strong></em><br> 表示 c2 有 3 个残差块，c 3 有 4 个，c 4 有 6 个，c 5 有 3 个。<br> <img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230409212006.png" alt="image.png|525"></p></blockquote><h3 id="飞浆高层-API"><a href="#飞浆高层-API" class="headerlink" title="飞浆高层 API:"></a>飞浆高层 API:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#从paddle.vis ion.models模块中import残差网络，VGG网络，LeNet网络</span><br><span class="hljs-keyword">from</span> paddle.vision.models <span class="hljs-keyword">import</span> resnet50, v9g16, LeNet<br><span class="hljs-keyword">from</span> paddle.vision.datasets <span class="hljs-keyword">import</span> Cifar10 <br><span class="hljs-keyword">from</span> paddle.optimizer <span class="hljs-keyword">import</span> Momentum<br><span class="hljs-keyword">from</span> paddle.regularizer <span class="hljs-keyword">import</span> L2Decay<br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> CrossEnt ropyLoss<br><span class="hljs-keyword">from</span> paddle.metric <span class="hljs-keyword">import</span> Accuracy<br><span class="hljs-keyword">from</span> paddle.vision. transforms <span class="hljs-keyword">import</span> Transpose<br><span class="hljs-comment">#确保从paddle.vis ion.datasets. Cifar10中加载的图像数据是np. ndarray类型</span><br>paddle.vision.set_image_backend( <span class="hljs-string">&#x27;cv2&#x27;</span> )<br><span class="hljs-comment">#调用resnet50模型</span><br>model = padd le .Model( resnet50(pretrained=<span class="hljs-literal">False</span>, num_classes=<span class="hljs-number">10</span>&#125; )<br><span class="hljs-comment">#使用Cifar10数据集</span><br>train_dataset = Cifar10(mode=<span class="hljs-string">&#x27;train&#x27;</span>, transform= =Transpose() )<br>val_dataset = Cifar10 (mode=<span class="hljs-string">&#x27;test&#x27;</span>, transform=Transpose())<br><span class="hljs-comment">#定义优化器</span><br>optimizer = Momentum( learning_rate=<span class="hljs-number">0.01</span>, momentum=<span class="hljs-number">0.9</span>,<br>weight_decay = L2Decay(<span class="hljs-number">1e-4</span>),<br>parameters = model. parameters())<br><span class="hljs-comment">#进行训练前准备</span><br>model.prepare(optimizer, CrossEntropyLoss(), Accuracy(topk=(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)))<br><span class="hljs-comment">#启动训练</span><br>model.fit(train_dataset ,<br>val_dataset ,<br>epochs=<span class="hljs-number">50</span>,<br>batch_size=<span class="hljs-number">64</span>,<br>save_dir=*<span class="hljs-string">&quot;./output&quot;</span>,<br>num_workers=<span class="hljs-number">8</span> )<br> <br></code></pre></td></tr></table></figure><hr><h2 id="图像分类-ResNet-实战：眼疾识别分类"><a href="#图像分类-ResNet-实战：眼疾识别分类" class="headerlink" title="图像分类 ResNet 实战：眼疾识别分类"></a>图像分类 ResNet 实战：眼疾识别分类</h2><h3 id="CV-任务研发流程"><a href="#CV-任务研发流程" class="headerlink" title="CV 任务研发流程"></a>CV 任务研发流程</h3><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230411205932.png" alt="image.png|425"></p><blockquote><p>[!NOTE] Tips<br>其中，基本的计算机视觉任务研发全流程包含模型训练、模型预测和模型部署三大步骤。每个步骤又包含单独的流程：</p><ul><li>数据准备：根据网络接收的数据格式，完成相应的预处理和跑批量数据读取器操作，保证模型正常读取；</li><li>模型构建：设计卷积网络结构；</li><li>特征提取：使用构建的模型提取数据的特征信息；</li><li>损失函数：通过损失函数衡量模型的预测值和真实值的不一致程度，通常损失函数越小，模型性能越好；</li><li>模型评估：在模型训练中或训练结束后岁模型进行评估测试，观察准确率；</li><li>模型预测：使用训练好的模型进行测试，也需要准备数据和模型特征提取，最后对结果进行解析。</li></ul></blockquote><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Image Classify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>目标检测</title>
    <link href="/2023/03/3962ffddc056.html"/>
    <url>/2023/03/3962ffddc056.html</url>
    
    <content type="html"><![CDATA[<h1 id="YOLO算法"><a href="#YOLO算法" class="headerlink" title="YOLO算法"></a>YOLO算法</h1> <table>     <thead><tr>    <th align=center>        <font color=blue size=4 face=YaHei>种类</font>    </th>    <th bgcolor=#f0f0f0 align=center>        <font color=orange size=4 face=楷体>文献</font>    </th></tr>    </thead>    <tbody><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙.pdf\">ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/高效液相色谱法测定人血浆中百草枯浓度_孙斌.pdf\">高效液相色谱法测定人血浆中百草枯浓度_孙斌</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增.pdf\">三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察.pdf\">西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察</a></td></tr><tr><td align=center>外科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东.pdf\">新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东</a></td></tr><tr><td align=center>其他</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/isct_a-118.pdf\">isct_a-118</a></td></tr><tr><td align=center>麻醉科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-.pdf\">British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-</a></td></tr><tr><td align=center>流行病学</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/Contextual_factors_associated_with_country-level_suicide.pdf\">Contextual_factors_associated_with_country-level_suicide</a></td></tr><tr><td align=center>免疫学</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an.pdf\">Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/Two-year_follow-up_of_patients_with_post-COVID-19_condition.pdf\">Two-year_follow-up_of_patients_with_post-COVID-19_condition</a></td></tr><tr><td align=center>内科</td><td bgcolor=#f0f0f0 align=center><a href=\"http://amedoc.fcsy.fit/media/docs/高血压脑出血患者颅内血肿周围水肿体积扩大的相关影响因素分析_周航.pdf\">高血压脑出血患者颅内血肿周围水肿体积扩大的相关影响因素分析_周航</a></td></tr></tbody></table>|  姓名  |     学号      |     ||:------:|:-------------:| ---:|| 范财胜 | 0122005830519 |     || 徐宇健 | 0122008910505 |     ||  庄俊  |      ？       |     || 赵逸佳 | ？              |     |内科：[ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙](http://amedoc.fcsy.fit/media/docs/ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙.pdf)<br>内科：[高效液相色谱法测定人血浆中百草枯浓度_孙斌](http://amedoc.fcsy.fit/media/docs/高效液相色谱法测定人血浆中百草枯浓度_孙斌.pdf)<br>内科：[三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增](http://amedoc.fcsy.fit/media/docs/三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增.pdf)<br>内科：[西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察](http://amedoc.fcsy.fit/media/docs/西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察.pdf)<br>外科：[新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东](http://amedoc.fcsy.fit/media/docs/新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东.pdf)<br>其他：[isct_a-118](http://amedoc.fcsy.fit/media/docs/isct_a-118.pdf)<br>麻醉科：[British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-](http://amedoc.fcsy.fit/media/docs/British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-.pdf)<br>流行病学：[Contextual_factors_associated_with_country-level_suicide](http://amedoc.fcsy.fit/media/docs/Contextual_factors_associated_with_country-level_suicide.pdf)<br>免疫学：[Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an](http://amedoc.fcsy.fit/media/docs/Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an.pdf)<br>内科：[Two-year_follow-up_of_patients_with_post-COVID-19_condition](http://amedoc.fcsy.fit/media/docs/Two-year_follow-up_of_patients_with_post-COVID-19_condition.pdf)<br>内科：[高血压脑出血患者颅内血肿周围水肿体积扩大的相关影响因素分析_周航](http://amedoc.fcsy.fit/media/docs/高血压脑出血患者颅内血肿周围水肿体积扩大的相关影响因素分析_周航.pdf)<br>|   种类   |                                                                                                 文献                                                                                                 ||:--------:|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:||   内科   |               [ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙](http://amedoc.fcsy.fit/media/docs/ENSITE_NAVX和双LAS_省略_左心房线性消融治疗阵发性心房颤动_陈明龙.pdf)               ||   内科   |                                     [高效液相色谱法测定人血浆中百草枯浓度_孙斌](http://amedoc.fcsy.fit/media/docs/高效液相色谱法测定人血浆中百草枯浓度_孙斌.pdf)                                     ||   内科   | [三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增](http://amedoc.fcsy.fit/media/docs/三维标测系统和单环状标测导管指示_省略_线性消融电学隔离肺静脉方法学评价_董建增.pdf) ||   内科   |                             [西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察](http://amedoc.fcsy.fit/media/docs/西吡氯铵含片联合PPI制剂治疗反流性咽喉炎的临床观察.pdf)                             ||   外科   |           [新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东](http://amedoc.fcsy.fit/media/docs/新型颅内支架Enterprise_省略_弹簧圈栓塞治疗颅内微小宽颈动脉瘤_黄海东.pdf)           ||   其他   |                                                                    [isct_a-118](http://amedoc.fcsy.fit/media/docs/isct_a-118.pdf)                                                                    ||  麻醉科  |  [British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-](http://amedoc.fcsy.fit/media/docs/British-Journal-of-Anaesthesia--a-leading-publicati_2023_British-Journal-of-.pdf)  || 流行病学 |                      [Contextual_factors_associated_with_country-level_suicide](http://amedoc.fcsy.fit/media/docs/Contextual_factors_associated_with_country-level_suicide.pdf)                      ||  免疫学  |  [Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an](http://amedoc.fcsy.fit/media/docs/Functionally-impaired-antibody-response-to-BNT162_2022_Journal-of-Allergy-an.pdf)  ||   内科   |                   [Two-year_follow-up_of_patients_with_post-COVID-19_condition](http://amedoc.fcsy.fit/media/docs/Two-year_follow-up_of_patients_with_post-COVID-19_condition.pdf)                <hr><table><thead><tr><th align="center">输入条件</th><th align="center">合理等价类</th><th align="center">不合理等价类</th></tr></thead><tbody><tr><td align="center">职称</td><td align="center">1教授<br>2副教授<br>3讲师</td><td align="center">5四种职称之外任意一种</td></tr><tr><td align="center">职称兼工龄</td><td align="center">4助教兼工龄大于2年</td><td align="center">6助教兼工龄等于两年<br>7助教兼工龄小于两年</td></tr></tbody></table><table><thead><tr><th align="center">输入数据</th><th align="center">预期结果</th><th align="center">覆盖范围</th></tr></thead><tbody><tr><td align="center">教授</td><td align="center">输入有效，进行调整工资处理</td><td align="center">1</td></tr><tr><td align="center">副教授</td><td align="center">输入有效，进行调整工资处理</td><td align="center">2</td></tr><tr><td align="center">讲师</td><td align="center">输入有效，进行调整工资处理</td><td align="center">3</td></tr><tr><td align="center">助教3</td><td align="center">输入有效，进行调整工资处理</td><td align="center">4</td></tr><tr><td align="center">助教2</td><td align="center">输入有效，不调整工资处理</td><td align="center">6</td></tr><tr><td align="center">助教1</td><td align="center">输入有效，不调整工资处理</td><td align="center">7</td></tr><tr><td align="center">工程师</td><td align="center">输入无效</td><td align="center">5</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络基础</title>
    <link href="/2023/03/f41646eecf81.html"/>
    <url>/2023/03/f41646eecf81.html</url>
    
    <content type="html"><![CDATA[<h1 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h1><h2 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C,H,W]</code></p><h2 id="步幅（stride）"><a href="#步幅（stride）" class="headerlink" title="步幅（stride）"></a>步幅（stride）</h2><p>卷积核运算过程中==移动的距离大小==。<br>卷积后的输出尺寸计算公式如下：<br>$$ H_{out}= \frac{H+2p_{h}-k_{h}}{s_{h}}+1 $$<br>$$ W_{out}= \frac{W+2p_{w}-k_{w}}{s_{w}}+1 $$</p><blockquote><p>其中 $p_h$ 和 $p_w$ 分别为高度和宽度<strong>填充</strong>，$k_h$ 和 $k_w$ 分别为卷积核的高宽<strong>大小</strong>，$s_h$ 和 $s_w$ 分别为高度和宽度<strong>步幅</strong>。</p></blockquote><blockquote><p>[!NOTE] 提示<br>步幅越大，特征越小，<em><strong>stride=2</strong></em>，则<em><strong>特征缩小一半</strong></em>。</p></blockquote><h2 id="批量卷积"><a href="#批量卷积" class="headerlink" title="批量卷积"></a>批量卷积</h2><p>对RGB三通道，同时输入一个批次（batch）张图片做卷积运算，每张图像卷积后通道叠在一起（不是叠加），如下图所示：<br><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202303201948212.png" alt="image.png|525"></p><hr><h2 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h2><blockquote><p>感受野是指输出特征图上的像素点所能感受到的输入数据的范围。</p></blockquote><p>从下图可以看出感受野的大小：<br><img src="https://s2.loli.net/2023/03/20/dC7PyWFI5ZmHhxr.png" alt="image.png|250"><br><code>网络越深，越深层特征图的感受野越大，主要从输入的主对角线反映。</code></p><blockquote><p>[!NOTE] 提示<br>对于图像分类任务来说，感受野的大小与网络的性能存在一定的关系。感受野越大，网络可以获取到更广泛的上下文信息，从而更好地理解图像。但过大的感受野对图像分类也会有一定的影响，主要表现在以下两个方面：</p></blockquote><blockquote><ol><li>过大的感受野会<strong>引入过多的噪声和干扰信号</strong>。当感受野越大时，网络就会考虑更远的像素，这些像素可能与目标物体或图案无关，甚至会背离目标。这些噪声和干扰信号会干扰网络的学习，从而导致分类准确性的降低。</li></ol></blockquote><blockquote><ol start="2"><li>过大的感受野会<strong>降低网络的细节敏感度</strong>。当感受野的大小超出图像细节的尺度范围时，网络无法有效地捕捉到细节信息，从而导致分类准确性的降低。尤其是对于一些小尺寸物体和图案，小细节对分类结果的影响会更加显著。</li></ol></blockquote><blockquote><p>因此，对于图像分类任务来说，选择适当的感受野大小非常重要。通常，在<strong>保证网络全局感知能力的同时，应该将感受野限制在合适的尺度范围内</strong>，以避免过度拟合和过大感受野带来的问题。同时，还可以结合多尺度特征提取的方法，综合利用不同感受野下的信息，以获取更全面、更准确的特征，提高分类精度。</p></blockquote><h2 id="Paddle-API卷积"><a href="#Paddle-API卷积" class="headerlink" title="Paddle API卷积"></a>Paddle API卷积</h2><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320203438.png" alt="image.png|400"></p><h3 id="案例1-边缘检测二值图"><a href="#案例1-边缘检测二值图" class="headerlink" title="案例1-边缘检测二值图"></a>案例1-边缘检测二值图</h3><blockquote><p>检测图像黑白分界线。</p></blockquote><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320205235.png" alt="image.png|150"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> fluid. dygraph. guard():<br><span class="hljs-comment">#创建初始化权重参数w</span><br>w = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>], dtype= <span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#将权重参数调整成维度为[cout, cin, kh, kw]的四维张里</span><br>w = w.reshape([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment">#创建卷积算子，设置输出通道数，卷积核大小，和初始化权重参数</span><br><span class="hljs-comment"># filter_size = [1, 3]表示kh = 1, kw=3</span><br><span class="hljs-comment">#创建卷积算子的时候，通过参数属性param_ attr, 指定参数初始化方式</span><br><span class="hljs-comment">#这里的初始化方式时，从numpy. ndarray初始化卷积参数</span><br><span class="hljs-comment">#num_channels:输入通道数；num_filters：输出通道数；filter_size：卷积核高宽，param_attr：初始化参数</span><br>conv = Conv2D(num_channels=<span class="hljs-number">1</span>, num_filters=<span class="hljs-number">1</span>, filter_size=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],param_attr=fluid.ParamAttr(<br>initializer=NumpyArrayInitializer(value=w)))<br><span class="hljs-comment">#创建输入图片，图片左边的像素点取值为1，右边的像素点取值为0</span><br>img = np.ones([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>], dtype=<span class="hljs-string">&#x27;f1oat32&#x27;</span>)<br>img[:, <span class="hljs-number">30</span>:] = <span class="hljs-number">0.</span><br><span class="hljs-comment">#将图片形状调整为[N(bach_size), C（chanel）, H, W]的形式</span><br>x = img.reshape([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>])<br><span class="hljs-comment">#将numpy.ndarray转化成paddle中的tensor</span><br>x = fluid.dygraph.to_variable(x)<br><span class="hljs-comment">#使用卷积算子作用在输入图片上</span><br>y = conv(x)<br><span class="hljs-comment">#将输出tensor转化为numpy.ndarray</span><br>out = y.numpy()<br></code></pre></td></tr></table></figure><blockquote><p>查看卷积层参数:<code>conv.parameters()</code><br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320205955.png" alt="image.png|450"></p></blockquote><hr><h3 id="案例2-边缘检测RGB彩图"><a href="#案例2-边缘检测RGB彩图" class="headerlink" title="案例2-边缘检测RGB彩图"></a>案例2-边缘检测RGB彩图</h3><blockquote><p><code>图片初始读入的形状为[H,W,C](垂直像素，水平像素，通道数)，需要调整为[N,C,H,W]格式。</code><br>卷积核：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213046.png" alt="image.png|175"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./work/ images/section1000000098520. jpg&#x27;)</span><br><span class="hljs-string">with fluid.dygraph.guard():</span><br><span class="hljs-string">#设置卷积核参数</span><br><span class="hljs-string">w = np.array([[-1,-1,-1], [-1,8,-1], [-1,-1,-1]], dtype= &#x27;float32&#x27;)/8</span><br><span class="hljs-string">w = w.reshape([1, 1, 3, 3])</span><br><span class="hljs-string">#由于输入通道数是3，将卷积核的形状从[1,1,3,3]调整为[1p3,p,3]</span><br><span class="hljs-string">w = np.repeat(w,3，axis=1)、</span><br><span class="hljs-string">#创建卷积算子，输出通道数为1，卷积核大小为3x3，</span><br><span class="hljs-string">#并使用上面的设置好的数值作为卷积核权重的初始化参数</span><br><span class="hljs-string">conv = Conv2D(num_channels=3, num_filters=1, filter_size=[3,3],param_attr=fluid.ParamAttr(initializer=NumpyArrayInitializer(value=w)))</span><br><span class="hljs-string">  #将读入的图片转化为float32类型的numpy.ndarray</span><br><span class="hljs-string">x = np.array(img).astype(&#x27;float32&#x27;)</span><br><span class="hljs-string">#图片读入成ndarry时，形状是[H, W, C]，</span><br><span class="hljs-string">#将通道这一维度调整到最前面</span><br><span class="hljs-string">x = np.transpose(x, (2,0,1))</span><br><span class="hljs-string">#将数据形状调整为[N, C, H, W]格式</span><br><span class="hljs-string">x = x.reshape(1, 3, img.height, img.width)</span><br><span class="hljs-string">x = fluid.dygraph.to_variable(x)#变为张量格式</span><br><span class="hljs-string">y = conv(x)</span><br><span class="hljs-string">out = y.numpy()#张量转numpy数组</span><br></code></pre></td></tr></table></figure><hr><h3 id="案例3-均值模糊"><a href="#案例3-均值模糊" class="headerlink" title="案例3-均值模糊"></a>案例3-均值模糊</h3><blockquote><p>卷积核：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213328.png" alt="image.png|200"><br>效果对比：<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230320213358.png" alt="image.png|200"></p></blockquote><hr><h1 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h1><h2 id="形状-1"><a href="#形状-1" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C,H,W]</code></p><blockquote><p><code>池化</code>是使用某一位置的相邻输出的总体统计特征来代替网络在该位置的输出<br><code>理解</code>：取输入的局部统计特征作为输出，==可以掩盖变化的细节==。</p></blockquote><h2 id="池化方法"><a href="#池化方法" class="headerlink" title="池化方法"></a>池化方法</h2><ol><li>平均池化<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405140612.png" alt="image.png|200"></li></ol><ol start="2"><li>最大池化<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405140630.png" alt="image.png|200"><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2></li><li>池化的好处是当输入数据做出<strong>少量平移</strong>时，经过池化函数后的大多数输出还能<strong>保持不变</strong>,池化能够<strong>帮助输入的表示近似不变</strong>。</li><li>由于池化之后特征图会变得更小，如果后面连接的是全连接层，能<strong>有效的减小神经元的个数</strong>,<strong>节省存储空间并提高计算效率</strong>。<h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2></li></ol><ul><li>池化<strong>窗口大小</strong>：$pool_size = [k_h,k_w]$</li><li>池化窗口<strong>滑动步幅</strong>：$pool_stride = [stride_ h, stride_w]$</li><li>图片<strong>填充</strong>：$padding=[ph,pw]$</li><li>比较常见的参数配置是：$k_n =k_w=2,stride_h=stride_w=2,p_h=p_w=0$</li><li>采用这样的设置将会使得输出图片高和宽都减半<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2></li><li><strong>没有学习参数</strong></li><li><strong>通道数不变</strong>，每个通道独立进行池化</li><li>对<strong>微小的位置</strong>变化具有<strong>鲁棒性</strong></li></ul><hr><h1 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h1><blockquote><p>通常在卷积或者全连接这样的线形操作之后，会加上一个非线性的函数，作用在每一个神经元的输出上，从而实现非线性变换的效果。</p></blockquote><h2 id="sigmoid激活函数"><a href="#sigmoid激活函数" class="headerlink" title="sigmoid激活函数"></a>sigmoid激活函数</h2><blockquote><p><strong>说明：</strong> Sigmoid函数只有在x接近于0的地方，导数才比较大，但最大值也只有1/4；在X的数值非常大或者非常小的地方，导数都接近于0<br>$$\begin{array}<br>\text { 反向传播 } \frac{\partial L}{\partial x}=\frac{\partial L}{\partial y} \cdot \frac{\partial y}{\partial x}<br>\text { 这将导致 } \frac{\partial L}{\partial x} \ \text { 会显著的小于 } \frac{\partial L}{\partial y}<br>这将导致张会显著的小于光<br>\end{array}$$</p></blockquote><ol><li>如果X是非常大整数或者非常小的负数，则<strong>x的梯度将接近于0</strong></li><li>即使x的数值接近于0，其梯度最大不超过y的<strong>梯度的1/4</strong>，如果有多层网络使用Sigmoid激活函数，将导致<strong>较靠前</strong>的那些层，<strong>梯度变得非常的小</strong></li></ol><p><em>在神经网络里面，将这种经过反向传播之后，梯度值衰减到接近于0的现象称作<strong>梯度消失</strong>现象</em><br>$$y=\frac{1}{1+e^{-x}}$$</p><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405151136.png" alt="image.png|250"></p><hr><h2 id="ReLU激活函数"><a href="#ReLU激活函数" class="headerlink" title="ReLU激活函数"></a>ReLU激活函数</h2><p>$$<br>y= \begin{cases}0, &amp; (x&lt;0) \ x, &amp; (x \geq 0)\end{cases}<br>$$<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405154029.png" alt="image.png|250"></p><blockquote><p>[!note]</p><ul><li>在x&gt;0的地方，ReLU函数的<strong>导数为1</strong>，能够将y的梯度完整的传递给×，而<strong>不会引起梯度消失</strong>。</li><li>在神经网络发展的早期Sigmoid函数用的比较多，而目前用的较多的激活函数是ReLU</li></ul></blockquote><hr><h1 id="批归一化BatchNorm"><a href="#批归一化BatchNorm" class="headerlink" title="批归一化BatchNorm"></a>批归一化BatchNorm</h1><h2 id="数据分布和模型的数值稳定性"><a href="#数据分布和模型的数值稳定性" class="headerlink" title="数据分布和模型的数值稳定性"></a>数据分布和模型的数值稳定性</h2><p><strong>模型收敛</strong>：需要稳定的数据分布</p><blockquote><p>[!note]<br>                       浅层神经网络—&gt;对输入数据做标准化（也称作归一化)</p><pre><code class="hljs">                   深度神经网络---&gt;仅仅标准化输入数据还不够</code></pre><p><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405155315.png" alt="image.png"></p></blockquote><p><strong>Batch Normalization 提升数值稳定性</strong></p><blockquote><p>对中间层的输出做标准化，可以保证在网络学习的过程中，网络层的输出具有稳定的分布。</p></blockquote><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul><li>可以<strong>使学习快速进行</strong>（能够使用<strong>较大的学习率</strong>)</li><li>可以<strong>降低</strong>模型<strong>对初始值</strong>的<strong>敏感性</strong></li><li>可以从一定程度上<strong>抑制过拟合</strong></li></ul><h3 id="归一化公式"><a href="#归一化公式" class="headerlink" title="归一化公式"></a>归一化公式</h3><blockquote><p>每一项减去均值，除以方差加一个无穷小的数（$10^{-6}$）防止方差为0无意义.<br>$$<br>\hat{x_i} \leftarrow \frac{x_i-\mu_B}{\sqrt{\left(\sigma_B^2+\epsilon\right)}}<br>$$<br>对标准化输出进行平移和缩放<br>$$<br>y_i \leftarrow \gamma \hat{x}_i+\beta<br>$$<br>其中$\gamma$和$\beta$是可学习的参数，可以赋初始值$\gamma=1$,$\beta=0$,在训练过程中自动不断学习调整.</p></blockquote><h2 id="预测时使用BatchNorm"><a href="#预测时使用BatchNorm" class="headerlink" title="预测时使用BatchNorm"></a>预测时使用BatchNorm</h2><blockquote><p>[!解决方案]<br><strong>训练时</strong>计算在<strong>整个数据集上的均值和方差</strong>，并将<strong>结果保存预测时</strong>不计算样本内均值和方差，而是<strong>使用训练时保存的值</strong></p><ol><li>训练通过<strong>滚动平均</strong>的方式，计算在整个数据集上的均值和方差并保存</li><li>预测时直接加在训练时保存的均值和方差，而不用在样本内计算</li></ol></blockquote><hr><h1 id="丢弃法Dropout"><a href="#丢弃法Dropout" class="headerlink" title="丢弃法Dropout"></a>丢弃法Dropout</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>防止过拟合的方法<br><em><strong>训练阶段</strong></em>：每次随机的删除一部分神经元，不向前传播其所携带的信息，相当于每次都是让不同的模型在学习<br><em><strong>测试阶段</strong></em>：向前传播所有神经元的信息，相当于让这些不同的模型一起工作<br><img src="https://alist.fcsy.fit/d/mobilepan/PicoImages/20230405172108.png" alt="image.png|350"></p></blockquote><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><blockquote><p>训练时随机丢弃了一部分神经元的信息，输出数据的总大小变小了<br>预测时不丢弃神经元，导致预测和训练时的数据分布不一样</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>==downgrade_in_infer==</li></ol><p><strong>训练</strong>时<strong>随机丢弃</strong>一部分神经元；<strong>预测时</strong>不丢弃神经元，但把它们<strong>数值变小</strong><br>2. ==<strong>upscale_in_train</strong>==<br><strong>训练</strong>时<strong>随机丢弃</strong>一部分神经元，但是把<strong>保留</strong>的那些<strong>神经元数值放大</strong>；<strong>预测</strong>时<strong>原样输出</strong>所有神经元的信息</p><blockquote><p>Paddle中默认是<code>downgrade_in_infer</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#设置随机数种子，这样可以保证每次运行结果一致</span><br>np.random.seed(<span class="hljs-number">100</span>)<br><span class="hljs-comment">#创建数据N,C,H,WM,一般对应卷积层的输出</span><br>data1 = np.random.rand(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#创建数据N,K),一般对应全连接层的输出</span><br>data2 = np.arange(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>).reshape([-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#使用dropout作用在输入数据上</span><br><span class="hljs-keyword">with</span> fluid.dygraph.guard():<br>x1 = fluid.dygraph.to_variable(data1)<br>out1_1 = fluid.layers.dropout(x1,dropout_prob=<span class="hljs-number">0.5</span>,is_test=<span class="hljs-literal">False</span>)<br>out1_2 = fluid.layers.dropout(x1,dropout_prob=<span class="hljs-number">0.5</span>,is_test=<span class="hljs-literal">True</span>)<br><br>x2 = fluid.dygraph.to_variable(data2)<br>out2_1 = fluid.layers.dropout(x2,dropout_prob=<span class="hljs-number">0.5</span>,\<br>dropout_implementation=<span class="hljs-string">&#x27;upscale_in_train&#x27;</span>)<br>out2_2 = fluid.layers.dropout(x2,dropout_prob=<span class="hljs-number">0.5</span>,\<br>dropout_implementation=<span class="hljs-string">&#x27;upscale_in_train&#x27;</span>,is_test=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h1><blockquote><p>将输入全部转为1维进行线性求和</p></blockquote><h2 id="形状-2"><a href="#形状-2" class="headerlink" title="形状"></a>形状</h2><p><code>[N,C]</code></p><blockquote><p>[!NOTE] 数据变换<br>尺寸的逻辑：输入层将数据拉平[B,C,H,W] -&gt; [B,C*H*W]<br>        x = paddle.reshape(x, [x.shape[0], -1])</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机视觉概述</title>
    <link href="/2023/03/cc1560495a8d.html"/>
    <url>/2023/03/cc1560495a8d.html</url>
    
    <content type="html"><![CDATA[<p>[[卷积神经网络基础]][[目标检测]][[图像分类]]</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>计算机视觉作为一门让机器学会如何去“看”的学科，具体的说，就是让机器去识别摄像机拍摄的图片或视频中的物体，检测出物体所在的位置，并对目标物体进行跟踪，从而理解并描述出图片或视频里的场景和故事，以此来模拟人脑视觉系统。因此，计算机视觉也通常被叫做机器视觉，其目的是建立能够从图像或者视频中“感知”信息的人工系统。</p><p>计算机视觉技术经过几十年的发展，已经在交通（车牌识别、道路违章抓拍）、安防（人脸闸机、小区监控）、金融（刷脸支付、柜台的自动票据识别）、医疗（医疗影像诊断）、工业生产（产品缺陷自动检测）等多个领域应用，影响或正在改变人们的日常生活和工业生产方式。未来，随着技术的不断演进，必将涌现出更多的产品和应用，为我们的生活创造更大的便利和更广阔的机会。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/93476b373dd342d1aae22397aa24c58fc60ab68307fd448189f16c8284723e9d" width = "500"></center><center>图1：计算机视觉技术在各领域的应用</center><p>飞桨为计算机视觉任务提供了丰富的API，并通过底层优化和加速保证了这些API的性能。同时，飞桨还提供了丰富的模型库，覆盖图像分类、检测、分割、文字识别和视频理解等多个领域。用户可以直接使用这些API组建模型，也可以在飞桨提供的模型库基础上进行二次研发。<br>由于篇幅所限，本章将重点介绍计算机视觉的经典模型（卷积神经网络）和两个典型任务（图像分类和目标检测）。主要涵盖如下内容：<br><strong>卷积神经网络</strong>：卷积神经网络（Convolutional Neural Networks, CNN）是计算机视觉技术最经典的模型结构。本教程主要介绍卷积神经网络的常用模块，包括：卷积、池化、激活函数、批归一化、丢弃法等。</p><ul><li><strong>图像分类</strong>：介绍图像分类算法的经典模型结构，包括：LeNet、AlexNet、VGG、GoogLeNet、ResNet，并通过眼疾筛查的案例展示算法的应用。</li><li><strong>目标检测</strong>：介绍目标检测YOLOv3算法，并通过林业病虫害检测案例展示YOLOv3算法的应用。</li></ul><h1 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h1><p>计算机视觉的发展历程要从生物视觉讲起。对于生物视觉的起源，目前学术界尚没有形成定论。有研究者认为最早的生物视觉形成于距今约<a href="https://www.pnas.org/content/109/46/18868">7亿年前的水母之中</a>，也有研究者认为生物视觉产生于距今约5亿年前寒武纪【<a href="https://doi.org/10.1038%2Fnature10097">1</a>, <a href="https://en.wikipedia.org/wiki/Evolution_of_the_eye">2</a>】。寒武纪生物大爆发的原因一直是个未解之谜，不过可以肯定的是在寒武纪动物具有了视觉能力，捕食者可以更容易地发现猎物，被捕食者也可以更早的发现天敌的位置。视觉能力加剧了猎手和猎物之间的博弈，也催生出更加激烈的生存演化规则。视觉系统的形成有力地推动了食物链的演化，加速了生物进化过程，是生物发展史上重要的里程碑。经过几亿年的演化，目前人类的视觉系统已经具备非常高的复杂度和强大的功能，人脑中神经元数目达到了1000亿个，这些神经元通过网络互相连接，这样庞大的视觉神经网络使得我们可以很轻松的观察周围的世界，如 <strong>图2</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/70d8475ed908487680057bf1f2760f10e367e7176acf43ebb380207b748b2377" width = "600"></center><center><br>图2：人类视觉感知</center><hr><p>对人类来说，识别猫和狗是件非常容易的事。但对计算机来说，即使是一个精通编程的高手，也很难轻松写出具有通用性的程序（比如：假设程序认为体型大的是狗，体型小的是猫，但由于拍摄角度不同，可能一张图片上猫占据的像素比狗还多）。那么，如何让计算机也能像人一样看懂周围的世界呢？研究者尝试着从不同的角度去解决这个问题，由此也发展出一系列的子任务，如 <strong>图3</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/d65f1ebcb0054dcb81a8eb50223adc529bb9b63265ab467d931a5df5b2864122" width = "500"></center><center><br>图3：计算机视觉子任务示意图</center>- **(a) Image Classification：** 图像分类，用于识别图像中物体的类别（如：bottle、cup、cube）。- **(b) Object Localization：** 目标检测，用于检测图像中每个物体的类别，并准确标出它们的位置。- **(c) Semantic Segmentation：** 图像语义分割，用于标出图像中每个像素点所属的类别，属于同一类别的像素点用一个颜色标识。- **(d) Instance Segmentation：** 实例分割，值得注意的是，（b）中的目标检测任务只需要标注出物体位置，而（d）中的实例分割任务不仅要标注出物体位置，还需要标注出物体的外形轮廓。在早期的图像分类任务中，通常是先人工提取图像特征，再用机器学习算法对这些特征进行分类，分类的结果强依赖于特征提取方法，往往只有经验丰富的研究者才能完成，如 **图4** 所示。<center><img src="https://ai-studio-static-online.cdn.bcebos.com/01179d17c9f74570b8a618d6123261ce6e10344f11c84dda8e47d44c1eb4fc81" width = "500"></center><center><br>图4：早期的图像分类任务</center>在这种背景下，基于神经网络的特征提取方法应运而生。Yann LeCun是最早将卷积神经网络应用到图像识别领域的，其主要逻辑是使用卷积神经网络提取图像特征，并对图像所属类别进行预测，通过训练数据不断调整网络参数，最终形成一套能自动提取图像特征并对这些特征进行分类的网络，如 **图5** 所示。<center><img src="https://ai-studio-static-online.cdn.bcebos.com/1ccd30567304415d98b0b373ec641a3d00f76d803f194ea4b14aa85ce85bf7bb" width = "500"></center><center><br>图5：早期的卷积神经网络处理图像任务示意</center><p>这一方法在手写数字识别任务上取得了极大的成功，但在接下来的时间里，却没有得到很好的发展。其主要原因一方面是数据集不完善，只能处理简单任务，在大尺寸的数据上容易发生过拟合；另一方面是硬件瓶颈，网络模型复杂时，计算速度会特别慢。<br>目前，随着互联网技术的不断进步，数据量呈现大规模的增长，越来越丰富的数据集不断涌现。另外，得益于硬件能力的提升，计算机的算力也越来越强大。不断有研究者将新的模型和算法应用到计算机视觉领域。由此催生了越来越丰富的模型结构和更加准确的精度，同时计算机视觉所处理的问题也越来越丰富，包括分类、检测、分割、场景描述、图像生成和风格变换等，甚至还不仅仅局限于2维图片，包括视频处理技术和3D视觉等。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>algorithm</title>
    <link href="/2023/03/56d5f0383564.html"/>
    <url>/2023/03/56d5f0383564.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>***自顶向下递归<br>自底向上迭代</p><hr><blockquote><p>问题特点</p><ol><li>一个问题的解可以<strong>分解为几个子问题</strong>的解。</li><li>这个问题与分解之后的子问题，<strong>除了数据规模不同，求解思路完全一样</strong>。</li><li><strong>存在基线终止条件</strong>。</li></ol></blockquote><p>爬楼梯问题：<br><img src="https://s2.loli.net/2023/05/22/tcH9QJ726li3Rng.png" alt="image.png|200"></p><p>解法 1：纯递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span> Map&lt;Integer , Integer&gt; storeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> climbStairs(n-<span class="hljs-number">1</span>)+climbStairs(n-<span class="hljs-number">2</span>);<br><br></code></pre></td></tr></table></figure><p>解法 2：递归并采用 HashMap 存储已求值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span> Map&lt;Integer , Integer&gt; storeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != storeMap.get(n))<br><span class="hljs-keyword">return</span> storeMap.get(n);<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> climbStairs(n-<span class="hljs-number">1</span>)+climbStairs(n-<span class="hljs-number">2</span>);<br>storeMap.put(n,result);<br><span class="hljs-keyword">return</span> result;<br><br></code></pre></td></tr></table></figure><p>解法 3：迭代自底向上循环累加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">prePre</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(inti=<span class="hljs-number">3</span>;i&lt;=n;++i)&#123;<br>result = pre + prePre;<br>prePre = pre;<br>pre = result;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>总结：</p><blockquote><p><span style="background:rgba(240, 107, 5, 0.2)">对于多次重复出现的值，可以通过 HashMap 存储，后续先扫描 HashMap 是否存在再做行动。</span></p></blockquote><h1 id="2-LeetCode"><a href="#2-LeetCode" class="headerlink" title="2. LeetCode"></a>2. LeetCode</h1><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">import</span> java.util.HashMap;  <br>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] <span class="hljs-built_in">twoSum</span>(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;  <br>HashMap&lt;Integer, Integer&gt; storeNums = <span class="hljs-keyword">new</span> <span class="hljs-built_in">HashMap</span>&lt;Integer, Integer&gt;(nums.length);  <br><span class="hljs-type">int</span>[] results = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">2</span>];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;  <br><span class="hljs-type">int</span> residue = target - nums[i];  <br>Integer index = storeNums.<span class="hljs-built_in">get</span>(residue);  <br><span class="hljs-keyword">if</span> (index != null) &#123;  <br>results[<span class="hljs-number">0</span>] = index;  <br>results[<span class="hljs-number">1</span>] = i;  <br><span class="hljs-keyword">break</span>;  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>storeNums.<span class="hljs-built_in">put</span>(nums[i], i);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> results;  <br>&#125;  <br>  <br>&#125;;  <br><span class="hljs-comment">//runtime:1 ms  </span><br><span class="hljs-comment">//memory:42.6 MB</span><br><br></code></pre></td></tr></table></figure><h2 id="2-合并两个有序数组"><a href="#2-合并两个有序数组" class="headerlink" title="2. 合并两个有序数组"></a>2. 合并两个有序数组</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//leetcode submit region begin(Prohibit modification and deletion)  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br><span class="hljs-comment">// 方法1（直插排序法）  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;  <br><span class="hljs-keyword">auto</span> iter1 = nums1.<span class="hljs-built_in">begin</span>()+m;  <br><span class="hljs-keyword">auto</span> iter2 = nums1.<span class="hljs-built_in">end</span>();  <br>nums1.<span class="hljs-built_in">erase</span>(iter1,iter2);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>nums1.<span class="hljs-built_in">push_back</span>(nums2[i]);  <br>&#125;  <br><span class="hljs-comment">// nums1.erase(iter1,iter2);  </span><br><span class="hljs-comment">// nums1.insert(nums1.end(),nums2.begin(),nums2.end());  </span><br><span class="hljs-built_in">sort</span>(nums1.<span class="hljs-built_in">begin</span>(), nums1.<span class="hljs-built_in">end</span>());  <br>&#125;  <br><span class="hljs-comment">//方法2（前向双指针法）  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;  <br><span class="hljs-type">int</span> l = m+n,j=<span class="hljs-number">0</span>,index1 = <span class="hljs-number">0</span>,index2 = <span class="hljs-number">0</span>;  <br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">temp</span><span class="hljs-params">(l)</span></span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; ++i) &#123;  <br><span class="hljs-keyword">if</span> (index1&gt;=m)&#123;  <br>temp[i]=nums2[index2++];  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index2&gt;=n)&#123;  <br>temp[i]=nums1[index1++];  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums1[index1]&lt;nums2[index2])&#123;  <br>temp[i]=nums1[index1++];  <br>&#125;  <br><span class="hljs-keyword">else</span> &#123;  <br>temp[i]=nums2[index2++];  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item:temp)&#123;  <br>nums1[j++]=item;  <br>&#125;  <br>&#125;  <br><span class="hljs-comment">//方法3（反向双指针）  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, <span class="hljs-type">int</span> m, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> n)</span> </span>&#123;  <br><span class="hljs-type">int</span> l = m+n,index1 = m<span class="hljs-number">-1</span>,index2 = n<span class="hljs-number">-1</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;  <br><span class="hljs-keyword">if</span> (index1&lt;<span class="hljs-number">0</span>)&#123;  <br>nums1[i]=nums2[index2--];  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index2&lt;<span class="hljs-number">0</span>)&#123;  <br><span class="hljs-comment">// nums1[i]=nums1[index1--];  </span><br><span class="hljs-keyword">break</span>;  <br>&#125;  <br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums1[index1]&gt;=nums2[index2])&#123;  <br>nums1[i]=nums1[index1--];  <br>&#125;  <br><span class="hljs-keyword">else</span> &#123;  <br>nums1[i]=nums2[index2--];  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;;  <br><span class="hljs-comment">//leetcode submit region end(Prohibit modification and deletion)</span><br><br></code></pre></td></tr></table></figure><h2 id="3-移动零"><a href="#3-移动零" class="headerlink" title="3. 移动零"></a>3. 移动零</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//双指针</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br><span class="hljs-keyword">if</span>(!nums.<span class="hljs-built_in">size</span>())&#123;  <br><span class="hljs-keyword">return</span>;  <br>&#125;  <br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item:nums)&#123;  <br><span class="hljs-keyword">if</span> (item!=<span class="hljs-number">0</span>)  <br>nums[j++]=item;  <br>&#125;  <br><span class="hljs-keyword">while</span> (j&lt;nums.<span class="hljs-built_in">size</span>())&#123;  <br>nums[j++]=<span class="hljs-number">0</span>;  <br>&#125;  <br>&#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-找到所有数组中消失的数字"><a href="#4-找到所有数组中消失的数字" class="headerlink" title="4. 找到所有数组中消失的数字"></a>4. 找到所有数组中消失的数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//数组 哈希表</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findDisappearedNumbers</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;  <br>vector&lt;<span class="hljs-type">int</span>&gt; disnums;  <br><span class="hljs-comment">// for(int item:nums)&#123;  </span><br><span class="hljs-comment">// item = item&gt;0 ? item : -item;  </span><br><span class="hljs-comment">// nums[item-1] = nums[item-1]&gt;0 ? nums[item-1] : -nums[item-1];  </span><br><span class="hljs-comment">// nums[item-1]=-nums[item-1];  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-comment">// for(int i=0;i&lt;nums.size();i++)&#123;  </span><br><span class="hljs-comment">// if (nums[i]&gt;0)  </span><br><span class="hljs-comment">// disnums.push_back(i+1);  </span><br><span class="hljs-comment">// &#125;  </span><br><span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> item:nums)&#123;  <br><span class="hljs-type">int</span> x = (item<span class="hljs-number">-1</span>)%n;  <br>nums[x]+=n;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;  <br><span class="hljs-keyword">if</span> (nums[i]&lt;=n)  <br>disnums.<span class="hljs-built_in">push_back</span>(i+<span class="hljs-number">1</span>);  <br>&#125;  <br><span class="hljs-keyword">return</span> disnums;  <br>&#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="王道机试指南"><a href="#王道机试指南" class="headerlink" title="王道机试指南"></a>王道机试指南</h1><h1 id="第二章暴力求解"><a href="#第二章暴力求解" class="headerlink" title="第二章暴力求解"></a>第二章暴力求解</h1><h2 id="1-枚举"><a href="#1-枚举" class="headerlink" title="1. 枚举"></a>1. 枚举</h2><h3 id="1-abc"><a href="#1-abc" class="headerlink" title="1. abc"></a>1. abc</h3><p><strong>三重循环暴力求解</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>    <span class="hljs-keyword">for</span> (a = <span class="hljs-number">0</span>; a &lt;= <span class="hljs-number">9</span>; a++) &#123;<br>        <span class="hljs-keyword">for</span> (b = <span class="hljs-number">0</span>; b &lt;= <span class="hljs-number">9</span>; b++) &#123;<br>            <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>; c &lt;= <span class="hljs-number">9</span>; c++) &#123;<br>                <span class="hljs-keyword">if</span> ((a * <span class="hljs-number">100</span> + b * <span class="hljs-number">10</span> + c) + (b * <span class="hljs-number">100</span> + c * <span class="hljs-number">10</span> + c) == <span class="hljs-number">532</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, a, b, c);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-反序数"><a href="#2-反序数" class="headerlink" title="2. 反序数"></a>2. 反序数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1000</span>; <span class="hljs-number">9</span> * i &lt;= <span class="hljs-number">9999</span>; i++) &#123;<br><br>        <span class="hljs-type">int</span> k = <span class="hljs-number">9</span> * i;<br><br>        <span class="hljs-keyword">if</span> (k / <span class="hljs-number">1000</span> == i % <span class="hljs-number">10</span> &amp;&amp; k % <span class="hljs-number">1000</span> / <span class="hljs-number">100</span> == i % <span class="hljs-number">100</span> / <span class="hljs-number">10</span> &amp;&amp;<br><br>                k % <span class="hljs-number">100</span> / <span class="hljs-number">10</span> == i % <span class="hljs-number">1000</span> / <span class="hljs-number">100</span> &amp;&amp;<br><br>                k % <span class="hljs-number">10</span> == i / <span class="hljs-number">1000</span>) &#123;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-对称平方数"><a href="#3-对称平方数" class="headerlink" title="3. 对称平方数"></a>3. 对称平方数</h3><p>判断一个数是否为对称数核心:<br><font color="#ff0000">while (j) {</font><br><font color="#ff0000">sum = sum * 10 + j % 10;</font><br><font color="#ff0000">j /= 10;</font><br><font color="#ff0000">}</font><br><span style="background:#affad1">j 为对称数则 sum 等于 j*j </span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">256</span> ; i++) &#123;<br><br>        <span class="hljs-type">int</span> j = i * i, sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(j) &#123;<br><br>            sum = sum * <span class="hljs-number">10</span> + j % <span class="hljs-number">10</span>;<br><br>            j /= <span class="hljs-number">10</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(sum == i * i) &#123;<br><br>            cout &lt;&lt; i &lt;&lt; endl;<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-与-7-无关的数"><a href="#4-与-7-无关的数" class="headerlink" title="4. 与 7 无关的数"></a>4. 与 7 无关的数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> b, c, x, sum;<br><br>    cin &gt;&gt; x;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= x; ++i) &#123;<br><br>        b = i % <span class="hljs-number">10</span>;<br><br>        c = (i / <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>;<br><br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">7</span> != <span class="hljs-number">0</span> &amp;&amp; b != <span class="hljs-number">7</span> &amp;&amp; c != <span class="hljs-number">7</span>) &#123;<br><br>            sum = sum + i * i;<br><br>        &#125;<br><br>    &#125;<br><br>    cout &lt;&lt; sum &lt;&lt; endl;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-百鸡问题"><a href="#5-百鸡问题" class="headerlink" title="5. 百鸡问题"></a>5. 百鸡问题</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>  <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> n;<br><br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt;= <span class="hljs-number">100</span>; ++x) &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt;= <span class="hljs-number">100</span>; ++y) &#123;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> z = <span class="hljs-number">0</span>; z &lt;= <span class="hljs-number">100</span>; ++z) &#123;<br><br>                <span class="hljs-keyword">if</span> (x + y + z == <span class="hljs-number">100</span> &amp;&amp; ((<span class="hljs-number">5</span> * x + <span class="hljs-number">3</span> * y + z / <span class="hljs-number">3.0</span>) &lt;= n)) &#123;<br><br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x=%d,y=%d,z=%d\n&quot;</span>, x, y, z);<br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-Old-Bill"><a href="#6-Old-Bill" class="headerlink" title="6.Old Bill"></a>6.Old Bill</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;title.h&quot;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n, x, y, z;  <br>vector&lt;<span class="hljs-type">int</span>&gt; buff;  <br>cin &gt;&gt; n;  <br>cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100000.0</span> / n; ++i) &#123;  <br><span class="hljs-type">int</span> sum = i * n;  <br><span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">10000</span>)  <br><span class="hljs-keyword">continue</span>;  <br><span class="hljs-type">int</span> a = sum % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> z1 = sum / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> y1 = sum / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> x1 = sum / <span class="hljs-number">1000</span> % <span class="hljs-number">10</span>;  <br><span class="hljs-type">int</span> b = sum / <span class="hljs-number">10000</span>;  <br><span class="hljs-keyword">if</span> (x == x1 &amp;&amp; y == y1 &amp;&amp; z == z1) &#123;  <br>buff.<span class="hljs-built_in">push_back</span>(b);  <br>buff.<span class="hljs-built_in">push_back</span>(a);  <br>buff.<span class="hljs-built_in">push_back</span>(i);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">if</span> (buff.<span class="hljs-built_in">empty</span>())  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);  <br><span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, buff[buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">3</span>], buff[buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>], buff[buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]);  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n, x, y, z;<span class="hljs-comment">//n火鸡数、xyz原价格中间三位</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;z);<br>        <span class="hljs-type">int</span> tot, f = <span class="hljs-number">0</span>;<span class="hljs-comment">//tot原价格、f标记是否存在能够整除火鸡数n的价格</span><br>        <span class="hljs-comment">//这里选择从9枚举到1是为了第一次输出就是最高价格</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a = <span class="hljs-number">9</span>; a &gt;= <span class="hljs-number">1</span>; a--)&#123;<span class="hljs-comment">//a控制原价格的万位[1,9]</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b = <span class="hljs-number">9</span>; b &gt;= <span class="hljs-number">0</span>; b--)&#123;<span class="hljs-comment">//b控制原价格的个位[0,9]</span><br>                tot = a * <span class="hljs-number">10000</span> + x * <span class="hljs-number">1000</span> + y * <span class="hljs-number">100</span> + z * <span class="hljs-number">10</span> + b;<br>                <span class="hljs-keyword">if</span>(tot % n == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//如果原价格tot能够整除火鸡数n</span><br>                    f = <span class="hljs-number">1</span>;<span class="hljs-comment">//则将整除标记置1</span><br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, a, b, tot / n);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;          <br>            &#125;<br>            <span class="hljs-keyword">if</span>(f) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//如果已经整除，则跳出枚举</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(!f) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<span class="hljs-comment">//如果没有可以整除的价格，则打印0</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-模拟"><a href="#2-模拟" class="headerlink" title="2. 模拟"></a>2. 模拟</h2><h3 id="1-图形排版"><a href="#1-图形排版" class="headerlink" title="1. 图形排版"></a>1. 图形排版</h3><h4 id="1-输出梯形"><a href="#1-输出梯形" class="headerlink" title="1. 输出梯形"></a>1. 输出梯形</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;title.h&quot;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> h;  <br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;h) != EOF) <span class="hljs-comment">//高度h  </span><br>&#123;  <br><span class="hljs-type">int</span> b = h + <span class="hljs-number">2</span> * (h - <span class="hljs-number">1</span>), t = h; <span class="hljs-comment">//下底边长，上底边长  </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= h; i++) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= b; j++) &#123;  <br><span class="hljs-keyword">if</span> (j &gt; b - t - <span class="hljs-number">2</span> * (i - <span class="hljs-number">1</span>))  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*&quot;</span>);  <br><span class="hljs-keyword">else</span>  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);  <br>&#125;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-叠筐"><a href="#2-叠筐" class="headerlink" title="2. 叠筐"></a>2. 叠筐</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">char</span> a,b;<br>    <span class="hljs-type">char</span> S[<span class="hljs-number">80</span>][<span class="hljs-number">80</span>];<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;a&gt;&gt;b)&#123;<br>        <span class="hljs-type">int</span> mid=n/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>        S[mid][mid]=a;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=mid;i++)&#123;<br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>;j++)&#123;<br>                    S[mid-i][mid-i+j]=b;<br>                    S[mid+i][mid-i+j]=b;<br>                    S[mid-i+j][mid-i]=b;<br>                    S[mid-i+j][mid+i]=b;<br>                    flag=<span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>;j++)&#123;<br>                    S[mid-i][mid-i+j]=a;<br>                    S[mid+i][mid-i+j]=a;<br>                    S[mid-i+j][mid-i]=a;<br>                    S[mid-i+j][mid+i]=a;<br>                    flag=<span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>        &#125;<br>        S[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=S[<span class="hljs-number">0</span>][n<span class="hljs-number">-1</span>]=S[n<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]=S[n<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>]=<span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>                    cout&lt;&lt;S[i][j];<br>                cout&lt;&lt;endl;<br>            &#125;<br> <br>            cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-日期"><a href="#2-日期" class="headerlink" title="2. 日期"></a>2. 日期</h3><h4 id="1-今天是第几天"><a href="#1-今天是第几天" class="headerlink" title="1. 今天是第几天"></a>1. 今天是第几天</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><br><span class="hljs-comment">// Created by alleyf on 2023/6/23.</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> </span>&#123;<br><br>    <span class="hljs-keyword">return</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>  <br><br>    <span class="hljs-type">int</span> year, month, day;<br><br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; year &gt;&gt; month &gt;&gt; day) &#123;<br><br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; monthDay&#123;<br><br>            &#123;<span class="hljs-number">1</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">28</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">6</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">8</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">10</span>, <span class="hljs-number">31</span>&#125;, &#123;<span class="hljs-number">11</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-number">12</span>, <span class="hljs-number">31</span>&#125;<br><br>        &#125;;<br><br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isLeap</span>(year)) &#123;<br><br>            monthDay[<span class="hljs-number">2</span>] = <span class="hljs-number">29</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; month; i++) &#123;<br><br>            sum += monthDay[i];<br><br>        &#125;<br><br>        sum += day;<br><br>        cout &lt;&lt; sum &lt;&lt; endl;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-打印日期"><a href="#2-打印日期" class="headerlink" title="2. 打印日期"></a>2. 打印日期</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/23.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span></span>&#123;  <br><span class="hljs-keyword">return</span> (year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>)||year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>;  <br>&#125;  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;  <br>  <br><span class="hljs-type">int</span> year,allday;  <br>string month,day;  <br><span class="hljs-keyword">while</span>(cin&gt;&gt;year&gt;&gt;allday)&#123;  <br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; monthDay&#123;  <br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">31</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">59</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">90</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">120</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">151</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">181</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">212</span>&#125;,&#123;<span class="hljs-number">8</span>,<span class="hljs-number">243</span>&#125;,&#123;<span class="hljs-number">9</span>,<span class="hljs-number">273</span>&#125;,&#123;<span class="hljs-number">10</span>,<span class="hljs-number">304</span>&#125;,&#123;<span class="hljs-number">11</span>,<span class="hljs-number">334</span>&#125;,&#123;<span class="hljs-number">12</span>,<span class="hljs-number">365</span>&#125;  <br>&#125;;  <br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isLeap</span>(year))&#123;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">12</span>;i++)&#123;  <br>monthDay[i]+=<span class="hljs-number">1</span>;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">12</span>;i++)&#123;  <br><span class="hljs-keyword">if</span>(monthDay[i]&gt;=allday)&#123;  <br>month = i&gt;=<span class="hljs-number">10</span> ? <span class="hljs-built_in">to_string</span>(i): (<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-built_in">to_string</span>(i));  <br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;  <br>day = allday&gt;=<span class="hljs-number">10</span> ? <span class="hljs-built_in">to_string</span>(allday): (<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-built_in">to_string</span>(allday));  <br>&#125;<span class="hljs-keyword">else</span> &#123;  <br>allday = allday - monthDay[i - <span class="hljs-number">1</span>];  <br>day = allday&gt;=<span class="hljs-number">10</span> ? <span class="hljs-built_in">to_string</span>(allday): (<span class="hljs-string">&#x27;0&#x27;</span>+<span class="hljs-built_in">to_string</span>(allday));  <br>&#125;  <br><span class="hljs-keyword">break</span>;  <br>&#125;;  <br>&#125;  <br>cout&lt;&lt;year&lt;&lt;<span class="hljs-string">&#x27;-&#x27;</span>&lt;&lt;month&lt;&lt;<span class="hljs-string">&#x27;-&#x27;</span>&lt;&lt;day&lt;&lt;endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-日期累加"><a href="#3-日期累加" class="headerlink" title="3. 日期累加"></a>3. 日期累加</h4><h5 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h5><p>以前大一的时候面对这个题，就是单纯按月份纯算，算的可谓是焦头烂额。现在学习了新的方法：</p><ol><li>计算是当年的第几天</li><li>这个数值sum加上需要累加的天数</li><li>计算进位的多少年，确定年份</li><li>根据剩下的第几天反解出这是几月几日</li><li>输出</li></ol><h5 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h5><p>用到的技巧包括打表、巧用bool。<br>提前写出来每个月有多少天、每年有多少天。<br>还有判断是否闰年函数，用它能够得到bool值，0和1可以分别对应于平年和闰年，所以上面的可以构造成二维数组。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> days[<span class="hljs-number">2</span>][<span class="hljs-number">12</span>]=&#123;<br>        &#123;<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;,<br>        &#123;<span class="hljs-number">31</span>,<span class="hljs-number">29</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>&#125;,<br>    &#125;;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> current = <span class="hljs-number">0</span>; current&lt;n; current++)&#123;<br>        <span class="hljs-type">int</span> year,month,date,plus;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>,&amp;year,&amp;month,&amp;date,&amp;plus);<br>        <span class="hljs-type">int</span> y=<span class="hljs-number">0</span>,m=<span class="hljs-number">1</span>,d=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">bool</span> leap = <span class="hljs-built_in">isLeap</span>(year);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;month;i++)&#123;<br>            sum+=days[leap][i<span class="hljs-number">-1</span>];<br>        &#125;<br>        sum+=date;<br>        sum+=plus;<br>        y=year;<br>        <span class="hljs-comment">//逐年增加，直到sum&lt;对应天数</span><br>        <span class="hljs-type">int</span> total[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">365</span>,<span class="hljs-number">366</span>&#125;;<br>        <span class="hljs-keyword">while</span>(sum&gt;total[<span class="hljs-built_in">isLeap</span>(y)])&#123;<br>            sum-=total[<span class="hljs-built_in">isLeap</span>(y)];<br>            y++;    <br>        &#125; <br>        <span class="hljs-comment">//反解为日期 </span><br>        leap = <span class="hljs-built_in">isLeap</span>(y);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;sum&gt;days[leap][i<span class="hljs-number">-1</span>];i++)&#123;<br>            m++;<br>            sum-=days[leap][i<span class="hljs-number">-1</span>];<br>        &#125;<br>        d=sum;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%04d-%02d-%02d\n&quot;</span>,y,m,d);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h3><h4 id="1-剩余的树"><a href="#1-剩余的树" class="headerlink" title="1. 剩余的树"></a>1. 剩余的树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by alleyf on 2023/6/24.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXL = <span class="hljs-number">100001</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">bool</span> flag[MAXL];<br>    <span class="hljs-type">int</span> l, m, num;<br>    cin &gt;&gt; l &gt;&gt; m;<br>    num = l + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= l; ++i) &#123;<br>        flag[i] = <span class="hljs-literal">true</span>;<br>    &#125;;<br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">int</span> left, right;<br>        cin &gt;&gt; left &gt;&gt; right;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = left; i &lt;= right; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (flag[i]) &#123;<br>                flag[i] = <span class="hljs-literal">false</span>;<br>                num--;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; num;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="#ff0000">1. 使用一个 l+1 长度的 array 存储所有树的存在状态，初始化所有树的状态为真；</font><br><font color="#ff0000">2. 根据区间循环判每棵树的状态，若为真则修改树输出总数的状态为假并将树的总数自减；</font><br><font color="#ff0000">3. 输出剩余树的数量。</font></p><h4 id="2-手机键盘"><a href="#2-手机键盘" class="headerlink" title="2. 手机键盘"></a>2. 手机键盘</h4><blockquote><ol><li>用一个数组按顺序保存每个字母所需要的时间段</li><li>循环每个输入的字母求和总次数，判断前后两字符是否在一个按键上，若果是则加两个时间段</li></ol></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/24.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> letter_num[<span class="hljs-number">26</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;  <br>string s;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; s) &#123;  <br><span class="hljs-type">int</span> allNum = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); ++i) &#123;  <br>allNum += letter_num[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>];  <br><span class="hljs-keyword">if</span> (i != <span class="hljs-number">0</span> &amp;&amp; s[i] - s[i - <span class="hljs-number">1</span>] == letter_num[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>] - letter_num[s[i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;a&#x27;</span>]) &#123;  <br>allNum += <span class="hljs-number">2</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; allNum &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-xxx-定律"><a href="#3-xxx-定律" class="headerlink" title="3.xxx_定律"></a>3.xxx_定律</h4><blockquote><p>既可递归实现也可 while 迭代迭代实现。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/24.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">xxx_law</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;num, <span class="hljs-type">int</span> &amp;cnt)</span> </span>&#123;  <br><span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) &#123;  <br><span class="hljs-keyword">return</span> cnt;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) &#123;  <br>cnt++;  <br>num = <span class="hljs-number">3</span> * num + <span class="hljs-number">1</span>;  <br>num /= <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">return</span> <span class="hljs-built_in">xxx_law</span>(num, cnt);  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>cnt++;  <br>num /= <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">return</span> <span class="hljs-built_in">xxx_law</span>(num, cnt);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> num;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; num) &#123;  <br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;  <br>cout &lt;&lt; <span class="hljs-built_in">xxx_law</span>(num, cnt) &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="第三章排序与查找"><a href="#第三章排序与查找" class="headerlink" title="第三章排序与查找"></a>第三章排序与查找</h1><h2 id="3-1-排序"><a href="#3-1-排序" class="headerlink" title="3.1 排序"></a>3.1 排序</h2><h3 id="1-排序"><a href="#1-排序" class="headerlink" title="1. 排序"></a>1. 排序</h3><p><span style="background:#b1ffff">&gt; 冒泡排序：</span><br><span style="background:#b1ffff">&gt;     1. 升序：外层循环递减，内层循环递增直到外层循环变量；</span><br><span style="background:#b1ffff">&gt;     2. 降序：外层循环递增，内层循环从外层循环变量开始递增。</span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n;  <br>cin &gt;&gt; n;  <br><span class="hljs-type">int</span> array[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; array[i];  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt; <span class="hljs-number">0</span>; --i) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) &#123;  <br><span class="hljs-keyword">if</span> (array[j] &gt; array[j + <span class="hljs-number">1</span>] &amp;&amp; j + <span class="hljs-number">1</span> &lt; n) &#123;  <br><span class="hljs-type">int</span> tmp = array[j + <span class="hljs-number">1</span>];  <br>array[j + <span class="hljs-number">1</span>] = array[j];  <br>array[j] = tmp;  <br>&#125;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value: array) &#123;  <br>cout &lt;&lt; value &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="大部分排序方法"><a href="#大部分排序方法" class="headerlink" title="大部分排序方法"></a>大部分排序方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//所有基本的排序方法了，桶排序、基数排序暂不写了  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, MAX = <span class="hljs-number">1e8</span>;  <br><span class="hljs-type">int</span> a[N];  <br><span class="hljs-type">int</span> n;  <br><span class="hljs-type">int</span> h[N], idx;<span class="hljs-comment">//heap_sort用  </span><br><span class="hljs-type">int</span> tmp[N];<span class="hljs-comment">//merge_sort用  </span><br><span class="hljs-type">int</span> bkt[MAX];<span class="hljs-comment">//counting_sort用  </span><br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">buble_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n - <span class="hljs-number">1</span> - i; j++) &#123;  <br><span class="hljs-keyword">if</span> (a[j] &gt; a[j + <span class="hljs-number">1</span>]) <span class="hljs-built_in">swap</span>(a[j], a[j + <span class="hljs-number">1</span>]);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;  <br><span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;  <br><span class="hljs-type">int</span> x = a[(l + r) / <span class="hljs-number">2</span>];  <br><span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">while</span> (i &lt; j) &#123;  <br><span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span> (a[i] &lt; x);  <br><span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span> (a[j] &gt; x);  <br><span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(a[i], a[j]);  <br>&#125;  <br><span class="hljs-built_in">quick_sort</span>(l, j);  <br><span class="hljs-built_in">quick_sort</span>(j + <span class="hljs-number">1</span>, r);  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;  <br><span class="hljs-type">int</span> min_pos = i;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)  <br><span class="hljs-keyword">if</span> (a[j] &lt; a[min_pos]) min_pos = j;  <br><span class="hljs-built_in">swap</span>(a[i], a[min_pos]);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;  <br><span class="hljs-type">int</span> t = u;  <br><span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= idx &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= idx &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">if</span> (t != u) &#123;  <br><span class="hljs-built_in">swap</span>(h[t], h[u]);  <br><span class="hljs-built_in">down</span>(t);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) h[i] = a[i - <span class="hljs-number">1</span>];  <br>idx = n;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = idx / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span>; i--) <span class="hljs-built_in">down</span>(i);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <br>a[i] = h[<span class="hljs-number">1</span>];  <br>h[<span class="hljs-number">1</span>] = h[idx--];  <br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;  <br><span class="hljs-type">int</span> cur_idx = a[i];  <br><span class="hljs-type">int</span> j;  <br><span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; cur_idx; j--) &#123;  <br>a[j + <span class="hljs-number">1</span>] = a[j];  <br>&#125;  <br>a[j + <span class="hljs-number">1</span>] = cur_idx;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">binary_insertion_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;  <br><span class="hljs-type">int</span> cur_idx = a[i];  <br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = i - <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">while</span> (l &lt; r) &#123;  <br><span class="hljs-type">int</span> mid = (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;  <br><span class="hljs-keyword">if</span> (a[mid] &lt;= cur_idx) l = mid;  <br><span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;  <br>&#125;  <br><span class="hljs-keyword">if</span> (a[l] &gt; cur_idx) l = <span class="hljs-number">-1</span>;  <br><span class="hljs-type">int</span> j;  <br><span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt; l; j--) a[j + <span class="hljs-number">1</span>] = a[j];  <br>a[j + <span class="hljs-number">1</span>] = cur_idx;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> gap = n / <span class="hljs-number">2</span>; gap &gt;= <span class="hljs-number">1</span>; gap /= <span class="hljs-number">2</span>) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = gap; i &lt; n; i++) &#123;  <br><span class="hljs-type">int</span> cur_idx = a[i];  <br><span class="hljs-type">int</span> j;  <br><span class="hljs-keyword">for</span> (j = i - gap; j &gt;= <span class="hljs-number">0</span> &amp;&amp; a[j] &gt; cur_idx; j -= gap) &#123;  <br>a[j + gap] = a[j];  <br>&#125;  <br>a[j + gap] = cur_idx;  <br>&#125;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;  <br><span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;  <br><span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;  <br><span class="hljs-built_in">merge_sort</span>(l, mid), <span class="hljs-built_in">merge_sort</span>(mid + <span class="hljs-number">1</span>, r);  <br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;  <br><span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;  <br><span class="hljs-keyword">if</span> (a[i] &lt;= a[j]) tmp[k++] = a[i++];  <br><span class="hljs-keyword">else</span> tmp[k++] = a[j++];  <br>&#125;  <br><span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = a[i++];  <br><span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = a[j++];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l, j = <span class="hljs-number">0</span>; i &lt;= r; j++, i++) a[i] = tmp[j];  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">counting_sort</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <br>bkt[a[i]]++;  <br><span class="hljs-keyword">if</span> (a[i] &gt; max) max = a[i];  <br>&#125;  <br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; max + <span class="hljs-number">1</span>; i++) &#123;  <br><span class="hljs-keyword">while</span> (bkt[i]) &#123;  <br>a[j++] = i;  <br>bkt[i]--;  <br>&#125;  <br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);  <br><span class="hljs-comment">// buble_sort();  </span><br><span class="hljs-comment">// quick_sort(0, n - 1);  </span><br><span class="hljs-comment">// selection_sort();  </span><br><span class="hljs-comment">// heap_sort();  </span><br><span class="hljs-comment">// insertion_sort();  </span><br><span class="hljs-comment">// binary_insertion_sort();  </span><br><span class="hljs-comment">// shell_sort();  </span><br><span class="hljs-comment">// merge_sort(0, n - 1);  </span><br><span class="hljs-built_in">counting_sort</span>();  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-成绩排序"><a href="#2-成绩排序" class="headerlink" title="2. 成绩排序"></a>2. 成绩排序</h3><p><font color="#f79646">- 定义一个结构体包含学号与成绩</font><br><font color="#f79646">- 写一个比较器 Compare</font><br><font color="#f79646">- 使用内置 sort 算法，设置迭代头和尾（地址）以及比较规则（比较器）</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-comment">//定义学生结构体  </span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;  <br><span class="hljs-type">int</span> number;  <br><span class="hljs-type">int</span> score;  <br>  <br><span class="hljs-built_in">Student</span>() &#123;&#125;  <br>  <br><span class="hljs-built_in">Student</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> s) : <span class="hljs-built_in">number</span>(n), <span class="hljs-built_in">score</span>(s) &#123;&#125;  <br>&#125;;  <br>  <br><span class="hljs-comment">//定义比较函数  </span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Compare</span><span class="hljs-params">(Student s1, Student s2)</span> </span>&#123;  <br><span class="hljs-comment">//成绩相同比学号  </span><br><span class="hljs-keyword">if</span> (s1.score == s2.score) &#123;  <br><span class="hljs-keyword">return</span> s1.number &lt; s2.number; <span class="hljs-comment">//&#x27;&lt;&#x27;,指按照比较的参数由小到大排序  </span><br>&#125; <span class="hljs-keyword">else</span> &#123;  <br><span class="hljs-keyword">return</span> s1.score &lt; s2.score; <span class="hljs-comment">////&#x27;&lt;&#x27;,指按照比较的参数由小到大排序,同理，如果是&#x27;&gt;&#x27;，指按照由大到小排序  </span><br>&#125;  <br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n;  <br>cin &gt;&gt; n;  <br><span class="hljs-comment">//定义数组保存比较学生的基本信息  </span><br>Student arr[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i].number &gt;&gt; arr[i].score;  <br>&#125;  <br><span class="hljs-built_in">sort</span>(arr, arr + n, Compare);  <br><span class="hljs-keyword">for</span> (Student s: arr) &#123;  <br>cout &lt;&lt; s.number &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s.score &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-成绩排序-2"><a href="#3-成绩排序-2" class="headerlink" title="3. 成绩排序 2"></a>3. 成绩排序 2</h3><p>方法 1：<br><font color="#ff0000">sort是不稳定排序，stable_sort才是稳定排序，稳定排序不改变输入的顺序</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><span class="hljs-type">int</span> num, sort_flag;  <br>  <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;  <br>string name;  <br><span class="hljs-type">int</span> score;  <br>  <br><span class="hljs-built_in">Student</span>() &#123;&#125;;  <br>  <br><span class="hljs-built_in">Student</span>(string n, <span class="hljs-type">int</span> s) : <span class="hljs-built_in">name</span>(n), <span class="hljs-built_in">score</span>(s) &#123;&#125;  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Compare</span><span class="hljs-params">(Student s1, Student s2)</span> </span>&#123;  <br><span class="hljs-keyword">return</span> sort_flag ? s1.score &lt; s2.score : s1.score &gt; s2.score;<span class="hljs-comment">//sort_flag为真则升序否则降序  </span><br>&#125;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; num &gt;&gt; sort_flag) &#123;  <br>Student arr[num];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; num; ++i) &#123;  <br>cin &gt;&gt; arr[i].name &gt;&gt; arr[i].score;  <br>&#125;  <br><span class="hljs-built_in">stable_sort</span>(arr, arr + num, Compare);<span class="hljs-comment">//重点：sort是不稳定排序，stable_sort才是稳定排序，稳定排序不改变输入的顺序  </span><br><span class="hljs-keyword">for</span> (Student s: arr) &#123;  <br>cout &lt;&lt; s.name &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; s.score &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：<br>用一个编号保存每个学生的顺序，排序比较器里成绩相等的按照编号升序排</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span>&#123;<br>string name;<br><span class="hljs-type">int</span> score;<br><span class="hljs-type">int</span> num; <br>&#125;;<br><span class="hljs-type">int</span> flag; <span class="hljs-comment">//升序还是降序 </span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a,student b)</span></span>&#123;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>(a.score==b.score) <span class="hljs-keyword">return</span> a.num&lt;b.num;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.score&gt;b.score;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span>(a.score==b.score) <span class="hljs-keyword">return</span> a.num&lt;b.num;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> a.score&lt;b.score;<span class="hljs-comment">//这里必须写else，否则牛客会编译失败 </span><br>&#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n)&#123;<br>cin&gt;&gt;flag;<br>student stu[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;stu[i].name&gt;&gt;stu[i].score;<br>stu[i].num=i;<br>&#125; <br><span class="hljs-built_in">sort</span>(&amp;stu[<span class="hljs-number">0</span>],&amp;stu[n],cmp); <span class="hljs-comment">//重点：sort是不稳定排序，stable_sort才是稳定排序 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) cout&lt;&lt;stu[i].name&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;stu[i].score&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="3-2-查找"><a href="#3-2-查找" class="headerlink" title="3.2 查找"></a>3.2 查找</h2><h3 id="1-找-x"><a href="#1-找-x" class="headerlink" title="1. 找 x"></a>1. 找 x</h3><p>方法 1：<br>用 flag 标志是否找到</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n, t;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;  <br><span class="hljs-type">int</span> arr[n];  <br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i];  <br>&#125;  <br>cin &gt;&gt; t;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br><span class="hljs-keyword">if</span> (t == arr[i]) &#123;  <br>cout &lt;&lt; i &lt;&lt; endl;  <br>flag = ~flag;  <br><span class="hljs-keyword">break</span>;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">if</span> (!flag)  <br>cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：<br>设置初始默认为-1，找到则修改状态</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> maxn=<span class="hljs-number">200</span>+<span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> arr[maxn];<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)!=EOF)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i]);<br>        &#125;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-type">int</span> answer=<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i]==x)&#123;<br>                answer=i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,answer);<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="2-查找"><a href="#2-查找" class="headerlink" title="2. 查找"></a>2. 查找</h3><p>方法 1：复杂度 O（n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n) &#123;<br>        map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">bool</span>&gt; mp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> temp;<br>            cin&gt;&gt;temp;<br>            mp[temp] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        cin&gt;&gt;m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-type">int</span> temp;<br>            cin&gt;&gt;temp;<br>            <span class="hljs-keyword">if</span> (mp.<span class="hljs-built_in">find</span>(temp) != mp.<span class="hljs-built_in">end</span>()) &#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;endl;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：复杂度 O（m·n）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/25.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n, m;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;  <br><span class="hljs-type">int</span> arr[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i];  <br>&#125;  <br>cin &gt;&gt; m;  <br><span class="hljs-type">int</span> tar[m];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;  <br>cin &gt;&gt; tar[i];  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;  <br>string status = <span class="hljs-string">&quot;NO&quot;</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;  <br><span class="hljs-keyword">if</span> (arr[j] == tar[i]) &#123;  <br>status = <span class="hljs-string">&quot;YES&quot;</span>;  <br><span class="hljs-keyword">break</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; status &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-extrenum-index"><a href="#3-extrenum-index" class="headerlink" title="3.extrenum_index"></a>3.extrenum_index</h3><p>方法 1：<br>空间复杂度为 O（1）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, i, left, mid, right;<br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;<br>cin &gt;&gt; mid &gt;&gt; right;<br><span class="hljs-keyword">if</span> (mid != right)<br>cout &lt;&lt; <span class="hljs-string">&quot;0 &quot;</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>left = mid;<br>mid = right;<br>cin &gt;&gt; right;<br><span class="hljs-keyword">if</span> ((mid - left) * (mid - right) &gt; <span class="hljs-number">0</span>)<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (mid != right)<br>cout &lt;&lt; i;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>方法 2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br><span class="hljs-type">int</span> n;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; n) &#123;  <br><span class="hljs-type">int</span> arr[n];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;  <br>cin &gt;&gt; arr[i];  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;  <br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; arr[i] != arr[i + <span class="hljs-number">1</span>]) &#123;  <br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((arr[i] &gt; arr[i - <span class="hljs-number">1</span>] &amp;&amp; arr[i] &gt; arr[i + <span class="hljs-number">1</span>]) || (arr[i] &lt; arr[i - <span class="hljs-number">1</span>] &amp;&amp; arr[i] &lt; arr[i + <span class="hljs-number">1</span>])) &#123;  <br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br><span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">2</span> &amp;&amp; arr[i] != arr[i + <span class="hljs-number">1</span>]) &#123;  <br>cout &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-找位置"><a href="#4-找位置" class="headerlink" title="4. 找位置"></a>4. 找位置</h3><p><span style="background:#b1ffff">时间复杂度为 O(n)</span></p><p><font color="#ff0000">1. 用一个额外的矢量 orderS 不重复的添加字符，以保证输出时字符顺序</font><br><font color="#ff0000">2. 用map的key记录字符，value记录重复出现的次数</font><br><font color="#ff0000">3. 最后按照orderS的顺序遍历输出</font></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string s;  <br>map&lt;<span class="hljs-type">char</span>, vector&lt;<span class="hljs-type">int</span>&gt;&gt; sm;  <br>vector&lt;<span class="hljs-type">char</span>&gt; orderS;  <br>cin &gt;&gt; s;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;  <br><span class="hljs-keyword">if</span> (sm.<span class="hljs-built_in">find</span>(s[i]) != sm.<span class="hljs-built_in">end</span>()) &#123;  <br>sm[s[i]].<span class="hljs-built_in">push_back</span>(i);  <br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>sm[s[i]] = vector&lt;<span class="hljs-type">int</span>&gt;&#123;i&#125;;  <br>orderS.<span class="hljs-built_in">push_back</span>(s[i]);  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> item: orderS) &#123;  <br><span class="hljs-keyword">auto</span> tmp = sm.<span class="hljs-built_in">find</span>(item);  <br><span class="hljs-keyword">if</span> (tmp != sm.<span class="hljs-built_in">end</span>() &amp;&amp; tmp-&gt;second.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index: tmp-&gt;second) &#123;  <br><span class="hljs-keyword">if</span> (index != tmp-&gt;second.<span class="hljs-built_in">back</span>())  <br>cout &lt;&lt; tmp-&gt;first &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; index &lt;&lt; <span class="hljs-string">&#x27;,&#x27;</span>;  <br><span class="hljs-keyword">else</span>  <br>cout &lt;&lt; tmp-&gt;first &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; index &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="第四章字符串"><a href="#第四章字符串" class="headerlink" title="第四章字符串"></a>第四章字符串</h1><h2 id="1-字符串处理"><a href="#1-字符串处理" class="headerlink" title="1. 字符串处理"></a>1. 字符串处理</h2><h3 id="1-特殊乘法"><a href="#1-特殊乘法" class="headerlink" title="1. 特殊乘法"></a>1. 特殊乘法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string a, b;  <br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; a &gt;&gt; b) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> i: a) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> j: b) &#123;  <br>sum += (i - <span class="hljs-string">&#x27;0&#x27;</span>) * (j - <span class="hljs-string">&#x27;0&#x27;</span>);  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; sum &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-密码翻译"><a href="#2-密码翻译" class="headerlink" title="2. 密码翻译"></a>2. 密码翻译</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string s;  <br><span class="hljs-keyword">while</span> (cin &gt;&gt; s) &#123;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">length</span>(); ++i) &#123;  <br><span class="hljs-keyword">if</span> ((s[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;Y&#x27;</span>) || (s[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">&#x27;y&#x27;</span>)) &#123;  <br>s[i] += <span class="hljs-number">1</span>;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;z&#x27;</span> || s[i] == <span class="hljs-string">&#x27;Z&#x27;</span>) &#123;  <br>s[i] = s[i] == <span class="hljs-string">&#x27;z&#x27;</span> ? <span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-string">&#x27;A&#x27;</span>;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; s &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-简单密码"><a href="#3-简单密码" class="headerlink" title="3. 简单密码"></a>3. 简单密码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 方法1：</span><br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, s)) &#123;<br>        <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;ENDOFINPUT&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;START&quot;</span> &amp;&amp; s != <span class="hljs-string">&quot;END&quot;</span>) &#123;<br>                <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> item : s) &#123;<br>                    <span class="hljs-keyword">if</span> ((item &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; item &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>))<br>                       s[i] = <span class="hljs-string">&#x27;A&#x27;</span> + (item - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">21</span>) % <span class="hljs-number">26</span>;<br>                    i++;<br>                &#125;<br>                cout &lt;&lt; s &lt;&lt; endl;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 方法2:</span><br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by alleyf on 2023/6/26.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">char</span>&gt; pwd_map&#123;<br>    &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>&#125;,<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    string s;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, s)) &#123;<br>        <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;ENDOFINPUT&quot;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-string">&quot;START&quot;</span> &amp;&amp; s != <span class="hljs-string">&quot;END&quot;</span>) &#123;<br>                <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> item : s) &#123;<br>                    <span class="hljs-keyword">if</span> ((item &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; item &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>))<br>                       s[i] = pwd_map[item];<br>                    i++;<br>                &#125;<br>                cout &lt;&lt; s &lt;&lt; endl;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-统计字符"><a href="#4-统计字符" class="headerlink" title="4. 统计字符"></a>4. 统计字符</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/30.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string ts, s;  <br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(cin, ts)) &#123;  <br><span class="hljs-keyword">if</span> (ts == <span class="hljs-string">&quot;#&quot;</span>)  <br><span class="hljs-keyword">break</span>;  <br><span class="hljs-built_in">getline</span>(cin, s);  <br><span class="hljs-type">int</span> cnum[ts.<span class="hljs-built_in">length</span>()];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ts.<span class="hljs-built_in">length</span>(); ++i) &#123;  <br>cnum[i] = <span class="hljs-number">0</span>;  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> j: s) &#123;  <br><span class="hljs-keyword">if</span> (j == ts[i]) &#123;  <br>cnum[i]++;  <br>&#125;  <br>&#125;  <br>cout &lt;&lt; ts[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; cnum[i] &lt;&lt; endl;  <br>&#125;  <br>&#125;  <br>  <br>&#125;  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment">* 方法2：  </span><br><span class="hljs-comment">* using namespace std;  </span><br><span class="hljs-comment">//1：注意读题，i ng是当四个字符处理，而非i和ng  </span><br><span class="hljs-comment">//2：如何持续输入？while持续输入第一个字符，循环体内输入第二个  </span><br><span class="hljs-comment">//如何捕捉结束字符？在第一个字符串输入时识别  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">int number[128];  </span><br><span class="hljs-comment">int main()  </span><br><span class="hljs-comment">&#123;  </span><br><span class="hljs-comment">string str1,str2;  </span><br><span class="hljs-comment">while(getline(cin,str1))&#123;  </span><br><span class="hljs-comment">if(str1==&quot;#&quot;) break;  </span><br><span class="hljs-comment">getline(cin,str2);  </span><br><span class="hljs-comment">memset(number,0,sizeof(number)); //number数组记录该字符，出现的次数  </span><br><span class="hljs-comment">for(int i=0;i&lt;str2.size();i++)&#123;  </span><br><span class="hljs-comment">number[str2[i]]++; //长字符串的字符对应ASCII码的下标+1  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">for(int i=0;i&lt;str1.size();i++)&#123;  </span><br><span class="hljs-comment">printf(&quot;%c %d\n&quot;,str1[i],number[str1[i]]);  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">&#125;  </span><br><span class="hljs-comment">//学到的方法：ASCII码不大，想统计每个字符，直接将其对应的ASCII码下标的元素加1即可！  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="5-字母统计"><a href="#5-字母统计" class="headerlink" title="5. 字母统计"></a>5. 字母统计</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//  </span><br><span class="hljs-comment">// Created by alleyf on 2023/6/30.  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br>  <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; c_map&#123;  <br>&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#123;<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-number">0</span>&#125;,  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>string s;  <br><span class="hljs-built_in">getline</span>(cin, s);  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c: s) &#123;  <br><span class="hljs-keyword">if</span> (c_map.<span class="hljs-built_in">find</span>(c) != c_map.<span class="hljs-built_in">end</span>()) &#123;  <br>c_map[c]++;  <br>&#125;  <br>&#125;  <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> item: c_map) &#123;  <br>cout &lt;&lt; item.first &lt;&lt; <span class="hljs-string">&#x27;:&#x27;</span> &lt;&lt; item.second &lt;&lt; endl;  <br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-字符串匹配"><a href="#2-字符串匹配" class="headerlink" title="2. 字符串匹配"></a>2. 字符串匹配</h2>]]></content>
    
    
    <categories>
      
      <category>前后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dateframe—Algorithm</title>
    <link href="/2023/03/2e76a383274a.html"/>
    <url>/2023/03/2e76a383274a.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-线性表"><a href="#1-线性表" class="headerlink" title="1.线性表"></a>1.线性表</h1><blockquote><p>无论哪种数据结构，都存在<font color="#ff0000">增删改查 (按值查找)查（按位查找）</font>操作，对应不同操作的<font color="#4bacc6">时间复杂度不同</font>，要根据实际数据的形式选择合适的数据结构进行存储，再选择合适算法进行处理。</p></blockquote><h2 id="顺序表（sequence-list）"><a href="#顺序表（sequence-list）" class="headerlink" title="顺序表（sequence list）"></a>顺序表（sequence list）</h2><h3 id="1初始化"><a href="#1初始化" class="headerlink" title="1初始化"></a>1初始化</h3><h3 id="2增加元素"><a href="#2增加元素" class="headerlink" title="2增加元素"></a>2增加元素</h3><h3 id="3删除元素"><a href="#3删除元素" class="headerlink" title="3删除元素"></a>3删除元素</h3><h3 id="4修改元素"><a href="#4修改元素" class="headerlink" title="4修改元素"></a>4修改元素</h3><h3 id="5查找元素"><a href="#5查找元素" class="headerlink" title="5查找元素"></a>5查找元素</h3><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><h2 id="链表（link-list）"><a href="#链表（link-list）" class="headerlink" title="链表（link list）"></a>链表（link list）</h2><h3 id="1初始化-1"><a href="#1初始化-1" class="headerlink" title="1初始化"></a>1初始化</h3><h3 id="2增加元素-1"><a href="#2增加元素-1" class="headerlink" title="2增加元素"></a>2增加元素</h3><h4 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h4><h4 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h4><h3 id="3删除元素-1"><a href="#3删除元素-1" class="headerlink" title="3删除元素"></a>3删除元素</h3><h3 id="4修改元素-1"><a href="#4修改元素-1" class="headerlink" title="4修改元素"></a>4修改元素</h3><h3 id="5查找元素-1"><a href="#5查找元素-1" class="headerlink" title="5查找元素"></a>5查找元素</h3><h4 id="按值查找-1"><a href="#按值查找-1" class="headerlink" title="按值查找"></a>按值查找</h4><h4 id="按位查找-1"><a href="#按位查找-1" class="headerlink" title="按位查找"></a>按位查找</h4><h1 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h1><blockquote><p>栈是一种<font color="#8064a2">后进先出（LIFO）</font>的线性表结构。</p></blockquote><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>SElemType *base;<br>SElemType *top;<br><span class="hljs-type">int</span> stacksize;&#125; SgStack;<br></code></pre></td></tr></table></figure><p><span style="background:#b1ffff">链栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span>&#123;</span><br>SElemType data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StackNode</span> *<span class="hljs-title">next</span>;</span>&#125;StackNode,*LinkStack;<br><br></code></pre></td></tr></table></figure><h2 id="1初始化-2"><a href="#1初始化-2" class="headerlink" title="1初始化"></a>1初始化</h2><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitStack</span><span class="hljs-params">(SgStack &amp;S,<span class="hljs-type">int</span> MAXSIZE&#123;</span><br><span class="hljs-params">S.base =new SElemType [MAXSIZE]；</span><br><span class="hljs-params"><span class="hljs-keyword">if</span>(!S.base） </span><br><span class="hljs-params">   <span class="hljs-keyword">return</span> OVERFLOW;</span><br><span class="hljs-params">   S.top = S.base;</span><br><span class="hljs-params">   S.stacksize = MAXSIZE；</span><br><span class="hljs-params">   <span class="hljs-keyword">return</span> OK;</span><br></code></pre></td></tr></table></figure><p><span style="background:#b1ffff">链栈：</span></p><p><strong>不带头节点：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Initstack</span> <span class="hljs-params">(LinkStack &amp;S)</span><br>&#123;<br>S=<span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-入栈"><a href="#2-入栈" class="headerlink" title="2 入栈"></a>2 入栈</h2><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span><br>时间复杂度：O（1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><br>Status <span class="hljs-title function_">Push</span><span class="hljs-params">(SqStack &amp;S,SElemType e)</span><br>&#123;<br><span class="hljs-keyword">if</span>(S.top - S.base==S.stacksize）<span class="hljs-keyword">return</span> ERROR;<br>*S.top++=e;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是一个名为 <code>Push</code> 的函数，它接受两个参数：一个指向栈 <code>S</code> 的指针引用和要入栈的元素 <code>e</code>。<code>SqStack</code> 表示栈的类型，在这里推测它是由结构体或类定义的。<code>&amp;S</code> 表示将栈变量的地址传递给函数，通过引用来修改栈的内容。在 C/C++中，引用有时候也被称为别名(alias)，它允许我们使用类似于指针的语法来操作对象，但是具有更好的安全性和易读性。<code>SElemType</code> 是栈元素的数据类型，可以是任何合法的数据类型。</p><p>这个函数的作用是将元素e压入到栈S中，如果栈已满则返回ERROR，否则在栈顶插入元素e并返回OK。其中<code>S.top - S.base</code> 表示当前栈中已有元素的个数，如果这个值等于<code>S.stacksize</code>就意味着栈已经满了。<code>*S.top++=e</code>表示将元素e存储在栈顶，并将栈指针往上移动一位，准备接收下一个元素。最后，函数返回插入操作的结果，OK表示成功，ERROR表示失败。</p><p><span style="background:#b1ffff">链栈：</span><br><strong>头插</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">Push</span> <span class="hljs-params">(LinkStack&amp;S,ElemType e)</span>&#123;<br>p=new StackNode;<span class="hljs-comment">//生成新结点p</span><br><span class="hljs-keyword">if</span> (!p)<span class="hljs-keyword">return</span> OVERFLOW;<br>p-&gt;data=e;<br>p-&gt;next=S;<br>S=p;<span class="hljs-comment">//S始终指向当前第一个节点(栈顶节点)</span><br><span class="hljs-keyword">return</span> OK;<br><br></code></pre></td></tr></table></figure><h2 id="3-出栈"><a href="#3-出栈" class="headerlink" title="3 出栈"></a>3 出栈</h2><p><span style="background:rgba(240, 107, 5, 0.2)">顺序栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">Pop</span><span class="hljs-params">(SqStack &amp;S,SElemType &amp;e)</span><br>&#123;<br><span class="hljs-keyword">if</span>(S.top == S.base）<span class="hljs-keyword">return</span> ERROR;<br>e=*--S.top;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#b1ffff">链栈：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">Pop</span> <span class="hljs-params">(LinkStack &amp;S,SElemType &amp;e)</span><br>&#123;<br><span class="hljs-keyword">if</span> (S==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> ERROR;<br>e = S-&gt;data;<br>p = S;<br>S = S-&gt;next;<br>delete p;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="3-队列"><a href="#3-队列" class="headerlink" title="3. 队列"></a>3. 队列</h1><blockquote><p>队列是一种先进先出（FIFO）的线性表，只允许在表的一端插入，另一端删除。</p></blockquote><p><font color="#8064a2">顺序队列：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">Typedef <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>QElemType *base;<span class="hljs-comment">//初始化的动态分配存储空间</span><br><span class="hljs-type">int</span> front;<span class="hljs-comment">//头指针</span><br><span class="hljs-type">int</span> rear;<span class="hljs-comment">//尾指针</span><br>&#125;SgQueue;<br><br></code></pre></td></tr></table></figure><p><font color="#f79646">链队列：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">QNode</span></span><br><span class="hljs-class">&#123;</span><br>QElemType data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Qnode</span> *<span class="hljs-title">next</span>;</span><br>&#125;Qnode,*QueuePtr;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>QueuePtr front;<span class="hljs-comment">//队头指针</span><br>QueuePtr rear;<span class="hljs-comment">//队尾指针</span><br>&#125;LinkQueue;<br><br></code></pre></td></tr></table></figure><h2 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1 初始化"></a>1 初始化</h2><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitQueue</span> <span class="hljs-params">(SgQueue &amp;Q)</span><br>&#123;<br>Q.base = new QElemType[MAXQSIZE];<br><span class="hljs-keyword">if</span> (!Q.base)<br><span class="hljs-built_in">exit</span> (OVERFLOW);<br>Q.front=Q.rear=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#fdbfff">链队列：</span><br><strong>有头节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">InitQueue</span> <span class="hljs-params">(LinkQueue &amp;Q)</span>&#123;<br>Q.front=(QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(QNode));<br><span class="hljs-keyword">if</span>(!Q.front)<br><span class="hljs-built_in">exit</span>(OVERFLOW);<br>Q.rear=Q.front;<br>Q.front-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#d3f8b6">队空标志：front==rear</span><br><span style="background:#d3f8b6">队满标志：（rear+1）%M=front</span>（循环队列）</p><h2 id="2-入队"><a href="#2-入队" class="headerlink" title="2 入队"></a>2 入队</h2><p><strong>链接新节点，更新队尾节点</strong></p><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q,QElemType e)</span><br>&#123;<span class="hljs-keyword">if</span>((Q.rear+<span class="hljs-number">1</span>)%MAXQSIZE==Q.front)<br><span class="hljs-keyword">return</span> ERROR;<br>Q.base[Q.rear]=e;<br>Q.rear=(Q.rear+<span class="hljs-number">1</span>)%MAXQSIZE;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><span style="background:#fdbfff">链队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">EnQueue</span> <span class="hljs-params">(LinkQueue &amp;Q,QElemType e)</span>&#123;<br>p=(QueuePtr)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span> (QNode));<br><span class="hljs-keyword">if</span>(!p)<br><span class="hljs-built_in">exit</span>(OVERFLOW);<br>p-&gt;data=e;<br>p-&gt;next=<span class="hljs-literal">NULL</span>;<br>Q.rear-&gt;next=p;<br>Q.rear=p;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-出队"><a href="#3-出队" class="headerlink" title="3 出队"></a>3 出队</h2><p><strong>临时存储首元节点，队头节点指向首元节点的下一个节点，删除释放首元节点</strong></p><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">DeQueue</span> <span class="hljs-params">(LinkQueue &amp;Q,QElemType &amp;e)</span><br>&#123;<br><span class="hljs-keyword">if</span>(Q.front==Q.rear)<br><span class="hljs-keyword">return</span> ERROR;<br>e=Q.base[Q.front];<br>Q.front=(Q.front+<span class="hljs-number">1</span>)%MAXQSIZE;<br><span class="hljs-keyword">return</span> OK;<br>&#125;<br></code></pre></td></tr></table></figure><p><span style="background:#fdbfff">链队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">Status <span class="hljs-title function_">DeQueue</span> <span class="hljs-params">(LinkQueue &amp;Q,QElemType &amp;e&#123;</span><br><span class="hljs-params"><span class="hljs-keyword">if</span>(Q.front==Q.rear)</span><br><span class="hljs-params"><span class="hljs-keyword">return</span> ERROR;</span><br><span class="hljs-params">p=Q.front-&gt;next;</span><br><span class="hljs-params">e=p-&gt;data;</span><br><span class="hljs-params">Q.front-&gt;next=p-&gt;next;</span><br><span class="hljs-params"><span class="hljs-keyword">if</span>(Q.rear==p)</span><br><span class="hljs-params">Q.rear=Q.front;</span><br><span class="hljs-params"><span class="hljs-built_in">free</span>(p);</span><br><span class="hljs-params"><span class="hljs-keyword">return</span> OK;</span><br><span class="hljs-params">&#125;</span><br></code></pre></td></tr></table></figure><p><span style="background:rgba(240, 200, 0, 0.2)">最后一个节点的时候，不删除，要让队头等于队尾节点。</span></p><h2 id="4-取队列长度"><a href="#4-取队列长度" class="headerlink" title="4 取队列长度"></a>4 取队列长度</h2><p><span style="background:#d3f8b6">顺序队列：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">QueueLength</span><span class="hljs-params">(SqQueue Q)</span><br>&#123;<br><span class="hljs-keyword">return</span> (Q.rear-Q.front+MAXQSIZE)%MAXQSIZE;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h1 id="4-串、数组和广义表"><a href="#4-串、数组和广义表" class="headerlink" title="4. 串、数组和广义表"></a>4. 串、数组和广义表</h1><blockquote><p> 串就是字符串<br> 数组包括一维数组和二维数组<br> 广义表类似于 python 中的列表，可以表嵌套</p></blockquote><h1 id="5-树"><a href="#5-树" class="headerlink" title="5. 树"></a>5. 树</h1><p>n 个节点的有限集合</p><h2 id="1性质"><a href="#1性质" class="headerlink" title="1性质"></a>1性质</h2><ul><li>具有 n 个节点的完全二叉树的深度为<br>$$<a href="%E5%8F%96%E4%B8%8B%E7%95%8C">log_2 n</a>+1$$</li></ul><p>两类特殊的二叉树：</p><ol><li>满二叉树：<span style="background:#b1ffff">指深度为 k 且含有</span> $2^k-1$ <span style="background:#b1ffff">个节点的二叉树。</span></li><li>完全二叉树：<span style="background:#affad1">书中所含的 n 个节点和满二叉树中编号为 1 至 n 的节点一一对应。</span></li></ol><h2 id="2存储结构"><a href="#2存储结构" class="headerlink" title="2存储结构"></a>2存储结构</h2><p>顺序存储：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAXSIZE 100</span><br><span class="hljs-keyword">typedef</span> TElemType SqBiTree[MAXSIZE];<br>SqBiTree bt;<br></code></pre></td></tr></table></figure><p>链式存储：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>   TEIemType data;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BiTNode</span> *<span class="hljs-title">Ichild</span>, *<span class="hljs-title">rchild</span>;</span><br>&#125;BiTNode, *BiTree;<br></code></pre></td></tr></table></figure><h2 id="3遍历方式"><a href="#3遍历方式" class="headerlink" title="3遍历方式"></a>3遍历方式</h2><blockquote><p>先中后的顺序指的是根据点访问的顺序，如先序遍历就是<font color="#f79646">根左右</font>，后序遍历就是<font color="#f79646">左右根</font>。</p></blockquote><p><img src="https://s2.loli.net/2023/05/24/kyjJIXU7eLSbCFW.png" alt="遍历图|275"></p><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>ABCDEFGHK</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Preorder</span> <span class="hljs-params">(BiTree T)</span><br>&#123;<br>   <span class="hljs-keyword">if</span> (T)&#123;<br>      visit(T-&gt;data);<br>      Preorder(T-&gt;IchiId);<br>      Preorder(T-&gt;rchiId);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>BDCAEHGKF</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Inorder</span> <span class="hljs-params">(BiTree T)</span><br>&#123;<br>   <span class="hljs-keyword">if</span> (T) &#123;<br>      Inorder(T-&gt;lchiId);<br>      visit(T-&gt;data);<br>      Ineorder(T-&gt;rchiId);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>中序非递归：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Inorder1</span> <span class="hljs-params">(BiTree T)</span><br>&#123; <br>Initstack(S); p=T;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">while</span>(p) &#123;Push(S,p);p=p-&gt;lchild;&#125;<span class="hljs-comment">//先将左孩子全部入栈</span><br><span class="hljs-keyword">if</span>(StackEmpty(S)) <span class="hljs-keyword">return</span>;<br>Pop(S,p);<span class="hljs-comment">//出一个左孩子</span><br><span class="hljs-built_in">cout</span>&lt;&lt;P-&gt;data;<br>p=p-&gt;rchild;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>DCBHKGFEA</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bkorder</span> <span class="hljs-params">(BiTree T)</span><br>&#123;<br>   <span class="hljs-keyword">if</span> (T) &#123;<br>      bkorder(T-&gt;lchiId);<br>      bkorder(T-&gt;rchiId);<br>      visit(T-&gt;data);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><p>ABECFDGHK</p><h3 id="4-常见应用"><a href="#4-常见应用" class="headerlink" title="4 常见应用"></a>4 常见应用</h3><ol><li>统计二叉树中叶子节点的个数：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CountLeaf</span> <span class="hljs-params">(BiTree T, <span class="hljs-type">int</span> &amp; count)</span> &#123;<br><span class="hljs-keyword">if</span>(T)&#123;<br><span class="hljs-keyword">if</span>(!T-&gt;lchild&amp;&amp;!T-&gt;rchild)<br>count++;<br>CountLeaf(T-&gt;lchild, count);<br>CountLeaf(T-&gt;rchild, count);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>求二叉树的深度：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">Depth</span> <span class="hljs-params">(BiTree I)</span>&#123;<br> <span class="hljs-keyword">if</span> (!T) depthval = O;<br> <span class="hljs-keyword">else</span> &#123;<br>    depthL= Depth(T-&gt;IchiId);<span class="hljs-comment">//求左子树的深度</span><br>    depthR= Depth(T-&gt;rchild);<span class="hljs-comment">//求右子树的深度</span><br>    depthval=<span class="hljs-number">1</span>+ (depthL&gt;depthR?depthL:depthR);<span class="hljs-comment">//取较大者相加</span><br>   &#125;<br> <span class="hljs-keyword">return</span> depthval;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>建立二叉树的存储结构：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CreateBiTree</span><span class="hljs-params">(BiTree &amp;T)</span>&#123;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;ch);<br><span class="hljs-keyword">if</span>(ch=<span class="hljs-string">&quot;&quot;</span>)<br>T=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br>T = new BiTNode;<br>T-&gt;data = ch;<br>CreteBiTree(T-&gt;lchild);<span class="hljs-comment">//创建左子树</span><br>CreteBiTree(T-&gt;rchild);<span class="hljs-comment">//创建右子树</span><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>查询二叉树中的某个节点：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">Preorder</span> <span class="hljs-params">(BiTree T, ElemType x, BiTree &amp;p)</span>&#123;<br><span class="hljs-keyword">if</span>(T)&#123;<br>    <span class="hljs-keyword">if</span>(T-&gt;data==x)<span class="hljs-comment">//递归终止条件</span><br>    &#123; <br>    p = T;<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br>elseif&#123; <br><span class="hljs-keyword">if</span>(Preorder(T-&gt;lchild, x, p))<br><span class="hljs-keyword">return</span> TRUE;<br>elseif&#123;<br><span class="hljs-keyword">if</span>(Preorder(T-&gt;rchild, x, p))<br><span class="hljs-keyword">return</span> TRUE;<br><span class="hljs-keyword">else</span>&#123;<br>p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> False;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> False;<br></code></pre></td></tr></table></figure><ol start="5"><li>线索二叉树：</li></ol><p>在中序线索二叉树中，查找结点*p的中序后继结点<br><span style="background:rgba(240, 200, 0, 0.2)">1. 若 P-&gt;Rtag 为 1, 则 P 的右线索指向其后继结点<em>q;</span><br><span style="background:rgba(240, 200, 0, 0.2)">2. 若 P-&gt;Rtag 为 0, 则其后继结点</em>q 是右子树中的最左结点。</span></p><ol start="6"><li>森林于树之间的转换</li></ol><blockquote><p>左孩子右兄弟连接原则：左子树均为孩子节点，右子树均为兄弟节点。</p></blockquote><ol start="7"><li>哈夫曼树，降序排列，从低到高，两两（多多）做兄弟构造新树，循环往复<br>所有叶子节点带权长度之和：<br>$$<br>WPL(T)=\sum W_kl_k(对所有叶子节点)<br>$$<blockquote><p>WPL 最小的哈夫曼树为<font color="#8db3e2">最优哈夫曼树</font>。<br>哈夫曼编码原则：<font color="#ff0000">左 0 右 1 原则</font></p></blockquote></li></ol><h1 id="6-图"><a href="#6-图" class="headerlink" title="6. 图"></a>6. 图</h1><h1 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h1>]]></content>
    
    
    <categories>
      
      <category>前后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dataframe-Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FIR and IIR filter design</title>
    <link href="/2022/12/b3288796b118.html"/>
    <url>/2022/12/b3288796b118.html</url>
    
    <content type="html"><![CDATA[<h1 id="FIR和IIR滤波器设计与实现"><a href="#FIR和IIR滤波器设计与实现" class="headerlink" title="FIR和IIR滤波器设计与实现"></a>FIR和IIR滤波器设计与实现</h1><h2 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h2><p>在子作业4的基础上，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。</p><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><h3 id="1-IIR滤波器设计实现"><a href="#1-IIR滤波器设计实现" class="headerlink" title="1.IIR滤波器设计实现"></a>1.IIR滤波器设计实现</h3><p>根据作业四得到的性能指标，利用MATLAB滤波器工具箱，输入性能指标参数选择效果最好的IIR滤波器进行滤波。</p><h3 id="2-FIR滤波器设计实现"><a href="#2-FIR滤波器设计实现" class="headerlink" title="2.FIR滤波器设计实现"></a>2.FIR滤波器设计实现</h3><p>根据作业四得到的性能指标，利用MATLAB滤波器工具箱，输入截止频率**$f_c$**选择合适的窗函数设计得到FIR滤波器。</p><h2 id="三、实现过程"><a href="#三、实现过程" class="headerlink" title="三、实现过程"></a>三、实现过程</h2><h3 id="1-性能指标分析"><a href="#1-性能指标分析" class="headerlink" title="1.性能指标分析"></a>1.性能指标分析</h3><p>数字滤波器的频率响应表示为：<br>$$<br>H(e^{j\omega})=|H(e^{j\omega})|e^{j\beta(j\omega)}<br>$$<br>根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围:</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A8.png"></p><p>下图展示了不同滤波器的技术指标：</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A82.png"></p><p>依据作业四得到的性能指标，通带截止频率**$w_p=10.7khz$<strong>，阻带截止频率</strong>$w_{st}=11.15khz$<strong>,通带最大衰减系数</strong>$\delta_1=2db$<strong>，阻带最小衰减</strong>$\delta_2=80db$**。可以使用MATLAB滤波器工具箱进行IIR和FIR滤波器的设计。</p><h3 id="2-IIR滤波器设计实现"><a href="#2-IIR滤波器设计实现" class="headerlink" title="2.IIR滤波器设计实现"></a>2.IIR滤波器设计实现</h3><p>采用MATLAB的滤波器设计工具进行设计，在尝试不同种类的滤波器后，对比发现<strong>巴特沃斯滤波器</strong>的效果最佳，因此选择该滤波器来滤除噪声信号，设计得到的IIR滤波器结果如下图所示：</p><img src="D:\IIR.png" style="zoom: 50%;" /><p>IIR滤波过程代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc<br>clear all<br><span class="hljs-comment">%% 数据导入及参数设置</span><br>[x,Fs]=audioread(<span class="hljs-string">&#x27;D:\DSP实验报告\大作业报告\ch4andch5\myaudio_11.15k_11.95k.wav&#x27;</span>);<br>x=x(:,<span class="hljs-number">1</span>);<span class="hljs-comment">%选择左声道</span><br>N=<span class="hljs-built_in">length</span>(x);<br>t=(<span class="hljs-number">0</span>:N<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>df=Fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<span class="hljs-comment">%频域范围</span><br>X=FFT(x,N,Fs,t);<br>X=fftshift(X);<span class="hljs-comment">%将频谱翻转过来</span><br>f=(f*Fs-Fs/<span class="hljs-number">2</span>)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>X=<span class="hljs-built_in">abs</span>(X);<br><span class="hljs-comment">% 绘出时域图和幅频响应</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">221</span>)<br><span class="hljs-built_in">plot</span>(t,x);<br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>subplot(<span class="hljs-number">222</span>)<br><span class="hljs-built_in">plot</span>(f(:,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),X(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>)<br>title(<span class="hljs-string">&quot;原信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% IIR-Butterworth低通滤波器滤除高频噪声</span><br>y=filter(IIR,x);<br>Y=FFT(y,N,Fs,t);<br>Y=fftshift(Y);<br>Y=<span class="hljs-built_in">abs</span>(Y);<br><span class="hljs-comment">% 绘出滤波后的时域图和幅频响应</span><br>subplot(<span class="hljs-number">223</span>)<br><span class="hljs-built_in">plot</span>(t,y,<span class="hljs-string">&#x27;b&#x27;</span>);<br>title(<span class="hljs-string">&quot;IIR滤波后信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">224</span>)<br><span class="hljs-built_in">plot</span>(f(<span class="hljs-number">1</span>,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),Y(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;g&#x27;</span>)<br>title(<span class="hljs-string">&quot;IIR滤波后信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% 试听及保存</span><br>sound(y,Fs);<br>audiowrite(<span class="hljs-string">&#x27;./IIRfilter.wav&#x27;</span>,y,Fs)<br></code></pre></td></tr></table></figure><h3 id="3-FIR滤波器设计实现"><a href="#3-FIR滤波器设计实现" class="headerlink" title="3.FIR滤波器设计实现"></a>3.FIR滤波器设计实现</h3><p>采用MATLAB的滤波器设计工具进行设计，在尝试不同种类的窗函数后，对比发现<strong>布莱克曼窗</strong>的效果最佳，因此选择该窗函数来滤除噪声信号，设计得到的FIR滤波器结果如下图所示：</p><img src="D:\FIRt.png" style="zoom:50%;" /><p>FIR时域和频域特性图如下图上所示：</p><img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\FIR窗特性.png" style="zoom: 50%;" /><p>FIR滤波过程代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clc<br>clear all<br><span class="hljs-comment">%% 数据导入及参数设置</span><br>[x,Fs]=audioread(<span class="hljs-string">&#x27;D:\DSP实验报告\大作业报告\ch4andch5\myaudio_11.15k_11.95k.wav&#x27;</span>);<br>x=x(:,<span class="hljs-number">1</span>);<span class="hljs-comment">%选择左声道</span><br>Nx=<span class="hljs-built_in">length</span>(x);<br>tx=(<span class="hljs-number">0</span>:Nx<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>df=Fs/<span class="hljs-built_in">length</span>(tx); <span class="hljs-comment">%计算谱线间隔</span><br>fx=tx*df;<span class="hljs-comment">%频域范围</span><br>X=FFT(x,Nx,Fs,tx);<span class="hljs-comment">%快速傅里叶变换</span><br>fx=(fx*Fs)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>X=<span class="hljs-built_in">abs</span>(X);<br><span class="hljs-comment">% 绘出时域图和幅频响应</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">221</span>)<br><span class="hljs-built_in">plot</span>(tx,x); <br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">222</span>)<br><span class="hljs-built_in">plot</span>(fx(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Nx/<span class="hljs-number">2</span>)),X(<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Nx/<span class="hljs-number">2</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;b&#x27;</span>)<br>title(<span class="hljs-string">&quot;原信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% blackman窗低通滤波器滤除高频噪声</span><br>y=filter(FIR,x);<br>Ny=<span class="hljs-built_in">length</span>(y);<span class="hljs-comment">%滤波后信号的长度</span><br>ty=(<span class="hljs-number">0</span>:Ny<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>Y=FFT(y,Ny,Fs,ty);<span class="hljs-comment">%快速傅里叶变换求频谱</span><br>df=Fs/<span class="hljs-built_in">length</span>(ty); <span class="hljs-comment">%计算谱线间隔</span><br>fy=ty*df;<span class="hljs-comment">%频域范围</span><br>fy=(fy*Fs)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>Y=<span class="hljs-built_in">abs</span>(Y);<br><span class="hljs-comment">% 绘出滤波后的时域图和幅频响应</span><br>subplot(<span class="hljs-number">223</span>)<br><span class="hljs-built_in">plot</span>(ty,y,<span class="hljs-string">&quot;b&quot;</span>);<br>title(<span class="hljs-string">&quot;FIR滤波后信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">224</span>)<br>stem(fx(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Ny/<span class="hljs-number">2</span>)),Y(<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Ny/<span class="hljs-number">2</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>)<br>title(<span class="hljs-string">&quot;FIR滤波后信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% 试听及保存</span><br>sound(y,Fs);<br>audiowrite(<span class="hljs-string">&#x27;./FIRfilter.wav&#x27;</span>,y,Fs)<br></code></pre></td></tr></table></figure><h2 id="四、结果展示"><a href="#四、结果展示" class="headerlink" title="四、结果展示"></a>四、结果展示</h2><p>加噪信号经过IIR滤波器和FIR滤波器前后时域、频域对比图如下图所示：</p><table>    <thead>        <th>            <img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\IIR滤波前后对比图.png" alt="IIR滤波前后对比图" style="zoom:50%;display:inline" />        </th>        <th>            <img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\FIR滤波前后对比图.png"  alt="FIR滤波前后对比图" style="zoom:50%;display:inline" />        </th>    </thead></table><p>由图可知IIR和FIR滤波器都很好的滤除了噪声信号，达到了预期的设计，<u>IIR和FIR滤波后的音频依附录可见</u>。</p><h2 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h2><blockquote><ol><li>IIR滤波器和FIR滤波器各自有各自的优缺点，都有不同的结构和实现方法。<strong>IIR滤波器结构简单</strong>容易实现，但是一般<strong>阶数较高</strong>，而且<strong>不稳定</strong>，相频响应<strong>不是完全线性相位</strong>。<strong>FIR滤波器</strong>一般<strong>阶数较低</strong>，相频响应具有<strong>完全的线性相位</strong>，系统<strong>绝对稳定</strong>，但是线性相位结构的FIR滤波器<strong>结构相对比较复杂</strong>难以实现。</li><li>IIR和FIR滤波器实际人工设计实现起来相对比较复杂，我们可以利用MATLAB中的滤波器设计工具箱辅助我们完成满足要求的各种滤波器，实现起来比较简单容易，</li></ol></blockquote><h2 id="六、源码开源"><a href="#六、源码开源" class="headerlink" title="六、源码开源"></a>六、源码开源</h2><blockquote><p><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-24bfcec2-0b23-4547-a957-73ffab276534/2c7c8bdd-2316-47cd-8a94-4882573700a5.zip">源代码资源包</a>有需要的小伙伴可以下载参考。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FIR、IIR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frequency——Analysis</title>
    <link href="/2022/12/98f47ed35125.html"/>
    <url>/2022/12/98f47ed35125.html</url>
    
    <content type="html"><![CDATA[<h1 id="频谱分析及滤波指标设计"><a href="#频谱分析及滤波指标设计" class="headerlink" title="频谱分析及滤波指标设计"></a>频谱分析及滤波指标设计</h1><h2 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h2><p>为了完成对子作业1中音频信号的滤波，对子作业1中的音频信号进行<strong>频谱分析</strong>，并获取滤波器设计所需要的<strong>性能指标</strong>。</p><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><h3 id="1-频谱分析"><a href="#1-频谱分析" class="headerlink" title="1.频谱分析"></a>1.频谱分析</h3><h4 id="1-读取音频"><a href="#1-读取音频" class="headerlink" title="1.读取音频"></a>1.读取音频</h4><ul><li>利用<strong>MATLAB</strong>的<code>audioread</code>函数读取原始音频（无噪声原始音频），该函数读取音频的实质是对音频进行<strong>采样</strong>，采样频率根据原始信号的情况而定。</li></ul><h4 id="2-FFT变换"><a href="#2-FFT变换" class="headerlink" title="2.FFT变换"></a>2.FFT变换</h4><ul><li>对读取到的音频取<strong>单声道</strong>根据读取音频时得到的采样频率和频谱分辨率要求计算捕获时间和频谱间隔，进行进行<strong>FFT</strong>快速傅里叶变换得到原始音频信号的频谱，分析频谱的分布。</li></ul><h4 id="3-信号加噪"><a href="#3-信号加噪" class="headerlink" title="3.信号加噪"></a>3.信号加噪</h4><ul><li>给原始信号加入高频带限噪声，加入噪声的频率范围为<code>11.15khz~11.95khz</code>。</li></ul><h4 id="4-FFT变换"><a href="#4-FFT变换" class="headerlink" title="4.FFT变换"></a>4.FFT变换</h4><ul><li>对加噪后的音频信号进行FFT快速傅里叶变换，观察频谱的频率分布和范围。</li></ul><h4 id="5-失真分析"><a href="#5-失真分析" class="headerlink" title="5.失真分析"></a>5.失真分析</h4><ul><li>分析原始信号经过采样后的频谱是否存在<strong>频谱混叠</strong>和<strong>栅栏效应</strong>，如果有则改进加以去除。</li></ul><h3 id="2-设计性能指标"><a href="#2-设计性能指标" class="headerlink" title="2.设计性能指标"></a>2.设计性能指标</h3><ul><li><p>根据前面的频谱得到通带截止频率**$w_p$<strong>和阻带截止频率</strong>$w_s$**。</p></li><li><p>根据频谱设置通带容限**$\alpha1$<strong>和阻带容限</strong>$\alpha2$<strong>，进而得到通带最大衰减系数</strong>$\delta_1$<strong>和阻带最小衰减系数</strong>$\delta_2$**.</p></li></ul><h2 id="三、实现过程"><a href="#三、实现过程" class="headerlink" title="三、实现过程"></a>三、实现过程</h2><h3 id="1-读取原始音频信号及频谱分析"><a href="#1-读取原始音频信号及频谱分析" class="headerlink" title="1.读取原始音频信号及频谱分析"></a>1.读取原始音频信号及频谱分析</h3><p>在MATLAB中利用audioread函数读取原始音频信号，并且绘出其时域图和频谱图，结果如下图所示。</p><img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\原始信号.png" style="zoom:67%;" /><p>由图可知原始音频信号的频谱从<strong>0~10.7khz</strong>左右就基本没有了，因此原始信号的最高频率**$f_{max}=10.7khz$**.</p><p>其源代码如下所示：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 数据导入及参数设置</span><br>[x,Fs]=audioread(<span class="hljs-string">&#x27;D:\DSP实验报告\大作业报告\ch4andch5\myaudio.mp3&#x27;</span>);<br>x=x(:,<span class="hljs-number">1</span>);<span class="hljs-comment">%选择左声道</span><br>N=<span class="hljs-built_in">length</span>(x);<br>t=(<span class="hljs-number">0</span>:N<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>df=Fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<span class="hljs-comment">%频域范围</span><br>X=FFT(x,N,Fs,t);<br>X=fftshift(X);<span class="hljs-comment">%将频谱翻转过来</span><br>f=(f*Fs-Fs/<span class="hljs-number">2</span>)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>X=<span class="hljs-built_in">abs</span>(X);<br><span class="hljs-comment">% 绘出时域图和幅频响应</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">221</span>)<br><span class="hljs-built_in">plot</span>(t,x);<br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>ylabel(<span class="hljs-string">&#x27;幅值&#x27;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>subplot(<span class="hljs-number">222</span>)<br><span class="hljs-built_in">plot</span>(f(:,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),X(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>)<br><span class="hljs-comment">% plot(f*Fs/1e3,Y,&#x27;k&#x27;);</span><br>title(<span class="hljs-string">&quot;原信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br>ylabel(<span class="hljs-string">&#x27;频率幅值&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-信号加噪及频谱分析"><a href="#2-信号加噪及频谱分析" class="headerlink" title="2.信号加噪及频谱分析"></a>2.信号加噪及频谱分析</h3><p>给原始音频信号加入频谱范围为<code>11.15~11.95khz</code>的<strong>高频带限噪声</strong>为后面设计滤波器做准备，绘出加噪信号的时域图和频谱图，如下图所示。</p><img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\加噪信号.png" style="zoom:67%;" /><p>由上图观察可知加噪后的信号在<code>11.15~11.95khz</code>的范围内出现了高频噪声信号，这也是后面需要滤波消除的部分，根据加噪后的信号的频谱可以得到设计滤波器的性能指标。</p><p>源代码如下所示：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 加入噪声</span><br>noise=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">0.1</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">5</span><br>    noise=noise+<span class="hljs-number">0.003</span>*(<span class="hljs-built_in">cos</span>((<span class="hljs-number">70</span>+<span class="hljs-built_in">i</span>)*<span class="hljs-number">1000</span>*t));<br><span class="hljs-keyword">end</span><br>x_z=x+noise&#x27;;<br>X_Z=FFT(x_z,N,Fs,t);<br>X_Z=fftshift(X_Z);<span class="hljs-comment">%将频谱翻转过来</span><br>X_Z=<span class="hljs-built_in">abs</span>(X_Z);<br>subplot(<span class="hljs-number">211</span>)<br><span class="hljs-built_in">plot</span>(t,x_z);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>ylabel(<span class="hljs-string">&#x27;幅值&#x27;</span>);<br>title(<span class="hljs-string">&#x27;加噪后信号时域图&#x27;</span>);<br>subplot(<span class="hljs-number">212</span>)<br><span class="hljs-built_in">plot</span>(f(:,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),X_Z(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>)<br>xlabel(<span class="hljs-string">&#x27;f/Hz&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;频率幅值&#x27;</span>);<br>title(<span class="hljs-string">&#x27;加噪后信号幅频响应&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-失真分析"><a href="#3-失真分析" class="headerlink" title="3.失真分析"></a>3.失真分析</h3><p>由上述的频谱图可知原始音频信号**$f_{max}=10.7khz&lt;f_s=48khz$**,因此经过采样后信号没有发生频谱混叠，且没有栅栏效应发生。</p><h3 id="4-设计性能指标"><a href="#4-设计性能指标" class="headerlink" title="4.设计性能指标"></a>4.设计性能指标</h3><p>数字滤波器的频率响应表示为：<br>$$<br>H(e^{j\omega})=|H(e^{j\omega})|e^{j\beta(j\omega)}<br>$$<br>根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围:</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A8.png"></p><p>下图展示了不同滤波器的技术指标：</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A82.png"></p><p> 对加噪后的音频频谱进行分析，有用信号的频谱范围是<code>0~10.7khz</code>，噪声信号的频谱范围是<code>11.15~11.95khz</code>，因此设置通带截止频率**$w_p=10.7khz$<strong>，阻带截止频率</strong>$w_{st}=11.15khz$<strong>,通带最大衰减系数</strong>$\delta_1=2db$<strong>，阻带最小衰减</strong>$\delta_2=80db$**。</p><h2 id="四、结果展示"><a href="#四、结果展示" class="headerlink" title="四、结果展示"></a>四、结果展示</h2><p>原始音频信号加噪前后时域、频域对比图如下图所示：</p><img src="D:\DSP实验报告\大作业报告\ch4andch5\图片\加噪信号频谱图.png" alt="加噪前后对比图" style="zoom:67%;" /><p>设计滤波器的性能指标如下：</p><p><u>通带截止频率**$w_p=10.7khz$<strong>，阻带截止频率</strong>$w_{st}=11.15khz$<strong>,通带最大衰减系数</strong>$\delta_1=2db$<strong>，阻带最小衰减</strong>$\delta_2=80db$**。</u></p><h2 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h2><blockquote><ol><li>谱分析的过程中首先要知道分辨率和采样频率等要求，然后根据原始信号的最大频率结合<strong>奈奎斯特采样定理</strong>设定合适的采样频率，再依据$F_0=\frac{1}{T_0}=\frac{1}{N*T_s}$计算得到采样点数和捕获时间等信息，计算频域窗口范围，接着进行FFT变换获得其频谱，观察频谱与理论频谱是否一致，判断是否发生<strong>频谱混叠、栅栏效应</strong>等，若使用了窗函数进行截断还要考虑是否发生<strong>频谱泄露</strong>。</li><li>设计滤波器性能指标过程中，首先需要知道待滤波信号的频谱情况，然后依据频谱判断有用信号和噪声信号的分布，从而确定使用低通、高通、带通还是带阻等滤波器，并且设计相应的性能指标，一般包括<strong>通带截止频率、阻带截止频率、通带最大衰减和阻带最大衰减</strong>四个性能指标。</li></ol></blockquote><h2 id="六、源码开源"><a href="#六、源码开源" class="headerlink" title="六、源码开源"></a>六、源码开源</h2><blockquote><p><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-24bfcec2-0b23-4547-a957-73ffab276534/2c7c8bdd-2316-47cd-8a94-4882573700a5.zip">源代码资源包</a>有需要的小伙伴可以下载参考。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FFT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Embeded theory and appliment</title>
    <link href="/2022/11/8134dd087a1a.html"/>
    <url>/2022/11/8134dd087a1a.html</url>
    
    <content type="html"><![CDATA[<h1 id="嵌入式原理与应用"><a href="#嵌入式原理与应用" class="headerlink" title="嵌入式原理与应用"></a><span alt="rainbow">嵌入式原理与应用</span></h1><blockquote><p>题型：</p><ol><li>选择（判断）</li><li>简述（解释）</li><li>简答</li><li>硬件设计（画图扩展）</li><li>编程、分析</li></ol><p>重点：</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203145401819.png" alt="image-20221203145401819" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203141024153.png" alt="image-20221203141024153" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203141214880.png" alt="image-20221203141214880" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203141457717.png" alt="image-20221203141457717" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203141626775.png" alt="image-20221203141626775" style="zoom:33%;" /></blockquote><h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1.绪论"></a>1.绪论</h2><h3 id="1-1嵌入式系统定义"><a href="#1-1嵌入式系统定义" class="headerlink" title="1.1嵌入式系统定义"></a>1.1嵌入式系统定义</h3><ul><li><p><strong>广义</strong>：<code>微处理器+硬/软件系统</code></p></li><li><p><strong>狭义</strong>：<code>嵌入式微处理器+OS+特定功能+专用+硬/软件系统</code></p></li><li><p><strong>从技术的角度定义</strong>：<u>以应用为中心、以计算机技术为基础、软件硬件可裁剪、适应应用系统对功能、可靠性、成本、体积、功耗严格要求的专用计算机系统。</u></p></li><li><p><strong>从系统的角度定义</strong>：<u>嵌入式系统是设计完成复杂功能的硬件和软件，并使其紧密耦合在一起的计算机系统。术语嵌入式反映了这些系统通常是更大系统中的一个完整的部分，称为嵌入的系统。嵌入的系统中可以共存多个嵌入式系统。</u></p></li></ul><h3 id="1-2嵌入式系统特点及分类"><a href="#1-2嵌入式系统特点及分类" class="headerlink" title="1.2嵌入式系统特点及分类"></a>1.2嵌入式系统特点及分类</h3><h4 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h4><ul><li>系统内核小 </li><li>专用性强 </li><li>系统精简 </li><li> 高实时性 </li><li>多任务的操作系统</li><li>需要专门的开发工具和环境（自身不具备）</li></ul><h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h4><blockquote><p>由于嵌入式系统由硬件和软件两大部分组成，所以其分类也可以从硬件和软件进行划分.</p></blockquote><p><strong>嵌入式系统的硬件</strong></p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121145910133.png" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121145944569.png"  /><p><strong>嵌入式系统软件</strong></p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121150118822.png" style="zoom: 67%;" /><h3 id="1-3嵌入式微处理器"><a href="#1-3嵌入式微处理器" class="headerlink" title="1.3嵌入式微处理器"></a>1.3嵌入式微处理器</h3><h4 id="1-3-1-ARM处理器"><a href="#1-3-1-ARM处理器" class="headerlink" title="1.3.1 ARM处理器"></a>1.3.1 ARM处理器</h4><p><strong>特点</strong>：</p><ol><li>小体积、低功耗、低成本而高性能；</li><li>16/32位双指令集；</li><li> 全球的合作伙伴众多。</li></ol><h4 id="1-3-2-MIPS"><a href="#1-3-2-MIPS" class="headerlink" title="1.3.2 MIPS"></a>1.3.2 MIPS</h4><blockquote><p><strong>MIPS</strong>是Microprocessor without Inter— locked Pipeline Stages的缩写，是一种处理器内 核标准，它是由MIPS技术公司开发的。</p></blockquote><h3 id="1-4嵌入式操作系统"><a href="#1-4嵌入式操作系统" class="headerlink" title="1.4嵌入式操作系统"></a>1.4嵌入式操作系统</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121150633545.png" style="zoom:67%;" /><h4 id="2-实时操作系统"><a href="#2-实时操作系统" class="headerlink" title="2.实时操作系统"></a>2.实时操作系统</h4><h5 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1.特点"></a>1.特点</h5><ol><li>异步的事件响应 </li><li>切换时间和中断延迟时间确定 </li><li>优先级中断和调度 </li><li><code>抢占式调度</code> </li><li>内存锁定 </li><li>连续文件 </li><li>同步</li></ol><h5 id="2-分类-1"><a href="#2-分类-1" class="headerlink" title="2.分类"></a>2.分类</h5><ul><li><p><strong>一般实时操作系统</strong>：应用于实时处理系统的上位机和实时查询系统等实时性较弱的实时系统，并且提供了开发、调试、运用一致的环境。</p></li><li><p><strong>嵌入式实时操作系统</strong>：统应用于实时性要求高的实时控制系统， 而且应用程序的开发过程是通过交叉开发来完成的， 即开发环境与运行环境是不一致。</p></li></ul><blockquote><p>嵌入式实时操作系统具有规模小(一般在几K～几十 K 内)、可固化使用实时性强(在毫秒或微秒数量级上) 的特点 </p></blockquote><h5 id="3-必要性"><a href="#3-必要性" class="headerlink" title="3.必要性"></a>3.必要性</h5><blockquote><ul><li>嵌入式实时操作系统在目前的嵌入式应用中用得越来 越广泛，尤其在功能复杂、系统庞大的应用中显得愈 来愈重要。 </li><li>在嵌入式应用中，只有把CPU嵌入到系统中，同时又 把操作系统嵌入进去，才是真正的计算机嵌入式应用。</li></ul></blockquote><ol><li>嵌入式实时操作系统提高了系统的可靠性。 </li><li>提高了开发效率，缩短了开发周期。</li><li>嵌入式实时操作系统充分发挥了<strong>32位CPU</strong>的多任务 潜力。</li></ol><h5 id="4-优缺点"><a href="#4-优缺点" class="headerlink" title="4.优缺点"></a>4.优缺点</h5><ol><li><p><strong>优点</strong>：</p><ul><li>在嵌入式实时操作系统环境下开发实时应用程序使程序的<strong>设计和扩展变得容易</strong>，不需要大的改动就可以增加新的功能。 </li><li>通过将应用程序<strong>分割成若干独立的任务模块</strong>，使应用程序的设计过程大为简化；而且对实时性要求苛刻的事件都得到了<strong>快速、可靠的处理。</strong> </li><li>通过有效的系统服务，嵌入式实时操作系统使得<strong>系统资源得到更好的利用</strong></li></ul></li><li><p><strong>缺点</strong>：</p></li></ol><ul><li>需要额外的<strong>ROM/RAM开销</strong>，2~5%的CPU额外负荷， 以及内核的费用</li></ul><h4 id="3-前后台系统"><a href="#3-前后台系统" class="headerlink" title="3.前后台系统"></a>3.前后台系统</h4><blockquote><p>对基于芯片的开发来说，应用程序一般是 一个无限的循环，可称为前后台系统或超循环系统。</p></blockquote><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121151211045.png" style="zoom:67%;" /><h4 id="4-操作系统"><a href="#4-操作系统" class="headerlink" title="4.操作系统"></a>4.操作系统</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h5><blockquote><ul><li><p>实时操作系统是一段在嵌入式系统启动后首先执 行的背景程序，用户的应用程序是运行于<strong>RTOS</strong>之上的各个任务，RTOS根据各个任务的要求，进行<strong>资源(包括存储器、外设等)管理、消息管理、任务调度、异常处理</strong>等工作。</p></li><li><p>在RTOS支持的系统中， 每个任务均有一个优先级，RTOS根据各个任务的优先级，动态地切换各个任务，保证对实时性的要求.</p></li></ul></blockquote><ol><li>是计算机中最基本的程序。</li><li>负责计算机系统中全部软硬资源的分配与回收、控制与协 调等并发的活动；</li><li> 提供用户接口，使用户获得良好的工作环境；</li><li>为用户扩展新的系统功能提供软件平台。</li></ol><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121151424983.png" style="zoom:80%;" /><h5 id="2-代码的临界区"><a href="#2-代码的临界区" class="headerlink" title="2.代码的临界区"></a>2.代码的临界区</h5><blockquote><p>代码的临界区也称为临界区，指处理时不可分割的代码，运行这些代码不允许被打断。一旦这部分代码开始执行，则不允许任何中断打入 （这不是绝对的，如果中断不调用任何包含临界区的代码，也不访问任何临界区使用的共享资源，这个中断可能可以执行）。</p><p><strong>为确保临界区代码的执行，在进入临界区之前要关中断，而临界区代码执行完成以后要立即开中断。</strong></p></blockquote><h5 id="3-资源"><a href="#3-资源" class="headerlink" title="3.资源"></a>3.资源</h5><blockquote><p>程序运行时可使用的软、硬件环境统称为资源。</p></blockquote><ul><li>资源可以是输入输出设备，例如打印机、 键盘、显示器。</li><li>资源也可以是一个变量、一个结构或一个数组等。</li></ul><h5 id="4-共享资源"><a href="#4-共享资源" class="headerlink" title="4.共享资源"></a>4.共享资源</h5><blockquote><p>可以被一个以上任务使用的资源叫做共享资源。 为了防止数据被破坏，每个任务在与共享资源打交道时，必须<strong>独占该资源</strong>，这叫做<strong>互斥</strong>。</p></blockquote><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121152043856.png" style="zoom:67%;" /><h5 id="5-任务"><a href="#5-任务" class="headerlink" title="5.任务"></a>5.任务</h5><blockquote><p>一个任务，也称作一个<strong>线程</strong>，是一个简单的程序， 该程序可以认为CPU完全属于该程序自己。</p></blockquote><p>实时应用程序的设计过程，包括:</p><ol><li>如何把问题分割成多个任务</li><li>每个任务都是整个应用的某一部分</li><li>每个任务被赋予一定的优先级</li><li>有它自己的一套CPU寄存器和自己的栈空间</li></ol><h5 id="6-任务切换"><a href="#6-任务切换" class="headerlink" title="6.任务切换"></a>6.任务切换</h5><blockquote><p>当多任务内核决定运行另外的任务时，它保存正 在运行任务的当前状态，即CPU寄存器中的全部内容。 这些内容保存在任务的当前状态保存区，也就是任务 自已的栈区之中。入栈工作完成以后，就把下一个将 要运行的任务的当前状态从任务的栈中重新装入CPU 的寄存器，并开始下一个任务的运行。这个过程就称为<strong>任务切换</strong>。</p><p>这个过程增加了应用程序的额外负荷。CPU的内部寄 存器越多，额外负荷就越重。做任务切换所需要的时间取决于CPU有多少寄存器要入栈。</p></blockquote><h5 id="7-内核"><a href="#7-内核" class="headerlink" title="7.内核"></a>7.内核</h5><blockquote><p>多任务系统中，<strong>内核负责管理各个任务，或者说为每个任务分配CPU时间，并且负责任务之间的通信</strong>。</p></blockquote><ul><li>内核提供的基本服务是<code>任务切换</code>。 </li><li>使用实时内核可以大大简化应用系统的设计，是因为<code>实时内核</code>允许将应用分成<code>若干个任务</code>，由实时内核来管理它们。内核需要消耗一定的系统资源，比如2％～5％的 <code>CPU运行时间、RAM和ROM</code>等。</li><li>内核提供必不可少的系统服务，如<code>信号量、消息队列、 延时</code>等。</li></ul><h5 id="8-调度"><a href="#8-调度" class="headerlink" title="8.调度"></a>8.调度</h5><blockquote><p>调度是内核的主要职责之一。调度就是决定该轮到哪个任务运行了。</p></blockquote><ul><li>多数实时内核是基于优先级调度法的。每个任务根据其重要程序的不同被赋予一定的优先级。基于优先级的调度法指CPU总是让处在就绪态的优先级最高的任务先运行。</li><li>然而究竟何时让高优先级任务掌握CPU的使用权， 有两种不同的情况，这要看用的是什么类型的内核， 是<strong>非占先式</strong>的还是<strong>占先式</strong>的内核。</li></ul><h5 id="9-非占先式内核"><a href="#9-非占先式内核" class="headerlink" title="9.非占先式内核"></a>9.非占先式内核</h5><blockquote><ol><li>非占先式内核要求每个任务自动弃CPU 的所有权。 非占先式调度法也称作合作型多任务，各个任务彼此合作共享一个CPU。 </li><li>异步事件还是由<strong>中断服务</strong>来处理。 </li><li>中断服务可以使一个高优先级的任务由挂起状态变为<strong>就绪状态</strong>。但中断服务以后控制权还是回到原来被中断了的那个任务，直到该任务主动放弃CPU的使用权时，那个高优先级的任务才能获得CPU的使用权。</li></ol></blockquote><h5 id="10-占先式内核"><a href="#10-占先式内核" class="headerlink" title="10.占先式内核"></a>10.占先式内核</h5><blockquote><ol><li>当系统响应时间很重要时，要使用占先式内核。 因此绝大多数商业上销售的实时内核都是占先式内核。 <strong>最高优先级的任务一旦就绪，总能得到CPU的控制权。</strong> </li><li>当一个运行着的任务使一个比它优先级高的任务进入了就绪状态，当前任务的CPU使用权就被剥夺了，或者说被挂起了，那个高优先级的任务立刻得到了CPU 的控制权。</li></ol></blockquote><h5 id="11-任务优先级"><a href="#11-任务优先级" class="headerlink" title="11.任务优先级"></a>11.任务优先级</h5><blockquote><p>任务的优先级是表示任务被调度的<strong>优先程度</strong>。每个任务都具有优先级。 任务越重要，赋予的优先级应越高，越容易被调度而进入<strong>运行态</strong>。</p></blockquote><h5 id="12-中断"><a href="#12-中断" class="headerlink" title="12.中断"></a>12.中断</h5><blockquote><ol><li>中断是一种硬件机制，用于通知CPU有个<strong>异步事件</strong>发生了。 </li><li>中断一旦被识别，CPU保存部分或全部上下文 （即部分或全部寄存器的值），跳转到专门的子程序， 称为中断服务子程序（ISR）。中断服务子程序做事件处理，处理完成后，程序返回到：<ul><li>在前后台系统中，程序<code>回到后台程序</code>；</li><li>对非占先式内核而言，程序回到被中断了的任务； </li><li>对占先式内核而言，让进入就绪态的优先级最高的任务开始运行</li></ul></li></ol></blockquote><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221121154003220.png" style="zoom:67%;" /><h5 id="13-时钟节拍"><a href="#13-时钟节拍" class="headerlink" title="13.时钟节拍"></a>13.时钟节拍</h5><blockquote><p>时钟节拍是<code>特定的周期性中断</code>。 </p><ul><li> 这个中断可以看作是系统心脏的脉动。 </li><li>中断之间的时间间隔取决于不同应用，一般在<code>10ms到200ms</code>之间。</li><li>时钟的节拍式中断使得内核可以将任务延时 若干个整数时钟节拍，以及当任务等待事件 发生时，提供等待超时的依据。</li><li> <code>时钟节拍率</code>越快，系统的额外开销就越大。</li></ul></blockquote><h2 id="2-体系结构"><a href="#2-体系结构" class="headerlink" title="2.体系结构"></a>2.体系结构</h2><h4 id="1-ARM处理器"><a href="#1-ARM处理器" class="headerlink" title="1.ARM处理器"></a>1.ARM处理器</h4><h5 id="1-ARM简介"><a href="#1-ARM简介" class="headerlink" title="1.ARM简介"></a>1.ARM简介</h5><p>ARM(Advanced RISC Machines)，既可以认为是一个<strong>公司的名字</strong>，也可以认为是对一类<strong>微处理器的通称</strong>，还可以认为是一种<strong>技术的名字</strong>。</p><p>ARM处理器核简介——ARM7<br>• 该系列包括ARM7TDMI、ARM7TDMI-S、带有高速缓存处理器宏单元的ARM720T和扩充了<strong>Jazelle（ java加速器）</strong>的ARM7EJ-S。该系列处理器提供<strong>Thumb 16</strong>位压缩指令集和EmbededICE软件调试方式，适用于更大规模的SoC设计中。<br>• ARM7系列广泛应用于多媒体和嵌入式设备，包括Internet设备、网络和调制解调器设备，以及移动电话、PDA等无线设备。</p><p>ARM处理器核简介——Cortex<br>ARM11以后的产品改用Cortex命名，并分成A、R和M三类：<br>“A”系列面向尖端的基于虚拟内存的操作系统和用户应用——-如：智能手机、平板电脑等<br>“R”系列针对实时系统——如：汽车制动系统等<br>“M”系列针对微控制器—— STM32基于Cortex-M0/M3/M4核</p><p>ARM处理器核简介——SecurCore<br>• 该系列涵盖了SC100、SC110、SC200和SC210处理核。<br>• 该系列处理器主要针对新兴的安全市场，以一种全新的安全处理器设计为智能卡和其它安全IC开发提供独特的32位系统设计，并具有特定反伪造方法，从而有助于防止对硬件和软件的盗版。</p><h4 id="2-RISC（Reduced-Instruction-Set-Computer，精简指令集计算机）体系结构"><a href="#2-RISC（Reduced-Instruction-Set-Computer，精简指令集计算机）体系结构" class="headerlink" title="2.RISC（Reduced Instruction Set Computer，精简指令集计算机）体系结构"></a>2.RISC（Reduced Instruction Set Computer，精简指令集计算机）体系结构</h4><p>RISC特点如下：<br>精简指令集计算机<strong>RISC</strong>结构的产生是相对于传统的复杂指令集计算机<strong>CISC</strong>结构而言的。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">指令规整、对称、简单。指令小于<span class="hljs-number">100</span>条，基本寻址方式有<span class="hljs-number">2</span>~<span class="hljs-number">3</span>种。<br>■ 单周期指令。<br>■ 指令字长度一致，单拍完成，便于流水操作;<br>■ AR<span class="hljs-name">M7</span> 三级流水线：取址、译码、执行；<br>■ AR<span class="hljs-name">M9</span> 五级流水线；<br>■ ARMl<span class="hljs-number">0</span> 六级流水线。<br>■ 大量的寄存器。寄存器不少于<span class="hljs-number">32</span>个。数据处理器的指令只对寄存器的内容操作。只有加载／存储指令可以访问存储器。<br></code></pre></td></tr></table></figure><p>（1）使计算机的结构更加简单；<br>（2）合理地提高运算速度。</p><h4 id="3-ARM和Thumb状态"><a href="#3-ARM和Thumb状态" class="headerlink" title="3.ARM和Thumb状态"></a>3.ARM和Thumb状态</h4><p>正在执行Thumb指令集的处理器是工作在Thumb状态下——16位。<br>正在执行ARM指令集的处理器是工作在ARM状态下——32位。</p><h4 id="4-寄存器"><a href="#4-寄存器" class="headerlink" title="4.寄存器"></a>4.寄存器</h4><p>ARM处理器有<strong>37(31+6)<strong>个物理寄存器,有</strong>18</strong>个可编程访问的寄存器。</p><ul><li>寄存器被安排成部分重叠的组。每种处理器模式都有不同的寄存器组。</li><li>分组的寄存器在异常处理和特权操作时,可得到快速的上下文切换。</li></ul><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203150113185.png" alt="image-20221203150113185" style="zoom: 33%;" /><h5 id="ARM状态下各模式寄存器"><a href="#ARM状态下各模式寄存器" class="headerlink" title="ARM状态下各模式寄存器"></a>ARM状态下各模式寄存器</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122162025400.png" alt="image-20230122162025400" style="zoom: 33%;" /><blockquote><ol><li><p>在汇编语言中寄存器R0～R13为保存数据或地址值的通用寄存器。它们是完全通用的寄存器，不会被体系结构作为特殊用途，并且可用于任何使用通用寄存器的指令.</p></li><li><p>其中R0～R7为未分组的寄存器，也就是说对于任何处理器模式，这些寄存器都对应于相同的32位物理寄存器.</p></li><li><p>寄存器R8～R14为分组寄存器。它们所对应的物理寄存器取决于当前的处理器模式，几乎所有允许使用通用寄存器的指令都允许使用分组寄存器.</p></li><li><p>寄存器R13常作为堆栈指针（SP）。在ARM指令集当中，没有以特殊方式使用R13的指令或其它功能，只是习惯上都这样使用。但是在Thumb指令集中存在使用R13的指令.</p></li><li><p>R14为链接寄存器（LR），在结构上有两个特殊功能： 在每种模式下，模式自身的R14版本用于保存子程序返回地址； 当发生异常时，将R14对应的异常模式版本设置为异常返回地址（有些异常有一个小的固定偏移量）.</p></li></ol></blockquote><blockquote><p><code>R14寄存器注意要点</code>:</p><p>相同异常嵌套时，<strong>外部中断处理程序保存在R14_irq中的任何值都将被嵌套中断的返回地址所覆盖</strong>。</p><p>IRQ服务程序A执行完毕， 将R14_irq寄存器的内容减去某个常量后存入PC，返回之前被中断的程序；</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122164851577.png" alt="image-20230122164851577" style="zoom:25%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122165002004.png" alt="image-20230122165002004" style="zoom:25%;" /><p><code>读R15的限制</code>：</p><ol><li>正常操作时，从R15读取的值是处理器正在取指的地址，即当前正在执行指令的地址加上8个字节（两条ARM指令的长度）。 由于ARM指令总是以字为单位，所以R15寄存器的最低两位总是为0。</li></ol><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122165358890.png" alt="image-20230122165358890" style="zoom:33%;" /><ol start="2"><li><p>当使用STR或STM指令保存R15时，会有一个例外： 这些指令可能将当前指令地址加8字节或加12字节保存（将来可能还有其它数字）。偏移量是8还是12取决于具体的ARM芯片，但是对于一个确定的芯片， 这个值是一个常量。 所以最好避免使用STR和STM指令来保存R15， 如果很难做到，那么应当在程序中计算出该芯片的偏移量。</p></li><li><p>正常操作时，写入R15 的值被当作一个指令地址，程序从这个地址处继续执行（相当于执行一次无条件跳转）。</p></li></ol></blockquote><blockquote><p>寄存器CPSR为程序状态寄存器，在异常模式中，另外一个寄存器“程序状态保存寄存器（SPSR）”可以被访问。每种异常都有自己的SPSR，在因为异常事件而进入异常时它保存CPSR的当前值， 异常退出时可通过它恢复CPSR。</p><p>堆栈指针SP对应ARM状态的寄存器 R13。每个异常模式都有其自身的SP分组版本，SP通常指向各异常模式所专用的堆栈。 注意：在发生异常时，处理器自动进入ARM状态。</p><p>链接寄存器LR对应ARM状态寄存器 R14，在结构上有两个特殊功能:子程序返回地址、异常返回地址。 注意：在发生异常时，处理器自动进入ARM状态。</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122192204555.png" alt="image-20230122192204555" style="zoom: 25%;" /></blockquote><h4 id="5-指令集概述"><a href="#5-指令集概述" class="headerlink" title="5.指令集概述"></a>5.指令集概述</h4><ol><li>ARM指令集</li></ol><blockquote><p>ARM指令集可分为5大类指令，所有指令都可以条件执行，其中一些指令还可以根据执行结果更新CPSR寄存器的相关标志位.</p><ul><li>数据处理指令 </li><li>加载和存储指令</li><li>分支指令 </li><li>协处理器指令</li><li> 杂项指令</li></ul></blockquote><ol start="2"><li> Thumb指令集</li></ol><blockquote><p>Thumb指令集可分为4大类指令： </p><ul><li>分支指令； </li><li>数据处理指令；</li><li>寄存器加载和存储指令；</li><li>异常产生指令。</li></ul></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">ARM—公司名称、微处理器名称和嵌入式技术名称；<br>特点—高性能、小体积、低功耗、紧代码密度、多供应商、高占有率；<br>系列—ARM7、<span class="hljs-built_in">ARM9</span>(E)、ARM10、ARM11、ARM Cortex、Xscale、StrongARM和SecurCore等；<br>结构—两种CPU工作状态、<span class="hljs-number">32</span>位RISC结构、多寄存器、多种处理器模式 、两种指令集；<br></code></pre></td></tr></table></figure><h4 id="6-数据类型"><a href="#6-数据类型" class="headerlink" title="6.数据类型"></a>6.数据类型</h4><p>ARM处理器支持下列数据类型： </p><ol><li>字节 8位 </li><li>半字 16位（必须分配为占用两个字节） </li><li>字 32位（必须分配为占用4个字节）</li></ol><h4 id="7-ARM微处理器的工作状态"><a href="#7-ARM微处理器的工作状态" class="headerlink" title="7.ARM微处理器的工作状态"></a>7.ARM微处理器的工作状态</h4><p>ARM微处理器的工作状态一般有两种:</p><ol><li><code>ARM状态</code>—处理器执行<code>32</code>位的、<code>字对齐</code>的 ARM指令；</li><li><code>Thumb状态</code>—处理器执行<code>16</code>位的、<code>半字对齐</code>的 Thumb指令。</li></ol><p> <strong>处理器状态切换</strong></p><ol><li><p>进入Thumb状态： </p><blockquote><p>当操作数寄存器的<code>状态位(位[0])为1</code>时，执行 <code>BX（带状态切换分支指令）</code>进入Thumb状态。 如果处理器在Thumb状态进入异常，则当异常 处理返回时，自动转换到Thumb状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">;从Arm状态切换到Thumb状态<br>LDR R0,=Lable+1<br>BX R0<br></code></pre></td></tr></table></figure></blockquote></li><li><p>进入ARM状态:</p><blockquote><p>当操作数寄存器的<code>状态位(位[0])为0</code>时 执行<code>BX指令</code>进入ARM状态。 当处理器进行异常处理时，进入ARM状态，从异常向量地址处开始执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">;从Thumb状态切换到ARM状态<br>LDR R0,=Lable<br>BX R0<br></code></pre></td></tr></table></figure></blockquote></li></ol><h4 id="8-存储器格式"><a href="#8-存储器格式" class="headerlink" title="8.存储器格式"></a>8.存储器格式</h4><p>ARM体系结构可以用两种方法存储字数据，称为<strong>大端格式（Big-Endian）</strong>和<strong>小端格式（Little-Endian ）</strong>。</p><p><code>小端格式</code></p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203153053759.png" alt="image-20221203153053759" style="zoom:33%;" /><p><code>大端格式</code></p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203153153991.png" alt="image-20221203153153991" style="zoom:33%;" /><p>示例</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125161454291.png" alt="image-20230125161454291" style="zoom:50%;" /><p><strong>大端反（高地址对应低字节），小端同（高地址对应高字节）</strong></p><blockquote><p><strong>ARM默认小端格式</strong>，但用户可设置大、小端格式</p></blockquote><h4 id="9-处理器模式"><a href="#9-处理器模式" class="headerlink" title="9.处理器模式"></a>9.处理器模式</h4><p>ARM体系结构支持7种处理器模式，分别为：<br><strong>用户模式、快中断模式、中断模式、管理模式、中止模式、未定义模式和系统模式。</strong></p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203160553300.png" alt="image-20221203160553300" style="zoom:33%;" /><h5 id="特权模式"><a href="#特权模式" class="headerlink" title="特权模式"></a>特权模式</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122160458920.png" alt="image-20230122160458920" style="zoom:50%;" /><h5 id="异常模式"><a href="#异常模式" class="headerlink" title="异常模式"></a>异常模式</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122160528448.png" alt="image-20230122160528448" style="zoom:50%;" /><h5 id="用户和系统模式"><a href="#用户和系统模式" class="headerlink" title="用户和系统模式"></a>用户和系统模式</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122161341215.png" alt="image-20230122161341215" style="zoom:50%;" /><h4 id="10-异常"><a href="#10-异常" class="headerlink" title="10.异常"></a>10.异常</h4><h5 id="异常进入"><a href="#异常进入" class="headerlink" title="异常进入"></a>异常进入</h5><p><strong>在异常发生后，ARM7TDMI内核会（自动）做以下工作</strong>： </p><ol><li><p>在适当的LR中保存下一条指令的地址，当异常入口来自： ARM状态，那么ARM7TDMI将当前指令地址加4或加8复制（取决于异常的类型）到LR中；若为Thumb状态，那么保存当前PC值到LR中；这样异常处理程序就不需要确定异常是从何种状态进入的。</p></li><li><p>将CPSR复制到适当的SPSR中； </p></li><li><p>将CPSR模式位强制设置为与异常类型相对应的值； </p></li><li><p>强制PC从相关的异常向量处取指。</p></li></ol><blockquote><ul><li><p><strong>ARM7TDMI</strong>内核在中断异常时<strong>置位中断禁止标志</strong>，这样可以防止不受控制的异常嵌套。</p></li><li><p><strong>异常总是在ARM状态中进行处理</strong>,若在thumb状态，在异常向量地址装入PC时会自动切换到ARM状态</p></li></ul></blockquote><h5 id="异常返回"><a href="#异常返回" class="headerlink" title="异常返回"></a>异常返回</h5><p><strong>当异常结束时，异常处理程序必须</strong>：</p><ol><li><p>将LR中的值减去偏移量后存入PC(手动调整！)，偏移量根据异常的类型而有所不同； </p></li><li><p>将SPSR的值复制回CPSR； </p></li><li><p>若在进入异常处理时设置了中断禁止标志则清零该标志。</p></li></ol><blockquote><ul><li>恢复CPSR的动作会将T、F和I位自动恢复为异常发生前的值。</li></ul></blockquote><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230210163615090.png" alt="image-20230210163615090" style="zoom:50%;" /><h5 id="异常向量表"><a href="#异常向量表" class="headerlink" title="异常向量表"></a>异常向量表</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122192828603.png" alt="image-20230122192828603" style="zoom:33%;" /><h5 id="异常的入口和出口处理"><a href="#异常的入口和出口处理" class="headerlink" title="异常的入口和出口处理"></a>异常的入口和出口处理</h5><blockquote><p>如果异常处理程序已经把返回地址拷贝到堆栈， 那么可以使用一条多寄存器传送指令来恢复用户寄存器并实现返回。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">SUB LR,LR,#4 ;计算返回地址（偏移-4）<br>STMFD SP!,&#123;R0-R3,LR&#125; ;保存使用到的寄存器<br>. . .<br>LDMFD SP!,&#123;R0-R3,PC&#125;^ ;中断返回（加载从左到右）<br></code></pre></td></tr></table></figure><blockquote><p>注意：中断返回指令的寄存器列表（其中必须包括PC）后的“^”符号表示这是一条特殊形式的指令。这条指令在从存储器中装载PC的同时（PC是最后恢复的）， CPSR也得到恢复。 这里使用的堆栈指针SP（R13）是属于异常模式的寄存器，每个异常模式有自己的堆栈指针。 这个堆栈指针应必须在系统启动时初始化。</p></blockquote><h6 id="进入异常"><a href="#进入异常" class="headerlink" title="进入异常"></a>进入异常</h6><p><strong>在异常发生后，ARM7TDMI内核会（自动）做以下工作</strong>： </p><ol><li>在适当的LR中保存下一条指令的地址，当异常入口来自：</li></ol><ul><li><p>ARM状态，那么ARM7TDMI将当前指令地址加4或加8复制（取决于异常的类型）到LR中； </p></li><li><p>Thumb状态，那么保存当前PC值到LR中；这样异常处理程序就不需要确定异常是从何种状态进入的。</p></li></ul><ol start="2"><li><p>将CPSR复制到适当的SPSR中； </p></li><li><p>将CPSR模式位强制设置为与异常类型相对应的值； </p></li><li><p>强制PC从相关的异常向量处取指。</p></li></ol><p>（还可以设置中断禁止位,以禁止其他中断）</p><blockquote><p>注：</p><ul><li><p>ARM7TDMI内核在中断异常时置位中断禁止标志，这样可以防止不受控制的异常嵌套。 </p></li><li><p>异常总是在ARM状态中进行处理。当处理器处于Thumb状态时发生了异常，在异常向量地址装入PC时，会自动切换到ARM状态。</p></li></ul></blockquote><h6 id="退出异常"><a href="#退出异常" class="headerlink" title="退出异常"></a>退出异常</h6><p><strong>当异常结束时，异常处理程序必须</strong>： </p><p>1.将LR中的值减去偏移量后存入PC(手动调整！)，偏移量根据异常的类型而有所不同； </p><p>2.将SPSR的值复制回CPSR； </p><p>3.若在进入异常处理时设置了中断禁止标志则清零该标志。 </p><blockquote><p>注：</p><ul><li>恢复CPSR的动作会将T、F和I位自动恢复为异常发生前的值。</li></ul></blockquote><h5 id="异常种类"><a href="#异常种类" class="headerlink" title="异常种类"></a>异常种类</h5><h6 id="快速中断请求（FIQ）"><a href="#快速中断请求（FIQ）" class="headerlink" title="快速中断请求（FIQ）"></a>快速中断请求（FIQ）</h6><p>快速中断请求(FIQ)适用于对一个突发事件的快速响应，这得益于在ARM状态中，快中断模式有8个专用的寄存器可用来满足寄存器保护的需要（这可以加速上下文切换的速度）。 </p><p>不管异常入口是来自ARM状态还是Thumb状态， FIQ处理程序都会通过执行下面的指令从中断返回： </p><p><code>SUBS PC,R14_fiq,#4</code> </p><p>在一个特权模式中，可以通过置位CPSR中的F位来禁止FIQ异常。</p><h6 id="中断请求（IRQ）"><a href="#中断请求（IRQ）" class="headerlink" title="中断请求（IRQ）"></a>中断请求（IRQ）</h6><p>中断请求（IRQ）异常是一个由nIRQ输入端的低电平所产生的正常中断（在具体的芯片中，nIRQ由片内外设拉低，nIRQ是内核的一个信号，对用户不可见）。 </p><p>IRQ的优先级低于FIQ。进入FIQ处理时FIQ和IRQ都被禁。在一个特权模式下，可通过置位CPSR中的I位来禁止IRQ。</p><p>不管异常入口是来自ARM状态还是Thumb状态，IRQ处理程序都会通过执行下面的指令从中断返回：</p><p><code>SUBS PC,R14_irq,#4</code></p><h6 id="中止（ABT）"><a href="#中止（ABT）" class="headerlink" title="中止（ABT）"></a>中止（ABT）</h6><p>中止发生在对存储器的访问不能完成时， 中止包含两种类型： </p><ol><li><p>预取中止: 发生在指令预取过程中 </p><p>当发生预取中止时，ARM7TDMI内核将预取的指令标记为无效，但在指令到达流水线的执行阶段时才进入异常。</p><p>如果指令在流水线中因为发生分支而没有被执行，中止将不会发生。</p><p>在处理中止的原因之后，不管处于哪种处理器操作状态，处理程序都会执行下面的指令恢复PC和CPSR并重试被中止的指令：</p><p><code>SUBS PC,R14_abt,#4</code></p></li><li><p>数据中止: 发生在对数据访问时</p></li></ol><p>​    当发生数据中止后，根据产生数据中止的指令类型作出不同的处理： </p><p>​    数据转移指令（LDR、STR）—–回写到被修改的基址寄存器。中止处理程序必须注意这一点； </p><p>​    交换指令（SWP）——中止好像没有被执行过一样（中止必须发生在SWP指令进行读访问时）；</p><p>​    块数据转移指令（LDM,STM）完成。当回写被设置时，基址寄存器被更新。在指示出现中止后， ARM7TDMI内核防止所有寄存器被覆盖。这意味着ARM7TDMI内核总是会保护被中止的LDM指令中的R15（总是最后一个被转移的寄存器）。</p><p>​    在修复产生中止的原因后，不管处于哪种处理器操作状态，处理程序都必须执行下面的返回指令 ：</p><p>​    <code>SUBS PC,R14_abt,#8</code></p><h6 id="软件中断指令（SWI）"><a href="#软件中断指令（SWI）" class="headerlink" title="软件中断指令（SWI）"></a>软件中断指令（SWI）</h6><p>使用软件中断(SWI)指令可以进入管理模式， 通常用于请求一个特定的管理函数。</p><p>SWI处理程序通过执行下面的指令返回：</p><p><code>MOVS PC,R14_svc</code></p><p>这个动作恢复了PC和CPSR并返回到SWI之后的指令。SWI处理程序读取操作码以提取SWI函数编号。</p><h6 id="未定义的指令（UND）"><a href="#未定义的指令（UND）" class="headerlink" title="未定义的指令（UND）"></a>未定义的指令（UND）</h6><p>当ARM7TDMI处理器遇到一条自己和系统内任何协处理器都无法处理的指令时，ARM7TDMI 内核执行未定义指令陷阱。</p><p>软件可使用这一机制通过模拟未定义的协处理器指令来扩展ARM指令集。 </p><blockquote><p>注：ARM7TDMI处理器完全遵循ARM结构v4T，可以捕获所有分类未被定义的指令位格式。</p></blockquote><p>在模拟处理了失败的指令后，陷阱程序执行下面的指令： </p><p><code>MOVS PC,R14_und</code> </p><p>这个动作恢复了PC和CPSR并返回到未定义指令之后的指令。</p><h5 id="异常向量"><a href="#异常向量" class="headerlink" title="异常向量"></a>异常向量</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122202516763.png" alt="image-20230122202516763" style="zoom: 25%;" /><h5 id="异常优先级"><a href="#异常优先级" class="headerlink" title="异常优先级"></a>异常优先级</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230122202621615.png" alt="image-20230122202621615" style="zoom: 33%;" /><blockquote><p>注意： <strong>未定义的指令和SWI异常互斥</strong>。因为同一条指令不能既是未定义的，又能产生有效的软件中断； </p><p>当FIQ使能，并且FIQ和数据中止异常同时发生时： </p><p>（1）内核首先进入数据中止处理程序； （2）然后立即跳转到FIQ向量； （3）在FIQ处理结束后返回到数据中止处理程序。</p><p>数据中止的优先级必须高于FIQ以确保数据转移错误不会被漏过。</p></blockquote><h2 id="3-指令集"><a href="#3-指令集" class="headerlink" title="3.指令集"></a>3.指令集</h2><blockquote><p><strong>注意：</strong></p><ul><li><p>所有的ARM指令都是可以有条件执行,而Thumb指令集只有一条指令（B）具有条件执行的功能。 </p></li><li><p>ARM指令和Thumb指令可以相互调用，两者之间的状态切换所用的开销几乎为0</p></li><li><p>立即数合法判断：</p><pre><code class="hljs">立即数必须由 1 个 8 位的常数通过进行 32 位循环右移偶数位得到，其中循环右移的位数由一个 4 位二进制的两倍表示。即一个 8 位的常数通过循环右移 2*rotate_4 位（即 0,2,4，。。。30)得到</code></pre><p><code>1、大于8位的数右移出来的数不合法，</code><br><code>2、小于等于8位的数移动奇数位也不合法</code></p></li></ul></blockquote><h3 id="ARM处理器寻址方式"><a href="#ARM处理器寻址方式" class="headerlink" title="ARM处理器寻址方式"></a>ARM处理器寻址方式</h3><p>ARM处理器具有9种基本寻址方式。</p><table><thead><tr><th align="center">寻址方式</th><th>注释</th><th>示例</th></tr></thead><tbody><tr><td align="center">立即寻址</td><td>立即寻址指令中后面的地址码部分为<a href="https://so.csdn.net/so/search?q=%E7%AB%8B%E5%8D%B3%E6%95%B0&spm=1001.2101.3001.7020">立即数</a>（常量或常数），多用于给寄存器赋初值</td><td><code>MOV R0, #1234</code> ；指令执行后R0=1234，表十六进制数值以0x开头，如#0x20</td></tr><tr><td align="center">寄存器寻址</td><td>寄存器寻址，操作数的值在寄存器中，指令执行从寄存器取值操作</td><td><code>MOV R0, R1</code> ；指令执行后，R0=R1</td></tr><tr><td align="center">寄存器移位寻址</td><td>在操作前需要对源寄存器操作数进行移位操作, 支持五种移位操作：<br /><strong>LSL: 逻辑左移，移位后寄存器空出的低位补0；<br />LSR: 逻辑右移，移位后寄存器空出的高位补0；<br />ASR: 算术右移，移位过程中符号位保持不变，如果源操作数为正数，则移位后空出的高位补0，否则补1.<br />ROR：循环右移，移位后移出的低位填入空出的高位。<br />RRX：带扩展的循环右移，操作数右移一位，移位空出的高位用C标志的值填充。</strong></td><td><code>MOV R0, R1, LSL #2</code> ；将R1寄存器左移2位，即R1&lt;&lt;2后赋值给R0寄存器</td></tr><tr><td align="center">寄存器间接寻址</td><td>寄存器间接寻址是操作数的地址指针，所需的操作数保存在寄存器指定地址的存储单元</td><td><code>LDR R0, [R1]</code>；将R1寄存器的数值作为地址，取出此地址中的值赋值给R0寄存器</td></tr><tr><td align="center">基址寻址</td><td>基址寻址是将基址寄存器与偏移量相加，形成操作数的有效地址。基址寻址多用于查表、数组访问等操作</td><td><code>LDR R0, [R1, #-4]</code> ；将R1寄存器的数值减4作为地址，取出此地址的值赋给R0寄存器</td></tr><tr><td align="center">多寄存器寻址</td><td>多寄存器寻址一条指令最多可以完成16个通用寄存器值的传送</td><td><code>LDMIA R0, &#123;R1, R2, R3, R4&#125;</code><br/>；LDM是数据加载指令，指令IA表示每次执行完加载操作后R0寄存器的值自增1个字（ARM指令字表示一个32位数值），R1=[R0], R2=[R0+#4], R3=[R0+#8], R4=[R0+#12] <br /><code>STMIA R0,&#123;R1,LR&#125;</code> 先存LR,再存R1<br /><code>STMDA R0,&#123;R1,LR&#125;</code> 先存LR,再存R1</td></tr><tr><td align="center">堆栈寻址(用于堆栈)</td><td>堆栈寻址需要使用特定的指令来完成，指令有个LDMFA/STMFA、LDMEA/STMEA、LDMFD/STMFD、LDMED/STMED. LDM和STM为指令前缀表示多寄存器寻址，一次可以传送多个寄存器值，FA/EA/FD/ED为指令后缀。<br /><strong>FD：满递减堆栈，堆栈向低地址生长，堆栈指针指向最后一个入栈的有效数据项<br />FA：满递增堆栈，堆栈向高地址生长，堆栈指针指向最后一个入栈的有效数据项<br />ED：空递减堆栈，堆栈向低地址生长，堆栈指针指向下一个要放入的空地址<br />EA：空递增堆栈，堆栈向高地址生长，堆栈指针指向下一个要放入的空地址</strong></td><td><code>STMFD SP!, &#123;R1-R7, LR&#125;</code>  ；将R1<del>R7,LR入栈。多用于保存子程序现场(从右到左)<br/><code>LDMFD SP!, &#123;R1-R7, LR&#125;</code>  ；将数据出栈，放入R1\</del>R7,LR寄存器。多用于恢复子程序现场<br /></td></tr><tr><td align="center">块拷贝寻址（用于数据块传输）</td><td>快拷贝寻址可实现连续地址数据从存储器的某一位置拷贝到另一位置。指令有个LDMIA/STMIA、LDMDA/STMDA、LDMIB/STMIB、LDMDB/STMDB. LDM和STM为指令前缀表示多寄存器寻址，一次可以传送多个寄存器值，IA/DA/IB/DB为指令后缀.<br /><strong>IA:（Increase After）每次传送后地址加4,其中的寄存器从左到右执⾏<br/>IB:（Increase Before）每次传送前地址加4,同上<br/>DA:（Decrease After）每次传送后地址减4,其中的寄存器从右到左执⾏<br/>DB：(Decrease Before）每次传送前地址减4,同上</strong></td><td><code>LDMIA R0!, &#123;R1-R3&#125;</code> ；从R0寄存器指向的存储单元中读取3个字数据到R1-R3寄存器<br/><code>STMIA R0!, &#123;R1-R3&#125;</code> ；存储R1-R3寄存器的内容到R0寄存器指向的存储单元<br />!:表示最后的地址写回到Rn中</td></tr><tr><td align="center">相对寻址</td><td>相对寻址以程序计数器PC的当前值为基地址，指令中的地址标号作为偏移量，将两者相加之后得到操作数的有效地址</td><td><code>BL NEXT</code>      ;跳到NEXT标号处执行<br/>   ……<br/><code>NEXT:</code>        ;标号NEXT就是偏移量<br/>   ……</td></tr></tbody></table><h3 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h3><h4 id="1-指令格式"><a href="#1-指令格式" class="headerlink" title="1.指令格式"></a>1.指令格式</h4><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123133643864.png" alt="image-20230123133643864" style="zoom: 50%;" /><h4 id="2-条件码"><a href="#2-条件码" class="headerlink" title="2.条件码"></a>2.条件码</h4><p>所有的ARM指令都可以条件执行，而Thumb指令只有B（跳转）指令具有条件执行功能。如果指令不标明条件代码，将<strong>默认为无条件（AL）执行</strong>。</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123135204279.png" alt="image-20230123135204279" style="zoom:50%;" /><h4 id="3-ARM存储器访问指令"><a href="#3-ARM存储器访问指令" class="headerlink" title="3.ARM存储器访问指令"></a>3.ARM存储器访问指令</h4><p>ARM处理器是典型的RISC处理器，对存储器的访问只能使用加载和存储指令实现。</p><p>ARM处理器是<strong>冯•诺依曼存储结构</strong>，程序空间、RAM空间及I/O映射空间统一编址，除对RAM操作以外，对外围IO、程序数据的访问均要通过加载/存储指令进行。</p><p>存储器访问指令分为单寄存器操作指令和多寄存器操作指令。</p><h5 id="单寄存器加载指令"><a href="#单寄存器加载指令" class="headerlink" title="单寄存器加载指令"></a>单寄存器加载指令</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123135934463.png" alt="image-20230123135934463" style="zoom:33%;" /><h5 id="单寄存器存储指令"><a href="#单寄存器存储指令" class="headerlink" title="单寄存器存储指令"></a>单寄存器存储指令</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123135952113.png" alt="image-20230123135952113" style="zoom:33%;" /><p>LDR/STR指令用于对内存变量的访问、内存缓冲区数据的访问、查表、外围部件的控制操作等。若使用LDR指令加载数据到PC寄存器，则实现程序跳转功能，这样也就实现了程序散转。 </p><blockquote><p>说明：</p><ul><li><p>所有单寄存器加载/存储指令可分为“字和无符号字节加载存储指令”，“半字和有符号字节加载存储指令“。</p></li><li><p>T为可选后缀。若指令有T，那么即使处理器是在特权模式下，存储系统也将访问看成是在用户模式下进行的。</p></li></ul></blockquote><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123141137872.png" alt="image-20230123141137872" style="zoom:33%;" /><blockquote><ul><li><p><strong>有符号位半字/字节</strong>加载是指用<strong>符号位加载扩展到32位</strong>， <strong>无符号半字</strong>加载是指用<strong>零扩展到32位</strong>； </p></li><li><p>地址对齐——半字读写的指定地址必须为<strong>偶数</strong>，否则将产生不可靠的结果</p></li></ul></blockquote><h5 id="多寄存器存取"><a href="#多寄存器存取" class="headerlink" title="多寄存器存取"></a>多寄存器存取</h5><p>LDM和STM指令可以实现在一组寄存器和一块连续的内存单元之间传输数据。 </p><p>LDM为加载多个寄存器； STM为存储多个寄存器。 允许一条指令传送16个寄存器的任何子集或所有寄存器。 </p><p>指令格式如下： </p><p><code>LDM&#123;cond&#125;&lt;模式&gt; Rn&#123;!&#125;,reglist&#123;^&#125;</code></p><p><code>STM&#123;cond&#125;&lt;模式&gt; Rn&#123;!&#125;,reglist&#123;^&#125;</code> </p><blockquote><p>多寄存器存取LDM和STM的主要用途是现场保护、数据复制、常数传递等</p><p><strong>高编号寄存器位于高地址，低编号寄存器位于低地址。</strong></p><p><strong>LDM从最低编号寄存器开始处理，与书写顺序无关，高编号寄存器总是在最后</strong></p><p>“STM<strong>从最高编号寄存器开始处理，与书写顺序无关，高编号寄存器总是在最后</strong>“</p></blockquote><p>多寄存器加载/存储指令的8种类型如下表所示，右边四种为堆栈操作、左边四种为数据传送操作。</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123142102284.png" alt="image-20230123142102284" style="zoom:50%;" /><blockquote><p>进行数据复制时，先设置好源数据指针和目标指针，然后使用块拷贝寻址指令LDMIA/STMIA、LDMIB/STMIB、LDMDA/STMDA、 LDMDB/STMDB进行读取和存储 。 </p><p>进行堆栈操作时，要先设置堆栈指针（SP），然后使用堆栈寻址指令 STMFD/LDMFD 、 STMED/LDMED 、 STMFA/LDMFA 和 STMEA/LDMEA实现堆栈操作。</p></blockquote><p><code>LDM&#123;cond&#125;&lt;模式&gt; Rn&#123;!&#125;,reglist&#123;^&#125;</code></p><p><code>STM&#123;cond&#125;&lt;模式&gt; Rn&#123;!&#125;,reglist&#123;^&#125;</code></p><ul><li><p>指令格式中，寄存器Rn为基址寄存器， 装有传送数据的初始地址，Rn不允许为R15。</p></li><li><p>后缀“!”表示最后的地址写回到Rn中。 </p></li><li><p>寄存器列表reglist可包含多于一个寄存器或包含寄存器范围，使用“ ，”分开，如{R1，R2，R6-R9}，寄存器按由小到大排列。</p></li><li><p>后缀“^”不允许在用户模式或系统模式下使用。</p></li><li><p>若在LDM指令且寄存器列表中<strong>包含有PC</strong>时使用，那么除了正常的多寄存器传送外，<strong>将SPSR也拷贝到CPSR中</strong>，这可<strong>用于异常处理返回</strong>。</p></li><li><p>使用后缀<strong>“^”</strong>进行数据传送且寄存器列表<strong>不包含PC</strong>时，加载／存储的是用户模式的寄存器，而不是当前模式的寄存器。</p></li><li><p>当Rn在寄存器列表中且使用后缀<strong>“!”</strong>时,对于STM指令,若Rn为寄存器列表中的最低数字的寄存器,则会将Rn的初值保存; 其它情况下Rn的加载值和存储值不可预知。地址对齐—这些指令忽略地址位[1:0]。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">LDMIA R0!，&#123;R3 - R9&#125;；加载R0指向地址上的多字数据，保存到R3~R9中，R0值更新 <br>STMIA R1!，&#123;R3 - R9&#125;；将R3～R9的数据存储到R1指向的地址上，R1值更新 <br>STMFD SP!，&#123;R0 - R7，LR&#125; ；现场保存，将R0～R7、LR人栈 <br>LDMFD SP!，&#123;R0 - R7，PC&#125; ；恢复现场，异常处理返回<br></code></pre></td></tr></table></figure><h5 id="寄存器和存储器交换指令"><a href="#寄存器和存储器交换指令" class="headerlink" title="寄存器和存储器交换指令"></a>寄存器和存储器交换指令</h5><p>SWP指令用于将一个内存单元(该单元地址放在寄存器Rn中)的内容读取到一个寄存器Rd中，同时将另一个寄存器Rm的内容写入到该内存单元中。使用SWP可实现信号量操作。 指令格式如下：</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123143753566.png" alt="image-20230123143753566" style="zoom:33%;" /><p>其中，B为可选后缀，若有B，则交换字节，否则交换32位字； Rd用于保存从存储器中读入的数据；Rm的数据用于存储到存储器中，若Rm与Rd相同，则为寄存器与存储器内容进行交换；Rn为要进行数据交换的存储器地址，Rn不能与Rd和Rm相同。</p><p><code>SWP R1,R1,[R0] ;将R1的内容与R0指向的存储单元的内容进行交换 </code></p><p><code>SWPB R1,R2,[R0] ;将R0指向的存储单元内容读取一字节数据到R1中 ;(高24位清零)，并将R2的内容写入到该内存单元中 ;(最低字节有效)</code></p><h4 id="4-ARM数据处理指令"><a href="#4-ARM数据处理指令" class="headerlink" title="4.ARM数据处理指令"></a>4.ARM数据处理指令</h4><blockquote><p>数据处理指令只能对寄存器的内容进行操作，而不能对内存中的数据进行操作。</p><p>所有ARM数据处理指令均可选择<strong>使用S后缀，并影响状态标志</strong>。</p><p>比较指令<strong>CMP、CMN、TST和TEQ不需要后缀S，它们会直接影响状态标志</strong>。</p></blockquote><h5 id="1-数据传送指令"><a href="#1-数据传送指令" class="headerlink" title="1.数据传送指令"></a>1.数据传送指令</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123144712628.png" alt="image-20230123144712628" style="zoom: 67%;" /><h5 id="2-算术逻辑运算指令"><a href="#2-算术逻辑运算指令" class="headerlink" title="2.算术逻辑运算指令"></a>2.算术逻辑运算指令</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123150144961.png" alt="image-20230123150144961" style="zoom: 67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asm">求64位加法<br>ADDS R0,R0,R2 ;使用ADC实现64位加法<br>ADC R1,R1,R3 ;(R1、R0)＝(R1、R0)+(R3、R2)<br>求64位减法<br>SUBS R0,R0,R2 ;使用SBC实现64位减法<br>SBC R1,R1,R3 ; (R1、R0)＝(R1、R0)-(R3、R2)<br>求64位数值负数<br>RSBS R2,R0,#0 <br>RSC R3,R1,#0 ;使用RSC指令实现求64位数值的负数<br></code></pre></td></tr></table></figure><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123151253591.png" alt="image-20230123151253591" style="zoom: 67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asm">逻辑与<br>ANDS R0,R0,#0x01 ;R0←R0&amp;0x01，取出最低位数据<br>AND R2,R1,R3 ;R2←R1&amp;R3<br>逻辑或<br>ORR R0,R0,#0x0F ;将R0的低4位置1<br>逻辑异或<br>EOR R1,R1,#0x0F ;将R1的低4位取反<br>EORS R0,R5,#0x01 ; 将R5和0x01进行逻辑异或，<br>;结果保存到R0，并影响标志位<br>位清除<br>BIC R1,R1,#0x0F ;将R1的低4位清零，其它位不变<br></code></pre></td></tr></table></figure><h5 id="3-比较指令"><a href="#3-比较指令" class="headerlink" title="3.比较指令"></a>3.比较指令</h5><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123151910240.png" alt="image-20230123151910240" style="zoom: 67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">比较指令<br>CMP R1,#10 ; R1-10，R1与10比较，设置相关标志位<br>负数比较指令<br>CMN R0，#1 ；R0+1，判断R0是否为 -1 的补码。若是，<br>； 则Z位置1。<br>位测试指令（按位逻辑与）<br>TST R0,#0x01 ; 判断R0的最低位是否为0 <br>TST R1,#0x0F ; 判断R1的低4位是否为0<br>相等测试指令（按位异或）<br>TEQ R0,R1 ; 比较R0与R1是否相等 (不影响V位和C位)<br></code></pre></td></tr></table></figure><blockquote><p>TST指令与ANDS指令的区别在于TST指令<strong>不保存运算结果</strong>。 TST指令通常与EQ、NE条件码配合使用，当所有测试位均为0时，EQ有效， 而只要有一个测试位不为0， 则NE有效</p><p>TEQ指令与EORS指令的 区别在于TEQ指令不保存运算结果。使用TEQ进行相等测试时， 常与EQ、NE条件码配合使用。当两个数据相等时，EQ有效，否则NE有效。</p></blockquote><h4 id="5-乘法指令"><a href="#5-乘法指令" class="headerlink" title="5.乘法指令"></a>5.乘法指令</h4><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123153407347.png" alt="image-20230123153407347" style="zoom: 67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asm">32乘法<br>MUL R1,R2,R3 ;R1=R2×R3<br>MULS R0,R3,R7 ;R0=R3×R7，同时影响CPSR中的N位和Z位<br>32位乘加<br>MLA R1,R2,R3,R0 ; R1=R2×R3+R0<br>64位无符号乘法<br>UMULL R0,R1,R5,R8 ; (R1、R0)=R5×R8<br>64位无符号乘加<br>UMLAL R0,R1,R5,R8 ;(R1、R0)=R5×R8+(R1、R0)<br></code></pre></td></tr></table></figure><blockquote><p><strong>前低字后高字</strong></p></blockquote><h4 id="6-ARM分支指令"><a href="#6-ARM分支指令" class="headerlink" title="6.ARM分支指令"></a>6.ARM分支指令</h4><p>在ARM中有两种方式可以实现程序的跳转：</p><ul><li><p>一种是使用分支指令直接跳转 </p></li><li><p>另一种则是直接向PC寄存器赋值实现跳转</p></li></ul><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123154217855.png" alt="image-20230123154217855" style="zoom: 50%;" /><p>分支指令——B指令，该指令跳转范围限制在当前指令的±32M字节地址内(ARM指令为字对齐，最低2位地址固定为0)。指令格式如下：</p><p><code>B WAITA ; 跳转到WAITA标号处</code></p><p>带链接的分支指令——BL指令，限制在当前指令的±32MB的范围内，BL指令常用与子程序调用。</p><p><code>BL DELAY ; 调用子程序DELAY</code></p><p>带状态切换的分支指令——BX指令，该指令可以根据跳转地址（Rm） 的最低位来切换处理器状态,bit[0]=0为ARM代码，否则为Thumb。其跳转范围限制在当前指令的±32M字节地址内(ARM指令为字对齐，最低2位地址固定为0)。</p><p><code>ADRL R0,ThumbFun+1 ；将Thumb程序的入口地址加1 ；存入R0（ADRL地址读取伪指令） </code>            </p><p><code>BX R0 ；跳转到R0指定的地址，并根据R0的最低位来切换处理器状态</code></p><h4 id="7-协处理器指令"><a href="#7-协处理器指令" class="headerlink" title="7.协处理器指令"></a>7.协处理器指令</h4><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123154836944.png" alt="image-20230123154836944" style="zoom: 50%;" /><h4 id="8-杂项指令"><a href="#8-杂项指令" class="headerlink" title="8.杂项指令"></a>8.杂项指令</h4><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123154952114.png" alt="image-20230123154952114" style="zoom:50%;" /><h3 id="Thumb指令集和ARM指令集区别"><a href="#Thumb指令集和ARM指令集区别" class="headerlink" title="Thumb指令集和ARM指令集区别"></a>Thumb指令集和ARM指令集区别</h3><ol><li><p>分支指令：</p><p>程序相对转移，特别是条件跳转与ARM代码下的跳转相比，在范围上有更多的限制，转向子程序是无条件的转移。 </p></li><li><p>数据处理指令： </p><ul><li><p>数据处理指令是对通用寄存器进行操作。在大多数情况下，操作的结果须放入其中一个操作数寄存器中，而不是第3个寄存器中。 </p></li><li><p>数据处理操作比ARM状态的更少。</p></li><li><p>访问寄存器R8~R15受到一定限制。</p></li><li><p>除MOV和ADD指令访问器R8～R15外，其它数据处理指令总是更新CPSR中的ALU状态标志。</p></li><li><p>访问寄存器R8~R15的Thumb数据处理指令不能更新CPSR中的ALU状态标志。</p></li></ul></li></ol><p>3.单寄存器加载和存储指令，在Thumb状态下，单寄存器加载和存储指令只能访问寄存器R0~R7。</p><p>4.多寄存器加载和存储指令，LDM和STM指令可以将任何范围为R0<del>R7的寄存器子集加载或存储，多寄存器加载和存储指令只有LDMIA和STMIA指令。PUSH和POP指令使用堆栈指令R13作为基址实现满递减堆栈。 除R0</del>R7外,PUSH指令还可以存储LR, 并且POP指令可以加载PC。</p><h2 id="4-汇编程序设计"><a href="#4-汇编程序设计" class="headerlink" title="4.汇编程序设计"></a>4.汇编程序设计</h2><h3 id="1-ARM伪指令"><a href="#1-ARM伪指令" class="headerlink" title="1.ARM伪指令"></a>1.ARM伪指令</h3><p>与单片机汇编程序设计一样，在ARM汇编语言程序里， 有一些特殊指令助记符，这些助记符与指令系统的真正的指令不同，没有相对应的操作码，通常称这些特殊指令助记符为伪指令，他们所完成的操作称为<strong>伪操作</strong>。 伪指令在源程序中的作用是<strong>为完成汇编程序作各种准备工作的</strong>，这些伪指令<strong>仅在汇编过程中起作用</strong>，一旦汇编结束，伪指令的使命就完成。 在ARM的汇编程序中，有如下几种伪指令：<strong>符号定义伪指令、数据定义伪指令、汇编控制伪指令、宏指令以及其他伪指令</strong>。</p><h4 id="常用伪指令-常考"><a href="#常用伪指令-常考" class="headerlink" title="常用伪指令(常考)"></a>常用伪指令(常考)</h4><ul><li><p>ADR（小范围的地址读取伪指令） </p><p><code>ADR&#123;cond&#125; register, expr</code> </p></li><li><p>ADRL（中等范围的地址读取伪指令） </p><p><code>ADRL&#123;cond&#125; register, expr</code> </p></li><li><p>LDR（大范围的地址读取伪指令） </p><p><code>LDR&#123;cond&#125; register, =expr | label-expr</code> </p></li><li><p>NOP空操作伪指令<br><code>NOP</code></p></li></ul><h4 id="符号定义伪指令（常考）"><a href="#符号定义伪指令（常考）" class="headerlink" title="符号定义伪指令（常考）"></a>符号定义伪指令（常考）</h4><p>符号定义伪指令用于定义ARM汇编语言程序中的变量、对变量赋值以及定义寄存器的别名等操作。常见的符号定义伪指令有如下几种： </p><p>● 用于定义全局变量的GBLA、GBLL和GBLS。 </p><p>● 用于定义局部变量的LCLA、LCLL和LCLS。 </p><p>● 用于对变量赋值的SETA、SETL、SETS。 </p><p>● 为通用寄存器列表定义名称的RLIST。 </p><p>● 为一个协处理器的寄存器定义名称的伪指令：CN </p><p>● 为一个协处理器定义名称的伪指令：CP </p><p>● 为一个VFP寄存器定义名称的伪指令：DN和SN </p><p>● 为一个FPA浮点寄存器定义名称的伪指令：FN</p><h5 id="GBLA、GBLL和GBLS"><a href="#GBLA、GBLL和GBLS" class="headerlink" title="GBLA、GBLL和GBLS"></a>GBLA、GBLL和GBLS</h5><p>GBL<strong>A</strong>伪指令用于定义一个全局的<strong>数字变量</strong>，并初始化为<strong>0</strong>； </p><p>GBL<strong>L</strong>伪指令用于定义一个全局的<strong>逻辑变量</strong>，并初始化为<strong>F（假）</strong>； </p><p>GBL<strong>S</strong>伪指令用于定义一个全局的<strong>字符串变量</strong>，并初始化为<strong>空</strong>； </p><blockquote><p>以上三条伪指令用于定义全局变量，因此在整个程序范围内变量名必须唯一</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">GBLA Number1；定义一个全局的数字变量，变量名为Number1<br>Number1 SETA 0xaa；将Number1变量赋值为0xaa<br>GBLL True1；定义一个全局的逻辑变量，变量名为True1<br></code></pre></td></tr></table></figure><h5 id="LCLA、LCLL和LCLS"><a href="#LCLA、LCLL和LCLS" class="headerlink" title="LCLA、LCLL和LCLS"></a>LCLA、LCLL和LCLS</h5><p>LCLA伪指令用于定义一个局部的数字变量，并初始化为0；</p><p>LCLL伪指令用于定义一个局部的逻辑变量，并初始化为F（假）； </p><p>LCLS伪指令用于定义一个局部的字符串变量，并初始化为空； </p><blockquote><p>以上三条伪指令用于声明局部变量，在其作用范围内变量名必须唯一。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">LCLA Number2；声明一个局部的数字变量，变量名为Number2<br>Number2 SETA 0xaa ；将Number2变量赋值为0xaa<br>LCLL Logic2 ；声明一个局部的逻辑变量，变量名为Logic2<br>Logic2 SETL &#123;TRUE&#125; ；将Logic2变量赋值为真<br>LCLS String2 ；定义一个局部的字符串变量，变量名为String2<br>String2 SETS “Testing” ；将String2变量赋值为“Testing”<br></code></pre></td></tr></table></figure><h5 id="SETA、SETL和SETS"><a href="#SETA、SETL和SETS" class="headerlink" title="SETA、SETL和SETS"></a>SETA、SETL和SETS</h5><p>SETA伪指令用于给一个数学变量赋值； </p><p>SETL伪指令用于给一个逻辑变量赋值； </p><p>SETS伪指令用于给一个字符串变量赋值； </p><blockquote><p>其中，变量名为已经定义过的全局变量或局部变量，表达式为将要赋给变量的值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">LCLA Number3 ；声明一个局部的数字变量，变量名为Number3<br>Number3 SETA 0xaa ；将Number3变量赋值为0xaa<br>LCLL Logic3；声明一个局部的逻辑变量，变量名为Logic3<br>Logic3 SETL &#123;TRUE&#125;；将Logic3变量赋值为真<br></code></pre></td></tr></table></figure><h5 id="RLIST"><a href="#RLIST" class="headerlink" title="RLIST"></a>RLIST</h5><p>RLIST伪指令可用于对一个通用寄存器列表定义名称， 使用该伪指令定义的名称可在ARM指令LDM/STM中使用。 在LDM/STM指令中，列表中的寄存器访问<strong>次序为根据寄存器的编号由低到高</strong>，而与列表中的寄存器排列次序无关。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">RegList RLIST&#123;R0-R5，R8，R10&#125; ；将寄存器列表<br>名称定义为RegList，可在ARM指令LDM/STM中通过该<br>名称访问寄存器列表。<br>……<br>STMFD SP！，RegList ；保存寄存器列表RegList到<br>堆栈<br></code></pre></td></tr></table></figure><h4 id="数据定义（Data-Definition）伪指令（DCB（-），DCW，DCD（-amp-），SPACE（-），MAP（-），FIELD-常考）"><a href="#数据定义（Data-Definition）伪指令（DCB（-），DCW，DCD（-amp-），SPACE（-），MAP（-），FIELD-常考）" class="headerlink" title="数据定义（Data Definition）伪指令（DCB（=），DCW，DCD（&amp;），SPACE（%），MAP（^），FIELD(#)常考）"></a>数据定义（Data Definition）伪指令（DCB（=），DCW，DCD（&amp;），SPACE（%），MAP（^），FIELD(#)常考）</h4><blockquote><p>数据定义伪指令一般用于为特定的数据分配存储单元，同时可完成已分配存储单元的初始化。常见的数据定义伪指令有如下几种：</p></blockquote><p>● <strong>DCB</strong> 用于分配一片连续的字节存储单元并用指定的数据初始化。 </p><p>● <strong>DCW</strong>（DCWU）用于分配一片连续的半字存储单元并用指定的数据初始化。 </p><p>● <strong>DCD</strong>（DCDU）用于分配一片连续的字存储单元并用指定的数据初始化。 </p><p>● DCFD（DCFDU）用于为双精度的浮点数分配一片连续的字存储单元并用指定的数据初始化。 </p><p>● DCFS（DCFSU） 用于为单精度的浮点数分配一片连续的字存储单元并用指定的数据初始化。 </p><p>● DCQ（DCQU）用于分配一片以8字节为单位的连续的存储单元并用指定的数据初始化。 </p><p>● DCDO 用于分配一段字的内存单元，将每个单元的内容初始化为该单元相对于基址寄存器的偏移量 </p><p>● DCI 用于分配一段字的内存单元，并用单精度的浮点数据初始化，指定内存单元存放的是代码，而不是数据 </p><p>● <strong>SPACE</strong> 用于分配一片连续的字节存储单元，并初始化为0 </p><p>● <strong>MAP</strong> 用于定义一个结构化的内存表首地址 </p><p>● <strong>FIELD</strong> 用于定义一个结构化的内存表的数据域 </p><p>● <strong>LTORG</strong> 用于声明一个文字池（缓冲池）</p><h5 id="DCB"><a href="#DCB" class="headerlink" title="DCB"></a>DCB</h5><blockquote><p>DCB伪指令用于分配一片<strong>连续的字节存储单元</strong>并用伪指令中指定的表达式初始化。其中，表达式可以为0～255 的数字或字符串。<strong>DCB也可用“=“代替</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">String DCB “This is a test！” ；分配一片连续的字节存储单元并初始化。<br>Parameter DCB 0x33，0x44，0x55<br>DCB –1，-2，0，1，2 ；分配一片连续的字节存储单元并初始化。<br></code></pre></td></tr></table></figure><h5 id="DCW-或DCWU"><a href="#DCW-或DCWU" class="headerlink" title="DCW(或DCWU)"></a>DCW(或DCWU)</h5><blockquote><p>DCW（或DCWU）伪指令用于分配一片<strong>连续的半字存储单元</strong>并用伪指令中指定的表达式初始化。 其中，表达式可以是程序标号或数字表达式。 用DCW分配的字存储单元是半字对齐的，而用DCWU分配的字存储单元并不严格半字对齐。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">Data DCW 0，1，2，3 ；分配一片连续的半字存储单元并初始化。<br></code></pre></td></tr></table></figure><h5 id="DCD（或DCDU）"><a href="#DCD（或DCDU）" class="headerlink" title="DCD（或DCDU）"></a>DCD（或DCDU）</h5><blockquote><p>DCD（或DCDU）伪指令用于分配一片<strong>连续的字存储单元</strong>并用伪指令中指定的表达式初始化。 其中，表达式可以为程序标号或数字表达式。<strong>DCD也可用 “&amp;”代替</strong>。 用DCD分配的字存储单元是字对齐的，而用DCDU分配的字存储单元并不严格字对齐。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">Data DCD 3，4，5，6 ；分配一片连续的字存储单元并初始化。<br></code></pre></td></tr></table></figure><h5 id="DCFD（或DCFDU）"><a href="#DCFD（或DCFDU）" class="headerlink" title="DCFD（或DCFDU）"></a>DCFD（或DCFDU）</h5><blockquote><p>DCFD（或DCFDU）伪指令用于为<strong>双精度的浮点数</strong>分配一片连续的字存储单元并用伪指令中指定的表达式初始化。 每个双精度的浮点数占据两个字单元。 用<strong>DCFD分配的字存储单元是字对齐的</strong>，而用</p><p><strong>DCFDU分配的字存储单元并不严格字对齐</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">FData DCFD 0，2E115，-5E7 ；分配一片连续的字存储单元并初始化为指定的双精度数。<br></code></pre></td></tr></table></figure><h5 id="DCFS（或DCFSU）"><a href="#DCFS（或DCFSU）" class="headerlink" title="DCFS（或DCFSU）"></a>DCFS（或DCFSU）</h5><blockquote><p>DCFS（或DCFSU）伪指令用于为<strong>单精度的浮点数</strong>分配一片连续的字存储单元并用伪指令中指定的表达式初始化。每个单精度的浮点数占据一个字单元。 用DCFS分配的字存储单元是字对齐的，而用DCFSU分配的字存储单元并不严格字对齐。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">Sdata DCFS 1，2E5，-5E－7 ；分配一片连续的字存储单元并初始化为指定的单精度数。<br></code></pre></td></tr></table></figure><h5 id="DCQ-或DCQU"><a href="#DCQ-或DCQU" class="headerlink" title="DCQ(或DCQU)"></a>DCQ(或DCQU)</h5><blockquote><p>DCQ（或DCQU）伪指令用于<strong>分配一片以8个字节为单位的连续存储区域</strong>并用伪指令中指定的表达式初始化。 用DCQ分配的存储单元是字对齐的，而用DCQU分配的存储单元并不严格字对齐。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">Data DCQ 100，1000 ；分配一片连续的存储单元并初始化为指定的值。<br></code></pre></td></tr></table></figure><h5 id="DCDO"><a href="#DCDO" class="headerlink" title="DCDO"></a>DCDO</h5><blockquote><p>DCDO用于<strong>分配一段字内存单元</strong>，并将每个单元的内容初始化为<strong>该单元相对于静态基址寄存器的偏移量</strong>。 DCDO伪指令作为静态基址寄存器R9的偏移量分配内存单元，该指令需要内存字对齐。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asm">IMPORT externsys<br>Data DCDO externsys；分配32位的字单元，其值为标号externsys相对于R9的偏移量<br></code></pre></td></tr></table></figure><h5 id="DCI"><a href="#DCI" class="headerlink" title="DCI"></a>DCI</h5><blockquote><p>DCI用于<strong>分配一段字内存单元</strong>，并用伪指令中指定的表达式初始化。<strong>指定内存单元存放的是代码而不是数据</strong>。在Thumb代码中，DCI分配的是半字内存代码单元。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">MACRO ； 这个宏指令将newinstr Rd，Rm定义为相应的机器指令<br>newinstr $Rd，$Rm<br>DCI 0Xe15f0f10 ； 这里存放的是指令<br>MEND<br></code></pre></td></tr></table></figure><h5 id="SPACE"><a href="#SPACE" class="headerlink" title="SPACE"></a>SPACE</h5><blockquote><p>SPACE伪指令用于<strong>分配一片连续的存储区域并初始化为0</strong>。 其中，表达式为要分配的<strong>字节数</strong>。<strong>SPACE也可用“％”代替</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">DataSpace SPACE 1000 ；分配连续1000字节的存储单元并初始化为0。<br></code></pre></td></tr></table></figure><h5 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h5><blockquote><p>MAP伪指令用于<strong>定义一个结构化的内存表的首地址</strong>。(MAP也可用<strong>“＾”</strong>代替)。表达式可以为程序中的标号或数学表达式，基址寄存器为可选选项. </p><p>•当基址寄存器选项不存在时，表达式的值即为内存表的首地址， </p><p>•当该选项存在时，内存表的首地址为表达式的值与基址寄存器的和。 </p><p>•MAP伪指令通常与FIELD伪指令配合使用来定义结构化的内存表。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asm">MAP 0x100 ；定义结构化内存表首地址的值为0x100。<br></code></pre></td></tr></table></figure><h5 id="FIELD"><a href="#FIELD" class="headerlink" title="FIELD"></a>FIELD</h5><blockquote><p>FIELD伪指令用于<strong>定义一个结构化内存表中的数据域</strong>。(FIELD也可用<strong>“#”</strong>代替)。 </p><p>•表达式的值为当前数据域在内存表中所占的<strong>字节数</strong>。 </p><p>•FIELD伪指令常与MAP伪指令配合使用来定义结构化的内存表。MAP伪指令定义内存表的首地址，FIELD伪指令定义内存表中的各个数据域，并可以为每个数据域指定一个标号供其他的指令引用。 </p><p>•注意MAP和FIELD伪指令仅用于定义数据结构，并不实际分配存储单元。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">MAP 0x100 ；定义结构化内存表首地址的值为0x100。<br>A FIELD 16 ；定义A的长度为16字节，位置为0x100<br>B FIELD 32 ；定义B的长度为32字节，位置为0x110（0x100 后存放了16个字节）<br>S FIELD 256 ；定义S的长度为256字节，位置为0x130（0x110后存放了32个字节）<br></code></pre></td></tr></table></figure><h5 id="LTORG"><a href="#LTORG" class="headerlink" title="LTORG"></a>LTORG</h5><blockquote><p>LTORG用于<strong>声明一个文字池（数据缓冲池）</strong>，在使用LDR伪指令时，要在适当的地址加入LTORG声明文字池， 这样就会把要加载的数据保存在文字池中，再用ARM的加载指令读出数据。如果没有使用LTORG声明文字池，则汇编器会在程序末尾自动声明。使用LTORG声明文字池的目的可以在程序代码的任何位置存储加载的数据。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">……<br>LDR R0，=0x12345 ；有效二进制数位超过8，先放进文字池<br>ADD R1，R1，R0<br>MOV PC，LR<br>LTORG ；声明文字池，此处存放0x12345<br>…… ；其他代码<br></code></pre></td></tr></table></figure><h4 id="汇编控制伪指令"><a href="#汇编控制伪指令" class="headerlink" title="汇编控制伪指令"></a>汇编控制伪指令</h4><blockquote><p>汇编控制伪指令用于控制汇编程序的执行流程，常用的汇编控制伪指令包括以下几条：</p></blockquote><p>● IF、ELSE、ENDIF </p><p>● WHILE、WEND </p><p>● MACRO、MEND </p><p>● MEXIT</p><h5 id="IF、ELSE、ENDIF"><a href="#IF、ELSE、ENDIF" class="headerlink" title="IF、ELSE、ENDIF"></a>IF、ELSE、ENDIF</h5><blockquote><p>IF、ELSE、ENDIF伪指令能<strong>根据条件的成立与否决定是否执行</strong>某个指令序列。当IF后面的逻辑表达式为真，则执行指令序列1，否则执行指令序列2。其中，ELSE及指令序列2可以没有，此时，当IF后面的逻辑表达式为真，则执行指令序列1，否则继续执行后面的指令。 IF、ELSE、ENDIF伪指令可以嵌套使用。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">GBLS Version ；定义一个全局的字符串变量，<br>变量名为Version<br>……<br>IF Version =“V1”<br>指令序列1<br>ELSE<br>指令序列2<br>ENDIF<br></code></pre></td></tr></table></figure><h5 id="WHILE、WEND"><a href="#WHILE、WEND" class="headerlink" title="WHILE、WEND"></a>WHILE、WEND</h5><blockquote><p>WHILE、WEND伪指令能<strong>根据条件的成立与否决定是否循环执行</strong>某个指令序列。当WHILE后面的逻辑表达式为真，则执行指令序列，该指令序列执行完毕后，再判断逻辑表达式的值，若为真则继续执行，一直到逻辑表达式的值为假。 WHILE、WEND伪指令可以嵌套使用。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">GBLA Counter ；声明一个全局的数字变量，变量名为<br>Counter，作为循环计数器<br>……<br>WHILE Counter &lt; 10<br>指令序列<br>WEND<br></code></pre></td></tr></table></figure><h5 id="MACRO、MEND"><a href="#MACRO、MEND" class="headerlink" title="MACRO、MEND"></a>MACRO、MEND</h5><blockquote><p>MACRO、MEND伪指令<strong>可以将一段代码定义为一个整体</strong>，称为<strong>宏指令</strong>，然后就可以在程序中通过宏指令多次调用该段代码。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">MACRO<br>CODE_1； 宏名为CODE_1，无参数<br>LDR R0，=rPDATG； 读取PG0口的值<br>LDR R1，[R0]<br>ORR R1，R1，#0X01； CSI置位<br>STR R1，[R0]<br>MEND<br></code></pre></td></tr></table></figure><blockquote><p>宏定义中，**$标号<strong>在宏指令被展开时，标号会被替换为用户定义的符号，</strong>宏指令可以使用一个或多个参数**， 当宏指令被展开时，这些参数被相应的值替换。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">MACRO ；宏定义<br>CALLSubfunction $Function，$dat1，$dat2 ；<br>宏名为CALLSubfunction，带3个参数<br>IMPORT $Function ；声明外部子程序名<br>MOV R0，$dat1 ；设置子程序参数R0=$dat1<br>MOV R1，$dat2<br>BL Function ；调用子程序<br>MEND ；宏定义结束<br></code></pre></td></tr></table></figure><h4 id="其他常用的伪指令"><a href="#其他常用的伪指令" class="headerlink" title="其他常用的伪指令"></a>其他常用的伪指令</h4><blockquote><p>其他的一些使用较频繁的伪指令：</p></blockquote><p>● AREA </p><p>● ALIGN</p><p>● CODE16、CODE32 </p><p>● ENTRY </p><p>● END </p><p>● EQU </p><p>● EXPORT（或GLOBAL） </p><p>● IMPORT </p><p>● EXTERN </p><p>● GET（或INCLUDE） </p><p>● INCBIN</p><h5 id="AREA"><a href="#AREA" class="headerlink" title="AREA"></a>AREA</h5><blockquote><p>AREA伪指令用于<strong>定义一个代码段或数据段</strong>。ARM汇编程序设计采用分段式设计，一个ARM汇编源程序至少需要一个代码段，大的程序可以包含多个代码段和数据段。 当程序太长时，也可以将程序分为多个代码段和数据段。使用AREA伪指令将程序分为多个ELF（Executable and Linkable Format）格式的段，段名可以相同，这时同名的段被放在同一个EFL段中。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>指令序列<br>；该伪指令定义了一个代码段，段名为Init，属性为只读<br></code></pre></td></tr></table></figure><h5 id="ALIGN"><a href="#ALIGN" class="headerlink" title="ALIGN"></a>ALIGN</h5><blockquote><p>ALIGN伪指令<strong>可通过添加填充字节的方式</strong>，使当前位置满足一定的对齐方式。其中，表达式的值用于指定对齐方式，可能的取值为2的幂，如1、2、4、8、16等。 若未指定表达式，则将当前位置对齐到下一个字的位置。 偏移量也为一个数字表达式，若使用该字段，则当前位置的对齐方式为：2的表达式次幂＋偏移量。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY，ALIGN＝3 ；指定后面的指令为8字节对齐。<br>指令序列<br>END<br></code></pre></td></tr></table></figure><h5 id="CODE16、CODE32"><a href="#CODE16、CODE32" class="headerlink" title="CODE16、CODE32"></a>CODE16、CODE32</h5><blockquote><p>CODE16伪指令通知编译器，其后的指令序列为16位的Thumb指令。</p><p>CODE32伪指令通知编译器，其后的指令序列为32位的ARM指令。</p><p>CODE16和CODE32伪指令只告诉编译器后面的指令是16位或32位的类型，指令本身不能进行程序状态的切换，如果要进行状态的切换，可以使用BX指令进行操作。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>……<br>CODE32 ；通知编译器其后的指令为32位的ARM指令<br>LDR R0，＝NEXT＋1 ；将跳转地址放入寄存器R0<br>BX R0 ；程序跳转到新的位置执行，并将处理器切换到Thumb工作状态<br>……<br>CODE16 ；通知编译器其后的指令为16位的Thumb指令<br>NEXT<br>LDR R3，＝0x3FF<br>……<br>END ；程序结束<br></code></pre></td></tr></table></figure><h5 id="ENTRY"><a href="#ENTRY" class="headerlink" title="ENTRY"></a>ENTRY</h5><blockquote><p>ENTRY伪指令<strong>用于指定程序的入口点</strong>。在一个完整的汇编语言程序中至少要有一个ENTRY（也可以有多个，当有多个ENTRY时，程序的真正入口点由链接器指定）,但在一个源文件里最多只能有一个ENTRY（可以没有）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>ENTRY ；指定应用程序的入口点<br>……<br></code></pre></td></tr></table></figure><h5 id="END"><a href="#END" class="headerlink" title="END"></a>END</h5><blockquote><p>END伪指令用于通知编译器已经到了源程序的结尾。每一个汇编源文件都需要使用一个END伪指令，<strong>指示本源程序结束</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>……<br>END ；指定应用程序的结尾<br></code></pre></td></tr></table></figure><h5 id="EQU"><a href="#EQU" class="headerlink" title="EQU"></a>EQU</h5><blockquote><blockquote><p>EQU伪指令用于<strong>为程序中的常量、标号等定义一个等效的字符名称</strong>，类似于C语言中的<strong>＃define</strong>。其中EQU可用 <strong>“*”代替</strong>。名称为EQU伪指令定义的字符名称，当表达式为32位的常量时，可以指定表达式的数据类型，可以有以下三种类型：CODE16、CODE32和DATA。</p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">ABCE EQU label+8； 定义地址标号ABCE为label+8<br>Test EQU 50 ；定义标号Test的值为50<br>Addr EQU 0x55，CODE32 ；定义Addr的值为0x55，且该处为32位的ARM指令。<br></code></pre></td></tr></table></figure><h5 id="EXPORT（或GLOBAL）"><a href="#EXPORT（或GLOBAL）" class="headerlink" title="EXPORT（或GLOBAL）"></a>EXPORT（或GLOBAL）</h5><blockquote><p>EXPORT伪指令用于在程序中<strong>声明一个全局的标号</strong>，<strong>该标号可在其他的文件中引用</strong>。EXPORT<strong>可用GLOBAL代替</strong>。标号在程序中区分大小写。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>EXPORT main ；声明一个可全局引用的标号main<br>……<br>END<br></code></pre></td></tr></table></figure><h5 id="IMPORT"><a href="#IMPORT" class="headerlink" title="IMPORT"></a>IMPORT</h5><blockquote><p>IMPORT伪指令用于<strong>通知编译器要使用的标号在其他的源文件中定义</strong>，<strong>但要在当前源文件中引用</strong>，而且无论当前源文件是否引用该标号，该标号<strong>均会被加入到当前源文件的符号表中</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>IMPORT main ；通知编译器当前文件要引用标号main，但main在其他源文件中定义<br>……<br>END<br></code></pre></td></tr></table></figure><h5 id="EXTERN"><a href="#EXTERN" class="headerlink" title="EXTERN"></a>EXTERN</h5><blockquote><p>EXTERN伪指令用于<strong>通知编译器要使用的标号在其他的源文件中定义，但要在当前源文件中引用</strong>，如果当前源文件<strong>实际并未引用该标号，该标号就不会被加入到当前源文件的符号表中</strong>。注意: 该伪指令与IMPORT的区别是，<strong>IMPORT伪指令无论当前源文件是否引用该标号，该标号均会被加入到当前源文件的符号表中</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>EXTERN main ；通知编译器当前文件要引用标号main，<br>main在其他源文件中定义，如果本文件<br>中没有使用main，则main就不会被加<br>入到当前源文件的符号表中。<br>……<br>END<br></code></pre></td></tr></table></figure><h5 id="GET（或INCLUDE）"><a href="#GET（或INCLUDE）" class="headerlink" title="GET（或INCLUDE）"></a>GET（或INCLUDE）</h5><blockquote><p>GET伪指令用于<strong>将一个源文件包含到当前的源文件中，并将被包含的源文件在当前位置进行汇编处理</strong>。可以<strong>使用INCLUDE代替GET</strong>。使用方法与C语言中的 “include”相似。 GET伪指令只能用于包含源文件，如果需要包含经过编译后的二进制目标文件，需要使用INCBIN伪指令。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>GET a1.s ；通知编译器当前源文件包含源文件a1.s<br>GET C：\a2.s；通知编译器当前源文件包含源文件C：\ a2.s<br>……<br>END<br></code></pre></td></tr></table></figure><h5 id="INCBIN"><a href="#INCBIN" class="headerlink" title="INCBIN"></a>INCBIN</h5><blockquote><p>INCBIN伪指令用于<strong>将一个二进制目标代码文件或任意格式的数据文件包含到当前的源文件中</strong>，被包含的文件不作任何变动地存放在当前文件中，编译器从其后开始继续处理。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>INCBIN a1.dat ；通知编译器当前源文件包含文件a1.dat<br>INCBIN C：\a2.txt；通知编译器当前源文件包含文件C：\a2.txt<br>INCBIN a3.bin ；通知编译器当前源文件包含文件a3.bin<br>……<br>END<br></code></pre></td></tr></table></figure><h3 id="2-汇编语法"><a href="#2-汇编语法" class="headerlink" title="2.汇编语法"></a>2.汇编语法</h3><blockquote><p>在一个项目设计中：至少需要有一个汇编源文件或C程序文件，可以有多个汇编文件或多个C程序文件，或者C语言和汇编语言混合编程的文件。汇编程序源文件的扩展名必须是“.s”。</p></blockquote><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230123210515574.png" alt="image-20230123210515574" style="zoom:33%;" /><h4 id="汇编语句语法"><a href="#汇编语句语法" class="headerlink" title="汇编语句语法"></a>汇编语句语法</h4><h5 id="汇编语句格式"><a href="#汇编语句格式" class="headerlink" title="汇编语句格式"></a>汇编语句格式</h5><blockquote><p>ARM（Thumb）汇编语言的语句格式为： <strong>{标号} {指令或伪指令} {；注释}</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">正确的例子：<br>……<br>String1 SETS “My string1”<br>Count RN R0 ；给R0寄存器定义别名<br>START<br>LDR R0，=0x12345<br>MOV R1，#0<br>LOOP<br>MOV R2，#3<br>……<br>错误的例子：<br>START MOV R0，#1 ；标号START没有顶头写<br>ABC： MOV R1，#2 ；标号后不能带：<br>MOV R2，#3 ；指令不允许顶头写<br>Loop Mov R2，#3 ；指令中大小写混合<br> B loop ；无法跳转到Loop去<br></code></pre></td></tr></table></figure><h5 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h5><blockquote><p>在ARM汇编中，标号代表一个地址，段内标号的地址在汇编时确定，而段外标号的地址在连接时确定，根据标号的生成方式，可以有以下3种方式： </p><p>（1）<strong>基于PC的标号</strong>是位于目标指令前的标号或程序中的数据定义伪指令前的标号，这种标号在汇编时被处理成PC值加上或减去一个数字常量，它常用于跳转指令的目标地址，或代码段中所嵌入的少量数据。</p><p>（2）<strong>基于寄存器的标号</strong>通常由MAP和FIELD伪指令定义，也可以用EQU伪指令定义。这种标号在汇编时被处理成寄存器的值加上或减去一个数字常量。它通常被用于访问位于数据段中的数据。 </p><p>（3）<strong>绝对地址</strong>是一个32位的数字，它可以寻址的范围是<strong>0~2^32-1</strong>，可以直接寻址整个内存空间。</p></blockquote><h5 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h5><p>● 符号由大、小写字母、数字以及下划线组成。 </p><p>● 除局部标号以数字开头外，其他的符号不能以数字开头 </p><p>● 符号区分大小写，同名的大、小写符号会被编译器认为是两个不同的符号。 </p><p>● 符号在其作用范围内必须唯一。 </p><p>● 自定义的符号名不能与系统的保留字相同。 </p><p>● 符号名不应与指令或伪指令同名。</p><h3 id="3-汇编程序设计"><a href="#3-汇编程序设计" class="headerlink" title="3.汇编程序设计"></a>3.汇编程序设计</h3><blockquote><p>在ARM（Thumb）汇编语言程序中，以程序段为单位组织代码。段是相对独立的指令或数据序列，具有特定的名称。段可以分为<strong>代码段和数据段</strong>，代码段的内容为执行代码，数据段存放代码运行时需要用到的数据。一个汇编程序至少应该有一个代码段，当程序较长时，可以分割为多个代码段和数据段，多个段在程序编译链接时最终形成一个<strong>可执行的映象文件</strong>。 可执行映象文件通常由以下几部分构成： ● 一个或多个代码段，<strong>代码段</strong>的属性为<strong>只读</strong>。 </p><p>● 零个或多个包含初始化数据的数据段，<strong>数据段</strong>的属性为<strong>可读写</strong>。 </p><p>● 零个或多个不包含初始化数据的数据段，数据段的属性为可读写。 链接器根据系统默认或用户设定的规则，将各个段安排在存储器中的相应位置。因此<strong>源程序中段之间的相对位置与可执行的映象文件中段的相对位置一般不会相同</strong>。</p></blockquote><p>汇编语言源程序的基本结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>ENTRY<br>Start<br>LDR R0，=0x3FF5000<br>MOV R1，#0xFF<br>STR R1，[R0]<br>LDR R0，=0x3FF5008<br>MOV R1，#0x01<br>STR R1，[R0]<br>……<br>END<br></code></pre></td></tr></table></figure><p>在汇编语言程序中，用<strong>AREA伪指令定义一个段</strong>，并说明所定义段的相关属性，本例定义一个名为Init的代码段，属性为只读。ENTRY伪指令标识程序的入口点，接下来为指令序列，程序的末尾为END伪指 令，该伪指令告诉编译器源文件的结束，每一个汇编语言程序段都必须有一条END伪指令，指示代码段的结束。</p><h4 id="子程序调用"><a href="#子程序调用" class="headerlink" title="子程序调用"></a>子程序调用</h4><blockquote><p>在ARM汇编语言程序中，子程序的调用一般是通过BL指令来实现的。在程序中，使用指令“<strong>BL子程序名</strong>”即可完成子程序的调用。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA Init，CODE，READONLY<br>ENTRY<br>Start<br>LDR R0，=0x3FF5000<br>MOV R1，#0xFF<br>STR R1，[R0]<br>LDR R0，=0x3FF5008<br>MOV R1，#0x01<br>STR R1，[R0]<br>BL PRINT_TEXT<br>……<br>PRINT_TEXT<br>……<br>MOV PC，LR<br>……<br>END<br></code></pre></td></tr></table></figure><h4 id="宏定义及其作用"><a href="#宏定义及其作用" class="headerlink" title="宏定义及其作用"></a>宏定义及其作用</h4><blockquote><p>• 使用宏定义可以提高程序的可读性，简化程序代码和同步修改。 </p><p>• ARM宏定义与标准C语言的#define相似，只在源程序中进行字符的简单替代。 </p><p>• 宏定义从MACRO伪指令开始，到MEND结束，并可以使用参数。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asm">MACRO ；宏定义<br>CALLSubfunction $Function，$dat1，$dat2 ；宏名为；CALLSubfunction，带3个参数<br>IMPORT $Function ；声明外部子程序名<br>MOV R0，$dat1 ；设置子程序参数R0=$dat1<br>MOV R1，$dat2<br>BL Function ；调用子程序<br>MEND ；宏定义结束<br>……<br>CALLSubfunction FADD1，#3，#2 ；宏调用<br>……<br>汇编处理后，宏调用将被展开，程序如下：<br>……<br>IMPORT FADD1<br>MOV R0，#3<br>MOV R1，#2<br>BL FADD1<br>……<br></code></pre></td></tr></table></figure><h4 id="数据比较跳转"><a href="#数据比较跳转" class="headerlink" title="数据比较跳转"></a>数据比较跳转</h4><blockquote><p>汇编程序可以使用<strong>CMP指令进行两个数的比较</strong>，然后根据比较结果实现程序的跳转，代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asm">CMP R5，#10<br>BEQ BRANCH1 ；如果R5为10，则跳转到；BRANCH1<br>……<br>CMP R1，R2<br>ADDHI R1，R1，#1 ；如果R1&gt;R2，则R1=R1+1<br>ADDLS R1，R1，#2 ；如果R1&lt;=R2，则R1=R1+2<br>……<br>ANDS R1，R1，#0x80 ；R1=R1&amp;0x80，并设置相应的标志位<br>BNE WAIT ；如果R1的第7位1，则跳转到WAIT<br></code></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><blockquote><p>下面的程序代码为汇编循环程序的例子，指定了循环的次数，每循环一次进行减1操作，并判断结果是否为0，如果为0则退出循环。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">MOV R0，#10<br>LOOP<br>……<br>SUBS R0，R0，#1<br>BNE LOOP<br>……<br></code></pre></td></tr></table></figure><h4 id="数据块复制"><a href="#数据块复制" class="headerlink" title="数据块复制"></a>数据块复制</h4><blockquote><p>可以使用存储器访问指令<strong>LDM/STM</strong>进行读取和存储，进行数据块的复制，示例代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">LDR R0，=DATA_DST ；指向数据的目标地址<br>LDR R1，=DATA_SRC ；指向数据源地址<br>MOV R10，#10 ；复制数据块的大小为10*N个字<br>LOOP LDMIA R1！，&#123;R2-R9&#125;<br>     STMIA R0！，&#123;R2-R9&#125;<br>     SUBS R10，R10，#1<br>     BNE LOOP<br>……<br></code></pre></td></tr></table></figure><h4 id="堆栈操作"><a href="#堆栈操作" class="headerlink" title="堆栈操作"></a>堆栈操作</h4><blockquote><p>可以使用存储器访问指令<strong>LDM/STM</strong>实现堆栈操作，用于子程序的寄存器保护。在使用堆栈前，首先需要分配好堆栈空间，设置好寄存器R13（即堆栈指针SP），否则操作失败。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asm">OUTDAT<br>STMFD SP！，&#123;R0-R7，LR&#125; ；寄存器入栈，压栈从右到左<br>……<br>BL DELAY<br>……<br>LDMFD SP！，&#123;R0-R7，PC&#125;^ ；寄存器出栈，出栈从左到右<br></code></pre></td></tr></table></figure><h4 id="查表操作"><a href="#查表操作" class="headerlink" title="查表操作"></a>查表操作</h4><blockquote><p>查表操作是汇编程序经常使用的一种功能，代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asm">……<br>LDR R3，=DISP_TAB ；字模表的首地址<br>LDR R2，[R3，R5，LSL #2] ；根据R5的值查表，取出相应的值。<br>……<br>下面的表为0-F的字模<br>DISP_TAB DCD 0xC0，0xF9，0xA4，0x99，0x92<br>DCD 0x82，0xF8，0x80，0x90，0x88，0x83<br>DCD 0xC6，0xA1，0x86，0x8E，0xFF<br></code></pre></td></tr></table></figure><h4 id="长跳转"><a href="#长跳转" class="headerlink" title="长跳转"></a>长跳转</h4><blockquote><p>• ARM的B指令和BL指令无法进行整个内存空间范围内的跳转<strong>（仅±32MB）</strong>， </p><p>• 但可以通过对PC寄存器的赋值实现32位地址的跳转和调用。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asm">LDR PC，=JUMP_FUNC ；跳转到JUMP_FUNC处<br>……<br>JUMP_FUNC …….；跳转到这里<br>……<br></code></pre></td></tr></table></figure><h4 id="对信号量的支持"><a href="#对信号量的支持" class="headerlink" title="对信号量的支持"></a>对信号量的支持</h4><blockquote><p>ARM提供一条内存与寄存器交换的指令<strong>SWP</strong>用于多线程环境下支持信号量的操作，实现系统任务之间的<strong>同步与互斥</strong>，代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">DISP_SEM EQU 0x40002A00<br>……<br>DISP_WAIT MOV R1，#0 ；0作为信号量的值<br>LDR R0，=DISP_SEM<br>SWP R1，R1，[R0] ；取出信号量，设置为0<br>CMP R1，#0<br>BEQ DISP_WAIT ；如果信号量没到，则等待<br></code></pre></td></tr></table></figure><h4 id="片上特殊寄存器定义及应用"><a href="#片上特殊寄存器定义及应用" class="headerlink" title="片上特殊寄存器定义及应用"></a>片上特殊寄存器定义及应用</h4><blockquote><p>对ARM芯片的片上外设的<strong>特殊功能寄存器进行访问</strong>时，可以使用下面的代码对其寄存器进行定义并应用：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">WDTCNT EQU 0x01D30008 ；看门狗计数器寄存器定义<br>……<br>LDR R0，=WDTCNT ；寄存器地址传给R0<br>MOV R1，#12<br>STR R1，[R0] ；用十进制12设置看门狗计数器寄存器<br></code></pre></td></tr></table></figure><h4 id="片外部件控制"><a href="#片外部件控制" class="headerlink" title="片外部件控制"></a>片外部件控制</h4><blockquote><p>• 设置<strong>“置位/复位”</strong>寄存器 </p><p>• 对外围部件的控制寄存器进行操作时可以<strong>使用存储/保存指令的偏移功能</strong>，避免了每次都加载寄存器地址的操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asm">LDR R0，=GPIO_BASE<br>MOV R1，#0X00<br>STR R1，[R0，#0x04] ；基地址+0x04=IOSET，将IOSET设置为0<br>MOV R1，#0x10<br>STR R1，[R0，#0x0C] ；基地址+0x0C=IOCLR，将IOCLR设置为0x10<br></code></pre></td></tr></table></figure><h2 id="5-嵌入式C语言程序设计基础"><a href="#5-嵌入式C语言程序设计基础" class="headerlink" title="5.嵌入式C语言程序设计基础"></a>5.嵌入式C语言程序设计基础</h2><h3 id="1-嵌入式C语言的预处理伪指令-考察宏"><a href="#1-嵌入式C语言的预处理伪指令-考察宏" class="headerlink" title="1.嵌入式C语言的预处理伪指令(考察宏)"></a>1.嵌入式C语言的预处理伪指令(考察宏)</h3><h4 id="1-文件包含伪指令"><a href="#1-文件包含伪指令" class="headerlink" title="1.文件包含伪指令"></a>1.文件包含伪指令</h4><p>​    文件包含伪指令可将头文件包含到程序中， 头文件中定义的内容有<code>符号常量，复合变量原型、用户定义的变量原型和函数的原型</code>说明等。 编译器编译预处理时，用文件包含的正文内容<strong>替换</strong>到实际程序中。</p><ol><li><p>文件包含伪指令的格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;头文件名.h&gt;</span> <span class="hljs-comment">/*标准头文件*/</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;头文件名.h &quot;</span> <span class="hljs-comment">/*自定义头文件*/</span></span><br></code></pre></td></tr></table></figure></li><li><p>包含文件伪指令的说明</p><ul><li>常在头文件名后用.h作为扩展名，<strong>可带或不带路径</strong>。 </li><li>头文件可分为<strong>标准头文件</strong>和<strong>自定义头文件</strong>。</li><li>尖括号内的头文件为标准头文件，由开发环境或系统提供。 </li><li>双引号内的头文件为用户自定义头文件。 搜索时，<u>首先在当前目录中搜索，其次按环境变量include指定的目录顺序搜索</u>。 </li><li>搜索到头文件后，就将该伪指令直接用头文件内容<strong>替换</strong></li></ul></li></ol><h4 id="2-宏定义伪指令"><a href="#2-宏定义伪指令" class="headerlink" title="2.宏定义伪指令"></a>2.宏定义伪指令</h4><p>​    宏定义伪指令分为：<strong>简单宏、参数宏、条件宏、预定义宏及宏释放</strong>。</p><ol><li>简单宏格式如下：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">define</span> 宏标识符 宏体</span><br></code></pre></td></tr></table></figure><ol><li><p>说明：</p><blockquote><ul><li>宏体是由单词序列组成。宏体超长时，<strong>允许使用续行符 “\”进行续行</strong>，续行符和其后的换行符 \n 都不会进入宏体。</li><li>在定义宏时，应尽量<strong>避免</strong>使用<strong>C语言的关键字</strong>和<strong>预处理器的预定义宏</strong>，以免引起灾难性的后果。</li><li>在源文件中，用预处理器伪指令定义过宏标识符之后， 就可用宏标识编写程序。当源文件被预处理器处理时，每遇到该宏标识符，预处理器便将宏展为宏体。</li></ul></blockquote></li><li><p>参数宏格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">define</span> 宏标识符（形式参数表） 宏体</span><br></code></pre></td></tr></table></figure></li><li><p>说明：</p><blockquote><ul><li>形式参数表为<strong>逗号分割</strong>的形式参数。 </li><li>宏体是由单词序列组成。宏体超长时，允许使用 续行符“\”进行续行，续行符和其后的换行符 \n 都 不会进入宏体。 </li><li>使用参数宏时，形式参数表应换为同样个数的实 参数表，这一点类似于函数的调用。参数宏与函数 的区别在于参数宏的形参数表中没有类型说明符。</li><li>预处理器在处理参数宏时<strong>使用2遍宏展开</strong>。第1遍展开宏体，第2遍对展开后的宏体用实参数替换形式参数。</li></ul></blockquote></li></ol><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> bNAND_CTL(Nb) __REG(0x4e000000 + (Nb))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFCONF bNAND_CTL(0x00)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFCMD bNAND_CTL(0x04)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFADDR bNAND_CTL(0x08)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFDATA bNAND_CTL(0x0c)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFSTAT bNAND_CTL(0x10)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NFECC bNAND_CTL(0x14)</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>条件宏格式：</p><ul><li><p>格式1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> 宏标识符 <span class="hljs-comment">//若标识符已定义</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">undef</span> 宏标识符<span class="hljs-comment">//释放宏</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> 宏标识符 宏体<span class="hljs-comment">//重定义宏</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span> </span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> 宏标识符 宏体</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li><li><p>格式2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">ifndef</span> 宏标识符 <span class="hljs-comment">//若标识符未定义</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> 宏标识符 宏体</span><br><span class="hljs-meta"># <span class="hljs-keyword">else</span> </span><br><span class="hljs-meta"># <span class="hljs-keyword">undef</span> 宏标识符<span class="hljs-comment">//释放宏</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> 宏标识符 宏体</span><br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure></li></ul><p>说明：</p><blockquote><ul><li>格式1是<strong>测试存在</strong>，格式2是<strong>测试不存在</strong>。 </li><li><code>else</code>可有，也可没有。</li></ul></blockquote></li><li><p>宏释放</p></li></ol><blockquote><p>用于释放原先定义的宏标识符。经释放后的宏标识 符可再次用于定义其他宏体。</p></blockquote><ul><li><p>格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">undef</span> 宏标识符</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-条件编译伪指令"><a href="#3-条件编译伪指令" class="headerlink" title="3.条件编译伪指令"></a>3.条件编译伪指令</h4><p>格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">if</span>（条件表达式1）</span><br>…<br><span class="hljs-meta"># <span class="hljs-keyword">elif</span> （条件表达式2）</span><br>…<br><span class="hljs-meta"># <span class="hljs-keyword">elif</span> （条件表达式3）</span><br>…<br><span class="hljs-meta"># <span class="hljs-keyword">elif</span> （条件表达式n）</span><br>…<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>…<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">if</span> _B0SIZE==B0SIZE_BYTE</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> PB0SIZE；<br><span class="hljs-meta"># <span class="hljs-keyword">elif</span> _B0SIZE==B0SIZE_SHORT</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> PB0SIZE；<br><span class="hljs-meta"># <span class="hljs-keyword">elif</span> _B0SIZE==B0SIZE_WORD</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> PB0SIZE；<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h3 id="2-嵌入式C语言的基本数据类型"><a href="#2-嵌入式C语言的基本数据类型" class="headerlink" title="2.嵌入式C语言的基本数据类型"></a>2.嵌入式C语言的基本数据类型</h3><h4 id="1-数据类型与表达式"><a href="#1-数据类型与表达式" class="headerlink" title="1.数据类型与表达式"></a>1.数据类型与表达式</h4><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221123152039319.png" style="zoom:50%;" /><h5 id="1-类型修饰符"><a href="#1-类型修饰符" class="headerlink" title="1.类型修饰符"></a>1.类型修饰符</h5><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221123145944765.png" style="zoom:50%;" /><h5 id="2-访问修饰符"><a href="#2-访问修饰符" class="headerlink" title="2.访问修饰符"></a>2.访问修饰符</h5><p>C语言有两个用于控制访问和修改变量方式的修饰符， 分别是<code>常量(const)</code>和<code>易变量(volatile)</code>。</p><blockquote><p>带<strong>const</strong>修饰符定义出的常量在程序运行过程中始终保持不变。 </p><p><strong>volatile</strong>修饰符用于提醒编译程序，该变量的值可以不通过程序中明确定义的方法来改变，而是<strong>从内存中读取最新数据（抑制编译器优化）</strong>。</p></blockquote><p>例如： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span> num； <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> num=<span class="hljs-number">100</span>；<br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>；<span class="hljs-comment">//num的值由内存中实际数据决定，初始值不一定为0</span><br></code></pre></td></tr></table></figure><p><code>static</code></p><p>作用：<strong>static的作用有2条:（1）隐藏; (2)赋初始值一次有效</strong></p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221123151113245.png" style="zoom:50%;" /><blockquote><p>a是全局变量，msg是函数，并且都没有加static前缀，因此对于另外的源文件main.c是可见的。如果加了static，就会对其它源文件隐藏。例如在a和msg的定义前加上static， main.c就看不到它们了。利用这一特性可以在不同的文件中定义同名函数和同名变量， 而不必担心命名冲突.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> count = <span class="hljs-number">10</span>; <span class="hljs-comment">//赋初值，一次有效</span><br><span class="hljs-keyword">return</span> count--;<br>&#125;<br><span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;global\t\tlocal static\n&quot;</span>);<br><span class="hljs-keyword">for</span>(; count &lt;= <span class="hljs-number">10</span>; ++count)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t\t%d\n&quot;</span>, count, fun());<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-位运算符"><a href="#3-位运算符" class="headerlink" title="3.位运算符"></a>3.位运算符</h5><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221123152542459.png" style="zoom:50%;" /><h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h3><p><strong>内联函数</strong>（相当于宏）</p><blockquote><ul><li>与一般函数不同的是，它不是在调用时发生转移，而是在<strong>编译时将函数体嵌入在每一个调用语句处</strong>。 </li><li>这样就相对节省了参数传递、系统栈的保护与恢复等的开销。</li></ul></blockquote><p>格式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">&lt;<span class="hljs-keyword">inline</span>&gt; &lt;类型标识符&gt; &lt;被调函数名&gt;(含类型说明的形参表)<br>&#123;<br>函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip.h&gt;</span></span><br><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br><span class="hljs-keyword">if</span>(a&gt;b)<br><span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> b;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><blockquote><ol><li><p>宏调用并不执行类型检查，甚至连正常参数也不检查，但是函数调用却要检查。 </p></li><li><p> C语言的宏使用的是文本替换，可能导致无法预料的后果，因为需要重新计算参数和操作顺序。 </p></li><li><p> 以下情况不宜使用内联： </p></li></ol><p>   （1）如果函数体内的代码比较长（&gt;10句），使用内联将导致内存消耗代价较高。 </p><p>   （2）如果函数体内出现循环，那么执行函数体内代码的时间要比函数调用的开销大。</p></blockquote><h3 id="内嵌汇编的局限性-作业题"><a href="#内嵌汇编的局限性-作业题" class="headerlink" title="内嵌汇编的局限性(作业题)"></a>内嵌汇编的局限性(作业题)</h3><p> （1）操作数 </p><p>• ARM 开发工具编译环境下内嵌汇编语言，指令操作数可以是寄存器、常量或 C 语 言表达式。可以是 char、short 或 int 类型，而且是作为无符号数进行操作。 </p><p>• 当表达式过于复杂时需要使用较多的物理寄存器，有可能产生冲突。 </p><p>• GNU ARM 编译环境下内嵌汇编语言 ARM 开发工具稍有差别，不能直接引用 C 语 言中的变量。 </p><p>（2）物理寄存器 </p><p>不要直接向程序计数器 PC 赋值，程序的跳转只能通过 B 或 BL 指令实现。 一般将寄存器 R0～R3、R12 及 R14 用于子程序调用存放中间结果，因此在内嵌汇 编指令中，一般不要将这些寄存器同时指定为指令中的物理寄存器。 在内嵌的汇编指令中使用物理寄存器时，如果有 C 语言变量使用了该物理寄存器， 则编译器将在合适的时候保存并恢复该变量的值。需要注意的是，当寄存器 SP、 SL、FP 以及 SB 用作特定的用途时，编译器不能恢复这些寄存器的值。 通常在内嵌汇编指令中不要指定物理寄存器，因为有可能会影响编译器分配寄存 器，进而可能影响代码的效率。 </p><p>（3）标号、常量及指令展开 </p><p>• C 语言程序中的标号可以被内嵌的汇编指令所使用。但是只有 B 指令可以使用 C 语言程序中的标号，BL 指令不能使用 C 语言程序中的标号。 </p><p>（4）内存单元的分配 </p><p>• 内嵌汇编器不支持汇编语言中用于内存分配的伪操作。所用的内存单元的分配都是 通过 C 语言程序完成的，分配的内存单元通过变量以供内嵌的汇编器使用。 </p><p>（5）SWI 和 BL 指令 </p><p>• SWI 和 BL 指令用于内嵌汇编时，除了正常的操作数域外，还必须增加如下 3 个可 选的寄存器列表： </p><p>• 用于存放输入的参数的寄存器列表。 </p><p>• 用于存放返回结果的寄存器列表。 </p><p>• 用于保存被调用的子程序工作寄存器的寄存器列表。</p><h3 id="4-汇编语言与C-C-的混合编程"><a href="#4-汇编语言与C-C-的混合编程" class="headerlink" title="4.汇编语言与C/C++的混合编程"></a>4.汇编语言与C/C++的混合编程</h3><h4 id="1-相互调用规则—ATPCS"><a href="#1-相互调用规则—ATPCS" class="headerlink" title="1.相互调用规则—ATPCS"></a>1.相互调用规则—ATPCS</h4><blockquote><p>过程调用标准ATPCS（ARM-Thumb Procedure Call Standard）规定了<strong>子程序间相互调用的基本规则</strong>， ATPCS规定子程序调用过程中<strong>寄存器的使用规则</strong>、<strong>数据栈的使用规则</strong>及<strong>参数的传递规则</strong>。</p><p>2007年，ARM公司推出了新的过程调用标准AAPCS（ARM Architecture Procedure Call Standard）,它只是改进了原有的ATPCS的二进制代码的兼容性。 </p></blockquote><h5 id="1-寄存器的使用规则"><a href="#1-寄存器的使用规则" class="headerlink" title="1.寄存器的使用规则"></a>1.寄存器的使用规则</h5><blockquote><p>子程序间通过寄存器<strong>R0~R3来传递参数</strong>，记为<strong>A1~A4</strong>。 被调用的子程序在返回前无须恢复寄存器R0~R3的内容。</p></blockquote><ul><li><p>子程序中使用寄存器<strong>R4~R11来保存局部变量</strong>。记为V1<del>V8。 如果在子程序中使用到了寄存器V1</del>V8中的某些寄存器，则<strong>子程序进入时必须保存这些寄存器的值，在返回前必须恢复这些寄存器的值</strong>； </p></li><li><p>对于子程序中没有用到的寄存器，则不必进行这些操作。 </p></li><li><p>在Thumb程序中，通常只能使用寄存器<strong>R4~R7</strong>来保存局部变量。</p></li><li><p>寄存器<strong>R12</strong>用<strong>做子程序间调用时临时保存栈指针</strong>，常用于子程序间的连接代码段中，记作IP。</p></li><li><p>寄存器<strong>R13</strong>用做<strong>数据栈指针</strong>，记作SP。在子程序中寄存器R13不能用做其他用途。寄存器SP在进入子程序时的值和退出子程序时的值必须相等。</p></li><li><p>寄存器<strong>R14</strong>称为<strong>链接寄存器</strong>，记作LR。它用于保存子程序的返回地址。如果在子程序中保存了返回地址，则寄存器R14可作其他用途。</p></li><li><p><strong>R15是程序计数器，记作PC</strong>。不能作其他用途。</p></li></ul><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221128140943017.png" alt="image-20221128140943017" style="zoom:33%;" /><h5 id="2-数据栈的使用规则"><a href="#2-数据栈的使用规则" class="headerlink" title="2.数据栈的使用规则"></a>2.数据栈的使用规则</h5><blockquote><p><strong>FD（Full Descending） 满递减</strong> </p><p> ED（Empty Descending） 空递减 </p><p>FA（Full Ascending） 满递增 </p><p> EA（Empty Ascending） 空递增</p></blockquote><p><strong>ATPCS规定数据栈为FD（满递减）类型， 并且对数据栈的操作是8字节对齐的。 异常中断处理程序可使用中断程序的数据栈</strong>。</p><ul><li>数据栈指针（Stack Point）：最后一个写入栈的数据的内存地址。 </li><li> 数据栈的基地址（Stack Base）：数据栈的最高地址。 ATPSC中的数据栈是FD型，最早入栈的数据所占的内存单元是基地址的下一个内存单元。 </li><li>数据栈界限（Stack Limit）：数据栈中可使用的最低的内存单元地址。 </li><li> 数据栈中的数据帧（Stack Frames）：数据栈中为子程序分配用来保存寄存器和局部变量的区域。</li></ul><h5 id="3-参数传递规则"><a href="#3-参数传递规则" class="headerlink" title="3.参数传递规则"></a>3.参数传递规则</h5><p>（1）参数个数固定的子程序参数传递规则若系统含浮点运算硬件部件，浮点参数传递规则： </p><p><strong>各个浮点参数按顺序处理。为每个浮点参数分配FP寄存器。方法：满足该浮点参数需要的且编号最小的一组连续的FP寄存器</strong>。 第一个整数参数，通过寄存器R0～R3来传递。其他参数通过数据栈传递。</p><p>（2）参数个数可变的子程序参数传递规则 </p><p><strong>当参数不超过4个，用R0～R3传递参数，当参数超过4个时，使用数据栈来传递参数。在参数传递时，所有参数看作是存放在连续的内存字单元中的字数据。然后，依次将各字数据传递到寄存器R0～R3中。</strong> 如果参数多于4个，将剩余的字数据传送到数据栈中，入栈的顺序与参数顺序相反，即最后一个字数据先入栈。</p><p>（3）子程序结果返回规则</p><p><strong>结果为一个32位整数，可通过寄存器R0返回；结果为一个64位整数，可通过寄存器R0，R1返回，依次类推；</strong>结果为一个浮点数时，可通过运算部件的寄存器F0、D0或者S0来返回；结果为复合型的浮点数（如复数）时，可通过寄存器F0～Fn或者D0～Dn来返回。对于位数更多的结果，需通过内存来传递，如通过数据栈来传递。</p><h4 id="2-C-C＋＋代码中嵌入汇编指令"><a href="#2-C-C＋＋代码中嵌入汇编指令" class="headerlink" title="2.C/C＋＋代码中嵌入汇编指令"></a>2.C/C＋＋代码中嵌入汇编指令</h4><p>内嵌汇编指令： </p><ul><li><p> 表现为独立定义的函数体 </p></li><li><p>ADS中可直接引用C语言的变量定义 </p></li><li><p>数据交换必须通过ATPCS(ARM-Thumb  Procedure Call Standard)进行</p></li></ul><h6 id="1．内嵌汇编指令的语法格式"><a href="#1．内嵌汇编指令的语法格式" class="headerlink" title="1．内嵌汇编指令的语法格式"></a>1．内嵌汇编指令的语法格式</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asm">__asm&#123;<br>instruction<br>…<br>instruction<br>&#125;; //ADS中支持<br>特别注意:<br>“__asm” 是两个下划线。<br></code></pre></td></tr></table></figure><h6 id="2-内嵌汇编指令的特点"><a href="#2-内嵌汇编指令的特点" class="headerlink" title="2.内嵌汇编指令的特点"></a>2.内嵌汇编指令的特点</h6><p>（1）操作数 </p><p>作为操作数的寄存器和常量可以是C/C++表达式。 是char、short、int类型，而且这些表达式都是作为无符号数进行操作。 </p><p>编译器将会计算这些表达式的值，并为其分配寄存器。</p><p>（2）物理寄存器 内嵌汇编指令中使用物理寄存器的限制： </p><p>不能直接向PC寄存器中赋值，程序的跳转只能 通过B指令和BL指令实现。 </p><p>在内嵌汇编指令中，不要使用过于复杂的 C/C++表达式。 </p><p>编译器可能会使用R12寄存器或R13寄存器存放 编译的中间结果，在计算表达式值时可能会将 寄存器R0到R3、R12以及R14用于子程序调用。 一般不要指定物理寄存器（会影响编译器分配 寄存器）。</p><p>（3）常量 常量前的符号#可省略。若表达式前使用了符号#， 则必须是一个常量。 </p><p>（4）指令展开 如果包含常量操作数，该指令可能会被汇编器展 开成几条指令。</p><p>例如指令：</p><p> ADD R0，R0，#1023 可能会被展开成下面的指令序列：</p><p> ADD R0，R0，#1024 SUB R0，R0，#01 MUL指令会被展开成一系列加法和移位操作。</p><p>（5）标号 C/C++程序中的标号可被内嵌的汇编指令使用。但只有B指令可使用C/C++程序中的标 号，指令BL不能使用C/C++程序中的标号。 指令B使用C/C++程序中的标号格式: B{cond} label </p><p>（6）内存单元的分配 所用的内存单元的分配都是通过C/C++程序 完成的，分配的内存单元通过变量供内嵌的汇编器使用。</p><p>（7）SWI和BL指令的使用 内嵌SWI和BL指令中3个可选寄存器列表： </p><ul><li>第1个寄存器列表用于存放输入的参数。 </li><li>第2个寄存器列表用于存放返回的参数。 </li><li>第3个寄存器列表的内容供被调用的子程序作为工作寄存器。</li></ul><h6 id="3．内嵌的汇编-与-armasm的区别"><a href="#3．内嵌的汇编-与-armasm的区别" class="headerlink" title="3．内嵌的汇编 与 armasm的区别"></a>3．内嵌的汇编 与 armasm的区别</h6><p>在功能和使用方法上主要有以下特点： </p><ul><li> 不能写PC (MOV PC, LR) </li><li> 不支持伪指令LDR Rn，=expression，但可用指令: MOV Rn，expression来代替。 </li><li> 除NOP外，不支持ADR、ADRL等伪指令。 </li><li> 指令中的C变量不要与任何物理寄存器重名 </li><li> LDM/STM指令中的寄存器列表只能使用物理寄存器，不 能使用C表达式 </li><li> 不支持指令BX/BLX </li><li> 用户不用维护数据栈 </li><li> 不要轻易改变处理器模式。 </li><li>不支持内存分配操作</li></ul><p>例5.15 使能和禁止中断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c">__inline <span class="hljs-type">void</span> <br><span class="hljs-title function_">enable_IRQ</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> tmp;<br>__asm<br>&#123;<br>MRS tmp,CPSR<br>BIC tmp, tmp, #<span class="hljs-number">0x80</span><br>MSR CPSR_c, tmp<br>&#125;<br>&#125;<br>__inline <span class="hljs-type">void</span> <span class="hljs-title function_">disable_IRQ</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> tmp;<br>__asm<br>&#123;<br>MRS tmp, CPSR<br>ORR tmp, tmp, <span class="hljs-number">0x80</span><br>MSR CPSR_c, tmp<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>disable_IRQ( );<br>enable_IRQ( ) ; <br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-变量互访"><a href="#3-变量互访" class="headerlink" title="3.变量互访"></a>3.变量互访</h4><p>在C程序中声明的全局变量可被汇编程序通 过地址间接访问。具体访问方法如下： </p><p>使用IMPORT伪操作声明该全局变量。 </p><p>使用LDR伪指令读取该全局变量的内存地 址，通常该全局变量的内存地址值存放在程序 的数据缓冲池中（literal pool）。 </p><p>根据该数据的类型， 使用相应的LDR指令读取该全局变量的值； 使用相应的STR指令修改该全局变量的值。</p><p>各数据类型及对应的LDR/STR指令如下： </p><ul><li>对于无符号的char类型变量通过指令LDRB/STRB来读/写。 </li><li>对于无符号的short类型变量通过指令LDRH/STRH来读/写。 </li><li>对于int类型的变量通过指令LDR/STR来读/写 </li><li>对于有符号的char类型的变量通过指令LDRSB来读取。 </li><li>对于有符号的char类型的变量通过指令STRB来写入。 </li><li>对于有符号的short类型的变量通过指令LDRSH来读取。 </li><li>对于有符号的short类型的变量通过指令STRH来写入。 </li><li>对于小于8个字的结构型变量，可以通过一条LDM/STM指令 来读/写整个变量。 </li><li>对于结构型变量的数据成员，可以使用相应的LDR/STR指令 来访问，这时必须知道该数据成员相对于结构型变量开始地 址的偏移量。</li></ul><p>【例5.16 】从汇编程序中访问C程序全局变量 在汇编程序中访问C程序全局变量。 </p><ul><li>程序中变量globvl是在C程序中声明的全局变量。 </li><li>在汇编程序中首先用IMPORT伪操作声明该变量； </li><li>将其内存地址读入到寄存器R1中； </li><li>再将其内存单元中的值读入到寄存器R0中； </li><li>修改后再将寄存器R0的值赋于变量globvl。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA globals, CODE, READONLY<br>EXPORT asmsub<br>IMPORT globvl<br>asmsub<br>LDR R1, =globvl ；获得变量地址<br>LDR R0, [R1] ；读入<br>ADD R0, R0, #2 ；修改变量的内容<br>STR R0, [R1] ；回存<br>MOV PC, LR<br>END<br></code></pre></td></tr></table></figure><h4 id="4-相互调用"><a href="#4-相互调用" class="headerlink" title="4.相互调用"></a>4.相互调用</h4><h6 id="1-C语言程序调用汇编语言程序"><a href="#1-C语言程序调用汇编语言程序" class="headerlink" title="1.C语言程序调用汇编语言程序"></a>1.C语言程序调用汇编语言程序</h6><p>汇编语言程序的设计要遵守ATPCS。在汇 编语言中需用EXPORT伪操作来说明，使得本程序可被其他程序调用。 C语言程序调用该汇编语言程序之前，需要在C语言程序中使用EXTERN关键词来声明该汇编语言程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">AREA SCopy, CODE, <br>READONLY<br>EXPORT my_strcpy<br>my_strcpy <br>LDRB R2, [R1],#1 <br>STRB R2, [R0],#1 <br>CMP R2, #0 <br>BNE my_strcpy <br>MOV PC, LR<br>END<br></code></pre></td></tr></table></figure><h2 id="6-ARM开发工具的使用"><a href="#6-ARM开发工具的使用" class="headerlink" title="6. ARM开发工具的使用"></a>6. ARM开发工具的使用</h2><p>嵌入式调试系统应包括<strong>调试主机、仿真器和目标板</strong>3个部分。</p><p>调试方法一般有如下4种：</p><p>1） 指令集模拟器（软调试）</p><p>2） 驻留监控软件</p><p>3） JTAG仿真器</p><p>4） 在线仿真器（仿真头）</p><h2 id="7-硬件系统设计"><a href="#7-硬件系统设计" class="headerlink" title="7.硬件系统设计"></a>7.硬件系统设计</h2><h3 id="1-嵌入式硬件系统的结构"><a href="#1-嵌入式硬件系统的结构" class="headerlink" title="1.嵌入式硬件系统的结构"></a>1.嵌入式硬件系统的结构</h3><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221203161059013.png" alt="image-20221203161059013" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221210141504960.png" alt="image-20221210141503201" style="zoom:33%;" /><h3 id="1-S3C44B0芯片概述"><a href="#1-S3C44B0芯片概述" class="headerlink" title="1.S3C44B0芯片概述"></a>1.S3C44B0芯片概述</h3><h4 id="1-1简介"><a href="#1-1简介" class="headerlink" title="1.1简介"></a>1.1简介</h4><p>Samsung公司推出的S3C44B0微处理器是基于16/32位的RISC结构，为手持设备和一般类型的应用提供了高性价比和高性能的解决方案。为了降低成本，S3C44B0提供了丰富的内置资源，包括：</p><ul><li>8KB Cache、</li><li>内部SRAM、LCD控制器、</li><li>带自动握手的2通道UART、</li><li>4通道DMA、</li><li>FP/EDO/SDRAM控制器、</li><li>带PWM功能的5通道定时器、</li><li>RTC、</li><li>8通道的10位ADC、IIC、IIS总线接口、同步SIO接口和PLL倍频器等。</li></ul><ol><li>S3C44B0采用了ARM7TDMI内核，附带0.25um工艺的CMOS标准宏单元和存储编译器。</li><li>它的低功耗和出色的静态设计特别适用于对成本和功耗敏感的场合。</li><li>S3C44B0的杰出特性是它的内部CPU核，由ARM公司设计的ARM7TDMI的RISC处理器，<strong>主频高达66MHz</strong>。</li><li>它集成了Thumb代码压缩器，片上的ICE （In-Circuit Emulator）断点调试支持和一个32位的硬件乘法器。</li></ol><h4 id="1-2特性"><a href="#1-2特性" class="headerlink" title="1.2特性"></a>1.2特性</h4><h5 id="1-2-1体系结构"><a href="#1-2-1体系结构" class="headerlink" title="1.2.1体系结构"></a>1.2.1体系结构</h5><p>● 集成了手持设备和通用嵌入式系统应用的解决方案；<br>● 强大的指令集；<br>● Thumb代码压缩机制，最大化代码密度的同时保持了32位指令的性能；<br>● 基于JTAG的片上集成ICE调试解决方案；<br>● 32位的硬件乘法器；<br>● 实现低功耗的新型总线结构</p><h5 id="1-2-2系统管理"><a href="#1-2-2系统管理" class="headerlink" title="1.2.2系统管理"></a>1.2.2系统管理</h5><p>● 支持大/小端模式；<br>● 寻址空间每bank32M字节，总共达256M字节；<br>● 支持每bank可编程的8/16/32位数据总线宽度；<br>● 7个bank具有固定的bank起始地址和可编程的bank大小；<br>● 1个bank具有可编程的起始地址和大小；<br>● 8个存储器bank，包含6个ROM、SRAM，2个SROM/SDRAM/DRAM存储空间；<br>● 所有的存储bank具有可编程的操作周期；<br>● 支持外部等待信号延长总线周期；<br>● 支持掉电时DRAM/SDRAM的自刷新模式；<br>● 支持均匀/非均匀的DRAM地址。</p><h5 id="1-2-3-Cache和内部SRAM"><a href="#1-2-3-Cache和内部SRAM" class="headerlink" title="1.2.3 Cache和内部SRAM"></a>1.2.3 Cache和内部SRAM</h5><p>● 一体化的8k字节Cache；<br>● 未用的Cache空间可以用做0/4/8k字节的SRAM空间；</p><h5 id="1-2-4时钟和电源管理"><a href="#1-2-4时钟和电源管理" class="headerlink" title="1.2.4时钟和电源管理"></a>1.2.4时钟和电源管理</h5><p>● 低功耗；<br>● 片上PLL使CPU工作频率最大达到66MHz；<br>● 可以通过软件设置各功能模块的输入时钟；<br>● 电源模式包括正常、<br>慢速（不经PLL低频时钟）、<br>空闲（停CPU时钟）、<br>停止模式（停所有时钟）<br>—通过EINT[7：0]或RTC报警中断从停止模式唤醒。</p><h5 id="1-2-5中断控制器"><a href="#1-2-5中断控制器" class="headerlink" title="1.2.5中断控制器"></a>1.2.5中断控制器</h5><p>● 30个中断源（看门狗定时器、6个定时器、6个UART、8个外部中断、4个DMA、2个RTC、1个ADC、1个IIC、1个SIO）；<br>● 采用<strong>向量化的IRQ中断模式，可以减少中断延迟</strong>；<br>● 可选的电平/边沿模式触发外部中断；<br>● 电平/边沿模式具有可编程的优先级；<br>● 支持FIQ为紧急的中断请求进行服务。</p><h4 id="1-3引脚信号描述"><a href="#1-3引脚信号描述" class="headerlink" title="1.3引脚信号描述"></a>1.3引脚信号描述</h4><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20230125123146117.png" alt="image-20230125123146117" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125131839534.png" alt="image-20230125131839534" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125132646155.png" alt="image-20230125132646155" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125133411513.png" alt="image-20230125133411513" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125133811640.png" alt="image-20230125133811640" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125134541013.png" alt="image-20230125134541013" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125135339987.png" alt="image-20230125135339987" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125135457708.png" alt="image-20230125135457708" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125135931987.png" alt="image-20230125135931987" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125140133440.png" alt="image-20230125140133440" style="zoom:33%;" /><h3 id="2-单元电路设计"><a href="#2-单元电路设计" class="headerlink" title="2.单元电路设计"></a>2.单元电路设计</h3><h4 id="2-1电源电路"><a href="#2-1电源电路" class="headerlink" title="2.1电源电路"></a>2.1电源电路</h4><p>在系统中，需要使用5V、3.3V和2.5V的直流稳压电源。为了提高供电的稳定性和可靠性，通常采用集成线性稳压电源对CPU和外围电路供电。 </p><ol><li>CPU内核工作需要供给的**+2.5V电源采用LM1117－2.5**产生 </li><li>CPU 的I/O和外设工作所需要的**+3.3V电源是采用LM1117－3.3** 产生</li><li>其他的外围芯片如串行口接口电路、PS/2键盘接口电路以及93C46IIC接口芯片等需要<strong>5V的直流电源，5V的直流电源由外部直接提供</strong>。</li></ol><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125141408059.png" alt="image-20230125141408059" style="zoom:25%;" /><h4 id="2-2晶振电路"><a href="#2-2晶振电路" class="headerlink" title="2.2晶振电路"></a>2.2晶振电路</h4><p>S3C44B0的时钟源可以用外部晶体（无源晶振）来产生，也可以直接输入外部时钟（有源晶振），这由CPU的OM[3:2]位的状态决定。 OM[3:2]位的状态在nRESET引脚的上升沿由OM3和OM2脚的电平决定：</p><p><strong>OM[3:2]=00时使用无源晶振</strong>，通过内部的振荡电路与外部的电容和无源晶振一起振荡产生CPU所需要的时钟； </p><p><strong>OM[3:2]=01时使用外部有源晶振直接提供时钟</strong>，不需要通过CPU内部的振荡电路产生时钟； </p><p>OM[3:2]=其它时处于测试模式，一般不使用。</p><p>在复位后PLL启动，但在用S/W（软件）设置有效值到PLLCON寄存器之前，PLL的输出（FOUT）不能被使用，这时FOUT直接输出Crystal Clock或外部时钟。晶振电路用于向CPU及其他电路提供工作时钟。 在系统中，S3C44B0可以使用有源晶振，也可以使用无源晶振。</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125141422229.png" alt="image-20230125141422229" style="zoom:25%;" /><h4 id="2-3看门狗与复位电路"><a href="#2-3看门狗与复位电路" class="headerlink" title="2.3看门狗与复位电路"></a>2.3看门狗与复位电路</h4><ul><li>硬件看门狗(WDT, WATCHDOG TIMER)是利用了一个定时器，来监控主程序的运行</li><li>也就是说在主程序的运行过程中，CPU要在定时时间到来之前对定时器进行复位(喂狗)</li><li>如果出现死循环，或者说PC指针不能回来。那么定时时间到达后，如果CPU还没有产生喂狗信号给WDT，WDT就会输出信号使CPU复位。</li></ul><p><strong>嵌入式系统中两类看门狗：</strong></p><p>1、CPU内部自带的看门狗：将一个芯片中的定时器来作为看门狗，通过程序的初始化，写入初值，设定溢出时间，并启动定时器。程序按时对定时器赋初值（或复位），以免其溢出。</p><p><strong>优点：</strong>可以通过程序<strong>改变溢出时间；可以随时禁用</strong><br><strong>缺点：</strong>需要初始化；如果程序在初始化、启动完成前跑飞或在禁用后跑飞，看门狗就无法复位系统，这样看门狗的作用就没有了，系统恢复能力降低。</p><p>2、独立的看门狗芯片：这种看门狗主要有一个用于喂狗的引脚（一般与CPU的GPIO相连）和一个复位引脚（与系统的RESET引脚相连），如果没有在一定时间内改变喂狗脚的电平，复位引脚就会改变状态复位CPU。此类看门狗一上电就开始工作，无法禁用。</p><p><strong>优点：无须配置，上电即用。</strong>系统必须按时喂狗，<strong>系统恢复能力高</strong>。<br><strong>缺点</strong>：无法灵活配置溢出时间，<strong>无法禁用，灵活性降低</strong>。</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221207151332982.png" alt="image-20221207151332982" style="zoom:33%;" /><p>硬件看门狗与复位电路中，按键S1是手动复位按键，ADM706TAR芯片的第7脚周期性的按设定的时间间隔检查该引脚的输入信号，如果CPU在规定的时间内没有输入高电平（又称为喂狗），则说明程序跑飞了，ADM706TAR的第6脚便产生一个复位信号，使CPU复位。</p><h4 id="2-4-存储单元电路"><a href="#2-4-存储单元电路" class="headerlink" title="2.4 存储单元电路"></a>2.4 存储单元电路</h4><blockquote><p>一个bank–32M字节，共8个bank，每个bank初地址最高最高位相差2。</p></blockquote><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221207151656687.png" alt="image-20221207151656687" style="zoom:33%;" /><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221212140103371.png" alt="image-20221212140103371" style="zoom: 33%;" /><ul><li>在程序空间flash ROM 内（在主板上对应2M 字节大小的HY29LV160器件）可以固化一段启动系统并对系统进行初始化的程序——Boot Loader 程序。</li><li>上图中Flash ROM 存储器映射在了系统的bank0 上，也就是说，系统上电时处理器即从Flash ROM 的0x00000000 地址处取得指令开始运行。这个地址上的Boot Loader程序完成了<strong>时钟设置初始化、中断矢量的定义、存储器的参数设置、堆栈地址定义</strong>等工作，这些设置对于系统正常启动是非常重要的。</li><li>由于Flash ROM 是非易失性的存储器，因此程序就算掉电也不会丢失。但是如果由于某个误操作覆盖了Flash ROM 中启动程序的内容，系统就将无法正常启动，这时就需要重新将Boot Loader程序烧写到Flash ROM中</li></ul><h5 id="1-Flash存储器接口电路设计"><a href="#1-Flash存储器接口电路设计" class="headerlink" title="1.Flash存储器接口电路设计"></a>1.Flash存储器接口电路设计</h5><blockquote><p>FLASH的地址线[A19～A0]与S3C44B0的地址总线[ADDR20～ADDR1]相连，这是因为S3C44B0的存储系统在存储代码时需要<strong>半字对齐方式（16位方式）</strong>；</p><ul><li>16位数据总线[DQ15~DQ0]与S3C44B0的低16位数据总线[XDATA15~XDATA0]相连。</li><li>注意此时应将S3C44B0的BWSCON寄存器的<strong>DW0[2:1]位置为“01”</strong>，这两位指示BANK0的数据总线宽度，由OM[1:0]脚上、下拉确定。</li></ul></blockquote><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125145639678.png" alt="image-20230125145639678" style="zoom:33%;" /><h5 id="2-SDRAM存储器接口电路设计"><a href="#2-SDRAM存储器接口电路设计" class="headerlink" title="2.SDRAM存储器接口电路设计"></a>2.SDRAM存储器接口电路设计</h5><blockquote><ul><li>目前常用的SDRAM为8位/16位的数据宽度，工作电压一般为3.3V。</li><li>HY57V641620的BA1、BA0（Bank Address）（选择4个Bank） 接S3C44B0的地址总线ADDR&lt;22&gt;、ADDR&lt;21&gt;； </li><li>HY57V641620的DQ15～DQ0接S3C44B0的数据总线的低 16位XDATA&lt;15&gt;～XDATA&lt;0&gt;； </li><li>HY57V641620的LDQM、UDQM分别接S3C44B0的DQM0 （Pin11）、DQM1（Pin12）(SDRAM数据屏蔽信号)。 </li><li>将总线宽度与等待状态控制寄存器BWSCON的<strong>DW6[25:24]=01b</strong>，这两位确定BANK6的数据总线宽度为16位。</li></ul></blockquote><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20230125151037912.png" alt="image-20230125151037912" style="zoom:25%;" /><h5 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h5><p>存储系统的数据总线位宽决定。</p><blockquote><ul><li>位宽为<strong>8</strong>,则S3C44B0的<strong>A0连接存储器的A0</strong></li><li>位宽为<strong>16</strong>，则S3C44B0的<strong>A1连接存储器的A0</strong></li><li>位宽为<strong>32</strong>，则S3C44B0的<strong>A2连接存储器的A0</strong></li></ul></blockquote><h2 id="8-程序设计题模板"><a href="#8-程序设计题模板" class="headerlink" title="8.程序设计题模板"></a>8.程序设计题模板</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asm">     AREA Fctrl,CODE,READONLY ;声明代码段 Fctrl<br>     EXPORT/IMPORT/EXTERN 标号 ;声明或引用全局标号（可以没有）<br>     ENTRY ;标识程序入口<br>     CODE32 ;声明 32 位 ARM 指令<br>START<br>     ;初始化寄存器<br>    <br> ;中间处理程序（包括循环，分支等等）<br>    <br>Stop<br>     B Stop ;文件结束<br>     END<br></code></pre></td></tr></table></figure><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>向量中断是一种中断方式。<strong>每个外设预先被设置一个中断识别码</strong>,当CPU响应某外设中断请求时,由硬件电路向CPU提供该外设的中断识别码,CPU由此<strong>获得中断服务程序入口地址</strong>,转入中断服务,这种方式称为向量中断。</p><p>中断向量指的是在向量中断方式中,中断服务程序的入口地址。</p><p>两者的区别为:<strong>向量中断是由中断事件自己通过硬件提供中断服务程序的入口地址的中断;非向量中断是中断事件不能直接提供中断服务程序的入口地址的中断</strong></p><h2 id="ARM指令与伪指令的区别"><a href="#ARM指令与伪指令的区别" class="headerlink" title="ARM指令与伪指令的区别"></a>ARM指令与伪指令的区别</h2><p>　　伪指令经过汇编编译后就不存在了，而指令依旧存在。伪操作只是汇编过程中起作用, ,一旦汇编结束 ,伪操作也就随之消失。另外，ARM 伪指令不属于 ARM 指令集中的指令，是为了编程方便而定义的。</p><p>　　<strong>总结：</strong>其实LDR、ADRL、ADR的作用和用法基本类似，主要区别是加载数的范围大小不同，LDR加载范围最大，ADRL次之，ADR最小。另外，使用LDR伪指令时，操作数要带“=”号，ADRL和ADR则不需要。</p>]]></content>
    
    
    <categories>
      
      <category>ARM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Embeded theory and appliment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Professional courses summary</title>
    <link href="/2022/11/da51d1e3196c.html"/>
    <url>/2022/11/da51d1e3196c.html</url>
    
    <content type="html"><![CDATA[<h1 id="综合问题整理"><a href="#综合问题整理" class="headerlink" title="综合问题整理"></a>综合问题整理</h1><h2 id="数字信号处理"><a href="#数字信号处理" class="headerlink" title="数字信号处理"></a>数字信号处理</h2><h3 id="1-FS，FT，DTFT，DFS，DFT，FFT，Z变换，拉普拉斯变换的区别与联系？"><a href="#1-FS，FT，DTFT，DFS，DFT，FFT，Z变换，拉普拉斯变换的区别与联系？" class="headerlink" title="1.FS，FT，DTFT，DFS，DFT，FFT，Z变换，拉普拉斯变换的区别与联系？"></a>1.FS，FT，DTFT，DFS，DFT，FFT，Z变换，拉普拉斯变换的区别与联系？</h3><h3 id="2-FIR和IIR的区别，有哪些常见的滤波器？"><a href="#2-FIR和IIR的区别，有哪些常见的滤波器？" class="headerlink" title="2.FIR和IIR的区别，有哪些常见的滤波器？"></a>2.FIR和IIR的区别，有哪些常见的滤波器？</h3><ul><li><strong>IIR：h（n）无限长，极点位于z平面任意位置，滤波器阶次低，非线性相位，递归结构，不能FFT计算，可用模拟滤波器设计，用于设计规格化的选频滤波器。常见有巴特沃斯、切比雪夫（I型，Ⅱ型）和椭圆滤波器</strong></li><li><strong>FIR：h（n）有限长，极点固定在原点，滤波器阶次高，可严格的线性相位，一般采用非递归结构，可用FFT计算，设计借助于计算机，可设计各种幅频特性和相频特性的滤波器。常见有横截型、级联型、频率抽样型、快速卷积结构</strong></li></ul><h3 id="3-傅里叶变换的存在条件？"><a href="#3-傅里叶变换的存在条件？" class="headerlink" title="3.傅里叶变换的存在条件？"></a>3.傅里叶变换的存在条件？</h3><h3 id="4-FFT，IIFT加速原理？"><a href="#4-FFT，IIFT加速原理？" class="headerlink" title="4.FFT，IIFT加速原理？"></a>4.FFT，IIFT加速原理？</h3><h4 id="1-他们的蝶形结构？"><a href="#1-他们的蝶形结构？" class="headerlink" title="1.他们的蝶形结构？"></a>1.他们的蝶形结构？</h4><h4 id="2-各自的复杂度？"><a href="#2-各自的复杂度？" class="headerlink" title="2.各自的复杂度？"></a>2.各自的复杂度？</h4><h2 id="通信原理"><a href="#通信原理" class="headerlink" title="通信原理"></a>通信原理</h2><h3 id="1-通信系统的框架？"><a href="#1-通信系统的框架？" class="headerlink" title="1.通信系统的框架？"></a>1.通信系统的框架？</h3><h3 id="2-脉冲成型滤波器用在哪？"><a href="#2-脉冲成型滤波器用在哪？" class="headerlink" title="2.脉冲成型滤波器用在哪？"></a>2.脉冲成型滤波器用在哪？</h3><h3 id="3-FDM和TDM的比较？"><a href="#3-FDM和TDM的比较？" class="headerlink" title="3.FDM和TDM的比较？"></a>3.FDM和TDM的比较？</h3><h3 id="4-奈奎斯特采样定理？"><a href="#4-奈奎斯特采样定理？" class="headerlink" title="4.奈奎斯特采样定理？"></a>4.奈奎斯特采样定理？</h3><h3 id="5-信道容量意义和公式？"><a href="#5-信道容量意义和公式？" class="headerlink" title="5.信道容量意义和公式？"></a>5.信道容量意义和公式？</h3><h3 id="6-随机信号为什么使用功率谱不适用频谱？"><a href="#6-随机信号为什么使用功率谱不适用频谱？" class="headerlink" title="6.随机信号为什么使用功率谱不适用频谱？"></a>6.随机信号为什么使用功率谱不适用频谱？</h3><h3 id="7-什么是平稳信号，平稳随机过程，遍历性？"><a href="#7-什么是平稳信号，平稳随机过程，遍历性？" class="headerlink" title="7.什么是平稳信号，平稳随机过程，遍历性？"></a>7.什么是平稳信号，平稳随机过程，遍历性？</h3><h3 id="8-载波同步的方法？"><a href="#8-载波同步的方法？" class="headerlink" title="8.载波同步的方法？"></a>8.载波同步的方法？</h3><ul><li>自同步（直接法）（平方变换法，平方环法，同相正交环法）</li><li>外同步（插入导频法）</li></ul><h3 id="9-2ASK、2FSK、2PSK，2DPSK带宽和误码率？"><a href="#9-2ASK、2FSK、2PSK，2DPSK带宽和误码率？" class="headerlink" title="9.2ASK、2FSK、2PSK，2DPSK带宽和误码率？"></a>9.2ASK、2FSK、2PSK，2DPSK带宽和误码率？</h3><ol><li>带宽：2ASK：2fs; 2FSK: 2fs+|f1-F2|; 2PSK：2fs ；2DPSK：2fs</li><li>误码率：<img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307052235695.png" alt="image.png|400"></li></ol><h3 id="10-新型调制技术有哪些？"><a href="#10-新型调制技术有哪些？" class="headerlink" title="10.新型调制技术有哪些？"></a>10.新型调制技术有哪些？</h3><p>QAM，MSK，GMSK，OFDM等</p><h3 id="11-QAM星型结构和方形结构区别？"><a href="#11-QAM星型结构和方形结构区别？" class="headerlink" title="11.QAM星型结构和方形结构区别？"></a>11.QAM星型结构和方形结构区别？</h3><p>星形结构振幅环和相位个数都少于方形结构，因此利于实现自动增益控制和载波相位追踪；但产生和接收更为复杂。</p><h3 id="12-QAM-的产生方法？"><a href="#12-QAM-的产生方法？" class="headerlink" title="12.QAM 的产生方法？"></a>12.QAM 的产生方法？</h3><ul><li>正交调幅法：MQAM 信号可由两路载波正交的\sqrt{M}ASK 信号叠加而成 <img src="file:///C:/Users/alleyf/AppData/Roaming/Typora/typora-user-images/image-20230705222131991.png?lastModify=1688567633" alt="image-20230705222131991|400"></li><li>复合相移法：用两路独立的 QPSK 信号叠加，即可形成16QAM 信号 <img src="file:///C:/Users/alleyf/AppData/Roaming/Typora/typora-user-images/image-20230705223012306.png?lastModify=1688567633" alt="image-20230705223012306|400"><h3 id="13-MSK-特点和优势？"><a href="#13-MSK-特点和优势？" class="headerlink" title="13. MSK 特点和优势？"></a>13. MSK 特点和优势？</h3>优势：旁瓣衰减更快，对邻道干扰小<br>特点：包络恒定、相位连续、频差最小， 并且严格正交的2FSK（CPFSK）信号</li></ul><h3 id="14-MSK-的最小频率间隔和载波频率及码元频率要求？"><a href="#14-MSK-的最小频率间隔和载波频率及码元频率要求？" class="headerlink" title="14. MSK 的最小频率间隔和载波频率及码元频率要求？"></a>14. MSK 的最小频率间隔和载波频率及码元频率要求？</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/202307052250282.png" alt="image.png|400"></p><blockquote><p>调制指数h=0.5；</p></blockquote><h2 id="信号与系统"><a href="#信号与系统" class="headerlink" title="信号与系统"></a>信号与系统</h2><h2 id="电路原理"><a href="#电路原理" class="headerlink" title="电路原理"></a>电路原理</h2>]]></content>
    
    
    <categories>
      
      <category>课程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Professional courses</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web_Fast_Development</title>
    <link href="/2022/11/aff38a7758c4.html"/>
    <url>/2022/11/aff38a7758c4.html</url>
    
    <content type="html"><![CDATA[<h1 id="网页开发"><a href="#网页开发" class="headerlink" title="网页开发"></a><font title="blue">网页开发</font></h1><h2 id="1-快速开发网站"><a href="#1-快速开发网站" class="headerlink" title="1.快速开发网站"></a>1.快速开发网站</h2><h3 id="1-1初试Flask"><a href="#1-1初试Flask" class="headerlink" title="1.1初试Flask"></a>1.1初试Flask</h3><p><code>返回字符串</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-comment"># 创建app实例</span><br>app = Flask(__name__)<br><br><br><span class="hljs-comment"># 创建路由网址与函数index的关系</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/info&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我的开发从这里开始&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p><code>返回一个html网页</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template<br><br><span class="hljs-comment"># 创建app实例</span><br>app = Flask(__name__)<br><br><br><span class="hljs-comment"># 创建路由网址与函数index的关系</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/info&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>():<br>    <span class="hljs-comment">#默认打开该目录下的templats目录下的index.html文件</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;./index.html&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h2 id="2-浏览器能识别的标签"><a href="#2-浏览器能识别的标签" class="headerlink" title="2.浏览器能识别的标签"></a>2.浏览器能识别的标签</h2><h3 id="2-1编码（head）"><a href="#2-1编码（head）" class="headerlink" title="2.1编码（head）"></a>2.1编码（head）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2title（head）"><a href="#2-2title（head）" class="headerlink" title="2.2title（head）"></a>2.2title（head）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>LoveStory<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3标题（body）"><a href="#2-3标题（body）" class="headerlink" title="2.3标题（body）"></a>2.3标题（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>五级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>六级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4div和span（body）"><a href="#2-4div和span（body）" class="headerlink" title="2.4div和span（body）"></a>2.4div和span（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>块级标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>行内标签/内联标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>div独占一行，块级标签</li><li>span有多大占多大，行内标签也叫内联标签</li></ul><blockquote><p>div和span样式由CSS渲染设定。</p></blockquote><h3 id="2-5超链接（body）"><a href="#2-5超链接（body）" class="headerlink" title="2.5超链接（body）"></a>2.5超链接（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--当前页面绝对跳转到完整网址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fcsy.fit&quot;</span>&gt;</span>绝对跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--新建页面绝对跳转到完整网址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fcsy.fit&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>绝对跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--相对跳转到本地其他目录--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/time&quot;</span>&gt;</span>相对跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--相对跳转到本地其他目录--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>空跳转<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p align="center"><a href="https://fcsy.fit">绝对跳转</a></p><h3 id="2-6图片（body）"><a href="#2-6图片（body）" class="headerlink" title="2.6图片（body）"></a>2.6图片（body）</h3><blockquote><p>可以写内嵌式<strong>css</strong>，eg：<kbd>style="height:100px"</kbd>,以分号(;)隔开</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--网络图片绝对地址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://t7.baidu.com/it/u=1819248061,230866778&amp;fm=193&amp;f=GIF&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:100px&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--本地图片相对地址,flask要求本地图片必须存放在static目录下--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/picture.png&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p align="center"><a href="https://fcsy.fit"><img src="https://t7.baidu.com/it/u=1819248061,230866778&fm=193&f=GIF" alt="shadow-随便写" style="height:300px"/></a></p><h3 id="2-7音频（body）"><a href="#2-7音频（body）" class="headerlink" title="2.7音频（body）"></a>2.7音频（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://lo-sycdn.kuwo.cn/3f7fd58e7bca702aa2835729bbde7e1d/63764e76/resource/n1/62/42/3385123058.mp3&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">preload</span>=<span class="hljs-string">&quot;metadata&quot;</span>&gt;</span>暂时无法播放<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><audio id="mmedia-wbtYejznVlBTirps" controls=true audi="audio" src="https://sr-sycdn.kuwo.cn/19afb1f908fc03bcf75647a5bbd6f357/6378b980/resource/n1/87/40/2726821845.mp3" autoplay=true ></audio><p><code>外联音频播放器</code></p><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><div id="mmedia-aprVFcugDZYiSSDj"></div><script> var aprVFcugDZYiSSDj_options = JSON.parse('{\"lrcType\":3,\"audio\":[{\"name\":\"在你的身边\",\"url\":\"https://m704.music.126.net/20221119192835/140b21e09265a98964248133457f7348/jdymusic/obj/wo3DlMOGwrbDjj7DisKw/14096410711/7e04/100d/d588/25b0beab3b8bacaa87e4c5fc8eea6cf2.mp3\"}]}'); aprVFcugDZYiSSDj_options.container = document.getElementById("mmedia-aprVFcugDZYiSSDj"); const ap_aprVFcugDZYiSSDj = new APlayer(aprVFcugDZYiSSDj_options); </script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js"></script><script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script><meting-js metin="meting" auto="https://y.qq.com/n/ryqq/song/003kIhRR4Vr0cV.html" ></meting-js><h3 id="2-8视频（body）"><a href="#2-8视频（body）" class="headerlink" title="2.8视频（body）"></a>2.8视频（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://vd4.bdstatic.com/mda-mkm388zceiim43xq/540p/h264_cae/1637547444425365643/mda-mkm388zceiim43xq.mp4&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><video id="mmedia-jGlhANeNmWzmYDDD" controls=true vide="video" src="https://vd4.bdstatic.com/mda-mkm388zceiim43xq/540p/h264_cae/1637547444425365643/mda-mkm388zceiim43xq.mp4" width="100%" ></video><p><code>外链视频播放器</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: relative; padding: 30% 45%;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;视频地址去B站分享按钮下iframe里面的src属性值复制&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class="bbplayer"><iframe class="bbplayer" id="mmedia-GVOXEVgnDzQCuKxZ" src="https://player.bilibili.com/player.html?bvid=BV1rG411j7u9&page=1&high_quality=1&danmaku=true" allowfullscreen="allowfullscreen" scrolling="no" border="0" frameborder="0" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe></div><script> document.getElementById("mmedia-GVOXEVgnDzQCuKxZ").style.height=document.getElementById("mmedia-GVOXEVgnDzQCuKxZ").scrollWidth*0.76+"px";    window.onresize = function(){      document.getElementById("mmedia-GVOXEVgnDzQCuKxZ").style.height=document.getElementById("mmedia-GVOXEVgnDzQCuKxZ").scrollWidth*0.76+"px";    }; </script><h3 id="2-9列表（body）"><a href="#2-9列表（body）" class="headerlink" title="2.9列表（body）"></a>2.9列表（body）</h3><ol><li><p><code>无序列表</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国移动<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国电信<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul>            <li>中国移动</li>            <li>中国电信</li>            <li>中国联通</li></ul></li><li><p><code>有序列表</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国移动<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国电信<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ol>            <li>中国移动</li>            <li>中国电信</li>            <li>中国联通</li></ol></li></ol><h3 id="2-10表格（body）"><a href="#2-10表格（body）" class="headerlink" title="2.10表格（body）"></a>2.10表格（body）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>//表头<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Alleyf<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  //表格内容<br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Alleyf<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Alleyf<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><div>    <table border="0"  style="margin:0 auto;">        <thead>            <tr> <th>ID</th> <th>姓名</th> <th>年龄</th> </tr>        </thead>        <tbody>            <tr> <td>1</td> <td><a href="https://fcsy.fit">Alleyf</a></td> <td>20</td>    </tr>            <tr> <td>2</td> <td>ChuiYuGin</td> <td>20</td>    </tr>            <tr> <td>3</td> <td>Alleyf</td> <td>15</td>    </tr>        </tbody>    </table></div>`案例`<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>头像<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/images/01.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>alleyf<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>alleyf@gmail.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fcsy.fit&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编辑 删除<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/images/02.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin@gmail.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://chuiyugin.github.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编辑 删除<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/images/03.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin@gmail.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://chuiyugin.github.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编辑 删除<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/images/04.webp&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>chuiyugin@gmail.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://chuiyugin.github.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>更多信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>编辑 删除<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-11表单（body）"><a href="#2-11表单（body）" class="headerlink" title="2.11表单（body）"></a>2.11表单（body）</h3><ol><li><p>input系列(7个)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>单选   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>复选  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>篮球<span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>   <br></code></pre></td></tr></table></figure></li><li><p>下拉框系列(2个)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">单选下拉框<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>金钱<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>美人<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>地位<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>名声<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>归隐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>多选下拉框<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>金钱<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>美人<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>地位<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>名声<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>归隐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>多行输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>默认输入<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>实例</strong></p></li></ol><center><div>    用户名：<input type="text"></div><div>    密码：<input type="password"></div><div>    性别：<input type="radio" name="gender" checked="checked">男    <input type="radio" name="gender">女</div><div>    爱好：<input type="checkbox" checked="checked">篮球    <input type="checkbox">IT    <input type="checkbox">游戏</div><div>    城市：<select>    <option>北京</option>    <option>上海</option>    <option>深圳</option>    <option>西安</option>    <option>武汉</option>    <option>广州</option></select></div><div>    特长：<select multiple>    <option>java</option>    <option>python</option>    <option>C++</option>    <option>Go</option>    <option>php</option></select></div><div>    备注：<textarea cols="40" rows="2"></textarea></div><div>    <input type="button" value="button注册">    <input type="submit" value="submit提交"></div></center><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><span alt="rainbow">小结</span></h3><ul><li><p>划分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">-块级标签<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>-行内标签<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>嵌套</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">-点击图片跳转网页<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fcsy.fit target=&quot;</span><span class="hljs-attr">_blank</span>&quot;&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="综合案例–登录注册"><a href="#综合案例–登录注册" class="headerlink" title="综合案例–登录注册"></a>综合案例–登录注册</h3><ul><li><p>导入flask，创建app</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Author: Alleyf 3035581811@qq.com</span><br><span class="hljs-string">Github: https://github.com/Alleyf</span><br><span class="hljs-string">QQ: 3035581811</span><br><span class="hljs-string">Signature: You know more，you know less</span><br><span class="hljs-string">Date: 2022-11-19 20:57:35</span><br><span class="hljs-string">LastEditors: Alleyf 3035581811@qq.com</span><br><span class="hljs-string">LastEditTime: 2022-11-20 10:43:50</span><br><span class="hljs-string">FilePath: \login_register\app.py</span><br><span class="hljs-string">Copyright (c) 2022 by Alleyf 3035581811@qq.com, All Rights Reserved. </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, jsonify<br><br>app = Flask(__name__)<br><br>根据method的不同分别处理<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        user = request.form.get(<span class="hljs-string">&quot;username&quot;</span>)<br>        pwd = request.form.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        gender = request.form.get(<span class="hljs-string">&quot;gender&quot;</span>)<br>        hobbies = request.form.getlist(<span class="hljs-string">&quot;hobby&quot;</span>)<br>        city = request.form.get(<span class="hljs-string">&quot;city&quot;</span>)<br>        characters = request.form.getlist(<span class="hljs-string">&quot;characters&quot;</span>)<br>        notes = request.form.get(<span class="hljs-string">&quot;notes&quot;</span>)<br>        <span class="hljs-built_in">print</span>(user, pwd, gender, hobbies, city, characters, notes)<br>        info = &#123;<br>            <span class="hljs-string">&quot;user&quot;</span>: user,<br>            <span class="hljs-string">&quot;pwd&quot;</span>: pwd,<br>            <span class="hljs-string">&quot;gender&quot;</span>: gender,<br>            <span class="hljs-string">&quot;hobbies&quot;</span>: hobbies,<br>            <span class="hljs-string">&quot;city&quot;</span>: city,<br>            <span class="hljs-string">&quot;characters&quot;</span>: characters,<br>            <span class="hljs-string">&quot;notes&quot;</span>: notes<br>        &#125;<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>)<br>        <span class="hljs-comment"># return jsonify(info)</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;username&gt;&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">userdemo</span>(<span class="hljs-params">username</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello <span class="hljs-subst">&#123;username&#125;</span>!&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure></li><li><p>HTML实现注册</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;static/css/register.css&quot; /&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    * &#123;</span><br><span class="language-css">      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">html</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to bottom right, <span class="hljs-built_in">rgb</span>(<span class="hljs-number">114</span>, <span class="hljs-number">135</span>, <span class="hljs-number">254</span>), <span class="hljs-built_in">rgb</span>(<span class="hljs-number">130</span>, <span class="hljs-number">88</span>, <span class="hljs-number">186</span>));</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            性别：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>男<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>女<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            爱好：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>篮球<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>足球<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span>排球<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40&quot;</span>&gt;</span>乒乓球<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            城市：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bj&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sh&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xa&quot;</span>&gt;</span>西安<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            特长：<br>            <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characters&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;101&quot;</span>&gt;</span>c++<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;102&quot;</span>&gt;</span>python<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;103&quot;</span>&gt;</span>Go<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            备注：<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;notes&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--        普通按钮--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--        提交表单数据到指定地址--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注册&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--    &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86--&gt;</span><br>    <span class="hljs-comment">&lt;!--            src=&quot;//music.163.com/outchain/player?type=2&amp;id=475479888&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> mycenter = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;center&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> myiframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;iframe&#x27;</span>);</span><br><span class="language-javascript">        myiframe.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>,<span class="hljs-string">&#x27;//music.163.com/outchain/player?type=2&amp;id=475479888&amp;auto=1&amp;height=66&#x27;</span>);</span><br><span class="language-javascript">        myiframe.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">&#x27;frameborder:no; border:0; marginwidth:0; marginheight:0; width:400; height:86&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">//把div添加到body作为他的子元素</span></span><br><span class="language-javascript">            mycenter.<span class="hljs-title function_">appendChild</span>(myiframe);</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(mycenter);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>提交数据到后台</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>流程展示<img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221120092448875.png"></p></li></ul><ol><li>form标签包裹要提交的数据的标签<ul><li>提交方式：<code>method=&quot;get&quot;</code></li><li>提交地址：<code>action=&quot;/xxx/xxx/xxx&quot;</code></li><li>在form标签里面必须有一个submit标签</li></ul></li><li>在form里面的一些标签：<kbd>input/select/textarea</kbd></li></ol><ul><li><p>一定要写**<code>name</code>**属性<input type="text" name="uu"/></p></li><li><p>后台处理数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        user = request.form.get(<span class="hljs-string">&quot;username&quot;</span>)<br>        pwd = request.form.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        gender = request.form.get(<span class="hljs-string">&quot;gender&quot;</span>)<br>        hobbies = request.form.getlist(<span class="hljs-string">&quot;hobby&quot;</span>)<br>        city = request.form.get(<span class="hljs-string">&quot;city&quot;</span>)<br>        characters = request.form.getlist(<span class="hljs-string">&quot;characters&quot;</span>)<br>        notes = request.form.get(<span class="hljs-string">&quot;notes&quot;</span>)<br>        <span class="hljs-built_in">print</span>(user, pwd, gender, hobbies, city, characters, notes)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> jsonify<br>&gt;... ...<br>&gt;@app.route(<span class="hljs-string">&#x27;/json_return&#x27;</span>)<br>&gt;<span class="hljs-keyword">def</span> <span class="hljs-title function_">json_return</span>():<br>   j = &#123;<br>       <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;北京图灵学院&quot;</span>,<br>       <span class="hljs-string">&quot;teacher&quot;</span>:<span class="hljs-string">&quot;刘大拿&quot;</span>,<br>       <span class="hljs-string">&quot;Blog_address&quot;</span>:<span class="hljs-string">&quot;http://www.mycode.wang&quot;</span><br>   &#125;<br>   <span class="hljs-keyword">return</span>  jsonify(j)<br></code></pre></td></tr></table></figure><p><span alt="rainbow">接受post请求返回json字符串</span></p></blockquote><h2 id="3-CSS样式"><a href="#3-CSS样式" class="headerlink" title="3.CSS样式"></a>3.CSS样式</h2><blockquote><p>css是美化html内容的层叠样式表</p></blockquote><h3 id="3-1快速了解"><a href="#3-1快速了解" class="headerlink" title="3.1快速了解"></a>3.1快速了解</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;```&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:100px;width:200px&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:blue;&quot;</span>&gt;</span> CSS<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-2CSS引用方式"><a href="#3-2CSS引用方式" class="headerlink" title="3.2CSS引用方式"></a>3.2CSS引用方式</h3><h4 id="1-行内式"><a href="#1-行内式" class="headerlink" title="1.行内式"></a>1.行内式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:black;&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;padding:30px;&quot;</span>&gt;</span>Hostinger Tutorials<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;&quot;</span>&gt;</span>Something usefull here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>行内样式表(内联样式表)是在元素标签内部的style属性中设定CSS样式。<strong>适合于修改简单样式</strong>.</li><li>style实就是标签的属性</li><li>在双引号中间,写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li></ul><h4 id="2-内嵌式"><a href="#2-内嵌式" class="headerlink" title="2.内嵌式"></a>2.内嵌式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:white; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> &#123;<span class="hljs-attribute">display</span>: block; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#button-go</span>, <span class="hljs-selector-id">#button-back</span> &#123;<span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> black;&#125;</span><br><span class="language-css"></span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>标签理论上可以放在HTML文档的任何地方,但一般会放在文档的标签中</p></li><li><p>通过此种方式,可以防便控制当前整个页面中的元素样式设置</p></li><li><p>代码结构清晰,但是并没有实现结构与样式完全分离</p></li></ul><h4 id="3-外联式"><a href="#3-外联式" class="headerlink" title="3.外联式"></a>3.外联式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3CSS选择器"><a href="#3-3CSS选择器" class="headerlink" title="3.3CSS选择器"></a>3.3CSS选择器</h3><blockquote><p>作用： <u>选择标签设置格式属性</u></p></blockquote><p><strong>选择器分为基础选择器和复合选择器两个大类,我们这里先讲解一下基础选择器。</strong></p><ul><li>基础选择器是由<u>单个选择器组成的</u></li><li>基础选择器包括:<u>标签选择器、类选择器、id 选择器和通配符选择器</u></li></ul><h4 id="3-3-1标签选择器"><a href="#3-3-1标签选择器" class="headerlink" title="3.3.1标签选择器"></a>3.3.1标签选择器</h4><p>标签选择器(元素选择器)是指用<u>HTML标签名称</u>作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">标签名 &#123;<br>属性1: 属性值1;<br>属性2: 属性值2;<br>属性3 属性值3; ···<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-2类选择器"><a href="#3-3-2类选择器" class="headerlink" title="3.3.2类选择器"></a>3.3.2类选择器</h4><p>如果想要差异化选择不同的标签,单独选一个或者某几个标签 ,可以使用类选择器；<u><strong>样式点定义，结构类调用，一个或多个，开发最常用</strong></u></p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">.类名 &#123;<br>属性1：属性值1；<br>···<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多类名语法：</p><p><code>&lt;div class=&quot;name1 name2 ···&quot;&gt;&lt;/div&gt;</code></p><ul><li>在标签class属性中写多个类名,可以同时被调用</li><li><u>多个类名中间必须用空格分开</u></li><li><u>将相同样式放在一个公共样式里，便于调用，提高代码复用率</u></li></ul><h4 id="3-3-3ID选择器"><a href="#3-3-3ID选择器" class="headerlink" title="3.3.3ID选择器"></a>3.3.3ID选择器</h4><ul><li>id选择器可以为标有特定id的HTML元素指定特定的样式。</li><li>HTML元素以<u>id属性来设置id选择器</u>, CSS中id选择器<u>以“#” 来定义</u>。</li><li>id标签格式只能被调用一次，唯一性（常与js使用）</li></ul><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">#ID名 &#123;<br>属性1：属性值1；<br>···<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-3-4通配符选择器"><a href="#3-3-4通配符选择器" class="headerlink" title="3.3.4通配符选择器"></a>3.3.4通配符选择器</h4><ul><li>在CSS中,通配符选择器<code>使用*定义</code>,它表示选取页面中所有元素(标签)。</li><li>标签不需要主动调用，自动会给所有元素设置该格式</li><li>特殊情况才使用,后面讲解使用场景(以下是清除所有的元素标签的内外边距)</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br><span class="hljs-attribute">margin</span>：<span class="hljs-number">0</span>；<br><span class="hljs-attribute">padding</span>：<span class="hljs-number">0</span>；<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-5属性选择器"><a href="#3-3-5属性选择器" class="headerlink" title="3.3.5属性选择器"></a>3.3.5属性选择器</h4><ul><li>在CSS中给类选择器**<code>添加属性修饰</code>**以设置该属性的标签的样式</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">.类名<span class="hljs-selector-attr">[name=<span class="hljs-string">&quot;user&quot;</span>]</span> &#123;<br><span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-6子代选择器"><a href="#3-3-6子代选择器" class="headerlink" title="3.3.6子代选择器"></a>3.3.6子代选择器</h4><ul><li>在CSS中给类选择器**<code>添加子类</code>**单独设置子类的样式</li></ul><p>语法：</p><p><strong>所有子代</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">.类名 子类名/子标签 &#123;<br><span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>直接子代</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">.类名 &gt; 子类名/子标签 &#123;<br><span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-7多个和覆盖"><a href="#3-3-7多个和覆盖" class="headerlink" title="3.3.7多个和覆盖"></a>3.3.7多个和覆盖</h4><blockquote><p>不同样式则共同起作用，相同样式则后者覆盖前者，前后由CSS写的顺序决定。</p><p>重复的样式要想不被后者覆盖需要在样式后面加<code>!important</code>关键词</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-class">.c1</span>&#123;<br>    <span class="hljs-attribute">color</span>: red <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br><span class="hljs-selector-class">.c2</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>此时c2的颜色不会覆盖c1的颜色。</p></blockquote><h4 id="3-3-8常用选择器"><a href="#3-3-8常用选择器" class="headerlink" title="3.3.8常用选择器"></a>3.3.8常用选择器</h4><blockquote><p>类选择器，标签选择器，后代选择器</p></blockquote><h3 id="3-4样式"><a href="#3-4样式" class="headerlink" title="3.4样式"></a>3.4样式</h3><h4 id="1-高度和宽度"><a href="#1-高度和宽度" class="headerlink" title="1.高度和宽度"></a>1.高度和宽度</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.c1</span>&#123;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>/<span class="hljs-number">50%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li>宽度支持百分比，因为一个网页总宽度是固定，但高度不固定。</li><li>行内标签：默认无效</li><li>块级标签：默认有效（霸道，右侧区域空白，不给占用）</li></ul></blockquote><h4 id="2-块级和行内标签"><a href="#2-块级和行内标签" class="headerlink" title="2.块级和行内标签"></a>2.块级和行内标签</h4><p><u>让标签既具有行内标签的特点也具有块级标签的特点</u></p><p><strong>1.CSS样式：</strong>标签-&gt;<code>display:inline-block;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.number</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.块级和行内转换：</strong></p><p>块级转行内标签-&gt;<code>display:inline;</code></p><p>行内转块级标签-&gt;<code>display:block;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.number</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline;<br>&#125;<br><span class="hljs-selector-class">.pwd</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：<strong>块级+块级&amp;行内用的多</strong></p></blockquote><h4 id="3-字体设置"><a href="#3-字体设置" class="headerlink" title="3.字体设置"></a>3.字体设置</h4><ul><li><p> 颜色</p></li><li><p>大小</p></li><li><p>加粗</p></li><li><p>字体格式</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.number</span>&#123;<br>    <span class="hljs-attribute">color</span>: #rgb/red;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>    <span class="hljs-attribute">font-family</span>: Microsoft Yahei;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-文字对齐方式"><a href="#4-文字对齐方式" class="headerlink" title="4.文字对齐方式"></a>4.文字对齐方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.slogan</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">59px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">color</span>: cornflowerblue;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;<br>    <span class="hljs-attribute">text-align</span>: center;<span class="hljs-comment">/*水平居中*/</span><br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">59px</span>;<span class="hljs-comment">/*垂直居中*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-浮动"><a href="#5-浮动" class="headerlink" title="5.浮动"></a>5.浮动</h4><blockquote><p>设置标签在一行中的不同位置</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">span</span>&gt;上一页&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>&lt;<span class="hljs-selector-tag">span</span> style=&quot;<span class="hljs-attribute">float</span>: right;&quot;&gt;下一页&lt;/<span class="hljs-selector-tag">span</span>&gt;<br></code></pre></td></tr></table></figure><blockquote><p>块级标签设置<code>float</code>属性后宽度高度可变</p><p>浮动的标签脱离了文档流（飘起来了），需要用<code>style=&quot;clear:both;&quot;</code>恢复正常</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">background-color</span>: aquamarine<span class="hljs-string">&quot;&gt;</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">        &lt;button class=&quot;</span>b<span class="hljs-string">&quot; style=&quot;</span>float: left;&quot;&gt;上一页&lt;/<span class="hljs-selector-tag">button</span>&gt;<br>        &lt;<span class="hljs-selector-tag">button</span> class=&quot;<span class="hljs-selector-tag">b</span>&quot; style=&quot;<span class="hljs-attribute">float</span>: right;&quot;&gt;下一页&lt;/<span class="hljs-selector-tag">button</span>&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">clear</span>: both<span class="hljs-string">&quot;&gt;&lt;/div&gt;/*如果没有这句父div将看不到背景颜色*/</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-内边距"><a href="#6-内边距" class="headerlink" title="6.内边距"></a>6.内边距</h4><blockquote><p>标签内部设置指定像素的距离</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.note</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<span class="hljs-comment">/*设置全部方向内边距为20px*/</span><br>  <span class="hljs-comment">/*padding: 20px 10px 5px 10px;分别设置上右下左顺时针方向的内边距*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-外边距"><a href="#7-外边距" class="headerlink" title="7.外边距"></a>7.外边距</h4><blockquote><p>设置本标签与别的标签之间的距离(会增加原来的高度)</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.note</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<span class="hljs-comment">/*设置全部方向外边距为20px*/</span><br>  <span class="hljs-comment">/*margin: 20px 10px 5px 10px;分别设置上右下左顺时针方向的外边距*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-hover（伪类）"><a href="#8-hover（伪类）" class="headerlink" title="8.hover（伪类）"></a>8.hover（伪类）</h4><blockquote><p><code>hover</code>不但可以在<strong>鼠标悬浮在该标签上</strong>时<strong>设置自己的样式</strong>还可以<strong>设置它的子标签的样式</strong>。</p></blockquote><p>设置自己样式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.slider</span> <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.container</span> <span class="hljs-selector-tag">img</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">16px</span> <span class="hljs-number">32px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">48</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">0.15</span>); <span class="hljs-comment">/* 鼠标悬浮时盒子出现的阴影 */</span><br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">10px</span>); <span class="hljs-comment">/* 鼠标悬浮时盒子上移10px */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>设置子类样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.app</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.qcode</span> &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.app</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.title</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.app</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.qcode</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-after（伪类）"><a href="#9-after（伪类）" class="headerlink" title="9.after（伪类）"></a>9.after（伪类）</h4><blockquote><p>在标签内容<strong>尾部追加内容</strong>。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"> <span class="hljs-selector-class">.title</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;nishizhu&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以<strong>清除浮动样式</strong>。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">       <span class="hljs-selector-class">.clearfix</span> <span class="hljs-selector-class">.item</span> &#123;<br>           <span class="hljs-attribute">float</span>: left;<br>       &#125;<br>       <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>           <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>           <span class="hljs-attribute">display</span>: block;<br>           <span class="hljs-attribute">clear</span>: both;<br>       &#125;<br>   &lt;<span class="hljs-selector-tag">div</span> class=&quot;clearfix&quot;&gt;<br>       &lt;<span class="hljs-selector-tag">div</span> class=&quot;item&quot;&gt;<span class="hljs-number">1</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>       &lt;<span class="hljs-selector-tag">div</span> class=&quot;item&quot;&gt;<span class="hljs-number">2</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>       &lt;<span class="hljs-selector-tag">div</span> class=&quot;item&quot;&gt;<span class="hljs-number">3</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="10-position"><a href="#10-position" class="headerlink" title="10.position"></a>10.position</h4><ul><li>fixed</li><li>relative</li><li>absolute</li></ul><ol><li><p>fixed：固定在窗口的某个位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.back</span> &#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">70px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-comment">/*border: 1px solid red;*/</span><br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>案例：对话框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*幕布*/</span><br><span class="hljs-selector-class">.mask</span> &#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.7</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>    <span class="hljs-comment">/*display: none;*/</span><br>&#125;<br><span class="hljs-selector-class">.dialog</span> &#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">background-color</span>: darkseagreen;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000</span>;<br>    <span class="hljs-comment">/*display: none;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>relative和absolute:设置相对和绝对位置，一般设置<strong>父类为relative</strong>，<strong>子类为absolute</strong>，对子类进行布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span> &#123;<br><span class="hljs-attribute">position</span>: relative;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>&#125;<br><span class="hljs-selector-class">.son</span> &#123;<br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*布局在父类的右上方*/</span><br><span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>案例：小米商城下载app</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>下载app<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;qcode&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/imgs/公众号.jpg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;clear: both&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.app</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.qcode</span> &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">float</span>: bottom;<br>&#125;<br><br><span class="hljs-selector-class">.app</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.qcode</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-border（边框）"><a href="#11-border（边框）" class="headerlink" title="11.border（边框）"></a>11.border（边框）</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.bor</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid transparent;<br>    <span class="hljs-attribute">background-color</span>: gold;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><span class="hljs-selector-class">.bor</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12-背景色"><a href="#12-背景色" class="headerlink" title="12.背景色"></a>12.背景色</h4><p>设置标签背景色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.c1</span> &#123;<br><span class="hljs-attribute">background-color</span>: red/<span class="hljs-number">#fff</span>/<span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-案例：小米商城"><a href="#4-案例：小米商城" class="headerlink" title="4.案例：小米商城"></a>4.案例：小米商城</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>小米商城<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/home.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>小米官网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>小米商城<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>MIUI<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>IOT<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>云服务<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>天星数科<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>有品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>小爱开放平台<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>企业团购<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>资质证照<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>协议规则<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>下载app<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Select Location<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;account&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>消息通知<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">em</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont-cart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>                购物车<br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cart-mini-num J_cartNum&quot;</span>&gt;</span>(0)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;clear: both&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-comment">/*height: 40px;*/</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#b0b0b0</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#333</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1226px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#b0b0b0</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.menu</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> <span class="hljs-selector-class">.account</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>body标签，默认有一个边距，造成页面四边都有白色间隙，如何去除呢？</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br><span class="hljs-attribute">margin</span>：<span class="hljs-number">0</span>；<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>内容垂直居中</p><ul><li><p>文本居中</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">.container &#123;<br>line-height: <span class="hljs-number">100</span>px;<br>text-align：center;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>其他内容居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">22px</span>;<span class="hljs-comment">/*设置内容的外边距（内容不能是行内标签，行内标签无法设置宽高和边距，可以转为inline-block）*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>内容水平居中</p><ul><li><p>文本居中，文本会在这个区域中居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 200px; text-align: center; line-height:10px&quot;</span>&gt;</span>文本居中<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>区域居中，自己要有宽度+<code>margin-left:auto;margin-right:auto;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">980px</span>;<br><span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>父亲没有高度或宽度，会被孩子撑起来。</p></li><li><p>如果存在浮动，一定记得加入。</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221122213543681.png" alt="image-20221122213543681"></p></li><li><p>如果想要用别人的样式，用浏览器开发者工具分析别人样式。</p></li><li><p>a标签默认有下划线，用<code>style=&quot;text-decoration:none;&quot;</code>去除</p></li><li><p>鼠标放上去改变标签样式用<strong>hover</strong>来设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.c1</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br><span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>设置透明度<strong>opacity</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.c1</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.7</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-Bootstrap"><a href="#4-Bootstrap" class="headerlink" title="4.Bootstrap"></a>4.Bootstrap</h2><h3 id="1-下载引用"><a href="#1-下载引用" class="headerlink" title="1.下载引用"></a>1.下载引用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">    &#123;#    开发版未压缩#&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-5.2.3/css/bootstrap.css&quot;</span>&gt;</span><br>    &#123;#    生产版已压缩#&#125;<br>&#123;#    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-5.2.3/css/bootstrap.min.css&quot;</span>&gt;</span>#&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-5.2.3/js/bootstrap.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-导航"><a href="#2-导航" class="headerlink" title="2.导航"></a>2.导航</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- Nav pills --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav nav-pills&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link active&quot;</span> <span class="hljs-attr">data-bs-toggle</span>=<span class="hljs-string">&quot;pill&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link&quot;</span> <span class="hljs-attr">data-bs-toggle</span>=<span class="hljs-string">&quot;pill&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#about&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link&quot;</span> <span class="hljs-attr">data-bs-toggle</span>=<span class="hljs-string">&quot;pill&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#links&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Tab panes --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-pane active container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-pane container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;about&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab-pane container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;links&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-栅格"><a href="#3-栅格" class="headerlink" title="3.栅格"></a>3.栅格</h3><ul><li><p>把一行划分为12格</p></li><li><p>分类</p><ol><li><p>响应式：根据页面宽度不同动态变化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.col-sm-</span> <span class="hljs-number">1170px</span> 常用<br><span class="hljs-selector-class">.col-md-</span> <span class="hljs-number">970px</span><br><span class="hljs-selector-class">.col-lg-</span> <span class="hljs-number">750px</span><br></code></pre></td></tr></table></figure></li><li><p>非响应式：不随页面大小变化，固定水平排列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">.col-xs-<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 40px;background: black&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tijiao&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 40px;background: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>列偏移</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 40px;background: gold&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>列偏移两个栅格col<br></code></pre></td></tr></table></figure></li></ol></li></ul><h3 id="4-container"><a href="#4-container" class="headerlink" title="4.container"></a>4.container</h3><ul><li>```html<pre><code class="hljs">&lt;div class=&quot;tab-pane active container&quot; id=&quot;home&quot;&gt;居中    &lt;div class=&quot;container row&quot;&gt;        &lt;div class=&quot;col-sm-9&quot; style=&quot;background: red; height: 700px&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;col-sm-3&quot; style=&quot;background: green;height: 700px&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><br>```html<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;tab-pane active container&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container-fluid row&quot;</span>&gt;<br>            &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-sm-9&quot;</span> style=<span class="hljs-string">&quot;background: red; height: 700px&quot;</span>&gt;<br><br>            &lt;/<span class="hljs-keyword">div</span>&gt;<br>            &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-sm-3&quot;</span> style=<span class="hljs-string">&quot;background: green;height: 700px&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-面板"><a href="#5-面板" class="headerlink" title="5.面板"></a>5.面板</h3><p>默认不带标题和带标题的面板</p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221125221650667.png" alt="image-20221125221650667" style="zoom:33%;" /><p>默认示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">不带标题<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span>Panel heading without title<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>    Panel content<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>带标题<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-title&quot;</span>&gt;</span>Panel title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>    Panel content<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不同风格的面板</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221125221417847.png" alt="image-20221125221417847" style="zoom: 33%;" /><p>风格设置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-primary&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-success&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-warning&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-danger&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>面板示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-success&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #d6e9c6&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-title&quot;</span>&gt;</span>Panel title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>        Panel content<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="案例：登录"><a href="#案例：登录" class="headerlink" title="案例：登录"></a>案例：登录</h4><p><strong>要点：</strong></p><ul><li><p>宽度+居中（区域）</p></li><li><p>内边距</p></li><li><p>表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  ~ Copyright (c) 2022. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><br><span class="hljs-comment">  ~ Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.</span><br><span class="hljs-comment">  ~ Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.</span><br><span class="hljs-comment">  ~ Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.</span><br><span class="hljs-comment">  ~ Vestibulum commodo. Ut rhoncus gravida arcu.</span><br><span class="hljs-comment">  --&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-3.4.1/css/bootstrap.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-3.4.1/js/bootstrap.js&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/login.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-fluid&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3 text-center&quot;</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名或手机号<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;basic-addon1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;basic-addon2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>图片验证码<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;verify code&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Amount (to the nearest dollar)&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control btn btn-primary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-url&quot;</span> <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;basic-addon3&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (c) 2022. Lorem ipsum dolor sit amet, consectetur adipiscing elit. </span><br><span class="hljs-comment"> * Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan. </span><br><span class="hljs-comment"> * Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna. </span><br><span class="hljs-comment"> * Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus. </span><br><span class="hljs-comment"> * Vestibulum commodo. Ut rhoncus gravida arcu. </span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-class">.container-fluid</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">#cdcee7</span>, lightcyan);<br>&#125;<br><br><span class="hljs-selector-class">.login</span> &#123;<br>    <span class="hljs-comment">/*float: left;*/</span><br>    <span class="hljs-comment">/*display: inline-block;*/</span><br>    <span class="hljs-comment">/*height: 200px;*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">20px</span> <span class="hljs-number">#abc</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">80px</span> auto;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid transparent;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-comment">/*text-align: center;*/</span><br>&#125;<br><br><span class="hljs-selector-class">.login</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-comment">/*border: 1px solid;*/</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">#b49fcc</span>, <span class="hljs-number">#b0b0f3</span>);<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br><br><span class="hljs-selector-class">.login</span> <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-comment">/*display: inline-block;*/</span><br>    <span class="hljs-comment">/*height: 20px;*/</span><br>    <span class="hljs-comment">/*width: 200px;*/</span><br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">2px</span> auto;<br>    <span class="hljs-comment">/*position: absolute;*/</span><br>    <span class="hljs-comment">/*right: 50%;*/</span><br>&#125;<br><br><span class="hljs-selector-class">.login</span> <span class="hljs-selector-class">.input-group</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-表单"><a href="#6-表单" class="headerlink" title="6.表单"></a>6.表单</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-selector-tag">input</span>-group&quot;&gt;<br>            &lt;<span class="hljs-selector-tag">p</span>&gt;用户名或手机号&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>            &lt;<span class="hljs-selector-tag">input</span> type=&quot;text&quot; class=&quot;<span class="hljs-selector-tag">form</span>-control&quot; placeholder=&quot;Username&quot; aria-describedby=&quot;basic-addon1&quot;&gt;<br>        &lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="7-表格"><a href="#7-表格" class="headerlink" title="7.表格"></a>7.表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tablelist text-center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-bordered&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>First Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Last Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Mark<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Otto<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@mdo<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jacob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Thornton<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@fat<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Larry<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>the Bird<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@twitter<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="案例：后台管理"><a href="#案例：后台管理" class="headerlink" title="案例：后台管理"></a>案例：后台管理</h4><p><strong>要求：</strong></p><ul><li><p>导航</p></li><li><p>新建，按钮</p></li><li><p>表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-3.4.1/css/bootstrap.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-3.4.1/js/bootstrap.js&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/adminsystem.css&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-toggle collapsed&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;collapse&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>医学文献管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collapse navbar-collapse&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-folder-open&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>文档目录<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-user&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-cloud&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 数据可视化<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-form navbar-left&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.navbar-collapse --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!-- /.container-fluid --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-pencil&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            录入文献<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;</span>上传人<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;submit-person&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;</span>重要指数<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span></span><br><span class="hljs-tag">                           <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;importance-index&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;help-block&quot;</span>&gt;</span>重要指数区间为（0.0, 1.0）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span>File input<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exampleInputFile&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;help-block&quot;</span>&gt;</span>请选择您要导入的医学文献！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btnlist&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 20px&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span>&gt;</span>新建<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span>&gt;</span>导入<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-title&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-th-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 文献速览<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>            注意：您可以对下面的文献进行人性化管理。<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tablelist text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-bordered&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>#<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>First Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Last Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Action<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Mark<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Otto<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@mdo<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jacob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Thornton<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@fat<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Larry<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>the Bird<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>@twitter<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;disabled&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Previous&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>«<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>1 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Next&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>»<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/*background: linear-gradient(#b4d5b4, #d2c1c1);*/</span><br>&#125;<br><br><span class="hljs-selector-class">.navbar</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-图标"><a href="#8-图标" class="headerlink" title="8.图标"></a>8.图标</h3><p>图标库：</p><ol><li>Bootstrap自带的图标库（图标较少）</li><li>Font Awesome（图标较多）</li></ol><p>引入方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs heml">外链式<br>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;<br>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.css&quot;&gt;<br>下载到本地<br>&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/plugins/fontawesome-free-6.2.1-web/css/fontawesome.css&quot;&gt;<br></code></pre></td></tr></table></figure><p>设置样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa-solid fa-magnifying-glass&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-动态式响应（屏幕自适应）"><a href="#9-动态式响应（屏幕自适应）" class="headerlink" title="9.动态式响应（屏幕自适应）"></a>9.动态式响应（屏幕自适应）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">head标签中设置<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-JavaScript"><a href="#5-JavaScript" class="headerlink" title="5.JavaScript"></a>5.JavaScript</h2><p>==for循环格式和c语言一致，object HTMLTableCellElement为DOM对象==</p><p>简介：</p><blockquote><ul><li>JavaScript是一门编程语言，浏览器是该语言的解释器。</li><li>DOM和BOM<ol><li>相当于编程语言内置的模块。</li><li>例如：python中的re、random、time、json模块等。</li></ol></li><li>Jquery<ol><li>相当于编程语言的第三方模块</li><li>例如：request、OpenCV、openpyxl</li></ol></li></ul></blockquote><p>意义：</p><blockquote><p>让程序实现一些动态效果</p></blockquote><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.head</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid rebeccapurple;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.head</span> <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(rosybrown, lightblue);</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;head&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunc()&quot;</span>&gt;</span>退出<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;是否退出？&quot;</span>)<span class="hljs-comment">//警告弹窗</span></span><br><span class="language-javascript">            <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;是否退出？&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-代码位置"><a href="#1-代码位置" class="headerlink" title="1.代码位置"></a>1.代码位置</h3><p>放在<code>head</code>标签里或<code>&lt;/body&gt;</code>前</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;是否退出？&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;是否退出？&quot;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-存在形式"><a href="#2-存在形式" class="headerlink" title="2.存在形式"></a>2.存在形式</h3><h4 id="1-内嵌式"><a href="#1-内嵌式" class="headerlink" title="1.内嵌式"></a>1.内嵌式</h4><p>放在html里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;是否退出？&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;是否退出？&quot;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-外联式"><a href="#2-外联式" class="headerlink" title="2.外联式"></a>2.外联式</h4><p>html里引用，Js文件独立放置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/adminsystem.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/adminsystem.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h3><h4 id="1-html"><a href="#1-html" class="headerlink" title="1.html"></a>1.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--注释内容--&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-css"><a href="#2-css" class="headerlink" title="2.css"></a>2.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*注释内容*/</span><br></code></pre></td></tr></table></figure><h4 id="3-js"><a href="#3-js" class="headerlink" title="3.js"></a>3.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//单行注释</span><br><span class="hljs-comment">/*注释内容*/</span>多行注释<br></code></pre></td></tr></table></figure><h3 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>变量<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Alleyf&quot;</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-字符串类型"><a href="#5-字符串类型" class="headerlink" title="5.字符串类型"></a>5.字符串类型</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//声明</span><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Alleyf&quot;</span>;<br><span class="hljs-keyword">var</span> name = <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Alleyf&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="2-常见功能"><a href="#2-常见功能" class="headerlink" title="2.常见功能"></a>2.常见功能</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;alleyf&quot;</span>;<br><span class="hljs-keyword">var</span> v1 = name.<span class="hljs-property">length</span>;<span class="hljs-comment">//取长度</span><br><span class="hljs-keyword">var</span> v2 = name[<span class="hljs-number">0</span>];<span class="hljs-comment">//索引（与name.charAt(0)等价）</span><br><span class="hljs-keyword">var</span> v3 = name.<span class="hljs-title function_">trim</span>();<span class="hljs-comment">//去除字符创空白并返回</span><br><span class="hljs-keyword">var</span> v4 = name.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//取子串相当于切片（前取后不取）</span><br></code></pre></td></tr></table></figure><h4 id="案例：跑马灯"><a href="#案例：跑马灯" class="headerlink" title="案例：跑马灯"></a>案例：跑马灯</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>变量<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.head</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(rebeccapurple, blanchedalmond);</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;head&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;slogin&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;color: red&quot;</span>&gt;</span>欢迎使用拂安医学文献管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> tag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;slogin&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> dataString = tag.<span class="hljs-property">innerText</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataString);</span><br><span class="language-javascript">        <span class="hljs-comment">// 动态显示-》循环拿文本中第一个字符放在字符串的最后面</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> firstChar = dataString[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> otherString = dataString.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>, dataString.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> newText = otherString + firstChar;</span><br><span class="language-javascript">        <span class="hljs-comment">// 在html标签中更新内容</span></span><br><span class="language-javascript">        tag.<span class="hljs-property">innerText</span> = newText;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 定时每秒执行一次该函数</span></span><br><span class="language-javascript">    <span class="hljs-built_in">setInterval</span>(show, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-数组"><a href="#6-数组" class="headerlink" title="6.数组"></a>6.数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义</span><br><span class="hljs-keyword">var</span> v1 = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>];<br><span class="hljs-keyword">var</span> v2 = <span class="hljs-title class_">Array</span>([<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>]);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//操作</span><br><span class="hljs-keyword">var</span> v1 = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>];<br>v1[<span class="hljs-number">1</span>]<br>v1[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Alleyf&quot;</span>;<br>v1.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;chuiyugin&quot;</span>);<span class="hljs-comment">//尾部追加[11,22,33,44,&quot;chuiyugin&quot;]</span><br>v1.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&quot;联通&quot;</span>);<span class="hljs-comment">//前部追加[&quot;联通&quot;,11,22,33,44]</span><br>v1.<span class="hljs-title function_">splice</span>(索引，<span class="hljs-number">0</span>，元素);<br>v1.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;中国&quot;</span>); <span class="hljs-comment">//索引插入[11,&quot;中国&quot;,22,33,44]</span><br>v1.<span class="hljs-title function_">pop</span>()  <span class="hljs-comment">//尾部删除</span><br>v1.<span class="hljs-title function_">shift</span>()  <span class="hljs-comment">//头部删除</span><br>v1.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<span class="hljs-comment">//索引为2的元素删除[11,22,44]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> v1 = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>];<br><span class="hljs-comment">//循环遍历数组元素</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> idx <span class="hljs-keyword">in</span> v1)&#123;<br>data=v1[idx];<span class="hljs-comment">//获取到的是数组的索引</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<span class="hljs-comment">//循环输出v1数组中的元素</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i; i&lt;v1.<span class="hljs-property">length</span>;i++)<br>&#123;<br>data=v1[i];<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>js也可以使用<strong>break</strong>和<strong>continue</strong>控制循环，用法和c语言一样。</p></blockquote><p>案例：动态数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    &lt;li&gt;北京&lt;/li&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 发送网络请求</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> cities = [<span class="hljs-string">&quot;北京&quot;</span>, <span class="hljs-string">&quot;上海&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;武汉&quot;</span>]</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> cityid <span class="hljs-keyword">in</span> cities) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> citytext = cities[cityid];</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建li标签</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> tag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;li&quot;</span>);</span><br><span class="language-javascript">        tag.<span class="hljs-property">innerText</span> = citytext;</span><br><span class="language-javascript">        <span class="hljs-comment">// 添加到id=city标签里-DOM</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> city = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;city&quot;</span>);</span><br><span class="language-javascript">        city.<span class="hljs-title function_">appendChild</span>(tag);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-对象（字典）"><a href="#7-对象（字典）" class="headerlink" title="7.对象（字典）"></a>7.对象（字典）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">info = &#123;<br><span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Alleyf&quot;</span>，<br><span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-comment">//键可以不加双引号-&gt;实际上加不加键都是字符串类型</span><br>info = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Alleyf&quot;</span>，<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//操作</span><br><span class="hljs-comment">//获取对象成员</span><br>info.<span class="hljs-property">age</span><br>info.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;chuiyugin&quot;</span><br><br>info[<span class="hljs-string">&quot;age&quot;</span>]<br>info[<span class="hljs-string">&quot;name&quot;</span>]=<span class="hljs-string">&quot;chuiyugin&quot;</span><br><span class="hljs-comment">//删除</span><br><span class="hljs-keyword">delete</span> info[<span class="hljs-string">&quot;age&quot;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//循环</span><br>info = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Alleyf&quot;</span>，<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> info)<br>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info[key]); <span class="hljs-comment">//获取到的是对象(字典)的键(key)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>案例：动态表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年级<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> info = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Alleyf&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">grade</span>: <span class="hljs-number">3</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> bodytr = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;tr&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> info) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> bodytd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;td&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// bodytd.innerText = info[key];</span></span><br><span class="language-javascript">        bodytd.<span class="hljs-property">innerText</span> = info[key];</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info.<span class="hljs-property">key</span>, bodytd);</span><br><span class="language-javascript">        bodytr.<span class="hljs-title function_">appendChild</span>(bodytd);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> by = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;body&quot;</span>);</span><br><span class="language-javascript">    by.<span class="hljs-title function_">appendChild</span>(bodytr);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-条件语句"><a href="#8-条件语句" class="headerlink" title="8.条件语句"></a>8.条件语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(条件) &#123;<br><br>&#125;<span class="hljs-keyword">else</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>() &#123;<br><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>() &#123;<br><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>() &#123;<br><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>...<br>&#125;<br><span class="hljs-title function_">func</span>()<span class="hljs-comment">//执行函数</span><br></code></pre></td></tr></table></figure><h2 id="6-DOM"><a href="#6-DOM" class="headerlink" title="6.DOM"></a>6.DOM</h2><p>DOM,就是一个模块，模块可以对html页面中的标签进行操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//根据ID获取标签</span><br><span class="hljs-keyword">var</span> tag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;id&quot;</span>);<br><br><span class="hljs-comment">//获取标签中的文本</span><br>tag.<span class="hljs-property">innerText</span>;<br><br><span class="hljs-comment">//修改标签中的文本</span><br>tag.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;text&quot;</span>;<br><br><span class="hljs-comment">//创建标签&lt;div&gt;哈哈哈&lt;/div&gt;</span><br><span class="hljs-keyword">var</span> tag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br><br><span class="hljs-comment">//标签写内容</span><br>tag.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;哈哈哈&quot;</span>；<br><br><span class="hljs-comment">//给标签添加子标签</span><br>tag.<span class="hljs-title function_">appendChild</span>(childtag);<br></code></pre></td></tr></table></figure><h3 id="1-事件绑定"><a href="#1-事件绑定" class="headerlink" title="1.事件绑定"></a>1.事件绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>//单击响应<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span>&gt;</span>//双击响应<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa-list-ol&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> newtag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;li&quot;</span>)</span><br><span class="language-javascript">        newtag.<span class="hljs-property">innerText</span> = data;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> tag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;info&quot;</span>);</span><br><span class="language-javascript">        tag.<span class="hljs-title function_">appendChild</span>(newtag);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txtusr&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;添加&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;add()&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa-list-ol&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取用户输入的标签</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> txttag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;txtusr&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取用户输入的值</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> txt = txttag.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">// 判断用户输入是否存在</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (txt) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 清空用户输入</span></span><br><span class="language-javascript">            txttag.<span class="hljs-property">value</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">// 新建标签</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> newtag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;li&quot;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 修改标签内容</span></span><br><span class="language-javascript">            newtag.<span class="hljs-property">innerText</span> = txt;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> tag = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;info&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 添加子标签到父标签</span></span><br><span class="language-javascript">            tag.<span class="hljs-title function_">appendChild</span>(newtag);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;输入不能为空&quot;</span>)</span><br><span class="language-javascript">            </span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：DOM中还有很多操作。</p><blockquote><p>DOM可以实现很多功能，但是比较繁琐。</p><p>页面上的效果：jQuery来实现/vue.js/react.js 。</p></blockquote><h3 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h3><h4 id="1-编码"><a href="#1-编码" class="headerlink" title="1.编码"></a>1.编码</h4><blockquote><p>-ASCII编码，256种对应关系</p><p>-gb2312，gbk，中文和亚洲的一些国家【中文是两个字节】</p><p>-unicode，ucs2、ucs4，包括现在发现的所有文明</p><p>-utf-8编码，压缩的unicode编码【中文是3个字节】</p><p>python默认解释器编码： utf-8</p></blockquote><h4 id="2-字符串格式化"><a href="#2-字符串格式化" class="headerlink" title="2.字符串格式化"></a>2.字符串格式化</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">v1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我是&#123;&#125;，今年&#123;&#125;&quot;</span>.format(<span class="hljs-string">&quot;牛牛&quot;</span>，<span class="hljs-number">23</span>)<br><span class="hljs-attribute">v2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我是%s，今年%d岁&quot;</span> %(<span class="hljs-string">&quot;牛牛&quot;</span>，<span class="hljs-number">18</span>)<br><span class="hljs-attribute">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;牛牛&quot;</span><br><span class="hljs-attribute">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span><br><span class="hljs-attribute">v3</span> <span class="hljs-operator">=</span> f<span class="hljs-string">&quot;我是&#123;name&#125;，今年&#123;age&#125;岁&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h4><p>常见数据类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">int</span>/<span class="hljs-built_in">bool</span>/<span class="hljs-built_in">str</span>/<span class="hljs-built_in">list</span>/<span class="hljs-built_in">tuple</span>/<span class="hljs-built_in">list</span>/<span class="hljs-built_in">dict</span>/<span class="hljs-built_in">set</span>/<span class="hljs-built_in">float</span>/<span class="hljs-literal">None</span><br>转化为<span class="hljs-built_in">bool</span>为<span class="hljs-literal">False</span>：空、<span class="hljs-literal">None</span>、<span class="hljs-number">0</span><br>可变和不可变划分，可变的有：<span class="hljs-built_in">list</span>、<span class="hljs-built_in">set</span>、<span class="hljs-built_in">dict</span><br>可哈希和不可哈希，不可哈希的有：<span class="hljs-built_in">list</span>、<span class="hljs-built_in">set</span>、<span class="hljs-built_in">dict</span><br>字典的键/集合的元素，必须是可哈希的类型（<span class="hljs-built_in">list</span>、<span class="hljs-built_in">set</span>、<span class="hljs-built_in">dict</span>不能做字典的建和集合元素）<br><br>主要数据类型：<br><span class="hljs-built_in">str</span><br>独有功能：split、upper、lower、startswith、strip、join<br>注意：原<span class="hljs-built_in">str</span>本身不变，是生成新的字符串。<br>公共功能：<span class="hljs-built_in">len</span>、索引、切片、<span class="hljs-keyword">for</span>循环、判断是否包含<br><span class="hljs-built_in">list</span><br>独有功能：append、insert、remove、pop···<br>公共功能：<span class="hljs-built_in">len</span>、索引、切片、<span class="hljs-keyword">for</span>循环、判断是否包含<br>注意：<span class="hljs-built_in">list</span>可变，功能很多都是对原数据操作<br><span class="hljs-built_in">dict</span><br>独有功能：get/keys/items/values<br>公共功能：<span class="hljs-built_in">len</span>、索引<span class="hljs-keyword">for</span>循环、、判断是否包含（判断键效率很高）<br><br></code></pre></td></tr></table></figure><h4 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">基本运算符：加减乘除···<br>特殊逻辑运算：<br><span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">and </span><span class="hljs-number">3</span>&gt;<span class="hljs-number">10</span><br><span class="hljs-built_in">v1</span> = <span class="hljs-number">99</span> <span class="hljs-keyword">and </span><span class="hljs-number">88</span><span class="hljs-comment">#88</span><br>v2 = [] <span class="hljs-keyword">or </span><span class="hljs-number">10</span>  <span class="hljs-comment">#10</span><br>v3 = <span class="hljs-string">&#x27;联通&#x27;</span> <span class="hljs-keyword">or </span>[]   <span class="hljs-comment">#&#x27;联通&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="5-推导式（简化生成数据）"><a href="#5-推导式（简化生成数据）" class="headerlink" title="5.推导式（简化生成数据）"></a>5.推导式（简化生成数据）</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span> = []</span><br><span class="hljs-title">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):<br><span class="hljs-class"><span class="hljs-keyword">data</span>.append(<span class="hljs-title">i</span>)</span><br><br><span class="hljs-class"><span class="hljs-keyword">data</span> = [i for in range(10)]</span><br><span class="hljs-class"><span class="hljs-keyword">data</span> = [i for in range(10) if i&lt;5]#[0,1,2,3,4]</span><br></code></pre></td></tr></table></figure><h4 id="6-函数编程"><a href="#6-函数编程" class="headerlink" title="6.函数编程"></a>6.函数编程</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">函数的基础知识：<br>定义<br>参数，概念：位置参数、关键字参数、参数默认值、动态参数*args，**kwargs<br>返回值<br>函数中一旦遇到<span class="hljs-keyword">return</span>就立即返回，后续代码不再执行。<br>函数没有返回值默认返回<span class="hljs-literal">None</span>。<br>函数的进阶：<br>python中是以函数为作用域<br>全局变量和局部变量，规范：全局变量（大写）、局部变量（小写）<br>在局部变量中的可以使用<span class="hljs-keyword">global</span>关键词，<span class="hljs-keyword">global</span>的作用？引用全局的那个变量（不是在局部创建）。<br><br>内置函数（python内部提供的函数）：<br><span class="hljs-built_in">bin</span>/<span class="hljs-built_in">hex</span>/odc/<span class="hljs-built_in">max</span>/<span class="hljs-built_in">min</span>/<span class="hljs-built_in">divmod</span>/<span class="hljs-built_in">sorted</span>(按照unicode码表排序)/<span class="hljs-built_in">open</span>(文件操作)<br><br>文件操作：<br>基本操作：打开、操作、关闭，为了防止忘记关闭文件，可以怎么做？<span class="hljs-keyword">with</span><br>打开文件时有莫事：<br>r/rb,读   【文件或者目录或者文件夹不存在，报错】<br>w/wb,写(清空)【文件不存在，自动新建】<br>a/ab，追加  【文件不存在，自动新建】<br>注意：os.makedirs/os.path.exists,是否存在、不存在新建目录。<br></code></pre></td></tr></table></figure><h4 id="7-模块"><a href="#7-模块" class="headerlink" title="7.模块"></a>7.模块</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gradle">模块的分类：<br>自定义模块:<br>os.path,导入模块时python内部都会去那个目录找<br>自己写py文件时，不要与python内置模块同名。<br><span class="hljs-keyword">import</span>/<span class="hljs-keyword">from</span> xx <span class="hljs-keyword">import</span> xx<br>内置模块：time<span class="hljs-regexp">/datetime/</span>json<span class="hljs-regexp">/re/</span>random/os···<br>第三方模块：requests<span class="hljs-regexp">/openpyx1/</span>python-docx<span class="hljs-regexp">/flask/</span>bs4<br><br>查看当前目录下所有的文件：os.listdir(获取当前目录的文件一级目录)/os.walk（获取当前目录下所有的目录），os.path.splitext()：分离文件名与扩展名<br>关于时间模块：时间戳、datetime格式、字符串，三种时间格式可以相互转化。<br>关于JSON模块：<br>JSON本质是字符串，有一些自己格式的要求，例如：无元组、无单引号。<br>json.dumps（功能是将字典类型转换为json格式的字符串类型）序列化时，只能序列化Python常用数据类型。<br>关于re正则模块：<br>正则：\d  \w<br>贪婪匹配（默认）和非贪婪匹配，不贪婪则设置个数后面加？<br>re.search<span class="hljs-regexp">/re.match/</span>re.<span class="hljs-keyword">findall</span><br><br>第三方模块：<br>安装方式：pip管理工具、源码、wheel包<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221206000610118.png" alt="image-20221206000610118" style="zoom:33%;" /><h4 id="8-面向对象"><a href="#8-面向对象" class="headerlink" title="8.面向对象"></a>8.面向对象</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">目标：不是为了用面向对象编程（推荐使用函数编程，面向对象要看得懂）。<br>面向对象三大特性：封装、继承、多态。<br></code></pre></td></tr></table></figure><h4 id="9-前端开发"><a href="#9-前端开发" class="headerlink" title="9.前端开发"></a>9.前端开发</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css">前端知识点三部分：<br><span class="hljs-selector-tag">HTML</span>，标签具有模式特点。<br>CSS，修改标签的特点。<br>JavaScript，动态。<br><br><span class="hljs-selector-tag">HTML</span>标签<br><span class="hljs-selector-tag">div</span>/<span class="hljs-selector-tag">span</span>/<span class="hljs-selector-tag">a</span>/<span class="hljs-selector-tag">img</span>/<span class="hljs-selector-tag">input</span>/<span class="hljs-selector-tag">form</span>/<span class="hljs-selector-tag">table</span>/<span class="hljs-selector-tag">ul</span>/<span class="hljs-selector-tag">ol</span>```<br>块级和行内标签，例如：<span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span> 默认谁是块级标签？<span class="hljs-selector-tag">div</span><br>注意：css样式，发现行内标签设置高度、宽度、内边距、外边距都是无效。<br><span class="hljs-selector-tag">form</span>表单+<span class="hljs-selector-tag">input</span>/select/<span class="hljs-selector-tag">textarea</span> 数据框<br>        action：提交地址<br>        method：提交方式<br>        <span class="hljs-selector-tag">form</span>标签中有一个submit<br>        内部标签都需要设置name属性<br><br>CSS样式<br>布局样式：<span class="hljs-selector-tag">div</span>+<span class="hljs-attribute">float</span>（脱离文档流，<span class="hljs-attribute">clear</span>：both；clearfix）<br>高度和宽度<br>边距<br>内边距<br>外边距<br>字体、大小、颜色、粗细<br>边框<br>背景颜色（linear-grident可设置渐变色）<br>hover，鼠标放上去就会触发的CSS样式<br></code></pre></td></tr></table></figure><h2 id="7-JQuery"><a href="#7-JQuery" class="headerlink" title="7.JQuery"></a>7.JQuery</h2><p>jquery是一个javascript第三方模块（第三方库）。</p><ul><li>基于Jquery，自己开发一个功能。</li><li>现成的工具依赖JQuery，例如：BootStrap动态效果。</li></ul><h3 id="1-快速上手"><a href="#1-快速上手" class="headerlink" title="1.快速上手"></a>1.快速上手</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/plugins/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 找到标签</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> txt = $(<span class="hljs-string">&quot;#txt&quot;</span>)</span><br><span class="language-javascript">    txt.<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;中国移动&quot;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-寻找标签-直接寻找"><a href="#2-寻找标签-直接寻找" class="headerlink" title="2.寻找标签(直接寻找)"></a>2.寻找标签(直接寻找)</h3><ol><li><p>ID</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txt&quot;</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#txt&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>样式(类)选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.c1&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>标签选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>中国联通<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;h1&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>层级选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.c1.c2 a&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>多选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;u1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.c1,#u1,p&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>属性选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;n1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;n2&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;input[name=&#x27;n1&#x27;]&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-间接寻找"><a href="#3-间接寻找" class="headerlink" title="3.间接寻找"></a>3.间接寻找</h3><ul><li><p>找到上一个兄弟</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">prev</span>()<span class="hljs-comment">//上一个</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>)<br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">next</span>()<span class="hljs-comment">//下一个</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">next</span>()<span class="hljs-comment">//下下一个</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">siblings</span>()<span class="hljs-comment">//所有同级标签（兄弟）</span><br></code></pre></td></tr></table></figure></li><li><p>找父子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>老大<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d2&quot;</span>&gt;</span>老二<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">parent</span>()<span class="hljs-comment">//父亲</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">parent</span>()<span class="hljs-comment">//祖父</span><br>$(<span class="hljs-string">&quot;#c2&quot;</span>).<span class="hljs-title function_">children</span>()<span class="hljs-comment">//所有孩子</span><br>$(<span class="hljs-string">&quot;#c2&quot;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&quot;.d2&quot;</span>)<span class="hljs-comment">//所有的孩子中寻找class=d2的孩子</span><br>$(<span class="hljs-string">&quot;#c2&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;.d2&quot;</span>)<span class="hljs-comment">//去寻找class=d2的所有子孙</span><br>$(<span class="hljs-string">&quot;#c2&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;div&quot;</span>)<span class="hljs-comment">//去寻找div标签的所有子孙</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="案例：菜单的切换"><a href="#案例：菜单的切换" class="headerlink" title="案例：菜单的切换"></a>案例：菜单的切换</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.menu</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.menu</span> <span class="hljs-selector-class">.header</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> dotted <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(gold, lightblue);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> dotted <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.hide</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;clickme(this)&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content hide&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>海淀区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>朝阳区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>大兴区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>昌平区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;clickme(this)&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content hide&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>宝山区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>普陀区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>浦东新区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>青浦区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/plugins/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//方法一</span></span><br><span class="language-javascript">    <span class="hljs-comment">// let i = 0;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// function clickme(self) &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     if (i++ % 2 === 0) &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//         $(self).next().removeClass(&quot;hide&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     &#125; else &#123;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//         $(self).next().addClass(&quot;hide&quot;);</span></span><br><span class="language-javascript">    <span class="hljs-comment">//     &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//方法二</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">clickme</span>(<span class="hljs-params">self</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> hasHide = $(self).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">hasClass</span>(<span class="hljs-string">&quot;hide&quot;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (hasHide) &#123;</span><br><span class="language-javascript">            $(self).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            $(self).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs html">//只展示单个菜单<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.menu</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.menu</span> <span class="hljs-selector-class">.header</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> dotted <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">#a7e3c9</span>, lightblue);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> dotted <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.hide</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;clickme(this)&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content hide&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>海淀区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>朝阳区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>大兴区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>昌平区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">item</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;clickme(this)&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content hide&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>宝山区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>普陀区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>浦东新区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>青浦区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;clickme(this)&quot;</span>&gt;</span>武汉<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content hide&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>洪山区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>江汉区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>武昌区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>青山区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/plugins/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">clickme</span>(<span class="hljs-params">self</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> hasHide = $(self).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">hasClass</span>(<span class="hljs-string">&quot;hide&quot;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (hasHide) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 展示自己</span></span><br><span class="language-javascript">            $(self).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">// 隐藏别人</span></span><br><span class="language-javascript">            $(self).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;.content&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;hide&quot;</span>)</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            $(self).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;hide&quot;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-操作样式"><a href="#4-操作样式" class="headerlink" title="4.操作样式"></a>4.操作样式</h3><ul><li><p>addClass</p></li><li><p>removeClass</p></li><li><p>hasClass</p></li></ul><h3 id="5-值的操作"><a href="#5-值的操作" class="headerlink" title="5.值的操作"></a>5.值的操作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">text</span>() <span class="hljs-comment">//获取内容</span><br>$(<span class="hljs-string">&quot;#c1&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;测试&quot;</span>) <span class="hljs-comment">//设置内容</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;c2&quot;</span>).<span class="hljs-title function_">val</span>()   <span class="hljs-comment">//获取用户输入值</span><br>$(<span class="hljs-string">&quot;c2&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;txt&quot;</span>)   <span class="hljs-comment">//设置用户输入值</span><br></code></pre></td></tr></table></figure><h4 id="案例：输入内容"><a href="#案例：输入内容" class="headerlink" title="案例：输入内容"></a>案例：输入内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;input type=&quot;text&quot; id=&quot;txtUser&quot; placeholder=&quot;用户名&quot;&gt;<br>&lt;input type=&quot;text&quot; id=&quot;txtEmail&quot; placeholder=&quot;邮箱&quot;&gt;<br>&lt;input type=&quot;button&quot; value=&quot;提交&quot; onclick=&quot;getinfo()&quot;&gt;<br>&lt;ul id=&quot;view&quot;&gt;<br><br>&lt;/ul&gt;<br><br><br>&lt;script src=&quot;/static/plugins/jquery-3.6.1.min.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    function getinfo() &#123;<br>        let username = $(&quot;#txtUser&quot;).val();   //设置用户输入值<br>        let email = $(&quot;#txtEmail&quot;).val();<br>        const datastr = username + &#x27;-&#x27; + email;<br>        let lusr = $(&quot;&lt;li&gt;&quot;).text(datastr);<br>        $(&quot;#view&quot;).append(lusr);<br><br>    &#125;<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="6-事件"><a href="#6-事件" class="headerlink" title="6.事件"></a>6.事件</h3><p>绑定事件直接用<code>$(&quot;&quot;)</code>获取到标签直接定义事件即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.item&quot;</span>).<span class="hljs-title function_">children</span>().<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;hello python&quot;</span>)<br>        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>()<br>    &#125;)<br></code></pre></td></tr></table></figure><h4 id="案例：设置内容和删除"><a href="#案例：设置内容和删除" class="headerlink" title="案例：设置内容和删除"></a>案例：设置内容和删除</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/plugins/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> a = $(<span class="hljs-string">&quot;.item&quot;</span>).<span class="hljs-title function_">children</span>()</span><br><span class="language-javascript">    $(a).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;hello python&quot;</span>)</span><br><span class="language-javascript">        $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>()</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当页面框架加载完成之后执行代码（封装在$function之内）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $(<span class="hljs-string">&quot;.item&quot;</span>).<span class="hljs-title function_">children</span>().<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;hello python&quot;</span>);<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="案例：表格操作"><a href="#案例：表格操作" class="headerlink" title="案例：表格操作"></a>案例：表格操作</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;table border=&quot;1&quot;&gt;<br>    &lt;thead&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;ID&lt;/th&gt;<br>        &lt;th&gt;姓名&lt;/th&gt;<br>        &lt;th&gt;操作&lt;/th&gt;<br>    &lt;/tr&gt;<br>    &lt;/thead&gt;<br>    &lt;tbody&gt;<br>    &lt;tr&gt;<br>        &lt;td&gt;1&lt;/td&gt;<br>        &lt;td&gt;Alleyf&lt;/td&gt;<br>        &lt;td&gt;<br>            &lt;input type=&quot;button&quot; value=&quot;删除&quot; class=&quot;delete&quot;&gt;<br>        &lt;/td&gt;<br>    &lt;/tr&gt;<br>    &lt;tr&gt;<br>        &lt;td&gt;1&lt;/td&gt;<br>        &lt;td&gt;Alleyf&lt;/td&gt;<br>        &lt;td&gt;<br>            &lt;input type=&quot;button&quot; value=&quot;删除&quot; class=&quot;delete&quot;&gt;<br>        &lt;/td&gt;<br>    &lt;/tr&gt;<br>    &lt;tr&gt;<br>        &lt;td&gt;1&lt;/td&gt;<br>        &lt;td&gt;Alleyf&lt;/td&gt;<br>        &lt;td&gt;<br>            &lt;input type=&quot;button&quot; value=&quot;删除&quot; class=&quot;delete&quot;&gt;<br>        &lt;/td&gt;<br>    &lt;/tr&gt;<br>    &lt;/tbody&gt;<br>&lt;/table&gt;<br>&lt;script src=&quot;/static/plugins/jquery-3.6.1.min.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    $(function () &#123;<br>        // 找到所有class为delete的标签<br>        $(&quot;.delete&quot;).click(function () &#123;<br>            // 删除当前行<br>            $(this).parent().parent().remove();<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="8-前端整合"><a href="#8-前端整合" class="headerlink" title="8.前端整合"></a>8.前端整合</h2><ul><li>HTML</li><li>CSS</li><li>JavaScript、jQuery</li><li>Bootstrap(动态效果依赖jQuery)</li></ul><h3 id="案例：添加数据页面"><a href="#案例：添加数据页面" class="headerlink" title="案例：添加数据页面"></a>案例：添加数据页面</h3><blockquote><p>人员信息录入功能，需要提供用户信息：</p><p>用户名、年龄、薪资、部门、入职时间（*）</p><p>时间的选择：不能输入；选择：（插件）datetimepicker</p><ul><li>下载插件</li><li>应用插件</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-datetimepicker-master/css/bootstrap-datetimepicker.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-3.4.1/css/bootstrap.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/fontawesome-free-6.2.1-web/css/fontawesome.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 20px&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputEmail3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputEmail3&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputPassword3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputPassword3&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;年龄&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputsalary&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>薪资<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputsalary&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;薪资&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;inputbranch&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>部门<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;brabch&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inputbranch&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>IT部门<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>销售部门<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>人事资源管理部门<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>售后部门<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>运营部门<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;dt&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-2 control-label&quot;</span>&gt;</span>入职日期<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dt&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;入职日期&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> 一切信息属实<br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group &quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-offset-2 col-sm-10&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://kit.fontawesome.com/2503dce09a.js&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-3.4.1/js/bootstrap.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-datetimepicker-master/js/bootstrap-datetimepicker.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-datetimepicker-master/js/locales/bootstrap-datetimepicker.zh-CN.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#dt&#x27;</span>).<span class="hljs-title function_">datetimepicker</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">fomat</span>: <span class="hljs-string">&#x27;yyyy-mm-dd&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">startDate</span>: <span class="hljs-string">&#x27;0&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">language</span>: <span class="hljs-string">&#x27;zh-CN&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">autoclose</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="9-MySQL"><a href="#9-MySQL" class="headerlink" title="9.MySQL"></a>9.MySQL</h2><h3 id="重装"><a href="#重装" class="headerlink" title="重装"></a>重装</h3><p>CentOS 是一种非常流行的 Linux 发行版，它具有强大的性能和稳定性，被广泛应用于各种互联网服务。其中，MySQL 是一种常用的关系型数据库管理系统，用于存储和管理各种类型的数。但是在使用 CentOS 系统的过程中，有时候需要重装 MySQL，本文将介绍如何在 CentOS 系统中进行 MySQL 的重装。</p><p>步骤如下：</p><ol><li>卸载已安装的MySQL</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl stop mysqld<br>sudo yum remove mysql mysql-server mysql-libs<br></code></pre></td></tr></table></figure><ol start="2"><li>清除遗留文件</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rm -rf /var/lib/mysql<br>sudo rm -rf /etc/my.cnf<br></code></pre></td></tr></table></figure><ol start="3"><li>下载并安装新版 MySQL</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm<br>sudo rpm -ivh mysql57-community-release-el7-10.noarch.rpm<br>sudo yum install mysql-server<br></code></pre></td></tr></table></figure><ol start="4"><li>启动 MySQL 服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl start mysqld<br>sudo systemctl enable mysqld<br></code></pre></td></tr></table></figure><ol start="5"><li>初始化 MySQL</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mysql_secure_installation<br></code></pre></td></tr></table></figure><p>以上就是在CentOS系统中重装MySQL的步骤，需要注意的是，重装MySQL会清除所有数据，因此在操作之前需要备份好数据。如果不是必须要重装MySQL的情况下，建议先尝试修复已有的MySQL。</p><h3 id="1-种类"><a href="#1-种类" class="headerlink" title="1.种类"></a>1.种类</h3><p>MySQL、Oracle、SQLServer、DB2、Access···</p><h3 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h3><h4 id="2-1查看已有数据库（文件夹）"><a href="#2-1查看已有数据库（文件夹）" class="headerlink" title="2.1查看已有数据库（文件夹）"></a>2.1查看已有数据库（文件夹）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><h4 id="2-2退出"><a href="#2-2退出" class="headerlink" title="2.2退出"></a>2.2退出</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">exit；<br></code></pre></td></tr></table></figure><h4 id="2-3设置数据库密码"><a href="#2-3设置数据库密码" class="headerlink" title="2.3设置数据库密码"></a>2.3设置数据库密码</h4><p>关闭MYSQL服务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> password <span class="hljs-operator">=</span> password(<span class="hljs-string">&#x27;123456&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-数据类型-1"><a href="#3-数据类型-1" class="headerlink" title="3.数据类型"></a>3.数据类型</h3><table><thead><tr><th align="left">类型</th><th>用途</th></tr></thead><tbody><tr><td align="left">tinyint</td><td>短整形()，相当于java的short，有符号(默认)，取值范围：-128~127；无符号(用关键词unsigned指定)，取值范围：0~255</td></tr><tr><td align="left"><strong>int</strong></td><td>整形，相当于java的int</td></tr><tr><td align="left">bigint</td><td>长整形，相当于java的long</td></tr><tr><td align="left">float</td><td>单精度浮点型</td></tr><tr><td align="left"><strong>double</strong></td><td>双精度浮点型</td></tr><tr><td align="left">decimal</td><td>准确的小数值，eg：wage decimal(m,n) –总共m位数(负号不算)，其中小数点后有n位，m<del>max</del>=65，n<del>max</del>=30.</td></tr><tr><td align="left"><strong>datatime</strong></td><td>日期类型，YYYY-MM-DD HH:MM:SS(2022-12-09 21:03:00)，dt转为字符串类型显示<strong>（dt.strftime(“%Y-%m-%d %H:%M:%S”)）</strong></td></tr><tr><td align="left">data</td><td>日期类型（无时分秒）YYYY-MM-DD</td></tr><tr><td align="left">timestamp</td><td>日期类型（可存储时间戳）</td></tr><tr><td align="left"><strong>char</strong></td><td>定长字符，固定字符长度，最大255个字符，速度快，常存储：手机号，邮箱，加密后的密码等</td></tr><tr><td align="left"><strong>varchar</strong></td><td>不定长字符，有多少存多少，最大65535个字节，节省空间</td></tr><tr><td align="left">text</td><td>大文字，用于存储很长的字符内容，可存储65535个字符，例如：文章，新闻等。</td></tr><tr><td align="left">mediumtext</td><td>中等文本，最多存储16777215（2^24^-1)个字符</td></tr><tr><td align="left">longtext</td><td>长文本，最多存储4294967295（4GB）（2^32^-1)个字符</td></tr><tr><td align="left">blob</td><td>字节数据类型，存储图片、音频等文件</td></tr></tbody></table><h3 id="4-MYSQL指令"><a href="#4-MYSQL指令" class="headerlink" title="4.MYSQL指令"></a>4.MYSQL指令</h3><h4 id="4-1数据库管理"><a href="#4-1数据库管理" class="headerlink" title="4.1数据库管理"></a>4.1数据库管理</h4><ul><li><p>查看当前已有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database 数据库名；<br><span class="hljs-keyword">create</span> database 数据库名 <span class="hljs-keyword">DEFAULT</span> CHARSET utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database 数据库名；<br></code></pre></td></tr></table></figure></li><li><p>进入数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use 数据库名；<br></code></pre></td></tr></table></figure></li><li><p>查看当前数据库下的所有数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables；<br></code></pre></td></tr></table></figure></li></ul><h4 id="4-2数据表管理"><a href="#4-2数据表管理" class="headerlink" title="4.2数据表管理"></a>4.2数据表管理</h4><ul><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名 类型，<br>    字段名 类型，<br>    ···<br>    字段名 类型<br>)<span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8；<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段名 类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key，<span class="hljs-comment">--主键（不允许为空，不允许重复）自增特性</span><br>    字段名 类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>，<span class="hljs-comment">--不允许为空</span><br>    字段名 类型 <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>，<span class="hljs-comment">--插入数据时，默认值为1</span><br>    ···<br>    字段名 类型 <span class="hljs-keyword">null</span> <span class="hljs-comment">--允许为空（默认）</span><br>)<span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8；<br></code></pre></td></tr></table></figure><blockquote><p>==主键一般用于表示当前行的编号==（类似于身份证）。</p></blockquote></li></ul><p>​        示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> medocsys(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    pwd <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>) <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><ul><li><p>查看创建的表信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> 表名<br></code></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">单条插入<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span>，···，字段名) <span class="hljs-keyword">values</span>(数据<span class="hljs-number">1</span>，数据<span class="hljs-number">2</span>，···，数据);<br>批量插入<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span>，···，字段名) <span class="hljs-keyword">values</span>(数据<span class="hljs-number">1</span>，数据<span class="hljs-number">2</span>，···，数据),(数据<span class="hljs-number">1</span>，数据<span class="hljs-number">2</span>，···，数据),···(数据<span class="hljs-number">1</span>，数据<span class="hljs-number">2</span>，···，数据);<br></code></pre></td></tr></table></figure></li></ul><h4 id="4-5数据行操作"><a href="#4-5数据行操作" class="headerlink" title="4.5数据行操作"></a>4.5数据行操作</h4><h5 id="1-新增数据"><a href="#1-新增数据" class="headerlink" title="1.新增数据"></a>1.新增数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">单条插入<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span>，···，字段名) <span class="hljs-keyword">values</span>(数据<span class="hljs-number">1</span>，数据<span class="hljs-number">2</span>，···，数据);<br>批量插入<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span>，···，字段名) <span class="hljs-keyword">values</span>(数据<span class="hljs-number">1</span>，数据<span class="hljs-number">2</span>，···，数据),(数据<span class="hljs-number">1</span>，数据<span class="hljs-number">2</span>，···，数据),···(数据<span class="hljs-number">1</span>，数据<span class="hljs-number">2</span>，···，数据);<br></code></pre></td></tr></table></figure><h5 id="2-删除数据"><a href="#2-删除数据" class="headerlink" title="2.删除数据"></a>2.删除数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名；<span class="hljs-comment">--删除所有数据</span><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件；<span class="hljs-comment">--删除满足条件的数据</span><br></code></pre></td></tr></table></figure><blockquote><p><font title=green>delete from tb1 where id&gt;=10 or name=”alleyf”;</font></p></blockquote><h5 id="3-修改数据"><a href="#3-修改数据" class="headerlink" title="3.修改数据"></a>3.修改数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-operator">=</span>值；<br><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span><span class="hljs-operator">=</span>值，字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值；<br><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名<span class="hljs-operator">=</span>值 <span class="hljs-keyword">where</span> 条件；<br>eg：<span class="hljs-keyword">update</span> medocsys <span class="hljs-keyword">set</span> name<span class="hljs-operator">=</span>&quot;alley&quot;, pwd<span class="hljs-operator">=</span>pwd<span class="hljs-operator">+</span>&quot;10&quot;;<br></code></pre></td></tr></table></figure><h5 id="4-查询数据"><a href="#4-查询数据" class="headerlink" title="4.查询数据"></a>4.查询数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">查询表所有数据<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名；<br>查询对应字段的数据<br><span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表名；<br>条件查询数据<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>；<br></code></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>一般开发：</p><ul><li>创建数据库</li><li>创建数据表</li></ul><blockquote><p>==提前用工具创建好==</p></blockquote><ul><li>增删改查表的数据</li></ul><blockquote><p>==用程序实现==</p></blockquote><blockquote><p>==mysql命令可以先用占位符%s填充，在execute中添加列表来代替占位符==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor.execute(<span class="hljs-string">&quot;select * from user where id &gt; %s&quot;</span>, [<span class="hljs-number">2</span>,])<br></code></pre></td></tr></table></figure></blockquote><blockquote><p><font title=green>在进行增删改的时候需要执行commit，不然数据库没有数据</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor.execute(<span class="hljs-string">&quot;```&quot;</span>)<br>cnet.commit()<br></code></pre></td></tr></table></figure><p><font title=red>在进行查询的时候不需要执行commit，但是要执行fetchall/fetchone获取到返回的数据</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor.execute(sql)<br><span class="hljs-comment"># 获取返回的所有数据（包含字典成员的列表）</span><br><span class="hljs-keyword">return</span> cursor.fetchall()<br><span class="hljs-comment"># 获取返回的第一条数据</span><br><span class="hljs-comment"># return cursor.fetchone()</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="案例：用户管理"><a href="#案例：用户管理" class="headerlink" title="案例：用户管理"></a>案例：用户管理</h5><ul><li><p>表结构创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    pwd <span class="hljs-type">char</span>(<span class="hljs-number">12</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    phonenumber <span class="hljs-type">char</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    email <span class="hljs-type">char</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>) <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure></li><li><p>python操作数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br><br><span class="hljs-comment"># 连接数据库</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cnetsql</span>(<span class="hljs-params">host, port, user, passwd, db, charset=<span class="hljs-string">&quot;utf8&quot;</span></span>):<br>    tempcnet = pymysql.connect(host=host, port=port, user=user, passwd=passwd, charset=charset, db=db)<br>    tempcursor = tempcnet.cursor(cursor=pymysql.cursors.DictCursor)<br>    <span class="hljs-keyword">return</span> tempcnet, tempcursor<br><br><br>cnet, cursor = cnetsql(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&quot;root&quot;</span>, passwd=<span class="hljs-string">&quot;123456&quot;</span>, db=<span class="hljs-string">&quot;medocsys&quot;</span>)<br><br><br><span class="hljs-comment"># ID重新排序</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">idsort</span>():<br>    delid = <span class="hljs-string">&quot;ALTER TABLE user DROP id&quot;</span><br>    addid = <span class="hljs-string">&quot;ALTER TABLE user ADD id int NOT NULL FIRST&quot;</span><br>    setprimary = <span class="hljs-string">&quot;ALTER TABLE user MODIFY COLUMN id int NOT NULL AUTO_INCREMENT,ADD PRIMARY KEY(id)&quot;</span><br>    sqls = [delid, addid, setprimary]<br>    <span class="hljs-comment"># sqls = [addid, setprimary]</span><br>    <span class="hljs-keyword">for</span> sql <span class="hljs-keyword">in</span> sqls:<br>        cursor.execute(sql)<br>        cnet.commit()<br><br><br><span class="hljs-comment"># 增加数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">tablename, fieldnames, fieldvalues</span>):<br>    basestr1 = <span class="hljs-string">&quot;insert into &quot;</span><br>    basestr2 = <span class="hljs-string">&quot;values&quot;</span><br>    basestr3 = <span class="hljs-string">&quot;(&quot;</span><br>    basestr4 = <span class="hljs-string">&quot;)&quot;</span><br>    basestr5 = <span class="hljs-string">&quot; &quot;</span><br>    <span class="hljs-comment"># 字段名列表转字符串</span><br>    length = <span class="hljs-built_in">len</span>(fieldnames)<br>    fieldnames = <span class="hljs-string">&#x27;,&#x27;</span>.join(fieldnames)<br>    <span class="hljs-comment"># # 字段值列表转字符串</span><br>    <span class="hljs-comment"># fieldvalues = &#x27;,&#x27;.join(fieldvalues)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (tablename <span class="hljs-keyword">or</span> fieldnames <span class="hljs-keyword">or</span> fieldvalues):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;添加失败&quot;</span>)<br>        closesql()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        fieldvaluesls = []<br>        fieldvaluessign = <span class="hljs-literal">None</span><br>        <span class="hljs-built_in">print</span>(length)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>            fieldvaluesls.append(<span class="hljs-string">&#x27;%s&#x27;</span>)<br>        fieldvaluessign = <span class="hljs-string">&#x27;,&#x27;</span>.join(fieldvaluesls)<br>        <span class="hljs-built_in">print</span>(fieldvaluessign)<br>        <span class="hljs-comment"># sql = basestr1 + tablename + basestr3 + fieldnames + basestr4 + basestr5 + basestr2 + basestr3 + fieldvalues + basestr4</span><br>        sql = basestr1 + tablename + basestr3 + fieldnames + basestr4 + basestr5 + basestr2 + basestr3 + fieldvaluessign + basestr4<br>        <span class="hljs-built_in">print</span>(sql)<br>        cursor.execute(sql, fieldvalues)<br>        cnet.commit()<br>        idsort()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;添加成功&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-comment"># 查询数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">querydata</span>(<span class="hljs-params">tablename, fieldnames=<span class="hljs-literal">None</span>, condition=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> fieldnames <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        fieldnames = [<span class="hljs-string">&#x27;*&#x27;</span>]<br>    fieldnames = <span class="hljs-string">&#x27;,&#x27;</span>.join(fieldnames)<br>    sql = <span class="hljs-string">&quot;select &quot;</span> + fieldnames + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&quot;from &quot;</span> + tablename + <span class="hljs-string">&#x27; &#x27;</span> + condition<br>    <span class="hljs-built_in">print</span>(sql)<br>    cursor.execute(sql)<br>    <span class="hljs-comment"># 获取返回的所有数据（包含字典成员的列表）</span><br>    <span class="hljs-keyword">return</span> cursor.fetchall()<br>    <span class="hljs-comment"># 获取返回的第一条数据</span><br>    <span class="hljs-comment"># return cursor.fetchone()</span><br><br><br><span class="hljs-comment"># 更新数据</span><br><br><br><span class="hljs-comment"># 删除数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delalldata</span>(<span class="hljs-params">tablename, condition=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> condition <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        condition = <span class="hljs-string">&#x27;&#x27;</span><br>    sql = <span class="hljs-string">&quot;delete from &quot;</span> + tablename + <span class="hljs-string">&#x27; &#x27;</span> + condition<br>    cursor.execute(sql)<br>    cnet.commit()<br>    idsort()<br><br><br><span class="hljs-comment"># 关闭连接</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">closesql</span>():<br>    cursor.close()<br>    cnet.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># idsort()</span><br>    delalldata(tablename=<span class="hljs-string">&#x27;user&#x27;</span>)<br>    insert(tablename=<span class="hljs-string">&#x27;user&#x27;</span>, fieldnames=[<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;pwd&#x27;</span>, <span class="hljs-string">&#x27;phonenumber&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>],<br>           fieldvalues=[<span class="hljs-string">&#x27;alleyf&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-string">&#x27;13669156253&#x27;</span>, <span class="hljs-string">&#x27;alleyf@qq.com&#x27;</span>])<br>    info = querydata(tablename=<span class="hljs-string">&#x27;user&#x27;</span>)<br>    <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> info:<br>        <span class="hljs-built_in">print</span>(user)<br>    <span class="hljs-comment"># delalldata(tablename=&#x27;user&#x27;, condition=&#x27;where id = 1&#x27;)</span><br><br><br>main()<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="综合案例：用户注册"><a href="#综合案例：用户注册" class="headerlink" title="综合案例：用户注册"></a>综合案例：用户注册</h3><ul><li>==前端页面==</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-3.4.1/css/bootstrap.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/plugins/fontawesome-free-6.2.1-web/css/fontawesome.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/register.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.size</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#vcode</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-comment">/*padding-left: 8px;*/</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#code</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*字体颜色白色*/</span></span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(plum, powderblue);</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18pt</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*margin: 5px auto;*/</span></span><br><span class="language-css">            <span class="hljs-comment">/*font-family: &quot;华康娃娃体W5&quot;;*/</span></span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">35px</span> <span class="hljs-number">10px</span> <span class="hljs-number">35px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container size&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/register&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return check()&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>Register<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-wrapper clearfix&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;phonenumber&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;phonenumber&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-item&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vcode&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;verification code&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-item&quot;</span></span><br><span class="hljs-tag">                /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;code&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sub&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Login&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br>                Do have account? <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Login in<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> code; <span class="hljs-comment">//声明一个变量用于存储生成的验证码</span></span><br><span class="language-javascript">    <span class="hljs-title function_">changeImg</span>();</span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;code&quot;</span>).<span class="hljs-property">onclick</span> = changeImg;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeImg</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> arrays = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>];</span><br><span class="language-javascript">        code = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">//重新初始化验证码</span></span><br><span class="language-javascript">        <span class="hljs-comment">//alert(arrays.length);</span></span><br><span class="language-javascript">        <span class="hljs-comment">//随机从数组中获取四个元素组成验证码</span></span><br><span class="language-javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//随机获取一个数组的下标</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> r = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * arrays.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">            code += arrays[r];</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;code&#x27;</span>).<span class="hljs-property">innerHTML</span> = code; <span class="hljs-comment">//将验证码写入指定区域</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//效验验证码(表单被提交时触发)</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//获取用户输入的验证码</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> input_code = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;vcode&#x27;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> username = $(<span class="hljs-string">&quot;#name&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> pwd = $(<span class="hljs-string">&quot;#pwd&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> number = $(<span class="hljs-string">&quot;#number&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> email = $(<span class="hljs-string">&quot;#email&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(username, pwd, number, email);</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!(username &amp;&amp; pwd &amp;&amp; number &amp;&amp; email)) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;输入信息不完整，请继续输入&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (input_code.<span class="hljs-title function_">toLowerCase</span>() === code.<span class="hljs-title function_">toLowerCase</span>()) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//验证码正确(表单提交)</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请输入正确的验证码!&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//验证码不正确,表单不允许提交</span></span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://kit.fontawesome.com/2503dce09a.js&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/plugins/bootstrap-3.4.1/js/bootstrap.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>==Flask后端==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><span class="hljs-keyword">from</span> model.cnetmysql <span class="hljs-keyword">import</span> delalldata<br><span class="hljs-keyword">from</span> model.cnetmysql <span class="hljs-keyword">import</span> insert<br><span class="hljs-keyword">from</span> model.cnetmysql <span class="hljs-keyword">import</span> querydata<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/register&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;register.html&quot;</span>)<br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>        pwd = request.form.get(<span class="hljs-string">&#x27;pwd&#x27;</span>)<br>        phonenumber = request.form.get(<span class="hljs-string">&#x27;phonenumber&#x27;</span>)<br>        email = request.form.get(<span class="hljs-string">&#x27;email&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(request.form)<br>        <span class="hljs-comment"># delalldata(tablename=&#x27;user&#x27;, condition=&#x27;where id&gt;1&#x27;)</span><br>        <span class="hljs-comment"># 添加用户</span><br>        insert(tablename=<span class="hljs-string">&#x27;user&#x27;</span>, fieldnames=[<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;pwd&#x27;</span>, <span class="hljs-string">&#x27;phonenumber&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>],<br>               fieldvalues=[name, pwd, phonenumber, email])<br>        <span class="hljs-comment"># 查询用户</span><br>        userls = querydata(tablename=<span class="hljs-string">&#x27;user&#x27;</span>, condition=<span class="hljs-string">&#x27;where id = 1&#x27;</span>)<br>        adminer = userls[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># print(adminer)</span><br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;demo.html&quot;</span>, adminer=adminer)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/demo&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">demo</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        userls = querydata(tablename=<span class="hljs-string">&#x27;user&#x27;</span>, condition=<span class="hljs-string">&#x27;where id = 1&#x27;</span>)<br>        adminer = userls[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;demo.html&#x27;</span>, adminer=adminer)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h2 id="10-Django"><a href="#10-Django" class="headerlink" title="10.Django"></a>10.Django</h2><h3 id="0运行目录"><a href="#0运行目录" class="headerlink" title="0运行目录"></a>0运行目录</h3><p>==django项目运行的目录为工程下的根目录（manage.py或app文件夹同级目录）==</p><h3 id="1创建项目"><a href="#1创建项目" class="headerlink" title="1创建项目"></a>1创建项目</h3><ol><li>==基于命令行创建==</li></ol><ul><li><p>打开终端</p></li><li><p>进入某个目录（希望项目存放的目录）</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">E:</span>\PythonProjects\Django\Django1&gt;<br></code></pre></td></tr></table></figure></li><li><p>执行命令创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">django-admin startproject Django1<br></code></pre></td></tr></table></figure><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221210195650923.png" alt="image-20221210195650923" style="zoom: 80%;" /></li></ul><ol start="2"><li>==基于Pycharm创建==</li></ol><ul><li><img src="https://img-blog.csdnimg.cn/bfdd00acdaba48428ac66844c1e0d3ef.png" alt="在这里插入图片描述" style="zoom: 67%;" /></li></ul><ol><li>==默认文件介绍==</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">│  manage<span class="hljs-selector-class">.py</span>【项目的管理，启动项目，创建app，数据管理】【不能动】【常常用】<br>│<br>├─<span class="hljs-selector-class">.idea</span><br>│  │  <span class="hljs-selector-class">.gitignore</span><br>│  │  misc<span class="hljs-selector-class">.xml</span><br>│  │  modules<span class="hljs-selector-class">.xml</span><br>│  │  mysite<span class="hljs-selector-class">.iml</span><br>│  │  workspace<span class="hljs-selector-class">.xml</span><br>│  │<br>│  └─inspectionProfiles<br>│          profiles_settings<span class="hljs-selector-class">.xml</span><br>│<br>├─mysite<br>│  │  settings<span class="hljs-selector-class">.py</span>【项目配置文件】【常修改】<br>│  │  urls<span class="hljs-selector-class">.py</span>【URL和函数的对应关系】【常修改】<br>│  │  asgi<span class="hljs-selector-class">.py</span>【接收网络请求】【不能动】<br>│  │  wsgi<span class="hljs-selector-class">.py</span>【接收网络请求】【不能动】<br>│  │  __init__<span class="hljs-selector-class">.py</span><br>│  │<br>│  └─__pycache__<br>│          settings<span class="hljs-selector-class">.cpython-310</span><span class="hljs-selector-class">.pyc</span><br>│          __init__<span class="hljs-selector-class">.cpython-310</span><span class="hljs-selector-class">.pyc</span><br>│<br>└─__pycache__<br>        manage<span class="hljs-selector-class">.cpython-310</span>.pyc<br></code></pre></td></tr></table></figure><h3 id="2-APP"><a href="#2-APP" class="headerlink" title="2.APP"></a>2.APP</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">-项目<br>-app，用户管理【表结构、函数、<span class="hljs-selector-tag">HTML</span>模板、CSS等独立】<br>-app，订单管理【表结构、函数、<span class="hljs-selector-tag">HTML</span>模板、CSS等独立】<br>-app，后台管理【表结构、函数、<span class="hljs-selector-tag">HTML</span>模板、CSS等独立】<br>   -app，网站管理【表结构、函数、<span class="hljs-selector-tag">HTML</span>模板、CSS等独立】<br>   -app，API    【表结构、函数、<span class="hljs-selector-tag">HTML</span>模板、CSS等独立】<br>   ···<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">├─app1<br>│  │  admin.<span class="hljs-keyword">py</span>【固定，不用动】django默认提供了admin后台管理<br>│  │  apps.<span class="hljs-keyword">py</span>【固定，不用动】app启动类<br>│  │  models.<span class="hljs-keyword">py</span>【重要，模型层】对数据库操作<br>│  │  tests.<span class="hljs-keyword">py</span>【固定，不用动】单元测试<br>│  │  views.<span class="hljs-keyword">py</span>【重要，视图层】前后端交互处理请求返回结果的函数<br>│  │  __init__.<span class="hljs-keyword">py</span><br>│  │<br>│  └─migrations【固定，不用动】数据库变更记录<br>│          __init__.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><h3 id="3-快速上手"><a href="#3-快速上手" class="headerlink" title="3.快速上手"></a>3.快速上手</h3><ul><li><p><strong>确保app已注册【setting.py】</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED_APPS = [<br>    <span class="hljs-string">&quot;django.contrib.admin&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.auth&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.contenttypes&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.sessions&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.messages&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.staticfiles&quot;</span>,<br>    <span class="hljs-string">&quot;app1.apps.App1Config&quot;</span>          <span class="hljs-comment">#注册app01</span><br></code></pre></td></tr></table></figure></li><li><p><strong>编写URL和视图函数对应关系【urls.py】</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> app1 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    <span class="hljs-comment"># path(&quot;admin/&quot;, admin.site.urls),</span><br>    path(<span class="hljs-string">&quot;index/&quot;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure></li><li><p><strong>编写视图函数【view.py】</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><br><br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;欢迎访问拂安博客&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>启动Django项目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shel">1.命令行启动<br>python manage.py runserver<br>2.pycharm启动<br>直接点击pycharm里的启动按钮<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-1在写一个页面"><a href="#3-1在写一个页面" class="headerlink" title="3.1在写一个页面"></a>3.1<strong>在写一个页面</strong></h4>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 根据app注册顺序,去每个app目录下的templates中寻找对应的html</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;register.html&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-2templates模板"><a href="#3-2templates模板" class="headerlink" title="3.2templates模板"></a>3.2<strong>templates模板</strong></h4><p>  <img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221210211237018.png" alt="image-20221210211237018"></p><h4 id="3-3静态文件"><a href="#3-3静态文件" class="headerlink" title="3.3静态文件"></a>3.3静态文件</h4><p>一般开发过程中：</p><ul><li>图片</li><li>CSS</li><li>Js</li></ul><p>都会当做静态文件处理</p><h5 id="3-3-1static目录"><a href="#3-3-1static目录" class="headerlink" title="3.3.1static目录"></a>3.3.1static目录</h5><p>在app目录下新建static文件夹</p><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221210215416849.png" alt="image-20221210215416849"></p><h5 id="3-3-2引用路径静态文件"><a href="#3-3-2引用路径静态文件" class="headerlink" title="3.3.2引用路径静态文件"></a>3.3.2引用路径静态文件</h5><p><a href=""><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221210215714358.png"></a></p><h3 id="4-模板语法"><a href="#4-模板语法" class="headerlink" title="4.模板语法"></a>4.模板语法</h3><p>本质上：<font title=green>在html中写一些占位符，由数据对这些占位符进行替换和处理</font>。</p><p>注意：<font title=0>取单独值的时候用<code>.</code>进行索引</font></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">视图层（view.py)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        name = <span class="hljs-string">&#x27;alleyf&#x27;</span><br>        <span class="hljs-comment"># 传递值需要用字典作为参数</span><br>        <span class="hljs-comment"># 字典中包含列表,通过key.index获取列表中的某个元素</span><br>        dit = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: name&#125;<br>        hobby = [<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Go&#x27;</span>]<br>    userinfo = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;alleyf&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;boy&#x27;</span>&#125;<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;demo.html&#x27;</span>, dit)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html">前端（template中的html文件）<br>-字符串键值对<br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>&#123;&#123; name &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>-列表键值对<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>&#123;&#123; hobby.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>&#123;&#123; hobby.1 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>&#123;&#123; hobby.2 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>-字典键值对<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; userinfo &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; userinfo.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; userinfo.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; userinfo.gender &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>-列表里套字典<br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; datalist.0.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; datalist.0.hobby &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>==循环语句==</p><blockquote><p>l是列表</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% for item in l %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><blockquote><p>d是字典</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">-取字典中键<br>        &#123;% for key in userinfo.keys %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; key &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endfor %&#125;<br>-取字典中键<br>        &#123;% for value in userinfo.values %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endfor %&#125;<br>-取字典中键值对<br>        &#123;% for k,v in userinfo.items %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; k &#125;&#125;=&#123;&#123; v &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        &#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><blockquote><p>列表套字典<code>datalist</code>为列表，<code>info</code>为字典</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% for info in datalist %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; info.name &#125;&#125;--&#123;&#123; info.hobby &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>==条件语句==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% if hobby.0 == &#x27;java&#x27; %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; hobby.0 &#125;&#125;==java<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% elif hobby.0 == &#x27;python&#x27; %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; hobby.0 &#125;&#125;==python<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% else %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; hobby.0 &#125;&#125;==其他<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><h3 id="案例：热搜展示"><a href="#案例：热搜展示" class="headerlink" title="案例：热搜展示"></a>案例：热搜展示</h3><p><strong>view.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">news</span>(<span class="hljs-params">request</span>):<br>    url = <span class="hljs-string">&quot;http://api.54dh.cn/API/search/rs/?type=weibo&quot;</span><br>    dic = &#123;<span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0&#x27;</span>&#125;<br>    r = requests.post(url, headers=dic)<br>    r.raise_for_status()<br>    r.encoding = r.apparent_encoding<br>    info = &#123;<span class="hljs-string">&#x27;info&#x27;</span>: r.json()&#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;news.html&quot;</span>, info)<br></code></pre></td></tr></table></figure><p><strong>news.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load static %&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>每日一言<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/fontawesome-free-6.2.1-web/css/fontawesome.css&#x27; %&#125;&quot;</span>&gt;</span><br>    &#123;#    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;css/register.css&#x27; %&#125;&quot;</span>&gt;</span>#&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: 微软雅黑, serif;</span><br><span class="language-css">            <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">05em</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(to right, <span class="hljs-number">#fbc2eb</span>, <span class="hljs-number">#a6c1ee</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container text-center&quot;</span>&gt;</span><br>    &#123;% for item in info.data %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; item.link &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;--&#123;&#123; item.heat &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://kit.fontawesome.com/2503dce09a.js&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-请求和响应"><a href="#5-请求和响应" class="headerlink" title="5.请求和响应"></a>5.请求和响应</h3><blockquote><p><font title=blue>通过此方式可以获取到get请求中的参数和post请求中的数据</font></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">something</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 获取get请求中携带的参数</span><br>        parameters = request.GET<br>        <span class="hljs-comment"># 获取post请求中提交的数据</span><br>        data = request.POST<br>        <span class="hljs-built_in">print</span>(parameters)<br>        <span class="hljs-built_in">print</span>(data)<br>        <span class="hljs-keyword">return</span> HttpResponse(parameters[<span class="hljs-string">&#x27;name&#x27;</span>])<br></code></pre></td></tr></table></figure><p><strong>重定向：返回重定向的网址给浏览器，浏览器去请求该网址</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 根据app注册顺序,去每个app目录下的templates中寻找对应的html</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;register.html&quot;</span>)<br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-keyword">return</span> redirect(request, <span class="hljs-string">&#x27;login.html&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h3><p><strong>post请求后的错误</strong></p><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221211163414687.png" alt="image-20221211163414687"></p><p><strong>解决办法</strong></p><p>在html表单（form）中加上<code>&#123;% csrf_token %&#125;</code></p><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221211164710327.png" alt="image-20221211164710327"></p><h3 id="6-数据库操作"><a href="#6-数据库操作" class="headerlink" title="6.数据库操作"></a>6.数据库操作</h3><blockquote><p><font title=1>Django使用ORM框架实现对数据库的操作，安装<code>mysqlclient</code>第三方库辅助操作</font></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install mysqlclient<br></code></pre></td></tr></table></figure><h4 id="1-ORM"><a href="#1-ORM" class="headerlink" title="1.ORM"></a>1.ORM</h4><blockquote><p>ORM可以帮助我们完成两件事：</p><ol><li><p>创建、修改、删除数据库中的表（不用写SQL语句）【无法创建数据库】</p></li><li><p>操作表中的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span>```<br><span class="hljs-keyword">update</span><br><span class="hljs-keyword">delete</span><br><span class="hljs-keyword">select</span><br></code></pre></td></tr></table></figure></li></ol></blockquote><h4 id="2-配置setting-py文件"><a href="#2-配置setting-py文件" class="headerlink" title="2.配置setting.py文件"></a>2.配置setting.py文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>, <span class="hljs-comment">#连接MYSQL数据库</span><br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;medocsys&#x27;</span>,  <span class="hljs-comment"># 数据库名</span><br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,  <span class="hljs-comment"># 数据库用户名</span><br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;123456&#x27;</span>,  <span class="hljs-comment"># 数据库密码</span><br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,  <span class="hljs-comment"># 数据库主机地址</span><br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-number">3306</span>,  <span class="hljs-comment"># 数据库连接端口号</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Django操作表"><a href="#3-Django操作表" class="headerlink" title="3.Django操作表"></a>3.Django操作表</h4><h5 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h5><p>在models.py中创建表类</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Create your models here.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Userinfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    password = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    email = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    age = models.IntegerField()<br></code></pre></td></tr></table></figure><p>在终端执行命令创建该表</p><p>注意：<strong>1.终端路径在项目名目录下。2.app需要已经注册。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221211191148909.png" alt="image-20221211191148909" style="zoom: 50%;" /><h5 id="2-删除表"><a href="#2-删除表" class="headerlink" title="2.删除表"></a>2.删除表</h5><p>直接将<code>models.py</code>里面的类注释掉即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Userinfo</span>(models.Model):<br><span class="hljs-comment">#     name = models.CharField(max_length=32)</span><br><span class="hljs-comment">#     password = models.CharField(max_length=64)</span><br><span class="hljs-comment">#     mobile = models.CharField(max_length=11)</span><br><span class="hljs-comment">#     email = models.CharField(max_length=32)</span><br><span class="hljs-comment">#     age = models.IntegerField()</span><br><span class="hljs-comment">#     docpath = models.CharField(max_length=64, default=&quot;&quot;)</span><br><span class="hljs-comment">#     imgpath = models.CharField(max_length=64, null=True, blank=True)</span><br></code></pre></td></tr></table></figure><h5 id="3-修改表"><a href="#3-修改表" class="headerlink" title="3.修改表"></a>3.修改表</h5><ol><li><p>删除字段（直接注释掉）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#删除imgpath字段</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Userinfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    password = models.CharField(max_length=<span class="hljs-number">64</span>)<br>    mobile = models.CharField(max_length=<span class="hljs-number">11</span>)<br>    email = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    age = models.IntegerField()<br>    docpath = models.CharField(max_length=<span class="hljs-number">64</span>, default=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-comment">#imgpath = models.CharField(max_length=64, null=True, blank=True)</span><br></code></pre></td></tr></table></figure></li><li><p>修改字段</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#修改max_length属性</span><br>docpath = models.CharField(max_length=<span class="hljs-number">128</span>, default=<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">#将max_length直接改为128</span><br></code></pre></td></tr></table></figure></li><li><p>添加字段</p><p>在表中新建字段（列）时，由于已存在的字段可能已有数据，所以新增列必须要指定新增列对应的数据：</p><ol><li><p>手动输入一个值（全部行都为输入的值）</p></li><li><p>设置默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">docpath = models.CharField(default=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>允许为空</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">imgpath = models.CharField(null=<span class="hljs-literal">True</span>, blank=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></li></ol></li></ol><h4 id="4-操作表数据"><a href="#4-操作表数据" class="headerlink" title="4.操作表数据"></a>4.操作表数据</h4><h5 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1.添加数据"></a>1.添加数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ***************添加数据***************</span><br><span class="hljs-comment"># 本质：insert into app1_userinfo(name,password,mobile,email) values(&quot;alleyf&quot;,&quot;123456&quot;,&quot;13669156253&quot;,&quot;alleyf@qq.com&quot;)</span><br><span class="hljs-comment"># Userinfo.objects.create(name=&quot;alleyf&quot;, password=&quot;123456&quot;, mobile=&quot;13669156253&quot;, email=&quot;alleyf@qq.com&quot;)</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 根据app注册顺序,去每个app目录下的templates中寻找对应的html</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;register.html&quot;</span>)<br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-built_in">print</span>(request.POST)<br>        username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>        mobile = request.POST.get(<span class="hljs-string">&quot;phonenumber&quot;</span>)<br>        email = request.POST.get(<span class="hljs-string">&quot;email&quot;</span>)<br>        <span class="hljs-comment"># 添加用户数据</span><br>        Userinfo.objects.create(name=username, password=password, mobile=mobile, email=email)<br>        <span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&quot;login&quot;</span>))<br></code></pre></td></tr></table></figure><h5 id="2-更新数据"><a href="#2-更新数据" class="headerlink" title="2.更新数据"></a>2.更新数据</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 条件更新</span><br>Userinfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">2</span>).update(password=<span class="hljs-string">&#x27;a123456&#x27;</span>)<br><span class="hljs-comment"># 全更新</span><br>Userinfo.objects.<span class="hljs-built_in">all</span>().update(mobile=<span class="hljs-string">&#x27;13125018525&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a>3.删除数据</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 条件删除</span><br>Userinfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">2</span>).delete()<br><span class="hljs-comment"># 删除表中全部数据</span><br>Userinfo.objects.<span class="hljs-built_in">all</span>().delete()<br></code></pre></td></tr></table></figure><h5 id="4-查询数据-1"><a href="#4-查询数据-1" class="headerlink" title="4.查询数据"></a>4.查询数据</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#条件查询</span><br><span class="hljs-comment">#查询结果不唯一时，返回包含对象的queryset(列表)：</span><br>    userinfo = Userinfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>) <br><span class="hljs-comment">#已知查询结果唯一时利用first()获取第一条数据，返回对象：</span><br>    userobj = Userinfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>).first()<br><span class="hljs-comment">#全查询</span><br><span class="hljs-comment">#返回包含对象的列表：</span><br>userinfo = Userinfo.objects.<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_list</span>(<span class="hljs-params">request</span>):<br>    userlist = []<br>    userinfo = Userinfo.objects.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> userinfo:<br>        datadic = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: info.<span class="hljs-built_in">id</span>, <span class="hljs-string">&#x27;name&#x27;</span>: info.name, <span class="hljs-string">&#x27;password&#x27;</span>: info.password, <span class="hljs-string">&#x27;mobile&#x27;</span>: info.mobile,<br>                   <span class="hljs-string">&#x27;email&#x27;</span>: info.email&#125;<br>        userlist.append(datadic)<br>    <span class="hljs-built_in">print</span>(userlist)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user_list.html&quot;</span>, &#123;<span class="hljs-string">&#x27;userlist&#x27;</span>: userlist&#125;)<br></code></pre></td></tr></table></figure><h3 id="案例：用户管理-1"><a href="#案例：用户管理-1" class="headerlink" title="案例：用户管理"></a>案例：用户管理</h3><p>要求：</p><ol><li>展示用户列表<ul><li>url路由</li><li>view函数<ol><li>获取用户信息</li><li>HTML渲染</li></ol></li></ul></li><li>添加用户<ul><li>post请求</li><li>添加用户</li><li>HTML渲染</li></ul></li><li>修改用户<ul><li>post请求</li><li>更新用户信息</li></ul></li><li>删除用户<ul><li>a标签传递用户id参数get请求</li><li>筛选删除指定用户</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        nid = request.GET.get(<span class="hljs-string">&#x27;nid&#x27;</span>)<br>        <span class="hljs-comment"># 删除用户方法1（get请求）</span><br>        Userinfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).delete()<br>        userlist = []<br>        userinfo = Userinfo.objects.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-keyword">for</span> info <span class="hljs-keyword">in</span> userinfo:<br>            datadic = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: info.<span class="hljs-built_in">id</span>, <span class="hljs-string">&#x27;name&#x27;</span>: info.name, <span class="hljs-string">&#x27;password&#x27;</span>: info.password, <span class="hljs-string">&#x27;mobile&#x27;</span>: info.mobile,<br>                       <span class="hljs-string">&#x27;email&#x27;</span>: info.email&#125;<br>            userlist.append(datadic)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;user.html&quot;</span>, &#123;<span class="hljs-string">&#x27;userlist&#x27;</span>: userlist&#125;)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> request.POST[<span class="hljs-string">&#x27;action&#x27;</span>] == <span class="hljs-string">&#x27;add&#x27;</span>:<br>            username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>            password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>            mobile = request.POST.get(<span class="hljs-string">&quot;phonenumber&quot;</span>)<br>            email = request.POST.get(<span class="hljs-string">&quot;email&quot;</span>)<br>            <span class="hljs-comment"># 添加用户数据</span><br>            Userinfo.objects.create(name=username, password=password, mobile=mobile, email=email)<br>            userinfo = Userinfo.objects.<span class="hljs-built_in">all</span>()<br>        <span class="hljs-keyword">elif</span> request.POST[<span class="hljs-string">&quot;action&quot;</span>][:<span class="hljs-number">6</span>] == <span class="hljs-string">&quot;delete&quot;</span>: <br>            userid = request.POST[<span class="hljs-string">&quot;action&quot;</span>][<span class="hljs-number">6</span>:]<br>            <span class="hljs-comment">#删除用户方法2（post请求）</span><br>            Userinfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=userid).delete()<br>        <span class="hljs-keyword">elif</span> request.POST[<span class="hljs-string">&quot;action&quot;</span>][:<span class="hljs-number">4</span>] == <span class="hljs-string">&quot;edit&quot;</span>:<br>            userid = request.POST[<span class="hljs-string">&quot;action&quot;</span>][<span class="hljs-number">4</span>:]<br>            username = request.POST.get(<span class="hljs-string">&quot;name&quot;</span>)<br>            password = request.POST.get(<span class="hljs-string">&quot;pwd&quot;</span>)<br>            mobile = request.POST.get(<span class="hljs-string">&quot;phonenumber&quot;</span>)<br>            email = request.POST.get(<span class="hljs-string">&quot;email&quot;</span>)<br>            <span class="hljs-comment">#修改用户</span><br>            Userinfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=userid).update(name=username, password=password, mobile=mobile, email=email)<br>        <span class="hljs-keyword">return</span> redirect(reverse(<span class="hljs-string">&#x27;user&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="11-Django开发"><a href="#11-Django开发" class="headerlink" title="11.Django开发"></a>11.Django开发</h2><h3 id="1-主题一：员工管理系统"><a href="#1-主题一：员工管理系统" class="headerlink" title="1.主题一：员工管理系统"></a>1.主题一：员工管理系统</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h4><blockquote><p>预处理:</p><p><a href=""><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221212135820300.png" alt="image-20221212135820300"></a></p></blockquote><h4 id="2-创建app"><a href="#2-创建app" class="headerlink" title="2.创建app"></a>2.创建app</h4><p><strong>方式1终端输入以下命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python manage.py startapp app名字<br></code></pre></td></tr></table></figure><p><strong>方式2打开manage.py任务输入以下命令：</strong></p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221213133108403.png" alt="image-20221213133108403" style="zoom: 33%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">startapp   app名<br></code></pre></td></tr></table></figure><p><strong>注册app</strong></p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221213133444596.png" alt="image-20221213133444596" style="zoom: 50%;" /><h4 id="3-设置表结构"><a href="#3-设置表结构" class="headerlink" title="3.设置表结构"></a>3.设置表结构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><br><span class="hljs-comment"># Create your models here.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;部门表&quot;&quot;&quot;</span><br>    title = models.CharField(verbose_name=<span class="hljs-string">&quot;标题&quot;</span>, max_length=<span class="hljs-number">32</span>)<br><br><span class="hljs-comment">#关联部门表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;员工表&quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class="hljs-string">&quot;姓名&quot;</span>, max_length=<span class="hljs-number">16</span>)<br>    password = models.CharField(verbose_name=<span class="hljs-string">&quot;密码&quot;</span>, max_length=<span class="hljs-number">16</span>)<br>    age = models.IntegerField(verbose_name=<span class="hljs-string">&quot;年龄&quot;</span>)<br>    account = models.DecimalField(verbose_name=<span class="hljs-string">&quot;账户余额&quot;</span>, max_digits=<span class="hljs-number">10</span>, decimal_places=<span class="hljs-number">2</span>, default=<span class="hljs-number">0</span>)<br>    create_time = models.DateTimeField(verbose_name=<span class="hljs-string">&quot;入职时间&quot;</span>)<br>    <span class="hljs-comment"># Dejango中对字段值域的约束</span><br>    gender_choices = (<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;男&#x27;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>, choices=gender_choices)<br>    <span class="hljs-comment"># 无约束</span><br>    <span class="hljs-comment"># depart_id = models.BigIntegerField(verbose_name=&#x27;部门ID&#x27;)</span><br>    <span class="hljs-comment"># 有约束</span><br>    <span class="hljs-comment">#    -to:与之关联的表</span><br>    <span class="hljs-comment">#    -to.field：与之关联的字段</span><br>    <span class="hljs-comment"># 1.Django自动</span><br>    <span class="hljs-comment">#     -将关联字段名添加到被关联的字段的后面(depart_id)</span><br>    <span class="hljs-comment"># 2.外键表(部门表)的关联字段被删除</span><br>    <span class="hljs-comment"># -2.1级联删除</span><br>    depart = models.ForeignKey(to=<span class="hljs-string">&#x27;Department&#x27;</span>, to_field=<span class="hljs-string">&#x27;id&#x27;</span>, on_delete=models.CASCADE)<br>    <span class="hljs-comment"># -2.1置空</span><br>    <span class="hljs-comment"># depart = models.ForeignKey(to=&#x27;Department&#x27;,to_field=&#x27;id&#x27;,null=True,blank=True,on_delete=models.SET_NULL)</span><br></code></pre></td></tr></table></figure><h4 id="4-在MySQL中生成表"><a href="#4-在MySQL中生成表" class="headerlink" title="4.在MySQL中生成表"></a>4.在MySQL中生成表</h4><ul><li><p>工具连接MYSQL创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database staffsystem <span class="hljs-keyword">DEFAULT</span> CHARSET utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件，连接MySQL</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">DATABASES = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br>        <span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;staffsystem&#x27;</span>,  <span class="hljs-comment"># 数据库名</span><br>        <span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,  <span class="hljs-comment"># 数据库用户名</span><br>        <span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;123456&#x27;</span>,  <span class="hljs-comment"># 数据库密码</span><br>        <span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,  <span class="hljs-comment"># 数据库主机地址</span><br>        <span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-number">3306</span>,  <span class="hljs-comment"># 数据库连接端口号</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>执行django命令生成数据表</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">在manage.py的<span class="hljs-keyword">task</span>中执行：<br>makemigrations<br>migrate<br></code></pre></td></tr></table></figure><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221213142208087.png" alt="image-20221213142208087" style="zoom:50%;" /></li></ul><h4 id="5-创建静态文件和模板文件目录"><a href="#5-创建静态文件和模板文件目录" class="headerlink" title="5.创建静态文件和模板文件目录"></a>5.创建静态文件和模板文件目录</h4><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221213142523883.png" alt="image-20221213142523883" style="zoom:33%;" /><h4 id="6-部门管理"><a href="#6-部门管理" class="headerlink" title="6.部门管理"></a>6.部门管理</h4><blockquote><p>体验最原始方法来做。</p><p>Django中提供Form和ModelForm组件（方便）。</p></blockquote><h5 id="1-部门列表"><a href="#1-部门列表" class="headerlink" title="1.部门列表"></a>1.部门列表</h5><p><font title=red>重要知识点</font></p><blockquote><p>==url中传递动态参数==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#urls.py</span><br>path(<span class="hljs-string">&quot;depart/&lt;int:nid&gt;/edit/&quot;</span>, views.depart_edit),<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#views.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;修改部门&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 根据nid获取所要编辑的对象</span><br>        departobj = models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;depart_edit.html&quot;</span>, &#123;<span class="hljs-string">&#x27;departobj&#x27;</span>: departobj&#125;)<br>    departdic = request.POST<br>    models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).update(title=departdic.get(<span class="hljs-string">&#x27;title&#x27;</span>), leader=departdic.get(<span class="hljs-string">&#x27;leader&#x27;</span>),<br>                                                    number=departdic.get(<span class="hljs-string">&#x27;number&#x27;</span>))<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/depart/list/&#x27;</span>)<br></code></pre></td></tr></table></figure></blockquote><h5 id="2-新建部门"><a href="#2-新建部门" class="headerlink" title="2.新建部门"></a>2.新建部门</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加部门&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;depart_add.html&quot;</span>)<br>    departinfo = request.POST<br>    models.Department.objects.create(title=departinfo[<span class="hljs-string">&#x27;title&#x27;</span>], leader=departinfo[<span class="hljs-string">&#x27;leader&#x27;</span>],<br>                                     number=departinfo[<span class="hljs-string">&#x27;number&#x27;</span>])<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="3-修改部门"><a href="#3-修改部门" class="headerlink" title="3.修改部门"></a>3.修改部门</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;修改部门&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># 根据nid获取所要编辑的对象</span><br>        departobj = models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;depart_edit.html&quot;</span>, &#123;<span class="hljs-string">&#x27;departobj&#x27;</span>: departobj&#125;)<br>    departdic = request.POST<br>    models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).update(title=departdic.get(<span class="hljs-string">&#x27;title&#x27;</span>), leader=departdic.get(<span class="hljs-string">&#x27;leader&#x27;</span>),<br>                                                    number=departdic.get(<span class="hljs-string">&#x27;number&#x27;</span>))<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/depart/list/&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="4-删除部门"><a href="#4-删除部门" class="headerlink" title="4.删除部门"></a>4.删除部门</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_delete</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;删除部门&quot;&quot;&quot;</span><br>    nid = request.GET.get(<span class="hljs-string">&quot;nid&quot;</span>)<br>    models.Department.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="7-用户管理"><a href="#7-用户管理" class="headerlink" title="7.用户管理"></a>7.用户管理</h4><h5 id="1-用户列表"><a href="#1-用户列表" class="headerlink" title="1.用户列表"></a>1.用户列表</h5><p><font title=green>重要知识点</font></p><blockquote><p>==用choice约束的字段,获取约束对应值的方法==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Dejango中对字段值域的约束</span><br>gender_choices = (<br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;男&#x27;</span>),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;女&#x27;</span>),<br>)<br>gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>, choices=gender_choices)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">userinfo.get_gender_display()<br></code></pre></td></tr></table></figure><p>==外键字段获取外联表中对应的数据==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">depart = models.ForeignKey(to=<span class="hljs-string">&#x27;Department&#x27;</span>, to_field=<span class="hljs-string">&#x27;id&#x27;</span>, on_delete=models.CASCADE)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">userinfo.depart.title(depart返回的是对象)<br></code></pre></td></tr></table></figure><p>==datetime时间转字符串形式==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#python中转法:( dt.strftime(”%Y-%m-%d %H:%M:%S”))</span><br>userinfo.create_time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--html的django语法&#123;&#123; &#125;&#125;转法：--&gt;</span><br>userinfo.create_time|date:&quot;Y-m-d H:i:s&quot;<br></code></pre></td></tr></table></figure></blockquote><h5 id="2-新建用户"><a href="#2-新建用户" class="headerlink" title="2.新建用户"></a>2.新建用户</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加用户&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        context = &#123;<br>            <span class="hljs-string">&#x27;gender_choices&#x27;</span>: models.UserInfo.gender_choices,<br>            <span class="hljs-string">&#x27;departs&#x27;</span>: models.Department.objects.<span class="hljs-built_in">all</span>()<br>        &#125;<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;user_add.html&#x27;</span>, context)<br>    name = request.POST.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    pwd = request.POST.get(<span class="hljs-string">&#x27;pwd&#x27;</span>)<br>    age = request.POST.get(<span class="hljs-string">&#x27;age&#x27;</span>)<br>    account = request.POST.get(<span class="hljs-string">&#x27;account&#x27;</span>)<br>    ctime = request.POST.get(<span class="hljs-string">&#x27;ctime&#x27;</span>)<br>    gender_id = request.POST.get(<span class="hljs-string">&#x27;gender&#x27;</span>)<br>    depart_id = request.POST.get(<span class="hljs-string">&#x27;depart&#x27;</span>)<br>    models.UserInfo.objects.create(name=name, password=pwd, age=age, account=account, create_time=ctime,<br>                                   gender=gender_id, depart_id=depart_id)<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/user/list/&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="3-编辑用户"><a href="#3-编辑用户" class="headerlink" title="3.编辑用户"></a>3.编辑用户</h5><ul><li>点击编辑，跳转到编辑页面（将编辑行的ID携带过去）。</li><li>编辑页面（默认数据，根据ID获取并设置到页面中）</li><li>提交：<ul><li>错误提示</li><li>数据校验</li><li>数据库更新</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;编辑用户&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 根据ID获取所要编辑的数据</span><br>    rowobj = models.UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-comment"># （instance=rowobj）将默认数据显示在表单中</span><br>        form = UserModelForm(instance=rowobj)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;user_edit.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br>    <span class="hljs-comment">#获取对应用户对象进行数据更新</span><br>    form = UserModelForm(data=request.POST, instance=rowobj)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 默认保存的是用户输入的所有数据,如果想要再保存用户输入以外的字段的值</span><br>        <span class="hljs-comment"># form.instance.字段名 = 值</span><br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/user/list/&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;user_edit.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br></code></pre></td></tr></table></figure><h5 id="4-删除用户"><a href="#4-删除用户" class="headerlink" title="4.删除用户"></a>4.删除用户</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_delete</span>(<span class="hljs-params">request, nid</span>):<br>    models.UserInfo.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first().delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/user/list/&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="7-模板继承"><a href="#7-模板继承" class="headerlink" title="7.模板继承"></a>7.模板继承</h4><blockquote><p>模板继承可以使父模板的内容复用，子模版直接继承父模板的全部内容并可以覆盖父模板中相应的块。</p></blockquote><p><strong>语法—父模板中：</strong></p><p>​        1.定义父模板中的块block标签</p><p>​        2.标识出哪些在子模版中是允许被修改的</p><p>​        3.block标签：在父模板中定义，可以在子模版中覆盖</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% block block_name %&#125;<br>父模板可以被覆盖的内容<br>&#123;% endblock blocl_name%&#125;  (**切记一定要写endblock**)<br></code></pre></td></tr></table></figure><p><strong>语法—子模版中：</strong></p><p>​        1.继承模板extends标签（<strong>写在模板文件的第一行</strong>）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% entends <span class="hljs-string">&#x27;base.html&#x27;</span> %&#125;<br></code></pre></td></tr></table></figure><p>​        2.子模版 重写父模板中的内容快</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">&#123;% block block_name %&#125;<br>子模版用来覆盖父模板中 block_name 块的内容<br>&#123;% endblock blocl_name%&#125;  (**切记一定要写endblock**)<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><ul><li><code>父模板</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load static %&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    &#123;% block title %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    &#123;% endblock %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    &#123;#    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;css/user.css&#x27; %&#125;&quot;</span>&gt;</span>#&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/fontawesome-free-6.2.1-web/css/fontawesome.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: 微软雅黑, serif;</span><br><span class="language-css">            <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">05em</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">th</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.navbar</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    &#123;% block mystyle %&#125;<br>    &#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-toggle collapsed&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;collapse&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>联通用户管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collapse navbar-collapse&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/depart/list/&quot;</span>&gt;</span>部门管理<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/userinfo/list/&quot;</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>Alleyf <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>个人资料<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我的信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &#123;% block info %&#125;&#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://kit.fontawesome.com/2503dce09a.js&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>子网页</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;layout.html&#x27; %&#125;<br>&#123;% block title %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>部门列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/depart/add/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-plus&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>新建部门<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 部门列表<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-condensed table-bordered&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>部门ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>部门名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>部门负责人<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>部门人数<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>                &#123;% for department in departments %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>&#123;&#123; department.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; department.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; department.leader &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; department.number &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/depart/&#123;&#123; department.id &#125;&#125;/edit/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info btn-xs&quot;</span></span><br><span class="hljs-tag">                               <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-right: 20px&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/depart/delete/?nid=&#123;&#123; department.id &#125;&#125;&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h4 id="8-Form和ModelForm"><a href="#8-Form和ModelForm" class="headerlink" title="8.Form和ModelForm"></a>8.Form和ModelForm</h4><ul><li><p>原始方式：不会采用（本质）【麻烦】</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-没有数据校验</span><br><span class="hljs-deletion">-错误，应该有提示</span><br><span class="hljs-deletion">-页面上，每个字段都需要我们重新写一遍，数据冗余</span><br><span class="hljs-deletion">-关联的数据，需要手动获取并循环展示在页面中</span><br></code></pre></td></tr></table></figure></li><li><p>Django组件</p><ol><li>Form组件（较简便）</li><li>ModelForm组件（最简便）</li></ol></li></ul><h5 id="8-1Form（常用与非数据库的表单）"><a href="#8-1Form（常用与非数据库的表单）" class="headerlink" title="8.1Form（常用与非数据库的表单）"></a>8.1Form（常用与非数据库的表单）</h5><h6 id="1-views-py"><a href="#1-views-py" class="headerlink" title="1.views.py"></a>1.views.py</h6><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.Form):<br>    name = forms.CharField(widget=forms.TextInput)<br>    pwd = forms.CharField(widget=forms.PasswordInput)<br>    age = forms.IntegerField(widget=forms.TextInput)<br>    account = forms.DecimalField(widget=forms.TextInput)<br>    ctime = forms.DateTimeField(widget=forms.DateTimeField)<br>    gender = forms.CharField(widget=forms.RadioSelect)<br>    depart = forms.CharField(widget=forms.RadioSelect)<br>    <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加用户&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        userform = UserForm()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;user_add.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;userform&#x27;</span>:userform&#125;)<br></code></pre></td></tr></table></figure><h6 id="2-user-add-html"><a href="#2-user-add-html" class="headerlink" title="2.user_add.html"></a>2.user_add.html</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">-循环法<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span><br>    &#123;% for field in userform %&#125;<br>    &#123;&#123; field &#125;&#125;<br>    &#123;% endfor %&#125;<br>    <span class="hljs-comment">&lt;!--&lt;input type=&#x27;text&#x27; placeholder=&#x27;姓名&#x27; name=&#x27;usrname&#x27;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>-手写法<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span><br>&#123;&#123;field.name&#125;&#125;<br>    &#123;&#123;field.pwd&#125;&#125;<br>    &#123;&#123;field.age&#125;&#125;<br>    ···<br>    &#123;&#123;field.depart&#125;&#125;<br>    <span class="hljs-comment">&lt;!--&lt;input type=&#x27;text&#x27; placeholder=&#x27;姓名&#x27; name=&#x27;usrname&#x27;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="8-2ModelForm-推荐：常用与数据库的表单"><a href="#8-2ModelForm-推荐：常用与数据库的表单" class="headerlink" title="8.2ModelForm(推荐：常用与数据库的表单)"></a>8.2ModelForm(推荐：常用与数据库的表单)</h5><h6 id="1-models-py"><a href="#1-models-py" class="headerlink" title="1.models.py"></a>1.models.py</h6><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;员工表&quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class="hljs-string">&quot;姓名&quot;</span>, max_length=<span class="hljs-number">16</span>)<br>    password = models.CharField(verbose_name=<span class="hljs-string">&quot;密码&quot;</span>, max_length=<span class="hljs-number">16</span>)<br>    age = models.IntegerField(verbose_name=<span class="hljs-string">&quot;年龄&quot;</span>)<br>    account = models.DecimalField(verbose_name=<span class="hljs-string">&quot;账户余额&quot;</span>, max_digits=<span class="hljs-number">10</span>, decimal_places=<span class="hljs-number">2</span>, default=<span class="hljs-number">0</span>)<br>    create_time = models.DateTimeField(verbose_name=<span class="hljs-string">&quot;入职时间&quot;</span>)<br>    gender_choices = (<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;男&#x27;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;性别&#x27;</span>, choices=gender_choices)<br>    depart = models.ForeignKey(to=<span class="hljs-string">&#x27;Department&#x27;</span>, to_field=<span class="hljs-string">&#x27;id&#x27;</span>, on_delete=models.CASCADE)<br></code></pre></td></tr></table></figure><h6 id="2-views-py"><a href="#2-views-py" class="headerlink" title="2.views.py"></a>2.views.py</h6><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserForm</span>(forms.ModelForm):<br>    <span class="hljs-comment"># 自定义的字段</span><br>    xxx = forms.CharField(widget=forms.TextInput)<br><br>    <span class="hljs-comment"># 数据库中的字段</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.UserInfo<br>        fields = [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;gender&quot;</span>, <span class="hljs-string">&quot;depart&quot;</span>, <span class="hljs-string">&quot;xxx&quot;</span>]<br> <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加用户&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        userform = UserForm()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;user_add.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;userform&#x27;</span>:userform&#125;)<br></code></pre></td></tr></table></figure><h6 id="3-user-add-html"><a href="#3-user-add-html" class="headerlink" title="3.user_add.html"></a>3.user_add.html</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">-循环法<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span><br>    &#123;% for field in userform %&#125;<br>    &#123;&#123; item.label &#125;&#125;:&#123;&#123; item &#125;&#125;<br>    &#123;% endfor %&#125;<br>    <span class="hljs-comment">&lt;!--&lt;input type=&#x27;text&#x27; placeholder=&#x27;姓名&#x27; name=&#x27;usrname&#x27;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>-手写法<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span><br>&#123;&#123;field.name&#125;&#125;<br>    &#123;&#123;field.pwd&#125;&#125;<br>    &#123;&#123;field.age&#125;&#125;<br>    ···<br>    &#123;&#123;field.depart&#125;&#125;<br>    <span class="hljs-comment">&lt;!--&lt;input type=&#x27;text&#x27; placeholder=&#x27;姓名&#x27; name=&#x27;usrname&#x27;/&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><ol><li><p>views.py</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserModelForm</span>(forms.ModelForm):<br>    name = forms.CharField(label=<span class="hljs-string">&quot;用户名&quot;</span>, min_length=<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 数据库中的字段</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.UserInfo<br>        fields = [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;account&quot;</span>, <span class="hljs-string">&quot;create_time&quot;</span>, <span class="hljs-string">&quot;gender&quot;</span>, <span class="hljs-string">&quot;depart&quot;</span>]<br><br>        widgets = &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: forms.TextInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;form-control input&quot;</span>&#125;),<br>            <span class="hljs-comment"># &quot;password&quot;: forms.PasswordInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class="hljs-comment"># &quot;age&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class="hljs-comment"># &quot;account&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class="hljs-string">&quot;create_time&quot;</span>: forms.DateTimeInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot; form-control input&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;datetime-local&quot;</span>&#125;),<br>            <span class="hljs-comment"># &quot;gender&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class="hljs-comment"># &quot;depart&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>        &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        <span class="hljs-comment"># 循环找到所有的字段,给其添加样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;input form-control&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br>            <br>            <br>            <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_modelform_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加用户modelform版&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        form = UserModelForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;user_modelform_add.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br>    <span class="hljs-comment"># 用户提交数据,数据校验</span><br>    form = UserModelForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 如果数据合法,则保存数据并添加到表中</span><br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/user/list/&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;user_modelform_add.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br></code></pre></td></tr></table></figure></li><li><p>user_modelform_add.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;user_list.html&#x27; %&#125; # 继承父模块的标识<br>&#123;% block title %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>新建用户<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#1e2732</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: transparent;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: background-color .<span class="hljs-number">3s</span> ease-in-out;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e5dcd</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>, <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>-visible &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#3898EC</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>                &#123;% block actiontitle %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span>新建用户<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                &#123;% endblock %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>                    &#123;% block userform %&#125;<br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>                            &#123;% csrf_token %&#125;<br>                            &#123;% for item in form %&#125;<br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-6&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    &#123;&#123; item &#125;&#125;<br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #c12c1f&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;&#123; item.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            &#123;% endfor %&#125;<br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-6&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button--submit &quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Subscribe&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    &#123;% endblock %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p><font title=blue>在配置文件中可以设置语言种类</font></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># LANGUAGE_CODE = &quot;en-us&quot; 英文</span><br>LANGUAGE_CODE = <span class="hljs-string">&quot;zh-hans&quot;</span> 中文<br></code></pre></td></tr></table></figure></blockquote><h3 id="2-主题二：靓号管理（数据校验）"><a href="#2-主题二：靓号管理（数据校验）" class="headerlink" title="2.主题二：靓号管理（数据校验）"></a>2.主题二：靓号管理（数据校验）</h3><h4 id="1-表结构设计"><a href="#1-表结构设计" class="headerlink" title="1.表结构设计"></a>1.表结构设计</h4><table><thead><tr><th align="center">id</th><th align="center">mobile</th><th align="center">price</th><th align="center">lever(choices)</th><th align="center">status(1未注册/2已注册)</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xxx</td><td align="center">xxx</td><td align="center">xxx</td><td align="center">xxx</td></tr><tr><td align="center">2</td><td align="center">xxx</td><td align="center">xxx</td><td align="center">xxx</td><td align="center">xxx</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrettyNum</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;靓号表&quot;&quot;&quot;</span><br>    moblie = models.CharField(verbose_name=<span class="hljs-string">&#x27;手机号&#x27;</span>, max_length=<span class="hljs-number">11</span>)  <span class="hljs-comment"># 存为字符串便于正则表达式搜索</span><br>    price = models.IntegerField(verbose_name=<span class="hljs-string">&#x27;价格&#x27;</span>)<br>    level_choices = (<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;一级&quot;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;二级&quot;</span>),<br>        (<span class="hljs-number">3</span>, <span class="hljs-string">&quot;三级&quot;</span>),<br>        (<span class="hljs-number">4</span>, <span class="hljs-string">&quot;四级&quot;</span>),<br>        (<span class="hljs-number">5</span>, <span class="hljs-string">&quot;五级&quot;</span>),<br>    )<br>    level = models.SmallIntegerField(verbose_name=<span class="hljs-string">&quot;星级&quot;</span>, choices=level_choices, default=<span class="hljs-number">1</span>)<br>    status_choices = (<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;已注册&#x27;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;未注册&#x27;</span>)<br>    )<br>    status = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;状态&#x27;</span>, choices=status_choices, default=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h4 id="2-靓号列表"><a href="#2-靓号列表" class="headerlink" title="2.靓号列表"></a>2.靓号列表</h4><ul><li>url</li><li>函数<ul><li>获取所有靓号</li><li>结合html+render展示靓号</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 按照级别降序排序（select * from 表 order by lever desc</span><br>    phonenum = models.PrettyNum.objects.<span class="hljs-built_in">all</span>().order_by(<span class="hljs-string">&#x27;-level&#x27;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;phone_list.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;phonenum&#x27;</span>: phonenum&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;layout.html&#x27; %&#125;<br>&#123;% block title %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>靓号列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>&#123;% endblock %&#125;<br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/phone/add/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-plus&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>新建靓号<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 靓号列表<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-condensed table-bordered&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>号码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>价格<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>星级<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>状态<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>                &#123;% for pninfo in phonenum %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>&#123;&#123; pninfo.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.moblie &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.price &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.get_level_display &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.get_status_display &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/phone/&#123;&#123; pninfo.id &#125;&#125;/edit/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info btn-xs&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/phone/&#123;&#123; pninfo.id &#125;&#125;/delete/&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h4 id="3-新建靓号"><a href="#3-新建靓号" class="headerlink" title="3.新建靓号"></a>3.新建靓号</h4><ul><li>列表点击跳转：<code>/phone/add/</code></li><li>url</li><li>ModelForm类</li><li>函数<ul><li>实例化类对象</li><li>通过render将对象传入html中</li><li>模板循环展示所有字段</li><li>处理提交数据，数据验证</li><li>数据保存</li><li>重定向回数据展示页面</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneModelForm</span>(forms.ModelForm):<br>    <span class="hljs-comment"># 验证：方式1（字段+正则）</span><br>    <span class="hljs-comment"># pnumber = forms.CharField(</span><br>    <span class="hljs-comment">#     label=&quot;号码&quot;,</span><br>    <span class="hljs-comment">#     # 正则表达式校验格式</span><br>    <span class="hljs-comment">#     validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;, &#x27;手机号格式错误&#x27;)],</span><br>    <span class="hljs-comment"># )</span><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.PrettyNum<br>        <span class="hljs-comment"># fields = &quot;__all__&quot; 展示所有字段</span><br>        fields = [<span class="hljs-string">&quot;moblie&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>]<br>        <span class="hljs-comment"># exclude = [&quot;字段名&quot;] 排除某个字段</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        <span class="hljs-comment"># 循环找到所有的字段,给其添加样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;input form-control&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br><br>    <span class="hljs-comment"># 验证：方式2(钩子方法)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_moblie</span>(<span class="hljs-params">self</span>):<br>        txt_mobile = self.cleaned_data[<span class="hljs-string">&quot;moblie&quot;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(txt_mobile) != <span class="hljs-number">11</span>:<br>            <span class="hljs-comment"># 验证不通过抛出异常</span><br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;格式错误&quot;</span>)<br>            <span class="hljs-comment"># 验证通过,返回用户输入值</span><br>            <span class="hljs-comment"># return什么数据库到时候保存的就是什么值</span><br>        <span class="hljs-keyword">return</span> txt_mobile<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        form = PhoneModelForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;phone_add.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br>    form = PhoneModelForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/phone/list/&#x27;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;phone_add.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br></code></pre></td></tr></table></figure><p>==字段验证==</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221214130011283.png" alt="image-20221214130011283" style="zoom: 33%;" /><p>不允许手机号重复</p><ul><li>添加：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_moblie</span>(<span class="hljs-params">self</span>):<br>    txt_mobile = self.cleaned_data[<span class="hljs-string">&quot;moblie&quot;</span>]<br>    exist = models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(moblie=txt_mobile).exists()<br>    <span class="hljs-keyword">if</span> exist:<br>        <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;手机号已存在&quot;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(txt_mobile) != <span class="hljs-number">11</span>:<br>        <span class="hljs-comment"># 验证不通过抛出异常</span><br>        <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;格式错误&quot;</span>)<br>        <span class="hljs-comment"># 验证通过,返回用户输入值</span><br>    <span class="hljs-keyword">return</span> txt_mobile<br></code></pre></td></tr></table></figure><ul><li>编辑：</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">exclude(self.instance.pk)排出自己以外，其他的数据是否和提交的手机号重复<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_moblie</span>(<span class="hljs-params">self</span>):<br>        txt_mobile = self.cleaned_data[<span class="hljs-string">&quot;moblie&quot;</span>]<br>        exist = models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(moblie=txt_mobile).exclude(<span class="hljs-built_in">id</span>=self.instance.pk).exists()<br>        <span class="hljs-keyword">if</span> exist:<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;手机号已存在&quot;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(txt_mobile) != <span class="hljs-number">11</span>:<br>            <span class="hljs-comment"># 验证不通过抛出异常</span><br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;格式错误&quot;</span>)<br>            <span class="hljs-comment"># 验证通过,返回用户输入值</span><br>        <span class="hljs-keyword">return</span> txt_mobile<br></code></pre></td></tr></table></figure><h4 id="4-编辑靓号"><a href="#4-编辑靓号" class="headerlink" title="4.编辑靓号"></a>4.编辑靓号</h4><ul><li><p>列表页面：<code>/phone/数字/edit/</code></p></li><li><p>url中传递参数<code>&lt;int:nid&gt;</code></p></li><li><p>函数</p><ul><li>根据ID获取当前编辑的对象</li><li>ModelForm配合，默认显示数据</li><li>提交修改</li></ul></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;编辑靓号&quot;&quot;&quot;</span><br>    rowobj = models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        form = EditPhoneModelForm(instance=rowobj)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;phone_edit.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br>    form = EditPhoneModelForm(data=request.POST, instance=rowobj)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/phone/list/&#x27;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;phone_edit.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br></code></pre></td></tr></table></figure><h4 id="5-删除靓号"><a href="#5-删除靓号" class="headerlink" title="5.删除靓号"></a>5.删除靓号</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_delete</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;删除靓号&quot;&quot;&quot;</span><br>    models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first().delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/phone/list/&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="6-搜索靓号"><a href="#6-搜索靓号" class="headerlink" title="6.搜索靓号"></a>6.搜索靓号</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(mobile=<span class="hljs-string">&quot;13771966523&quot;</span>，<span class="hljs-built_in">id</span>=<span class="hljs-number">2</span>)<br><br>search_dict = &#123;<span class="hljs-string">&quot;mobile&quot;</span>:<span class="hljs-string">&quot;13771966523&quot;</span>，<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>&#125;<br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(**search_dict)<br></code></pre></td></tr></table></figure><p><strong>查询条件</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#数字条件</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=<span class="hljs-number">2</span>)  <span class="hljs-comment">#等于2</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(id__gt=<span class="hljs-number">2</span>) <span class="hljs-comment">#大于2</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(id__gt=<span class="hljs-number">2</span>) <span class="hljs-comment">#大于2</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(id__gte=<span class="hljs-number">2</span>)<span class="hljs-comment">#大于等于2</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(id__lt=<span class="hljs-number">2</span>) <span class="hljs-comment">#小于2</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(id__lte=<span class="hljs-number">2</span>)<span class="hljs-comment">#小于等于2</span><br><br>search_dict = &#123;<span class="hljs-string">&quot;id__gt&quot;</span>:<span class="hljs-number">2</span>&#125;<br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(**search_dict)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#字符串条件</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(mobile=<span class="hljs-string">&quot;137&quot;</span>)<span class="hljs-comment">#等于137</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(mobile__startswith=<span class="hljs-string">&quot;137&quot;</span>)<span class="hljs-comment">#以137开头</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(mobile__endswith=<span class="hljs-string">&quot;137&quot;</span>)<span class="hljs-comment">#以137结尾</span><br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(mobile__contains=<span class="hljs-string">&quot;137&quot;</span>)<span class="hljs-comment">#包含有137</span><br><br>search_dict = &#123;<span class="hljs-string">&quot;mobile__startswith&quot;</span>:<span class="hljs-string">&quot;137&quot;</span>&#125;<br>models.PhoneNum.objects.<span class="hljs-built_in">filter</span>(**search_dict)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;靓号列表&quot;&quot;&quot;</span><br>    search_dict = &#123;<span class="hljs-string">&#x27;mobile__contains&#x27;</span>: <span class="hljs-string">&quot;&quot;</span>&#125;<br>    res = request.GET.get(<span class="hljs-string">&quot;m&quot;</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> res:<br>        search_dict[<span class="hljs-string">&#x27;mobile__contains&#x27;</span>] = res<br>    <span class="hljs-comment"># 按照级别降序排序（select * from 表 order by lever desc</span><br>    phonenum = models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(**search_dict).order_by(<span class="hljs-string">&#x27;-level&#x27;</span>)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;phone_list.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;phonenum&#x27;</span>: phonenum, <span class="hljs-string">&#x27;res&#x27;</span>: res&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clearfix&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/phone/add/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-plus&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>新建靓号<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: right;width: 300px&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;m&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search for ···&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">res</span> &#125;&#125;&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-search&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-分页"><a href="#7-分页" class="headerlink" title="7.分页"></a>7.分页</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">queryset = models<span class="hljs-selector-class">.PhoneNum</span><span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.all</span>()<span class="hljs-selector-attr">[:10]</span>#取搜索到的前十条数据<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot;-------------------------------------view.py-------------------------------------&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">phone_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 靓号列表 &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 号码参数初始化</span><br>    search_dict = &#123;&#125;<br>    <span class="hljs-comment"># 获取号码搜索参数</span><br>    search_data = request.GET.get(key=<span class="hljs-string">&quot;m&quot;</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> search_data:<br>        search_dict[<span class="hljs-string">&#x27;mobile__contains&#x27;</span>] = search_data<br>    <span class="hljs-comment"># 页码参数初始化</span><br>    pagesize = <span class="hljs-number">10</span><br>    pageplus = <span class="hljs-number">5</span><br>    queryset = models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(**search_dict).order_by(<span class="hljs-string">&#x27;-level&#x27;</span>)<br>    <span class="hljs-comment"># 获取当前页面对象</span><br>    page_obj = pagination.Pagination(request, query_set=queryset, page_size=pagesize, page_plus=pageplus)<br>    <span class="hljs-comment"># 获取页面数据</span><br>    page_queryset = page_obj.page_queryset<br>    <span class="hljs-comment"># 获取html信息</span><br>    <span class="hljs-comment"># 方法一：获取django模板信息</span><br>    <span class="hljs-comment"># pagels, pageinfo = page_obj.djangotemplateinfo()</span><br>    <span class="hljs-comment"># context = &#123;</span><br>    <span class="hljs-comment">#     &#x27;page_queryset&#x27;: page_queryset,</span><br>    <span class="hljs-comment">#     &#x27;search_data&#x27;: search_data,</span><br>    <span class="hljs-comment">#     &#x27;pagels&#x27;: pagels,</span><br>    <span class="hljs-comment">#     &#x27;pageinfo&#x27;: pageinfo</span><br>    <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-comment"># return render(request, &#x27;phone_list.html&#x27;,context)</span><br>    <span class="hljs-comment"># 方法二：获取html字符串</span><br>    page_str = page_obj.htmlstr()<br>    context = &#123;<br>        <span class="hljs-string">&#x27;page_queryset&#x27;</span>: page_queryset,<br>        <span class="hljs-string">&#x27;search_data&#x27;</span>: search_data,<br>        <span class="hljs-string">&#x27;page_str&#x27;</span>: page_str<br>    &#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;phone_list.html&#x27;</span>, context)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&quot;&quot;-------------------------------------前端页面-------------------------------------&quot;&quot;&quot;<br>&quot;&quot;&quot;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination pagination-xs&quot;</span>&gt;</span><br>                &#123;#                方法二对应的分页展示方法#&#125;<br>                                    &#123;&#123; page_str &#125;&#125;<br>                &#123;#                方法一对应的分页展示方法#&#125;<br>                &#123;#                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>#&#125;<br>                &#123;#                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; pageinfo.lpage &#125;&#125;&amp;&amp;m=&#123;&#123; search_data &#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-less-than&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>#&#125;<br>                &#123;#                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#&#125;<br>                &#123;#                &#123;% for page in pagels %&#125;#&#125;<br>                &#123;#                    &#123;% if page != pageinfo.nowpage %&#125;#&#125;<br>                &#123;#                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>#&#125;<br>                &#123;#                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; page &#125;&#125;&amp;&amp;m=&#123;&#123; search_data &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>#&#125;<br>                &#123;#                        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#&#125;<br>                &#123;#                    &#123;% else %&#125;#&#125;<br>                &#123;#                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span>&gt;</span>#&#125;<br>                &#123;#                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; page &#125;&#125;&amp;&amp;m=&#123;&#123; search_data &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>#&#125;<br>                &#123;#                        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#&#125;<br>                &#123;#                    &#123;% endif %&#125;#&#125;<br>                &#123;#                &#123;% endfor %&#125;#&#125;<br>                &#123;#                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>#&#125;<br>                &#123;#                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;?page=&#123;&#123; pageinfo.npage &#125;&#125;&amp;&amp;m=&#123;&#123; search_data &#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-greater-than&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>#&#125;<br>                &#123;#                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#&#125;<br>                &#123;#                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 150px;float: right&quot;</span>&gt;</span>#&#125;<br>                &#123;#                    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span>#&#125;<br>                &#123;#                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span>#&#125;<br>                &#123;#                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;page&quot;</span>#&#125;</span><br><span class="hljs-tag">                &#123;#                                   <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search for ···&quot;</span>#&#125;</span><br><span class="hljs-tag">                &#123;#                                   <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>#&#125;</span><br><span class="hljs-tag">                &#123;#                                   <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">pageinfo.nowpage</span> &#125;&#125;&gt;</span>#&#125;<br>                &#123;#                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span>#&#125;<br>                &#123;#                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; fa-brands fa-airbnb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>#&#125;<br>                &#123;#                        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>#&#125;<br>                &#123;#                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>#&#125;<br>                &#123;#                    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>#&#125;<br>                &#123;#                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&quot;&quot;&quot;<br></code></pre></td></tr></table></figure><h3 id="3-个人自定义组件"><a href="#3-个人自定义组件" class="headerlink" title="3.个人自定义组件"></a>3.个人自定义组件</h3><h4 id="3-1分页组件"><a href="#3-1分页组件" class="headerlink" title="3.1分页组件"></a>3.1分页组件</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-string">&quot;&quot;&quot;--------------------------------------自定义分页组件类------------------------------------&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;-----------------------------------------信息栏------------------------------------------&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;datetime: 2022-12-15 1:13&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;author:   Alleyf&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;email:    alleyf@qq.com&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;-------------------------------------view.py使用教程-------------------------------------&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">def phone_list(request):</span><br><span class="hljs-string">    # 1.搜索参数初始化</span><br><span class="hljs-string">    search_dict = &#123;&#125;</span><br><span class="hljs-string">    # 获取号码搜索参数</span><br><span class="hljs-string">    search_data = request.GET.get(key=&quot;m&quot;, default=&#x27;&#x27;)</span><br><span class="hljs-string">    if search_data:</span><br><span class="hljs-string">        search_dict[&#x27;mobile__contains&#x27;] = search_data</span><br><span class="hljs-string">    # 2.页码参数初始化</span><br><span class="hljs-string">    pagesize = 10</span><br><span class="hljs-string">    pageplus = 5</span><br><span class="hljs-string">    # 3.筛选符合条件的数据</span><br><span class="hljs-string">    queryset = models.PrettyNum.objects.filter(**search_dict).order_by(&#x27;-level&#x27;)</span><br><span class="hljs-string">    # 4.实例化页面对象</span><br><span class="hljs-string">    page_obj = pagination.Pagination(request, query_set=queryset, page_size=pagesize, page_plus=pageplus)</span><br><span class="hljs-string">    # 5.获取页面数据</span><br><span class="hljs-string">    page_queryset = page_obj.page_queryset</span><br><span class="hljs-string">     # 6.获取分页展示所需的信息</span><br><span class="hljs-string">    # 6.1方法一：获取django模板信息</span><br><span class="hljs-string">    # pagels, pageinfo = page_obj.djangotemplateinfo()</span><br><span class="hljs-string">    # context = &#123;</span><br><span class="hljs-string">    #     页面数据信息</span><br><span class="hljs-string">    #     &#x27;page_queryset&#x27;: page_queryset,</span><br><span class="hljs-string">    #     搜索参数    </span><br><span class="hljs-string">    #     &#x27;search_data&#x27;: search_data,</span><br><span class="hljs-string">    #     页码标号    </span><br><span class="hljs-string">    #     &#x27;pagels&#x27;: pagels,</span><br><span class="hljs-string">    #     当前及前后页信息</span><br><span class="hljs-string">    #     &#x27;pageinfo&#x27;: pageinfo</span><br><span class="hljs-string">    # &#125;</span><br><span class="hljs-string">    # return render(request, &#x27;phone_list.html&#x27;,context)</span><br><span class="hljs-string">    # 6.2方法二：获取html字符串</span><br><span class="hljs-string">    page_str = page_obj.htmlstr()</span><br><span class="hljs-string">    context = &#123;</span><br><span class="hljs-string">    #     页面数据信息</span><br><span class="hljs-string">        &#x27;page_queryset&#x27;: page_queryset,</span><br><span class="hljs-string">    #     搜索参数         </span><br><span class="hljs-string">        &#x27;search_data&#x27;: search_data,</span><br><span class="hljs-string">    #     分页html字符串组件 </span><br><span class="hljs-string">        &#x27;page_str&#x27;: page_str</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    return render(request, &#x27;phone_list.html&#x27;, context)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;-------------------------------------前端页面使用教程-------------------------------------&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        &lt;div class=&quot;text-center&quot;&gt;</span><br><span class="hljs-string">            &lt;ul class=&quot;pagination pagination-xs&quot;&gt;</span><br><span class="hljs-string">                &#123;#                方法二对应的分页展示方法#&#125;</span><br><span class="hljs-string">                                    &#123;&#123; page_str &#125;&#125;</span><br><span class="hljs-string">                &#123;#                方法一对应的分页展示方法#&#125;</span><br><span class="hljs-string">                &#123;#                &lt;li&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                    &lt;a href=&quot;?page=&#123;&#123; pageinfo.lpage &#125;&#125;&amp;&amp;m=&#123;&#123; search_data &#125;&#125;&quot;&gt;&lt;i class=&quot;fa fa-less-than&quot;&gt;&lt;/i&gt;&lt;/a&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                &lt;/li&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                &#123;% for page in pagels %&#125;#&#125;</span><br><span class="hljs-string">                &#123;#                    &#123;% if page != pageinfo.nowpage %&#125;#&#125;</span><br><span class="hljs-string">                &#123;#                        &lt;li&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                            &lt;a href=&quot;?page=&#123;&#123; page &#125;&#125;&amp;&amp;m=&#123;&#123; search_data &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                        &lt;/li&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                    &#123;% else %&#125;#&#125;</span><br><span class="hljs-string">                &#123;#                        &lt;li class=&quot;active&quot;&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                            &lt;a href=&quot;?page=&#123;&#123; page &#125;&#125;&amp;&amp;m=&#123;&#123; search_data &#125;&#125;&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                        &lt;/li&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                    &#123;% endif %&#125;#&#125;</span><br><span class="hljs-string">                &#123;#                &#123;% endfor %&#125;#&#125;</span><br><span class="hljs-string">                &#123;#                &lt;li&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                    &lt;a href=&quot;?page=&#123;&#123; pageinfo.npage &#125;&#125;&amp;&amp;m=&#123;&#123; search_data &#125;&#125;&quot;&gt;&lt;i class=&quot;fa fa-greater-than&quot;&gt;&lt;/i&gt;&lt;/a&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                &lt;/li&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                &lt;li style=&quot;width: 150px;float: right&quot;&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                    &lt;form method=&quot;get&quot;&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                        &lt;div class=&quot;input-group&quot;&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                            &lt;input type=&quot;text&quot; name=&quot;page&quot;#&#125;</span><br><span class="hljs-string">                &#123;#                                   placeholder=&quot;Search for ···&quot;#&#125;</span><br><span class="hljs-string">                &#123;#                                   class=&quot;form-control&quot;#&#125;</span><br><span class="hljs-string">                &#123;#                                   value=&#123;&#123; pageinfo.nowpage &#125;&#125;&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                            &lt;span class=&quot;input-group-btn&quot;&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                        &lt;button class=&quot;btn btn-default&quot;&gt;&lt;i class=&quot; fa-brands fa-airbnb&quot;&gt;&lt;/i&gt; &lt;/button&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                        &lt;/span&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                        &lt;/div&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                    &lt;/form&gt;#&#125;</span><br><span class="hljs-string">                &#123;#                &lt;/li&gt;#&#125;</span><br><span class="hljs-string">            &lt;/ul&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;----------------------------------------分页类定义---------------------------------------&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> django.utils.safestring <span class="hljs-keyword">import</span> mark_safe  <span class="hljs-comment"># 确保html字符串安全</span><br><span class="hljs-keyword">import</span> copy  <span class="hljs-comment"># 深拷贝</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Pagination</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;构造函数&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, request, query_set, page_size=<span class="hljs-number">10</span>, page_param=<span class="hljs-string">&#x27;page&#x27;</span>, page_plus=<span class="hljs-number">2</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :param request: 请求的对象</span><br><span class="hljs-string">        :param query_set: 符合条件的查询的数据</span><br><span class="hljs-string">        :param page_size: 每页展示的数据量</span><br><span class="hljs-string">        :param page_param: 在url中获取分页参数 eg:/phone/list/?page=10</span><br><span class="hljs-string">        :param page_plus:   显示当前页的前后几页（页码）</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        page = request.GET.get(key=page_param, default=<span class="hljs-string">&quot;1&quot;</span>)<br>        <span class="hljs-keyword">if</span> page.isdecimal():<br>            page = <span class="hljs-built_in">int</span>(page)<br>        <span class="hljs-keyword">else</span>:<br>            page = <span class="hljs-number">1</span><br>        query_dict = copy.deepcopy(request.GET)<br>        query_dict._mutable = <span class="hljs-literal">True</span><br>        self.query_dict = query_dict  <span class="hljs-comment"># url的get参数</span><br>        self.page = page<br>        self.page_size = page_size<br>        self.page_param = page_param<br>        self.page_plus = page_plus<br>        self.start = (page - <span class="hljs-number">1</span>) * page_size<br>        self.end = page * page_size<br>        self.page_queryset = query_set[self.start:self.end]<br>        self.total_cnt = query_set.count()<br>        total_page_cnt, remainder = <span class="hljs-built_in">divmod</span>(self.total_cnt, page_size)<br>        <span class="hljs-keyword">if</span> remainder:<br>            total_page_cnt += <span class="hljs-number">1</span><br>        self.total_page_cnt = total_page_cnt<br><br>    <span class="hljs-string">&quot;&quot;&quot;方法1：Django模板法&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">djangotemplateinfo</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 显示当前页的前两页和后两页页码增量为2</span><br>        pagels = []<br>        pagestart = self.page - self.page_plus<br>        pageend = self.page + self.page_plus<br>        <span class="hljs-comment"># 若总页数小于5时</span><br>        <span class="hljs-keyword">if</span> self.total_page_cnt &lt; <span class="hljs-number">5</span>:<br>            pagestart = <span class="hljs-number">1</span><br>            pageend = self.total_page_cnt<br>        <span class="hljs-comment"># 若总页数大于等于5</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 若当前页小于等于页码增量</span><br>            <span class="hljs-keyword">if</span> self.page &lt;= self.page_plus:<br>                pagestart = <span class="hljs-number">1</span><br>                pageend = <span class="hljs-number">2</span> * self.page_plus + <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 若当前页尾大于总页数</span><br>            <span class="hljs-keyword">elif</span> pageend &gt; self.total_page_cnt:<br>                pagestart -= self.page_plus<br>                pageend = self.total_page_cnt<br>            <span class="hljs-comment"># 正常情况下</span><br>            <span class="hljs-keyword">else</span>:<br>                pagestart = self.page - self.page_plus<br>                pageend = self.page + self.page_plus<br>        <span class="hljs-comment"># 生成页码标号</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pagestart, pageend + <span class="hljs-number">1</span>):<br>            pagels.append(i)<br>        <span class="hljs-comment"># 当前页和其前后页信息</span><br>        pageinfo = &#123;<span class="hljs-string">&#x27;nowpage&#x27;</span>: self.page, <span class="hljs-string">&#x27;lpage&#x27;</span>: <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> self.page &lt;= <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> self.page - <span class="hljs-number">1</span>,<br>                    <span class="hljs-string">&#x27;npage&#x27;</span>: pageend <span class="hljs-keyword">if</span> self.page + <span class="hljs-number">1</span> &gt; pageend <span class="hljs-keyword">else</span> self.page + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;total_page&#x27;</span>: self.total_page_cnt&#125;<br>        <span class="hljs-keyword">return</span> pagels, pageinfo<br><br>    <span class="hljs-string">&quot;&quot;&quot;方法2：HTML字符串法&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">htmlstr</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 显示当前页的前两页和后两页页码增量为2</span><br>        self.start = self.page - self.page_plus<br>        self.end = self.page + self.page_plus<br>        <span class="hljs-comment"># 若总页数小于5时</span><br>        <span class="hljs-keyword">if</span> self.total_page_cnt &lt; <span class="hljs-number">5</span>:<br>            self.start = <span class="hljs-number">1</span><br>            self.end = self.total_page_cnt<br>        <span class="hljs-comment"># 若总页数大于等于5</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 若当前页小于等于页码增量</span><br>            <span class="hljs-keyword">if</span> self.page &lt;= self.page_plus:<br>                self.start = <span class="hljs-number">1</span><br>                self.end = <span class="hljs-number">2</span> * self.page_plus + <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 若当前页尾大于总页数</span><br>            <span class="hljs-keyword">elif</span> self.end &gt; self.total_page_cnt:<br>                self.start -= self.page_plus<br>                self.end = self.total_page_cnt<br>            <span class="hljs-comment"># 正常情况下</span><br>            <span class="hljs-keyword">else</span>:<br>                self.start = self.page - self.page_plus<br>                self.end = self.page + self.page_plus<br><br>        <span class="hljs-comment"># 生成页码</span><br>        page_str_ls = []<br>        <span class="hljs-comment"># 首页</span><br>        self.query_dict.setlist(self.page_param, [<span class="hljs-number">1</span>])<br>        page_str_ls.append(<span class="hljs-string">&#x27;&lt;li&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode()))<br>        <span class="hljs-comment"># 上一页</span><br>        self.query_dict.setlist(self.page_param, [self.page - <span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">if</span> self.page &gt; <span class="hljs-number">1</span>:<br>            prev = <span class="hljs-string">&#x27;&lt;li&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;&lt;i class=&quot;fa fa-less-than&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode())<br>        <span class="hljs-keyword">else</span>:<br>            self.query_dict.setlist(self.page_param, [<span class="hljs-number">1</span>])<br>            prev = <span class="hljs-string">&#x27;&lt;li&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;&lt;i class=&quot;fa fa-less-than&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode())<br>        page_str_ls.append(prev)<br>        <span class="hljs-comment"># 页面</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.start, self.end + <span class="hljs-number">1</span>):<br>            self.query_dict.setlist(self.page_param, [i])<br>            <span class="hljs-keyword">if</span> i == self.page:<br>                ele = <span class="hljs-string">&#x27;&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode(), i)<br>            <span class="hljs-keyword">else</span>:<br>                ele = <span class="hljs-string">&#x27;&lt;li&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;&#123;&#125;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode(), i)<br>            page_str_ls.append(ele)<br>        <span class="hljs-comment"># 下一页</span><br>        self.query_dict.setlist(self.page_param, [self.page + <span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">if</span> self.page &lt; self.total_page_cnt:<br>            nxt = <span class="hljs-string">&#x27;&lt;li&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;&lt;i class=&quot;fa fa-greater-than&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode())<br>        <span class="hljs-keyword">else</span>:<br>            self.query_dict.setlist(self.page_param, [self.total_page_cnt])<br>            nxt = <span class="hljs-string">&#x27;&lt;li&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;&lt;i class=&quot;fa fa-greater-than&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode())<br>        page_str_ls.append(nxt)<br>        <span class="hljs-comment"># 尾页</span><br>        self.query_dict.setlist(self.page_param, [self.total_page_cnt])<br>        page_str_ls.append(<span class="hljs-string">&#x27;&lt;li&gt;&lt;a href=&quot;?&#123;&#125;&quot;&gt;尾页&lt;/a&gt;&lt;/li&gt;&#x27;</span>.<span class="hljs-built_in">format</span>(self.query_dict.urlencode()))<br>        search_string = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        &lt;li style=&quot;width: 150px;float: right&quot;&gt;</span><br><span class="hljs-string">                &lt;form method=&quot;get&quot;&gt;</span><br><span class="hljs-string">                    &lt;div class=&quot;input-group&quot;&gt;</span><br><span class="hljs-string">                        &lt;input type=&quot;text&quot; name=&quot;page&quot;</span><br><span class="hljs-string">                                   placeholder=&quot;Page&quot;</span><br><span class="hljs-string">                                   class=&quot;form-control&quot;</span><br><span class="hljs-string">                                   value=&#123;&#125;&gt;</span><br><span class="hljs-string">                        &lt;span class=&quot;input-group-btn&quot;&gt;</span><br><span class="hljs-string">                        &lt;button class=&quot;btn btn-default&quot;&gt;&lt;i class=&quot; fa-brands fa-airbnb&quot;&gt;&lt;/i&gt; &lt;/button&gt;</span><br><span class="hljs-string">                        &lt;/span&gt;</span><br><span class="hljs-string">                    &lt;/div&gt;</span><br><span class="hljs-string">                &lt;/form&gt;</span><br><span class="hljs-string">        &lt;/li&gt;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(self.page)<br>        page_str_ls.append(search_string)<br>        page_str = mark_safe(<span class="hljs-string">&quot;&quot;</span>.join(page_str_ls))<br>        <span class="hljs-keyword">return</span> page_str<br><br><br><span class="hljs-string">&quot;&quot;&quot;----------------------------------------分割结束符---------------------------------------&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-2时间插件"><a href="#3-2时间插件" class="headerlink" title="3.2时间插件"></a>3.2时间插件</h4><ul><li><p>前端引入js和css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-datetimepicker-master/css/bootstrap-datetimepicker.min.css&#x27; %&#125;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-datetimepicker-master/js/bootstrap-datetimepicker.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>ModelForm表单类</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoModelForm</span>(forms.ModelForm):<br>    <span class="hljs-comment"># 数据库中的字段</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        <span class="hljs-comment">#模型设置为数据表模型</span><br>        model = models.Info<br>        fields = [<span class="hljs-string">&quot;create_time&quot;</span>]<br><span class="hljs-comment">#插件（可设置属性）</span><br> <span class="hljs-comment">#设置类型为datetime-local</span><br>        widgets = &#123;<br>            <span class="hljs-string">&quot;create_time&quot;</span>: forms.DateTimeInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot; form-control input&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;datetime-local&quot;</span>&#125;),<br>        &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        <span class="hljs-comment"># 循环找到所有的字段,给其添加样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;input form-control&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-ModelForm和BootStrap"><a href="#4-ModelForm和BootStrap" class="headerlink" title="4.ModelForm和BootStrap"></a>4.ModelForm和BootStrap</h3><blockquote><p><span alt="rainbow">ModelForm可以帮助我们生成html标签</span></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneModelForm</span>(forms.ModelForm):<br>    <span class="hljs-comment"># 验证：方式1</span><br>    <span class="hljs-comment"># pnumber = forms.CharField(</span><br>    <span class="hljs-comment">#     label=&quot;号码&quot;,</span><br>    <span class="hljs-comment">#     # 正则表达式校验格式</span><br>    <span class="hljs-comment">#     validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;, &#x27;手机号格式错误&#x27;)],</span><br>    <span class="hljs-comment"># )</span><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.PrettyNum<br>        <span class="hljs-comment"># fields = &quot;__all__&quot; 展示所有字段</span><br>        fields = [<span class="hljs-string">&quot;mobile&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>]<br>        <span class="hljs-comment"># exclude = [&quot;字段名&quot;] 排除某个字段</span><br>        <br>        <span class="hljs-comment">#插件</span><br><span class="hljs-comment"># 1.单独设置样式：id设置为IDmobile</span><br>        widgets = &#123;<br>            <span class="hljs-string">&quot;mobile&quot;</span>: forms.TextInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot; form-control input&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;IDmobile&quot;</span>&#125;),<br>        &#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        <span class="hljs-comment"># 2.批量设置样式：循环找到所有的字段,给其添加相同样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            <span class="hljs-comment"># 有责修改样式</span><br>            <span class="hljs-keyword">if</span> field.widget.attrs:<br>                field.widget.attrs[<span class="hljs-string">&quot;class&quot;</span>] = <span class="hljs-string">&quot;form-control&quot;</span><br>                field.widget.attrs[<span class="hljs-string">&quot;placeholder&quot;</span>] = field.label<br>        <span class="hljs-comment"># 无责添加样式    </span><br>        <span class="hljs-keyword">else</span>:<br>            field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;input form-control&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br><br>    <span class="hljs-comment"># 验证：方式2(钩子方法)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_mobile</span>(<span class="hljs-params">self</span>):<br>        txt_mobile = self.cleaned_data[<span class="hljs-string">&quot;mobile&quot;</span>]<br>        exist = models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(mobile=txt_mobile).exists()<br>        <span class="hljs-keyword">if</span> exist:<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;手机号已存在&quot;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(txt_mobile) != <span class="hljs-number">11</span>:<br>            <span class="hljs-comment"># 验证不通过抛出异常</span><br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;格式错误&quot;</span>)<br>            <span class="hljs-comment"># 验证通过,返回用户输入值</span><br>        <span class="hljs-keyword">return</span> txt_mobile<br>form = PhoneModelForm()<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">form.mobile</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">form.price</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">form.level</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">form.status</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="1-自定义表单标签类"><a href="#1-自定义表单标签类" class="headerlink" title="1.自定义表单标签类"></a>1.自定义表单标签类</h4><p>==日期必须重设样式==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BootStrapModelForm</span>(forms.ModelForm):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        <span class="hljs-comment"># 2.批量设置样式：循环找到所有的字段,给其添加相同样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            <span class="hljs-comment"># 有责修改样式</span><br>            <span class="hljs-keyword">if</span> field.widget.attrs:<br>                field.widget.attrs[<span class="hljs-string">&quot;class&quot;</span>] = <span class="hljs-string">&quot;input form-control&quot;</span><br>                field.widget.attrs[<span class="hljs-string">&quot;placeholder&quot;</span>] = field.label<br>            <span class="hljs-comment"># 无责添加样式</span><br>            <span class="hljs-keyword">else</span>:<br>                field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;input form-control&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneModelForm</span>(<span class="hljs-title class_ inherited__">BootStrapModelForm</span>):<br>    <span class="hljs-comment"># 验证：方式1</span><br>    <span class="hljs-comment"># pnumber = forms.CharField(</span><br>    <span class="hljs-comment">#     label=&quot;号码&quot;,</span><br>    <span class="hljs-comment">#     # 正则表达式校验格式</span><br>    <span class="hljs-comment">#     validators=[RegexValidator(r&#x27;^1[3-9]\d&#123;9&#125;$&#x27;, &#x27;手机号格式错误&#x27;)],</span><br>    <span class="hljs-comment"># )</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.PrettyNum<br>        <span class="hljs-comment"># fields = &quot;__all__&quot; 展示所有字段</span><br>        fields = [<span class="hljs-string">&quot;mobile&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;level&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>]<br>        <span class="hljs-comment"># exclude = [&quot;字段名&quot;] 排除某个字段</span><br>        <span class="hljs-comment">#插件</span><br><span class="hljs-comment"># 1.单独设置样式：id设置为IDmobile，日期必须重设样式</span><br>        widgets = &#123;<br>            <span class="hljs-string">&quot;mobile&quot;</span>: forms.TextInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot; form-control input&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;IDmobile&quot;</span>&#125;),<br>            <span class="hljs-string">&quot;create_time&quot;</span>: forms.DateTimeInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot; form-control input&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;datetime-local&quot;</span>&#125;)<br>        &#125;<br>    <span class="hljs-comment"># 验证：方式2(钩子方法)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_mobile</span>(<span class="hljs-params">self</span>):<br>        txt_mobile = self.cleaned_data[<span class="hljs-string">&quot;mobile&quot;</span>]<br>        exist = models.PrettyNum.objects.<span class="hljs-built_in">filter</span>(mobile=txt_mobile).exists()<br>        <span class="hljs-keyword">if</span> exist:<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;手机号已存在&quot;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(txt_mobile) != <span class="hljs-number">11</span>:<br>            <span class="hljs-comment"># 验证不通过抛出异常</span><br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;格式错误&quot;</span>)<br>            <span class="hljs-comment"># 验证通过,返回用户输入值</span><br>        <span class="hljs-keyword">return</span> txt_mobile<br></code></pre></td></tr></table></figure><h3 id="5-管理员操作"><a href="#5-管理员操作" class="headerlink" title="5.管理员操作"></a>5.管理员操作</h3><h4 id="1-管理员列表"><a href="#1-管理员列表" class="headerlink" title="1.管理员列表"></a>1.管理员列表</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#utils/form.py</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AdminModelForm</span>(bootstrapmodelform.BootStrapModelForm):<br>    confirm_password = forms.fields.CharField(<br>        label=<span class="hljs-string">&quot;确认密码&quot;</span>,<br>        max_length=<span class="hljs-number">64</span>,<br>        <span class="hljs-comment"># render_value=True使校验失败后值不被清空</span><br>        widget=forms.PasswordInput(render_value=<span class="hljs-literal">True</span>),<br>        <span class="hljs-comment"># 正则表达式校验格式</span><br>        validators=[RegexValidator(<span class="hljs-string">r&#x27;^[\w]&#123;6,16&#125;$&#x27;</span>, <span class="hljs-string">&#x27;6~16位，包含大小写字母和数字的组合&#x27;</span>)],<br>    )<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.Admin<br>        fields = [<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;confirm_password&quot;</span>]<br>        widgets = &#123;<span class="hljs-string">&quot;password&quot;</span>: forms.PasswordInput(attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;form-control input&quot;</span>&#125;, render_value=<span class="hljs-literal">True</span>)&#125;<br><br>    <span class="hljs-comment"># 验证用户名是否已存在</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_username</span>(<span class="hljs-params">self</span>):<br>        username = self.cleaned_data[<span class="hljs-string">&quot;username&quot;</span>]<br>        exist = models.Admin.objects.<span class="hljs-built_in">filter</span>(username=username).exists()<br>        <span class="hljs-keyword">if</span> exist:<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;用户名已存在&quot;</span>)<br>        <span class="hljs-comment"># return什么数据库到时候保存的就是什么值</span><br>        <span class="hljs-keyword">return</span> username<br><br>    <span class="hljs-comment"># 对密码进行md5加密</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_password</span>(<span class="hljs-params">self</span>):<br>        pwd = self.cleaned_data[<span class="hljs-string">&quot;password&quot;</span>]<br>        <span class="hljs-keyword">return</span> md5(pwd)<br><br>    <span class="hljs-comment"># 验证密码是否一致</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_confirm_password</span>(<span class="hljs-params">self</span>):<br>        password = self.cleaned_data[<span class="hljs-string">&quot;password&quot;</span>]<br>        confirm = md5(self.cleaned_data[<span class="hljs-string">&quot;confirm_password&quot;</span>])<br>        <span class="hljs-keyword">if</span> confirm != password:<br>            <span class="hljs-keyword">raise</span> ValidationError(<span class="hljs-string">&quot;密码不一致&quot;</span>)<br>        <span class="hljs-keyword">return</span> confirm<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#views/admin.py</span><br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect<br><br><span class="hljs-keyword">from</span> staffsys <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> staffsys.utils <span class="hljs-keyword">import</span> pagination<br><span class="hljs-keyword">from</span> staffsys.utils.form <span class="hljs-keyword">import</span> AdminModelForm, RstModelForm<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;管理员列表&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 参数初始化</span><br>    search_dict = &#123;&#125;<br>    <span class="hljs-comment"># 获取管理员搜索参数</span><br>    search_data = request.GET.get(key=<span class="hljs-string">&quot;u&quot;</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> search_data:<br>        search_dict[<span class="hljs-string">&#x27;username__contains&#x27;</span>] = search_data<br>    queryset = models.Admin.objects.<span class="hljs-built_in">filter</span>(**search_dict).order_by(<span class="hljs-string">&#x27;id&#x27;</span>)<br>    <span class="hljs-comment"># 获取当前页面对象</span><br>    page_obj = pagination.Pagination(request, query_set=queryset)<br>    <span class="hljs-comment"># 获取页面数据</span><br>    page_queryset = page_obj.page_queryset<br>    page_str = page_obj.htmlstr()<br>    context = &#123;<br>        <span class="hljs-string">&quot;queryset&quot;</span>: page_queryset,<br>        <span class="hljs-string">&#x27;search_data&#x27;</span>: search_data,<br>        <span class="hljs-string">&quot;page_str&quot;</span>: page_str<br>    &#125;<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;admin_list.html&quot;</span>, context)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html">admin_list.html<br>&#123;% extends &#x27;layout.html&#x27; %&#125;<br>&#123;% block mytitle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>管理员列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>&#123;% endblock %&#125;<br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/admin/add/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-plus&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>新建管理员<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: right;width: 300px&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;u&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search for username&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">                               <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">search_data</span> &#125;&#125;&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-search&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>管理员列表<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-condensed table-bordered&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>重置密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>                &#123;% for admin in queryset %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>&#123;&#123; admin.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; admin.username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; admin.password &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/admin/&#123;&#123; admin.id &#125;&#125;/reset/&quot;</span>&gt;</span>重置密码<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/admin/&#123;&#123; admin.id &#125;&#125;/edit/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info btn-xs&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/admin/&#123;&#123; admin.id &#125;&#125;/delete/&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination pagination-xs&quot;</span>&gt;</span><br>                &#123;&#123; page_str &#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h4 id="2-添加管理员"><a href="#2-添加管理员" class="headerlink" title="2.添加管理员"></a>2.添加管理员</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#views/admin.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_add</span>(<span class="hljs-params">request</span>):<br>    title = <span class="hljs-string">&quot;新建管理员&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = AdminModelForm()<br>        context = &#123;<br>            <span class="hljs-string">&#x27;title&#x27;</span>: title,<br>            <span class="hljs-string">&#x27;form&#x27;</span>: form<br>        &#125;<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;change.html&quot;</span>, context)<br>    form = AdminModelForm(data=request.POST)<br>    context = &#123;<br>        <span class="hljs-string">&#x27;title&#x27;</span>: title,<br>        <span class="hljs-string">&#x27;form&#x27;</span>: form<br>    &#125;<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/admin/list/&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;change.html&quot;</span>, context)<br><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs html">change.html<br>&#123;% extends &#x27;layout.html&#x27; %&#125; # 继承父模块的标识<br>&#123;% block mytitle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#1e2732</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: transparent;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: background-color .<span class="hljs-number">3s</span> ease-in-out;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e5dcd</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>, <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>-visible &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#3898EC</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>                &#123;% block actiontitle %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                &#123;% endblock %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>                    &#123;% block myform %&#125;<br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group col-md-12&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>                            &#123;% csrf_token %&#125;<br>                            &#123;% for item in form %&#125;<br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-6&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    &#123;&#123; item &#125;&#125;<br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #c12c1f&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;&#123; item.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            &#123;% endfor %&#125;<br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-6&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button--submit &quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Subscribe&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    &#123;% endblock %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h4 id="3-编辑管理员"><a href="#3-编辑管理员" class="headerlink" title="3.编辑管理员"></a>3.编辑管理员</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#/views/admin.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_edit</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;编辑管理员&quot;&quot;&quot;</span><br>    title = <span class="hljs-string">&quot;编辑管理员&quot;</span><br>    rowobj = models.Admin.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">if</span> rowobj:<br>            form = AdminModelForm(instance=rowobj)<br>            context = &#123;<br>                <span class="hljs-string">&quot;title&quot;</span>: title,<br>                <span class="hljs-string">&quot;form&quot;</span>: form<br>            &#125;<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;change.html&quot;</span>, context)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)<br>    form = AdminModelForm(data=request.POST, instance=rowobj)<br>    context = &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: title,<br>        <span class="hljs-string">&quot;form&quot;</span>: form<br>    &#125;<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        form.save()<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;change.html&quot;</span>, context)<br></code></pre></td></tr></table></figure><p>==change.html同上==</p><h4 id="4-删除管理员"><a href="#4-删除管理员" class="headerlink" title="4.删除管理员"></a>4.删除管理员</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#/views/admin.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_delete</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;删除管理员&quot;&quot;&quot;</span><br>    models.Admin.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first().delete()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)<br><br></code></pre></td></tr></table></figure><h4 id="5-重置密码"><a href="#5-重置密码" class="headerlink" title="5.重置密码"></a>5.重置密码</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#/views/admin.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_reset</span>(<span class="hljs-params">request, nid</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;重置密码&quot;&quot;&quot;</span><br>    rowobj = models.Admin.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=nid).first()<br>    title = <span class="hljs-string">&quot;重置密码-&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(rowobj.username)<br>    <span class="hljs-keyword">if</span> rowobj:<br>        <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>            form = RstModelForm()<br>            context = &#123;<br>                <span class="hljs-string">&quot;title&quot;</span>: title,<br>                <span class="hljs-string">&quot;form&quot;</span>: form<br>            &#125;<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;change.html&quot;</span>, context)<br>        form = RstModelForm(data=request.POST, instance=rowobj)<br>        context = &#123;<br>            <span class="hljs-string">&quot;title&quot;</span>: title,<br>            <span class="hljs-string">&quot;form&quot;</span>: form<br>        &#125;<br>        <span class="hljs-keyword">if</span> form.is_valid():<br>            form.save()<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;change.html&quot;</span>, context)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="6-用户登录"><a href="#6-用户登录" class="headerlink" title="6.用户登录"></a>6.用户登录</h3><p>什么事cookie和session？</p><blockquote><p>用户发起请求时浏览器会产生一个<strong>cookie（sessionid）（随机字符串）</strong>里面包含用户的信息，该cookie会存储在<strong>用户浏览器</strong>中，而<strong>服务端</strong>也会存储该<strong>cookie（session_key）</strong>，并且存储该用户的<strong>session信息</strong>，以此来区别不同用户并且实现<strong>有状态</strong>和<strong>长连接</strong>。</p></blockquote><ul><li>```web-idl<br><a href="https://fcsy.fit/">https://fcsy.fit</a><br><a href="http://fcsy.fit/">http://fcsy.fit</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>  **http请求为无状态&amp;&amp;短连接**<br><br><span class="hljs-comment">#### **form.py**</span><br><br>```py<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginForm</span>(forms.Form):<br>    <span class="hljs-string">&quot;&quot;&quot;登录表单&quot;&quot;&quot;</span><br>    username = forms.CharField(<br>        label=<span class="hljs-string">&quot;用户名&quot;</span>,<br>        max_length=<span class="hljs-number">32</span>,<br>        widget=forms.TextInput,<br>        required=<span class="hljs-literal">True</span>,<br>    )<br>    password = forms.CharField(<br>        label=<span class="hljs-string">&quot;密码&quot;</span>,<br>        max_length=<span class="hljs-number">64</span>,<br>        widget=forms.PasswordInput(render_value=<span class="hljs-literal">True</span>),<br>        required=<span class="hljs-literal">True</span>,<br>    )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        <span class="hljs-comment"># 2.批量设置样式：循环找到所有的字段,给其添加相同样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            <span class="hljs-comment"># 有责修改样式</span><br>            <span class="hljs-keyword">if</span> field.widget.attrs:<br>                field.widget.attrs[<span class="hljs-string">&quot;class&quot;</span>] = <span class="hljs-string">&quot;input-item&quot;</span><br>                field.widget.attrs[<span class="hljs-string">&quot;placeholder&quot;</span>] = field.label<br><br>            <span class="hljs-comment"># 无责添加样式</span><br>            <span class="hljs-keyword">else</span>:<br>                field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;input-item&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_password</span>(<span class="hljs-params">self</span>):<br>        pwd = self.cleaned_data.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-keyword">return</span> md5(pwd)<br></code></pre></td></tr></table></figure></li></ul><h4 id="cookie和session"><a href="#cookie和session" class="headerlink" title="==cookie和session=="></a>==cookie和session==</h4><blockquote><p><font title=blue>实现对用户信息的保存</font></p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect<br><span class="hljs-keyword">from</span> staffsys.utils.form <span class="hljs-keyword">import</span> LoginForm<br><span class="hljs-keyword">from</span> staffsys.models <span class="hljs-keyword">import</span> Admin<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = LoginForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br>    form = LoginForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 去数据库校验用户名和密码是否存在且正确</span><br>        usrobj = Admin.objects.<span class="hljs-built_in">filter</span>(**form.cleaned_data).first()<br>        <span class="hljs-keyword">if</span> usrobj:<br>            <span class="hljs-comment"># 用户名和密码正确</span><br>            <span class="hljs-comment"># 构建session信息</span><br>            request.session[<span class="hljs-string">&quot;info&quot;</span>] = &#123;<span class="hljs-string">&quot;id&quot;</span>: usrobj.<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;name&quot;</span>: usrobj.username&#125;<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)<br>        form.add_error(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br></code></pre></td></tr></table></figure><h4 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load static %&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/fontawesome-free-6.2.1-web/css/fontawesome.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;css/login.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.size</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#vcode</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-comment">/*padding-left: 8px;*/</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#code</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*字体颜色白色*/</span></span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(plum, powderblue);</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18pt</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*margin: 5px auto;*/</span></span><br><span class="language-css">            <span class="hljs-comment">/*font-family: &quot;华康娃娃体W5&quot;;*/</span></span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">35px</span> <span class="hljs-number">10px</span> <span class="hljs-number">35px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container size&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-wrapper&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 600px;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return check()&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>            &#123;% csrf_token %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-wrapper clearfix&quot;</span>&gt;</span><br>                &#123;&#123; form.username &#125;&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; form.username.errors &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                &#123;&#123; form.password &#125;&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; form.password.errors &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vcode&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;验证码&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-item&quot;</span></span><br><span class="hljs-tag">                /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;code&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sub&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Login&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br>                Do not have account? <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>sign up<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><br>    var code; //声明一个变量用于存储生成的验证码<br>    changeImg();<br>    document.getElementById(&quot;code&quot;).onclick = changeImg;<br><br><br>    function changeImg() &#123;<br>        var arrays = [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;0&#x27;,<br>            &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;,<br>            &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;,<br>            &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;,<br>            &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;,<br>            &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;,<br>            &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;];<br>        code = &#x27;&#x27;; //重新初始化验证码<br>        //alert(arrays.length);<br>        //随机从数组中获取四个元素组成验证码<br>        for (var i = 0; i &lt; 4; i++) &#123;<br>            //随机获取一个数组的下标<br>            var r = parseInt(Math.random() * arrays.length);<br>            code += arrays[r];<br>        &#125;<br>        document.getElementById(&#x27;code&#x27;).innerHTML = code; //将验证码写入指定区域<br>    &#125;<br><br>    //效验验证码(表单被提交时触发)<br>    function check() &#123;<br><br>        //获取用户输入的验证码<br>        let input_code = document.getElementById(&#x27;vcode&#x27;).value;<br>        if (input_code.toLowerCase() === code.toLowerCase()) &#123;<br>            return true<br>        &#125; else &#123;<br>            alert(&quot;请输入正确的验证码!&quot;);<br>            return false;<br>        &#125;<br>        &#123;#let username = $(&quot;#id_username&quot;).val();#&#125;<br>        &#123;#let pwd = $(&quot;#id_password&quot;).val();#&#125;<br>        &#123;#console.log(username, pwd);#&#125;<br>        &#123;#if (!(username &amp;&amp; pwd)) &#123;#&#125;<br>        &#123;#    alert(&quot;输入信息不完整，请继续输入&quot;);#&#125;<br>        &#123;#    return false;#&#125;<br><br>        &#123;#else if (username &amp;&amp; pwd &amp;&amp; input_code.toLowerCase() === code.toLowerCase()) &#123;#&#125;<br>        &#123;#    //验证码正确(表单提交)#&#125;<br>        &#123;#    return true;#&#125;<br><br>        &#123;#else &#123;#&#125;<br>        &#123;#    alert(&quot;请输入正确的验证码!&quot;);#&#125;<br>        &#123;#    //验证码不正确,表单不允许提交#&#125;<br>        &#123;#    return false;#&#125;<br><br>    &#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://kit.fontawesome.com/2503dce09a.js&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-中间件处理"><a href="#7-中间件处理" class="headerlink" title="7.中间件处理"></a>7.中间件处理</h3><h4 id="1-定义中间件"><a href="#1-定义中间件" class="headerlink" title="1.定义中间件"></a>1.定义中间件</h4><p>==进入中间件请求时<code>（process_request）</code>若无返回值则继续向前，否则执行<code>process_reponse</code>直接返回。==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">M1</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;中间件1&quot;&quot;&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 若无返回值则继续向前走,否则直接返回</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;M1.进来了&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_reponse</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;M1.走了&quot;</span>)<br>        <span class="hljs-keyword">return</span> response<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">M2</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;中间件2&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;M2.进来了&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_reponse</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;M2.走了&quot;</span>)<br>        <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><h4 id="2-应用中间件-setting-py"><a href="#2-应用中间件-setting-py" class="headerlink" title="2.应用中间件(setting.py)"></a>2.应用中间件(setting.py)</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py">MIDDLEWARE = [<br>    <span class="hljs-string">&quot;django.middleware.security.SecurityMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.middleware.common.CommonMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.middleware.csrf.CsrfViewMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span>,<br>    <span class="hljs-string">&quot;django.middleware.clickjacking.XFrameOptionsMiddleware&quot;</span>,<br>    <span class="hljs-comment"># 谁在前面先执行谁</span><br>    <span class="hljs-string">&quot;staffsys.middleware.auth.M1&quot;</span>,<br>    <span class="hljs-string">&quot;staffsys.middleware.auth.M2&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221215235011941.png" style="zoom:50%;" /><h4 id="3-中间件方法"><a href="#3-中间件方法" class="headerlink" title="3.中间件方法"></a>3.中间件方法</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#如果方法中没有返回值（返回None），继续向后走</span><br><span class="hljs-comment">#如果有返回值HttpResponse、reder、redirect，则不再继续向后执行</span><br></code></pre></td></tr></table></figure><h3 id="8-中间件实现登录校验"><a href="#8-中间件实现登录校验" class="headerlink" title="8.中间件实现登录校验"></a>8.中间件实现登录校验</h3><blockquote><p>实现对用户信息的保存。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.utils.deprecation <span class="hljs-keyword">import</span> MiddlewareMixin<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> redirect<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginAuth</span>(<span class="hljs-title class_ inherited__">MiddlewareMixin</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;中间件1&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request</span>):<br>        <span class="hljs-comment"># 1.排除哪些不需要登录的页面</span><br>        <span class="hljs-comment"># request.path_info获取当前用户请求的url</span><br>        <span class="hljs-keyword">if</span> request.path_info == <span class="hljs-string">&quot;/login/&quot;</span>:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 2.读取当前访问的用户的session信息,如果能读到,说明已登录鉴权,可以继续向后走</span><br>        info_dict = request.session.get(<span class="hljs-string">&quot;info&quot;</span>)<br>        <span class="hljs-keyword">if</span> info_dict:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 3.没有登录过,返回到登录界面</span><br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LoginAuth.走了&quot;</span>)<br>        <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><h3 id="9-用户注销"><a href="#9-用户注销" class="headerlink" title="9.用户注销"></a>9.用户注销</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;注销&quot;&quot;&quot;</span><br>    request.session.clear()<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/login/&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="10-图片验证码"><a href="#10-图片验证码" class="headerlink" title="10.图片验证码"></a>10.图片验证码</h3><p>==python生成图片验证码的函数==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageFilter, ImageFont, Image, ImageDraw<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_code</span>(<span class="hljs-params">width=<span class="hljs-number">150</span>, height=<span class="hljs-number">35</span>, char_length=<span class="hljs-number">4</span>,</span><br><span class="hljs-params">               font_file=<span class="hljs-string">&#x27;Monaco.ttf&#x27;</span>, font_size=<span class="hljs-number">28</span></span>):<br>    code = []<br>    img = Image.new(mode=<span class="hljs-string">&#x27;RGB&#x27;</span>, size=(width, height), color=(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>    draw = ImageDraw.Draw(img, mode=<span class="hljs-string">&#x27;RGB&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rndChar</span>():<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        生成随机字母</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">chr</span>(random.randint(<span class="hljs-number">65</span>, <span class="hljs-number">90</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rndColor</span>():<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        生成随机颜色</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> (random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">10</span>, <span class="hljs-number">255</span>), random.randint(<span class="hljs-number">64</span>, <span class="hljs-number">255</span>))<br><br>    <span class="hljs-comment"># 写文字</span><br>    font = ImageFont.truetype(font_file, font_size)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(char_length):<br>        char = rndChar()<br>        code.append(char)<br>        h = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>)<br>        draw.text([i * width / char_length, h], char, font=font, fill=rndColor())<br><br>    <span class="hljs-comment"># 写干扰点</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        draw.point([random.randint(<span class="hljs-number">0</span>, width), random.randint(<span class="hljs-number">0</span>, height)], fill=rndColor())<br><br>    <span class="hljs-comment"># 写干扰圆圈</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        draw.point([random.randint(<span class="hljs-number">0</span>, width), random.randint(<span class="hljs-number">0</span>, height)], fill=rndColor())<br>        x = random.randint(<span class="hljs-number">0</span>, width)<br>        y = random.randint(<span class="hljs-number">0</span>, height)<br>        draw.arc((x, y, x + <span class="hljs-number">4</span>, y + <span class="hljs-number">4</span>), <span class="hljs-number">0</span>, <span class="hljs-number">90</span>, fill=rndColor())<br><br>    <span class="hljs-comment"># 画干扰线</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        x1 = random.randint(<span class="hljs-number">0</span>, width)<br>        y1 = random.randint(<span class="hljs-number">0</span>, height)<br>        x2 = random.randint(<span class="hljs-number">0</span>, width)<br>        y2 = random.randint(<span class="hljs-number">0</span>, height)<br><br>        draw.line((x1, y1, x2, y2), fill=rndColor())<br><br>    img = img.<span class="hljs-built_in">filter</span>(ImageFilter.EDGE_ENHANCE_MORE)<br>    <span class="hljs-keyword">return</span> img, <span class="hljs-string">&#x27;&#x27;</span>.join(code)<br><br>    <span class="hljs-comment"># if __name__ == &#x27;__main__&#x27;:</span><br>    <span class="hljs-comment"># 1. 直接打开</span><br>    <span class="hljs-comment"># img,code = check_code()</span><br>    <span class="hljs-comment"># img.show()</span><br><br>    <span class="hljs-comment"># 2. 写入文件</span><br>    <span class="hljs-comment"># img, code = check_code()</span><br>    <span class="hljs-comment"># with open(&#x27;../static/img/check_code.png&#x27;, &#x27;wb&#x27;) as f:</span><br>    <span class="hljs-comment">#     img.save(f, format=&#x27;png&#x27;)</span><br>    <span class="hljs-comment"># print(code)</span><br><br>    <span class="hljs-comment"># 3. 写入内存(Python3)</span><br>    <span class="hljs-comment"># from io import BytesIO</span><br>    <span class="hljs-comment"># stream = BytesIO()</span><br>    <span class="hljs-comment"># img.save(stream, &#x27;png&#x27;)</span><br>    <span class="hljs-comment"># stream.getvalue()</span><br><br>    <span class="hljs-comment"># 4. 写入内存（Python2）</span><br>    <span class="hljs-comment"># import StringIO</span><br>    <span class="hljs-comment"># stream = StringIO.StringIO()</span><br>    <span class="hljs-comment"># img.save(stream, &#x27;png&#x27;)</span><br>    <span class="hljs-comment"># stream.getvalue()</span><br><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>==登录表单==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginForm</span>(bootstrapmodelform.BootStrapForm):<br>    <span class="hljs-string">&quot;&quot;&quot;登录表单&quot;&quot;&quot;</span><br>    username = forms.CharField(<br>        label=<span class="hljs-string">&quot;用户名&quot;</span>,<br>        max_length=<span class="hljs-number">32</span>,<br>        widget=forms.TextInput,<br>        required=<span class="hljs-literal">True</span>,<br>    )<br>    password = forms.CharField(<br>        label=<span class="hljs-string">&quot;密码&quot;</span>,<br>        max_length=<span class="hljs-number">64</span>,<br>        widget=forms.PasswordInput(render_value=<span class="hljs-literal">True</span>),<br>        required=<span class="hljs-literal">True</span>,<br>    )<br>    code = forms.CharField(<br>        label=<span class="hljs-string">&quot;验证码&quot;</span>,<br>        widget=forms.TextInput(),<br>        required=<span class="hljs-literal">True</span><br>    )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">clean_password</span>(<span class="hljs-params">self</span>):<br>        pwd = self.cleaned_data.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-keyword">return</span> md5(pwd)<br></code></pre></td></tr></table></figure><p>==登录视图==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;登录&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = LoginForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br>    form = LoginForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 验证成功,获取输入信息</span><br>        <span class="hljs-comment"># &#123;&#x27;username&#x27;: &#x27;alleyf&#x27;, &#x27;password&#x27;: &#x27;123&#x27;, &#x27;code&#x27;: &#x27;csfd&#x27;&#125;</span><br>        <span class="hljs-comment"># 验证码校验,取出并出栈验证码，防止后面校验多出数据库中没有的验证码</span><br>        usr_input_code = form.cleaned_data.pop(<span class="hljs-string">&#x27;code&#x27;</span>)<br>        checkcode = request.session.get(<span class="hljs-string">&#x27;checkcode&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> checkcode.lower() != usr_input_code.lower():<br>            form.add_error(<span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;验证码错误&#x27;</span>)<br>            <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br>        <span class="hljs-comment"># 去数据库校验用户名和密码是否存在且正确</span><br>        usrobj = Admin.objects.<span class="hljs-built_in">filter</span>(**form.cleaned_data).first()<br>        <span class="hljs-keyword">if</span> usrobj:<br>            <span class="hljs-comment"># 用户名和密码正确</span><br>            <span class="hljs-comment"># 构建session信息</span><br>            request.session[<span class="hljs-string">&quot;info&quot;</span>] = &#123;<span class="hljs-string">&quot;id&quot;</span>: usrobj.<span class="hljs-built_in">id</span>, <span class="hljs-string">&quot;name&quot;</span>: usrobj.username&#125;<br>            <span class="hljs-comment"># 设置用户信息保存7天</span><br>            request.session.set_expiry(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>)<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;/admin/list/&quot;</span>)<br>        form.add_error(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;用户名或密码错误&quot;</span>)<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;login.html&quot;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br></code></pre></td></tr></table></figure><p>==图片验证码视图==</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkcode</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;图片验证码&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 调用函数生成图片验证码</span><br>    img, code = check_code()<br>    <span class="hljs-comment"># 将验证码写入到自己的session中(以便于后续校验)</span><br>    request.session[<span class="hljs-string">&#x27;checkcode&#x27;</span>] = code<br>    <span class="hljs-comment"># 给session设置有效时长为60s</span><br>    request.session.set_expiry(<span class="hljs-number">60</span>)<br>    <span class="hljs-comment"># 将图片写入内存</span><br>    stream = BytesIO()<br>    img.save(stream, <span class="hljs-string">&#x27;png&#x27;</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(stream.getvalue())<br></code></pre></td></tr></table></figure><p>==前端login.html==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load static %&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    &#123;% block mytitle %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    &#123;% endblock %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/fontawesome-free-6.2.1-web/css/fontawesome.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;css/login.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.size</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#vcode</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-comment">/*padding-left: 8px;*/</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#code</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*字体颜色白色*/</span></span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(plum, powderblue);</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18pt</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*margin: 5px auto;*/</span></span><br><span class="language-css">            <span class="hljs-comment">/*font-family: &quot;华康娃娃体W5&quot;;*/</span></span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">35px</span> <span class="hljs-number">10px</span> <span class="hljs-number">35px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">5%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    &#123;% block mystyle %&#125;<br>    &#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>&#123;% block myinfo %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container size&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-wrapper&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 620px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return check()&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>                &#123;% csrf_token %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-wrapper clearfix&quot;</span>&gt;</span><br>                    &#123;&#123; form.username &#125;&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;</span>&#123;&#123; form.username.errors &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    &#123;&#123; form.password &#125;&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; form.password.errors &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    &#123;#            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;vcode&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;required&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;验证码&quot;</span>#&#125;</span><br><span class="hljs-tag">                    &#123;#                   <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-item col-xs-7&quot;</span>#&#125;</span><br><span class="hljs-tag">                    &#123;#            /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;code&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-5&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>#&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row clearfix&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-7&quot;</span>&gt;</span><br>                            &#123;&#123; form.code &#125;&#125;<br>                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123; form.code.errors &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-xs-5&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/checkcode/&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/checkcode/&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片加载失败&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sub&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Login&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br>                Do not have account? <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/register&quot;</span>&gt;</span>sign up<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><br>    var code; //声明一个变量用于存储生成的验证码<br>    changeImg();<br>    document.getElementById(&quot;code&quot;).onclick = changeImg;<br><br><br>    function changeImg() &#123;<br>        var arrays = [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;0&#x27;,<br>            &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;,<br>            &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;,<br>            &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;,<br>            &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;,<br>            &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;,<br>            &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;];<br>        code = &#x27;&#x27;; //重新初始化验证码<br>        //alert(arrays.length);<br>        //随机从数组中获取四个元素组成验证码<br>        for (var i = 0; i &lt; 4; i++) &#123;<br>            //随机获取一个数组的下标<br>            var r = parseInt(Math.random() * arrays.length);<br>            code += arrays[r];<br>        &#125;<br>        document.getElementById(&#x27;code&#x27;).innerHTML = code; //将验证码写入指定区域<br>    &#125;<br><br>    //效验验证码(表单被提交时触发)<br>    function check() &#123;<br><br>        //获取用户输入的验证码<br>        let input_code = document.getElementById(&#x27;vcode&#x27;).value;<br>        if (input_code.toLowerCase() === code.toLowerCase()) &#123;<br>            return true<br>        &#125; else &#123;<br>            alert(&quot;请输入正确的验证码!&quot;);<br>            return false;<br>        &#125;<br>        &#123;#let username = $(&quot;#id_username&quot;).val();#&#125;<br>        &#123;#let pwd = $(&quot;#id_password&quot;).val();#&#125;<br>        &#123;#console.log(username, pwd);#&#125;<br>        &#123;#if (!(username &amp;&amp; pwd)) &#123;#&#125;<br>        &#123;#    alert(&quot;输入信息不完整，请继续输入&quot;);#&#125;<br>        &#123;#    return false;#&#125;<br><br>        &#123;#else if (username &amp;&amp; pwd &amp;&amp; input_code.toLowerCase() === code.toLowerCase()) &#123;#&#125;<br>        &#123;#    //验证码正确(表单提交)#&#125;<br>        &#123;#    return true;#&#125;<br><br>        &#123;#else &#123;#&#125;<br>        &#123;#    alert(&quot;请输入正确的验证码!&quot;);#&#125;<br>        &#123;#    //验证码不正确,表单不允许提交#&#125;<br>        &#123;#    return false;#&#125;<br><br>    &#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://kit.fontawesome.com/2503dce09a.js&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="11-Ajax请求"><a href="#11-Ajax请求" class="headerlink" title="11.Ajax请求"></a>11.Ajax请求</h3><blockquote><p>前后端数据交互出了表单方式（页面会刷新）外，还有ajax异步请求（页面不刷新）。</p></blockquote><ul><li><p>依赖Jquery</p></li><li><p>编写Ajax代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;i&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>                <span class="hljs-keyword">let</span> poem = res[<span class="hljs-string">&quot;hitokoto&quot;</span>];<br>                <span class="hljs-keyword">let</span> source = res[<span class="hljs-string">&quot;from&quot;</span>];<br>                <span class="hljs-keyword">let</span> word = poem + <span class="hljs-string">&quot;---&quot;</span> + source;<br>                $(<span class="hljs-string">&quot;#w1&quot;</span>).<span class="hljs-title function_">text</span>(word)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res[<span class="hljs-string">&quot;from&quot;</span>])<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-get请求"><a href="#1-get请求" class="headerlink" title="1.get请求"></a>1.get请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;i&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>                <span class="hljs-keyword">let</span> poem = res[<span class="hljs-string">&quot;hitokoto&quot;</span>];<br>                <span class="hljs-keyword">let</span> source = res[<span class="hljs-string">&quot;from&quot;</span>];<br>                <span class="hljs-keyword">let</span> word = poem + <span class="hljs-string">&quot;---&quot;</span> + source;<br>                $(<span class="hljs-string">&quot;#w1&quot;</span>).<span class="hljs-title function_">text</span>(word)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res[<span class="hljs-string">&quot;from&quot;</span>])<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="2-post请求"><a href="#2-post请求" class="headerlink" title="2.post请求"></a>2.post请求</h4><p>==视图函数必须加入这个去除csrf校验，因为ajax表单请求时未包含csrf信息，<code>from django.views.decorators.csrf import csrf_exempt @csrf_exempt</code>==</p><p><strong>前端</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/task/ajax&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;i&#x27;</span><br>            &#125;,<br>            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>                <span class="hljs-keyword">let</span> poem = res[<span class="hljs-string">&quot;hitokoto&quot;</span>];<br>                <span class="hljs-keyword">let</span> source = res[<span class="hljs-string">&quot;from&quot;</span>];<br>                <span class="hljs-keyword">let</span> word = poem + <span class="hljs-string">&quot;---&quot;</span> + source;<br>                $(<span class="hljs-string">&quot;#w1&quot;</span>).<span class="hljs-title function_">text</span>(word)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res[<span class="hljs-string">&quot;from&quot;</span>])<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>后端</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render ,HttpResponse<br><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt<br><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task_ajax</span>(<span class="hljs-params">request</span>):<br><span class="hljs-built_in">print</span>(request.GET)<br><span class="hljs-built_in">print</span>(request.POST)<br><span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;成功了&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-绑定事件"><a href="#3-绑定事件" class="headerlink" title="3.绑定事件"></a>3.绑定事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;% block myscript %&#125;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-comment">//框架加载完毕执行</span><br>        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">bindw1span</span>();<br>        &#125;)<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">bindw1span</span>(<span class="hljs-params"></span>) &#123;<br>            $.<span class="hljs-title function_">ajax</span>(&#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>                <span class="hljs-attr">data</span>: &#123;<br>                    <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;i&#x27;</span><br>                &#125;,<br>                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>                    <span class="hljs-keyword">let</span> poem = res[<span class="hljs-string">&quot;hitokoto&quot;</span>];<br>                    <span class="hljs-keyword">let</span> source = res[<span class="hljs-string">&quot;from&quot;</span>];<br>                    <span class="hljs-keyword">let</span> word = poem + <span class="hljs-string">&quot;---&quot;</span> + source;<br>                    $(<span class="hljs-string">&quot;#w1&quot;</span>).<span class="hljs-title function_">text</span>(word)<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res[<span class="hljs-string">&quot;from&quot;</span>])<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &lt;/script&gt;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h4 id="4-ajax请求的返回值"><a href="#4-ajax请求的返回值" class="headerlink" title="4.ajax请求的返回值"></a>4.ajax请求的返回值</h4><p>==django项目运行的目录为工程下的根目录（manage.py或app文件夹同级目录）==</p><p>一般都会返回json格式。</p><p><strong>后端</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task_ocr</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;ajax请求&quot;&quot;&quot;</span><br>    imgpath = request.GET.get(<span class="hljs-string">&quot;imgpath&quot;</span>)<br>    results = []<br>    res = ocr_geberaltext(path=imgpath)<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> res[<span class="hljs-string">&quot;TextDetections&quot;</span>]:<br>        temp_dict = &#123;<br>            <span class="hljs-string">&quot;DetectedText&quot;</span>: item[<span class="hljs-string">&quot;DetectedText&quot;</span>],<br>            <span class="hljs-string">&quot;Confidence&quot;</span>: item[<span class="hljs-string">&quot;Confidence&quot;</span>]<br>        &#125;<br>        results.append(temp_dict)<br>    data_dict = &#123;<br>        <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;results&#x27;</span>: results<br>    &#125;<br>    <span class="hljs-comment"># 1.用json.dumps()函数</span><br>    <span class="hljs-comment"># json_str = json.dumps(data_dict)</span><br>    <span class="hljs-comment"># return json_str</span><br>    <span class="hljs-comment"># 2.直接返回JsonResponse</span><br>    <span class="hljs-keyword">return</span> JsonResponse(data_dict)<br></code></pre></td></tr></table></figure><p><strong>前端</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;% block myscript %&#125;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">bindw1span</span>();<br>            <span class="hljs-title function_">ocr</span>();<br>        &#125;)<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">bindw1span</span>(<span class="hljs-params"></span>) &#123;<br>            $.<span class="hljs-title function_">ajax</span>(&#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;https://v1.hitokoto.cn/&quot;</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>                <span class="hljs-attr">data</span>: &#123;<br>                    <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;i&#x27;</span><br>                &#125;,<br>                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>                    <span class="hljs-keyword">let</span> poem = res[<span class="hljs-string">&quot;hitokoto&quot;</span>];<br>                    <span class="hljs-keyword">let</span> source = res[<span class="hljs-string">&quot;from&quot;</span>];<br>                    <span class="hljs-keyword">let</span> word = poem + <span class="hljs-string">&quot;---&quot;</span> + source;<br>                    $(<span class="hljs-string">&quot;#w1&quot;</span>).<span class="hljs-title function_">text</span>(word)<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res[<span class="hljs-string">&quot;from&quot;</span>])<br>                &#125;<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">ocr</span>(<span class="hljs-params"></span>) &#123;<br>            $.<span class="hljs-title function_">ajax</span>(&#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/task/ocr/&quot;</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>                <span class="hljs-attr">data</span>: &#123;<br>                    <span class="hljs-attr">imgpath</span>: <span class="hljs-string">&quot;./staffsys/static/img/1.png&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>                &#125;<br>            &#125;)<br>        &#125;<br>    &lt;/script&gt;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h4 id="5-实例：TODO-List"><a href="#5-实例：TODO-List" class="headerlink" title="5.实例：TODO_List"></a>5.实例：TODO_List</h4><h5 id="1-数据表结构"><a href="#1-数据表结构" class="headerlink" title="1.数据表结构"></a>1.数据表结构</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Admin</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;管理员&quot;&quot;&quot;</span><br>    username = models.CharField(verbose_name=<span class="hljs-string">&quot;用户名&quot;</span>, max_length=<span class="hljs-number">32</span>)<br>    password = models.CharField(verbose_name=<span class="hljs-string">&quot;密码&quot;</span>, max_length=<span class="hljs-number">64</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.username<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;任务&quot;&quot;&quot;</span><br>    level_choices = (<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;紧急&#x27;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;重要&#x27;</span>),<br>        (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;临时&#x27;</span>)<br>    )<br>    title = models.CharField(verbose_name=<span class="hljs-string">&#x27;标题&#x27;</span>, max_length=<span class="hljs-number">64</span>)<br>    details = models.TextField(verbose_name=<span class="hljs-string">&#x27;内容&#x27;</span>)<br>    level = models.SmallIntegerField(verbose_name=<span class="hljs-string">&#x27;级别&#x27;</span>, choices=level_choices, default=<span class="hljs-number">3</span>)<br>    user = models.ForeignKey(verbose_name=<span class="hljs-string">&#x27;负责人&#x27;</span>, to=Admin, on_delete=models.CASCADE)<br><br></code></pre></td></tr></table></figure><h5 id="2-表单模型"><a href="#2-表单模型" class="headerlink" title="2.表单模型"></a>2.表单模型</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><br><span class="hljs-string">&quot;&quot;&quot;----------1简约型(class=input form-control)--------------2酷炫型(class=input-item)---------&quot;&quot;&quot;</span><br><br><br><span class="hljs-comment"># 1.适合增改查的风格</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BootStrap1</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        <span class="hljs-comment"># 2.批量设置样式：循环找到所有的字段,给其添加相同样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            <span class="hljs-comment"># 有责修改样式</span><br>            <span class="hljs-keyword">if</span> field.widget.attrs:<br>                field.widget.attrs[<span class="hljs-string">&quot;class&quot;</span>] = <span class="hljs-string">&quot;input form-control&quot;</span><br>                field.widget.attrs[<span class="hljs-string">&quot;placeholder&quot;</span>] = field.label<br><br>            <span class="hljs-comment"># 无责添加样式</span><br>            <span class="hljs-keyword">else</span>:<br>                field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;input form-control&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br><br><br><span class="hljs-comment"># 2.适合登陆注册的风格</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BootStrap2</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        <span class="hljs-comment"># 2.批量设置样式：循环找到所有的字段,给其添加相同样式</span><br>        <span class="hljs-keyword">for</span> name, field <span class="hljs-keyword">in</span> self.fields.items():<br>            <span class="hljs-comment"># 有责修改样式</span><br>            <span class="hljs-keyword">if</span> field.widget.attrs:<br>                field.widget.attrs[<span class="hljs-string">&quot;class&quot;</span>] = <span class="hljs-string">&quot;input-item&quot;</span><br>                field.widget.attrs[<span class="hljs-string">&quot;placeholder&quot;</span>] = field.label<br><br>            <span class="hljs-comment"># 无责添加样式</span><br>            <span class="hljs-keyword">else</span>:<br>                field.widget.attrs = &#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;input-item&quot;</span>, <span class="hljs-string">&quot;placeholder&quot;</span>: field.label&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BootStrapModelForm1</span>(BootStrap1, forms.ModelForm):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BootStrapModelForm2</span>(BootStrap2, forms.ModelForm):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BootStrapForm</span>(BootStrap2, forms.Form):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskModelForm</span>(bootstrapmodelform.BootStrapModelForm1):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.Task<br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br>        <span class="hljs-comment"># fields = [&quot;title&quot;, &quot;details&quot;, &quot;level&quot;, &quot;user&quot;]</span><br>        widgets = &#123;<br>            <span class="hljs-string">&quot;details&quot;</span>: forms.TextInput()<br>        &#125;<br></code></pre></td></tr></table></figure><h5 id="3-视图函数"><a href="#3-视图函数" class="headerlink" title="3.视图函数"></a>3.视图函数</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect<br><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt<br><br><span class="hljs-keyword">from</span> staffsys <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> staffsys.utils <span class="hljs-keyword">import</span> pagination<br><span class="hljs-keyword">from</span> staffsys.utils.form <span class="hljs-keyword">import</span> TaskModelForm<br><span class="hljs-keyword">from</span> staffsys.utils.ocr <span class="hljs-keyword">import</span> ocr_geberaltext<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">todo_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;任务列表&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 图片随机数种子</span><br>    rps = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        rps.append(randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>))<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        form = TaskModelForm()<br>        <span class="hljs-comment"># 1.搜索参数初始化</span><br>        search_dict = &#123;&#125;<br>        <span class="hljs-comment"># 获取号码搜索参数</span><br>        search_data = request.GET.get(key=<span class="hljs-string">&quot;t&quot;</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> search_data:<br>            search_dict[<span class="hljs-string">&#x27;details__contains&#x27;</span>] = search_data<br>        <span class="hljs-comment"># 2.页码参数初始化</span><br>        pagesize = <span class="hljs-number">10</span><br>        pageplus = <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 3.筛选符合条件的数据</span><br>        queryset = models.Task.objects.<span class="hljs-built_in">filter</span>(**search_dict).order_by(<span class="hljs-string">&#x27;id&#x27;</span>)<br>        <span class="hljs-comment"># 4.实例化页面对象</span><br>        page_obj = pagination.Pagination(request, query_set=queryset, page_size=pagesize, page_plus=pageplus)<br>        <span class="hljs-comment"># 5.获取页面数据</span><br>        page_queryset = page_obj.page_queryset<br>        page_str = page_obj.htmlstr()<br>        <span class="hljs-built_in">print</span>(page_queryset)<br>        context = &#123;<br>            <span class="hljs-string">&#x27;ran_pic_seed&#x27;</span>: rps,<br>            <span class="hljs-string">&#x27;form&#x27;</span>: form,<br>            <span class="hljs-comment">#     页面数据信息</span><br>            <span class="hljs-string">&#x27;page_queryset&#x27;</span>: page_queryset,<br>            <span class="hljs-comment">#     搜索参数</span><br>            <span class="hljs-string">&#x27;search_data&#x27;</span>: search_data,<br>            <span class="hljs-comment">#     分页html字符串组件</span><br>            <span class="hljs-string">&#x27;page_str&#x27;</span>: page_str<br>        &#125;<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;ToDo_List.html&quot;</span>, context)<br><br><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task_ocr</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;ajax请求ocr识别&quot;&quot;&quot;</span><br>    imgpath = request.POST.get(<span class="hljs-string">&quot;imgpath&quot;</span>)<br>    <span class="hljs-built_in">print</span>(request.POST)<br>    results = []<br>    <span class="hljs-comment"># res = ocr_geberaltext(path=imgpath)</span><br>    <span class="hljs-comment"># for item in res[&quot;TextDetections&quot;]:</span><br>    <span class="hljs-comment">#     temp_dict = &#123;</span><br>    <span class="hljs-comment">#         &quot;DetectedText&quot;: item[&quot;DetectedText&quot;],</span><br>    <span class="hljs-comment">#         &quot;Confidence&quot;: item[&quot;Confidence&quot;]</span><br>    <span class="hljs-comment">#     &#125;</span><br>    <span class="hljs-comment">#     results.append(temp_dict)</span><br>    data_dict = &#123;<br>        <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;results&#x27;</span>: results<br>    &#125;<br>    <span class="hljs-comment"># 1.用json.dumps()函数</span><br>    <span class="hljs-comment"># json_str = json.dumps(data_dict)</span><br>    <span class="hljs-comment"># return json_str</span><br>    <span class="hljs-comment"># 2.直接返回JsonResponse</span><br>    <span class="hljs-keyword">return</span> JsonResponse(data_dict)<br><br><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">todo_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加任务接口&quot;&quot;&quot;</span><br>    form = TaskModelForm(data=request.POST)<br>    <span class="hljs-comment"># 信息校验</span><br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        form.save()<br>        resinfo = &#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> JsonResponse(resinfo)<br>    resinfo = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">False</span>,<br>        <span class="hljs-string">&#x27;err&#x27;</span>: form.errors<br>    &#125;<br>    <span class="hljs-keyword">return</span> JsonResponse(resinfo)<br></code></pre></td></tr></table></figure><h5 id="4-前端页面"><a href="#4-前端页面" class="headerlink" title="4.前端页面"></a>4.前端页面</h5><p>==layout.html==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load static %&#125;<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    &#123;% block mytitle %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    &#123;% endblock %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-datetimepicker-master/css/bootstrap-datetimepicker.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/fontawesome-free-6.2.1-web/css/fontawesome.min.css&#x27; %&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: 微软雅黑, serif;</span><br><span class="language-css">            <span class="hljs-attribute">letter-spacing</span>: .<span class="hljs-number">05em</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">th</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.navbar</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.navbar</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.lh30</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    &#123;% block mystyle %&#125;<br>    &#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar navbar-default&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-header&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-toggle collapsed&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;collapse&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">data-target</span>=<span class="hljs-string">&quot;#bs-example-navbar-collapse-1&quot;</span> <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>Toggle navigation<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon-bar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;navbar-brand lh30&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>联通用户管理系统<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collapse navbar-collapse&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bs-example-navbar-collapse-1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/depart/list/&quot;</span>&gt;</span>部门管理<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/user/list/&quot;</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/phone/list/&quot;</span>&gt;</span>靓号管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/task/list/&quot;</span>&gt;</span>今日清单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/admin/list/&quot;</span>&gt;</span>管理员账户<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav navbar-nav navbar-right&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding: 5px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;50x50&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;img/03.webp&#x27; %&#125;&quot;</span></span><br><span class="hljs-tag">                                                           <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;50px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50px&quot;</span></span><br><span class="hljs-tag">                                                           <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-circle&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot; #&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-toggle&quot;</span> <span class="hljs-attr">data-toggle</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">aria-haspopup</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">aria-expanded</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>&#123;&#123; request.session.info.name &#125;&#125; <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caret&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-menu&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>个人资料<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我的信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;separator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;divider&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/logout&quot;</span>&gt;</span>注销<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    &#123;% block info %&#125;&#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://kit.fontawesome.com/2503dce09a.js&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;plugins/bootstrap-datetimepicker-master/js/bootstrap-datetimepicker.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&#123;% block myscript %&#125;<br>&#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>==ToDo_List.html==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;layout.html&#x27; %&#125;<br>&#123;% block mytitle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>今日清单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#1e2732</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: transparent;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: background-color .<span class="hljs-number">3s</span> ease-in-out;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e5dcd</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>, <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>-visible &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#3898EC</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/admin/add/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-plus&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>新建清单<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;w1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #5b65f1;font-size: 24px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: right;width: 300px&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search for task&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">                               <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">search_data</span> &#125;&#125;&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-search&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>任务列表<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    &#123;% block myform %&#125;<br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group col-md-12&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addtaskinfoform&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>                            &#123;% for item in form %&#125;<br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-6&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #c12c1f&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                    &#123;&#123; item &#125;&#125;<br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            &#123;% endfor %&#125;<br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-12&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button--submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addtask&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    &#123;% endblock %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>                    &#123;% for item in page_queryset %&#125;<br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-4&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;thumbnail&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;300x200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://picsum.photos/id/&#123;&#123; ran_pic_seed.0 &#125;&#125;/600/300&quot;</span>/&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;caption text-center&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #757cbb&quot;</span>&gt;</span><br>                                        &#123;&#123; item.title &#125;&#125;<br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                                        &#123;&#123; item.details &#125;&#125;<br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>开始<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span></span><br><span class="hljs-tag">                                                                                   <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>结束<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    &#123;% endfor %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination pagination-xs&quot;</span>&gt;</span><br>                &#123;&#123; page_str &#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br><br>&#123;% block myscript %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>        $(function () &#123;<br>            bindslogin();<br>            &#123;#ocr();#&#125;<br>            bindaddtask()<br>        &#125;)<br><br>        function bindslogin() &#123;<br>            $.ajax(&#123;<br>                url: &quot;https://v1.hitokoto.cn/&quot;,<br>                type: &#x27;get&#x27;,<br>                data: &#123;<br>                    c: &#x27;i&#x27;<br>                &#125;,<br>                success: function (res) &#123;<br>                    let poem = res[&quot;hitokoto&quot;];<br>                    let source = res[&quot;from&quot;];<br>                    let word = poem + &quot;---&quot; + source;<br>                    $(&quot;#w1&quot;).text(word)<br>                    console.log(res[&quot;from&quot;])<br>                &#125;<br>            &#125;)<br>        &#125;<br><br>        function ocr() &#123;<br>            $.ajax(&#123;<br>                url: &quot;/task/ocr/&quot;,<br>                type: &#x27;post&#x27;,<br>                data: &#123;<br>                    imgpath: &quot;./staffsys/static/img/1.png&quot;<br>                &#125;,<br>                dataType: &quot;json&quot;,<br>                success: function (res) &#123;<br>                    console.log(res)<br>                &#125;<br>            &#125;)<br>        &#125;<br><br>        function bindaddtask() &#123;<br>            $(&quot;#addtask&quot;).click(function () &#123;<br>                $(&quot;.err_msg&quot;).empty();<br>                $.ajax(&#123;<br>                    url: &quot;/task/add/&quot;,<br>                    type: &#x27;post&#x27;,<br>                    data: $(&quot;#addtaskinfoform&quot;).serialize(),<br>                    dataType: &quot;json&quot;,<br>                    success: function (res) &#123;<br>                        if (res.status) &#123;<br>                            &#123;#弹出添加成功响应#&#125;<br>                            alert(&quot;添加成功&quot;);<br>                            location.reload();<br>                        &#125; else &#123;<br>                            $.each(res.err, function (name, data) &#123;<br>                                &#123;#将错误信息添加到前端#&#125;<br>                                $(&quot;#id_&quot; + name).prev().text(data[0]);<br>                            &#125;)<br>                        &#125;<br>                    &#125;<br>                &#125;)<br>            &#125;)<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h3 id="12-文献管理"><a href="#12-文献管理" class="headerlink" title="12.文献管理"></a>12.文献管理</h3><h4 id="1-表结构"><a href="#1-表结构" class="headerlink" title="1.表结构"></a>1.表结构</h4><table><thead><tr><th>id</th><th>文献名称</th><th>作者</th><th>来源</th><th>命中率</th><th>得分</th></tr></thead><tbody><tr><td>1</td><td>2016IJC-导管组织接触对于模型的影响PentarRay FAM</td><td>陈明龙</td><td>本地数据库</td><td>85%</td><td>88</td></tr><tr><td>2</td><td>FOCUS超声刀开放性甲状腺切除术的临床疗效评价</td><td>薛家鹏</td><td>网页爬虫</td><td>92%</td><td>94</td></tr></tbody></table><h4 id="2-路由"><a href="#2-路由" class="headerlink" title="2.路由"></a>2.路由</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 文档列表</span><br>path(<span class="hljs-string">&quot;doc/list/&quot;</span>, doc.doc_list),<br><span class="hljs-comment"># 添加文档</span><br>path(<span class="hljs-string">&quot;doc/add/&quot;</span>, doc.doc_add),<br><span class="hljs-comment"># 删除文献</span><br>path(<span class="hljs-string">&quot;doc/del/&quot;</span>, doc.doc_del),<br><span class="hljs-comment"># 编辑文献</span><br>path(<span class="hljs-string">&quot;doc/edit/&quot;</span>, doc.doc_edit)<br></code></pre></td></tr></table></figure><h4 id="3-视图层"><a href="#3-视图层" class="headerlink" title="3.视图层"></a>3.视图层</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> staffsys <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> staffsys.utils <span class="hljs-keyword">import</span> pagination<br><span class="hljs-keyword">from</span> staffsys.utils.form <span class="hljs-keyword">import</span> DocModelForm<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doc_list</span>(<span class="hljs-params">request</span>):<br>    form = DocModelForm()<br>    <span class="hljs-comment"># 1.搜索参数初始化</span><br>    search_dict = &#123;&#125;<br>    <span class="hljs-comment"># 获取号码搜索参数</span><br>    search_data = request.GET.get(key=<span class="hljs-string">&quot;n&quot;</span>, default=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> search_data:<br>        search_dict[<span class="hljs-string">&#x27;name__contains&#x27;</span>] = search_data<br>    <span class="hljs-comment"># 2.页码参数初始化</span><br>    pagesize = <span class="hljs-number">10</span><br>    pageplus = <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 3.筛选符合条件的数据</span><br>    queryset = models.Documents.objects.<span class="hljs-built_in">filter</span>(**search_dict).order_by(<span class="hljs-string">&#x27;-allscore&#x27;</span>)<br>    <span class="hljs-comment"># 4.实例化页面对象</span><br>    page_obj = pagination.Pagination(request, query_set=queryset, page_size=pagesize, page_plus=pageplus)<br>    <span class="hljs-comment"># 5.获取页面数据</span><br>    page_queryset = page_obj.page_queryset<br>    page_str = page_obj.htmlstr()<br>    context = &#123;<br>        <span class="hljs-string">&#x27;form&#x27;</span>: form,<br>        <span class="hljs-comment">#     页面数据信息</span><br>        <span class="hljs-string">&#x27;page_queryset&#x27;</span>: page_queryset,<br>        <span class="hljs-comment">#     搜索参数</span><br>        <span class="hljs-string">&#x27;search_data&#x27;</span>: search_data,<br>        <span class="hljs-comment">#     分页html字符串组件</span><br>        <span class="hljs-string">&#x27;page_str&#x27;</span>: page_str<br>    &#125;<br>    <span class="hljs-built_in">print</span>(datetime.now().strftime(<span class="hljs-string">&#x27;%Y%m%d%H%M%S&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;doc_list.html&quot;</span>, context)<br><br><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doc_add</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;添加文档&quot;&quot;&quot;</span><br>    form = DocModelForm(data=request.POST)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-comment"># 后台添加无需前端输入的表信息(字段)</span><br>        form.instance.status = <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 将当前登录的用户作为该条信息的作者</span><br>        form.instance.user_id = request.session[<span class="hljs-string">&#x27;info&#x27;</span>].get(<span class="hljs-string">&quot;id&quot;</span>)<br>        form.save()<br>        context = &#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span>,<br>        &#125;<br>        <span class="hljs-keyword">return</span> JsonResponse(context)<br>    context = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">False</span>,<br>        <span class="hljs-string">&#x27;err&#x27;</span>: form.errors<br>    &#125;<br>    <span class="hljs-keyword">return</span> JsonResponse(context)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doc_del</span>(<span class="hljs-params">request</span>):<br>    uid = request.GET.get(<span class="hljs-string">&#x27;uid&#x27;</span>)<br>    exist = models.Documents.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=uid).exists()<br>    <span class="hljs-keyword">if</span> exist:<br>        models.Documents.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=uid).first().delete()<br>        res = &#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span>,<br>        &#125;<br>        <span class="hljs-keyword">return</span> JsonResponse(res)<br>    res = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">False</span>,<br>        <span class="hljs-string">&#x27;err&#x27;</span>: <span class="hljs-string">&#x27;ID为&#x27;</span> + uid + <span class="hljs-string">&#x27;的文件不存在,删除失败&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> JsonResponse(res)<br><br><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doc_edit</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;编辑文献&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 根据id获取文献信息</span><br>    uid = request.GET.get(<span class="hljs-string">&#x27;uid&#x27;</span>)<br>    <span class="hljs-comment"># 编辑文献</span><br>    rowobj = models.Documents.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=uid).first()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> rowobj:<br>        res = &#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&#x27;tips&#x27;</span>: <span class="hljs-string">&#x27;ID为&#x27;</span> + uid + <span class="hljs-string">&#x27;的文件不存在,请刷新重试&#x27;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> JsonResponse(res)<br>    form = DocModelForm(data=request.POST, instance=rowobj)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        form.save()<br>        res = &#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> JsonResponse(res)<br>    context = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">False</span>,<br>        <span class="hljs-string">&#x27;err&#x27;</span>: form.errors<br>    &#125;<br>    <span class="hljs-keyword">return</span> JsonResponse(context)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">doc_details</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 根据id获取文献信息</span><br>    uid = request.GET.get(<span class="hljs-string">&#x27;uid&#x27;</span>)<br>    <span class="hljs-comment"># 方法1获取对象</span><br>    <span class="hljs-comment"># rowobj = models.Documents.objects.filter(id=uid).first()</span><br>    <span class="hljs-comment"># if not rowobj:</span><br>    <span class="hljs-comment">#     res = &#123;</span><br>    <span class="hljs-comment">#         &#x27;status&#x27;: False,</span><br>    <span class="hljs-comment">#         &#x27;err&#x27;: &#x27;ID为&#x27; + uid + &#x27;的文件不存在,打开失败&#x27;</span><br>    <span class="hljs-comment">#     &#125;</span><br>    <span class="hljs-comment">#     return JsonResponse(res)</span><br>    <span class="hljs-comment"># res = &#123;</span><br>    <span class="hljs-comment">#     &#x27;status&#x27;: True,</span><br>    <span class="hljs-comment">#     &#x27;data&#x27;: &#123;</span><br>    <span class="hljs-comment">#         &#x27;name&#x27;: rowobj.name,</span><br>    <span class="hljs-comment">#         &#x27;author&#x27;: rowobj.author,</span><br>    <span class="hljs-comment">#         &#x27;clkscore&#x27;: rowobj.clkscore,</span><br>    <span class="hljs-comment">#         &#x27;fedbakscore&#x27;: rowobj.fedbakscore,</span><br>    <span class="hljs-comment">#         &#x27;status&#x27;: rowobj.status,</span><br>    <span class="hljs-comment">#         &#x27;user&#x27;: rowobj.user.username</span><br>    <span class="hljs-comment">#     &#125;</span><br>    <span class="hljs-comment"># &#125;</span><br>    <span class="hljs-comment"># return JsonResponse(res)</span><br>    <span class="hljs-comment"># 方法2获取字典</span><br>    rowdic = models.Documents.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=uid).values(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;source&#x27;</span>).first()<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> rowdic:<br>        res = &#123;<br>            <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&#x27;err&#x27;</span>: <span class="hljs-string">&#x27;ID为&#x27;</span> + uid + <span class="hljs-string">&#x27;的文件不存在,打开失败&#x27;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> JsonResponse(res)<br>    res = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;data&#x27;</span>: rowdic<br>    &#125;<br>    <span class="hljs-keyword">return</span> JsonResponse(res)<br></code></pre></td></tr></table></figure><h4 id="4-模板层"><a href="#4-模板层" class="headerlink" title="4.模板层"></a>4.模板层</h4><p>==doc_list.html==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;layout.html&#x27; %&#125;<br>&#123;% block mytitle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>医学文献-易管理<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#1e2732</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: transparent;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: background-color .<span class="hljs-number">3s</span> ease-in-out;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e5dcd</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>, <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>-visible &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#3898EC</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>&#123;% endblock %&#125;<br><br>&#123;% block info %&#125;<br>    <span class="hljs-comment">&lt;!-- 添加/编辑文献【对话框】 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addModal&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;document&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-content&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-header&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;close&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Close&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-symbol">&amp;times;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-title&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-body&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group col-md-12&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formadd&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>                        &#123;% for item in form %&#125;<br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-12&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #c12c1f&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                &#123;&#123; item &#125;&#125;<br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        &#123;% endfor %&#125;<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-footer&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submitbtn&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    &#123;#    删除对话框#&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal fade&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delModal&quot;</span> <span class="hljs-attr">tabindex</span>=<span class="hljs-string">&quot;-1&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;dialog&quot;</span> <span class="hljs-attr">aria-labelledby</span>=<span class="hljs-string">&quot;myModalLabel&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal-dialog&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;document&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-danger alert-dismissible fade in&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;alert&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>是否确定删除？<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 10px 0;&quot;</span>&gt;</span>一旦删除，所有关联的相关数据都会被删除！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: right&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn_del_yes&quot;</span>&gt;</span>确 定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> <span class="hljs-attr">data-dismiss</span>=<span class="hljs-string">&quot;modal&quot;</span>&gt;</span>取 消<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;adddoc&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-plus&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                添加文献<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: right;width: 300px&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;n&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Search for docname&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span></span><br><span class="hljs-tag">                               <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">search_data</span> &#125;&#125;&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group-btn&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-search&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>文献列表<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-condensed &quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>文献名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>作者<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>点击量得分<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户反馈得分<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>归档<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>来源<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>管理员<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>                &#123;% for pninfo in page_queryset %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">uid</span>=<span class="hljs-string">&quot;&#123;&#123; pninfo.id &#125;&#125;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>&#123;&#123; pninfo.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.author &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.clkscore &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.fedbakscore &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.get_status_display &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.get_source_display &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; pninfo.user.username &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">uid</span>=<span class="hljs-string">&quot;&#123;&#123; pninfo.id &#125;&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default btn-xs btn_edit&quot;</span></span><br><span class="hljs-tag">                                   <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;编辑&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">uid</span>=<span class="hljs-string">&quot;&#123;&#123; pninfo.id &#125;&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary btn-xs btn_view&quot;</span></span><br><span class="hljs-tag">                                   <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;查看&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">uid</span>=<span class="hljs-string">&quot;&#123;&#123; pninfo.id &#125;&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs btn_del&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;删除&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination pagination-xs&quot;</span>&gt;</span><br>                &#123;&#123; page_str &#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br>&#123;% block myscript %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>        var DELETE_ID;<br>        var EDIT_ID;<br>        $(function () &#123;<br>            bindbtnadd();<br>            bindbtnsave();<br>            bindbtndel();<br>            bindbtnedit();<br>        &#125;)<br><br>        function bindbtnadd() &#123;<br>            $(&quot;#adddoc&quot;).click(function () &#123;<br>                $(&quot;.err_msg&quot;).empty();<br>                &#123;#将当前编辑ID置空#&#125;<br>                EDIT_ID = undefined;<br>                &#123;#清空已有的数据#&#125;<br>                $(&quot;#formadd&quot;)[0].reset();<br>                $(&#x27;#addModal&#x27;).modal(&#x27;show&#x27;);<br>            &#125;)<br>        &#125;<br><br>        function bindbtnsave() &#123;<br>            $(&quot;#submitbtn&quot;).click(function () &#123;<br>                if (EDIT_ID) &#123;<br>                    &#123;#发送编辑请求#&#125;<br>                    doedit();<br>                &#125; else &#123;<br>                    &#123;#发送天加请求#&#125;<br>                    doadd();<br>                &#125;<br>            &#125;)<br><br>        &#125;<br><br>        function doadd() &#123;<br>            console.log(&quot;发送添加请求&quot;)<br>            $(&quot;.err_msg&quot;).empty();<br>            &#123;#添加文献#&#125;<br>            $.ajax(&#123;<br>                url: &quot;/doc/add/&quot;,<br>                type: &quot;post&quot;,<br>                data: $(&quot;#formadd&quot;).serialize(),<br>                dataType: &quot;json&quot;,<br>                success: function (res) &#123;<br>                    if (res.status) &#123;<br>                        &#123;#$(&quot;#formadd&quot;)为jquery对象，$(&quot;#formadd&quot;)[0]为dom对象#&#125;<br>                        &#123;#$(&quot;#formadd&quot;)[0].reset();#&#125;<br>                        &#123;#$(&#x27;#myModal&#x27;).modal(&#x27;hide&#x27;);#&#125;<br>                        location.reload();<br>                    &#125; else &#123;<br>                        $.each(res.err, function (name, errmsglist) &#123;<br>                            $(&quot;#id_&quot; + name).prev().text(errmsglist[0])<br>                        &#125;)<br>                    &#125;<br>                &#125;<br>            &#125;)<br>        &#125;<br><br>        function doedit() &#123;<br>            console.log(&quot;发送编辑请求&quot;)<br>            $(&quot;.err_msg&quot;).empty();<br>            &#123;#编辑文献#&#125;<br>            $.ajax(&#123;<br>                url: &quot;/doc/edit/&quot; + &quot;?uid=&quot; + EDIT_ID,<br>                type: &quot;post&quot;,<br>                data: $(&quot;#formadd&quot;).serialize(),<br>                dataType: &quot;json&quot;,<br>                success: function (res) &#123;<br>                    if (res.status) &#123;<br>                        &#123;#$(&quot;#formadd&quot;)为jquery对象，$(&quot;#formadd&quot;)[0]为dom对象#&#125;<br>                        &#123;#$(&quot;#formadd&quot;)[0].reset();#&#125;<br>                        &#123;#$(&#x27;#myModal&#x27;).modal(&#x27;hide&#x27;);#&#125;<br>                        location.reload();<br>                    &#125; else &#123;<br>                        if (res.tips) &#123;<br>                            &#123;#文献不存在错误#&#125;<br>                            alert(res.tips)<br>                            $(&#x27;#myModal&#x27;).modal(&#x27;hide&#x27;);<br>                        &#125; else &#123;<br>                            &#123;#文献信息编辑填写错误#&#125;<br>                            $.each(res.err, function (name, errmsglist) &#123;<br>                                $(&quot;#id_&quot; + name).prev().text(errmsglist[0])<br>                            &#125;)<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;)<br>        &#125;<br><br>        function bindbtndel() &#123;<br>            $(&quot;.btn_del&quot;).click(function () &#123;<br>                &#123;#显示删除对话框#&#125;<br>                $(&#x27;#delModal&#x27;).modal(&#x27;show&#x27;);<br>                &#123;#获取当前行id并保存到全局变量中#&#125;<br>                DELETE_ID = $(this).attr(&#x27;uid&#x27;);<br>            &#125;)<br>            $(&quot;.btn_del_yes&quot;).click(function () &#123;<br>                $.ajax(&#123;<br>                    url: &quot;/doc/del/&quot;,<br>                    type: &#x27;get&#x27;,<br>                    data: &#123;<br>                        uid: DELETE_ID<br>                    &#125;,<br>                    dataType: &#x27;json&#x27;,<br>                    success: function (res) &#123;<br>                        if (res.status) &#123;<br>                            $(&#x27;#delModal&#x27;).modal(&#x27;hide&#x27;);<br>                            $(&quot;tr[uid=&quot; + DELETE_ID + &quot;]&quot;).remove();<br>                            &#123;#location.reload();#&#125;<br>                        &#125; else &#123;<br>                            alert(res.err)<br>                            $(&#x27;#delModal&#x27;).modal(&#x27;hide&#x27;);<br>                            console.log(res)<br>                        &#125;<br><br>                    &#125;<br>                &#125;)<br>            &#125;)<br>        &#125;<br><br>        function bindbtnedit() &#123;<br>            $(&quot;.btn_edit&quot;).click(function () &#123;<br>                $(&quot;.err_msg&quot;).empty();<br>                &#123;#清空原有值#&#125;<br>                $(&quot;#formadd&quot;)[0].reset();<br>                &#123;#获取当前行id#&#125;<br>                let uid = $(this).attr(&#x27;uid&#x27;)<br>                EDIT_ID = uid<br>                &#123;#发送Ajax请求去后端获取当前行的数据#&#125;<br>                $.ajax(&#123;<br>                    url: &#x27;/doc/edit/details&#x27;,<br>                    type: &#x27;get&#x27;,<br>                    data: &#123;<br>                        uid: uid<br>                    &#125;,<br>                    dataType: &#x27;json&#x27;,<br>                    success: function (res) &#123;<br>                        if (res.status) &#123;<br>                            console.log(res)<br>                            &#123;#获取到的后端信息填充到表单中#&#125;<br>                            $.each(res.data, function (name, value) &#123;<br>                                $(&quot;#id_&quot; + name).val(value)<br>                            &#125;)<br>                            &#123;#修改对话框标题#&#125;<br>                            $(&#x27;#myModalLabel&#x27;).text(&#x27;编辑&#x27;);<br>                            &#123;#显示对话框#&#125;<br>                            $(&#x27;#addModal&#x27;).modal(&#x27;show&#x27;);<br>                        &#125; else &#123;<br>                            alert(res.err)<br>                        &#125;<br>                    &#125;<br>                &#125;)<br>            &#125;)<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>想要去数据库获取数据时：对象/字典/queryset（列表包含对象）/queryset（列表包含字典）/queryset（列表包含元组)</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 方法1获取对象</span><br>   <span class="hljs-comment"># rowobj = models.Documents.objects.filter(id=uid).first()</span><br>   <span class="hljs-comment"># if not rowobj:</span><br>   <span class="hljs-comment">#     res = &#123;</span><br>   <span class="hljs-comment">#         &#x27;status&#x27;: False,</span><br>   <span class="hljs-comment">#         &#x27;err&#x27;: &#x27;ID为&#x27; + uid + &#x27;的文件不存在,打开失败&#x27;</span><br>   <span class="hljs-comment">#     &#125;</span><br>   <span class="hljs-comment">#     return JsonResponse(res)</span><br>   <span class="hljs-comment"># res = &#123;</span><br>   <span class="hljs-comment">#     &#x27;status&#x27;: True,</span><br>   <span class="hljs-comment">#     &#x27;data&#x27;: &#123;</span><br>   <span class="hljs-comment">#         &#x27;name&#x27;: rowobj.name,</span><br>   <span class="hljs-comment">#         &#x27;author&#x27;: rowobj.author,</span><br>   <span class="hljs-comment">#         &#x27;clkscore&#x27;: rowobj.clkscore,</span><br>   <span class="hljs-comment">#         &#x27;fedbakscore&#x27;: rowobj.fedbakscore,</span><br>   <span class="hljs-comment">#         &#x27;status&#x27;: rowobj.status,</span><br>   <span class="hljs-comment">#         &#x27;user&#x27;: rowobj.user.username</span><br>   <span class="hljs-comment">#     &#125;</span><br>   <span class="hljs-comment"># &#125;</span><br>   <span class="hljs-comment"># return JsonResponse(res)</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 方法2获取字典</span><br>  rowdic = models.Documents.objects.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">id</span>=uid).values(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;author&#x27;</span>, <span class="hljs-string">&#x27;source&#x27;</span>).first()<br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> rowdic:<br>      res = &#123;<br>          <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">False</span>,<br>          <span class="hljs-string">&#x27;err&#x27;</span>: <span class="hljs-string">&#x27;ID为&#x27;</span> + uid + <span class="hljs-string">&#x27;的文件不存在,打开失败&#x27;</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> JsonResponse(res)<br>  res = &#123;<br>      <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span>,<br>      <span class="hljs-string">&#x27;data&#x27;</span>: rowdic<br>  &#125;<br>  <span class="hljs-keyword">return</span> JsonResponse(res)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法3获取quertset = [obj1,obj2,obj3]</span><br>rowobj = models.Documents.objects.<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法3获取quertset = [dict1,dict2,dict3]</span><br>&gt;rowobj = models.Documents.objects.<span class="hljs-built_in">all</span>().values(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法4获取quertset = [tuple1,tuple2,tuple3]</span><br>&gt;rowobj = models.Documents.objects.<span class="hljs-built_in">all</span>().values_list(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>)<br></code></pre></td></tr></table></figure></blockquote><h2 id="12-数据可视化"><a href="#12-数据可视化" class="headerlink" title="12.数据可视化"></a>12.数据可视化</h2><ul><li>highchar，国外</li><li>echars，国内</li></ul><h3 id="1-视图层"><a href="#1-视图层" class="headerlink" title="1.视图层"></a>1.视图层</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chart_list</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;数据可视化页面&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;chart_list.html&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chart_bar</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;柱状图数据接口&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 去数据库中获取数据</span><br>    <span class="hljs-comment"># global series_list</span><br>    legend = [<span class="hljs-string">&#x27;文献数量&#x27;</span>, <span class="hljs-string">&#x27;浏览量&#x27;</span>]<br>    series_one = &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;文献数量&#x27;</span>,<br>        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>        <span class="hljs-string">&#x27;data&#x27;</span>: [<span class="hljs-number">1005</span>, <span class="hljs-number">2300</span>, <span class="hljs-number">1856</span>, <span class="hljs-number">2479</span>, <span class="hljs-number">3420</span>, <span class="hljs-number">5870</span>]<br>    &#125;<br>    series_two = &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;浏览量&#x27;</span>,<br>        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>        <span class="hljs-string">&#x27;data&#x27;</span>: [<span class="hljs-number">1200</span>, <span class="hljs-number">1625</span>, <span class="hljs-number">860</span>, <span class="hljs-number">1520</span>, <span class="hljs-number">2376</span>, <span class="hljs-number">1464</span>]<br>    &#125;<br>    series_list = [series_one, series_two]<br>    x_axis = [<span class="hljs-string">&#x27;医学&#x27;</span>, <span class="hljs-string">&#x27;工学&#x27;</span>, <span class="hljs-string">&#x27;理学&#x27;</span>, <span class="hljs-string">&#x27;农学&#x27;</span>, <span class="hljs-string">&#x27;法学&#x27;</span>, <span class="hljs-string">&#x27;人文社科&#x27;</span>]<br>    res = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;data&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;legend&#x27;</span>: legend,<br>            <span class="hljs-string">&#x27;series_list&#x27;</span>: series_list,<br>            <span class="hljs-string">&#x27;x_axis&#x27;</span>: x_axis<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> JsonResponse(res)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chart_pie</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;饼状图数据接口&quot;&quot;&quot;</span><br>    data_list = [<br>        &#123;<span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-number">1048</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;研发部&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-number">735</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;后勤部&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-number">580</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;运营部&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-number">484</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;销售部&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-number">300</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;售后部&#x27;</span>&#125;<br>    ]<br>    res = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;data&#x27;</span>: data_list<br>    &#125;<br>    <span class="hljs-keyword">return</span> JsonResponse(res)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chart_line</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;折线图数据接口&quot;&quot;&quot;</span><br>    legend = [<span class="hljs-string">&#x27;alleyf&#x27;</span>, <span class="hljs-string">&#x27;chuiyugin&#x27;</span>]<br>    series_list = [<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: legend[<span class="hljs-number">0</span>],<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>            <span class="hljs-string">&quot;stack&quot;</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>],<br>            <span class="hljs-string">&quot;smooth&quot;</span>: <span class="hljs-literal">True</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: legend[<span class="hljs-number">1</span>],<br>            <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br>            <span class="hljs-string">&quot;stack&quot;</span>: <span class="hljs-string">&#x27;Total&#x27;</span>,<br>            <span class="hljs-string">&quot;data&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">6</span>],<br>            <span class="hljs-string">&quot;smooth&quot;</span>: <span class="hljs-literal">True</span><br>        &#125;<br>    ]<br>    res = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;data&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;legend&#x27;</span>: legend,<br>            <span class="hljs-string">&#x27;series_list&#x27;</span>: series_list<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> JsonResponse(res)<br></code></pre></td></tr></table></figure><h3 id="2-模板层"><a href="#2-模板层" class="headerlink" title="2.模板层"></a>2.模板层</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;layout.html&#x27; %&#125;<br>&#123;% load static %&#125;<br>&#123;% block mytitle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据分析-可视化<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br><br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-primary&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span>折线图<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;m1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;m4&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span>柱状图<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;m2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-success&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span>饼图<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;m3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>&#123;% endblock %&#125;<br><br>&#123;% block myscript %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;% static &#x27;js/echarts.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>        $(function () &#123;<br>            &#123;#echarts图#&#125;<br>            initline()<br>            initbar();<br>            initpie();<br>            &#123;#highcharts图#&#125;<br>            inithbar();<br>        &#125;)<br><br>        function initbar() &#123;<br>            // 基于准备好的dom，初始化echarts实例<br>            var myChart = echarts.init($(&#x27;#m2&#x27;)[0], &#x27;dark&#x27;);<br><br>            // 指定图表的配置项和数据<br>            var option = &#123;<br>                title: &#123;<br>                    text: &#x27;文献种类概览&#x27;,<br>                    &#123;#副标题#&#125;<br>                    subtext: &#x27;详情&#x27;,<br>                    sublink: &#x27;https://fcsy.fit&#x27;,<br>                    &#123;#标题居中#&#125;<br>                    left: &#x27;center&#x27;<br>                &#125;,<br>                tooltip: &#123;&#125;,<br>                legend: &#123;<br>                    data: [],   //后台数据更新<br>                    &#123;#图例放在底部#&#125;<br>                    bottom: 0<br>                &#125;,<br>                xAxis: &#123;<br>                    data: []<br>                &#125;,<br>                yAxis: &#123;&#125;,<br>                series: []<br>            &#125;;<br>            $.ajax(&#123;<br>                url: &#x27;/chart/bar/&#x27;,<br>                type: &#x27;get&#x27;,<br>                dataType: &#x27;json&#x27;,<br>                success: function (res) &#123;<br>                    &#123;#获取后台返回的数据#&#125;<br>                    if (res.status) &#123;<br>                        option.legend.data = res.data.legend;<br>                        option.xAxis.data = res.data.x_axis;<br>                        option.series = res.data.series_list;<br>                        myChart.setOption(option);<br>                    &#125;<br>                &#125;<br>            &#125;)<br>            // 使用刚指定的配置项和数据显示图表。<br>        &#125;<br><br>        function initpie() &#123;<br>            let myChart = echarts.init($(&#x27;#m3&#x27;)[0], &#x27;dark&#x27;);<br>            let option;<br><br>            option = &#123;<br>                title: &#123;<br>                    text: &#x27;部门预算占比&#x27;,<br>                    subtext: &#x27;陕西分部&#x27;,<br>                    left: &#x27;center&#x27;<br>                &#125;,<br>                tooltip: &#123;<br>                    trigger: &#x27;item&#x27;<br>                &#125;,<br>                legend: &#123;<br>                    orient: &#x27;vertical&#x27;,<br>                    left: &#x27;right&#x27;,<br>                &#125;,<br>                series: [<br>                    &#123;<br>                        name: &#x27;预算&#x27;,<br>                        type: &#x27;pie&#x27;,<br>                        radius: &#x27;50%&#x27;,<br>                        data: [],<br>                        emphasis: &#123;<br>                            itemStyle: &#123;<br>                                shadowBlur: 10,<br>                                shadowOffsetX: 0,<br>                                shadowColor: &#x27;rgba(0, 0, 0, 0.5)&#x27;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                ]<br>            &#125;;<br>            $.ajax(&#123;<br>                url: &#x27;/chart/pie/&#x27;,<br>                type: &#x27;get&#x27;,<br>                dataType: &#x27;json&#x27;,<br>                success: function (res) &#123;<br>                    if (res.status) &#123;<br>                        option.series[0].data = res.data;<br>                        option &amp;&amp; myChart.setOption(option);<br>                    &#125;<br>                &#125;<br>            &#125;)<br>        &#125;<br><br>        function initline() &#123;<br>            var chartDom = $(&#x27;#m1&#x27;)[0];<br>            var myChart = echarts.init(chartDom, &#x27;dark&#x27;);<br>            var option;<br><br>            option = &#123;<br>                title: &#123;<br>                    text: &#x27;任务&#x27;,<br>                    left: &#x27;center&#x27;<br>                &#125;,<br>                tooltip: &#123;<br>                    trigger: &#x27;axis&#x27;<br>                &#125;,<br>                legend: &#123;<br>                    data: [], //后台获取用户名<br>                    itemGap: 20,<br>                    bottom: 0<br>                &#125;,<br>                toolbox: &#123;<br>                    feature: &#123;<br>                        saveAsImage: &#123;&#125;<br>                    &#125;<br>                &#125;,<br>                xAxis: &#123;<br>                    type: &#x27;category&#x27;,<br>                    boundaryGap: false,<br>                    data: [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]<br>                &#125;,<br>                yAxis: &#123;<br>                    type: &#x27;value&#x27;<br>                &#125;,<br>                series: [<br>                    &#123;<br>                        name: &#x27;alleyf&#x27;,<br>                        type: &#x27;line&#x27;,<br>                        stack: &#x27;Total&#x27;,<br>                        data: [120, 132, 101, 134, 90, 230, 210],<br>                        smooth: true<br>                    &#125;,<br>                    &#123;<br>                        name: &#x27;chuiyugin&#x27;,<br>                        type: &#x27;line&#x27;,<br>                        stack: &#x27;Total&#x27;,<br>                        data: [220, 182, 191, 234, 290, 330, 310],<br>                        smooth: true<br>                    &#125;<br>                ]<br>            &#125;;<br>            $.ajax(&#123;<br>                url: &#x27;/chart/line/&#x27;,<br>                type: &#x27;get&#x27;,<br>                dataType: &#x27;json&#x27;,<br>                success: function (res) &#123;<br>                    if (res.status) &#123;<br>                        option.legend.data = res.data.legend;<br>                        option.series = res.data.series_list;<br>                        option &amp;&amp; myChart.setOption(option);<br><br>                    &#125;<br>                &#125;<br>            &#125;)<br>        &#125;<br><br>        function inithbar() &#123;<br>            // 图表配置<br>            const options = &#123;<br>                chart: &#123;<br>                    type: &#x27;bar&#x27;                          //指定图表的类型，默认是折线图（line）<br>                &#125;,<br>                title: &#123;<br>                    text: &#x27;highchars&#x27;                 // 标题<br>                &#125;,<br>                xAxis: &#123;<br>                    categories: [&#x27;苹果&#x27;, &#x27;香蕉&#x27;, &#x27;橙子&#x27;]   // x 轴分类<br>                &#125;,<br>                yAxis: &#123;<br>                    title: &#123;<br>                        text: &#x27;吃水果个数&#x27;                // y 轴标题<br>                    &#125;<br>                &#125;,<br>                series: [&#123;                              // 数据列<br>                    name: &#x27;小明&#x27;,                        // 数据列名<br>                    data: [1, 0, 4]                     // 数据<br>                &#125;, &#123;<br>                    name: &#x27;小红&#x27;,<br>                    data: [5, 7, 3]<br>                &#125;]<br>            &#125;;<br>            // 图表初始化函数<br>            const chart = Highcharts.chart(&#x27;m4&#x27;, options);<br>        &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.highcharts.com.cn/highcharts/highcharts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h2 id="13-文件上传"><a href="#13-文件上传" class="headerlink" title="13.文件上传"></a>13.文件上传</h2><h3 id="1-基础上传"><a href="#1-基础上传" class="headerlink" title="1.基础上传"></a>1.基础上传</h3><h4 id="1-视图层-1"><a href="#1-视图层-1" class="headerlink" title="1.视图层"></a>1.视图层</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">doc_upload</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-comment"># 获取文件对象</span><br>    file_obj = request.FILES.get(<span class="hljs-string">&quot;avatars&quot;</span>)<br>    path = <span class="hljs-string">&quot;./staffsys/static/img/&quot;</span> + file_obj.name<br>    status = upload.upload(path=path, file_obj=file_obj)<br>    res = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: status<br>    &#125;<br>    <span class="hljs-keyword">return</span> JsonResponse(res)<br></code></pre></td></tr></table></figure><h4 id="2-utils"><a href="#2-utils" class="headerlink" title="2.utils"></a>2.utils</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#upload.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">path, file_obj</span>):<br>    f = <span class="hljs-built_in">open</span>(path, mode=<span class="hljs-string">&#x27;wb&#x27;</span>)<br>    <span class="hljs-comment">#文件分块写入</span><br>    <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> file_obj.chunks():<br>        f.write(chunk)<br>    f.close()<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h4 id="3-模板层"><a href="#3-模板层" class="headerlink" title="3.模板层"></a>3.模板层</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/chart/upload/&quot;</span>&gt;</span><br>    &#123;% csrf_token %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-案例1：批量上传数据（基于Excel）"><a href="#2-案例1：批量上传数据（基于Excel）" class="headerlink" title="2.案例1：批量上传数据（基于Excel）"></a>2.案例1：批量上传数据（基于Excel）</h3><h4 id="1-视图层-2"><a href="#1-视图层-2" class="headerlink" title="1.视图层"></a>1.视图层</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">depart_upload</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;批量上传文件&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 获取上传的文件对象</span><br>    file_obj = request.FILES.get(<span class="hljs-string">&#x27;exc&#x27;</span>)<br>    <span class="hljs-string">&quot;&quot;&quot;------------------------------------上传文件到本地静态文件目录------------------------------------&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 直接打开excel并读取内容</span><br>    wb = load_workbook(file_obj)<br>    <span class="hljs-comment"># 获取第一列</span><br>    sheet = wb.worksheets[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 读取第一行第一列</span><br>    cell = sheet.cell(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(cell)<br>    col_num = <span class="hljs-number">1</span><br>    depart_name = []<br>    depart_leader = []<br>    depart_num = []<br>    <span class="hljs-comment"># 循环获取每一列数据sheet.iter_cols(min_row=2, min_col=1):</span><br>    <span class="hljs-comment"># 循环获取每行数据sheet.iter_rows(min_row=2)</span><br>    <span class="hljs-comment"># for row in sheet.iter_rows(min_row=2):</span><br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> sheet.iter_cols(min_row=<span class="hljs-number">2</span>, min_col=<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> col:<br>            <span class="hljs-keyword">if</span> col_num == <span class="hljs-number">1</span>:<br>                depart_name.append(data.value)<br>            <span class="hljs-keyword">elif</span> col_num == <span class="hljs-number">2</span>:<br>                depart_leader.append(data.value)<br>            <span class="hljs-keyword">else</span>:<br>                depart_num.append(data.value)<br>        col_num += <span class="hljs-number">1</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;name&#x27;</span>: depart_name,<br>        <span class="hljs-string">&#x27;leader&#x27;</span>: depart_leader,<br>        <span class="hljs-string">&#x27;num&#x27;</span>: depart_num<br>    &#125;<br>    status = <span class="hljs-literal">True</span><br>    row_num = <span class="hljs-built_in">len</span>(data.get(<span class="hljs-string">&#x27;name&#x27;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row_num):<br>        exist = models.Department.objects.<span class="hljs-built_in">filter</span>(title=data.get(<span class="hljs-string">&#x27;name&#x27;</span>)[i]).exists()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> exist:<br>            models.Department.objects.create(title=data.get(<span class="hljs-string">&#x27;name&#x27;</span>)[i], leader=data.get(<span class="hljs-string">&#x27;leader&#x27;</span>)[i],<br>                                             number=data.get(<span class="hljs-string">&#x27;num&#x27;</span>)[i])<br>        <span class="hljs-keyword">else</span>:<br>            status = <span class="hljs-literal">False</span><br>    res = &#123;<br>        <span class="hljs-string">&#x27;status&#x27;</span>: status,<br>        <span class="hljs-string">&#x27;data&#x27;</span>: data,<br>    &#125;<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/depart/list/&#x27;</span>)<br>    <br>    <span class="hljs-string">&quot;&quot;&quot;------------------------------------上传文件到本地静态文件目录------------------------------------&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># path = &quot;./staffsys/static/doc/&quot; + file_obj.name</span><br>    <span class="hljs-comment"># if upload.upload(path=path, file_obj=file_obj):</span><br>    <span class="hljs-comment">#     res = &#123;</span><br>    <span class="hljs-comment">#         &#x27;status&#x27;: True</span><br>    <span class="hljs-comment">#     &#125;</span><br>    <span class="hljs-comment">#     return JsonResponse(res)</span><br>    <span class="hljs-comment"># return JsonResponse(res)</span><br></code></pre></td></tr></table></figure><h4 id="2-模板层-1"><a href="#2-模板层-1" class="headerlink" title="2.模板层"></a>2.模板层</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;layout.html&#x27; %&#125;<br>&#123;% block mytitle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>部门列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>&#123;% endblock %&#125;<br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>批量上传<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-horizontal&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/depart/upload/&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>                    &#123;% csrf_token %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-12 form-group has-success has-feedback&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;margin: 0 auto;&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-sm-6 text-center&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 0 auto;float: none&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exc&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;batch_data&quot;</span></span><br><span class="hljs-tag">                                   <span class="hljs-attr">aria-describedby</span>=<span class="hljs-string">&quot;batch_dataStatus&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;glyphicon glyphicon-upload form-control-feedback&quot;</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;batch_dataStatus&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>(success)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin: 10px auto&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;upload&quot;</span></span><br><span class="hljs-tag">                                   <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-bottom: 10px&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/depart/add/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-plus&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>新建部门<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 部门列表<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-hover table-condensed table-bordered&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>部门ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>部门名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>部门负责人<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>部门人数<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>                &#123;% for department in queryset %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span>&#123;&#123; department.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; department.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; department.leader &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; department.number &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/depart/&#123;&#123; department.id &#125;&#125;/edit/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info btn-xs&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/depart/delete/?nid=&#123;&#123; department.id &#125;&#125;&quot;</span></span><br><span class="hljs-tag">                                <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-xs&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination pagination-xs&quot;</span>&gt;</span><br>                &#123;&#123; page_str &#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h3 id="3-案例2：混合数据-Form"><a href="#3-案例2：混合数据-Form" class="headerlink" title="3.案例2：混合数据(Form)"></a>3.案例2：混合数据(Form)</h3><blockquote><p><font title=green>提交页面时：用户输入数据+文件（输入不能为空，报错）</font></p></blockquote><h4 id="1-Form-py表单模型"><a href="#1-Form-py表单模型" class="headerlink" title="1.Form.py表单模型"></a>1.Form.py表单模型</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FormUpload</span>(bootstrapmodelform.BootStrapForm1):<br>    boostrap_exclude_fields = [<span class="hljs-string">&#x27;avatar&#x27;</span>]<br>    name = forms.CharField(label=<span class="hljs-string">&quot;用户名&quot;</span>)<br>    pwd = forms.CharField(label=<span class="hljs-string">&quot;密码&quot;</span>, max_length=<span class="hljs-number">32</span>)<br>    avatar = forms.FileField(label=<span class="hljs-string">&quot;头像&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-视图层"><a href="#2-视图层" class="headerlink" title="2.视图层"></a>2.视图层</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">form_upload</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        title = <span class="hljs-string">&quot;Form表单上传&quot;</span><br>        form = FormUpload()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;form_upload.html&quot;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form, <span class="hljs-string">&#x27;title&#x27;</span>: title&#125;)<br>    form = FormUpload(data=request.POST, files=request.FILES)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-built_in">print</span>(form.cleaned_data)<br>        <span class="hljs-comment"># 读取到内容,根据需求合理处理每个字段信息</span><br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&#x27;status&#x27;</span>: <span class="hljs-literal">True</span>&#125;)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&quot;form_upload.html&quot;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: form&#125;)<br></code></pre></td></tr></table></figure><h4 id="3-模板层-1"><a href="#3-模板层-1" class="headerlink" title="3.模板层"></a>3.模板层</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;layout.html&#x27; %&#125; # 继承父模块的标识<br>&#123;% block mytitle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#1e2732</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: transparent;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: background-color .<span class="hljs-number">3s</span> ease-in-out;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e5dcd</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>, <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>-visible &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#3898EC</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>                &#123;% block actiontitle %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                &#123;% endblock %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>                    &#123;% block myform %&#125;<br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group col-md-12&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>                            &#123;% csrf_token %&#125;<br>                            &#123;% for item in form %&#125;<br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-6&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    &#123;&#123; item &#125;&#125;<br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #c12c1f&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;&#123; item.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            &#123;% endfor %&#125;<br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-12&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button--submit &quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Subscribe&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    &#123;% endblock %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h3 id="4-上传目录"><a href="#4-上传目录" class="headerlink" title="4.上传目录"></a>4.上传目录</h3><blockquote><p>在Django开发过程中有两个特殊的文件夹：</p><ul><li>static：存放静态文件的路径，包括：CSS，JS，项目图片，项目插件等。</li><li>media：存放用户上传的数据的目录。</li></ul></blockquote><h5 id="4-1启用media"><a href="#4-1启用media" class="headerlink" title="4.1启用media"></a>4.1启用media</h5><ol><li><p><strong>配置urls.py</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path<br><span class="hljs-keyword">from</span> django.views.static <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br>urlpatterns = [<br>    re_path(<span class="hljs-string">r&#x27;^media/(?P&lt;path&gt;.*)$&#x27;</span>, serve, &#123;<span class="hljs-string">&#x27;document_root&#x27;</span>: settings.MEDIA_ROOT&#125;, name=<span class="hljs-string">&#x27;media&#x27;</span>),<br>    ]<br></code></pre></td></tr></table></figure></li><li><p><strong>配置setting.py</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 设置用户上传目录media目录</span><br><span class="hljs-keyword">import</span> os<br>MEDIA_ROOT = os.path.join(BASE_DIR, <span class="hljs-string">&quot;media&quot;</span>)<br>MEDIA_URL = <span class="hljs-string">&quot;/media/&quot;</span><br></code></pre></td></tr></table></figure></li></ol><p>==路径位置==</p><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221219162711983.png" alt="image-20221219162711983"></p><p>==浏览器访问media路径文件==</p><p><a href=""><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221219162812492.png" alt="image-20221219162812492"></a></p><h3 id="5-案例3：混合数据-ModelForm"><a href="#5-案例3：混合数据-ModelForm" class="headerlink" title="5.案例3：混合数据(ModelForm)"></a>5.案例3：混合数据(ModelForm)</h3><h4 id="1-模型层"><a href="#1-模型层" class="headerlink" title="1.模型层"></a>1.模型层</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">City</span>(models.Model):<br>    <span class="hljs-string">&quot;&quot;&quot;城市&quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class="hljs-string">&quot;名称&quot;</span>, max_length=<span class="hljs-number">32</span>)<br>    count = models.IntegerField(verbose_name=<span class="hljs-string">&quot;人口&quot;</span>)<br>    <span class="hljs-comment"># 本质上数据库也是CharField,自动保存数据,存的是文件路径</span><br>    img = models.FileField(verbose_name=<span class="hljs-string">&quot;LOGO&quot;</span>, max_length=<span class="hljs-number">128</span>, upload_to=<span class="hljs-string">&quot;city/&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-表单层"><a href="#2-表单层" class="headerlink" title="2.表单层"></a>2.表单层</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModelFormUpload</span>(bootstrapmodelform.BootStrapModelForm1):<br>    boostrap_exclude_fields = [<span class="hljs-string">&#x27;img&#x27;</span>]<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>        model = models.City<br>        fields = <span class="hljs-string">&quot;__all__&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-视图层-1"><a href="#3-视图层-1" class="headerlink" title="3.视图层"></a>3.视图层</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">modelform_upload</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;modelform上传&quot;&quot;&quot;</span><br>    title = <span class="hljs-string">&quot;ModelForm上传&quot;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        form = ModelFormUpload()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;modelform_upload.html&#x27;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form, <span class="hljs-string">&quot;title&quot;</span>: title&#125;)<br>    form = ModelFormUpload(data=request.POST, files=request.FILES)<br>    <span class="hljs-keyword">if</span> form.is_valid():<br>        <span class="hljs-built_in">print</span>(form.cleaned_data)<br>        <span class="hljs-comment"># modelform自动保存文件到模型层设置的目录,并且将字段+上传路径写入到数据库</span><br>        form.save()<br>        <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-literal">True</span>&#125;)<br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;modelform_upload.html&#x27;</span>, &#123;<span class="hljs-string">&quot;form&quot;</span>: form, <span class="hljs-string">&quot;title&quot;</span>: title&#125;)<br></code></pre></td></tr></table></figure><h4 id="4-模板层-1"><a href="#4-模板层-1" class="headerlink" title="4.模板层"></a>4.模板层</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &#x27;layout.html&#x27; %&#125; # 继承父模块的标识<br>&#123;% block mytitle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block mystyle %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#1e2732</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: transparent;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e4dcd</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: background-color .<span class="hljs-number">3s</span> ease-in-out;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.button--submit</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5e5dcd</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>, <span class="hljs-selector-class">.input</span><span class="hljs-selector-pseudo">:focus</span>-visible &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#3898EC</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>&#123;% endblock %&#125;<br>&#123;% block info %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel panel-info&quot;</span>&gt;</span><br>                &#123;% block actiontitle %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-heading&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                &#123;% endblock %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;panel-body&quot;</span>&gt;</span><br>                    &#123;% block myform %&#125;<br>                        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-group col-md-12&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">novalidate</span>&gt;</span><br>                            &#123;% csrf_token %&#125;<br>                            &#123;% for item in form %&#125;<br>                                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-6&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>&#123;&#123; item.label &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                                    &#123;&#123; item &#125;&#125;<br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #c12c1f&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;&#123; item.errors.0 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                            &#123;% endfor %&#125;<br>                            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group col-md-12&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button--submit &quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Subscribe&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>                    &#123;% endblock %&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h3 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h3><ul><li><p>自己动手写</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">file_obj = request.FILES.get(<span class="hljs-string">&quot;filename&quot;</span>)<br>···<br></code></pre></td></tr></table></figure></li><li><p>Form组件（表单验证）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">request.POST<br>form = Form(data=request.POST,files=request.FILES)<br><span class="hljs-comment">#保存需要自己保存</span><br>file_obj = request.FILES.get(<span class="hljs-string">&quot;filename&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>ModelForm组件（表单验证+自动保存）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">-media文件夹<br>-models.py定义类包含文件字段<br><span class="hljs-comment"># 本质上数据库也是CharField,自动保存数据,存的是文件路径</span><br>    img = models.FileField(verbose_name=<span class="hljs-string">&quot;LOGO&quot;</span>, max_length=<span class="hljs-number">128</span>, upload_to=<span class="hljs-string">&quot;city/&quot;</span>)<br></code></pre></td></tr></table></figure></li></ul><h2 id="14-Vue"><a href="#14-Vue" class="headerlink" title="14.Vue"></a>14.Vue</h2><p><a href="https://v3.cn.vuejs.org/">Vue中文网</a></p><h3 id="1-模板语法"><a href="#1-模板语法" class="headerlink" title="1.模板语法"></a>1.模板语法</h3><blockquote><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层组件实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。</p><p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应性系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p><p>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，<a href="https://vue3.zcopy.site/guide/render-function.html">直接写渲染 (render) 函数</a>，使用可选的 JSX 语法。</p></blockquote><h4 id="1-1插值"><a href="#1-1插值" class="headerlink" title="1.1插值"></a>1.1插值</h4><h5 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h5><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Mustache 标签将会被替代为对应组件实例中 <code>msg</code> property 的值。无论何时，绑定的组件实例上 <code>msg</code> property 发生了改变，插值处的内容都会更新。</p><p>通过使用 <a href="https://vue3.zcopy.site/api/directives.html#v-once">v-once 指令</a>，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：绑定一个纯文本</p><h5 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h5><p>双大括号会将数据解释为<strong>普通文本</strong>，而<strong>非 HTML 代码</strong>。为了输出真正的 HTML，你需要使用<a href="https://vue3.zcopy.site/api/directives.html#v-html"><code>v-html</code> 指令</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Using v-html directive: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：绑定一个动态的html标签</p><h5 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h5><p>Mustache 语法不能在 HTML attribute 中使用，然而，可以使用 <a href="https://vue3.zcopy.site/api/directives.html#v-bind"><code>v-bind</code> 指令</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果绑定的值是 <code>null</code> 或 <code>undefined</code>，那么该 attribute 将不会被包含在渲染的元素上。</p><p>对于布尔 attribute (它们只要存在就意味着值为 <code>true</code>)，<code>v-bind</code> 工作起来略有不同，在这个例子中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-bind:disabled</span>=<span class="hljs-string">&quot;isButtonDisabled&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果 <code>isButtonDisabled</code> 的值是 truthy[<a href="https://vue3.zcopy.site/guide/template-syntax.html#footnote-1">1]</a>，那么 <code>disabled</code> attribute 将被包含在内。如果该值是一个空字符串，它也会被包括在内，与 <code>&lt;button disabled=&quot;&quot;&gt;</code> 保持一致。对于其他错误的值，该 attribute 将被省略。</p><p>注：绑定一个动态的属性</p><h5 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 JavaScript 表达式</h5><p>迄今为止，在我们的模板中，我们一直都只绑定简单的 property 键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;&#123; number + 1 &#125;&#125;<br><br>&#123;&#123; message + &quot; World&quot; &#125;&#125;<br><br>&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;<br><br>&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这些表达式会在当前活动实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--  这是语句，不是表达式：--&gt;</span><br>&#123;&#123; var a = 1 &#125;&#125;<br><br><span class="hljs-comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br>&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2指令"><a href="#1-2指令" class="headerlink" title="1.2指令"></a>1.2指令</h4><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 和 <code>v-on</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。回顾我们在介绍中看到的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>我是真悟空<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>我是假猴子<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show:</span>&quot;<span class="hljs-attr">flag</span>&quot;&gt;</span>我是真猴子<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里，<code>v-if</code> 指令（条件显示必定显示一个）将根据表达式 <code>flag</code> 的值的真假来插入/移除 <code>&lt;p&gt;</code> 元素；<code>flag</code>为假时<code>v-else</code>标签将显示。<code>v-show</code>根据条件只显示或不显示（等价于没有<code>v-else时的v-if</code>）。</p><h5 id="参数"><a href="#参数" class="headerlink" title="#参数"></a><a href="https://vue3.zcopy.site/guide/template-syntax.html#%E5%8F%82%E6%95%B0">#</a>参数</h5><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> attribute 与表达式 <code>url</code> 的值绑定。</p><p>另一个例子是 <code>v-on</code> 指令，它用于监听 DOM 事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这里参数是监听的事件名。我们也会更详细地讨论事件处理。</p><h5 id="动态参数"><a href="#动态参数" class="headerlink" title="#动态参数"></a><a href="https://vue3.zcopy.site/guide/template-syntax.html#%E5%8A%A8%E6%80%81%E5%8F%82%E6%95%B0">#</a>动态参数</h5><p>也可以在指令参数中使用 JavaScript 表达式，方法是用方括号括起来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:</span>[<span class="hljs-attr">attributeName</span>]=<span class="hljs-string">&quot;url&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的 <code>attributeName</code> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的组件实例有一个 data property <code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定将等价于 <code>v-bind:href</code>。</p><p>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:</span>[<span class="hljs-attr">eventName</span>]=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在这个示例中，当 <code>eventName</code> 的值为 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 将等价于 <code>v-on:focus</code></p><h5 id="修饰符"><a href="#修饰符" class="headerlink" title="#修饰符"></a><a href="https://vue3.zcopy.site/guide/template-syntax.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6">#</a>修饰符</h5><p>修饰符 (modifier) 是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在接下来对 <a href="https://vue3.zcopy.site/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6"><code>v-on</code></a> 和 <a href="https://vue3.zcopy.site/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6"><code>v-for</code></a> 等功能的探索中，你会看到修饰符的其它例子。</p><h5 id="v-on与v-show区别与联系"><a href="#v-on与v-show区别与联系" class="headerlink" title="v-on与v-show区别与联系"></a>v-on与v-show区别与联系</h5><blockquote><p>v-bind：是用来绑定属性的,v-bind使用的时候一般写在data里面。<br>v-on：用来绑定事件的,v-on使用的时候一般写在methods方法里面</p></blockquote><h4 id="1-3条件渲染"><a href="#1-3条件渲染" class="headerlink" title="1.3条件渲染"></a>1.3条件渲染</h4><h5 id="1v-if"><a href="#1v-if" class="headerlink" title="1v-if"></a><a href="https://vue3.zcopy.site/guide/conditional.html#v-if">1</a><code>v-if</code></h5><p><code>v-if</code> 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以用 <code>v-else</code> 添加一个“else 块”：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;awesome&quot;</span>&gt;</span>Vue is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-else</span>&gt;</span>Oh no 😢<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2在-lt-template-gt-元素上使用-v-if-条件渲染分组"><a href="#2在-lt-template-gt-元素上使用-v-if-条件渲染分组" class="headerlink" title="2在 &lt;template&gt; 元素上使用 v-if 条件渲染分组"></a><a href="https://vue3.zcopy.site/guide/conditional.html#%E5%9C%A8-template-%E5%85%83%E7%B4%A0%E4%B8%8A%E4%BD%BF%E7%94%A8-v-if-%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%88%86%E7%BB%84">2</a>在 <code>&lt;template&gt;</code> 元素上使用 <code>v-if</code> 条件渲染分组</h5><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph 2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3v-else"><a href="#3v-else" class="headerlink" title="3v-else"></a><a href="https://vue3.zcopy.site/guide/conditional.html#v-else">3</a><code>v-else</code></h5><p>你可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的“else 块”：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span><br>  Now you see me<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>  Now you don&#x27;t<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p><h5 id="4v-else-if"><a href="#4v-else-if" class="headerlink" title="4v-else-if"></a><a href="https://vue3.zcopy.site/guide/conditional.html#v-else-if">4</a><code>v-else-if</code></h5><p><code>v-else-if</code>，顾名思义，充当 <code>v-if</code> 的“else-if 块”，并且可以连续使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span><br>  A<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span><br>  B<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span><br>  C<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>  Not A/B/C<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>与 <code>v-else</code> 的用法类似，<code>v-else-if</code> 也必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素之后。</p><h5 id="5v-show"><a href="#5v-show" class="headerlink" title="5v-show"></a><a href="https://vue3.zcopy.site/guide/conditional.html#v-show">5</a><code>v-show</code></h5><p>另一个用于条件性展示元素的选项是 <code>v-show</code> 指令。用法大致一样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>Hello!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS property <code>display</code>。</p><p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p><h5 id="6v-if-vs-v-show"><a href="#6v-if-vs-v-show" class="headerlink" title="6v-if vs v-show"></a><a href="https://vue3.zcopy.site/guide/conditional.html#v-if-vs-v-show">6</a><code>v-if</code> vs <code>v-show</code></h5><p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中，条件块内的事件监听器和子组件适当地被销毁和重建。</p><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h5 id="7v-if-与-v-for-一起使用"><a href="#7v-if-与-v-for-一起使用" class="headerlink" title="7v-if 与 v-for 一起使用"></a><a href="https://vue3.zcopy.site/guide/conditional.html#v-if-%E4%B8%8E-v-for-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8">7</a><code>v-if</code> 与 <code>v-for</code> 一起使用</h5><p><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code>。请查阅<a href="https://vue3.zcopy.site/style-guide/#%E9%81%BF%E5%85%8D-v-if-%E5%92%8C-v-for-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8%E5%BF%85%E8%A6%81">风格指南</a>以获取更多信息。</p><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-if</code> 具有比 <code>v-for</code> 更高的优先级。请查阅<a href="https://vue3.zcopy.site/guide/list##v-for-%E4%B8%8E-v-if-%E4%B8%80%E5%90%8C%E4%BD%BF%E7%94%A8">列表渲染指南</a>以获取详细信息。</p><h4 id="1-4列表渲染"><a href="#1-4列表渲染" class="headerlink" title="1.4列表渲染"></a>1.4列表渲染</h4><h5 id="1-用-v-for-把一个数组对应为一组元素"><a href="#1-用-v-for-把一个数组对应为一组元素" class="headerlink" title="1.用 v-for 把一个数组对应为一组元素"></a>1.用 <code>v-for</code> 把一个数组对应为一组元素</h5><p>我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 items 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;array-rendering&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span>&gt;</span><br>    &#123;&#123; item.message &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">items</span>: [&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Bar&#x27;</span> &#125;]<br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#array-rendering&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在 <code>v-for</code> 块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;array-with-index&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span>&gt;</span><br>    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">parentMessage</span>: <span class="hljs-string">&#x27;Parent&#x27;</span>,<br>      <span class="hljs-attr">items</span>: [&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Foo&#x27;</span> &#125;, &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Bar&#x27;</span> &#125;]<br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#array-with-index&#x27;</span>)<br></code></pre></td></tr></table></figure><p>你也可以用 <code>of</code> 替代 <code>in</code> 作为分隔符，因为它更接近 JavaScript 迭代器的语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item of items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-在-v-for-里使用对象在-v-for-里使用对象"><a href="#2-在-v-for-里使用对象在-v-for-里使用对象" class="headerlink" title="2.在-v-for-里使用对象在 v-for 里使用对象"></a><a href="https://vue3.zcopy.site/guide/list.html#">2.</a>在-v-for-里使用对象在 <code>v-for</code> 里使用对象</h5><p>你也可以用 <code>v-for</code> 来遍历一个对象的 property。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-for-object&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;value in myObject&quot;</span>&gt;</span><br>    &#123;&#123; value &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">myObject</span>: &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;How to do lists in Vue&#x27;</span>,<br>        <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;Jane Doe&#x27;</span>,<br>        <span class="hljs-attr">publishedAt</span>: <span class="hljs-string">&#x27;2016-04-10&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#v-for-object&#x27;</span>)<br></code></pre></td></tr></table></figure><p>你也可以提供第二个的参数为 property 名称 (也就是键名 key)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name) in myObject&quot;</span>&gt;</span><br>  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还可以用第三个参数作为索引：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value, name, index) in myObject&quot;</span>&gt;</span><br>  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在遍历对象时，会按 <code>Object.keys()</code> 的结果遍历，但是不能保证它在不同 JavaScript 引擎下的结果都一致。</p><h5 id="3-维护状态"><a href="#3-维护状态" class="headerlink" title="3.维护状态"></a><a href="https://vue3.zcopy.site/guide/list.html#%E7%BB%B4%E6%8A%A4%E7%8A%B6%E6%80%81">3.</a>维护状态</h5><p>当 Vue 正在更新使用 <code>v-for</code> 渲染的元素列表时，它默认使用“就地更新”的策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。</p><p>这个默认的模式是高效的，但是<strong>只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</strong>。</p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 <code>key</code> attribute：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- content --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>建议尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p><p>因为它是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联。后面我们将在指南中看到，它还具有其它用途。</p><h4 id="1-5事件处理"><a href="#1-5事件处理" class="headerlink" title="1.5事件处理"></a>1.5事件处理</h4><h5 id="1-监听事件"><a href="#1-监听事件" class="headerlink" title="1.监听事件"></a><a href="https://vue3.zcopy.site/guide/events.html#%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6">1.</a>监听事件</h5><p>我们可以使用 <code>v-on</code> 指令 (通常缩写为 <code>@</code> 符号) 来监听 DOM 事件，并在触发事件时执行一些 JavaScript。用法为 <code>v-on:click=&quot;methodName&quot;</code> 或使用快捷方式 <code>@click=&quot;methodName&quot;</code></p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;basic-event&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span><br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#basic-event&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="2-内联处理器中的方法"><a href="#2-内联处理器中的方法" class="headerlink" title="2.内联处理器中的方法"></a>2.内联处理器中的方法</h5><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inline-handler&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>Say hi<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>Say what<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表渲染<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;send(item.title)&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in items&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>        &#123;&#123; item.title &#125;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params">message</span>) &#123;<br>      <span class="hljs-title function_">alert</span>(message)<br>    &#125;,<br>     send (data) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>    &#125;,<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#inline-handler&#x27;</span>)<br></code></pre></td></tr></table></figure><p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;warn(&#x27;Form cannot be submitted yet.&#x27;, $event)&quot;</span>&gt;</span><br>  Submit<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">warn</span>(<span class="hljs-params">message, event</span>) &#123;<br>    <span class="hljs-comment">// 现在可以访问到原生事件</span><br>    <span class="hljs-keyword">if</span> (event) &#123;<br>      event.<span class="hljs-title function_">preventDefault</span>()<br>    &#125;<br>    <span class="hljs-title function_">alert</span>(message)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-多事件处理器"><a href="#3-多事件处理器" class="headerlink" title="3.多事件处理器"></a><a href="https://vue3.zcopy.site/guide/events.html#%E5%A4%9A%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8">3.</a>多事件处理器</h5><p>事件处理程序中可以有多个方法，这些方法由逗号运算符分隔：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这两个 one() 和 two() 将执行按钮点击事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;one($event), two($event)&quot;</span>&gt;</span><br>  Submit<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ...</span><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">one</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-comment">// 第一个事件处理器逻辑...</span><br>  &#125;,<br>  <span class="hljs-title function_">two</span>(<span class="hljs-params">event</span>) &#123;<br>   <span class="hljs-comment">// 第二个事件处理器逻辑...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-6表单输入绑定"><a href="#1-6表单输入绑定" class="headerlink" title="1.6表单输入绑定"></a>1.6表单输入绑定</h4><h5 id="1-基础用法"><a href="#1-基础用法" class="headerlink" title="1.基础用法"></a><a href="https://vue3.zcopy.site/guide/forms.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95">1.</a>基础用法</h5><p>你可以用 v-model 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件来更新数据，并在某种极端场景下进行一些特殊处理。</p><p>提示</p><p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将当前活动实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p><p><code>v-model</code> 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 <code>value</code> property 和 <code>input</code> 事件；</li><li>checkbox 和 radio 使用 <code>checked</code> property 和 <code>change</code> 事件；</li><li>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</li></ul><p>提示</p><p>对于需要使用<a href="https://en.wikipedia.org/wiki/Input_method">输入法</a> (如中文、日文、韩文等) 的语言，你会发现 <code>v-model</code> 不会在输入法组织文字过程中得到更新。如果你也想响应这些更新，请使用 <code>input</code> 事件监听器和 <code>value</code> 绑定，而不是使用 <code>v-model</code>。</p><h5 id="2-文本-Text"><a href="#2-文本-Text" class="headerlink" title="2.文本 (Text)"></a><a href="https://vue3.zcopy.site/guide/forms.html#%E6%96%87%E6%9C%AC-text">2.</a>文本 (Text)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;edit me&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-多行文本-Textarea"><a href="#3-多行文本-Textarea" class="headerlink" title="3.多行文本 (Textarea)"></a>3.多行文本 (Textarea)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Multiline message is:<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre-line;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;add multiple lines&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- bad --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- good --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-复选框-Checkbox"><a href="#4-复选框-Checkbox" class="headerlink" title="4.复选框 (Checkbox)"></a>4.复选框 (Checkbox)</h5><p>单个复选框，绑定到布尔值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多个复选框，绑定到同一个数组：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-model-multiple-checkboxes&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jack&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jack&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;jack&quot;</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;john&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;john&quot;</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mike&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mike&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;mike&quot;</span>&gt;</span>Mike<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">checkedNames</span>: []<br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#v-model-multiple-checkboxes&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="5-单选框-Radio"><a href="#5-单选框-Radio" class="headerlink" title="5.单选框 (Radio)"></a>5.单选框 (Radio)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-model-radiobutton&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;One&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>One<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Two&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>Two<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">picked</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#v-model-radiobutton&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="6-选择框-Select"><a href="#6-选择框-Select" class="headerlink" title="6.选择框 (Select)"></a>6.选择框 (Select)</h5><p>单选时：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;v-model-select&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>Please select one<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#v-model-select&#x27;</span>)<br></code></pre></td></tr></table></figure><p>多选时 (绑定到一个数组)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="7-值绑定"><a href="#7-值绑定" class="headerlink" title="7.值绑定"></a>7.值绑定</h5><p>对于单选按钮，复选框及选择框的选项，<code>v-model</code> 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 当选中时，`picked` 为字符串 &quot;a&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;a&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- `toggle` 为 true 或 false --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;toggle&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 当选中第一个选项时，`selected` 为字符串 &quot;abc&quot; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>ABC<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是有时我们可能想把值绑定到当前活动实例的一个动态 property 上，这时可以用 <code>v-bind</code> 实现，此外，使用 <code>v-bind</code> 可以将输入值绑定到非字符串。</p><h5 id="8-复选框-Checkbox"><a href="#8-复选框-Checkbox" class="headerlink" title="8.复选框 (Checkbox)"></a><a href="https://vue3.zcopy.site/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86-checkbox-2">8.</a>复选框 (Checkbox)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;toggle&quot;</span> <span class="hljs-attr">true-value</span>=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-attr">false-value</span>=<span class="hljs-string">&quot;no&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// when checked:</span><br>vm.<span class="hljs-property">toggle</span> === <span class="hljs-string">&#x27;yes&#x27;</span><br><span class="hljs-comment">// when unchecked:</span><br>vm.<span class="hljs-property">toggle</span> === <span class="hljs-string">&#x27;no&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="9-单选框-Radio"><a href="#9-单选框-Radio" class="headerlink" title="9.单选框 (Radio)"></a>9.单选框 (Radio)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pick&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;a&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 当选中时</span><br>vm.<span class="hljs-property">pick</span> === vm.<span class="hljs-property">a</span><br></code></pre></td></tr></table></figure><h5 id="10-选择框选项-Select-Options"><a href="#10-选择框选项-Select-Options" class="headerlink" title="10.选择框选项 (Select Options)"></a><a href="https://vue3.zcopy.site/guide/forms.html#%E9%80%89%E6%8B%A9%E6%A1%86%E9%80%89%E9%A1%B9-select-options">10.</a>选择框选项 (Select Options)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 内联对象字面量 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;&#123; number: 123 &#125;&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 当被选中时</span><br><span class="hljs-keyword">typeof</span> vm.<span class="hljs-property">selected</span> <span class="hljs-comment">// =&gt; &#x27;object&#x27;</span><br>vm.<span class="hljs-property">selected</span>.<span class="hljs-property">number</span> <span class="hljs-comment">// =&gt; 123</span><br></code></pre></td></tr></table></figure><h4 id="1-7修饰符"><a href="#1-7修饰符" class="headerlink" title="1.7修饰符"></a>1.7修饰符</h4><h5 id="1-lazy"><a href="#1-lazy" class="headerlink" title="1..lazy"></a><a href="https://vue3.zcopy.site/guide/forms.html#lazy">1.</a><code>.lazy</code></h5><p>在默认情况下，<code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步 (除了<a href="https://vue3.zcopy.site/guide/forms.html#vmodel-ime-tip">上述</a>输入法组织文字时)。你可以添加 <code>lazy</code> 修饰符，从而转为在 <code>change</code> 事件_之后_进行同步：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;msg&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-number"><a href="#2-number" class="headerlink" title="2..number"></a><a href="https://vue3.zcopy.site/guide/forms.html#number">2.</a><code>.number</code></h5><p>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>这通常很有用，因为即使在 <code>type=&quot;number&quot;</code> 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值。</p><h5 id="3-trim"><a href="#3-trim" class="headerlink" title="3..trim"></a><a href="https://vue3.zcopy.site/guide/forms.html#trim">3.</a><code>.trim</code></h5><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;msg&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-组件基础"><a href="#2-组件基础" class="headerlink" title="2.组件基础"></a>2.组件基础</h3><p>单文件组件（又名*.vue文件，缩写为SFC）是一种特殊的文件格式，它允许将Vue组件的模板、逻辑与样式封装在单个文件中。</p><h4 id="1-新建组件"><a href="#1-新建组件" class="headerlink" title="1.新建组件"></a>1.新建组件</h4><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221222100412574.png"></p><h4 id="2-加载组件"><a href="#2-加载组件" class="headerlink" title="2.加载组件"></a>2.加载组件</h4><ul><li><p>引入组件：<code>import MyComponent from &#39;./components/MyComponent.vue&#39;;</code>（<strong>在App.vue根组件中引入</strong>）</p></li><li><p>挂载组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在js中</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">HelloWorld</span>,<br>    <span class="hljs-title class_">Form</span>,<br>    <span class="hljs-title class_">MyComponent</span>,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>显示组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">  &lt;template&gt;<br>    &lt;MyComponent /&gt;<br>    &lt;my-component /&gt;//推荐这种方式<br>  &lt;/template&gt;<br><br>&gt;<br>      ```vue<br>      &lt;!-- scoped：如果在style中添加此属性，则该样式只对该组件生效，否则对全局生效 --&gt;<br>      &lt;style scoped&gt;<br>      h3 &#123;<br>        color: aquamarine;<br>      &#125;<br>      &lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-组件的组织"><a href="#3-组件的组织" class="headerlink" title="3.组件的组织"></a>3.组件的组织</h4><p>通常一个应用会以一颗嵌套的组建树的形式来组织。</p><h3 id="3-Props组件交互"><a href="#3-Props组件交互" class="headerlink" title="3.Props组件交互"></a>3.Props组件交互</h3><p>组件与组件之间是需要存在交互的，否则完全没有关系，组件的意义就很小了。</p><p><code>Prop</code>是你可以在组件上注册的一些自定义属性attribute。</p><p>==app.vue(传递title和age属性值)==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;my-component :title=&quot;title&quot; :age=&quot;age&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;;<br>import Form from &#x27;./components/Form.vue&#x27;;<br>import MyComponent from &#x27;./components/MyComponent.vue&#x27;;<br><br><br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  components: &#123;<br>    HelloWorld,<br>    Form,<br>    MyComponent,<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br>      title: &#x27;Props&#x27;,<br>      age: &#x27;20&#x27;,<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>==MyComponent.vue==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h3&gt;我的组件&lt;/h3&gt;<br>  &lt;h3&gt;Prop传递数据&lt;/h3&gt;<br>  &lt;p&gt;&#123;&#123; title &#125;&#125;&lt;/p&gt;<br>  &lt;p&gt;&#123;&#123; age &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyComponent&quot;,<br>  props: &#123;<br>    title: &#123;<br>      type: String,<br>      default: &quot;传递失败&quot;,<br>    &#125;,<br>    age: &#123;<br>      type: Number,<br>      default: 0,<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;!-- scoped：如果在style中添加此属性，则该样式只对该组件生效，否则对全局生效 --&gt;<br>&lt;style scoped&gt;<br>h3 &#123;<br>  color: aquamarine;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h4 id="1-Prop类型"><a href="#1-Prop类型" class="headerlink" title="1.Prop类型"></a>1.Prop类型</h4><p>Prop传递参数其实是没有类型限制的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">props: &#123;<br>title: String,<br>age:Number,<br>isPublished:Boolean,<br>commentIds:Array,<br>author:Object,<br>callback:Function<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>温馨提示</strong></p><p>数据类型为数组或者对象的时候，默认值是需要返回工厂模式（<strong>使用函数进行返回</strong>）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">  &lt;ul&gt;<br>    &lt;li v-for=&quot;(item, index) in names&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;<br>  &lt;/ul&gt;<br>  <br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyComponent&quot;,<br>  props: &#123;<br>    names: &#123;<br>      type: Array,<br>      // 数组和对象必须使用函数进行返回<br>      default: function () &#123;<br>        return []<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="4-自定义事件组件交互"><a href="#4-自定义事件组件交互" class="headerlink" title="4.自定义事件组件交互"></a>4.自定义事件组件交互</h3><p>自定义事件可以在组件中反向传递数据，<code>prop</code>可以将数据从父组件传递到子组件，那么反向如何操作呢，可以利用自定义时间实现<code>$emit</code></p><p>==app.vue==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;my-component @onEvent=&quot;getmsg&quot; /&gt;<br>  &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import MyComponent from &#x27;./components/MyComponent.vue&#x27;;<br><br>export default &#123;<br>  name: &#x27;App&#x27;,<br>  components: &#123;<br>    MyComponent,<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br>      msg: &quot;&quot;,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    getmsg (data) &#123;<br>      console.log(data);<br>      this.msg = data;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: Avenir, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #2c3e50;<br>  /* margin-top: 60px; */<br>  margin: 60px auto;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>==MyComponent.vue==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h3&gt;自定义事件传递数据&lt;/h3&gt;<br>  &lt;button @click=&quot;sendmsg&quot;&gt;点击传递&lt;/button&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;MyComponent&quot;,<br>  data () &#123;<br>    return &#123;<br>      msg: &quot;字数据传向父&quot;,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    sendmsg () &#123;<br>      // 参数1：字符串；<br>      // 参数2：传递的数据<br>      this.$emit(&quot;onEvent&quot;, this.msg)<br>    &#125;<br><br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;!-- scoped：如果在style中添加此属性，则该样式只对该组件生效，否则对全局生效 --&gt;<br>&lt;style scoped&gt;<br>h3 &#123;<br>  color: aquamarine;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="5-组件生命周期"><a href="#5-组件生命周期" class="headerlink" title="5.组件生命周期"></a>5.组件生命周期</h3><p>每个组件在被创建时都要经过一系列的初始化过程–例如，需要设置数据监听、编译模板、将实例挂载到DOM并在数据变化时更新DOM等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。</p><p>分类：</p><ol><li>创建时：<code>beforeCreate</code>、<code>created</code></li><li>渲染时：<code>beforeMount</code>、<code>mounted</code></li><li>更新时：<code>beforeUpdate</code>、<code>updated</code></li><li>卸载时：<code>beforeUnmount</code>、<code>unmounted</code></li></ol><h3 id="6-Vue引入第三方"><a href="#6-Vue引入第三方" class="headerlink" title="6.Vue引入第三方"></a>6.Vue引入第三方</h3><p><a href="https://www.swiper.com.cn/usage/index.html">Swiper</a>开源强大的触摸滑动插件。</p><blockquote><p>安装指定版本：<code>npm install --save swiper@8.1.6</code></p></blockquote><h4 id="案例1：首页轮播图"><a href="#案例1：首页轮播图" class="headerlink" title="案例1：首页轮播图"></a>案例1：首页轮播图</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;swiper :modules=&quot;modules&quot; navigation :pagination=&quot;&#123; clickable: true &#125;&quot;&gt;<br>    &lt;swiper-slide&gt;&lt;img src=&quot;https://picsum.photos/id/123/900/400&quot; alt=&quot;1&quot;&gt;&lt;/swiper-slide&gt;<br>    &lt;swiper-slide&gt;&lt;img src=&quot;https://picsum.photos/id/88/900/400&quot; alt=&quot;2&quot;&gt;&lt;/swiper-slide&gt;<br>    &lt;swiper-slide&gt;&lt;img src=&quot;https://picsum.photos/id/13/900/400&quot; alt=&quot;3&quot;&gt;&lt;/swiper-slide&gt;<br>  &lt;/swiper&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; Navigation, Pagination &#125; from &#x27;swiper&#x27;;<br>import &#123; Swiper, SwiperSlide &#125; from &#x27;swiper/vue&#x27;;<br>import &#x27;swiper/css&#x27;;<br>import &#x27;swiper/css/navigation&#x27;;<br>import &#x27;swiper/css/pagination&#x27;;<br><br>export default &#123;<br>  name: &#x27;HelloWorld&#x27;,<br>  components: &#123;<br>    Swiper,<br>    SwiperSlide,<br>  &#125;,<br>  setup () &#123;<br>    return &#123;<br>      modules: [Navigation, Pagination],<br>    &#125;;<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br><br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="7-Axios网络请求"><a href="#7-Axios网络请求" class="headerlink" title="7.Axios网络请求"></a>7.Axios网络请求</h3><p>Axios是一个基于promise的网络请求库</p><blockquote><p>安装<code>npm install --save axios</code></p></blockquote><h4 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h4><p>组件中引入：<code>import axios from &quot;axios&quot;</code></p><p>全局引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios form <span class="hljs-string">&quot;axios&quot;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$axios</span> = axios<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br><span class="hljs-comment">//在组件中调用</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$axios</span><br></code></pre></td></tr></table></figure><h4 id="2-网络请求示例"><a href="#2-网络请求示例" class="headerlink" title="2.网络请求示例"></a>2.网络请求示例</h4><h5 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">mounted () &#123;<br>  <span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://iwenwiki.com/api/blueberrypai/getChengpinDetails.php&#x27;</span><br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chengpin</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">chengpinDetails</span>[<span class="hljs-number">0</span>];<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>==get快捷方式==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://iwenwiki.com/api/blueberrypai/getChengpinDetails.php&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h5><blockquote><p><strong>温馨提示</strong></p><ol><li>安装依赖：<code>npm install --save querystring</code></li><li>转换参数格式：<code>qs.stringify()</code>(将字符串格式转为对象)</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// post请求方式</span><br>    <span class="hljs-title function_">axios</span>(&#123;<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://iwenwiki.com/api/blueberrypai/login.php&#x27;</span>,<br>      <span class="hljs-attr">data</span>: querystring.<span class="hljs-title function_">stringify</span>(&#123;<br>        <span class="hljs-attr">user_id</span>: <span class="hljs-string">&#x27;iwen@qq.com&#x27;</span>,<br>        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;iwen123&#x27;</span>,<br>        <span class="hljs-attr">verification_code</span>: <span class="hljs-string">&#x27;crfvw&#x27;</span><br>      &#125;)<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>    &#125;)<br></code></pre></td></tr></table></figure><p>==post快捷方式==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;http://iwenwiki.com/api/blueberrypai/login.php&quot;</span>, querystring.<span class="hljs-title function_">stringify</span>(&#123;<br>  <span class="hljs-attr">user_id</span>: <span class="hljs-string">&#x27;iwen@qq.com&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;iwen123&#x27;</span>,<br>  <span class="hljs-attr">verification_code</span>: <span class="hljs-string">&#x27;crfvw&#x27;</span><br>&#125;)).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="3-axios网络请求封装"><a href="#3-axios网络请求封装" class="headerlink" title="3.axios网络请求封装"></a>3.axios网络请求封装</h4><p>日常应用过程中，一个项目中会有很多网络请求，一般采取的方案是将网络请求封装起来。</p><p>在<code>src</code>目录下创建文件夹<code>utils</code>,并创建文件<code>request</code>,用来存储网络请求对象<code>axios</code></p><h4 id="4-网络请求跨域解决方案"><a href="#4-网络请求跨域解决方案" class="headerlink" title="4.网络请求跨域解决方案"></a>4.网络请求跨域解决方案</h4><blockquote><p>出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的。javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port。</p><p><strong>提示：</strong>当一个请求url的**<a href="https://so.csdn.net/so/search?spm=1001.2014.3001.4498&q=%E5%8D%8F%E8%AE%AE%E3%80%81%E5%9F%9F%E5%90%8D%E3%80%81%E7%AB%AF%E5%8F%A3&t=&u=">协议、域名、端口</a>**三者之间任意一个与当前页面url不同即为跨域。</p></blockquote><img src="https://img-blog.csdnimg.cn/70e9de32598a4783acfafbf082ff3039.png" style="zoom: 67%;" /><h5 id="1-主流的解决方案"><a href="#1-主流的解决方案" class="headerlink" title="1.主流的解决方案"></a>1.主流的解决方案</h5><ol><li>后台解决：cors</li><li>前台解决：proxy</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">devServer</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://iwenwiki.com&#x27;</span>,<span class="hljs-comment">//填写需要跨域请求的网址包括协议和域名端口</span><br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>温馨提示</strong></p><p>配置完成后，<code>axios</code>请求的地址直接用域名后的<strong>子地址</strong>即可，且需要重启服务器才生效。</p></blockquote><h3 id="8-路由配置（vue-router）"><a href="#8-路由配置（vue-router）" class="headerlink" title="8.路由配置（vue-router）"></a>8.路由配置（vue-router）</h3><p>在vue中，我们可以通过vue-router路由管理页面之间的关系</p><p>Vue Router是Vue.js的官方路由。它与Vue.js核心深度集成，让用Vue.js构建单页应用变得轻而易举。</p><h4 id="1-在Vue中引入路由"><a href="#1-在Vue中引入路由" class="headerlink" title="1.在Vue中引入路由"></a>1.在Vue中引入路由</h4><p>第一步：安装路由<code>npm install --save vue-router</code></p><p>第二步：新建路由配置文件</p><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221226095132487.png"></p><p>第三步：配置独立的路由文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: Alleyf 3035581811@qq.com</span><br><span class="hljs-comment"> * @Github: https://github.com/Alleyf</span><br><span class="hljs-comment"> * @QQ: 3035581811</span><br><span class="hljs-comment"> * @Signature: You know more，you know less</span><br><span class="hljs-comment"> * @Date: 2022-12-26 09:21:10</span><br><span class="hljs-comment"> * @LastEditors: Alleyf 3035581811@qq.com</span><br><span class="hljs-comment"> * @LastEditTime: 2022-12-26 09:48:38</span><br><span class="hljs-comment"> * @FilePath: \MedocSystem\vue-medocsystem\src\router\index.js</span><br><span class="hljs-comment"> * Copyright (c) 2022 by Alleyf 3035581811@qq.com, All Rights Reserved. </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/About&#x27;</span><br><br><span class="hljs-comment">// 配置信息中需要页面的相关参数</span><br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,  <span class="hljs-comment">//访问路径</span><br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span>,  <span class="hljs-comment">//对应的页面</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span>,<br>  &#125;<br>]<br><br><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-comment">/* createWebHashHistory</span><br><span class="hljs-comment">                Home:http://localhost:8080/#/</span><br><span class="hljs-comment">                About:http://localhost:8080/#/about</span><br><span class="hljs-comment">    原理：a标签锚点连接</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  createWebHistory</span><br><span class="hljs-comment">                Home:http://localhost:8080/</span><br><span class="hljs-comment">                About:http://localhost:8080/about</span><br><span class="hljs-comment">    此种方式，需要后台配合做重定向，否则会出现404问题</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    原理：H5 pushState()</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><blockquote><p><strong>温馨提示</strong></p><p>  createWebHashHistory<br>                Home:<a href="http://localhost:8080/#/">http://localhost:8080/#/</a><br>                About:<a href="http://localhost:8080/#/about">http://localhost:8080/#/about</a><br>    原理：<strong>a标签锚点连接</strong></p><p>  createWebHistory<br>                Home:<a href="http://localhost:8080/">http://localhost:8080/</a><br>                About:<a href="http://localhost:8080/about">http://localhost:8080/about</a><br>    此种方式，需要后台配合做重定向，否则会出现404问题</p><p>原理：<strong>H5 pushState()</strong></p></blockquote><p>第四步：<code>main.js</code>中使用路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./registerServiceWorker&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span><br><br><span class="hljs-comment">// 将axios挂载到全局</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-property">config</span>.<span class="hljs-property">globalProperties</span>.<span class="hljs-property">$axios</span> = axios<br>app.<span class="hljs-title function_">use</span>(router)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>第五步：<code>App.vue</code>中设置路由入口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- 路由的显示入口 --&gt;<br>  &lt;router-link to=&quot;/&quot;&gt;首页&lt;/router-link&gt; |<br>  &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;<br>  &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h4 id="2-路由传递参数"><a href="#2-路由传递参数" class="headerlink" title="2.路由传递参数"></a>2.路由传递参数</h4><p>页面携带参数跳转非常常见</p><ul><li><p>第一步：在路由配置中指定参数<code>key</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//此处参数名为name</span><br>&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/newsdetails/:name&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;newsdetails&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">()=&gt;</span><span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;../views/NewsDetails.vue&quot;</span>) <span class="hljs-comment">//异步加载</span><br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>第二步：在页面中的路由链接中携带参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;新闻&lt;/h2&gt;<br>  &lt;ul&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/百度&quot;&gt;百度新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/网易&quot;&gt;网易新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/头条&quot;&gt;头条新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>第三步：在跳转页面获取参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h3&gt;新闻详情&lt;/h3&gt;<br>  &lt;p&gt;&#123;&#123; $route.params.name &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-嵌套路由配置"><a href="#3-嵌套路由配置" class="headerlink" title="3.嵌套路由配置"></a>3.嵌套路由配置</h4><ul><li><p>第一步：创建子路由要加载的页面</p></li><li><p>第二步:<code>index.js</code>配置子路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;about&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">()=&gt;</span><span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;../views/About.vue&quot;</span>), <span class="hljs-comment">//异步加载</span><br>  <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/about/us&quot;</span>,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;us&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;us&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">()=&gt;</span><span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;../views/about/AboutUs.vue&quot;</span>),<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;info&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;info&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">()=&gt;</span><span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;../views/about/AboutInfo.vue&quot;</span>),<br>    &#125;<br>  ]<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>第三步：添加子路由<strong>跳转链接</strong>并指定子路由<strong>显示位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;about&quot;&gt;<br>    &lt;Router-Link to=&quot;/about/us&quot;&gt;关于我们&lt;/Router-Link&gt; |<br>    &lt;Router-Link to=&quot;/about/info&quot;&gt;关于信息&lt;/Router-Link&gt;<br>    &lt;Router-View&gt;&lt;/Router-View&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>第四步：重定向配置默认显示页面（在index.js中父路由中配置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/about/us&quot;</span>,<br></code></pre></td></tr></table></figure></li></ul><h3 id="9-Vue状态管理（Vuex）"><a href="#9-Vue状态管理（Vuex）" class="headerlink" title="9.Vue状态管理（Vuex）"></a>9.Vue状态管理（Vuex）</h3><p>vuex是一个专门为Vue.js应用程序开发的<strong>状态管理模式+库</strong>。它采用集中式存储管理应用的所有组件的状态。</p><p>简单来说，状态给管理可以理解成为了更方便的管理组件之间的数据交互，提供了一个集中式的管理方案，任何组件都可以按照指定的方式进行读取和改变数据。</p><h4 id="1-引入Vuex的步骤"><a href="#1-引入Vuex的步骤" class="headerlink" title="1.引入Vuex的步骤"></a>1.引入Vuex的步骤</h4><p>第一步：安装Vuex <code>cnpm install --save vuex</code></p><p>第二步：新建<code>store</code>文件夹并新建<code>index.js</code>文件</p><p>第三步：配置Vuex文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><br><br><span class="hljs-comment">//Vuex的核心作用就是帮我们管理组件之间的状态的</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-comment">//所有状态（公共数据）都放在这里</span><br>  <span class="hljs-attr">state</span>: &#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>第四步：在主文件中引入Vuex</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span><br>app.<span class="hljs-title function_">use</span>(store)<br></code></pre></td></tr></table></figure><p>第五步：在组件中读取状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">//第一种读取方法<br>&lt;template&gt;<br>      &lt;p&gt;counter:&#123;&#123; $store.state.counter &#125;&#125;&lt;/p&gt;<br>    &lt;/template&gt;<br>//第二种读取方法<br>&lt;template&gt;<br>    &lt;li&gt;counter:&#123;&#123; counter &#125;&#125;&lt;/li&gt;<br>    &lt;/template&gt;<br>&lt;script&gt;<br>        //vuex提供的state快捷读取方式<br>            import &#123; mapState &#125; from &#x27;vuex&#x27;;<br><br>            export default &#123;<br>              //专门用来读取vuex中的数据<br>              computed: &#123;<br>                ...mapState([&quot;counter&quot;]),<br>              &#125;<br>            &#125;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="2-状态管理核心"><a href="#2-状态管理核心" class="headerlink" title="2.状态管理核心"></a>2.状态管理核心</h4><blockquote><p>常用的核心概念包含：<code>State</code>,<code>Getter</code>,<code>Mutation</code>,<code>Action</code></p></blockquote><h5 id="1-Getter"><a href="#1-Getter" class="headerlink" title="1.Getter"></a>1.Getter</h5><p>对vuex的数据进行过滤</p><p><strong>配置文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><br><br><span class="hljs-comment">//Vuex的核心作用就是帮我们管理组件之间的状态的</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-comment">//所有状态（公共数据）都放在这里</span><br>  <span class="hljs-attr">state</span>: &#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">getCounter</span>(<span class="hljs-params">state</span>)&#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">counter</span> &gt; <span class="hljs-number">0</span> ? state.<span class="hljs-property">counter</span> : <span class="hljs-string">&quot;counter数据异常&quot;</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>vue用法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;新闻&lt;/h2&gt;<br>  &lt;ul&gt;<br>    &lt;li&gt;counter:&#123;&#123; getCounter &#125;&#125;&lt;/li&gt;<br>    &lt;li&gt;counter=&#123;&#123; $store.getters.getCounter &#125;&#125;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/百度&quot;&gt;百度新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/网易&quot;&gt;网易新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/头条&quot;&gt;头条新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapGetters &#125; from &#x27;vuex&#x27;;<br><br>export default &#123;<br>  computed: &#123;<br>    ...mapGetters([&quot;getCounter&quot;]),<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="2-Mutation"><a href="#2-Mutation" class="headerlink" title="2.Mutation"></a>2.Mutation</h5><p>更改Vuex的store中的状态的唯一方法是提交mutation。Vuex中的mutation非常类似与事件：每个mutation都有一个字符串的事件类型（type）和一个回调函数（handler）。这个回调函数就是我们实际进行状态更改的地方，并且它会接受state作为第一个参数。</p><p><strong>配置文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><br><br><span class="hljs-comment">//Vuex的核心作用就是帮我们管理组件之间的状态的</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-comment">//所有状态（公共数据）都放在这里</span><br>  <span class="hljs-attr">state</span>: &#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">getCounter</span>(<span class="hljs-params">state</span>)&#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">counter</span> &gt; <span class="hljs-number">0</span> ? state.<span class="hljs-property">counter</span> : <span class="hljs-string">&quot;counter数据异常&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">addCounter</span>(<span class="hljs-params">state,num</span>)&#123;<br>      state.<span class="hljs-property">counter</span> += num;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>vue用法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;新闻&lt;/h2&gt;<br>  &lt;ul&gt;<br>    &lt;li&gt;counter:&#123;&#123; getCounter &#125;&#125;&lt;/li&gt;<br>    &lt;li&gt;counter=&#123;&#123; $store.getters.getCounter &#125;&#125;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/百度&quot;&gt;百度新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/网易&quot;&gt;网易新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/头条&quot;&gt;头条新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>  &lt;/ul&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;addCounterHandler&quot;&gt;加&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapGetters, mapMutations &#125; from &#x27;vuex&#x27;;<br><br>export default &#123;<br>  computed: &#123;<br>    ...mapGetters([&quot;getCounter&quot;]),<br>  &#125;,<br>  methods: &#123;<br>    ...mapMutations([&quot;addCounter&quot;]),<br>    addCounterHandler () &#123;<br>      // 固定调用方式<br>      this.addCounter(20);<br>      // this.$store.commit(&quot;addCounter&quot;, 5)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-action"><a href="#3-action" class="headerlink" title="3.action"></a>3.action</h5><p>action类似于mutation，不同在于：</p><ul><li>action提交的是mutation，而不是直接变更状态。</li><li>action可以包含任意异步操作</li><li>主要用于异步请求处理数据。</li></ul><p><strong>配置文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><br><br><span class="hljs-comment">//Vuex的核心作用就是帮我们管理组件之间的状态的</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-comment">//所有状态（公共数据）都放在这里</span><br>  <span class="hljs-attr">state</span>: &#123;<br>      <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">getCounter</span>(<span class="hljs-params">state</span>)&#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">counter</span> &gt; <span class="hljs-number">0</span> ? state.<span class="hljs-property">counter</span> : <span class="hljs-string">&quot;counter数据异常&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">addCounter</span>(<span class="hljs-params">state,num</span>)&#123;<br>      state.<span class="hljs-property">counter</span> += num;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 为异步操作准备</span><br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">asyncAddCounter</span>(<span class="hljs-params">&#123;commit&#125;</span>)&#123;<br>      axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;http://iwenwiki.com/api/generator/list.php&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-comment">// 以下是使用方式</span><br>        <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;addCounter&quot;</span>,res.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>]);<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>vue用法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;新闻&lt;/h2&gt;<br>  &lt;ul&gt;<br>    &lt;li&gt;counter:&#123;&#123; getCounter &#125;&#125;&lt;/li&gt;<br>    &lt;li&gt;counter=&#123;&#123; $store.getters.getCounter &#125;&#125;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/百度&quot;&gt;百度新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/网易&quot;&gt;网易新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;Router-Link to=&quot;/newsdetails/头条&quot;&gt;头条新闻&lt;/Router-Link&gt;&lt;/li&gt;<br>  &lt;/ul&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;addCounterHandler&quot;&gt;同步加&lt;/button&gt;<br>    &lt;br&gt;<br>    &lt;button @click=&quot;asyncAddCounterHandler&quot;&gt;异步加&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapGetters, mapMutations &#125; from &#x27;vuex&#x27;;<br><br>export default &#123;<br>  computed: &#123;<br>    ...mapGetters([&quot;getCounter&quot;]),<br>  &#125;,<br>  methods: &#123;<br>    ...mapMutations([&quot;addCounter&quot;]),<br>    addCounterHandler () &#123;<br>      // 固定调用方式<br>      this.addCounter(20);<br>      // this.$store.commit(&quot;addCounter&quot;, 5)<br>    &#125;,<br>    asyncAddCounterHandler () &#123;<br>      this.$store.dispatch(&quot;asyncAddCounter&quot;);<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>ul li &#123;<br>  text-align: center;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="10-vue3新特性"><a href="#10-vue3新特性" class="headerlink" title="10.vue3新特性"></a>10.vue3新特性</h3><h4 id="1-组合式API"><a href="#1-组合式API" class="headerlink" title="1.组合式API"></a>1.组合式API</h4><h5 id="1-ref或者reactive"><a href="#1-ref或者reactive" class="headerlink" title="1.ref或者reactive"></a>1.ref或者reactive</h5><p>在2.x中通过组建data的方法定义一些当前组件的数据，可以代替data定义数据并显示。</p><blockquote><p><code>setup()&#123;&#125;</code>里既可以<strong>定义数据</strong>，亦可以<strong>定义响应事件（函数）</strong>，从而取代<code>data</code>和<code>methods</code>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br> &lt;div&gt;<br>    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;(item, index) in names.list&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;button @click=&quot;changeMsgHandler&quot;&gt;修改数据&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123; mapGetters, mapMutations &#125; from &#x27;vuex&#x27;;<br>import &#123; ref, reactive &#125; from &quot;vue&quot;<br><br><br><br>export default &#123;<br>  setup () &#123;<br>    // ref:定义简单数据<br>    const msg = ref(&quot;i am a message&quot;);<br>    // reactive：定义复杂数据（数组、对象等）<br>    const names = reactive(&#123;<br>      list: [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]<br>    &#125;);<br><br>    function changeMsgHandler () &#123;<br>      // 通过msg.value去修改数据<br>      msg.value = &quot;我是新消息&quot;;<br>    &#125;<br><br>    return &#123;<br>      msg,<br>      names,<br>      changeMsgHandler,<br>    &#125;<br>  &#125;,<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="2-setup中使用props和context"><a href="#2-setup中使用props和context" class="headerlink" title="2.setup中使用props和context"></a>2.setup中使用props和context</h5><p>在2.x中，组件的方法可以通过this获取当前组件的实例，并执行data变量的修改，方法的调用，组件的通信等等，但是在3.x中，setup（）在beforeCreate和created时机就已调用，无法使用和2.x一样的this，但是可以通过接收setup（props，ctx）的方法，获取到当前组件的实例和props。</p><p>==父组件（App.vue）==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">//传递name值<br>&lt;template&gt;<br>  &lt;h2&gt;首页&lt;/h2&gt;<br>  &lt;HelloWorld :info=&quot;name&quot; /&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import HelloWorld from &#x27;../components/HelloWorld.vue&#x27;;<br><br>export default &#123;<br>  name: &#x27;Home&#x27;,<br>  components: &#123;<br>    HelloWorld,<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br>      name: &#x27;Home&#x27;,<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>==子组件==</p><blockquote><p>接收只需<strong>定义接收变量的类型</strong>即可。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;p&gt;&#123;&#123; info &#125;&#125;&lt;/p&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    name: &#x27;HelloWorld&#x27;,<br>    props: &#123;<br>        info: String,<br>      &#125;,<br><br>    setup (props) &#123;<br>        console.log(props.info)<br>      &#125;,<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>context的获取</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">setup (props, ctx) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ctx);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>setup</code>由于是在组件创建期间完成的，因此其中没有<code>this</code>（当前组件的实例），可以通过传递<code>ctx</code>参数获取当前实例。</p></blockquote><h5 id="3-在setup中使用生命周期函数"><a href="#3-在setup中使用生命周期函数" class="headerlink" title="3.在setup中使用生命周期函数"></a>3.在setup中使用生命周期函数</h5><p>可以通过在生命周期钩子前面加上“on”来访问组件的生命周期钩子。</p><p>下标包含如何在setup（）内部调用生命周期钩子。</p><table><thead><tr><th>options API</th><th>Hook inside setup</th></tr></thead><tbody><tr><td>beforeCreate</td><td>Not needed*</td></tr><tr><td>created</td><td>Not needed*</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeUnmount</td><td>onBeforeUnmount</td></tr><tr><td>unmounted</td><td>onUnmounted</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;渲染1&quot;</span>);<br>    &#125;)<br>&#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h6 id="Provide-Inject"><a href="#Provide-Inject" class="headerlink" title="Provide/Inject"></a>Provide/Inject</h6><ul><li>project()和inject()可以实现嵌套组件之间的数据传递。</li><li>这两个函数只能在setup()函数中使用。</li><li>父级组件中使用provide()函数向下传递数据。</li><li>子级组件中使用inject()获取上层传递过来的数据。</li><li>不限层级。</li></ul><p>==父组件==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; provide &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br>  setup () &#123;<br>    <span class="hljs-title function_">provide</span>(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;我是大哥大消息&quot;</span>)<br>  &#125;<br></code></pre></td></tr></table></figure><p>==子组件==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; onMounted, inject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> message = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&quot;message&quot;</span>);<br>    <span class="hljs-keyword">return</span> &#123;<br>      message<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h6><p>Fragment翻译为：“碎片”</p><ul><li>不再限于模板中的单个根节点</li></ul><h3 id="11-Element-Plus组件库"><a href="#11-Element-Plus组件库" class="headerlink" title="11.Element-Plus组件库"></a>11.Element-Plus组件库</h3><h4 id="1-安装组件库"><a href="#1-安装组件库" class="headerlink" title="1.安装组件库"></a>1.安装组件库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">NPM</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install element-plus --save</span><br></code></pre></td></tr></table></figure><h4 id="2-全局引用"><a href="#2-全局引用" class="headerlink" title="2.全局引用"></a>2.全局引用</h4><p><strong>main.js中引用组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.full.min.mjs&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-按需导入"><a href="#3-按需导入" class="headerlink" title="3.按需导入"></a>3.按需导入</h4><p><strong>配置vue.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AutoImport</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;unplugin-auto-import/webpack&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Components</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;unplugin-vue-components/webpack&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">ElementPlusResolver</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;unplugin-vue-components/resolvers&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">configureWebpack</span>: &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-title class_">AutoImport</span>(&#123;<br>        <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()],<br>      &#125;),<br>      <span class="hljs-title class_">Components</span>(&#123;<br>        <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()],<br>      &#125;),<br>    ],<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="4-加载字体图标"><a href="#4-加载字体图标" class="headerlink" title="4.加载字体图标"></a>4.加载字体图标</h4><h5 id="1-下载图标"><a href="#1-下载图标" class="headerlink" title="1.下载图标"></a>1.下载图标</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">NPM</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install @element-plus/icons-vue</span><br></code></pre></td></tr></table></figure><h5 id="2-注册图标"><a href="#2-注册图标" class="headerlink" title="2.注册图标"></a>2.注册图标</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.ts</span><br><br><span class="hljs-comment">// 如果您正在使用CDN引入，请删除下面一行。</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">ElementPlusIconsVue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@element-plus/icons-vue&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, component] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(<span class="hljs-title class_">ElementPlusIconsVue</span>)) &#123;<br>  app.<span class="hljs-title function_">component</span>(key, component)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-图标实例"><a href="#3-图标实例" class="headerlink" title="3.图标实例"></a>3.图标实例</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-icon :size=&quot;20&quot; color=&quot;green&quot;&gt;<br>      &lt;View /&gt;<br>&lt;/el-icon&gt;<br></code></pre></td></tr></table></figure><h2 id="15-Elasticsearch"><a href="#15-Elasticsearch" class="headerlink" title="15.Elasticsearch"></a>15.Elasticsearch</h2><h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h3><h4 id="1-创建（更新）索引"><a href="#1-创建（更新）索引" class="headerlink" title="1.创建（更新）索引"></a>1.创建（更新）索引</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">PUT test/_doc/1<br>&#123;<br>  &quot;title&quot;:  &quot;FIR滤波器的设计方法&quot;,<br>  &quot;author&quot;:  &quot;alleyf&quot;,<br>  &quot;content&quot;:  &quot;FIR滤波器和IIR滤波器都是数字滤波器，我们可以利用MATLAB工具箱对其进行设计。&quot;<br>&#125;<br></code></pre></td></tr></table></figure><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221220163511348.png" alt="image-20221220163511348" style="zoom: 50%;" /><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-index:索引名称</span><br><span class="hljs-deletion">-type：类型</span><br><span class="hljs-deletion">-id：索引id</span><br><span class="hljs-deletion">-version：修改次数（版本号）</span><br><span class="hljs-deletion">-result：操作类型</span><br><span class="hljs-deletion">-shards：分片情况</span><br>total：分片总数<br>successful：成功数<br>failed：失败数<br></code></pre></td></tr></table></figure><h4 id="2-基本查询"><a href="#2-基本查询" class="headerlink" title="2.基本查询"></a>2.基本查询</h4><blockquote><p>==返回值为JSON字符串字典==</p></blockquote><h5 id="1-ID查询"><a href="#1-ID查询" class="headerlink" title="1.ID查询"></a>1.ID查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET test/_doc/1<br></code></pre></td></tr></table></figure><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221220164122317.png" alt="image-20221220164122317" style="zoom:50%;" /><h5 id="2-全查询"><a href="#2-全查询" class="headerlink" title="2.全查询"></a>2.全查询</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET test/_doc/_search<br></code></pre></td></tr></table></figure><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221220164543339.png" alt="image-20221220164543339" style="zoom:50%;" /><h5 id="3-ID删除"><a href="#3-ID删除" class="headerlink" title="3.ID删除"></a>3.ID删除</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">DELETE test/doc/1<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">返回结果</span><br>&#123;<br>  &quot;_index&quot; : &quot;test&quot;,<br>  &quot;_type&quot; : &quot;doc&quot;,<br>  &quot;_id&quot; : &quot;1&quot;,<br>  &quot;_version&quot; : 3,<br>  &quot;result&quot; : &quot;deleted&quot;,<br>  &quot;_shards&quot; : &#123;<br>    &quot;total&quot; : 2,<br>    &quot;successful&quot; : 1,<br>    &quot;failed&quot; : 0<br>  &#125;,<br>  &quot;_seq_no&quot; : 3,<br>  &quot;_primary_term&quot; : 2<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-全删除"><a href="#4-全删除" class="headerlink" title="4.全删除"></a>4.全删除</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">DELETE <span class="hljs-built_in">test</span>/<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">返回结果</span><br>&#123;<br>  &quot;acknowledged&quot; : true<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-查询所有存在的索引"><a href="#5-查询所有存在的索引" class="headerlink" title="5.查询所有存在的索引"></a>5.查询所有存在的索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shel">GET _cat/indices?v<br></code></pre></td></tr></table></figure><h2 id="16-Django-Vue"><a href="#16-Django-Vue" class="headerlink" title="16.Django+Vue"></a>16.Django+Vue</h2>]]></content>
    
    
    <categories>
      
      <category>Front_end_development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>h5</tag>
      
      <tag>css</tag>
      
      <tag>javascript</tag>
      
      <tag>Mysql</tag>
      
      <tag>Django</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fast_Conv Filter Design</title>
    <link href="/2022/11/2b8c5a163a43.html"/>
    <url>/2022/11/2b8c5a163a43.html</url>
    
    <content type="html"><![CDATA[<h1 id="FIR滤波器结合快速卷积滤波"><a href="#FIR滤波器结合快速卷积滤波" class="headerlink" title="FIR滤波器结合快速卷积滤波"></a>FIR滤波器结合快速卷积滤波</h1><h2 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h2><p>选择子作业１中的音频信号，自行给定滤波器的单位取样响应，采用<strong>快速卷积</strong>实现对音频信号的滤波，比较滤波前后信号的波形和回放的效果。</p><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><h3 id="设计FIR滤波器"><a href="#设计FIR滤波器" class="headerlink" title="设计FIR滤波器"></a>设计FIR滤波器</h3><ul><li>分析原始音频信号的频谱，观察有用信号和噪声的分布，选择滤波器类型（低通、高通、带通、带阻等）</li><li>设定幅频响应下降三分贝的截止频率和滤波器阶数</li><li>选择合适的窗函数（包括Rectangular、Hanning、Hamming、Bartlett、Blackman、Kaiser、Gaussian、Flat-top等）</li><li>获得滤波器的单位采样响应hn</li></ul><h3 id="快速卷积"><a href="#快速卷积" class="headerlink" title="快速卷积"></a>快速卷积</h3><ul><li>计算原始音频信号x与滤波器的单位采样响应hn的线性卷积长度，L=length(x)+length(hn)</li><li>设计FFT的长度N&gt;=L</li><li>对x和hn分别做N点FFT变换获得Xk、Hk</li><li>将Xk与Hk相乘得到Yk</li><li>将Yk做IFFT逆变换得到yn，即完成快速卷积</li></ul><h2 id="三、实现过程"><a href="#三、实现过程" class="headerlink" title="三、实现过程"></a>三、实现过程</h2><h3 id="FIR滤波器"><a href="#FIR滤波器" class="headerlink" title="FIR滤波器"></a>FIR滤波器</h3><p>设FIR滤波器的单位冲激响应h(n)为一个N点序列，0≤n≤N-1，则滤波器的系统函数为：<br>$$<br>H(\mathrm{z})=\sum_{k=0}^{N-1}h(\mathrm{k})*\mathrm{z}^{-k}<br>$$<br><strong>直接型FIR滤波器</strong>的差分方程为：<br>$$<br>\mathrm{y(n)}=\sum_{m=0}^{N-1}\mathrm{h(m)x(n-m)}<br>$$<br>由差分方程可知只需要求出FIR滤波器的单位冲激响应h(n)，设置<strong>滤波阶数</strong>和<strong>3db通带截止频率fc</strong>，采用<strong>汉明窗函数</strong>处理，再使用<strong>fir1函数</strong>将其与待滤波信号卷积即可完成滤波，具体实现代码如下。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% hamming窗低通滤波器设计</span><br>fc=<span class="hljs-number">7.95e3</span>; <span class="hljs-comment">%下降3分贝截止频率</span><br>hn=fir1(<span class="hljs-number">1000</span>,fc*<span class="hljs-number">2</span>/Fs,<span class="hljs-string">&quot;low&quot;</span>);<br>hn=hn&#x27;;<br>Nh=<span class="hljs-built_in">length</span>(hn);<br></code></pre></td></tr></table></figure><p>FIR滤波器的单位冲击响应如下图所示：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221013213239697.png"></p><h3 id="快速卷积-1"><a href="#快速卷积-1" class="headerlink" title="快速卷积"></a>快速卷积</h3><p>线性卷积在<strong>满足圆周卷积点数大于等于线性卷积长度</strong>的条件下可以用圆周卷积计算，而圆周卷积可以使用DFT计算，而DFT有快速算法FFT，因此可以利用FFT算法减少运算量快速计算线性卷积。先将做卷积的两个信号<strong>补零</strong>到指定长度，然后分别做<strong>FFT变换</strong>，根据卷积定理可得时域上做卷积，就是在频域上做乘积，将两者<strong>频谱相乘后做IFFT</strong>即可实现快速卷积，整个过程如下图所示：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/Fast-linear-convolution-realized-by-circular-convolution-in-the-DFT-domain.png" alt="FFT流程图"></p><p>实现快速卷积的代码如下所示：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 快速卷积和线性卷积</span><br>L=<span class="hljs-built_in">pow2</span>(<span class="hljs-built_in">nextpow2</span>(Nx+Nh<span class="hljs-number">-1</span>));<span class="hljs-comment">%确定FFT快速卷积的点数</span><br>fprintf(<span class="hljs-string">&#x27;快速卷积：&#x27;</span>);<br>tic;<br>Xk=fft(x,L);<span class="hljs-comment">%计算x的L点FFT,结果为x(k)</span><br>Hk=fft(hn,L);<span class="hljs-comment">%计算y的L点FFT,结果为y(k)</span><br>Yk=Xk.*Hk;<span class="hljs-comment">%计算YK</span><br>y1n=ifft(Yk,L);<span class="hljs-comment">%对YK调用IFFT，求得y1(n)</span><br>toc;<br>fprintf(<span class="hljs-string">&#x27;直接卷积：&#x27;</span>);<br>tic;<br>y2n=conv(x,hn);<span class="hljs-comment">%计算y2(n)的卷积</span><br>toc;<br></code></pre></td></tr></table></figure><h2 id="四、结果展示"><a href="#四、结果展示" class="headerlink" title="四、结果展示"></a>四、结果展示</h2><h3 id="线性卷积和FFT快速卷积滤波前后对比图"><a href="#线性卷积和FFT快速卷积滤波前后对比图" class="headerlink" title="线性卷积和FFT快速卷积滤波前后对比图"></a>线性卷积和FFT快速卷积滤波前后对比图</h3><p><img src="https://img.gouka.la/i/2022/11/14/z1xwyl.webp" alt="滤波对比图"></p><h3 id="线性卷积和FFT快速卷积滤波时间对比图"><a href="#线性卷积和FFT快速卷积滤波时间对比图" class="headerlink" title="线性卷积和FFT快速卷积滤波时间对比图"></a>线性卷积和FFT快速卷积滤波时间对比图</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E6%97%B6%E9%97%B4%E5%AF%B9%E6%AF%94%E5%9B%BE.png" alt="时间对比图"></p><h2 id="五、结果分析"><a href="#五、结果分析" class="headerlink" title="五、结果分析"></a>五、结果分析</h2><blockquote><ul><li>由上图可知普通线性卷积的结果和快速卷积的结果一样，但快速卷积相比普通线性卷积耗时更短，因此快速卷积可以提高运算速率，减少运算量，提高运算效率。</li><li>离散傅立叶变换（DFT)实现了频域的离散化,方便了计算机处理,在数字信号处理中有着非常重要的作用。但直接计算DFT的运算量与变换长度N的平方成正比,计算量太大。而快速傅立叶变换FFT则是快速计算DFT的有效算法，大大提高了DFT的运算效率，在信号频谱的分析、滤波器频率响应的计算，以及线性卷积的快速计算等方面起着非常重要的作用。</li></ul></blockquote><h2 id="代码开源"><a href="#代码开源" class="headerlink" title="代码开源"></a>代码开源</h2><blockquote><p><a href="https://alist.fcsy.fit/d/mobilepan/PicoImages/ch1andch2.zip">源代码ch1和ch2</a><a href="https://alist.fcsy.fit/d/mobilepan/PicoImages/ch4andch5.zip">源代码ch3和ch4</a>有需要可以自行下载，里面包括源代码、滤波后的音频和PDF参考文档。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FIR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GoodsManageSystem</title>
    <link href="/2022/10/7fb9350bc4f2.html"/>
    <url>/2022/10/7fb9350bc4f2.html</url>
    
    <content type="html"><![CDATA[<h1 id="商品管理系统实战"><a href="#商品管理系统实战" class="headerlink" title="商品管理系统实战"></a>商品管理系统实战</h1><h2 id="1-题目要求"><a href="#1-题目要求" class="headerlink" title="1.题目要求"></a>1.题目要求</h2><p>模拟实现以下商品管理业务系统，商品管理系统的整体功能有：</p><blockquote><p>注：商品数据存储在一个数据库中(用静态HashMap来模拟)，MySQL </p></blockquote><ol><li>用户可以通过输入商品信息来向库中添加商品，如：</li><li>id，name,price,库存数量 -&gt; <strong>p01,透明胶带,8.8,1000</strong></li><li>用户可以查看数据库中所有的商品 </li><li>用户可以通过输入一个id来查看一个商品</li><li>用户可以通过输入一个name来查看一个商品</li><li>用户可以通过输入一个价格范围（比如：100-&gt;200）来查看符合条件的商品</li><li>用户可以通过输入一个id来从数据库中删除一个商品</li><li>用户可以通过指定一个id来修改一个商品的名称</li><li>用户可以通过制定一个id来修改一个商品的价格</li><li>用户可以通过制定一个id来修改一个商品的库存数量</li></ol><p>要求：</p><blockquote><ul><li>整个程序要分成：交互层、 业务逻辑（service）层、 数据访问（dao）层</li><li>交互层和service层之间要用“面向接口编程”的模式来写</li><li>业务逻辑层和dao层之间要用“面向接口编程”的模式来写</li></ul></blockquote><h2 id="2-前期准备"><a href="#2-前期准备" class="headerlink" title="2.前期准备"></a>2.前期准备</h2><ul><li>该项目基本融合了java学习的大部分知识，我们需要熟悉前面所学的基础知识，尤其是关于<strong>类的封装、继承、多态</strong>，还有接口的使用，以及对未知错误的<strong>异常处理</strong>等方面知识；底层DAO需要掌握<strong>JDBC</strong>指令同<strong>mysql数据库</strong>处理，在交互层需要了解常用的<strong>GUI组件</strong>和设计思路框架，在此过程中需要学习相关知识，下面推荐了一些学习资料和视频。<blockquote><ul><li>MYSQL入门知识：<a href="https://blog.csdn.net/weixin_46211269/article/details/119814777?spm=1001.2014.3001.5506">SQL指令基础</a></li><li>GUI入门知识：<a href="https://xiets.blog.csdn.net/article/details/72814531?spm=1001.2014.3001.5506">Swing速成</a></li><li>优秀博主：<a href="https://chuiyugin.github.io/2022/10/28/exercise2/#%E5%AE%9E%E9%AA%8C%E9%A2%98%E7%9B%AE">ChuiyuGin</a>、<a href="https://alleyf.github.io/2022/10/28/%E5%95%86%E5%93%81%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98/">Alleyf</a></li></ul></blockquote></li></ul><h2 id="3-设计思路"><a href="#3-设计思路" class="headerlink" title="3.设计思路"></a>3.设计思路</h2><h3 id="1-DAO层"><a href="#1-DAO层" class="headerlink" title="1.DAO层"></a>1.DAO层</h3><p>DAO层主要完成对底层数据库的连接，与数据库进行数据交互，作为后面业务服务层的基础，java实现数据库的连接需要用到<u>JDBC包（jar）</u>，使用包中相应的类方法完成数据库连接，下面展示了DAO层的实现代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DAO;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DAO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DAOApi</span>&#123;<br>    <span class="hljs-keyword">protected</span>  <span class="hljs-keyword">static</span> Statement statement;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Connection connection;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/goodsmag&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-literal">null</span>)<br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>+connection);<br>            &#125;<br>            <span class="hljs-keyword">assert</span> connection != <span class="hljs-literal">null</span>;<br>            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (ClassNotFoundException e)<br>        &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            System.exit(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-业务-Service-逻辑层"><a href="#2-业务-Service-逻辑层" class="headerlink" title="2.业务(Service)逻辑层"></a>2.业务(Service)逻辑层</h3><p>本层主要是实现对数据库的数据处理的各种功能，包括对数据库中表的数据的<strong>增删改查</strong>，以及各种基础功能和附加功能，本层采用接口的方法实现，通过<strong>JDBC</strong>的各种命令对数据库中数据表的数据进行各种操作，以下介绍各个功能的实现。</p><h4 id="2-1-各功能接口"><a href="#2-1-各功能接口" class="headerlink" title="2.1 各功能接口"></a>2.1 各功能接口</h4><p>各种功能的接口提前定义好，以便于在后面的服务层中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Service;<br><br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServiceApi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SearchApi</span>, AlterApi, JudgeApi&#123;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SearchApi</span><br>&#123;<br>    Object[][] alllook() <span class="hljs-keyword">throws</span> SQLException;<br>    Object[][] idlook(<span class="hljs-type">int</span> id) <span class="hljs-keyword">throws</span> SQLException;<br>    Object[][] namelook(String name) <span class="hljs-keyword">throws</span> SQLException;<br>    Object[][] pricelook(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b) <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AlterApi</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">iddel</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">alldel</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String namevalue,String pricevalue,String numvalue)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">rename</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String newname)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reprice</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">float</span> newprice)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">renumber</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> newnumber)</span> <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">JudgeApi</span><br>&#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">idexist</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">nameexist</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-添加商品"><a href="#2-2-添加商品" class="headerlink" title="2.2 添加商品"></a>2.2 添加商品</h4><p>该方法采用**Vector<HashMap>**来临时存储输入的需要添加的商品的各种信息，然后通过JDBC命令将其添加到数据库中，从而实现对商品的添加功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String namevalue,String pricevalue,String numvalue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods (name, price, num) values &quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i&lt;<span class="hljs-number">4</span>)<br>        &#123;<br>            <span class="hljs-keyword">switch</span>(i++)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                &#123;<br>                    goods.put(<span class="hljs-string">&quot;name&quot;</span>, namevalue);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                &#123;<br>                    goods.put(<span class="hljs-string">&quot;price&quot;</span>, pricevalue);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                &#123;<br>                    goods.put(<span class="hljs-string">&quot;num&quot;</span>, numvalue);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        i = <span class="hljs-number">1</span>;<br>        v.add(goods);<br>        <span class="hljs-keyword">try</span>&#123;<br>            statement.executeUpdate(key+<span class="hljs-string">&quot;( \&quot;&quot;</span>+goods.get(<span class="hljs-string">&quot;name&quot;</span>)+<span class="hljs-string">&quot;\&quot;,&quot;</span>+goods.get(<span class="hljs-string">&quot;price&quot;</span>)+<span class="hljs-string">&quot;,&quot;</span>+goods.get(<span class="hljs-string">&quot;num&quot;</span>)+<span class="hljs-string">&quot;)&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-查询所有商品"><a href="#2-3-查询所有商品" class="headerlink" title="2.3 查询所有商品"></a>2.3 查询所有商品</h4><p>本方法通过使用一个<strong>Object数组</strong>来临时存储从数据库中查询到的所有商品数据，并将其循环添加到数组中保存，待需要时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object[][] alllook() <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">retnumsql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SET @rownum = 0&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">reranksql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UPDATE goods SET id = @rownum := @rownum +1&quot;</span>;<br>        statement.execute(retnumsql);<br>        statement.execute(reranksql);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) totalCount from goods&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(sql1);<br>        rs.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;totalCount&quot;</span>);<br>        Object[][] rowdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[count][<span class="hljs-number">4</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from goods&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql2);<br>        <span class="hljs-keyword">while</span>(resultSet.next())<br>        &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> resultSet.getFloat(<span class="hljs-string">&quot;price&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>                rowdata[i++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;id, name, price, num&#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rowdata;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-ID查询商品"><a href="#2-4-ID查询商品" class="headerlink" title="2.4 ID查询商品"></a>2.4 ID查询商品</h4><p>通过查询指定键的键值即ID来从数据库中查询该ID的商品，实现原理与全查询类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object[][] idlook (<span class="hljs-type">int</span> id) <span class="hljs-keyword">throws</span> SQLException &#123;<br>        Object[][] rowdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">1</span>][<span class="hljs-number">4</span>];<br>        <span class="hljs-keyword">if</span>(idexist(id))<br>        &#123;<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(<span class="hljs-string">&quot;select * from goods where id = &quot;</span> + id);<br>            <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">ID</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> resultSet.getFloat(<span class="hljs-string">&quot;price&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>                rowdata[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;ID, name, price, num&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rowdata;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-名字查询商品"><a href="#2-5-名字查询商品" class="headerlink" title="2.5 名字查询商品"></a>2.5 名字查询商品</h4><p>通过传递输入的商品名字到服务层到数据库中查询指定名字的商品，原理与上文类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object[][] namelook(String name) <span class="hljs-keyword">throws</span> SQLException &#123;<br>        Object[][] rowdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">1</span>][<span class="hljs-number">4</span>];<br>        <span class="hljs-keyword">if</span>(nameexist(name))<br>        &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from goods where name = \&quot;&quot;</span> + name + <span class="hljs-string">&quot;\&quot;&quot;</span>;<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>            <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">ID</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">Name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> resultSet.getFloat(<span class="hljs-string">&quot;price&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>                rowdata[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;ID, Name, price, num&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rowdata;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-6-ID删除商品"><a href="#2-6-ID删除商品" class="headerlink" title="2.6 ID删除商品"></a>2.6 ID删除商品</h4><p>通过传递商品ID通过JDBC指令直接删除数据库中指定ID的商品。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">iddel</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">if</span> (idexist(id))<br>        &#123;<br>            statement.executeUpdate(<span class="hljs-string">&quot;delete from goods where id=&quot;</span> + id);<br>            System.out.println(<span class="hljs-string">&quot;ID = &quot;</span> + id + <span class="hljs-string">&quot; 的商品信息删除成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;您的输入ID有误请查证后重新删除&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-7-价格筛选"><a href="#2-7-价格筛选" class="headerlink" title="2.7 价格筛选"></a>2.7 价格筛选</h4><p>通过传递<strong>maxprice和minprice</strong>两个浮点数调用JDBC指令到数据库中查询处于该范围内的商品并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object[][] pricelook(<span class="hljs-type">float</span> a, <span class="hljs-type">float</span> b) <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) totalCount from goods where price&gt;=&quot;</span> + a +  <span class="hljs-string">&quot;and price&lt;=&quot;</span> + b + <span class="hljs-string">&quot;order by price&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(sql1);<br>        rs.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;totalCount&quot;</span>);<br>        Object[][] rowdata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[count][<span class="hljs-number">4</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from goods where price&gt;=&quot;</span> + a + <span class="hljs-string">&quot; and price&lt;=&quot;</span> + b +<span class="hljs-string">&quot;order by price&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql2);<br>        <span class="hljs-keyword">while</span>(resultSet.next())<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">float</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> resultSet.getFloat(<span class="hljs-string">&quot;price&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>            rowdata[i++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;id, name, price, num&#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> rowdata;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-8-修改数据-重命名、修改价格、修改数量"><a href="#2-8-修改数据-重命名、修改价格、修改数量" class="headerlink" title="2.8 修改数据(重命名、修改价格、修改数量)"></a>2.8 修改数据(重命名、修改价格、修改数量)</h4><p>通过传递对应的Name、Price和Number利用JDBC指令修改为输入的数据，三种修改方式实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rename</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String newname)</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br>        <span class="hljs-keyword">if</span>(idexist(id))<br>        &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update goods set name=\&quot;&quot;</span> + newname + <span class="hljs-string">&quot;\&quot; where id=&quot;</span> + id;<br>            statement.executeUpdate(sql);<br>            System.out.println(<span class="hljs-string">&quot;商品名修改成功&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reprice</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">float</span> newprice)</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br>        <span class="hljs-keyword">if</span>(idexist(id))<br>        &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update goods set price=&quot;</span> + newprice + <span class="hljs-string">&quot; where id=&quot;</span> + id;<br>            statement.executeUpdate(sql);<br>            System.out.println(<span class="hljs-string">&quot;商品价格修改成功&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renumber</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> newnumber)</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br>        <span class="hljs-keyword">if</span>(idexist(id))<br>        &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update goods set num=&quot;</span> + newnumber + <span class="hljs-string">&quot; where id=&quot;</span> + id;<br>            statement.executeUpdate(sql);<br>            System.out.println(<span class="hljs-string">&quot;商品数量修改成功&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="3-GUI交互层"><a href="#3-GUI交互层" class="headerlink" title="3.GUI交互层"></a>3.GUI交互层</h3><p>该层主要采用<strong>Swing类</strong>的各种组件和方法实现自己想要的图形用户界面，实现过程简要分为一下几个步骤。</p><blockquote><ul><li>创建<strong>JFrame</strong>组件作为面板组件的载体。</li><li>创建<strong>JPanel</strong>组件作为基础组件的载体，并且设置面板的大小，位置以及<strong>布局方式</strong>。</li><li>创建<strong>JLabel、JTextField、JButton、JPassword</strong>等基本组件并且设置其<strong>格式</strong>，包括颜色、大小、位置等。</li><li>将创建的基本组件添加到面板中，为组件<strong>添加监视器</strong>来实现动态响应，然后设置JFrame的内容为面板，设置其<strong>居中可见</strong>即可。</li></ul></blockquote><p>下面只展示部分代码作为示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showmanual</span><span class="hljs-params">(Frame owner)</span>&#123;<br>    <span class="hljs-comment">//设置对话框为非模态</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">JDialog</span> <span class="hljs-variable">dialog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDialog</span>(owner, <span class="hljs-string">&quot;教程&quot;</span>, <span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 设置对话框的宽高</span><br>            dialog.setSize(<span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br>            <span class="hljs-comment">// 设置对话框大小不可改变</span><br>            dialog.setResizable(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 设置对话框相对显示的位置</span><br>            dialog.setLocationRelativeTo(GuiInteractApi.jf);<br>            <span class="hljs-comment">// 创建一个标签显示消息内容</span><br>            <span class="hljs-type">JLabel</span> <span class="hljs-variable">background</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;resources/img/教程视频.gif&quot;</span>));<br>            <span class="hljs-comment">// 添加组件到面板</span><br>            <span class="hljs-type">JPanel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>            panel.add(background);<br>            dialog.setContentPane(panel);<br>            dialog.setVisible(<span class="hljs-literal">true</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="4-结果展示"><a href="#4-结果展示" class="headerlink" title="4.结果展示"></a>4.结果展示</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/c636231974a87d0997eda6fa0a1e529a.gif" alt="教程动图"></p><h2 id="5-资源下载"><a href="#5-资源下载" class="headerlink" title="5.资源下载"></a>5.资源下载</h2><blockquote><ul><li><p>程序下载链接：**<a href="https://download4.caiyun.feixin.10086.cn/storageWeb/servlet/downloadServlet?code=S0kxNzExZEVBUnMwTDYxMTAxN3R0N0E5VTc0&un=31BB2E3B2E4C84E57E90F21CC8D6A094FCB831756D44A2DBABC878647EED02A5&dom=D973&rate=0&txType=0">项目资源包</a>**</p></li><li><p>登录的用户名为<strong>root</strong>,密码为<strong>123456</strong>.</p></li><li><p>本程序使用的为私人云端数据库，可以直接运行程序，不需要切换为自己本地的数据库，不过也实现了软件内切换登录本地数据库，具体请自行测试.</p></li><li><p>项目创作不易,精心打磨耗时较久,从底层代码设计编写到GUI的Logo图标均为自己设计，但是仍然还有很多做的不够好的地方,请大家加以指正,有兴趣的小伙伴可以相互交流合作.</p></li><li><p>该资源包中包含了一个完整的可执行程序可以供大家学习使用,有需要的小伙伴可以联系我获取项目源代码.</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FilterDesign</title>
    <link href="/2022/10/9968af83d482.html"/>
    <url>/2022/10/9968af83d482.html</url>
    
    <content type="html"><![CDATA[<h1 id="信号的时域处理"><a href="#信号的时域处理" class="headerlink" title="信号的时域处理"></a>信号的时域处理</h1><h2 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h2><p>选择子作业１中的音频信号，自行给定滤波器的系统函数，分别采用<strong>时域线性卷积</strong>和<strong>差分方程</strong>两种方法对音频信号进行滤波处理，比较滤波前后信号的波形和回放的效果。</p><h2 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h2><h3 id="1-时域卷积法"><a href="#1-时域卷积法" class="headerlink" title="1.时域卷积法"></a>1.时域卷积法</h3><ul><li><p>分析原始音频信号的频谱，观察有用信号和噪声的分布，选择滤波器类型（低通、高通、带通、带阻等）</p></li><li><p>设定幅频响应下降三分贝的截止频率和滤波器阶数</p></li><li><p>选择合适的窗函数（包括Rectangular、Hanning、Hamming、Bartlett、Blackman、Kaiser、Gaussian、Flat-top等）</p></li><li><p>计算滤波器系数（滤波器的单位脉冲响应）</p></li><li><p>将滤波器系数与原始信号卷积进行滤波</p></li></ul><h3 id="2-差分方程法"><a href="#2-差分方程法" class="headerlink" title="2.差分方程法"></a>2.差分方程法</h3><ul><li>分析原始音频信号的频谱，观察有用信号和噪声的分布，选择滤波器类型（低通、高通、带通、带阻等）</li><li>设置通带截止频率和阻带截止频率并归一化，设定通带纹波系数和阻带衰减系数</li><li>求出切比雪夫滤波器的阶数和下降3分贝通带截止频率</li><li>计算滤波器的差分方程系数</li><li>调用filter函数对原始信号进行滤波</li></ul><h2 id="三、实现过程"><a href="#三、实现过程" class="headerlink" title="三、实现过程"></a>三、实现过程</h2><h3 id="滤波前后对比图"><a href="#滤波前后对比图" class="headerlink" title="滤波前后对比图"></a>滤波前后对比图</h3><div align="center">    <table align="center" border="0" cellspacing="0">        <tr>            <td><p align="center"><img src="https://img.gouka.la/i/2022/10/15/ystu0e.webp">    <p align="center">        FIR hamming窗低通滤波器前后对比图    </p>    </p></td>            <td><p align="center"><img src="https://img.gouka.la/i/2022/10/15/yukca3.webp">    <p align="center">        IIR 切比雪夫低通滤波器前后对比图    </p></p></td>        </tr>    </table></div><h3 id="1-时域卷积"><a href="#1-时域卷积" class="headerlink" title="1.时域卷积"></a>1.时域卷积</h3><p>首先导入原始音频信号并画出时域图和幅频响应曲线，分析其频谱分布，代码如下所示。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 数据导入及参数设置</span><br>[x,Fs]=audioread(<span class="hljs-string">&#x27;D:\数据\Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>Nx=<span class="hljs-built_in">length</span>(x);<br>tx=(<span class="hljs-number">0</span>:Nx<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>df=Fs/<span class="hljs-built_in">length</span>(tx); <span class="hljs-comment">%计算谱线间隔</span><br>fx=tx*df;<span class="hljs-comment">%频域范围</span><br>X=FFT(x,Nx,Fs,tx);<span class="hljs-comment">%快速傅里叶变换</span><br>fx=(fx*Fs)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>X=<span class="hljs-built_in">abs</span>(X);<br><span class="hljs-comment">% 绘出时域图和幅频响应</span><br><span class="hljs-built_in">figure</span>;<br>subplot(<span class="hljs-number">221</span>)<br><span class="hljs-built_in">plot</span>(tx,x); <br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">222</span>)<br><span class="hljs-comment">% plot(fx*Fs/1e3,abs(X),&quot;blue&quot;)</span><br><span class="hljs-built_in">plot</span>(fx(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Nx/<span class="hljs-number">2</span>)),X(<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Nx/<span class="hljs-number">2</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;b&#x27;</span>)<br>title(<span class="hljs-string">&quot;原信号音频相频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br></code></pre></td></tr></table></figure><p><img src="https://img.gouka.la/i/2022/10/15/yy5o7x.webp"></p><p>观察其幅频响应发现有用信号的频率在8Khz以下，以上则为能量较大的高频噪声，因此我采用低通滤波器对其进行滤波。</p><h4 id="FIR滤波器"><a href="#FIR滤波器" class="headerlink" title="FIR滤波器"></a>FIR滤波器</h4><p>设FIR滤波器的单位冲激响应h(n)为一个N点序列，0≤n≤N-1，则滤波器的系统函数为：<br>$$<br>H(\mathrm{z})=\sum_{k=0}^{N-1}h(\mathrm{k})*\mathrm{z}^{-k}<br>$$<br><strong>直接型FIR滤波器</strong>的差分方程为：<br>$$<br>\mathrm{y(n)}=\sum_{m=0}^{N-1}\mathrm{h(m)x(n-m)}<br>$$<br>由差分方程可知只需要求出FIR滤波器的单位冲激响应h(n)，设置<strong>滤波阶数</strong>和<strong>3db通带截止频率fc</strong>，采用<strong>汉林窗函数</strong>处理，再使用<strong>fir1函数</strong>将其与待滤波信号卷积即可完成滤波，具体实现代码如下。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% hamming窗低通滤波器滤除高频噪声</span><br>fc=<span class="hljs-number">7.95e3</span>; <span class="hljs-comment">%下降3分贝截止频率</span><br>h_n=fir1(<span class="hljs-number">1000</span>,fc*<span class="hljs-number">2</span>/Fs,<span class="hljs-string">&quot;low&quot;</span>);<br>y=conv(h_n,x);<br><br>Ny=<span class="hljs-built_in">length</span>(y);<span class="hljs-comment">%滤波后信号的长度</span><br>ty=(<span class="hljs-number">0</span>:Ny<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br>Y=FFT(y,Ny,Fs,ty);<span class="hljs-comment">%快速傅里叶变换求频谱</span><br>df=Fs/<span class="hljs-built_in">length</span>(ty); <span class="hljs-comment">%计算谱线间隔</span><br>fy=ty*df;<span class="hljs-comment">%频域范围</span><br>fy=(fy*Fs)/<span class="hljs-number">1e3</span>;<span class="hljs-comment">%只显示正频谱</span><br>Y=<span class="hljs-built_in">abs</span>(Y);<br><span class="hljs-comment">% 绘出滤波后的时域图和幅频响应</span><br>subplot(<span class="hljs-number">223</span>)<br><span class="hljs-built_in">plot</span>(ty,y,<span class="hljs-string">&quot;g&quot;</span>);<br>title(<span class="hljs-string">&quot;滤波后信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">224</span>)<br>stem(fx(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Ny/<span class="hljs-number">2</span>)),Y(<span class="hljs-number">1</span>:<span class="hljs-built_in">ceil</span>(Ny/<span class="hljs-number">2</span>),<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>)<br>title(<span class="hljs-string">&quot;滤波后信号音频相频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br><span class="hljs-comment">%% 试听及保存</span><br><span class="hljs-comment">% sound(y,Fs);</span><br>audiowrite(<span class="hljs-string">&quot;D:\数据\FIRfilter.wav&quot;</span>,y,Fs);<br><span class="hljs-comment">%% 快速傅里叶变换函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FourierTransform</span> = <span class="hljs-title">FFT</span><span class="hljs-params">(signal,N,fs,t)</span></span><br>Y=fft(signal,N);<br>df=fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<span class="hljs-comment">%频域范围</span><br>Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>FourierTransform=Ys;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>FIR滤波器的单位冲激响应如下图所示：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221013213239697.png"></p><p>通过时域卷积得到滤波后的结果如下图所示：</p><p><img src="https://img.gouka.la/i/2022/10/15/yx0y7f.webp"></p><p>由图可知，发现经过<strong>1000阶</strong>的3分贝截止频率为<strong>7.95e3Khz</strong>的低通滤波器处理后，8Khz及以上的高频噪声基本被完全滤除，成功从原始音频信号中提取到有用信号。</p><h3 id="2-差分方程"><a href="#2-差分方程" class="headerlink" title="2.差分方程"></a>2.差分方程</h3><p>首先也是先对原始音频信号做傅里叶变换分析其频谱，频谱结果同上，这里不在赘述。</p><h4 id="IIR切比雪夫低通滤波"><a href="#IIR切比雪夫低通滤波" class="headerlink" title="IIR切比雪夫低通滤波"></a>IIR切比雪夫低通滤波</h4><p>IIR(infinite impulse response)滤波器，无限冲激响应滤波器,IIR滤波器定义如下：<br>$$<br>\sum_{l=0}^{N}a(l)y(n-l)= \sum _{k=0}^{M}b(k)x(n-k)<br>$$<br>令$a(0)=1,a(l),l=1,2,…N$取反后得：<br>$$<br>y(n)= \sum _{k=0}^{M}b(k)x(n-k)+ \sum _{l=1}^{N}a(l)y(n-l)<br>$$<br><strong>IIR直接II型滤波器</strong>的流程框图如下所示：</p><p><img src="https://upload.semidata.info/new.eefocus.com/article/image/2021/07/15/60efdc2160bb0-thumb.png"></p><p>根据流程框图可知，需要求得<strong>差分方程系数向量a和b</strong>，这里我采用常见的切比雪夫滤波器设定<strong>通带频率、阻带频率</strong>以及<strong>纹波系数</strong>和<strong>衰减系数</strong>计算出系数a和b，再利用<strong>filter函数</strong>传入系数a、b和待滤波信号即可完成滤波，采用如下代码实现差分方程法实现IIR切比雪夫低通滤波器。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% IIR-Chebyshev低通滤波器滤除高频噪声</span><br>Wp=<span class="hljs-number">7.6e3</span>*<span class="hljs-number">2</span>/Fs;<span class="hljs-comment">%通带频率</span><br>Ws=<span class="hljs-number">8e3</span>*<span class="hljs-number">2</span>/Fs;<span class="hljs-comment">%阻带频率</span><br>[n,Wc]=cheb1ord(Wp,Ws,<span class="hljs-number">2</span>,<span class="hljs-number">40</span>);<span class="hljs-comment">%计算阶数和3db通带截止频率</span><br>[b,a]=cheby1(n,<span class="hljs-number">3</span>,Wc);<span class="hljs-comment">%切比雪夫滤波器返回差分方程系数</span><br>freqz(b,a);<span class="hljs-comment">%绘出滤波器频谱图（幅频响应和相频响应）</span><br>y=filter(b,a,x);<span class="hljs-comment">%滤除高频噪声</span><br>Y=FFT(y,N,Fs,t);<br>Y=fftshift(Y);<br>Y=<span class="hljs-built_in">abs</span>(Y);<br><span class="hljs-comment">% 绘出滤波后的时域图和幅频响应</span><br>subplot(<span class="hljs-number">223</span>)<br><span class="hljs-built_in">plot</span>(t,y,<span class="hljs-string">&#x27;b&#x27;</span>);<br>title(<span class="hljs-string">&quot;滤波后信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>subplot(<span class="hljs-number">224</span>)<br><span class="hljs-comment">% plot(f*Fs/1e3,Y,&#x27;k&#x27;);</span><br><span class="hljs-built_in">plot</span>(f(<span class="hljs-number">1</span>,<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>),Y(<span class="hljs-built_in">ceil</span>(N/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;g&#x27;</span>)<br>title(<span class="hljs-string">&quot;滤波后信号音频幅频响应&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/Khz&quot;</span>); <br></code></pre></td></tr></table></figure><p>IIR切比雪夫滤波器的归一化频谱图如下所示：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/chebfrequency.png"></p><p>观察发现其幅频响应滤波效果比较好，根据此滤波器对原始音频信号进行滤波，下图展示了滤波后的结果。</p><p><img src="https://img.gouka.la/i/2022/10/15/yukca3.webp"></p><p>由图可知8Khz及以上的高频噪声被滤除，但原始信号靠近8Khz的部分幅值也有所衰减但影响不大，从而实现了对有用信号的提取。</p><h2 id="四、结果分析"><a href="#四、结果分析" class="headerlink" title="四、结果分析"></a>四、结果分析</h2><ol><li><p>时域线性卷积法和差分方程法都是实现数字滤波的两种方法，都可以很好的滤除有用信号的噪声，从而提取出有用的信号，排除无用信号的干扰。</p></li><li><p>实际观察发现<strong>随着滤波器的阶数的升高，滤波器的频率响应越接近理想滤波</strong>器，而要想实现同样滤波效果，差分方程法的滤波器阶数远小于时域卷积法的阶数。</p></li><li><p>当使用IIR滤波器时，由于IIR滤波器的存在<strong>系统稳定性</strong>问题，因此当滤波器阶数过高时会导致系统不稳定，从而失去正常滤波能力。</p></li><li><p>将相同参数的IIR<strong>巴特沃斯滤波</strong>与<strong>切比雪夫滤波</strong>对比，发现切比雪夫滤波后<strong>残留噪声频谱分布均匀</strong>，而巴特沃斯滤波后<strong>残留噪声频谱频率与幅度成反比</strong>，但是两种滤波器<strong>对高频有用信号也都所衰减</strong>，说明难以实现理想滤波器，只能无限逼近，两者频谱对比图如下。</p></li></ol><center>    <table align="center" border="0" cellspacing="0">        <tr>            <td><p align="center"><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221013153232154.png">    <p align="center">        切比雪夫滤波后的信号频谱图    </p>    </p></td>            <td><p align="center"><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/IIRbutterword.png">    <p align="center">        巴特沃斯滤波后的信号频谱图    </p></p></td>        </tr>    </table></center><blockquote><p><strong><a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-24bfcec2-0b23-4547-a957-73ffab276534/0414f532-0d93-430a-9df7-55b09eefd343.zip">如果需要程序源代码在此，点击即可下载</a></strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FIR、IIR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LatexEquationManual</title>
    <link href="/2022/10/7041d89da7de.html"/>
    <url>/2022/10/7041d89da7de.html</url>
    
    <content type="html"><![CDATA[<h1 id="Latex公式手册"><a href="#Latex公式手册" class="headerlink" title="Latex公式手册"></a>Latex公式手册</h1><h2 id="数学模式"><a href="#数学模式" class="headerlink" title="数学模式"></a>数学模式</h2><p>在LaTeX数学模式中，公式有两种形式——行内公式和行间公式。前者公式嵌入在行内，适用于简单短小的公式；后者居中独占一行，适用于比较长或重要的公式。公式中的空格均会被忽略，可以使用命令\quad或\qquad实现<br>在行间公式中，命令\tag{n}可以进行手动编号</p><p><strong>行内公式</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span> f(x) = a+b <span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p><strong>行间公式</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> f(x) = a+b <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p><strong>手动编号</strong></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> f(x) = a - b <span class="hljs-keyword">\tag</span>&#123;1.1&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><h2 id="数学结构"><a href="#数学结构" class="headerlink" title="数学结构"></a>数学结构</h2><h2 id="简单运算"><a href="#简单运算" class="headerlink" title="简单运算"></a>简单运算</h2><p>拉丁字母、阿拉伯数字和 + - * / = 运算符均可以直接输入获得，命令<code>\le</code>和<code>\ge</code>分别表示&lt;=和&gt;=，命令<code>\cdot</code>表示乘法的圆点，命令<code>\neq</code>表示不等号，命令<code>\equiv</code>表示恒等于，命令<code>\bmod</code>表示取模, 命令<code>\lvert \rvert</code>取绝对值.</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> x+2-3*4/6=4/y + x<span class="hljs-keyword">\cdot</span> y <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>x+2−3∗4/6=4/y+x⋅y \<br>x\le{y} \quad q\ge{p}<br>$$</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> 0 <span class="hljs-keyword">\neq</span> 1 <span class="hljs-keyword">\quad</span> x <span class="hljs-keyword">\equiv</span> x <span class="hljs-keyword">\quad</span> 1 = 9 <span class="hljs-keyword">\bmod</span> 2 <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>0 \neq 1 \quad x \equiv x \quad 1 = \lvert9\rvert \bmod{2}<br>$$</p><h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>语法_表示下标、^表示上标，但上下标内容不止一个字符时，需用大括号括起来。单引号’表示求导</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> a<span class="hljs-built_in">_</span>&#123;ij&#125;<span class="hljs-built_in">^</span>&#123;2&#125; + b<span class="hljs-built_in">^</span>3<span class="hljs-built_in">_</span>&#123;2&#125;=x<span class="hljs-built_in">^</span>&#123;t&#125; + y&#x27; + x&#x27;&#x27;<span class="hljs-built_in">_</span>&#123;12&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>a_{ij}^{2} + b^3_{2}=x^{t} + y’ + x’’_{12}<br>$$</p><h2 id="根号、分式"><a href="#根号、分式" class="headerlink" title="根号、分式"></a>根号、分式</h2><p>命令：<code>\sqrt</code>表示平方根，<code>\sqrt[n]</code>表示n次方根，<code>\frac</code>表示分式</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\sqrt</span>&#123;x&#125; + <span class="hljs-keyword">\sqrt</span>&#123;x<span class="hljs-built_in">^</span>&#123;2&#125;+<span class="hljs-keyword">\sqrt</span>&#123;y&#125;&#125; = <span class="hljs-keyword">\sqrt</span>[3]&#123;k<span class="hljs-built_in">_</span>&#123;i&#125;&#125; - <span class="hljs-keyword">\frac</span>&#123;x&#125;&#123;m&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\sqrt{x} + \sqrt{x^{2}+\sqrt{y}} = \sqrt[3]{k_{i}} - \frac{x}{m}<br>$$</p><h2 id="上下标记"><a href="#上下标记" class="headerlink" title="上下标记"></a>上下标记</h2><p>命令：<code>\overline, \underline</code> 分别在表达式上、下方画出水平线</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\overline</span>&#123;x+y&#125; <span class="hljs-keyword">\qquad</span> <span class="hljs-keyword">\underline</span>&#123;a+b&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\overline{x+y} \qquad \underline{a+b}<br>$$</p><p>命令：<code>\overbrace, \underbrace</code> 分别在表达式上、下方给出一个水平的大括号</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\overbrace</span>&#123;1+2+<span class="hljs-keyword">\cdots</span>+n&#125;<span class="hljs-built_in">^</span>&#123;n个&#125; <span class="hljs-keyword">\qquad</span> <span class="hljs-keyword">\underbrace</span>&#123;a+b+<span class="hljs-keyword">\cdots</span>+z&#125;<span class="hljs-built_in">_</span>&#123;26&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\overbrace{1+2+\cdots+n}^{n个} \qquad \underbrace{a+b+\cdots+z}_{26}<br>$$</p><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>命令：<code>\vec</code>表示向量，<code>\overrightarrow</code>表示箭头向右的向量，<code>\overleftarrow</code>表示箭头向左的向量</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\vec</span>&#123;a&#125; + <span class="hljs-keyword">\overrightarrow</span>&#123;AB&#125; + <span class="hljs-keyword">\overleftarrow</span>&#123;DE&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\vec{a} + \overrightarrow{AB} + \overleftarrow{DE}<br>$$</p><h2 id="积分、极限、求和、乘积"><a href="#积分、极限、求和、乘积" class="headerlink" title="积分、极限、求和、乘积"></a>积分、极限、求和、乘积</h2><p>命令：\int表示积分，\lim表示极限， \sum表示求和，\prod表示乘积，^、_表示上、下限</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span>  <span class="hljs-keyword">\lim</span><span class="hljs-built_in">_</span>&#123;x <span class="hljs-keyword">\to</span> <span class="hljs-keyword">\infty</span>&#125; x<span class="hljs-built_in">^</span>2<span class="hljs-built_in">_</span>&#123;22&#125; - <span class="hljs-keyword">\int</span><span class="hljs-built_in">_</span>&#123;1&#125;<span class="hljs-built_in">^</span>&#123;5&#125;x<span class="hljs-keyword">\mathrm</span>&#123;d&#125;x + <span class="hljs-keyword">\sum</span><span class="hljs-built_in">_</span>&#123;n=1&#125;<span class="hljs-built_in">^</span>&#123;20&#125; n<span class="hljs-built_in">^</span>&#123;2&#125; = <span class="hljs-keyword">\prod</span><span class="hljs-built_in">_</span>&#123;j=1&#125;<span class="hljs-built_in">^</span>&#123;3&#125; y<span class="hljs-built_in">_</span>&#123;j&#125;  + <span class="hljs-keyword">\lim</span><span class="hljs-built_in">_</span>&#123;x <span class="hljs-keyword">\to</span> -2&#125; <span class="hljs-keyword">\frac</span>&#123;x-2&#125;&#123;x&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\lim_{x \to \infty} x^2_{22} - \int_{1}^{5}x\mathrm{d}x + \sum_{n=1}^{20} n^{2} = \prod_{j=1}^{3} y_{j}  + \lim_{x \to -2} \frac{x-2}{x}<br>$$</p><h2 id="三圆点"><a href="#三圆点" class="headerlink" title="三圆点"></a>三圆点</h2><p>命令：\ldots点位于基线上，\cdots点设置为居中，\vdots使其垂直，\ddots对角线排列</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> x<span class="hljs-built_in">_</span>&#123;1&#125;,x<span class="hljs-built_in">_</span>&#123;2&#125;,<span class="hljs-keyword">\ldots</span>,x<span class="hljs-built_in">_</span>&#123;5&#125;  <span class="hljs-keyword">\quad</span> x<span class="hljs-built_in">_</span>&#123;1&#125; + x<span class="hljs-built_in">_</span>&#123;2&#125; + <span class="hljs-keyword">\cdots</span> + x<span class="hljs-built_in">_</span>&#123;n&#125; <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>x_{1},x_{2},\ldots,x_{5}  \quad x_{1} + x_{2} + \cdots + x_{n}<br>$$</p><h2 id="重音符号"><a href="#重音符号" class="headerlink" title="重音符号"></a>重音符号</h2><p>常用命令如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span> <span class="hljs-keyword">\hat</span>&#123;x&#125; <span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\hat{x}<br>$$</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span> <span class="hljs-keyword">\bar</span>&#123;x&#125; <span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\bar{x}<br>$$</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span> <span class="hljs-keyword">\tilde</span>&#123;x&#125; <span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\tilde{x}<br>$$</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p>其采用矩阵环境实现矩阵排列，常用的矩阵环境有matrix、bmatrix、vmatrix、pmatrix，其区别为在于外面的括号不同：</p><p><img src="https://pic1.zhimg.com/v2-684e48900e810dff360c23b4ffe99680_r.jpg" alt="img"></p><p>下列代码中，&amp;用于分隔列，\用于分隔行</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br>1 <span class="hljs-built_in">&amp;</span> 2 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-keyword">\\</span><br>67 <span class="hljs-built_in">&amp;</span> 95 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\vdots</span>  <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\ddots</span> <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\begin{matrix}<br>1 &amp; 2 &amp; \cdots \<br>67 &amp; 95 &amp; \cdots \<br>\vdots  &amp; \vdots &amp; \ddots \<br>\end{matrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 2 &amp; \cdots \<br>67 &amp; 95 &amp; \cdots \<br>\vdots  &amp; \vdots &amp; \ddots \<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{vmatrix}<br>1 &amp; 2 &amp; \cdots \<br>67 &amp; 95 &amp; \cdots \<br>\vdots  &amp; \vdots &amp; \ddots \<br>\end{vmatrix}<br>$$</p><p>$$<br>\begin{pmatrix}<br>1 &amp; 2 &amp; \cdots \<br>67 &amp; 95 &amp; \cdots \<br>\vdots  &amp; \vdots &amp; \ddots \<br>\end{pmatrix}<br>$$</p><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><p>希腊字母无法直接通过美式键盘输入获得。在LaTeX中通过反斜杠\加上其字母读音实现，将读音首字母大写即可输入其大写形式，详见下表</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span> <span class="hljs-keyword">\alpha</span><span class="hljs-built_in">^</span>&#123;2&#125; + <span class="hljs-keyword">\beta</span> = <span class="hljs-keyword">\Theta</span>  <span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\alpha^{2} + \beta = \theta<br>$$</p><p><img src="https://pic1.zhimg.com/v2-da3e717cf670582fbfbdddee33073524_r.jpg" alt="img"></p><h2 id="多行公式"><a href="#多行公式" class="headerlink" title="多行公式"></a>多行公式</h2><h2 id="公式组合"><a href="#公式组合" class="headerlink" title="公式组合"></a>公式组合</h2><p>通过cases环境实现公式的组合，&amp;分隔公式和条件，还可以通过\limits来让x→0位于lim的正下方而非默认在lim符号的右下方显示</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span>D(x) = <span class="hljs-keyword">\begin</span>&#123;cases&#125;<br><span class="hljs-keyword">\lim</span><span class="hljs-keyword">\limits</span><span class="hljs-built_in">_</span>&#123;x <span class="hljs-keyword">\to</span> 0&#125; <span class="hljs-keyword">\frac</span>&#123;a<span class="hljs-built_in">^</span>x&#125;&#123;b+c&#125;, <span class="hljs-built_in">&amp;</span> x&lt;3 <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\pi</span>, <span class="hljs-built_in">&amp;</span> x=3 <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\int</span><span class="hljs-built_in">_</span>a<span class="hljs-built_in">^</span>&#123;3b&#125;x<span class="hljs-built_in">_</span>&#123;ij&#125;+e<span class="hljs-built_in">^</span>2 <span class="hljs-keyword">\mathrm</span>&#123;d&#125;x,<span class="hljs-built_in">&amp;</span> x&gt;3 <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\end</span>&#123;cases&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>D(x) = \begin{cases}<br>\lim\limits_{x \to 0} \frac{a^x}{b+c}, &amp; x&lt;3 \<br>\pi, &amp; x=3 \<br>\int_a^{3b}x_{ij}+e^2 \mathrm{d}x,&amp; x&gt;3 \<br>\end{cases}<br>$$</p><h2 id="拆分单个公式"><a href="#拆分单个公式" class="headerlink" title="拆分单个公式"></a>拆分单个公式</h2><p>通过split环境实现公式拆分</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\begin</span>&#123;split&#125;<br><span class="hljs-keyword">\cos</span> 2x <span class="hljs-built_in">&amp;</span>= <span class="hljs-keyword">\cos</span><span class="hljs-built_in">^</span>2x - <span class="hljs-keyword">\sin</span><span class="hljs-built_in">^</span>2x <span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span>=2<span class="hljs-keyword">\cos</span><span class="hljs-built_in">^</span>2x-1<br><span class="hljs-keyword">\end</span>&#123;split&#125;<span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><p>$$<br>\begin{split}<br>\cos 2x &amp;= \cos^2x - \sin^2x \<br>&amp;=2\cos^2x-1<br>\end{split}<br>$$</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="上标、下标及积分等"><a href="#上标、下标及积分等" class="headerlink" title="上标、下标及积分等"></a>上标、下标及积分等</h3><table><thead><tr><th align="left">LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td align="left"><code>a^2</code></td><td>a2</td><td>上标</td></tr><tr><td align="left"><code>a_2</code></td><td>a2</td><td>下标</td></tr><tr><td align="left"><code>a^&#123;2+2&#125;</code></td><td>a2+2</td><td>组合</td></tr><tr><td align="left"><code>x_2^3</code></td><td>x23</td><td>结合上下标</td></tr><tr><td align="left"><code>&#123;&#125;_1^2\!X_3^4</code></td><td>12X34</td><td>前置上下标</td></tr><tr><td align="left"><code>\bigcap_1^&#123;n&#125; p</code></td><td>⋂1np</td><td>交集</td></tr><tr><td align="left"><code>\bigcup_1^&#123;k&#125; p</code></td><td>⋃1kp</td><td>并集</td></tr><tr><td align="left"><code>x&#39;</code></td><td>x′</td><td>导数</td></tr><tr><td align="left"><code>\dot&#123;x&#125;</code></td><td>x˙</td><td>导数点</td></tr><tr><td align="left"><code>\ddot&#123;y&#125;</code></td><td>y¨</td><td></td></tr><tr><td align="left"><code>\vec&#123;c&#125;</code></td><td>c→</td><td>向量</td></tr><tr><td align="left"><code>\overleftarrow&#123;a b&#125;</code></td><td>ab←</td><td></td></tr><tr><td align="left"><code>\overrightarrow&#123;c d&#125;</code></td><td>cd→</td><td></td></tr><tr><td align="left"><code>\widehat&#123;e f g&#125;</code></td><td>efg^</td><td></td></tr><tr><td align="left"><code>\overset&#123;\frown&#125; &#123;AB&#125;</code></td><td>AB⌢</td><td>上弧</td></tr><tr><td align="left"><code>\overline&#123;h i j&#125;</code></td><td>hij¯</td><td>上划线</td></tr><tr><td align="left"><code>\underline&#123;k l m&#125;</code></td><td>klm_</td><td>下划线</td></tr><tr><td align="left"><code>\overbrace&#123;1+2+\cdots+100&#125;</code></td><td>1+2+⋯+100⏞</td><td>上括号</td></tr><tr><td align="left"><code>\underbrace&#123;a+b+\cdots+z&#125;</code></td><td>a+b+⋯+z⏟</td><td>下括号</td></tr><tr><td align="left"><code>\sum_&#123;k=1&#125;^N k^2</code></td><td>∑k=1Nk2</td><td>求和</td></tr><tr><td align="left"><code>\prod_&#123;i=1&#125;^N x_i</code></td><td>∏i=1Nxi</td><td>求积</td></tr><tr><td align="left"><code>\coprod_&#123;i=1&#125;^N x_i</code></td><td>∐i=1Nxi</td><td>上积</td></tr><tr><td align="left"><code>\lim_&#123;n \to \infty&#125;x_n</code></td><td>limn→∞xn</td><td>极限</td></tr><tr><td align="left"><code>\int_&#123;-N&#125;^&#123;N&#125; e^x\, dx</code></td><td>∫−NNexdx</td><td>积分</td></tr><tr><td align="left"><code>\iint_&#123;D&#125;^&#123;W&#125; \, dx\,dy</code></td><td>∬DWdxdy</td><td>二重积分</td></tr><tr><td align="left"><code>\iiint_&#123;E&#125;^&#123;V&#125; \, dx\,dy\,dz</code></td><td>∭EVdxdydz</td><td>三重积分</td></tr><tr><td align="left"><code>\oint_&#123;C&#125; x^3\, dx + 4y^2\, dy</code></td><td>∮Cx3dx+4y2dy</td><td>曲线积分</td></tr></tbody></table><h3 id="根号"><a href="#根号" class="headerlink" title="根号"></a>根号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\sqrt&#123;3&#125;</code></td><td>3</td><td>平方根</td></tr><tr><td><code>\sqrt[n]&#123;3&#125;</code></td><td>3n</td><td>n 次方根</td></tr></tbody></table><h3 id="关系符号"><a href="#关系符号" class="headerlink" title="关系符号"></a>关系符号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\pm</code></td><td>±</td><td>加减</td></tr><tr><td><code>\times</code></td><td>×</td><td>乘</td></tr><tr><td><code>\div</code></td><td>÷</td><td>除</td></tr><tr><td><code>\neq</code></td><td>≠</td><td>不等于</td></tr><tr><td><code>\approx</code></td><td>≈</td><td>约等于</td></tr><tr><td><code>\equiv</code></td><td>≡</td><td>恒等于</td></tr><tr><td><code>\not\equiv</code></td><td>≢</td><td>不恒等于</td></tr><tr><td><code>\geq</code></td><td>≥</td><td>大于等于</td></tr><tr><td><code>\gg</code></td><td>≫</td><td></td></tr><tr><td><code>\leq</code></td><td>≤</td><td>小于等于</td></tr><tr><td><code>\ll</code></td><td>≪</td><td></td></tr><tr><td><code>\sim</code></td><td>∼</td><td>相似</td></tr><tr><td><code>\simeq</code></td><td>≃</td><td></td></tr><tr><td><code>\cong</code></td><td>≅</td><td></td></tr><tr><td><code>\propto</code></td><td>∝</td><td>正比于</td></tr><tr><td><code>\perp</code></td><td>⊥</td><td>垂直</td></tr><tr><td><code>\mbox&#123;or&#125;</code></td><td>or</td><td></td></tr></tbody></table><h3 id="几何符号"><a href="#几何符号" class="headerlink" title="几何符号"></a>几何符号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\Box</code></td><td>◻</td><td>正方形</td></tr><tr><td><code>\Diamond</code></td><td>◊</td><td>菱形</td></tr><tr><td><code>\triangle</code></td><td>△</td><td>三角形</td></tr><tr><td><code>\angle</code></td><td>∠</td><td>角</td></tr><tr><td><code>\perp</code></td><td>⊥</td><td>垂直</td></tr><tr><td><code>\mid</code></td><td>∣</td><td></td></tr><tr><td><code>\nmid</code></td><td>∤</td><td></td></tr><tr><td><code>|</code></td><td>∥</td><td></td></tr><tr><td><code>45^\circ</code></td><td>45∘</td><td>角度</td></tr></tbody></table><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\sin\theta</code></td><td>sin⁡θ</td><td><code>\min L</code></td><td>minL</td></tr><tr><td><code>\cos\theta</code></td><td>cos⁡θ</td><td><code>\inf s</code></td><td>infs</td></tr><tr><td><code>\tan\theta</code></td><td>tan⁡θ</td><td><code>\sup t</code></td><td>supt</td></tr><tr><td><code>\cot</code></td><td>cot</td><td><code>\exp\!t</code></td><td>expt</td></tr><tr><td><code>\sec</code></td><td>sec</td><td><code>\ln X</code></td><td>ln⁡X</td></tr><tr><td><code>\csc</code></td><td>csc</td><td><code>\lg X</code></td><td>lg⁡X</td></tr><tr><td><code>\arcsin\frac&#123;L&#125;&#123;r&#125;</code></td><td>arcsin⁡Lr</td><td><code>\log X</code></td><td>log⁡X</td></tr><tr><td><code>\arccos\frac&#123;T&#125;&#123;r&#125;</code></td><td>arccos⁡Tr</td><td><code>f \ker g</code></td><td>fker⁡g</td></tr><tr><td><code>\arctan\frac&#123;L&#125;&#123;T&#125;</code></td><td>arctan⁡LT</td><td><code>\log_&#123;10&#125;</code></td><td>log10</td></tr><tr><td><code>\sinh g</code></td><td>sinh⁡g</td><td><code>\log_\alpha X</code></td><td>logα⁡X</td></tr><tr><td><code>\cosh h</code></td><td>cosh⁡h</td><td><code>\deg x</code></td><td>deg⁡x</td></tr><tr><td><code>\tanh i</code></td><td>tanh⁡i</td><td><code>\arg x</code></td><td>arg⁡x</td></tr><tr><td><code>\operatorname&#123;sh&#125;j</code></td><td>sh⁡j</td><td><code>\dim x</code></td><td>dim⁡x</td></tr><tr><td><code>\max H</code></td><td>maxH</td><td><code>\lim_&#123;t\to n&#125;T</code></td><td>limt→nT</td></tr></tbody></table><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\forall</code></td><td>∀</td><td><code>\exists</code></td><td>∃</td></tr><tr><td><code>\in</code></td><td>∈</td><td><code>\ni</code></td><td>∋</td></tr><tr><td><code>\subset</code></td><td>⊂</td><td><code>\subseteq</code></td><td>⊆</td></tr><tr><td><code>\supset</code></td><td>⊃</td><td><code>\supseteq</code></td><td>⊇</td></tr><tr><td><code>\sqsupset</code></td><td>⊐</td><td><code>\sqsupseteq</code></td><td>⊒</td></tr><tr><td><code>\cup</code></td><td>∪</td><td><code>\bigcup</code></td><td>⋃</td></tr><tr><td><code>\sqcup</code></td><td>⊔</td><td><code>\bigsqcup</code></td><td>⨆</td></tr><tr><td><code>\cap</code></td><td>∩</td><td><code>\bigcap</code></td><td>⋂</td></tr><tr><td><code>\sqsubset</code></td><td>⊏</td><td><code>\sqsubseteq</code></td><td>⊑</td></tr><tr><td><code>\varnothing</code></td><td>∅</td><td><code>\biguplus</code></td><td>⨄</td></tr><tr><td><code>\emptyset</code></td><td>∅</td><td><code>\sqcap</code></td><td>⊓</td></tr><tr><td><code>\notin</code></td><td>∉</td><td><code>\setminus</code></td><td>∖</td></tr></tbody></table><h3 id="逻辑与箭头"><a href="#逻辑与箭头" class="headerlink" title="逻辑与箭头"></a>逻辑与箭头</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\And</code></td><td>&amp;</td><td><code>\land</code></td><td>∧</td></tr><tr><td><code>\bar&#123;q&#125;</code></td><td>q¯</td><td><code>\lor</code></td><td>∨</td></tr><tr><td><code>\lnot</code></td><td>¬</td><td><code>\neg q</code></td><td>¬q</td></tr><tr><td><code>\wedge</code></td><td>∧</td><td><code>\bigwedge</code></td><td>⋀</td></tr><tr><td><code>\vee</code></td><td>∨</td><td><code>\bigvee</code></td><td>⋁</td></tr><tr><td><code>\setminus</code></td><td>∖</td><td><code>\smallsetminus</code></td><td>∖</td></tr><tr><td><code>\leftarrow</code></td><td>←</td><td><code>\gets</code></td><td>←</td></tr><tr><td><code>\to</code></td><td>→</td><td><code>\rightarrow</code></td><td>→</td></tr><tr><td><code>\leftrightarrow</code></td><td>↔</td><td><code>\longleftarrow</code></td><td>⟵</td></tr><tr><td><code>\longrightarrow</code></td><td>⟶</td><td><code>\mapsto</code></td><td>↦</td></tr><tr><td><code>\longmapsto</code></td><td>⟼</td><td><code>\hookrightarrow</code></td><td>↪</td></tr><tr><td><code>\hookleftarrow</code></td><td>↩</td><td><code>\nearrow</code></td><td>↗</td></tr><tr><td><code>\searrow</code></td><td>↘</td><td><code>\swarrow</code></td><td>↙</td></tr><tr><td><code>\nwarrow</code></td><td>↖</td><td><code>\uparrow</code></td><td>↑</td></tr><tr><td><code>\downarrow</code></td><td>↓</td><td><code>\updownarrow</code></td><td>↕</td></tr><tr><td><code>\Leftarrow</code></td><td>⇐</td><td><code>\Rightarrow</code></td><td>⇒</td></tr><tr><td><code>\Leftrightarrow</code></td><td>⇔</td><td><code>\Longleftarrow</code></td><td>⟸</td></tr><tr><td><code>\Longrightarrow</code></td><td>⟹</td><td><code>\Longleftrightarrow</code></td><td>⟺</td></tr></tbody></table><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\left ( \frac&#123;a&#125;&#123;b&#125; \right )</code></td><td>(ab)</td><td>小括号</td></tr><tr><td><code>\left[ \frac&#123;a&#125;&#123;b&#125; \right]</code></td><td>[ab]</td><td>中括号</td></tr><tr><td><code>\left \langle \frac&#123;a&#125;&#123;b&#125; \right \rangle</code></td><td>⟨ab⟩</td><td>尖括号</td></tr><tr><td><code>\left\&#123; \frac&#123;a&#125;&#123;b&#125; \right\&#125;</code></td><td>{ab}</td><td>大括号</td></tr><tr><td><code>\overbrace&#123; 1+2+\cdots+100 &#125;</code></td><td>1+2+⋯+100⏞</td><td>上括号</td></tr><tr><td><code>\underbrace&#123; a+b+\cdots+z &#125;</code></td><td>a+b+⋯+z⏟</td><td>下括号</td></tr></tbody></table><h3 id="分数、矩阵、多行列式"><a href="#分数、矩阵、多行列式" class="headerlink" title="分数、矩阵、多行列式"></a>分数、矩阵、多行列式</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>\frac&#123;1&#125;&#123;2&#125;=0.5</code></td><td>12=0.5</td><td>分数</td></tr><tr><td><code>\tfrac&#123;1&#125;&#123;2&#125; = 0.5</code></td><td>12=0.5</td><td>小型分数</td></tr><tr><td><code>\dfrac&#123;k&#125;&#123;k-1&#125; = 0.5</code></td><td>kk−1=0.5</td><td>大型分数</td></tr><tr><td><code>\dfrac&#123; \tfrac&#123;1&#125;&#123;2&#125;[1-(\tfrac&#123;1&#125;&#123;2&#125;)^n] &#125;&#123; 1-\tfrac&#123;1&#125;&#123;2&#125; &#125; = s_n</code></td><td>12[1−(12)n]1−12=sn</td><td>大小型分数嵌套</td></tr><tr><td><code>\cfrac&#123;2&#125;&#123; c + \cfrac&#123;2&#125;&#123; d + \cfrac&#123;1&#125;&#123;2&#125; &#125; &#125; = a \qquad \dfrac&#123;2&#125;&#123; c + \dfrac&#123;2&#125;&#123; d + \dfrac&#123;1&#125;&#123;2&#125; &#125; &#125; = a</code></td><td>2c+2d+12=a2c+2d+12=a</td><td>连续分数</td></tr><tr><td><code>\binom&#123;n&#125;&#123;k&#125;</code></td><td>(nk)</td><td>二项式分数</td></tr><tr><td><code>\tbinom&#123;n&#125;&#123;k&#125;</code></td><td>(nk)</td><td>小型二项式系数</td></tr><tr><td><code>\dbinom&#123;n&#125;&#123;k&#125;</code></td><td>(nk)</td><td>大型二项式系数</td></tr><tr><td><code>\begin&#123;matrix&#125; x &amp; y \\ z &amp; v \end&#123;matrix&#125;</code></td><td>xyzv</td><td>矩阵</td></tr><tr><td><code>\begin&#123;vmatrix&#125; x &amp; y \\ z &amp; v \end&#123;vmatrix&#125;</code></td><td>|xyzv|</td><td></td></tr><tr><td><code>\begin&#123;Vmatrix&#125; x &amp; y \\ z &amp; v \end&#123;Vmatrix&#125;</code></td><td>∥xyzv∥</td><td></td></tr><tr><td><code>\begin&#123;bmatrix&#125; 0 &amp; \cdots &amp; 0 \\ \vdots &amp; \ddots &amp; \vdots \\ 0 &amp; \cdots &amp; 0 \end&#123;bmatrix&#125;</code></td><td>[0⋯0⋮⋱⋮0⋯0]</td><td></td></tr><tr><td><code>\begin&#123;Bmatrix&#125; x &amp; y \\ z &amp; v \end&#123;Bmatrix&#125;</code></td><td>{xyzv}</td><td></td></tr><tr><td><code>\begin&#123;pmatrix&#125; x &amp; y \\ z &amp; v \end&#123;pmatrix&#125;</code></td><td>(xyzv)</td><td></td></tr><tr><td><code>\bigl( \begin&#123;smallmatrix&#125; a&amp;b\\ c&amp;d \end&#123;smallmatrix&#125; \bigr)</code></td><td>(abcd)</td><td></td></tr><tr><td>`\begin{array}{</td><td>c</td><td>c</td></tr><tr><td><code>f(n) = \begin&#123;cases&#125; n/2, &amp; \mbox&#123;if &#125;n\mbox&#123; is even&#125; \\ 3n+1, &amp; \mbox&#123;if &#125;n\mbox&#123; is odd&#125; \end&#123;cases&#125;</code></td><td>f(n)={n/2,if n is even3n+1,if n is odd</td><td>条件定义</td></tr><tr><td><code>\begin&#123;cases&#125; 3x + 5y + z &amp;= 1 \\ 7x - 2y + 4z &amp;= 2 \\ -6x + 3y + 2z &amp;= 3 \end&#123;cases&#125;</code></td><td>{3x+5y+z=17x−2y+4z=2−6x+3y+2z=3</td><td>方程组</td></tr><tr><td><code>\begin&#123;align&#125; f(x) &amp; = (a+b)^2 \\ &amp; = a^2+2ab+b^2 \end&#123;align&#125;</code></td><td>f(x)=(a+b)2=a2+2ab+b2</td><td>多行公式</td></tr><tr><td><code>\begin&#123;alignat&#125;&#123;2&#125; f(x) &amp; = (a-b)^2 \\ &amp; = a^2-2ab+b^2 \end&#123;alignat&#125;</code></td><td>f(x)=(a−b)2=a2−2ab+b2</td><td></td></tr><tr><td><code>\begin&#123;array&#125;&#123;lcl&#125; z &amp; = &amp; a \\ f(x,y,z) &amp; = &amp; x + y + z \end&#123;array&#125;</code></td><td>z=af(x,y,z)=x+y+z</td><td>多行公式（左对齐）</td></tr><tr><td><code>\begin&#123;array&#125;&#123;lcr&#125; z &amp; = &amp; a \\ f(x,y,z) &amp; = &amp; x + y + z \end&#123;array&#125;</code></td><td>z=af(x,y,z)=x+y+z</td><td>多行公式（右对齐）</td></tr></tbody></table><h3 id="希腊字母-1"><a href="#希腊字母-1" class="headerlink" title="希腊字母"></a>希腊字母</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\Gamma</code></td><td>Γ</td><td><code>\Delta</code></td><td>Δ</td></tr><tr><td><code>\Theta</code></td><td>Θ</td><td><code>\Lambda</code></td><td>Λ</td></tr><tr><td><code>\Xi</code></td><td>Ξ</td><td><code>\Pi</code></td><td>Π</td></tr><tr><td><code>\Sigma</code></td><td>Σ</td><td><code>\Upsilon</code></td><td>Υ</td></tr><tr><td><code>\Phi</code></td><td>Φ</td><td><code>\Psi</code></td><td>Ψ</td></tr><tr><td><code>\Omega</code></td><td>Ω</td><td>``</td><td></td></tr><tr><td><code>\alpha</code></td><td>α</td><td><code>\beta</code></td><td>β</td></tr><tr><td><code>\gamma</code></td><td>γ</td><td><code>\delta</code></td><td>δ</td></tr><tr><td><code>\epsilon</code></td><td>ϵ</td><td><code>\zeta</code></td><td>ζ</td></tr><tr><td><code>\eta</code></td><td>η</td><td><code>\theta</code></td><td>θ</td></tr><tr><td><code>\iota</code></td><td>ι</td><td><code>\kappa</code></td><td>κ</td></tr><tr><td><code>\lambda</code></td><td>λ</td><td><code>\mu</code></td><td>μ</td></tr><tr><td><code>\nu</code></td><td>ν</td><td><code>\xi</code></td><td>ξ</td></tr><tr><td><code>\omicron</code></td><td>ο</td><td><code>\pi</code></td><td>π</td></tr><tr><td><code>\rho</code></td><td>ρ</td><td><code>\sigma</code></td><td>σ</td></tr><tr><td><code>\tau</code></td><td>τ</td><td>``</td><td></td></tr><tr><td><code>\upsilon</code></td><td>υ</td><td><code>\phi</code></td><td>ϕ</td></tr><tr><td><code>\chi</code></td><td>χ</td><td><code>\psi</code></td><td>ψ</td></tr><tr><td><code>\omega</code></td><td>ω</td><td>``</td><td></td></tr><tr><td><code>\varepsilon</code></td><td>ε</td><td><code>\digamma</code></td><td>ϝ</td></tr><tr><td><code>\vartheta</code></td><td>ϑ</td><td><code>\varkappa</code></td><td>ϰ</td></tr><tr><td><code>\varpi</code></td><td>ϖ</td><td><code>\varrho</code></td><td>ϱ</td></tr><tr><td><code>\varsigma</code></td><td>ς</td><td><code>\varphi</code></td><td>φ</td></tr></tbody></table><h3 id="声调"><a href="#声调" class="headerlink" title="声调"></a>声调</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\acute&#123;a&#125;</code></td><td>a´</td><td><code>\grave&#123;a&#125;</code></td><td>a`</td></tr><tr><td><code>\hat&#123;a&#125;</code></td><td>a^</td><td><code>\tilde&#123;a&#125;</code></td><td>a~</td></tr><tr><td><code>\breve&#123;a&#125;</code></td><td>a˘</td><td>``</td><td></td></tr><tr><td><code>\check&#123;a&#125;</code></td><td>aˇ</td><td><code>\bar&#123;a&#125;</code></td><td>a¯</td></tr><tr><td><code>\ddot&#123;a&#125;</code></td><td>a¨</td><td><code>\dot&#123;a&#125;</code></td><td>a˙</td></tr></tbody></table><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><table><thead><tr><th>LaTeX</th><th>符号</th><th>LaTeX</th><th>符号</th></tr></thead><tbody><tr><td><code>\And</code></td><td>&amp;</td><td><code>\eth</code></td><td>ð</td></tr><tr><td><code>\S</code></td><td>§§</td><td>``</td><td></td></tr><tr><td><code>\%</code></td><td>%</td><td><code>\dagger</code></td><td>†</td></tr><tr><td><code>\ddagger</code></td><td>‡</td><td><code>\ldots</code></td><td>…</td></tr><tr><td><code>\cdots</code></td><td>⋯</td><td><code>\colon</code></td><td>:</td></tr><tr><td><code>\smile</code></td><td>⌣</td><td><code>\frown</code></td><td>⌢</td></tr><tr><td><code>\wr</code></td><td>≀</td><td><code>\triangleleft</code></td><td>◃</td></tr><tr><td><code>\triangleright</code></td><td>▹</td><td><code>\infty</code></td><td>∞</td></tr><tr><td><code>\bot</code></td><td>⊥</td><td><code>\top</code></td><td>⊤</td></tr><tr><td><code>\vdash</code></td><td>⊢</td><td><code>\vDash</code></td><td>⊨</td></tr><tr><td><code>\Vdash</code></td><td>⊩</td><td><code>\models</code></td><td>⊨</td></tr><tr><td><code>\lVert</code></td><td>‖</td><td><code>\rVert</code></td><td>‖</td></tr><tr><td><code>\imath</code></td><td>ı</td><td><code>\hbar</code></td><td>ℏ</td></tr><tr><td><code>\ell</code></td><td>ℓ</td><td><code>\mho</code></td><td>℧</td></tr><tr><td><code>\Finv</code></td><td>Ⅎ</td><td><code>\Re</code></td><td>ℜ</td></tr><tr><td><code>\Im</code></td><td>ℑ</td><td><code>\wp</code></td><td>℘</td></tr><tr><td><code>\complement</code></td><td>∁</td><td>``</td><td></td></tr><tr><td><code>\diamondsuit</code></td><td>♢</td><td><code>\heartsuit</code></td><td>♡</td></tr><tr><td><code>\clubsuit</code></td><td>♣</td><td><code>\spadesuit</code></td><td>♠</td></tr><tr><td><code>\Game</code></td><td>⅁</td><td><code>\flat</code></td><td>♭</td></tr><tr><td><code>\natural</code></td><td>♮</td><td><code>\sharp</code></td><td>♯</td></tr></tbody></table><p><a href="https://meta.wikimedia.org/w/index.php?title=Help:Displaying_a_formula/zh&uselang=zh">更多 LaTeX 数学符号</a></p><h2 id="示例数学方程"><a href="#示例数学方程" class="headerlink" title="示例数学方程"></a>示例数学方程</h2><p>\1. 有部分数学符号可以直接从键盘上输入，例如 + - = / ( ) 等等。形成一个有效公式，需要相关的数学符号组合成对应的命令。</p><table><thead><tr><th><code>\forall x \in X, \quad \exists y \leq \epsilon</code></th><th>∀x∈X,∃y≤ϵ</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>\2. 运算符是一个用单词组成的函数，例如三角函数（正弦，余弦，正切），对数和指数（log，exp），极限（lim）以及迹线和行列式（tr，det）。</p><table><thead><tr><th><code>\cos (2\theta) = \cos^2 \theta - \sin^2 \theta</code></th><th>cos⁡(2θ)=cos2⁡θ−sin2⁡θ</th></tr></thead><tbody><tr><td><code>\lim\limits_&#123;x \to \infty&#125; \exp(-x) = 0</code></td><td>limx→∞exp⁡(−x)=0</td></tr></tbody></table><p>\3. 幂函数和指数函数在公式命令中，通过上标和下标符号来表示。如果上标或者下标内容包含多个字符，需要使用大括号来将其区分。</p><table><thead><tr><th><code>k_&#123;n+1&#125; = n^2 + k_n^2 - k_&#123;n-1&#125;</code></th><th>kn+1=n2+kn2−kn−1</th></tr></thead><tbody><tr><td>`f(n) = n^5 + 4n^2 + 2</td><td>_{n=17}`</td></tr></tbody></table><p>\4. 通过使用 \frac{numerator}{denominator} 命令可以创建分数。同时可以使用 \binom 来显示二项式系数。</p><table><thead><tr><th><code>\frac&#123;n!&#125;&#123;k!(n-k)!&#125; = \binom&#123;n&#125;&#123;k&#125;</code></th><th>n!k!(n−k)!=(nk)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>\5. 连续分数可以使用 \cfrac 命令。</p><table><thead><tr><th><code>\begin&#123;equation&#125; x = a_0 + \cfrac&#123;1&#125;&#123;a_1 + \cfrac&#123;1&#125;&#123;a_2 + \cfrac&#123;1&#125;&#123;a_3 + \cfrac&#123;1&#125;&#123;a_4&#125; &#125; &#125; &#125; \end&#123;equation&#125;</code></th><th>x=a0+1a1+1a2+1a3+1a4</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>\6. 通过使用 \sqrt 命令可以创建一个 n 次方根，你可以在中括号 [ ] 和 大括号 { } 中定义方程具体内容。</p><table><thead><tr><th><code>\sqrt[n]&#123;1+x+x^2+x^3+\dots+x^n&#125;</code></th><th>1+x+x2+x3+⋯+xnn</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>\7. 同情情况下，数学公式的表达会因为大小而不同，所以表达式周围的定界符应当相应变化。你可以使用\left, \right 和 \middle 命令来完成操作。</p><p>| <code>P\left(A=2\middle|\frac&#123;A^2&#125;&#123;B&#125;&gt;4\right)</code> | P(A=2|A2B&gt;4) |<br>| —————————————— | ————- |<br>| <code>\left.\frac&#123;x^3&#125;&#123;3&#125;\right|_0^1</code>           | x33|01       |</p><p>\8. 你可以通过矩阵环境来创建基础的矩阵公式：与其他类似表格结构的命令一样，通过双反斜杠创建新的行，&amp; 符号分割来创建列。</p><table><thead><tr><th><code>A_&#123;m,n&#125; = \begin&#123;pmatrix&#125; a_&#123;1,1&#125; &amp; a_&#123;1,2&#125; &amp; \cdots &amp; a_&#123;1,n&#125; \\ a_&#123;2,1&#125; &amp; a_&#123;2,2&#125; &amp; \cdots &amp; a_&#123;2,n&#125; \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ a_&#123;m,1&#125; &amp; a_&#123;m,2&#125; &amp; \cdots &amp; a_&#123;m,n&#125; \end&#123;pmatrix&#125;</code></th><th>Am,n=(a1,1a1,2⋯a1,na2,1a2,2⋯a2,n⋮⋮⋱⋮am,1am,2⋯am,n)</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Latex</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LatexEquation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA_Notes</title>
    <link href="/2022/10/225ffd722b96.html"/>
    <url>/2022/10/225ffd722b96.html</url>
    
    <content type="html"><![CDATA[<h1 id="FPGA-Notes"><a href="#FPGA-Notes" class="headerlink" title="FPGA_Notes"></a>FPGA_Notes</h1><h2 id="Verilog"><a href="#Verilog" class="headerlink" title="Verilog"></a>Verilog</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h4><ul><li>顺序块：<br><code>begin</code><br><code>end</code></li><li>并行块：<br><code>fork</code><br><code>join</code></li></ul><h4 id="多路分支语句"><a href="#多路分支语句" class="headerlink" title="多路分支语句"></a>多路分支语句</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">case</span>()<br>    condition1<br>    condition2<br>    <span class="hljs-keyword">endcase</span><br><span class="hljs-keyword">casez</span>(sel)<br>          <span class="hljs-number">4</span>&#x27;b???<span class="hljs-number">1</span>:     sout_t = p0 ;<br>          <span class="hljs-number">4</span>&#x27;b??<span class="hljs-number">1</span>?:     sout_t = p1 ;<br>          <span class="hljs-number">4</span>&#x27;b?<span class="hljs-number">1</span>??:     sout_t = p2 ;<br>          <span class="hljs-number">4&#x27;b1</span>???:     sout_t = p3 ;  <br>      <span class="hljs-keyword">default</span>:         sout_t = <span class="hljs-number">2&#x27;b0</span> ;<br><span class="hljs-keyword">endcase</span><br></code></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">while</span>()<br> <span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">for</span>(initial_assignment; condition ; step_assignment)  <br><span class="hljs-keyword">begin</span><br>  …<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">repeat</span>(num)<br> <span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">forever</span><br> <span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="模块例化"><a href="#模块例化" class="headerlink" title="模块例化"></a>模块例化</h4><ul><li>不带参数例化</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//output 端口 Co 悬空</span><br>full_adder1  u_adder0(<br>  <span class="hljs-variable">.Ai</span>     (a[<span class="hljs-number">0</span>]),<br>  <span class="hljs-variable">.Bi</span>     (b[<span class="hljs-number">0</span>]),<br>  <span class="hljs-variable">.Ci</span>     (c==<span class="hljs-number">1&#x27;b1</span> ? <span class="hljs-number">1&#x27;b0</span> : <span class="hljs-number">1&#x27;b1</span>),<br>  <span class="hljs-variable">.So</span>     (so_bit0),<br>  <span class="hljs-variable">.Co</span>     ());<br><br><span class="hljs-comment">//output 端口 Co 删除</span><br>full_adder1  u_adder0(<br>    <span class="hljs-variable">.Ai</span>     (a[<span class="hljs-number">0</span>]),<br>    <span class="hljs-variable">.Bi</span>     (b[<span class="hljs-number">0</span>]),<br>    <span class="hljs-variable">.Ci</span>     (c==<span class="hljs-number">1&#x27;b1</span> ? <span class="hljs-number">1&#x27;b0</span> : <span class="hljs-number">1&#x27;b1</span>),<br>    <span class="hljs-variable">.So</span>     (so_bit0));<br></code></pre></td></tr></table></figure><ul><li>带参数例化</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">//instantiation</span><br><span class="hljs-keyword">defparam</span>     u_ram_4x4<span class="hljs-variable">.MASK</span> = <span class="hljs-number">7</span> ;<br>ram_4x4    u_ram_4x4<br>    (<br>        <span class="hljs-variable">.CLK</span>    (clk),<br>        <span class="hljs-variable">.A</span>      (a[<span class="hljs-number">4</span>-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]),<br>        <span class="hljs-variable">.D</span>      (d),<br>        <span class="hljs-variable">.EN</span>     (en),<br>        <span class="hljs-variable">.WR</span>     (wr),    <span class="hljs-comment">//1 for write and 0 for read</span><br>        <span class="hljs-variable">.Q</span>      (q)    );<br></code></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>函数只能在模块中定义，位置任意，并在模块的任何地方引用，作用范围也局限于此模块。函数主要有以下几个特点：</p><ol><li>不含有任何延迟、时序或时序控制逻辑</li><li>至少有一个输入变量</li><li>只有一个返回值，且没有输出</li><li>不含有非阻塞赋值语句</li><li>函数可以调用其他函数，但是不能调用任务</li></ol><p>Verilog 函数声明格式如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">function</span> [range-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]     function_id ;<br>input_declaration ;<br> other_declaration ;<br>procedural_statement ;<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><p><strong>模块实例</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> endian_rvs<br>#(<span class="hljs-keyword">parameter</span> N = <span class="hljs-number">4</span>)<br>    (<br>        <span class="hljs-keyword">input</span>             en,     <span class="hljs-comment">//enable control</span><br>        <span class="hljs-keyword">input</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]     a ,<br>        <span class="hljs-keyword">output</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]    b<br>);<br>     <br>    <span class="hljs-keyword">reg</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]          b_temp ;<br>    <span class="hljs-keyword">always</span> @(*) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (en) <span class="hljs-keyword">begin</span><br>            b_temp =  data_rvs(a);<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            b_temp = <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> b = b_temp ;<br>     <br><span class="hljs-comment">//function entity</span><br>    <span class="hljs-keyword">function</span> [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]     data_rvs ;<br>        <span class="hljs-keyword">input</span>     [N-<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] data_in ;<br>        <span class="hljs-keyword">parameter</span>         MASK = <span class="hljs-number">32&#x27;h3</span> ;<br>        <span class="hljs-keyword">integer</span>           k ;<br>        <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>; k&lt;N; k=k+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>                data_rvs[N-k-<span class="hljs-number">1</span>]  = data_in[k] ;  <br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endfunction</span><br><span class="hljs-keyword">endmodule</span> <br></code></pre></td></tr></table></figure><h3 id="常数函数"><a href="#常数函数" class="headerlink" title="常数函数"></a>常数函数</h3><p>常数函数是指在仿真开始之前，在编译期间就计算出结果为常数的函数。常数函数不允许访问全局变量或者调用系统函数，但是可以调用另一个常数函数。</p><p>这种函数能够用来引用复杂的值，因此可用来代替常量。</p><p>例如下面一个常量函数，可以来计算模块中地址总线的宽度：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">parameter</span>    MEM_DEPTH = <span class="hljs-number">256</span> ;<br><span class="hljs-keyword">reg</span>  [logb2(MEM_DEPTH)-<span class="hljs-number">1</span>: <span class="hljs-number">0</span>] addr ; <span class="hljs-comment">//可得addr的宽度为8bit</span><br> <br>    <span class="hljs-keyword">function</span> <span class="hljs-keyword">integer</span>     logb2;<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">integer</span>     depth ;<br>        <span class="hljs-comment">//256为9bit，我们最终数据应该是8，所以需depth=2时提前停止循环</span><br>    <span class="hljs-keyword">for</span>(logb2=<span class="hljs-number">0</span>; depth&gt;<span class="hljs-number">1</span>; logb2=logb2+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>        depth = depth &gt;&gt; <span class="hljs-number">1</span> ;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><h3 id="automatic-函数"><a href="#automatic-函数" class="headerlink" title="automatic 函数"></a>automatic 函数</h3><p>在 Verilog 中，一般函数的局部变量是静态的，即函数的每次调用，函数的局部变量都会使用同一个存储空间。若某个函数在两个不同的地方同时并发的调用，那么两个函数调用行为同时对同一块地址进行操作，会导致不确定的函数结果。</p><p>Verilog 用关键字 automatic 来对函数进行说明，此类函数在调用时是可以自动分配新的内存空间的，也可以理解为是可递归的。因此，automatic 函数中声明的局部变量不能通过层次命名进行访问，但是 automatic 函数本身可以通过层次名进行调用。</p><p>下面用 automatic 函数，实现阶乘计算：</p><blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog">&gt;<span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>]      results3 = factorial(<span class="hljs-number">4</span>);<br>&gt;<span class="hljs-keyword">function</span> <span class="hljs-keyword">automatic</span> <span class="hljs-keyword">integer</span>    factorial ;<br>&gt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">integer</span>   data ;<br>&gt;<span class="hljs-keyword">integer</span>     i ;<br>&gt;<span class="hljs-keyword">begin</span><br>&gt;factorial = (data&gt;=<span class="hljs-number">2</span>)? data * factorial(data-<span class="hljs-number">1</span>) : <span class="hljs-number">1</span> ;<br>&gt;<span class="hljs-keyword">end</span><br>&gt;<span class="hljs-keyword">endfunction</span><span class="hljs-comment">// factorial</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><ul><li>$display<br>(类似于c的print,自动换行,运行时显示)</li><li>$write<br>(和display功能一样,不换行)</li><li>$monitor<br>(监视变量的变化，只要变则输出)</li><li>$strobe<br>(活动结束后显示)</li><li>$stop<br>(暂停仿真)</li><li>$finish<br>(结束仿真)</li><li>$time<br>(返回一个64位整数时间值)<br>$stime<br>(返回一个32位整数时间值)<br>$realtime<br>(返回-一个实数时间值)</li><li>( 1) Srandom和$random()<br>意义一样,都是产生32带符号整数随机数<br>( 2) $random%100<br>在-99到99之间产生随机数<br>(3) {Srandom}%100<br>采用位拼接符,在0到100之间产生随机数<br>(4) 如seed =10, Srandom(seed)<br>根据seed值产生随机数,而后seed值也会更新</li><li>（读取文件中的数据,内容必须为空格、换行、制表格、注释行、二进制或十六进制的数字）<br>$readmemb(“ &lt;数据文件名&gt;”, &lt;存贮器名&gt;);<br>$readmemb(“&lt;数据文件名&gt;”,&lt;存贮器名&gt;,&lt;起始地址&gt;);<br>Sreadmemb(“ &lt;数据文件名&gt;”, &lt;存贮器名&gt;,&lt;起始地址&gt;, &lt;结束地址&gt;);<br>$readmemh(“ &lt;数据文件名&gt;”, &lt;存贮器名&gt;);<br>$readmemh(“ &lt;数据文件名&gt;”,&lt;存则器名&gt;,&lt;起始地址&gt;);<br>$readmemh(“&lt;数据文件名&gt;”,&lt;存贮器名&gt;,&lt;起始地址&gt;, &lt;结束地址&gt;);</li></ul><h2 id="ModelSim"><a href="#ModelSim" class="headerlink" title="ModelSim"></a>ModelSim</h2><h2 id="分支主题-3"><a href="#分支主题-3" class="headerlink" title="分支主题 3"></a>分支主题 3</h2>]]></content>
    
    
    <categories>
      
      <category>FPGA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java_Exercise</title>
    <link href="/2022/09/22bd4c9923c0.html"/>
    <url>/2022/09/22bd4c9923c0.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java—Exercise"><a href="#Java—Exercise" class="headerlink" title="Java—Exercise"></a>Java—Exercise</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>定义一个数组类，编写成员函数实现以下功能：</p><ol><li><p>随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；</p></li><li><p>判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；</p></li><li><p>数组和函数Sum（）：计算数组和。</p></li><li><p>判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；</p></li><li><p>编写main函数，调用测试以上功能；</p></li></ol><h3 id="二、-运行结果"><a href="#二、-运行结果" class="headerlink" title="二、 运行结果"></a>二、 运行结果</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928183135033.png" alt="image-20220928183135033"></p><h3 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> task;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">array</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> [] x;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">RandomArray</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> max)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-built_in">this</span>.x[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(max);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">CheckOrder</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">int</span> [] temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-built_in">this</span>.x.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.x.length; i++)<br>        &#123;<br>            temp[i] = <span class="hljs-built_in">this</span>.x[i];<br>        &#125;<br>        Arrays.sort(temp);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.x.length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.x[i] != temp[i])<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Sum</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.x.length; i++)<br>        &#123;<br>            sum += <span class="hljs-built_in">this</span>.x[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">CheckKey</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.x.length; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.x[i] == key)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">array</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">array</span>();<br>        a.RandomArray(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>);<br>        System.out.println(<span class="hljs-string">&quot;打印随机产生的数组&quot;</span>);<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : a.x) &#123;<br>             System.out.print(x+<span class="hljs-string">&quot;\t&quot;</span>);<br>    &#125;<br>        System.out.println(<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;判断数组中是否有2?&quot;</span>);<br>        System.out.println(a.CheckKey(<span class="hljs-number">2</span>));<br>        System.out.println(<span class="hljs-string">&quot;判断数组是否升序?&quot;</span>);<br>        System.out.println(a.CheckOrder());<br>        System.out.println(<span class="hljs-string">&quot;打印数组求和的值&quot;</span>);<br>        System.out.print(a.Sum());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><h3 id="一、题目描述-1"><a href="#一、题目描述-1" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>编写程序，求圆柱体的体积<strong>CylinderVolume</strong>。</p><ol><li><p>设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；</p></li><li><p>设计一个圆柱体类Cylinder实现接口area。</p><ul><li><p>包含包含成员变量：高度，半径；</p></li><li><p>实现构造方法，对成员变量进行赋值；</p></li><li><p>实现圆柱体底面积成员方法area；</p></li><li><p> 实现计算圆柱体体积的成员方法volume；</p></li></ul></li><li><p>编写测试类计算圆柱体体积。</p></li></ol><h3 id="二、运行结果"><a href="#二、运行结果" class="headerlink" title="二、运行结果"></a>二、运行结果</h3><p><img src="https://img.gouka.la/i/2022/09/28/z0gkwr.webp"></p><h3 id="三、源代码-1"><a href="#三、源代码-1" class="headerlink" title="三、源代码"></a>三、源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> task;<br><span class="hljs-keyword">import</span> java.lang.Math.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cylinder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">area</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> height;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> radius;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">bottomArea</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Math.PI*Math.pow(<span class="hljs-built_in">this</span>.radius,<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cylinder</span><span class="hljs-params">(<span class="hljs-type">double</span> radius, <span class="hljs-type">double</span> height)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.radius = radius;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">volume</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> height*bottomArea();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">area</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-title function_">bottomArea</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cylindertest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入圆柱的半径和高度：&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> in.nextDouble();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> in.nextDouble();<br>        <span class="hljs-type">Cylinder</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cylinder</span>(r, h);<br>        System.out.println(<span class="hljs-string">&quot;圆柱的体积为:\n&quot;</span>+c.volume()+<span class="hljs-string">&quot;立方米&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><h3 id="一、题目描述-2"><a href="#一、题目描述-2" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><strong>按以下要求编写程序：</strong></p><ol><li> 定义一个父类Animal类</li></ol><p>​            属性：kind(种类)</p><p>​            方法：创建带参（kind为参数）构造方法</p><p>​            创建cry():void方法</p><ol start="2"><li>编写三个具体的子类Cat类、Dog类、Sheep类</li></ol><p>​            分别重写父类中的 cry() 方法，输出信息分别为</p><p>​            Cat类：小猫的叫声：喵喵喵~~~</p><p>​            Dog类：小狗的叫声：汪汪汪~~~</p><p>​            Sheep类：小羊的叫声：咩咩咩~~~</p><ol start="3"><li>编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：</li></ol><ul><li>每次随机产生一个0~2的正整数</li><li>若数值为 0，则生成一个 Cat 类的对象，存入数组</li><li>若数值为 1，则生成一个 Dog 类的对象，存入数组</li><li>若数值为 2，则生成一个 Sheep 类的对象，存入数组最后循环输出数组成员，并分别调用 cry() 方法。</li></ul><h3 id="二、运行结果-1"><a href="#二、运行结果-1" class="headerlink" title="二、运行结果"></a>二、运行结果</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928210706368.png" alt="image-20220928210706368"></p><h3 id="三、源代码-2"><a href="#三、源代码-2" class="headerlink" title="三、源代码"></a>三、源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> task;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> String kind;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span>&#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String kind)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.kind = kind;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;&#125;;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span><br>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String kind)</span><br>        &#123;<br>            <span class="hljs-built_in">super</span>(kind);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.kind+<span class="hljs-string">&quot;的叫声：喵喵喵~~~&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String kind)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(kind);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.kind+<span class="hljs-string">&quot;的叫声：汪汪汪~~~&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sheep</span><span class="hljs-params">(String kind)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(kind);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.kind+<span class="hljs-string">&quot;的叫声：咩咩咩~~~&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animaltest</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        <span class="hljs-type">int</span> []n = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>        Animal [] An = <span class="hljs-keyword">new</span>  <span class="hljs-title class_">Animal</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;An.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">switch</span> (j) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    An[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;Tom&quot;</span>+(n[<span class="hljs-number">0</span>]++));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    An[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;Jerry&quot;</span>+(n[<span class="hljs-number">1</span>]++));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    An[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span>(<span class="hljs-string">&quot;PeiQi&quot;</span>+(n[<span class="hljs-number">2</span>]++));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid number&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Animal temp : An )<br>        &#123;<br>            temp.cry();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​                                                                                                                                                <a href="https://alleyf.github.io/">文章已上传博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QuartusIIUsage</title>
    <link href="/2022/09/2ac99afbdd80.html"/>
    <url>/2022/09/2ac99afbdd80.html</url>
    
    <content type="html"><![CDATA[<h1 id="The-Usage-of-QuartusII-And-ModelSim"><a href="#The-Usage-of-QuartusII-And-ModelSim" class="headerlink" title="The Usage of QuartusII And ModelSim"></a>The Usage of QuartusII And ModelSim</h1><h2 id="习题3-1"><a href="#习题3-1" class="headerlink" title="习题3.1"></a>习题3.1</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>基于 Quartus Prime 软件，采用原理图设计方式用 D 触发器设计一个 2 分频电路；在此基础上， 设计一个 4 分频和 8 分频电路并进行仿真。（参考设计如图 3.67 所示）</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924165154538.png"></p><p>​                                                        图 3.67 2 分频电路</p><h3 id="电路原理图设计"><a href="#电路原理图设计" class="headerlink" title="电路原理图设计"></a>电路原理图设计</h3><h4 id="四分频原理图"><a href="#四分频原理图" class="headerlink" title="四分频原理图"></a>四分频原理图</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/TwoDivF.png" alt="TwoDivF"></p><h4 id="八分频原理图"><a href="#八分频原理图" class="headerlink" title="八分频原理图"></a>八分频原理图</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDivf.png" alt="EightDivf"></p><h3 id="ModelSim仿真结果"><a href="#ModelSim仿真结果" class="headerlink" title="ModelSim仿真结果"></a>ModelSim仿真结果</h3><h4 id="四分频波形图"><a href="#四分频波形图" class="headerlink" title="四分频波形图"></a>四分频波形图</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/FourDiv.png" alt="FourDiv"></p><h4 id="八分频波形图"><a href="#八分频波形图" class="headerlink" title="八分频波形图"></a>八分频波形图</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDiv.png" alt="EightDiv"></p><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>首先在QuartusII中绘出原理图，编译后然后生成testbench测试文件，将两者关联后，再次编译，然后联合ModelSim进行波形<u>门级仿真</u>，四分频电路由两个二分频电路<u>级联</u>得到，而八分频电路由三个二分频电路得到；观察波形仿真结果发现四分频和八分频分别将输入的矩形波进行了<u>四分频和八分频</u>，结果与理论一致，但是输出的不是随输入瞬时变化，而是有一小段<u>延时</u>，这是由于门级水平仿真下<u>各逻辑门存在一定的延时</u>导致的。</p><h2 id="习题3-6"><a href="#习题3-6" class="headerlink" title="习题3.6"></a>习题3.6</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>基于 Quartus Prime，用 74194（4 位双向移位寄存器）设计一个 00011101 序列产生器电路，进 行编译和仿真，查看仿真结果。 参考设计：图 3.72 是序列产生器原理图，序列产生器采用 74194 和 74153（双 4 选 1 数据选择器） 构成。</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924170739029.png" alt="image-20220924170739029"></p><p>​                                图 3.72 00011101 序列产生器原理图</p><h3 id="电路原理图设计-1"><a href="#电路原理图设计-1" class="headerlink" title="电路原理图设计"></a>电路原理图设计</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeqGn.png" alt="SeqGn"></p><h3 id="ModelSim仿真结果-1"><a href="#ModelSim仿真结果-1" class="headerlink" title="ModelSim仿真结果"></a>ModelSim仿真结果</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeGn.png" alt="SeGn"></p><h3 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h3><p>观察仿真结果波形发现输出为周期变化的<strong>00011101序列</strong>，实验结果与预期一致，实现了题目所要求的功能。</p><h2 id="习题3-12"><a href="#习题3-12" class="headerlink" title="习题3.12"></a>习题3.12</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>设计消抖动电路，并对其功能进行仿真。 参考设计：由 4 个触发器和一个 4 输入与门构成的消抖动电路如图 3.73 所示，消抖动电路实质上就是 一个信号过滤器，能够将信号中的毛刺、抖动等都滤除掉，图 3.74 是其仿真波形，从波形可看出，输出信 号实现了消抖动，同时可以发现如下特点：</p><ul><li>输出脉宽变小了，它只等于 CLK 的一个周期的宽度。  </li><li>CLK 的频率不能太低，应至少有 4 个上升沿包含在正常信号脉冲中；CLK 的频率也不能太高，其 周期不能太多地小于干扰或者抖动信号的脉宽。</li><li>增加 D 触发器的数量，可以改善消抖动效果。</li></ul><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924171445232.png" alt="image-20220924171445232"></p><h3 id="电路原理图设计-2"><a href="#电路原理图设计-2" class="headerlink" title="电路原理图设计"></a>电路原理图设计</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EnShake.png" alt="EnShake"></p><h3 id="ModelSim仿真结果-2"><a href="#ModelSim仿真结果-2" class="headerlink" title="ModelSim仿真结果"></a>ModelSim仿真结果</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EmShake.png" alt="EmShake"></p><h3 id="结果分析-2"><a href="#结果分析-2" class="headerlink" title="结果分析"></a>结果分析</h3><p>将输入和输出对比发现，输出没有了输入的<strong>抖动、毛刺</strong>，消除了这些短暂的脉冲，将其过滤掉了，说明该电路有效地实现了消除抖动的功能，与预期相一致。</p>]]></content>
    
    
    <categories>
      
      <category>QuartusII</category>
      
    </categories>
    
    
    <tags>
      
      <tag>QuartusII</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SignalSample</title>
    <link href="/2022/09/d3c714db982c.html"/>
    <url>/2022/09/d3c714db982c.html</url>
    
    <content type="html"><![CDATA[<h1 id="Signal-Sample-And-Rebuild"><a href="#Signal-Sample-And-Rebuild" class="headerlink" title="Signal Sample And Rebuild"></a>Signal Sample And Rebuild</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；</p><h3 id="Matlab程序设计"><a href="#Matlab程序设计" class="headerlink" title="Matlab程序设计"></a>Matlab程序设计</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 100khz信号的采样与恢复</span><br><span class="hljs-comment">%原信号生成</span><br>clear;<br>fs=<span class="hljs-number">500e3</span>;<span class="hljs-comment">%采样率</span><br>f1=<span class="hljs-number">100e3</span>;<span class="hljs-comment">%信号频率</span><br>T=<span class="hljs-number">10</span>/f1;<span class="hljs-comment">%采样20个周期</span><br>dt=<span class="hljs-number">1</span>/fs;<br>t=<span class="hljs-built_in">linspace</span>(-T,T-dt,<span class="hljs-number">20</span>*<span class="hljs-number">1e3</span>);<span class="hljs-comment">%时域横坐标</span><br>x = <span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*f1*t);<br>subplot(<span class="hljs-number">411</span>);<br><span class="hljs-built_in">plot</span>(t,x);<span class="hljs-comment">%画原始信号时域图</span><br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;100kHz信号时域图&quot;</span>)<br>grid on<br><br><span class="hljs-comment">%进行采样</span><br>n=-T:dt:T-dt;<br>xs=<span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*f1*n);<br>subplot(<span class="hljs-number">412</span>);<br>stem(n,xs,<span class="hljs-string">&quot;filled&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;采样信号时域图&quot;</span>)<br>grid on<br><span class="hljs-comment">%快速傅里叶变换绘出频谱图</span><br>f=n*fs/<span class="hljs-built_in">length</span>(xs)+<span class="hljs-number">0.5</span>;<br>X=fft(xs,<span class="hljs-built_in">length</span>(xs));<br>subplot(<span class="hljs-number">413</span>);<br><span class="hljs-built_in">plot</span>(f*fs/<span class="hljs-number">1e3</span>,<span class="hljs-built_in">abs</span>(X));<br>xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>)<br>title(<span class="hljs-string">&quot;采样信号幅频图&quot;</span>)<br>grid on<br><br><span class="hljs-comment">%滤波恢复原信号</span><br>y=[];<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(t)<br>    a=t(<span class="hljs-built_in">i</span>)-n;<br>    Sa=sinc(fs.*a);<br>    g=<span class="hljs-built_in">dot</span>(xs,Sa);<br>    y = [y,g];<br><span class="hljs-keyword">end</span><br>subplot(<span class="hljs-number">414</span>);<br><span class="hljs-built_in">plot</span>(y);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;恢复信号时域图&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><ol><li><p>100kHz原始信号的采样与恢复</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample100.png" alt="sample100"></p></li><li><p>250kHz原始信号的采样与恢复</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample250.png" alt="sample250"></p></li><li><p>400kHz原始信号的采样与恢复</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample400.png" alt="sample400"></p></li></ol><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><ul><li>根据是实验结果观察波形可知，当采样频率固定为500kHz时，对100kHz采样后恢复的信号与原始信号基本一致，依据<strong>奈奎斯特采样定理</strong><u>采样频率需要大于信号的最高频率的两倍</u>可知，此时为<strong>过采样</strong>；对250kHz采样后恢复的信号在边界附近幅度有一定变化但近似可以恢复出原信号，依据奈奎斯特采样定理可知此时为<strong>临界采样</strong>；对400kHz采样后恢复的信号频率为原始信号的四倍发生了<strong>非线性失真</strong>，无法恢复出原始信号，依据奈奎斯特采样定理可知此时为<strong>欠采样</strong>。</li></ul><hr><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><h3 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h3><p>采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。</p><h3 id="Matlab程序设计-1"><a href="#Matlab程序设计-1" class="headerlink" title="Matlab程序设计"></a>Matlab程序设计</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 信号的采样与恢复</span><br>clear all;close;clc;<br><span class="hljs-comment">%% 原信号采样及对比</span><br>[x,fm]=audioread(<span class="hljs-string">&quot;D:/origin.wav&quot;</span>);<br>x=x(:,<span class="hljs-number">1</span>);<span class="hljs-comment">%由于x是双声道，所以取它的左声道</span><br>Fs=<span class="hljs-number">40e3</span>;<br>x = resample(x,Fs,fm);<span class="hljs-comment">%将读取信号重采样为40kHz作为原始信号</span><br>N=<span class="hljs-built_in">length</span>(x); <span class="hljs-comment">%信号的长度</span><br>t=(<span class="hljs-number">0</span>:N<span class="hljs-number">-1</span>)/Fs;<span class="hljs-comment">%时域范围</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>);<br>subplot(<span class="hljs-number">421</span>);<br><span class="hljs-built_in">plot</span>(t,x); <span class="hljs-comment">%音频信号时域图</span><br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>); <br>Y=fft(x,N);<br>df=Fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<br>Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>subplot(<span class="hljs-number">422</span>);<br><span class="hljs-built_in">plot</span>(f.*Fs./<span class="hljs-number">1e3</span>,Ys); <span class="hljs-comment">%音频信号频谱图</span><br>title(<span class="hljs-string">&quot;原信号音频频谱图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>);<br><span class="hljs-comment">%% 进行过采样、临界采样和欠采样三种采样</span><br><span class="hljs-built_in">i</span>=<span class="hljs-number">3</span>;<br>fso=Fs*<span class="hljs-number">3</span>/<span class="hljs-number">4</span>;<br>fsc=Fs/<span class="hljs-number">2</span>;<br>fsu=Fs/<span class="hljs-number">4</span>;<br><span class="hljs-keyword">for</span> n = [<span class="hljs-number">3</span>/<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">if</span> n==<span class="hljs-number">3</span>/<span class="hljs-number">4</span><br>    yso =  resample(x,fso,Fs);<br><span class="hljs-keyword">elseif</span> n==<span class="hljs-number">2</span><br>    ysc =  resample(x,fsc,Fs);<br><span class="hljs-keyword">else</span><br>    ysu =  resample(x,fsu,Fs);<br><span class="hljs-keyword">end</span><br>subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">i</span>);<br><span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> n==<span class="hljs-number">3</span>/<span class="hljs-number">4</span><br>    tso=<span class="hljs-built_in">linspace</span>(t(<span class="hljs-number">1</span>),t(<span class="hljs-keyword">end</span>),<span class="hljs-built_in">length</span>(yso));<span class="hljs-comment">%时域横坐标</span><br>    <span class="hljs-built_in">plot</span>(tso,yso);<span class="hljs-comment">%画采样信号时域图</span><br>    title(<span class="hljs-string">&quot;过采样采样信号时域图&quot;</span>)<br>    xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>    grid on<br>    Y=fft(yso,<span class="hljs-built_in">length</span>(yso));<br>    subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">i</span>);<br>    <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br>    df=fso/<span class="hljs-built_in">length</span>(tso); <span class="hljs-comment">%计算谱线间隔</span><br>    fo=tso*df;<br>    Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>    <span class="hljs-built_in">plot</span>(fo.*fso./<span class="hljs-number">1e3</span>,Ys,<span class="hljs-string">&#x27;red&#x27;</span>); <span class="hljs-comment">%音频信号频谱图</span><br>    xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>); <br>    title(<span class="hljs-string">&quot;过采样音频频谱图&quot;</span>);<br>    grid on<br><span class="hljs-keyword">elseif</span> n==<span class="hljs-number">2</span><br>    tsc=<span class="hljs-built_in">linspace</span>(t(<span class="hljs-number">1</span>),t(<span class="hljs-keyword">end</span>),<span class="hljs-built_in">length</span>(ysc));<span class="hljs-comment">%时域横坐标</span><br>    <span class="hljs-built_in">plot</span>(tsc,ysc);<span class="hljs-comment">%画采样信号时域图</span><br>    title(<span class="hljs-string">&quot;临界采样采样信号时域图&quot;</span>)<br>    xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>    grid on<br>    Y=fft(ysc,<span class="hljs-built_in">length</span>(ysc));<br>    subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">i</span>);<br>    <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br>    df=fsc/<span class="hljs-built_in">length</span>(tsc); <span class="hljs-comment">%计算谱线间隔</span><br>    fc=tsc*df;<br>    Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>    <span class="hljs-built_in">plot</span>(fc.*fsc./<span class="hljs-number">1e3</span>,Ys,<span class="hljs-string">&#x27;green&#x27;</span>); <span class="hljs-comment">%音频信号频谱图</span><br>    xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>);<br>    title(<span class="hljs-string">&quot;临界采样音频频谱图&quot;</span>);<br>    grid on<br><span class="hljs-keyword">elseif</span> n==<span class="hljs-number">4</span> <br>    tsu=<span class="hljs-built_in">linspace</span>(t(<span class="hljs-number">1</span>),t(<span class="hljs-keyword">end</span>),<span class="hljs-built_in">length</span>(ysu));<span class="hljs-comment">%时域横坐标</span><br>    <span class="hljs-built_in">plot</span>(tsu,ysu);<span class="hljs-comment">%画采样信号时域图</span><br>    title(<span class="hljs-string">&quot;欠采样采样信号时域图&quot;</span>)<br>    xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>    grid on<br>    Y=fft(ysu,<span class="hljs-built_in">length</span>(ysu));<br>    subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-built_in">i</span>);<br>    <span class="hljs-built_in">i</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>;<br>    df=fsu/<span class="hljs-built_in">length</span>(tsu); <span class="hljs-comment">%计算谱线间隔</span><br>    fu=tsu*df;<br>    Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>    <span class="hljs-built_in">plot</span>(fu.*fsu./<span class="hljs-number">1e3</span>,Ys,<span class="hljs-string">&#x27;blue&#x27;</span>); <span class="hljs-comment">%音频信号频谱图</span><br>    xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>);<br>    title(<span class="hljs-string">&quot;欠采样音频频谱图&quot;</span>);<br>    grid on<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%% 低通滤波恢复原信号</span><br>yo=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">length</span>(x));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(x)<br>        a=t(<span class="hljs-built_in">i</span>)-tso;<br>        Sa=sinc(fso.*a);<br>        g=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(yso)<br>            s = yso(k)*Sa(k);<br>            g=g+s;<br>        <span class="hljs-keyword">end</span><br>        yo(<span class="hljs-built_in">i</span>) = g;<br><span class="hljs-keyword">end</span><br>yc=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">length</span>(x));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(t)<br>        b=t(<span class="hljs-built_in">i</span>)-tsc;<br>        Sb=sinc(fsc.*b);<br>        g=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(ysc)<br>            s = ysc(k)*Sb(k);<br>            g=g+s;<br>        <span class="hljs-keyword">end</span><br>        yc(<span class="hljs-built_in">i</span>) = g;<br><span class="hljs-keyword">end</span><br>yu=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">length</span>(x));<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(t)<br>        c=t(<span class="hljs-built_in">i</span>)-tsu;<br>        Sc=sinc(fsu.*c);<br>        g=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(ysu)<br>            s = ysu(k)*Sc(k);<br>            g=g+s;<br>        <span class="hljs-keyword">end</span><br>        yu(<span class="hljs-built_in">i</span>) = g;<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%% 信号对比及保存</span><br><span class="hljs-comment">%画出还原时域图</span><br>m=<span class="hljs-number">2</span>;<br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>);<br>subplot(<span class="hljs-number">421</span>);<br><span class="hljs-built_in">plot</span>(t,x); <br>title(<span class="hljs-string">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>);<br>grid on<br>s=<span class="hljs-string">&quot;原信号音频频谱图&quot;</span>;<br>FFT(x,N,Fs,t,m,s);<br>m=m+<span class="hljs-number">2</span>;<br>subplot(<span class="hljs-number">423</span>);<br><span class="hljs-built_in">plot</span>(t,yo);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;过采样恢复信号时域图&quot;</span>);<br>grid on<br>so=<span class="hljs-string">&quot;过采样信号音频频谱图&quot;</span>;<br>FFT(yo,<span class="hljs-built_in">length</span>(yo),Fs,t,m,so);<br>m=m+<span class="hljs-number">2</span>;<br>subplot(<span class="hljs-number">425</span>);<br><span class="hljs-built_in">plot</span>(t,yc);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;临界采样恢复信号时域图&quot;</span>);<br>grid on<br>sc=<span class="hljs-string">&quot;临界采样信号音频频谱图&quot;</span>;<br>FFT(yc,<span class="hljs-built_in">length</span>(yc),Fs,t,m,sc);<br>m=m+<span class="hljs-number">2</span>;<br>subplot(<span class="hljs-number">427</span>);<br><span class="hljs-built_in">plot</span>(t,yu);<br>xlabel(<span class="hljs-string">&quot;t/s&quot;</span>)<br>title(<span class="hljs-string">&quot;欠采样恢复信号时域图&quot;</span>);<br>grid on<br>su=<span class="hljs-string">&quot;欠采样信号音频频谱图&quot;</span>;<br>FFT(yu,<span class="hljs-built_in">length</span>(yu),Fs,t,m,su);<br><span class="hljs-comment">%%</span><br><span class="hljs-comment">%保存信号</span><br>name = [<span class="hljs-string">&quot;over_sampling.wav&quot;</span>,<span class="hljs-string">&quot;critical_sampling.wav&quot;</span>,<span class="hljs-string">&quot;under_sampling.wav&quot;</span>];<br>audiowrite(name(<span class="hljs-number">1</span>),yo,Fs);<br>audiowrite(name(<span class="hljs-number">2</span>),yc,Fs);<br>audiowrite(name(<span class="hljs-number">3</span>),yu,Fs);<br><span class="hljs-comment">%% 傅里叶变换函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">FourierTransform</span> = <span class="hljs-title">FFT</span><span class="hljs-params">(signal,N,fs,t,m,s)</span></span><br>Y=fft(signal,N);<br>df=fs/<span class="hljs-built_in">length</span>(t); <span class="hljs-comment">%计算谱线间隔</span><br>f=t*df;<br>Ys=<span class="hljs-built_in">abs</span>(Y); <span class="hljs-comment">%幅度响应</span><br>subplot(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,m);<br><span class="hljs-built_in">plot</span>(f.*fs./<span class="hljs-number">1e3</span>,Ys); <span class="hljs-comment">%音频信号频谱图</span><br>xlabel(<span class="hljs-string">&quot;f/kHz&quot;</span>);<br>title(s);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><ol><li><p>三种采样后的信号与原信号的对比</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample.png" alt="sample"></p></li><li><p>重建信号与原信号的对比</p><p><img src="https://img.gouka.la/i/2022/09/29/xmk5br.webp"></p></li></ol><h3 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h3><ul><li><p>先读取音频信号，matlab默认读取音频时的采样频率为44.1kHz，而人类能够听到的声音的频率为<strong>20~20kHz</strong>左右，为了便于后面的采样将采集的信号重采样为40kHz作为原始信号，然后对其分别进行过采样(频率为30kHz)、临界采样(频率为20kHz)、欠采样(频率为10kHz)，采样后对其进行<strong>插值重建</strong>。</p></li><li><p>对比原始信号与重建信号的时域图和频谱图发现，过采样和临界采样恢复的信号和原始信号基本一致，没有发生较大的畸变，而欠采样信号发生了较大的失真，与原始信号有较大的的区别，由此可知，<strong>采样必须满足奈奎斯特采样定理</strong>才能不失真的恢复出原始信号。</p><p> ​                                                                                                                </p><p> ​                                                                                                                <a href="https://alleyf.github.io/2022/09/22/SignalSample/">原文已上传博客</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>DSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Signal</tag>
      
      <tag>Sample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ML_DL</title>
    <link href="/2022/09/b217f7fd8a2d.html"/>
    <url>/2022/09/b217f7fd8a2d.html</url>
    
    <content type="html"><![CDATA[<h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><h2 id="Paddle常用API"><a href="#Paddle常用API" class="headerlink" title="Paddle常用API"></a>Paddle常用API</h2><center><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/index_cn.html">飞浆API</a></center>​    <table><thead><tr><th align="center"><strong>目录</strong></th><th><strong>功能和包含的API</strong></th></tr></thead><tbody><tr><td align="center">paddle.*</td><td>paddle 根目录下保留了常用API的别名，包括：paddle.tensor, paddle.framework, paddle.device 目录下的所有API</td></tr><tr><td align="center">paddle.tensor</td><td>Tensor操作相关的API，包括 创建zeros, 矩阵运算matmul, 变换concat, 计算add, 查找argmax等</td></tr><tr><td align="center">paddle.framework</td><td>框架通用API和动态图模式的API，包括 no_grad 、 save 、 load 等。</td></tr><tr><td align="center">paddle.device</td><td>设备管理相关API，包括 set_device, get_device 等。</td></tr><tr><td align="center">paddle.linalg</td><td>线性代数相关API，包括 det, svd 等。</td></tr><tr><td align="center">paddle.fft</td><td>快速傅里叶变换的相关API，包括 fft, fft2 等。</td></tr><tr><td align="center">paddle.amp</td><td>自动混合精度策略，包括 auto_cast 、 GradScaler 等。</td></tr><tr><td align="center">paddle.autograd</td><td>自动求导相关API，包括 backward、PyLayer 等。</td></tr><tr><td align="center">paddle.callbacks</td><td>日志回调类，包括 ModelCheckpoint 、 ProgBarLogger 等。</td></tr><tr><td align="center">paddle.distributed</td><td>分布式相关基础API。</td></tr><tr><td align="center">paddle.distributed.fleet</td><td>分布式相关高层API。</td></tr><tr><td align="center">paddle.hub</td><td>模型拓展相关的API，包括 list、load、help 等。</td></tr><tr><td align="center">paddle.io</td><td>数据输入输出相关API，包括 Dataset, DataLoader 等。</td></tr><tr><td align="center">paddle.jit</td><td>动态图转静态图相关API，包括 to_static、 ProgramTranslator、TracedLayer 等。</td></tr><tr><td align="center">paddle.metric</td><td>评估指标计算相关的API，包括 Accuracy, Auc等。</td></tr><tr><td align="center">paddle.nn</td><td>组网相关的API，包括 Linear 、卷积 Conv2D 、 循环神经网络 RNN 、损失函数 CrossEntropyLoss 、 激活函数 ReLU 等。</td></tr><tr><td align="center">paddle.onnx</td><td>paddle转换为onnx协议相关API，包括 export 等。</td></tr><tr><td align="center">paddle.optimizer</td><td>优化算法相关API，包括 SGD，Adagrad, Adam 等。</td></tr><tr><td align="center">paddle.optimizer.lr</td><td>学习率衰减相关API，包括 NoamDecay 、 StepDecay 、 PiecewiseDecay 等。</td></tr><tr><td align="center">paddle.regularizer</td><td>正则化相关API，包括 L1Decay、L2Decay 等。</td></tr><tr><td align="center">paddle.static</td><td>静态图下基础框架相关API，包括 Variable, Program, Executor等</td></tr><tr><td align="center">paddle.static.nn</td><td>静态图下组网专用API，包括 全连接层 fc 、控制流 while_loop/cond 。</td></tr><tr><td align="center">paddle.text</td><td>NLP领域API，包括NLP领域相关的数据集， 如 Imdb 、 Movielens 。</td></tr><tr><td align="center">paddle.utils</td><td>工具类相关API，包括 CppExtension、CUDAExtension 等。</td></tr></tbody></table><p><a href="">121</a></p><h2 id="飞桨产业级深度学习开源开放平台"><a href="#飞桨产业级深度学习开源开放平台" class="headerlink" title="飞桨产业级深度学习开源开放平台"></a>飞桨产业级深度学习开源开放平台</h2><p>飞桨（PaddlePaddle）以百度多年的深度学习技术研究和业务应用为基础，集深度学习核心训练和推理框架、基础模型库、端到端开发套件、丰富的工具组件于一体，是中国首个自主研发、功能丰富、开源开放的产业级深度学习平台。飞桨于2016 年正式开源，是主流深度学习框架中一款完全国产化的产品。相比国内其他产品，飞桨是一个功能完整的深度学习平台，也是唯一成熟稳定、具备大规模推广条件的深度学习开源开放平台。根据国际权威调查机构IDC报告显示，2021年飞桨已位居中国深度学习平台市场综合份额第一。</p><p>目前，飞桨已凝聚477万开发者，基于飞桨开源深度学习平台创建56万个模型，服务了18万家企事业单位。飞桨助力开发者快速实现AI想法，创新AI应用，作为基础平台支撑越来越多行业实现产业智能化升级，并已广泛应用于智慧城市、智能制造、智慧金融、泛交通、泛互联网、智慧农业等领域，如 <strong>图1</strong> 所示。</p><p>飞桨产业级深度学习开源开放平台包含核心框架、基础模型库、端到端开发套件与工具组件几个部分，各组件使用场景如 <strong>图2</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/e040a31c13924cd5ae004308f73ce50c6979239be95f4f3ebb8c92b1311d77ab" width="1000" ></center><center><br>图2：飞桨开源组件使用场景概览 </br></center>概览图上半部分是从开发、训练到部署的全流程工具；下半部分是预训练模型、封装工具、各领域的开发套件和模型库等模型资源，支持深度学习模型从训练到部署的全流程。<h2 id="模型开发和训练组件"><a href="#模型开发和训练组件" class="headerlink" title="模型开发和训练组件"></a>模型开发和训练组件</h2><p><strong>飞桨核心框架Paddle</strong>支持用户完成基础的模型编写和单机训练功能。除核心框架之外，飞桨还提供了<strong>分布式训练框架FleetAPI</strong>、<strong>云上任务提交工具PaddleCloud</strong>和<strong>多任务学习框架PALM</strong>。</p><h3 id="模型部署组件"><a href="#模型部署组件" class="headerlink" title="模型部署组件"></a>模型部署组件</h3><p>针对不同硬件环境，飞桨提供了丰富的支持方案：</p><ul><li><p><strong>Paddle Inference</strong>：飞桨原生推理库，用于服务器端模型部署，支持Python、C、C++、Go等语言，可将模型融入业务系统。</p></li><li><p><strong>Paddle Serving</strong>：飞桨服务化部署框架，用于云端服务化部署，可将模型作为单独的Web服务。</p></li><li><p><strong>Paddle Lite</strong>：飞桨轻量化推理引擎，用于Mobile、IoT等场景的部署，有着广泛的硬件支持。</p></li><li><p><strong>Paddle.js</strong>：使用JavaScript（Web）语言部署模型，用于在浏览器、小程序等环境快速部署模型。</p></li><li><p><strong>PaddleSlim</strong>：模型压缩工具，获得更小体积的模型和更快的执行性能，通常在模型部署前使用。</p></li><li><p><strong>X2Paddle</strong>：飞桨模型转换工具，将其他框架模型转换成Paddle模型，转换格式后可以方便的使用上述5个工具。</p></li></ul><h3 id="其他全研发流程的辅助工具组件"><a href="#其他全研发流程的辅助工具组件" class="headerlink" title="其他全研发流程的辅助工具组件"></a>其他全研发流程的辅助工具组件</h3><ul><li><p><strong>AutoDL</strong>：飞桨自动化深度学习工具，自动搜索最优的网络结构与超参数，实现网络结构设计。免去用户在诸多网络结构中选择困难的烦恼和人工调参的繁琐工作。</p></li><li><p><strong>VisualDL</strong>：飞桨可视化分析工具，以丰富的图表呈现训练参数变化趋势、模型结构、数据样本、高维数据分布、精度召回曲线等模型关键信息，帮助用户清晰直观地理解深度学习模型训练过程及模型结构，启发优化思路。</p></li><li><p><strong>PaddleFL</strong>：飞桨联邦学习框架，通过PaddleFL复制和比较不同的联邦学习算法，实现大规模分布式集群部署，并且提供丰富的横向和纵向联邦学习策略及其在计算机视觉、自然语言处理、推荐算法等领域的应用。</p></li></ul><h3 id="产业级开源模型库"><a href="#产业级开源模型库" class="headerlink" title="产业级开源模型库"></a>产业级开源模型库</h3><p>飞桨提供了产业级开源模型库，覆盖计算机视觉(PaddleCV)、自然语言处理(PaddleNLP)、推荐(PaddleRec)、语音(PaddleSpeech)四大应用领域，包含经过产业实践长期打磨的主流模型以及在国际竞赛中的夺冠模型。同时，飞桨将主流模型按照领域组织成端到端开发套件，助力快速的产业应用。</p><p><strong>1）预训练模型和封装工具</strong>：通过低代码形式，支持企业POC快速验证、快速实现深度学习算法开发及产业部署。</p><ul><li><p><strong>PaddleHub</strong>：飞桨预训练模型应用工具，提供超过350个预训练模型，覆盖文本、图像、视频、语音四大领域。模型即软件，通过Python API或者命令行工具，一行代码完成预训练模型的预测。结合Fine-tune API，10行代码完成迁移学习，是进行原型验证（POC）的首选。</p></li><li><p><strong>PaddleX</strong>：飞桨全流程开发工具，以低代码的形式支持开发者快速实现深度学习算法开发及产业部署。提供极简Python API和可视化界面Demo两种开发模式，可一键安装。提供CPU、GPU、树莓派等通用硬件高性能部署方案，并通过Maufacture SDK支持用户流程化串联部署任务，极大降低部署成本。</p></li></ul><p><strong>2）开发套件</strong>：针对具体的应用场景提供了全套的研发工具，例如：在图像检测场景不仅提供了预训练模型，还提供了数据增强等工具。开发套件覆盖计算机视觉、自然语言处理、语音、推荐四大主流领域，甚至还包括图神经网络和增强学习。开发套件可以提供一个领域极致优化（State Of The Art）的实现方案，曾有国内团队使用飞桨的开发套件获得了国际建模竞赛的大奖。</p><ul><li><strong>PaddleClas</strong>：飞桨图像分类开发套件，提供通用图像识别系统PP-ShiTu，可高效实现高精度车辆、商品等多种识别任务；同时提供37个系列213个高性能图像分类预训练模型，其中包括10万分类预训练模型、PP-LCNet等明星模型；以及SSLD知识蒸馏等先进算法优化策略，可被广泛应用于高阶视觉任务，辅助产业及科研领域快速解决多类别、高相似度、小样本等业界难点。</li><li><strong>PaddleDetection</strong>：飞桨目标检测开发套件，内置190个主流目标检测、实例分割、跟踪、关键点检测算法，其中包括服务器端和移动端产业级SOTA模型、冠军方案和学术前沿算法，并提供配置化的网络模块组件、十余种数据增强策略和损失函数等高阶优化支持和多种部署方案，在打通数据处理、模型开发、训练、压缩、部署全流程的基础上，提供丰富的案例及教程，加速算法产业落地应用。</li><li><strong>PaddleSeg</strong>：飞桨图像分割套件PaddleSeg，提供语义分割、交互式分割、全景分割、Matting四大图像分割能力，涵盖30+主流分割网络，80+高质量预训练模型。通过模块化的设计，提供了配置化驱动和API调用等两种应用方式，帮助开发者更便捷地完成从训练到部署的全流程图像分割应用，被广泛应用在自动驾驶、遥感、医疗、质检、巡检、互联网娱乐等行业。</li><li><strong>PaddleOCR：</strong> 飞桨文字识别开发套件，旨在打造一套丰富、领先且实用的OCR工具库，开源了基于PP-OCRv2的实用超轻量中英文OCR模型、通用中英文OCR模型，以及德法日韩等80多种多语言OCR模型，并提供上述模型训练方法和多种预测部署方式。同时开源文本风格数据合成工具Style-Text和半自动文本图像标注工具PPOCRLabel，目前已经成为全球知名的OCR开源项目。</li><li><strong>PaddleGAN</strong>：飞桨生成对抗网络开发套件，提供图像生成、风格迁移、超分辨率、影像上色、人脸属性编辑、人脸融合、动作迁移等前沿算法，其模块化设计，便于开发者进行二次研发，同时提供30+预训练模型，助力开发者快速开发丰富的应用。</li><li><strong>PaddleVideo</strong>：飞桨视频模型开发套件，具有高指标的模型算法、全流程可部署、更快训练速度和丰富的应用案例、保姆级教程并在体育、安防、互联网、媒体等行业有广泛应用，如：足球/蓝球动作检测、乒乓球动作识别、花样滑冰动作识别、知识增强的大规模视频分类打标签、智慧安防、内容分析等产业实践案例。</li><li><strong>ERNIEKit</strong>：飞桨语义理解套件，基于持续学习的知识增强语义理解框架实现，内置业界领先的系列ERNE预训练模型，该套件全面升级飞桨框架v2.2，同时支持动态图和静态图，兼顾了开发的便利性与部署的高性能需求。同时还能够支持各类NLP算法任务Fine-tuning,包含保证极速推理的Fast-inference API，灵活部署的ERNIE Service和轻量化解决方案ERNIE Slim，训练过程所见即所得，支持动态debug同时方便二次开发。</li><li><strong>PLSC</strong>：飞桨海量类别分类套件，为用户提供了大规模分类任务从训练到部署的全流程解决方案。提供简洁易用的高层API，通过数行代码即可实现千万类别分类模型的训练，并提供快速部署模型的能力。</li><li><strong>ElasticCTR</strong>：飞桨个性化推荐开发套件，可以实现分布式训练CTR预估任务和基于PaddleServing的在线个性化推荐服务。PaddleServing服务化部署框架具有良好的易用性、灵活性和高性能，可以提供端到端的CTR训练和部署解决方案。ElasticCTR具备产业实践基础、弹性调度能力、高性能和工业级部署等特点。</li><li><strong>Parakeet</strong>：飞桨语音合成套件，提供了灵活、高效、先进的文本到语音合成工具，帮助开发者更便捷高效地完成语音合成模型的开发和应用。</li><li><strong>PGL</strong>：飞桨图学习框架，业界首个提出通用消息并行传递机制，支持万亿级巨图的工业级图学习框架。PGL 原生支持异构图，支持分布式图存储及分布式学习算法，支持 GNNAutoScale实现单卡深度图卷积，覆盖 30+ 图学习模型，并内置 KDDCup 2021 PGL 冠军算法。内置图推荐算法套件 Graph4Rec 以及高效知识表示套件 Graph4KG。历经大量真实工业应用验证，能够灵活、高效地搭建前沿的大规模图学习算法。</li><li><strong>PARL</strong>：飞桨深度强化学习框架，夺得NeurIPS强化学习挑战赛三连冠。具有高灵活性、可扩展性和高性能的特点，可支持实现数千台CPU和GPU的高性能并行，实现了数十种主流强化学习算法的示例，覆盖了从单智能体到多智能体，离散决策到连续控制，离线学习到在线学习等多样化的强化学习支持。此外，飞桨还发布了业界首个通用元智能体训练环境MetaGym，提升算法在不同配置智能体和多种环境中的适应能力，目前包含四轴飞行器、电梯调度、四足机器狗、3D迷宫等多个仿真训练环境。</li><li><strong>Paddle Quantum</strong>：量桨，基于飞桨的量子机器学习工具集，提供组合优化、量子化学等前沿功能，常用量子电路模型，以及丰富的量子机器学习案例，帮助开发者便捷地搭建量子神经网络，开发量子人工智能应用。</li><li><strong>PaddleHelix</strong>：飞桨螺旋桨生物计算平台，面向新药研发、疫苗设计、精准医疗等场景提供AI能力。在新药研发上，提供基于大规模数据预训练的分子表征和蛋白表征模型，助力分子生成、药物筛选、化合物合成等任务，同时提供从分子生成到药物筛选到全流程pipeline。在疫苗设计上，Linear系列算法相比传统方法在RNA折叠上提升了几百上干倍的效率，在mRNA序列设计上其结构紧密性、稳定性、细胞内蛋白表达水平以及动物免疫原性方面超过标准算法设计的基准序列。在精准医疗上,PaddleHelix提供了利用组学信息精准定位药物，进行双药联用提升治愈率的高性能模型。</li></ul><p>开发套件中的大量模型，既可以通过调整配置文件直接使用的模式，也可以定位到模型的源代码文件进行二次研发。</p><blockquote><p>比较几种模型工具，PaddleHub的使用最为简易，二次研发模型源代码的灵活性最好。读者可以参考“使用PaddleHub-&gt;基于配置文件使用各领域的开发套件-&gt;二次研发原始模型代码”的顺序来使用飞桨产业级模型库，在此基础上根据业务需求进行优化，即可达到事半功倍的效果。</p></blockquote><h1 id="深度学习基础"><a href="#深度学习基础" class="headerlink" title="深度学习基础"></a>深度学习基础</h1><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li><p>模型假设</p></li><li><p>优化目标</p></li><li><p>寻解算法</p><ul><li><p>公式法：</p></li><li><p>梯度下降法:  </p><ol><li><p>方向</p></li><li><p>步长</p></li><li><p>特征缩放</p></li><li><p>梯度决定步长   </p></li></ol></li></ul></li></ol><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220912142745507.png" alt="image-20220912142745507"></p><p>激活函数(sigmoid)：</p><p>$$<br>y=\frac{1}{1+e^{-x}}<br>$$</p><p>激活函数(RELU):</p><p>$$<br>y=<br>\begin{cases}<br>0 &amp; x&lt;0\<br>kx &amp; x&gt;=0<br>\end{cases}<br>$$<br><strong>卷积核</strong>就是<strong>提取的特征</strong>，训练过程中通过<strong>反向传播</strong>不断<strong>改变卷积核</strong>，最终得到的卷积核就是识别目标的特征。</p><p>卷积核与输入的卷积结果为特征层</p><p>优化器，学习率，学习策略，模型，预处理方法</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190129721.png" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190439588.png" style="zoom: 50%;" /><h2 id="常用的库"><a href="#常用的库" class="headerlink" title="常用的库"></a>常用的库</h2><ol><li><p><strong>numpy</strong>是Python科学计算库的基础。包含了强大的N维数组对象和向量运算。</p></li><li><p><strong>pandas</strong>是建立在numpy基础上的高效数据分析处理库，是Python的重要数据分析库。</p></li><li><p><strong>Matplotlib</strong>是一个主要用于绘制二维图形的Python库。用途：绘图、可视化</p></li><li><p><strong>PIL</strong>库是一个具有强大图像处理能力的第三方库。用途：图像处理</p></li></ol><hr><h3 id="Numpy库"><a href="#Numpy库" class="headerlink" title="Numpy库"></a>Numpy库</h3><ul><li>可以使用array函数从常规Python<strong>列表或元组</strong>中创建数组。得到的数组的类型是从Python列表中元素的类型推导出来的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment">#将列表转换为二维数组</span><br>array = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>                 [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(array)<br><span class="hljs-comment">#将元组转换为二维数组</span><br>array = np.array(((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),<br>                 (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)))<br><span class="hljs-built_in">print</span>(array)<br><span class="hljs-comment">#将列表或元组转为一维数组</span><br>a = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]) <br>b = np.array((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a,b)<br></code></pre></td></tr></table></figure><h4 id="1-常用函数"><a href="#1-常用函数" class="headerlink" title="1.常用函数"></a>1.常用函数</h4><ul><li><p>zeros():可以创建指定长度或者形状的全0数组</p></li><li><p>ones():可以创建指定长度或者形状的全1数组</p></li><li><p>empty():创建一个数组，其初始内容是随机的,取决于内存的状态</p></li><li><p>arange():创建一个指定处末位置和步长的数字数组</p></li><li><p>random.random((m,n))：生成0~1之间的m行n列的数组</p></li><li><p>random.randint(a, b, (m,n )):生成a~b之间左开右闭区间m行n列的随机整数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">zeroarray = np.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">3</span>),dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)<br><span class="hljs-built_in">print</span>(zeroarray)<br>onearray = np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),dtype=<span class="hljs-string">&#x27;int64&#x27;</span>)<br><span class="hljs-built_in">print</span>(onearray)<br>emptyarray = np.empty((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(emptyarray)<br>array = np.arange( <span class="hljs-number">10</span>, <span class="hljs-number">31</span>,<span class="hljs-number">5</span> )<br><span class="hljs-built_in">print</span>(array)<br>randarray = np.random.random((m,n))<br>randint = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, (<span class="hljs-number">1</span>, )).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>输出数组的一些信息，如维度、形状、元素个数、元素类型等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">array = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]])<br><span class="hljs-built_in">print</span>(array)<br><span class="hljs-comment">#数组维度</span><br><span class="hljs-built_in">print</span>(array.ndim)<br><span class="hljs-comment">#数组形状</span><br><span class="hljs-built_in">print</span>(array.shape)<br><span class="hljs-comment">#数组元素个数</span><br><span class="hljs-built_in">print</span>(array.size)<br><span class="hljs-comment">#数组元素类型</span><br><span class="hljs-built_in">print</span>(array.dtype)<br></code></pre></td></tr></table></figure><ul><li>reshape([m,n])重新定义数字的形状为m行n列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">array1 = np.arange(<span class="hljs-number">6</span>).reshape([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<span class="hljs-comment">#重塑为2行3列</span><br><span class="hljs-built_in">print</span>(array1)<br><br><br>array2 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]],dtype=np.int64).reshape([<span class="hljs-number">3</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">#重塑为3行2列</span><br><span class="hljs-built_in">print</span>(array2)<br><br></code></pre></td></tr></table></figure><h4 id="2-数组计算"><a href="#2-数组计算" class="headerlink" title="2.数组计算"></a>2.数组计算</h4><p><strong>注:大小相等的数组之间的任何算术运算都会将运算应用到元素级。同样，数组与标量的算术运算也会将那个标量值传播到各个元素.</strong></p><ol><li><p>矩阵基础运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">arr1 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br>arr2 = np.ones([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],dtype=np.int64)<br><br><span class="hljs-built_in">print</span>(arr1 + arr2)<br><span class="hljs-built_in">print</span>(arr1 - arr2)<br><span class="hljs-built_in">print</span>(arr1 * arr2)<br><span class="hljs-built_in">print</span>(arr1 / arr2)<br><span class="hljs-built_in">print</span>(arr1 ** <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li><p>矩阵乘法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">arr3 = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br>arr4 = np.ones([<span class="hljs-number">3</span>,<span class="hljs-number">2</span>],dtype=np.int64)<br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr4)<br><span class="hljs-built_in">print</span>(np.dot(arr3,arr4))<br></code></pre></td></tr></table></figure></li><li><p>矩阵其他运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>(arr3,axis=<span class="hljs-number">1</span>)) <span class="hljs-comment">#axis=1,每一行求和 axie=0,每一列求和</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">max</span>(arr3))<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">min</span>(arr3))<br><span class="hljs-built_in">print</span>(np.mean(arr3))<br><span class="hljs-built_in">print</span>(np.argmax(arr3),axis=<span class="hljs-number">0</span>/<span class="hljs-number">1</span>)<span class="hljs-comment">#axis=1,每一行求最大值的索引 axie=0,每一列求最大值索引</span><br><span class="hljs-built_in">print</span>(np.argmin(arr3),axis=<span class="hljs-number">0</span>/<span class="hljs-number">1</span>)<span class="hljs-comment">#axis=1,每一行求最小值的索引 axie=0,每一列求最小值索引</span><br><span class="hljs-built_in">print</span>(arr3.transpose())<span class="hljs-comment">#求数组的转置矩阵</span><br><span class="hljs-built_in">print</span>(arr3.flatten())<span class="hljs-comment">#将数组降为一维</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="3-数组的索引与切片"><a href="#3-数组的索引与切片" class="headerlink" title="3.数组的索引与切片"></a>3.数组的索引与切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">arr5 = np.arange(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>).reshape([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(arr5)<br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>])<span class="hljs-comment">#索引第一行</span><br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<span class="hljs-comment">#索引第一行第二列</span><br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<span class="hljs-comment">#索引第一行第二列</span><br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>,:])<span class="hljs-comment">#切片第一行</span><br><span class="hljs-built_in">print</span>(arr5[:,<span class="hljs-number">1</span>])<span class="hljs-comment">#切片第一列</span><br><span class="hljs-built_in">print</span>(arr5[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>:<span class="hljs-number">2</span>])<span class="hljs-comment">#切片第一行第零列开始向后的两个元素，返回一个列表</span><br></code></pre></td></tr></table></figure><hr><h4 id="4-线性代数常用库函数"><a href="#4-线性代数常用库函数" class="headerlink" title="4.线性代数常用库函数"></a>4.线性代数常用库函数</h4><center><img src=https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193010646.png></center><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 矩阵相乘</span><br>a = np.arange(<span class="hljs-number">12</span>)<br>b = a.reshape([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>c = a.reshape([<span class="hljs-number">4</span>, <span class="hljs-number">3</span>])<br><span class="hljs-comment"># 矩阵b的第二维大小，必须等于矩阵c的第一维大小</span><br>d = b.dot(c) <span class="hljs-comment"># 等价于 np.dot(b, c)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d))<br><br><span class="hljs-comment"># numpy.linalg  中有一组标准的矩阵分解运算以及诸如求逆和行列式之类的东西</span><br><span class="hljs-comment"># np.linalg.diag 以一维数组的形式返回方阵的对角线（或非对角线）元素，</span><br><span class="hljs-comment"># 或将一维数组转换为方阵（非对角线元素为0）</span><br>e = np.diag(d)<br>f = np.diag(e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(d))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(e))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(f))<br><br><span class="hljs-comment"># trace, 计算对角线元素的和</span><br>g = np.trace(d)<br>g<br><br><span class="hljs-comment"># det，计算行列式</span><br>h = np.linalg.det(d)<br>h<br><br><span class="hljs-comment"># eig，计算特征值和特征向量</span><br>i = np.linalg.eig(d)<br>i<br><br><span class="hljs-comment"># inv，计算方阵的逆</span><br>tmp = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>j = np.linalg.inv(tmp)<br>j<br></code></pre></td></tr></table></figure><h4 id="5-文件写入和读取"><a href="#5-文件写入和读取" class="headerlink" title="5.文件写入和读取"></a>5.文件写入和读取</h4><ol><li>tofile()和fromfile()</li></ol><ul><li><p>tofile()将数组中的数据以二进制格式写进文件</p></li><li><p>tofile()输出的数据不保存数组形状和元素类型等信息</p></li><li><p>fromfile()函数读回数据时需要用户指定元素类型，并对数组的形状进行适当的修改</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 使用np.fromfile从文本文件&#x27;housing.data&#x27;读入数据</span><br><span class="hljs-comment"># 这里要设置参数sep = &#x27; &#x27;，表示使用空白字符来分隔数据</span><br><span class="hljs-comment"># 空格或者回车都属于空白字符，读入的数据被转化成1维数组</span><br>d = np.fromfile(<span class="hljs-string">&#x27;./work/housing.data&#x27;</span>, sep = <span class="hljs-string">&#x27; &#x27;</span>)<br>d<br></code></pre></td></tr></table></figure><ol start="2"><li>save() 和 load(),savez()</li></ol><p><u>NumPy专用的二进制格式保存数据，它们会自动处理元素类型和形状等信息</u></p><ul><li><p>如果想将多个数组保存到一个文件中，可以使用savez()，savez()的第一个参数是文件名，其后的参数都是需要保存的数组，也可以使用关键字参数为数组起名非关键字参数传递的数组会自动起名为arr_0、arr_1、…。savez()输出的是一个扩展名为npz的压缩文件，其中每个文件都是一个save()保存的npy文件，文件名和数组名相同</p></li><li><p>load()自动识别npz文件，并且返回一个类似于字典的对象，可以通过数组名作为键获取数组的内容</p></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 产生随机数组a</span><br>a = np.random.rand(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>np.save(<span class="hljs-string">&#x27;a.npy&#x27;</span>, a)<br><br><span class="hljs-comment"># 从磁盘文件&#x27;a.npy&#x27;读入数组</span><br>b = np.load(<span class="hljs-string">&#x27;a.npy&#x27;</span>)<br><br><span class="hljs-comment"># 检查a和b的数值是否一样</span><br>check = (a == b).<span class="hljs-built_in">all</span>()<br>check<br></code></pre></td></tr></table></figure><h4 id="6-统计函数"><a href="#6-统计函数" class="headerlink" title="6.统计函数"></a>6.统计函数</h4><p>可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计计算。主要包括如下统计方法：</p><ul><li><code>mean</code>：计算算术平均数，零长度数组的mean为NaN。</li><li><code>std</code>和<code>var</code>：计算标准差和方差，自由度可调（默认为n）。</li><li><code>sum</code> ：对数组中全部或某轴向的元素求和，零长度数组的sum为0。</li><li><code>max</code>和<code>min</code>：计算最大值和最小值。</li><li><code>argmin</code>和<code>argmax</code>：分别为最大和最小元素的索引。</li><li><code>cumsum</code>：计算所有元素的累加。</li><li><code>cumprod</code>：计算所有元素的累积。</li></ul><hr><p><strong>说明：</strong></p><p>sum、mean以及标准差std等聚合计算既可以当做数组的实例方法调用，也可以当做NumPy函数使用。</p><hr><h4 id="7-随机数np-random"><a href="#7-随机数np-random" class="headerlink" title="7.随机数np.random"></a>7.随机数np.random</h4><p>主要介绍创建ndarray随机数组以及随机打乱顺序、随机选取元素等相关操作的方法。</p><h5 id="7-1-创建随机ndarray数组"><a href="#7-1-创建随机ndarray数组" class="headerlink" title="7.1 创建随机ndarray数组"></a>7.1 创建随机ndarray数组</h5><p>创建随机ndarray数组主要包含设置随机种子、均匀分布和正态分布三部分内容，具体代码如下所示。</p><ul><li><p><strong>设置随机数种子</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 可以多次运行，观察程序输出结果是否一致</span><br><span class="hljs-comment"># 如果不设置随机数种子，观察多次运行输出结果是否一致</span><br>np.random.seed(<span class="hljs-number">10</span>)<br>a = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>a<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>均匀分布</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成均匀分布随机数，随机数取值范围在[0, 1)之间</span><br>a = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>a<br><span class="hljs-comment"># 生成均匀分布随机数，指定随机数取值范围和数组形状</span><br>a = np.random.uniform(low = -<span class="hljs-number">1.0</span>, high = <span class="hljs-number">1.0</span>, size=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))<br>a<br></code></pre></td></tr></table></figure></li></ul><ul><li><strong>正态分布</strong></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 生成标准正态分布随机数</span><br>a = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>a<br><span class="hljs-comment"># 生成正态分布随机数，指定均值loc和方差scale</span><br>a = np.random.normal(loc = <span class="hljs-number">1.0</span>, scale = <span class="hljs-number">1.0</span>, size = (<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br>a<br></code></pre></td></tr></table></figure><h5 id="7-2-随机打乱ndarray数组顺序"><a href="#7-2-随机打乱ndarray数组顺序" class="headerlink" title="7.2 随机打乱ndarray数组顺序"></a>7.2 随机打乱ndarray数组顺序</h5><ul><li>随机打乱1维ndarray数组顺序，发现所有元素位置都被打乱了，代码如下所示。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 生成一维数组</span><br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before random shuffle: &#x27;</span>, a)<br><span class="hljs-comment"># 打乱一维数组顺序</span><br>np.random.shuffle(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after random shuffle: &#x27;</span>, a)<br><span class="hljs-comment"># 生成一维数组</span><br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>)<br><span class="hljs-comment"># 将一维数组转化成2维数组</span><br>a = a.reshape(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before random shuffle: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-comment"># 打乱一维数组顺序</span><br>np.random.shuffle(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after random shuffle: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a))<br></code></pre></td></tr></table></figure><h5 id="7-3-随机选取元素"><a href="#7-3-随机选取元素" class="headerlink" title="7.3 随机选取元素"></a>7.3 随机选取元素</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 随机选取部分元素</span><br>a = np.arange(<span class="hljs-number">30</span>)<br>b = np.random.choice(a, size=<span class="hljs-number">5</span>)<br>b<br></code></pre></td></tr></table></figure><h4 id="8-NumPy应用举例"><a href="#8-NumPy应用举例" class="headerlink" title="8. NumPy应用举例"></a>8. NumPy应用举例</h4><h5 id="5-1-计算激活函数Sigmoid和ReLU"><a href="#5-1-计算激活函数Sigmoid和ReLU" class="headerlink" title="5.1 计算激活函数Sigmoid和ReLU"></a>5.1 计算激活函数Sigmoid和ReLU</h5><p>使用ndarray数组可以很方便的构建数学函数，并利用其底层的矢量计算能力快速实现计算。下面以神经网络中比较常用激活函数Sigmoid和ReLU为例，介绍代码实现过程。</p><ul><li><strong>计算Sigmoid激活函数</strong></li></ul><p>$$<br>y = \frac{1}{1 + e^{-x}}<br>$$</p><ul><li><strong>计算ReLU激活函数</strong></li></ul><p>$$<br>y=\left{<br>\begin{aligned}<br>0 &amp; , &amp; (x&lt;0) \<br>x &amp; , &amp; (x\ge 0)<br>\end{aligned}<br>\right.<br>$$</p><p>使用Numpy计算激活函数Sigmoid和ReLU的值，使用matplotlib画出图形，代码如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># ReLU和Sigmoid激活函数示意图</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>%matplotlib inline<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib.patches <span class="hljs-keyword">as</span> patches<br><br><span class="hljs-comment">#设置图片大小</span><br>plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-comment"># x是1维数组，数组大小是从-10. 到10.的实数，每隔0.1取一个点</span><br>x = np.arange(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0.1</span>)<br><span class="hljs-comment"># 计算 Sigmoid函数</span><br>s = <span class="hljs-number">1.0</span> / (<span class="hljs-number">1</span> + np.exp(- x))<br><br><span class="hljs-comment"># 计算ReLU函数</span><br>y = np.clip(x, a_min = <span class="hljs-number">0.</span>, a_max = <span class="hljs-literal">None</span>)<br><br><span class="hljs-comment">#########################################################</span><br><span class="hljs-comment"># 以下部分为画图程序</span><br><br><span class="hljs-comment"># 设置两个子图窗口，将Sigmoid的函数图像画在左边</span><br>f = plt.subplot(<span class="hljs-number">121</span>)<br><span class="hljs-comment"># 画出函数曲线</span><br>plt.plot(x, s, color=<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-comment"># 添加文字说明</span><br>plt.text(-<span class="hljs-number">5.</span>, <span class="hljs-number">0.9</span>, <span class="hljs-string">r&#x27;$y=\sigma(x)$&#x27;</span>, fontsize=<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 设置坐标轴格式</span><br>currentAxis=plt.gca()<br>currentAxis.xaxis.set_label_text(<span class="hljs-string">&#x27;x&#x27;</span>, fontsize=<span class="hljs-number">15</span>)<br>currentAxis.yaxis.set_label_text(<span class="hljs-string">&#x27;y&#x27;</span>, fontsize=<span class="hljs-number">15</span>)<br><br><span class="hljs-comment"># 将ReLU的函数图像画在右边</span><br>f = plt.subplot(<span class="hljs-number">122</span>)<br><span class="hljs-comment"># 画出函数曲线</span><br>plt.plot(x, y, color=<span class="hljs-string">&#x27;g&#x27;</span>)<br><span class="hljs-comment"># 添加文字说明</span><br>plt.text(-<span class="hljs-number">3.0</span>, <span class="hljs-number">9</span>, <span class="hljs-string">r&#x27;$y=ReLU(x)$&#x27;</span>, fontsize=<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 设置坐标轴格式</span><br>currentAxis=plt.gca()<br>currentAxis.xaxis.set_label_text(<span class="hljs-string">&#x27;x&#x27;</span>, fontsize=<span class="hljs-number">15</span>)<br>currentAxis.yaxis.set_label_text(<span class="hljs-string">&#x27;y&#x27;</span>, fontsize=<span class="hljs-number">15</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h5 id="5-2-图像翻转和裁剪"><a href="#5-2-图像翻转和裁剪" class="headerlink" title="5.2 图像翻转和裁剪"></a>5.2 图像翻转和裁剪</h5><p>图像是由像素点构成的矩阵，其数值可以用ndarray来表示。将上述介绍的操作用在图像数据对应的ndarray上，可以很轻松的实现图片的翻转、裁剪和亮度调整，具体代码和效果如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 导入需要的包</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 读入图片</span><br>image = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./work/images/000000001584.jpg&#x27;</span>)<br>image = np.array(image)<br><span class="hljs-comment"># 查看数据形状，其形状是[H, W, 3]，</span><br><span class="hljs-comment"># 其中H代表高度， W是宽度，3代表RGB三个通道</span><br>image.shape<br><span class="hljs-comment"># 原始图片</span><br>plt.imshow(image)<br><span class="hljs-comment"># 垂直方向翻转</span><br><span class="hljs-comment"># 这里使用数组切片的方式来完成，</span><br><span class="hljs-comment"># 相当于将图片最后一行挪到第一行，</span><br><span class="hljs-comment"># 倒数第二行挪到第二行，..., </span><br><span class="hljs-comment"># 第一行挪到倒数第一行</span><br><span class="hljs-comment"># 对于行指标，使用::-1来表示切片，</span><br><span class="hljs-comment"># 负数步长表示以最后一个元素为起点，向左走寻找下一个点</span><br><span class="hljs-comment"># 对于列指标和RGB通道，仅使用:表示该维度不改变</span><br>image2 = image[::-<span class="hljs-number">1</span>, :, :]<br>plt.imshow(image2)<br><span class="hljs-comment"># 水平方向翻转</span><br>image3 = image[:, ::-<span class="hljs-number">1</span>, :]<br>plt.imshow(image3)<br><span class="hljs-comment"># 保存图片</span><br>im3 = Image.fromarray(image3)<br>im3.save(<span class="hljs-string">&#x27;im3.jpg&#x27;</span>)<br><span class="hljs-comment">#  高度方向裁剪</span><br>H, W = image.shape[<span class="hljs-number">0</span>], image.shape[<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 注意此处用整除，H_start必须为整数</span><br>H1 = H // <span class="hljs-number">2</span> <br>H2 = H<br>image4 = image[H1:H2, :, :]<br>plt.imshow(image4)<br><span class="hljs-comment">#  宽度方向裁剪</span><br>W1 = W//<span class="hljs-number">6</span><br>W2 = W//<span class="hljs-number">3</span> * <span class="hljs-number">2</span><br>image5 = image[:, W1:W2, :]<br>plt.imshow(image5)<br><span class="hljs-comment"># 两个方向同时裁剪</span><br>image5 = image[H1:H2, \<br>               W1:W2, :]<br>plt.imshow(image5)<br><span class="hljs-comment"># 调整亮度</span><br>image6 = image * <span class="hljs-number">0.5</span><br>plt.imshow(image6.astype(<span class="hljs-string">&#x27;uint8&#x27;</span>))<br><span class="hljs-comment"># 调整亮度</span><br>image7 = image * <span class="hljs-number">2.0</span><br><span class="hljs-comment"># 由于图片的RGB像素值必须在0-255之间，</span><br><span class="hljs-comment"># 此处使用np.clip进行数值裁剪</span><br>image7 = np.clip(image7, \<br>        a_min=<span class="hljs-literal">None</span>, a_max=<span class="hljs-number">255.</span>)<br>plt.imshow(image7.astype(<span class="hljs-string">&#x27;uint8&#x27;</span>))<br><span class="hljs-comment">#高度方向每隔一行取像素点</span><br>image8 = image[::<span class="hljs-number">2</span>, :, :]<br>plt.imshow(image8)<br><span class="hljs-comment">#宽度方向每隔一列取像素点</span><br>image9 = image[:, ::<span class="hljs-number">2</span>, :]<br>plt.imshow(image9)<br><span class="hljs-comment">#间隔行列采样，图像尺寸会减半，清晰度变差</span><br>image10 = image[::<span class="hljs-number">2</span>, ::<span class="hljs-number">2</span>, :]<br>plt.imshow(image10)<br>image10.shape<br></code></pre></td></tr></table></figure><h4 id="9-Paddle-Tensor"><a href="#9-Paddle-Tensor" class="headerlink" title="9. Paddle.Tensor"></a>9. Paddle.Tensor</h4><p>飞桨使用Tensor数据结构来表示数据，在神经网络中传递的数据均为Tensor。Tensor可以将其理解为多维数组，其可以具有任意多的维度，不同Tensor可以有不同的数据类型 (dtype) 和形状 (shape)。同一Tensor的中所有元素的数据类型均相同。如果你对 Numpy 熟悉，Tensor是类似于Numpy数组（array）的概念。</p><p>飞桨的Tensor高度兼容Numpy数组（array），在基础数据结构和方法上，增加了很多适用于深度学习任务的参数和方法，如：反向计算梯度，更灵活的指定运行硬件等。</p><p>如下述代码声明了两个Tensor类型的向量$x$和$y$，指定CPU为计算运行硬件，要自动反向求导。两个向量除了可以与Numpy类似的做相乘的操作之外，还可以直接获取到每个变量的导数值。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br>x = paddle.to_tensor([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>], dtype=<span class="hljs-string">&#x27;float32&#x27;</span>, place=paddle.CPUPlace(), stop_gradient=<span class="hljs-literal">False</span>)<br>y = paddle.to_tensor([<span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>], dtype=<span class="hljs-string">&#x27;float32&#x27;</span>, place=paddle.CPUPlace(), stop_gradient=<span class="hljs-literal">False</span>)<br>z = x * y<br>z.backward()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;tensor&#x27;s grad is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(x.grad))<br></code></pre></td></tr></table></figure><blockquote><p>此外，飞桨Tensor还可以与Numpy的数组方便的互转，具体方法如下。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>tensor_to_convert = paddle.to_tensor([<span class="hljs-number">1.</span>,<span class="hljs-number">2.</span>])<br><br><span class="hljs-comment">#通过 Tensor.numpy() 方法，将 Tensor 转化为 Numpy数组</span><br>tensor_to_convert.numpy()<br><br><span class="hljs-comment">#通过paddle.to_tensor() 方法，将 Numpy数组 转化为 Tensor</span><br>tensor_temp = paddle.to_tensor(np.array([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>]))<br></code></pre></td></tr></table></figure><h5 id="推荐优先使用Paddle-Tensor的场景"><a href="#推荐优先使用Paddle-Tensor的场景" class="headerlink" title="推荐优先使用Paddle.Tensor的场景"></a>推荐优先使用Paddle.Tensor的场景</h5><p>虽然Paddle的Tensor可以与Numpy的数组方便的互相转换，但在实际中两者频繁转换会性能消耗。飞桨的Tensor支持的操作已经基本覆盖Numpy并有所加强，所以推荐用户在程序中优先使用飞桨的Tensor完成各种数据处理和组网操作。具体分为如下两种场景：</p><ul><li>场景一：在组网程序中，对网络中向量的处理，务必使用Tensor，而不建议转成Numpy的数组。如果在组网过程中转成Numpy的数组，并使用Numpy的函数会拖慢整体性能；</li><li>场景二：在数据处理和模型后处理等场景，建议优先使用Tensor，主要是飞桨为AI硬件做了大量的适配和性能优化工作，部分情况下会获得更好的使用体验和性能。</li></ul><h3 id="Pandas库"><a href="#Pandas库" class="headerlink" title="Pandas库"></a>Pandas库</h3><p>注：提供高性能易用数据类型和分析工具；</p><p>​        pandas基于numpy实现，常与numpy和matplotlib一同使用。</p><p><strong>Pandas核心数据结构：</strong></p><center><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/a8c80653f39b479dab9f6867a638b64c405e79d6540c4307a22f43c4b0e228bc" alt="img" style="zoom: 67%;" /></center><center><center><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/c8f06f423acc488fb391bca5dcf8f2b02d7444ef526f41599b6b430ae24659c1" alt="img" style="zoom: 50%;" /></center><h4 id="1-Series"><a href="#1-Series" class="headerlink" title="1. Series"></a>1. Series</h4><p>注：Series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类    型）以及一组与之相关的数据标签（即索引）组成.可理解为带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>s = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>])<span class="hljs-comment">#将列表转为series对象</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>注：Series中可以使用index设置索引列表，与字典不同的是，Series允许索引重复。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#与字典不同的是：Series允许索引重复</span><br>s = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>],index=[<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">100</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>])<br><span class="hljs-built_in">print</span>(s)<br>d = &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>&#125;<br>pd.Series(d)<br>d = &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">2</span>&#125;<span class="hljs-comment">#将字典实例化</span><br>pd.Series(d)<br><span class="hljs-built_in">print</span>(s.values)<span class="hljs-comment">#取键值</span><br><span class="hljs-built_in">print</span>(s.index)<span class="hljs-comment">#取键</span><br><span class="hljs-comment">#与普通numpy数组相比，可以通过索引的方式选取Series中的单个或一组值</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">100</span>])<br><span class="hljs-built_in">print</span>(s[[<span class="hljs-number">400</span>, <span class="hljs-number">500</span>]])<br><span class="hljs-comment">#对应元素求和</span><br><span class="hljs-built_in">print</span>(s+s)<br><span class="hljs-comment">#对应元素乘</span><br><span class="hljs-built_in">print</span>(s*<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>注：Series中最重要的一个功能是它会在算术运算中基于标签自动对齐不同索引的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">obj1 = pd.Series(&#123;<span class="hljs-string">&quot;Ohio&quot;</span>: <span class="hljs-number">35000</span>, <span class="hljs-string">&quot;Oregon&quot;</span>: <span class="hljs-number">16000</span>, <span class="hljs-string">&quot;Texas&quot;</span>: <span class="hljs-number">71000</span>, <span class="hljs-string">&quot;Utah&quot;</span>: <span class="hljs-number">5000</span>&#125;)<br><span class="hljs-built_in">print</span>(obj1)<br>obj2 = pd.Series(&#123;<span class="hljs-string">&quot;California&quot;</span>: np.nan, <span class="hljs-string">&quot;Ohio&quot;</span>: <span class="hljs-number">35000</span>, <span class="hljs-string">&quot;Oregon&quot;</span>: <span class="hljs-number">16000</span>, <span class="hljs-string">&quot;Texas&quot;</span>: <span class="hljs-number">71000</span>&#125;)<br><span class="hljs-built_in">print</span>(obj2)<br><span class="hljs-built_in">print</span>(obj1 + obj2)<br><br><span class="hljs-comment">#可以切片，基础运算时没有匹配的键值会被设为NaN</span><br>s = pd.Series(np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]), index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>])<br><br><span class="hljs-built_in">print</span>(s[<span class="hljs-string">&#x27;a&#x27;</span>])<br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">1</span>:])<br><br><span class="hljs-built_in">print</span>(s[:-<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">1</span>:] + s[:-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h4 id="2-DataFrame"><a href="#2-DataFrame" class="headerlink" title="2. DataFrame"></a>2. DataFrame</h4><p>注：</p><ul><li>DataFrame是一个表格型的数据结构，类似于Excel或sql表</li></ul><p>它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）</p><p>DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。</p><ul><li><strong>用多维数组字典、列表字典生成 DataFrame。</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#如果指定了列顺序，则DataFrame的列就会按照指定顺序进行排列, 跟原Series一样，如果传入的列在数据中找不到，就会产生NAN值.</span><br>data = &#123;<span class="hljs-string">&#x27;state&#x27;</span>: [<span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Ohio&#x27;</span>, <span class="hljs-string">&#x27;Nevada&#x27;</span>, <span class="hljs-string">&#x27;Nevada&#x27;</span>], <span class="hljs-string">&#x27;year&#x27;</span>: [<span class="hljs-number">2000</span>, <span class="hljs-number">2001</span>, <span class="hljs-number">2002</span>, <span class="hljs-number">2001</span>, <span class="hljs-number">2002</span>], <span class="hljs-string">&#x27;pop&#x27;</span>: [<span class="hljs-number">1.5</span>, <span class="hljs-number">1.7</span>, <span class="hljs-number">3.6</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">2.9</span>]&#125;<br>frame = pd.DataFrame(data,columns=[<span class="hljs-string">&#x27;year&#x27;</span>, <span class="hljs-string">&#x27;state&#x27;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;debt&#x27;</span>])<br><span class="hljs-built_in">print</span>(frame)<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910232915712.png" alt="image-20220910232915712"  /><ul><li><strong>用 Series 字典或字典生成 DataFrame, 即Series可以作为DataFrame的子集。</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&#x27;one&#x27;</span>: pd.Series([<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]),<br>     <span class="hljs-string">&#x27;two&#x27;</span>: pd.Series([<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>], index=[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>])&#125;<br><span class="hljs-built_in">print</span>(pd.DataFrame(d))<br><br><span class="hljs-comment">#通过类似字典标记的方式或属性的方式，可以将DataFrame的列获取为一个Series,返回的Series拥有原DataFrame相同的索引</span><br><span class="hljs-built_in">print</span>(frame2[<span class="hljs-string">&#x27;state&#x27;</span>])<br><br><span class="hljs-comment">#列可以通过赋值的方式进行修改,例如，给那个空的“delt”列赋上一个标量值或一组值</span><br>frame2[<span class="hljs-string">&#x27;debt&#x27;</span>] = <span class="hljs-number">16.5</span><br><span class="hljs-built_in">print</span>(frame2)<br><br><span class="hljs-comment">#新增一个Series</span><br>frame2[<span class="hljs-string">&#x27;new&#x27;</span>] = frame2[<span class="hljs-string">&#x27;debt&#x27;</span> ]* frame2[<span class="hljs-string">&#x27;pop&#x27;</span>] <br><span class="hljs-built_in">print</span>(frame2)<br><br><span class="hljs-comment">#用numpy数组赋值</span><br>frame2[<span class="hljs-string">&#x27;debt&#x27;</span>] = np.arange(<span class="hljs-number">5.</span>)<br><span class="hljs-built_in">print</span>(frame2)<br></code></pre></td></tr></table></figure><h4 id="3-索引对象常用方法"><a href="#3-索引对象常用方法" class="headerlink" title="3. 索引对象常用方法"></a>3. 索引对象常用方法</h4><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193234679.png" alt="image-20220911193234679" style="zoom:50%;" /><h4 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4.常用方法"></a>4.常用方法</h4><ul><li><p>data.<a href="https://so.csdn.net/so/search?q=shape&spm=1001.2101.3001.7020">shape</a>返回的是元组（data必须是浮点数类型）</p><ul><li><p>data.shape[0]是行数</p></li><li><p>data.shape[1]是列数</p></li></ul></li></ul><h3 id="PIL库"><a href="#PIL库" class="headerlink" title="PIL库"></a>PIL库</h3><p>注：</p><ul><li><p>PIL库是一个具有强大图像处理能力的第三方库。</p></li><li><p>在命令行下的安装方法: pip install pillow。</p></li><li><p>在使用过程中的弓|入方法: from PIL import Image。</p></li><li><p>图像的组成：由RGB三原色组成,RGB图像中，一种彩色由R、G、B三原色按照比例混合而成。0-255区分不同亮度的颜色。图像的数组表示：图像是一个由像素组成的矩阵，每个元素是一个RGB值。</p></li><li><p>Image 是 PIL 库中代表一个图像的类（对象）。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment">#显示matplotlib生成的图形</span><br>%matplotlib inline<br><br><span class="hljs-comment">#读取图片</span><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/home/aistudio/work/yushuxin.jpg&#x27;</span>) <br><br><span class="hljs-comment">#显示图片</span><br><span class="hljs-comment">#img.show() #自动调用计算机上显示图片的工具</span><br>plt.imshow(img)  <br>plt.show(img)   <br><br><span class="hljs-comment">#获得图像的模式和大小</span><br>img_mode = img.mode<br><span class="hljs-built_in">print</span>(img_mode)<br>width,height = img.size<br><span class="hljs-built_in">print</span>(width,height)<br><br><span class="hljs-comment">#将图片旋转45度</span><br>img_rotate = img.rotate(<span class="hljs-number">45</span>) <br><br><span class="hljs-comment">#左右镜像</span><br>img3_lr = img3.transpose(Image.FLIP_LEFT_RIGHT)<br><span class="hljs-comment">#上下镜像</span><br>img3_bt = img3.transpose(Image.FLIP_TOP_BOTTOM)<br><br><span class="hljs-comment">#缩放</span><br>width,height = img2.size<br>img2_resize_result = img2.resize((<span class="hljs-built_in">int</span>(width*<span class="hljs-number">0.6</span>),<span class="hljs-built_in">int</span>(height*<span class="hljs-number">0.6</span>)),Image.ANTIALIAS)<br><br><span class="hljs-comment">#剪切 crop()四个参数分别是：(左上角点的x坐标，左上角点的y坐标，右下角点的x坐标，右下角点的y坐标)</span><br>img1_crop_result = img1.crop((<span class="hljs-number">126</span>,<span class="hljs-number">0</span>,<span class="hljs-number">381</span>,<span class="hljs-number">300</span>))<br><span class="hljs-comment">#保存图片</span><br>img1_crop_result.save(<span class="hljs-string">&#x27;path&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><h3 id="Matplotlib库"><a href="#Matplotlib库" class="headerlink" title="Matplotlib库"></a>Matplotlib库</h3><p>注：</p><ul><li>Matplotlib库由各种可视化类构成，内部结构复杂。</li><li>matplotlib.pylot是绘制各类可视化图形的命令字库。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np <br><br><span class="hljs-comment">#显示matplotlib生成的图形</span><br>%matplotlib inline<br><br>x = np.linspace(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">50</span>) <span class="hljs-comment">#等差数列，从-1到1生成50个等间距的数的数组</span><br>y1 = <span class="hljs-number">2</span>*x + <span class="hljs-number">1</span><br>y2 = x**<span class="hljs-number">2</span><br><br><span class="hljs-comment">#传入x,y,通过plot()绘制出折线图 </span><br>plt.figure(figsize=(<span class="hljs-number">7</span>,<span class="hljs-number">5</span>))<span class="hljs-comment">#保持图像</span><br>plt.plot(x,y1,color=<span class="hljs-string">&#x27;red&#x27;</span>,linewidth=<span class="hljs-number">1</span>)<span class="hljs-comment">#连续图</span><br>plt.plot(x,y2,color=<span class="hljs-string">&#x27;blue&#x27;</span>,linewidth=<span class="hljs-number">5</span>)<br>plt.legend(handles=[l1,l2],labels=[<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-string">&#x27;bb&#x27;</span>],loc=<span class="hljs-string">&#x27;best&#x27;</span>)<span class="hljs-comment">#图例</span><br>plt.xlabel(<span class="hljs-string">&#x27;x&#x27;</span>,fontsize=<span class="hljs-number">20</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;y&#x27;</span>,fontsize=<span class="hljs-number">20</span>)<br>plt.xlim((<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))  <span class="hljs-comment">#x轴只截取一段进行显示</span><br>plt.ylim((<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))  <span class="hljs-comment">#y轴只截取一段进行显示</span><br>plt.show()<span class="hljs-comment">#显示图形</span><br><br><span class="hljs-comment">#绘制离散图</span><br>dots1 =np.random.rand(<span class="hljs-number">50</span>)<br>dots2 =np.random.rand(<span class="hljs-number">50</span>)<br>plt.scatter(dots1,dots2,c=<span class="hljs-string">&#x27;red&#x27;</span>,alpha=<span class="hljs-number">0.5</span>) <span class="hljs-comment">#c表示颜色，alpha表示透明度</span><br>plt.show()<br><br><span class="hljs-comment">#绘制直方图（柱状图）</span><br>x = np.arange(<span class="hljs-number">10</span>)<br>y = <span class="hljs-number">2</span>**x+<span class="hljs-number">10</span><br>plt.bar(x,y,facecolor=<span class="hljs-string">&#x27;#9999ff&#x27;</span>,edgecolor=<span class="hljs-string">&#x27;white&#x27;</span>)<br><span class="hljs-keyword">for</span> ax,ay <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x,y):<span class="hljs-comment">#顶部居中标注纵坐标</span><br>    plt.text(ax,ay,<span class="hljs-string">&#x27;%.1f&#x27;</span> % ay,ha=<span class="hljs-string">&#x27;center&#x27;</span>,va=<span class="hljs-string">&#x27;bottom&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="基础图标函数"><a href="#基础图标函数" class="headerlink" title="基础图标函数"></a>基础图标函数</h4><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193426778.png" alt="image-20220911193426778" style="zoom:67%;" /><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png" alt="image-20220911193512661"></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png"></p><hr><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><p>简介：深层神经网络一般都需要大量的训练数据才能获得比较理想的结果。在数据量有限的情况下，可以通过数据增强( Data Augmentation )来增加训练样本的多样性，提高模型鲁棒性。<br>目的：</p><ul><li><p>增加数据量</p></li><li><p>采集更多的图像特征</p></li><li><p>使网络可见更多的数据变化</p></li><li><p>提高模型的泛化能力</p></li></ul><p>增强方式：</p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911194420932.png" alt="image-20220911194420932" style="zoom: 80%;" /><p>下图所示为一些基础的图像增强方法，如果我们发现数据集中的猫均是标准姿势，而真实场景中的猫时常有倾斜身姿的情况，那么在原始图片数据的基础上采用旋转的方法造一批数据加入到数据集会有助于提升模型效果。类似的，如果数据集中均是高清图片，而真实场景中经常有拍照模糊或曝光异常的情况，则采用降采样和调整饱和度的方式造一批数据，有助于提升模型的效果。<br><img src="https://ai-studio-static-online.cdn.bcebos.com/54adf1fa9d7e4dc9a6a23cdf42417fbf624a0b3406564b9990b7852ce8fac9c7"><br>基础的图像增强方法</p><p>下图展示了一些高阶的图像增强方法，裁剪和拼接分别适合于“数据集中物体完整，但实际场景中物体存在遮挡”，以及“数据集中物体背景单一，而实际场景中物体的背景多变”的两种情况。<br><img src="https://ai-studio-static-online.cdn.bcebos.com/16edd4f2b23d48ae8ba699e4cd00d65a75a43e7a8b7e4f8a98513588031f1e32"><br>高阶的数据增强方法</p><p>下图展示了专门针对文本识别的数据增强方法TIA（Text Image augmentation），对应到“数据集中字体多是平面，而真实场景中的字体往往会在曲面上扭曲的情况，比如拿着相机对一张凸凹不平摆放的纸面拍摄的文字就会存在这种情况”。<br><img src="https://ai-studio-static-online.cdn.bcebos.com/3dbcf420c25e4d62b21500fa1278bb17e1c219ebcd96457a8fc5cf10e4c4e360"><br>TIA（Text Image augmentation）：针对文本识别数据增强方法</p><p>下图展示了一种新颖的数据增强技巧，用于很多现实中的文字检测，要面临复杂多样的背景，比如店铺牌匾上的文字，周围的背景可能是非常多样的。将部分文本区域剪辑出来，随机摆放到图片的各种位置来生成新的训练数据。这样的数据会大大提高模型在复杂背景中，检测到文字内容的能力。<br><img src="https://ai-studio-static-online.cdn.bcebos.com/7dd04e92862540b390b11246b2375a828df2237b79a64aed9a698a2272fa7b46"><br>CopyPaste：一种新颖的数据增强技巧</p><h3 id="1-随机旋转"><a href="#1-随机旋转" class="headerlink" title="1. 随机旋转"></a>1. 随机旋转</h3><p>注：<strong>使用numpy+ PIL库进行图像的随机旋转</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate_image</span>(<span class="hljs-params"> img </span>): <br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    图像增强，增加随机旋转角度</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    angle = np.random.randint( -<span class="hljs-number">14</span>, <span class="hljs-number">15</span>)<br>    img = img.rotate(angle)<br>    <span class="hljs-keyword">return</span> img<br><br></code></pre></td></tr></table></figure><h3 id="2-随机亮度调整"><a href="#2-随机亮度调整" class="headerlink" title="2. 随机亮度调整"></a>2. 随机亮度调整</h3><p>注：使用numpy+ PIL库进行图像的随机亮度调整</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_brightness</span>(<span class="hljs-params">img</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    图像增强，亮度调整</span><br><span class="hljs-string">    :param img:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    prob = np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> prob &lt; train_parameters[<span class="hljs-string">&#x27;image_enhance_strategy&#x27;</span>][<span class="hljs-string">&#x27;brightness_prob&#x27;</span>]:<br>        brightness_delta = train_parameters[<span class="hljs-string">&#x27;image_enhance_strategy&#x27;</span>][<span class="hljs-string">&#x27;brightness_delta&#x27;</span>] <br>        delta = np.random.uniform(-brightness_delta, brightness_delta) + <span class="hljs-number">1</span><br>        img = ImageEnhance.Brightness(img).enhance(delta)<br>    <span class="hljs-keyword">return</span> img<br></code></pre></td></tr></table></figure><h3 id="3-训练过程可视化"><a href="#3-训练过程可视化" class="headerlink" title="3. 训练过程可视化"></a>3. 训练过程可视化</h3><p>注：使用Matplotlib库绘制深度学习训练过程中,随着数据的增加，误差与准确率的变化趋势,从而对模型效果进行评估。观察到模型的误差相对较低,而准确率较高，接下来可以使用该模型进行预测。</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911195508553.png" alt="image-20220911195508553"></p><h1 id="入门实战深度学习"><a href="#入门实战深度学习" class="headerlink" title="入门实战深度学习"></a>入门实战深度学习</h1><h2 id="1-深度学习模型的基本步骤"><a href="#1-深度学习模型的基本步骤" class="headerlink" title="1.深度学习模型的基本步骤"></a>1.深度学习模型的基本步骤</h2><p><img src="https://ai-studio-static-online.cdn.bcebos.com/9f7cc7174c6f482b9b0d3a1f9bdc1195cf9bf0bc24d140da87aceba2dde4ea5d" alt="step"></p><h2 id="2-实例一“波士顿房价预测”"><a href="#2-实例一“波士顿房价预测”" class="headerlink" title="2.实例一“波士顿房价预测”"></a>2.实例一“波士顿房价预测”</h2><h3 id="2-1-数据处理"><a href="#2-1-数据处理" class="headerlink" title="2.1 数据处理"></a>2.1 数据处理</h3><p>数据处理包含五个部分：数据导入、数据形状变换、数据集划分、数据归一化处理和封装<code>load data</code>函数。数据预处理后，才能被模型调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入需要用到的package</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> json<br><span class="hljs-comment"># 读入训练数据</span><br>datafile = <span class="hljs-string">&#x27;./work/housing.data&#x27;</span><br>data = np.fromfile(datafile, sep=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-1-2-数据形状变换"><a href="#2-1-2-数据形状变换" class="headerlink" title="2.1.2 数据形状变换"></a>2.1.2 数据形状变换</h4><p>由于读入的原始数据是1维的，所有数据都连在一起。因此需要我们将数据的形状进行变换，形成一个2维的矩阵，每行为一个数据样本（14个值），每个数据样本包含13个XX<em>X</em>（影响房价的特征）和一个YY<em>Y</em>（该类型房屋的均价）.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读入之后的数据被转化成1维array，其中array的第0-13项是第一条数据，第14-27项是第二条数据，以此类推.... </span><br><span class="hljs-comment"># 这里对原始数据做reshape，变成N x 14的形式</span><br>feature_names = [ <span class="hljs-string">&#x27;CRIM&#x27;</span>, <span class="hljs-string">&#x27;ZN&#x27;</span>, <span class="hljs-string">&#x27;INDUS&#x27;</span>, <span class="hljs-string">&#x27;CHAS&#x27;</span>, <span class="hljs-string">&#x27;NOX&#x27;</span>, <span class="hljs-string">&#x27;RM&#x27;</span>, <span class="hljs-string">&#x27;AGE&#x27;</span>,<span class="hljs-string">&#x27;DIS&#x27;</span>, <br>                 <span class="hljs-string">&#x27;RAD&#x27;</span>, <span class="hljs-string">&#x27;TAX&#x27;</span>, <span class="hljs-string">&#x27;PTRATIO&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;LSTAT&#x27;</span>, <span class="hljs-string">&#x27;MEDV&#x27;</span> ]<br>feature_num = <span class="hljs-built_in">len</span>(feature_names)<br>data = data.reshape([data.shape[<span class="hljs-number">0</span>] // feature_num, feature_num])<br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-comment"># 查看数据</span><br>x = data[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(x.shape)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h4 id="2-1-3-数据集划分"><a href="#2-1-3-数据集划分" class="headerlink" title="2.1.3 数据集划分"></a>2.1.3 数据集划分</h4><p>将数据集划分成<strong>训练集和测试集</strong>，其中训练集用于确定模型的参数，测试集用于评判模型的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将80%的数据用作训练集，20%用作测试集</span><br>ratio = <span class="hljs-number">0.8</span><br>offset = <span class="hljs-built_in">int</span>(data.shape[<span class="hljs-number">0</span>] * ratio)<br>training_data = data[:offset]<br>training_data.shape<br></code></pre></td></tr></table></figure><h4 id="2-1-4-数据归一化处理"><a href="#2-1-4-数据归一化处理" class="headerlink" title="2.1.4 数据归一化处理"></a>2.1.4 数据归一化处理</h4><p>对每个特征进行归一化处理，使得每个特征的取值缩放到0~1之间。这样做有两个好处：一是模型训练更高效，在本节的后半部分会详细说明；二是特征前的权重大小可以代表该变量对预测结果的贡献度（因为每个特征值本身的范围相同）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算train数据集的最大值，最小值，平均值</span><br>maximums, minimums, avgs = \<br>                     training_data.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>), \<span class="hljs-comment">#按行求各行最大值</span><br>                     training_data.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>), \<br>     training_data.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>) / training_data.shape[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 对数据进行归一化处理</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(feature_num):<br>    <span class="hljs-comment">#print(maximums[i], minimums[i], avgs[i])</span><br>    data[:, i] = (data[:, i] - minimums[i]) / (maximums[i] - minimums[i])<br></code></pre></td></tr></table></figure><h4 id="2-1-5-封装成load-data函数"><a href="#2-1-5-封装成load-data函数" class="headerlink" title="2.1.5 封装成load data函数"></a>2.1.5 封装成load data函数</h4><p>将上述几个数据处理操作封装成<code>load data</code>函数，以便下一步模型的调用，实现方法如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>():<br>    <span class="hljs-comment"># 从文件导入数据</span><br>    datafile = <span class="hljs-string">&#x27;./work/housing.data&#x27;</span><br>    data = np.fromfile(datafile, sep=<span class="hljs-string">&#x27; &#x27;</span>)<br><br>    <span class="hljs-comment"># 每条数据包括14项，其中前面13项是影响因素，第14项是相应的房屋价格中位数</span><br>    feature_names = [ <span class="hljs-string">&#x27;CRIM&#x27;</span>, <span class="hljs-string">&#x27;ZN&#x27;</span>, <span class="hljs-string">&#x27;INDUS&#x27;</span>, <span class="hljs-string">&#x27;CHAS&#x27;</span>, <span class="hljs-string">&#x27;NOX&#x27;</span>, <span class="hljs-string">&#x27;RM&#x27;</span>, <span class="hljs-string">&#x27;AGE&#x27;</span>, \<br>                      <span class="hljs-string">&#x27;DIS&#x27;</span>, <span class="hljs-string">&#x27;RAD&#x27;</span>, <span class="hljs-string">&#x27;TAX&#x27;</span>, <span class="hljs-string">&#x27;PTRATIO&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;LSTAT&#x27;</span>, <span class="hljs-string">&#x27;MEDV&#x27;</span> ]<br>    feature_num = <span class="hljs-built_in">len</span>(feature_names)<br><br>    <span class="hljs-comment"># 将原始数据进行Reshape，变成[N, 14]这样的形状</span><br>    data = data.reshape([data.shape[<span class="hljs-number">0</span>] // feature_num, feature_num])<br><br>    <span class="hljs-comment"># 将原数据集拆分成训练集和测试集</span><br>    <span class="hljs-comment"># 这里使用80%的数据做训练，20%的数据做测试</span><br>    <span class="hljs-comment"># 测试集和训练集必须是没有交集的</span><br>    ratio = <span class="hljs-number">0.8</span><br>    offset = <span class="hljs-built_in">int</span>(data.shape[<span class="hljs-number">0</span>] * ratio)<br>    training_data = data[:offset]<br><br>    <span class="hljs-comment"># 计算训练集的最大值，最小值，平均值</span><br>    maximums, minimums, avgs = training_data.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>), training_data.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>), \<br>                                 training_data.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>) / training_data.shape[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 对数据进行归一化处理</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(feature_num):<br>        <span class="hljs-comment">#print(maximums[i], minimums[i], avgs[i])</span><br>        data[:, i] = (data[:, i] - minimums[i]) / (maximums[i] - minimums[i])<br><br>    <span class="hljs-comment"># 训练集和测试集的划分比例</span><br>    training_data = data[:offset]<br>    test_data = data[offset:]<br><br>    <span class="hljs-keyword">return</span> training_data, test_data<br><span class="hljs-comment"># 获取数据</span><br>training_data, test_data = load_data()<br>x = training_data[:, :-<span class="hljs-number">1</span>]<br>y = training_data[:, -<span class="hljs-number">1</span>:]<br><span class="hljs-comment"># 查看第一个样本的数据</span><br><span class="hljs-built_in">print</span>(x[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(y[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h3 id="2-2-模型设计"><a href="#2-2-模型设计" class="headerlink" title="2.2 模型设计"></a>2.2 模型设计</h3><p>模型设计是深度学习模型关键要素之一，也称为网络结构设计，相当于模型的假设空间，即实现模型“前向计算”（从输入到输出）的过程。</p><p>如果将输入特征和输出预测值均以向量表示，输入特征$x$有13个分量，$y$有1个分量，那么参数权重的形状（shape）是$13 \times 1$。假设我们以如下任意数字赋值参数做初始化：</p><p>$w=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,−0.1,−0.2,−0.3,−0.4,0.0]$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">w = [<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.7</span>, <span class="hljs-number">0.8</span>, -<span class="hljs-number">0.1</span>, -<span class="hljs-number">0.2</span>, -<span class="hljs-number">0.3</span>, -<span class="hljs-number">0.4</span>, <span class="hljs-number">0.0</span>]<br>w = np.array(w).reshape([<span class="hljs-number">13</span>, <span class="hljs-number">1</span>])<span class="hljs-comment">#参数转为列向量进行矩阵乘法</span><br></code></pre></td></tr></table></figure><p>取出第1条样本数据，观察样本的特征向量与参数向量相乘的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x1=x[<span class="hljs-number">0</span>]<br>t = np.dot(x1, w)<br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><p>完整的线性回归公式，还需要初始化偏移量$b$，同样随意赋初值-0.2。那么，线性回归模型的完整输出是$z=t+b$，这个从特征和参数计算输出值的过程称为“前向计算”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">b = -<span class="hljs-number">0.2</span><br>z = t + b<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><p>将上述计算预测输出的过程以“类和对象”的方式来描述，类成员变量有参数$w$和$b$。通过写一个<code>forward</code>函数（代表“前向计算”）完成上述从特征和参数到输出预测值的计算过程，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，</span><br>        <span class="hljs-comment"># 此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><span class="hljs-comment">#初始偏移量为0.0</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br></code></pre></td></tr></table></figure><p>基于Network类的定义，模型的计算过程如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">net = Network(<span class="hljs-number">13</span>)<br>x1 = x[<span class="hljs-number">0</span>]<br>y1 = y[<span class="hljs-number">0</span>]<br>z = net.forward(x1)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><p>从上述前向计算的过程可见，线性回归也可以表示成一种简单的神经网络（只有一个神经元，且激活函数为恒等式）。这也是机器学习模型普遍为深度学习模型替代的原因：由于深度学习网络强大的表示能力，很多传统机器学习模型的学习能力等同于相对简单的深度学习模型。</p><h3 id="2-3-训练配置"><a href="#2-3-训练配置" class="headerlink" title="2.3 训练配置"></a>2.3 训练配置</h3><p>模型设计完成后，需要通过训练配置寻找模型的最优值，即通过损失函数来衡量模型的好坏。训练配置也是深度学习模型关键要素之一。</p><p>通过模型计算$x_{1}$表示的影响因素所对应的房价应该是$z$ 但实际数据告诉我们房价是$y$。这时我们需要有某种指标来衡量预测值$z$跟真实值$y$之间的差距。对于回归问题，最常采用的衡量方法是使用均方误差作为评价模型好坏的指标，具体定义如下：</p><p>$$<br>Loss = (y - z)^2<br>$$<br>上式中的$Loss$（简记为: $L$）通常也被称作损失函数，它是衡量模型好坏的指标。读者可能会奇怪：如果要衡量预测房价和真实房价之间的差距，是否将每一个样本的差距的绝对值加和即可？差距绝对值加和是更加直观和朴素的思路，为何要平方加和？ 损失函数的设计不仅要考虑准确衡量问题的“合理性”，通常还要考虑“易于优化求解”。至于这个问题的答案，在介绍完优化算法后再揭示。</p><p>在回归问题中，<strong>均方误差</strong>是一种比较常见的形式，分类问题中通常会采用<strong>交叉熵</strong>作为损失函数，在后续的章节中会更详细的介绍。对一个样本计算损失函数值的实现如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Loss = (y1 - z)*(y1 - z)<br><span class="hljs-built_in">print</span>(Loss)<br></code></pre></td></tr></table></figure><p>因为计算损失函数时需要把每个样本的损失函数值都考虑到，所以我们需要对单个样本的损失函数进行求和，并除以样本总数$N$。<br>$$<br>L= \frac{1}{N}\sum_{i=1}^N{(y_i - z_i)^2}<br>$$</p><p>在Network类下面添加损失函数的计算过程如下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        cost = error * error<br>        cost = np.mean(cost)<br>        <span class="hljs-keyword">return</span> cost<br></code></pre></td></tr></table></figure><p>使用定义的Network类，可以方便的计算预测值和损失函数。需要注意的是，类中的变量$x$, $w$，$b$, $z$, $error$等均是向量。以变量$x$为例，共有两个维度，一个代表特征数量（值为13），一个代表样本数量，代码如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py">net = Network(<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 此处可以一次性计算多个样本的预测值和损失函数</span><br>x1 = x[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>y1 = y[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;actuality: &#x27;</span>,y1)<br>z = net.forward(x1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;predict: &#x27;</span>, z)<br>loss = net.loss(z, y1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;loss:&#x27;</span>, loss)<br></code></pre></td></tr></table></figure><h3 id="2-4-训练过程"><a href="#2-4-训练过程" class="headerlink" title="2.4 训练过程"></a>2.4 训练过程</h3><p>上述计算过程描述了如何构建神经网络，通过神经网络完成预测值和损失函数的计算。接下来介绍如何求解参数$w$和$b$的数值，这个过程也称为模型训练过程。训练过程是深度学习模型的关键要素之一，其目标是让定义的损失函数$Loss$尽可能的小，也就是说找到一个参数解$w$和$b$，使得损失函数取得极小值。</p><p>我们先做一个小测试：如 <strong>图5</strong> 所示，基于微积分知识，求一条曲线在某个点的斜率等于函数在该点的导数值。那么大家思考下，当处于曲线的极值点时，该点的斜率是多少？</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/94f0437e6a454a0682f3b831c96a62bdaf40898af25145ec9b5b50bc80391f5c" width="300" hegiht="" ></center><center><br>图5：曲线斜率等于导数值</br></center>这个问题并不难回答，处于曲线极值点时的斜率为0，即函数在极值点的导数为0。那么，让损失函数取极小值的$w$和$b$应该是下述方程组的解：$$\frac{\partial{L}}{\partial{\boldsymbol{w}}}=0$$<p>$$<br>\frac{\partial{L}}{\partial{b}}=0<br>$$</p><p>其中$L$表示的是损失函数的值，$\boldsymbol{w}$为模型权重，$b$为偏置项。$\boldsymbol{w}$和$b$均为要学习的模型参数。</p><p>把损失函数表示成矩阵的形式为</p><p>$$<br>L=\frac{1}{N}||\boldsymbol{y}-(\boldsymbol{X}\boldsymbol{w}+\boldsymbol{b})||^2<br>$$</p><p>($||$为范数，表示向量之间的距离，**$||x||_p = (|x_1|^{p} + |x_2|^{p} + ··· + |x_n|^{p}) ^\frac{1}{p}$**)</p><p>其中$\boldsymbol{y}$为$N$个样本的标签值构成的向量，形状为$N\times 1$；$\boldsymbol{X}$为$N$个样本特征向量构成的矩阵，形状为$N\times D$，$D$为数据特征长度；$\boldsymbol{w}$为权重向量，形状为$D\times 1$；$\boldsymbol{b}$为所有元素都为$b$的向量，形状为$N\times 1$。</p><p>计算公式7对参数$b$的偏导数<br>$$<br>\frac{\partial L}{\partial b} = \boldsymbol{1}^T(\boldsymbol{y}-(\boldsymbol{X}\boldsymbol{w}+\boldsymbol{b}))<br>$$<br>请注意，上述公式忽略了系数$\frac{2}{N}$，并不影响最后结果。其中$\boldsymbol{1}$为$N$维的全1向量。</p><p>令公式8等于0，得到<br>$$<br>b^* = \boldsymbol{\bar{x}}^T\boldsymbol{w}-\bar{y}<br>$$<br>其中$\bar{y}=\frac{1}{N}\boldsymbol{1}^T\boldsymbol{y}$为所有标签的平均值，$\boldsymbol{\bar{x}}=\frac{1}{N}(\boldsymbol{1}^T\boldsymbol{X})^T$为所有特征向量的平均值。将$b^*$带入公式7中并对参数$\boldsymbol{w}$求偏导得到</p><p>$$<br>\frac{\partial L}{\partial \boldsymbol{w}} = (\boldsymbol{X}-\boldsymbol{\bar{x}}^T)^T((\boldsymbol{y}-\bar{y})-(\boldsymbol{X}-\boldsymbol{\bar{x}}^T)\boldsymbol{w})<br>$$</p><p>令公式10等于0，得到最优参数</p><p>$$<br>\boldsymbol{w}^*=((\boldsymbol{X}-\boldsymbol{\bar{x}}^T)^T(\boldsymbol{X}-\boldsymbol{\bar{x}}^T))^{-1}(\boldsymbol{X}-\boldsymbol{\bar{x}}^T)^T(\boldsymbol{y}-\bar{y}) \<br>b^* = \boldsymbol{\bar{x}}^T\boldsymbol{w}^*-\bar{y}<br>$$</p><p>将样本数据$(x, y)$带入上面的公式11和公式12中即可求解出$w$和$b$的值，但是这种方法只对线性回归这样简单的任务有效。如果模型中含有非线性变换，或者损失函数不是均方差这种简单的形式，则很难通过上式求解。为了解决这个问题，下面我们将引入更加普适的数值求解方法：梯度下降法。</p><h4 id="2-4-1-梯度下降法"><a href="#2-4-1-梯度下降法" class="headerlink" title="2.4.1 梯度下降法"></a>2.4.1 梯度下降法</h4><p>在现实中存在大量的函数正向求解容易，但反向求解较难，被称为单向函数，这种函数在密码学中有大量的应用。密码锁的特点是可以迅速判断一个密钥是否是正确的(已知$x$，求$y$很容易)，但是即使获取到密码锁系统，也无法破解出正确得密钥（已知$y$，求$x$很难）。</p><p>这种情况特别类似于一位想从山峰走到坡谷的盲人，他看不见坡谷在哪（无法逆向求解出$Loss$导数为0时的参数值），但可以伸脚探索身边的坡度（当前点的导数值，也称为梯度）。那么，求解Loss函数最小值可以这样实现：从当前的参数取值，一步步的按照下坡的方向下降，直到走到最低点。这种方法笔者称它为“盲人下坡法”。哦不，有个更正式的说法“梯度下降法”。</p><p>训练的关键是找到一组$(w, b)$，使得损失函数$L$取极小值。我们先看一下损失函数$L$只随两个参数$w_5$、$w_9$变化时的简单情形，启发下寻解的思路。<br>$$L=L(w_5, w_9) (公式13)$$<br>这里将$w_0, w_1, …, w_{12}$中除$w_5, w_9$之外的参数和$b$都固定下来，可以用图画出$L(w_5, w_9)$的形式，并在三维空间中画出损失函数随参数变化的曲面图。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py">net = Network(<span class="hljs-number">13</span>)<br>losses = []<br><span class="hljs-comment">#只画出参数w5和w9在区间[-160, 160]的曲线部分，以及包含损失函数的极值</span><br>w5 = np.arange(-<span class="hljs-number">160.0</span>, <span class="hljs-number">160.0</span>, <span class="hljs-number">1.0</span>)<br>w9 = np.arange(-<span class="hljs-number">160.0</span>, <span class="hljs-number">160.0</span>, <span class="hljs-number">1.0</span>)<br>losses = np.zeros([<span class="hljs-built_in">len</span>(w5), <span class="hljs-built_in">len</span>(w9)])<br><br><span class="hljs-comment">#计算设定区域内每个参数取值所对应的Loss</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(w5)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(w9)):<br>        net.w[<span class="hljs-number">5</span>] = w5[i]<br>        net.w[<span class="hljs-number">9</span>] = w9[j]<br>        z = net.forward(x)<br>        loss = net.loss(z, y)<br>        losses[i, j] = loss<br><br><span class="hljs-comment">#使用matplotlib将两个变量和对应的Loss作3D图</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br>fig = plt.figure()<br>ax = Axes3D(fig)<br><br>w5, w9 = np.meshgrid(w5, w9)<br><br>ax.plot_surface(w5, w9, losses, rstride=<span class="hljs-number">1</span>, cstride=<span class="hljs-number">1</span>, cmap=<span class="hljs-string">&#x27;rainbow&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>从图中可以明显观察到有些区域的函数值比周围的点小。需要说明的是：为什么选择$w_5$和$w_9$来画图呢？这是因为选择这两个参数的时候，可比较直观的从损失函数的曲面图上发现极值点的存在。其他参数组合，从图形上观测损失函数的极值点不够直观。</p><p>观察上述曲线呈现出“圆滑”的坡度，这正是我们选择以均方误差作为损失函数的原因之一。<strong>图6</strong> 呈现了只有一个参数维度时，均方误差和绝对值误差（只将每个样本的误差累加，不做平方处理）的损失函数曲线图。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/99487dca6520441db5073d1c154b5d2fb1174b5cf4d946c29f9d80a209bc2687" width="700" hegiht="40" ></center><center><br>图6：均方误差和绝对值误差损失函数曲线图</br></center>由此可见，均方误差表现的“圆滑”的坡度有两个好处：<ul><li>曲线的最低点是可导的。</li><li>越接近最低点，曲线的坡度逐渐放缓，有助于通过当前的梯度来判断接近最低点的程度（是否逐渐减少步长，以免错过最低点）。</li></ul><p>而绝对值误差是不具备这两个特性的，这也是损失函数的设计不仅仅要考虑“合理性”，还要追求“易解性”的原因。</p><p>现在我们要找出一组$[w_5, w_9]$的值，使得损失函数最小，实现梯度下降法的方案如下：</p><ul><li>步骤1：随机的选一组初始值，例如：$[w_5, w_9] = [-100.0, -100.0]$</li><li>步骤2：选取下一个点$[w_5^{‘} , w_9^{‘}]$，使得$L(w_5^{‘} , w_9^{‘}) &lt; L(w_5, w_9)$</li><li>步骤3：重复步骤2，直到损失函数几乎不再下降。</li></ul><p>如何选择$[w_5^{‘} , w_9^{‘}]$是至关重要的，第一要保证$L$是下降的，第二要使得下降的趋势尽可能的快。微积分的基础知识告诉我们：沿着梯度的反方向，是函数值下降最快的方向，如 <strong>图7</strong> 所示。简单理解，函数在某一个点的梯度方向是曲线斜率最大的方向，但梯度方向是向上的，所以下降最快的是梯度的反方向。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/5f8322f6172542dab0f78684b70efe45d819895332af4cabb7c536217ab0bb26" width="400" hegiht="40" ></center><center><br>图7：梯度下降方向示意图</br></center>#### 2.4.2 梯度计算<p>上文已经介绍了损失函数的计算方法，这里稍微改写。为了使梯度计算更加简洁，引入因子$\frac{1}{2}$，定义损失函数如下：</p><p>$$<br>L= \frac{1}{2N}\sum_{i=1}^N{(y_i - z_i)^2}<br>$$<br>其中$z_i$是网络对第$i$个样本的预测值：</p><p>$$<br>z_i = \sum_{j=0}^{12}{x_i^{j}\cdot w_j} + b<br>$$<br>梯度的定义：</p><p>$$<br>𝑔𝑟𝑎𝑑𝑖𝑒𝑛𝑡 = (\frac{\partial{L}}{\partial{w_0}},\frac{\partial{L}}{\partial{w_1}}, … ,\frac{\partial{L}}{\partial{w_{12}}} ,\frac{\partial{L}}{\partial{b}})<br>$$<br>可以计算出$L$对$w$和$b$的偏导数：</p><p>$$<br>\frac{\partial{L}}{\partial{w_j}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)\frac{\partial{z_i}}{\partial{w_j}}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)x_i^{j}}<br>$$</p><p>$$<br>\frac{\partial{L}}{\partial{b}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)\frac{\partial{z_i}}{\partial{b}}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)}<br>$$</p><p>从导数的计算过程可以看出，因子$\frac{1}{2}$被消掉了，这是因为二次函数求导的时候会产生因子$2$，这也是我们将损失函数改写的原因。</p><p>下面我们考虑只有一个样本的情况下，计算梯度：</p><p>$$<br>L= \frac{1}{2}{(y_i - z_i)^2}<br>$$</p><p>$$<br>z_1 = {x_1^{0}\cdot w_0} + {x_1^{1}\cdot w_1} + …  + {x_1^{12}\cdot w_{12}} + b<br>$$</p><p>可以计算出：</p><p>$$<br>L= \frac{1}{2}{({x_1^{0}\cdot w_0} + {x_1^{1}\cdot w_1} + …  + {x_1^{12}\cdot w_{12}} + b - y_1)^2}<br>$$<br>可以计算出$L$对$w$和$b$的偏导数：</p><p>$$<br>\frac{\partial{L}}{\partial{w_0}} = ({x_1^{0}\cdot w_0} + {x_1^{1}\cdot w_1} + …  + {x_1^{12}\cdot w_12} + b - y_1)\cdot x_1^{0}=({z_1} - {y_1})\cdot x_1^{0}<br>$$</p><p>$$<br>\frac{\partial{L}}{\partial{b}} = ({x_1^{0}\cdot w_0} + {x_1^{1}\cdot w_1} + …  + {x_1^{12}\cdot w_{12}} + b - y_1)\cdot 1 = ({z_1} - {y_1}) (公式23)<br>$$</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#查看每个变量的数据和维度</span><br>x1 = x[<span class="hljs-number">0</span>]<br>y1 = y[<span class="hljs-number">0</span>]<br>z1 = net.forward(x1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x1 &#123;&#125;, shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x1, x1.shape))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;y1 &#123;&#125;, shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(y1, y1.shape))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;z1 &#123;&#125;, shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(z1, z1.shape))<br><span class="hljs-comment">#当只有一个样本时，可以计算某个wj，比如w0的梯度</span><br>gradient_w0 = (z1 - y1) * x1[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w0 &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(gradient_w0))<br></code></pre></td></tr></table></figure><h4 id="2-4-3-使用NumPy进行梯度计算"><a href="#2-4-3-使用NumPy进行梯度计算" class="headerlink" title="2.4.3 使用NumPy进行梯度计算"></a>2.4.3 使用NumPy进行梯度计算</h4><p>基于NumPy广播机制（对向量和矩阵计算如同对1个单一变量计算一样），可以更快速的实现梯度计算。计算梯度的代码中直接用$(z_1 - y_1) \cdot x_1$，得到的是一个13维的向量，每个分量分别代表该维度的梯度。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#计算一个样本的所有梯度</span><br>gradient_w = (z1 - y1) * x1<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w_by_sample1 &#123;&#125;, gradient.shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(gradient_w, gradient_w.shape))<br></code></pre></td></tr></table></figure><p>此处可见，计算梯度<code>gradient_w</code>的维度是$3 \times 13$，并且其第1行与上面第1个样本计算的梯度gradient_w_by_sample1一致，第2行与上面第2个样本计算的梯度gradient_w_by_sample2一致，第3行与上面第3个样本计算的梯度gradient_w_by_sample3一致。这里使用矩阵操作，可以更加方便的对3个样本分别计算各自对梯度的贡献。</p><p>那么对于有N个样本的情形，我们可以直接使用如下方式计算出所有样本对梯度的贡献，这就是使用NumPy库广播功能带来的便捷。<br>小结一下这里使用NumPy库的广播功能：</p><ul><li>一方面可以扩展参数的维度，代替for循环来计算1个样本对从$w_0$到$w_{12}$的所有参数的梯度。<code>列表征特征维度</code></li><li>另一方面可以扩展样本的维度，代替for循环来计算样本0到样本403对参数的梯度。<code>行表征样本维度</code></li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">z = net.forward(x)<br>gradient_w = (z - y) * x<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w shape &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(gradient_w.shape))<br><span class="hljs-built_in">print</span>(gradient_w)<br></code></pre></td></tr></table></figure><p>上面gradient_w的每一行代表了一个样本对梯度的贡献。根据梯度的计算公式，总梯度是对每个样本对梯度贡献的平均值。</p><p>$$<br>\frac{\partial{L}}{\partial{w_j}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)\frac{\partial{z_i}}{\partial{w_j}}} = \frac{1}{N}\sum_{i=1}^N{(z_i - y_i)x_i^{j}}<br>$$<br>可以使用NumPy的均值函数来完成此过程，代码实现如下。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># axis = 0 表示把每一列做相加然后再除以总的行数</span><br>gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w &#x27;</span>, gradient_w.shape)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w &#x27;</span>, net.w.shape)<br><span class="hljs-built_in">print</span>(gradient_w)<br><span class="hljs-built_in">print</span>(net.w)<br></code></pre></td></tr></table></figure><p>使用NumPy的矩阵操作方便地完成了gradient的计算，但引入了一个问题，<code>gradient_w</code>的形状是(13,)，而$w$的维度是(13, 1)。导致该问题的原因是使用<code>np.mean</code>函数时消除了第0维。为了加减乘除等计算方便，<code>gradient_w</code>和$w$必须保持一致的形状。因此我们将<code>gradient_w</code>的维度也设置为(13,1)，代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">gradient_w = gradient_w[:, np.newaxis]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient_w shape&#x27;</span>, gradient_w.shape)<br><span class="hljs-built_in">print</span>(gradient_w)<br></code></pre></td></tr></table></figure><p>梯度计算综合代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">z = net.forward(x)<br>gradient_w = (z - y) * x<br>gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment"># gradient_w = gradient_w.reshape(13,1)</span><br>gradient_w = gradient_w[:, np.newaxis]<br>gradient_w<br></code></pre></td></tr></table></figure><p>偏置计算综合代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">gradient_b = (z - y)<br>gradient_b = np.mean(gradient_b)<br><span class="hljs-comment"># 此处b是一个数值，所以可以直接用np.mean得到一个标量</span><br>gradient_b<br></code></pre></td></tr></table></figure><p>总结为OOP的函数：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        num_samples = error.shape[<span class="hljs-number">0</span>]<br>        cost = error * error<br>        cost = np.<span class="hljs-built_in">sum</span>(cost) / num_samples<br>        <span class="hljs-keyword">return</span> cost<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient</span>(<span class="hljs-params">self, x, y</span>):<br>        z = self.forward(x)<br>        gradient_w = (z-y)*x<br>        gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br>        gradient_w = gradient_w[:, np.newaxis]<br>        gradient_b = (z - y)<br>        gradient_b = np.mean(gradient_b)<br>        <br>        <span class="hljs-keyword">return</span> gradient_w, gradient_b<br><span class="hljs-comment">#主函数调用上述方法计算梯度</span><br><span class="hljs-comment"># 调用上面定义的gradient函数，计算梯度</span><br><span class="hljs-comment"># 初始化网络</span><br>net = Network(<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 设置[w5, w9] = [-100., -100.]</span><br>net.w[<span class="hljs-number">5</span>] = -<span class="hljs-number">100.0</span><br>net.w[<span class="hljs-number">9</span>] = -<span class="hljs-number">100.0</span><br><br>z = net.forward(x)<br>loss = net.loss(z, y)<br>gradient_w, gradient_b = net.gradient(x, y)<br>gradient_w5 = gradient_w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>]<br>gradient_w9 = gradient_w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;point &#123;&#125;, loss &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>([net.w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>], net.w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]], loss))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>([gradient_w5, gradient_w9]))<br><br></code></pre></td></tr></table></figure><h4 id="2-4-4-梯度更新"><a href="#2-4-4-梯度更新" class="headerlink" title="2.4.4 梯度更新"></a>2.4.4 梯度更新</h4><p>下面研究更新梯度的方法，确定损失函数更小的点。首先沿着梯度的反方向移动一小步，找到下一个点P1，观察损失函数的变化。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 在[w5, w9]平面上，沿着梯度的反方向移动到下一个点P1</span><br><span class="hljs-comment"># 定义移动步长 eta</span><br>eta = <span class="hljs-number">0.1</span><br><span class="hljs-comment"># 更新参数w5和w9</span><br>net.w[<span class="hljs-number">5</span>] = net.w[<span class="hljs-number">5</span>] - eta * gradient_w5<br>net.w[<span class="hljs-number">9</span>] = net.w[<span class="hljs-number">9</span>] - eta * gradient_w9<br><span class="hljs-comment"># 重新计算z和loss</span><br>z = net.forward(x)<br>loss = net.loss(z, y)<br>gradient_w, gradient_b = net.gradient(x, y)<br>gradient_w5 = gradient_w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>]<br>gradient_w9 = gradient_w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;point &#123;&#125;, loss &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>([net.w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>], net.w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]], loss))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gradient &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>([gradient_w5, gradient_w9]))<br></code></pre></td></tr></table></figure><p>运行上面的代码，可以发现沿着梯度反方向走一小步，下一个点的损失函数的确减少了。感兴趣的话，大家可以尝试不停的点击上面的代码块，观察损失函数是否一直在变小。</p><p>在上述代码中，每次更新参数使用的语句：<br><code>net.w[5] = net.w[5] - eta * gradient_w5</code></p><ul><li>相减：参数需要向梯度的反方向移动。</li><li>eta：控制每次参数值沿着梯度反方向变动的大小，即每次移动的步长，又称为学习率。</li></ul><p>大家可以思考下，为什么之前我们要做输入特征的归一化，保持尺度一致？这是为了让统一的步长更加合适，使训练更加高效。</p><p>如 <strong>图8</strong> 所示，特征输入归一化后，不同参数输出的Loss是一个比较规整的曲线，学习率可以设置成统一的值 ；特征输入未归一化时，不同特征对应的参数所需的步长不一致，尺度较大的参数需要大步长，尺寸较小的参数需要小步长，导致无法设置统一的学习率。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/903f552bc55b4a5eba71caa7dd86fd2d7b71b8ebb6cb4500a5f5711f465707f3" width="300" hegiht="40" ></center><center><br>图8：未归一化的特征，会导致不同特征维度的理想步长不同</br></center>#### 2.4.5 封装Train函数<p>将上面的循环计算过程封装在<code>train</code>和<code>update</code>函数中，实现方法如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights,<span class="hljs-number">1</span>)<br>        self.w[<span class="hljs-number">5</span>] = -<span class="hljs-number">100.</span><br>        self.w[<span class="hljs-number">9</span>] = -<span class="hljs-number">100.</span><br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        num_samples = error.shape[<span class="hljs-number">0</span>]<br>        cost = error * error<br>        cost = np.<span class="hljs-built_in">sum</span>(cost) / num_samples<br>        <span class="hljs-keyword">return</span> cost<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient</span>(<span class="hljs-params">self, x, y</span>):<br>        z = self.forward(x)<br>        gradient_w = (z-y)*x<br>        gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br>        gradient_w = gradient_w[:, np.newaxis]<br>        gradient_b = (z - y)<br>        gradient_b = np.mean(gradient_b)        <br>        <span class="hljs-keyword">return</span> gradient_w, gradient_b<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, gradient_w5, gradient_w9, eta=<span class="hljs-number">0.01</span></span>):<br>        net.w[<span class="hljs-number">5</span>] = net.w[<span class="hljs-number">5</span>] - eta * gradient_w5<br>        net.w[<span class="hljs-number">9</span>] = net.w[<span class="hljs-number">9</span>] - eta * gradient_w9<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, x, y, iterations=<span class="hljs-number">100</span>, eta=<span class="hljs-number">0.01</span></span>):<br>        points = []<br>        losses = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>            points.append([net.w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>], net.w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]])<br>            z = self.forward(x)<br>            L = self.loss(z, y)<br>            gradient_w, gradient_b = self.gradient(x, y)<br>            gradient_w5 = gradient_w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>]<br>            gradient_w9 = gradient_w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]<br>            self.update(gradient_w5, gradient_w9, eta)<br>            losses.append(L)<br>            <span class="hljs-keyword">if</span> i % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;iter &#123;&#125;, point &#123;&#125;, loss &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, [net.w[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>], net.w[<span class="hljs-number">9</span>][<span class="hljs-number">0</span>]], L))<br>        <span class="hljs-keyword">return</span> points, losses<br><br><span class="hljs-comment"># 获取数据</span><br>train_data, test_data = load_data()<br>x = train_data[:, :-<span class="hljs-number">1</span>]<br>y = train_data[:, -<span class="hljs-number">1</span>:]<br><span class="hljs-comment"># 创建网络</span><br>net = Network(<span class="hljs-number">13</span>)<br>num_iterations=<span class="hljs-number">2000</span><br><span class="hljs-comment"># 启动训练</span><br>points, losses = net.train(x, y, iterations=num_iterations, eta=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-comment"># 画出损失函数的变化趋势</span><br>plot_x = np.arange(num_iterations)<br>plot_y = np.array(losses)<br>plt.plot(plot_x, plot_y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-4-6-训练过程扩展到全部参数"><a href="#2-4-6-训练过程扩展到全部参数" class="headerlink" title="2.4.6 训练过程扩展到全部参数"></a>2.4.6 训练过程扩展到全部参数</h4><p>为了能给读者直观的感受，上文演示的梯度下降的过程仅包含$w_5$和$w_9$两个参数。但房价预测的模型必须要对所有参数$w$和$b$进行求解，这需要将Network中的<code>update</code>和<code>train</code>函数进行修改。由于不再限定参与计算的参数（所有参数均参与计算），修改之后的代码反而更加简洁。</p><p>实现逻辑：“前向计算输出、根据输出和真实值计算Loss、基于Loss和输入计算梯度、根据梯度更新参数值”四个部分反复执行，直到到损失函数最小。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        np.random.seed(<span class="hljs-number">0</span>)<br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        num_samples = error.shape[<span class="hljs-number">0</span>]<br>        cost = error * error<br>        cost = np.<span class="hljs-built_in">sum</span>(cost) / num_samples<br>        <span class="hljs-keyword">return</span> cost<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient</span>(<span class="hljs-params">self, x, y</span>):<br>        z = self.forward(x)<br>        gradient_w = (z-y)*x<br>        gradient_w = np.mean(gradient_w, axis=<span class="hljs-number">0</span>)<br>        gradient_w = gradient_w[:, np.newaxis]<br>        gradient_b = (z - y)<br>        gradient_b = np.mean(gradient_b)        <br>        <span class="hljs-keyword">return</span> gradient_w, gradient_b<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, gradient_w, gradient_b, eta = <span class="hljs-number">0.01</span></span>):<br>        self.w = self.w - eta * gradient_w<br>        self.b = self.b - eta * gradient_b<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, x, y, iterations=<span class="hljs-number">100</span>, eta=<span class="hljs-number">0.01</span></span>):<br>        losses = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(iterations):<br>            z = self.forward(x)<br>            L = self.loss(z, y)<br>            gradient_w, gradient_b = self.gradient(x, y)<br>            self.update(gradient_w, gradient_b, eta)<br>            losses.append(L)<br>            <span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>) % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;iter &#123;&#125;, loss &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i, L))<br>        <span class="hljs-keyword">return</span> losses<br><br><span class="hljs-comment"># 获取数据</span><br>train_data, test_data = load_data()<br>x = train_data[:, :-<span class="hljs-number">1</span>]<br>y = train_data[:, -<span class="hljs-number">1</span>:]<br><span class="hljs-comment"># 创建网络</span><br>net = Network(<span class="hljs-number">13</span>)<br>num_iterations=<span class="hljs-number">1000</span><br><span class="hljs-comment"># 启动训练</span><br>losses = net.train(x,y, iterations=num_iterations, eta=<span class="hljs-number">0.01</span>)<br><br><span class="hljs-comment"># 画出损失函数的变化趋势</span><br>plot_x = np.arange(num_iterations)<br>plot_y = np.array(losses)<br>plt.plot(plot_x, plot_y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-4-7-随机梯度下降法（-Stochastic-Gradient-Descent）"><a href="#2-4-7-随机梯度下降法（-Stochastic-Gradient-Descent）" class="headerlink" title="2.4.7  随机梯度下降法（ Stochastic Gradient Descent）"></a>2.4.7  随机梯度下降法（ Stochastic Gradient Descent）</h4><p>在上述程序中，每次损失函数和梯度计算都是基于数据集中的全量数据。对于波士顿房价预测任务数据集而言，样本数比较少，只有404个。但在实际问题中，数据集往往非常大，如果每次都使用全量数据进行计算，效率非常低，通俗地说就是“杀鸡焉用牛刀”。由于参数每次只沿着梯度反方向更新一点点，因此方向并不需要那么精确。一个合理的解决方案是每次从总的数据集中随机抽取出小部分数据来代表整体，基于这部分数据计算梯度和损失来更新参数，这种方法被称作随机梯度下降法（Stochastic Gradient Descent，SGD），核心概念如下：</p><ul><li>mini-batch：每次迭代时抽取出来的一批数据被称为一个mini-batch。</li><li>batch_size：一个mini-batch所包含的样本数目称为batch_size。</li><li>epoch：当程序迭代的时候，按mini-batch逐渐抽取出样本，当把整个数据集都遍历到了的时候，则完成了一轮训练，也叫一个epoch。启动训练时，可以将训练的轮数num_epochs和batch_size作为参数传入。</li></ul><p>下面结合程序介绍具体的实现过程，涉及到数据处理和训练过程两部分代码的修改。</p><ul><li><strong>数据处理代码修改</strong></li></ul><p>数据处理需要实现拆分数据批次和样本乱序（为了实现随机抽样的效果）两个功能。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Network</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, num_of_weights</span>):<br>        <span class="hljs-comment"># 随机产生w的初始值</span><br>        <span class="hljs-comment"># 为了保持程序每次运行结果的一致性，此处设置固定的随机数种子</span><br>        <span class="hljs-comment">#np.random.seed(0)</span><br>        self.w = np.random.randn(num_of_weights, <span class="hljs-number">1</span>)<br>        self.b = <span class="hljs-number">0.</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        z = np.dot(x, self.w) + self.b<br>        <span class="hljs-keyword">return</span> z<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">loss</span>(<span class="hljs-params">self, z, y</span>):<br>        error = z - y<br>        num_samples = error.shape[<span class="hljs-number">0</span>]<br>        cost = error * error<br>        cost = np.<span class="hljs-built_in">sum</span>(cost) / num_samples<br>        <span class="hljs-keyword">return</span> cost<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gradient</span>(<span class="hljs-params">self, x, y</span>):<br>        z = self.forward(x)<br>        N = x.shape[<span class="hljs-number">0</span>]<br>        gradient_w = <span class="hljs-number">1.</span> / N * np.<span class="hljs-built_in">sum</span>((z-y) * x, axis=<span class="hljs-number">0</span>)<br>        gradient_w = gradient_w[:, np.newaxis]<br>        gradient_b = <span class="hljs-number">1.</span> / N * np.<span class="hljs-built_in">sum</span>(z-y)<br>        <span class="hljs-keyword">return</span> gradient_w, gradient_b<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, gradient_w, gradient_b, eta = <span class="hljs-number">0.01</span></span>):<br>        self.w = self.w - eta * gradient_w<br>        self.b = self.b - eta * gradient_b<br>            <br>                <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, training_data, num_epochs, batch_size=<span class="hljs-number">10</span>, eta=<span class="hljs-number">0.01</span></span>):<br>        n = <span class="hljs-built_in">len</span>(training_data)<br>        losses = []<br>        <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>            <span class="hljs-comment"># 在每轮迭代开始之前，将训练数据的顺序随机打乱</span><br>            <span class="hljs-comment"># 然后再按每次取batch_size条数据的方式取出</span><br>            np.random.shuffle(training_data)<br>            <span class="hljs-comment"># 将训练数据进行拆分，每个mini_batch包含batch_size条的数据</span><br>            mini_batches = [training_data[k:k+batch_size] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n, batch_size)]<br>            <span class="hljs-keyword">for</span> iter_id, mini_batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(mini_batches):<br>                <span class="hljs-comment">#print(self.w.shape)</span><br>                <span class="hljs-comment">#print(self.b)</span><br>                x = mini_batch[:, :-<span class="hljs-number">1</span>]<br>                y = mini_batch[:, -<span class="hljs-number">1</span>:]<br>                a = self.forward(x)<br>                loss = self.loss(a, y)<br>                gradient_w, gradient_b = self.gradient(x, y)<br>                self.update(gradient_w, gradient_b, eta)<br>                losses.append(loss)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch &#123;:3d&#125; / iter &#123;:3d&#125;, loss = &#123;:.4f&#125;&#x27;</span>.<br>                                 <span class="hljs-built_in">format</span>(epoch_id, iter_id, loss))<br>        <br>        <span class="hljs-keyword">return</span> losses<br><br><span class="hljs-comment"># 获取数据</span><br>train_data, test_data = load_data()<br><br><span class="hljs-comment"># 创建网络</span><br>net = Network(<span class="hljs-number">13</span>)<br><span class="hljs-comment"># 启动训练</span><br>losses = net.train(train_data, num_epochs=<span class="hljs-number">50</span>, batch_size=<span class="hljs-number">100</span>, eta=<span class="hljs-number">0.1</span>)<br><br><span class="hljs-comment"># 画出损失函数的变化趋势</span><br>plot_x = np.arange(<span class="hljs-built_in">len</span>(losses))<br>plot_y = np.array(losses)<br>plt.plot(plot_x, plot_y)<br>plt.show()<br></code></pre></td></tr></table></figure><p>观察上述Loss的变化，随机梯度下降加快了训练过程，但由于每次仅基于少量样本更新参数和计算损失，所以损失下降曲线会出现震荡。</p><hr><p><strong>说明：</strong></p><p>由于房价预测的数据量过少，所以难以感受到随机梯度下降带来的性能提升。</p><hr><h3 id="2-5-模型保存"><a href="#2-5-模型保存" class="headerlink" title="2.5 模型保存"></a>2.5 模型保存</h3><p>Numpy提供了save接口，可直接将模型权重数组保存为.npy格式的文件。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">np.save(<span class="hljs-string">&#x27;w.npy&#x27;</span>, net.w)<br>np.save(<span class="hljs-string">&#x27;b.npy&#x27;</span>, net.b)<br></code></pre></td></tr></table></figure><h3 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5 小结"></a>2.5 小结</h3><p>本节我们详细介绍了如何使用NumPy实现梯度下降算法，构建并训练了一个简单的线性模型实现波士顿房价预测，可以总结出，使用神经网络建模房价预测有三个要点：</p><ul><li><p>构建网络，初始化参数$w$和$b$，定义预测和损失函数的计算方法。</p></li><li><p>随机选择初始点，建立梯度的计算方法和参数更新方式。</p></li><li><p>从总的数据集中抽取部分数据作为一个mini_batch，计算梯度并更新参数，不断迭代直到损失函数几乎不再下降。</p></li></ul><h3 id="2-7-框架实现"><a href="#2-7-框架实现" class="headerlink" title="2.7 框架实现"></a>2.7 框架实现</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#加载飞桨、NumPy和相关类库</span><br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> paddle.fluid <span class="hljs-keyword">as</span> fluid<br><span class="hljs-keyword">import</span> paddle.fluid.dygraph <span class="hljs-keyword">as</span> dygraph<br><span class="hljs-keyword">from</span> paddle.fluid.dygraph <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>():<br>    <span class="hljs-comment"># 从文件导入数据</span><br>    datafile = <span class="hljs-string">&#x27;housing.data&#x27;</span><br>    data = np.fromfile(datafile, sep=<span class="hljs-string">&#x27; &#x27;</span>, dtype=np.float32)<br><br>    <span class="hljs-comment"># 每条数据包括14项，其中前面13项是影响因素，第14项是相应的房屋价格中位数</span><br>    feature_names = [ <span class="hljs-string">&#x27;CRIM&#x27;</span>, <span class="hljs-string">&#x27;ZN&#x27;</span>, <span class="hljs-string">&#x27;INDUS&#x27;</span>, <span class="hljs-string">&#x27;CHAS&#x27;</span>, <span class="hljs-string">&#x27;NOX&#x27;</span>, <span class="hljs-string">&#x27;RM&#x27;</span>, <span class="hljs-string">&#x27;AGE&#x27;</span>, \<br>                      <span class="hljs-string">&#x27;DIS&#x27;</span>, <span class="hljs-string">&#x27;RAD&#x27;</span>, <span class="hljs-string">&#x27;TAX&#x27;</span>, <span class="hljs-string">&#x27;PTRATIO&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;LSTAT&#x27;</span>, <span class="hljs-string">&#x27;MEDV&#x27;</span> ]<br>    feature_num = <span class="hljs-built_in">len</span>(feature_names)<br><br>    <span class="hljs-comment"># 将原始数据进行Reshape，变成[N, 14]这样的形状</span><br>    data = data.reshape([data.shape[<span class="hljs-number">0</span>] // feature_num, feature_num])<br><br>    <span class="hljs-comment"># 将原数据集拆分成训练集和测试集</span><br>    <span class="hljs-comment"># 这里使用80%的数据做训练，20%的数据做测试</span><br>    <span class="hljs-comment"># 测试集和训练集必须是没有交集的</span><br>    ratio = <span class="hljs-number">0.8</span><br>    offset = <span class="hljs-built_in">int</span>(data.shape[<span class="hljs-number">0</span>] * ratio)<br>    training_data = data[:offset]<br><br>    <span class="hljs-comment"># 计算train数据集的最大值，最小值</span><br>    maximums, minimums, avgs = training_data.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>), training_data.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">0</span>), training_data.mean(axis=<span class="hljs-number">0</span>)<br>    <br>    <span class="hljs-comment"># 记录数据的归一化参数，在预测时对数据做归一化</span><br>    <span class="hljs-keyword">global</span> max_values<br>    <span class="hljs-keyword">global</span> min_values<br>    <span class="hljs-keyword">global</span> avg_values<br>   <br>    max_values = maximums<br>    min_values = minimums<br>    avg_values = avgs<br>    <br>    <span class="hljs-comment"># 对数据进行归一化处理</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(feature_num):<br>        data[:, i] = (data[:, i] - avg_values[i]) / (maximums[i] - minimums[i])<br><br>    <span class="hljs-comment"># 训练集和测试集的划分比例</span><br>    training_data = data[:offset]<br>    test_data = data[offset:]<br>    <span class="hljs-keyword">return</span> training_data, test_data<br>    <br>    <span class="hljs-comment"># 验证数据集读取程序的正确性</span><br>training_dataverify, test_dataverify = load_data()<br><span class="hljs-built_in">print</span>(training_dataverify.shape)<br><span class="hljs-built_in">print</span>(training_dataverify[<span class="hljs-number">0</span>,:])<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Regressor</span>(fluid.dygraph.Layer):<br><br>    <span class="hljs-comment"># self代表类的实例自身</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name_scope</span>):<br>        <span class="hljs-comment"># 初始化父类中的一些参数</span><br>        <span class="hljs-built_in">super</span>(Regressor, self).__init__(name_scope)<br>        name_scope = self.full_name()<br>        <br>        <span class="hljs-comment"># 定义一层全连接层，输入维度是13，输出维度是1</span><br>        self.fc = Linear(input_dim=<span class="hljs-number">13</span>, output_dim=<span class="hljs-number">1</span>,act=<span class="hljs-literal">None</span>)<br>    <br>    <span class="hljs-comment"># 网络的前向计算</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>        x = self.fc(inputs)<br>        <span class="hljs-keyword">return</span> x<br>        <br>        <span class="hljs-comment">#定义飞桨动态图的工作环境</span><br><span class="hljs-keyword">with</span> fluid.dygraph.guard():<br>    <span class="hljs-comment">#声明定义好的线性回归模型</span><br>    model = Regressor(<span class="hljs-string">&quot;Regressor&quot;</span>)<br>    <span class="hljs-comment">#开启模型训练模式</span><br>    model.train()<br>    <span class="hljs-comment">#加载数据</span><br>    training_data, test_data = load_data()<br>    <span class="hljs-comment">#定义优化算法，这里使用随机梯度下降-SGD</span><br>    <span class="hljs-comment">#学习率设置为0.01</span><br>    opt = fluid.optimizer.SGD(learning_rate=<span class="hljs-number">0.01</span>, parameter_list=model.parameters())<br>    <br>    <span class="hljs-keyword">with</span> dygraph.guard(fluid.CPUPlace()):<br>    EPOCH_NUM = <span class="hljs-number">10</span> <span class="hljs-comment">#设置外层循环次数，即数据集遍历次数</span><br>    BATCH_SIZE = <span class="hljs-number">10</span> <span class="hljs-comment">#设置一个批次的数据大小</span><br>    <br>    <span class="hljs-comment">#定义外层循环</span><br>    <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br><span class="hljs-comment">#         在每轮训练之前，将训练数据打乱</span><br>        np.random.shuffle(training_data)<br><span class="hljs-comment">#         将训练数据拆分，每个batch含10个数据（样本）</span><br>        mini_batches = [training_data[k:k+BATCH_SIZE] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(training_data), BATCH_SIZE)]<br><span class="hljs-comment">#         定义内部循环</span><br>        <span class="hljs-keyword">for</span> iter_id, mini_batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(mini_batches):<br>            x = np.array(mini_batch[:,:-<span class="hljs-number">1</span>]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            y = np.array(mini_batch[:,-<span class="hljs-number">1</span>:]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br><span class="hljs-comment">#             将numpy数据转换为飞浆动态图variable格式</span><br>            house_features = dygraph.to_variable(x)<br>            prices = dygraph.to_variable(y)<br>        <span class="hljs-comment">#     调用模型前向计算</span><br>            predicts = model(house_features)<br><br>        <span class="hljs-comment">#     计算损失</span><br>            loss = fluid.layers.square_error_cost(predicts, label=prices)<br>            avg_loss = fluid.layers.mean(loss)<br>            <span class="hljs-keyword">if</span> iter_id%<span class="hljs-number">20</span>==<span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch:&#123;&#125;,iter_id:&#123;&#125;,loss is:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch_id, iter_id, avg_loss.numpy()))<br>        <span class="hljs-comment">#     反向传播</span><br>            avg_loss.backward()<br>        <span class="hljs-comment">#     最小化loss，更新参数</span><br>            opt.minimize(avg_loss)<br>        <span class="hljs-comment">#     清除梯度</span><br>            model.clear_gradients()<br><span class="hljs-comment">#     保存模型</span><br>fluid.save_dygraph(model.state_dict(), <span class="hljs-string">&#x27;LRmodel&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_one_example</span>(<span class="hljs-params">data_dir</span>):<br>    f = <span class="hljs-built_in">open</span>(data_dir,<span class="hljs-string">&quot;r&quot;</span>)<br>    datas = f.readlines()<br><span class="hljs-comment">#     选取倒数第10个数据进行预测</span><br>    tmp = datas[-<span class="hljs-number">9</span>]<br>    tmp = tmp.strip().split()<br>    one_data = [<span class="hljs-built_in">float</span>(v) <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> tmp]<br>    <br><span class="hljs-comment">#     对数据进行归一化处理</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(one_data)-<span class="hljs-number">1</span>):<br>        one_data[i] = (one_data[i]-avg_values[i])/(max_values[i]-min_values[i])<br>        <br>    data = np.reshape(np.array(one_data[:-<span class="hljs-number">1</span>]),[<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]).astype(np.float32)<br>    label = one_data[-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> data, label<br><span class="hljs-keyword">with</span> dygraph.guard():<br>    model_dict, _ = fluid.load_dygraph(<span class="hljs-string">&#x27;LR_model&#x27;</span>)<br>    model.load_dict(model_dict)<br>    model.<span class="hljs-built_in">eval</span>()<br><span class="hljs-comment">#     参数为测试数据集的文件地址</span><br>    test_data, label = load_one_example(<span class="hljs-string">&#x27;housing.data&#x27;</span>)<br><span class="hljs-comment">#     将数据转为variable格式</span><br>    test_data = dygraph.to_variable(test_data)<br>    results = model(test_data)<br>    <br><span class="hljs-comment">#     对结果进行反归一化</span><br>    results = results * (max_values[-<span class="hljs-number">1</span>]-min_values[-<span class="hljs-number">1</span>]) + avg_values[-<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Inference result is &#123;&#125;, the corresponding label is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(results.numpy(), label))<br></code></pre></td></tr></table></figure><h2 id="3-实例二“手写文字识别”"><a href="#3-实例二“手写文字识别”" class="headerlink" title="3.实例二“手写文字识别”"></a>3.实例二“手写文字识别”</h2><h3 id="1-单层网络多元逻辑回归模型"><a href="#1-单层网络多元逻辑回归模型" class="headerlink" title="1.单层网络多元逻辑回归模型"></a>1.单层网络多元逻辑回归模型</h3><h4 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h4><p>在房价预测深度学习任务中，我们使用了单层且没有非线性变换的模型，取得了理想的预测效果。在手写数字识别中，我们依然使用这个模型预测输入的图形数字值。其中，模型的输入为784维（28×28）数据，输出为1维数据，如 <strong>图5</strong> 所示。</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/9c146e7d9c4a4119a8cd09f7c8b5ee61f2ac1820a221429a80430291728b9c4a" width="500" hegiht="" ></center><center><br>图5：手写数字识别网络模型</br></center><p>输入像素的位置排布信息对理解图像内容非常重要（如将原始尺寸为28×28图像的像素按照7×112的尺寸排布，那么其中的数字将不可识别），因此网络的输入设计为28×28的尺寸，而不是1×784，以便于模型能够正确处理像素之间的空间信息。</p><hr><p><strong>说明：</strong></p><p>事实上，采用只有一层的简单网络（对输入求加权和）时并没有处理位置关系信息，因此可以猜测出此模型的预测效果可能有限。在后续优化环节介绍的卷积神经网络则更好的考虑了这种位置关系信息，模型的预测效果也会有显著提升。</p><hr><p>下面以类的方式组建手写数字识别的网络，实现方法如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 定义mnist数据识别网络结构，同房价预测网络</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MNIST</span>(paddle.nn.Layer):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MNIST, self).__init__()<br>        <br>        <span class="hljs-comment"># 定义一层全连接层，输出维度是1</span><br>        self.fc = paddle.nn.Linear(in_features=<span class="hljs-number">784</span>, out_features=<span class="hljs-number">1</span>)<br>        <br>    <span class="hljs-comment"># 定义网络结构的前向计算过程</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>        outputs = self.fc(inputs)<br>        <span class="hljs-keyword">return</span> outputs<br></code></pre></td></tr></table></figure><h4 id="训练配置"><a href="#训练配置" class="headerlink" title="训练配置"></a>训练配置</h4><p>训练配置需要先生成模型实例（设为“训练”状态），再设置优化算法和学习率（使用随机梯度下降SGD，学习率设置为0.001），实现方法如下所示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 声明网络结构</span><br>model = MNIST()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    <span class="hljs-comment"># 启动训练模式</span><br>    model.train()<br>    <span class="hljs-comment"># 加载训练集 batch_size 设为 16</span><br>    train_loader = paddle.io.DataLoader(paddle.vision.datasets.MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>), <br>                                        batch_size=<span class="hljs-number">16</span>, <br>                                        shuffle=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 定义优化器，使用随机梯度下降SGD优化器，学习率设置为0.001</span><br>    opt = paddle.optimizer.SGD(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br></code></pre></td></tr></table></figure><h4 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h4><p>训练过程采用二层循环嵌套方式，训练完成后需要保存模型参数，以便后续使用。</p><ul><li>内层循环：负责整个数据集的一次遍历，遍历数据集采用分批次（batch）方式。</li><li>外层循环：定义遍历数据集的次数，本次训练中外层循环10次，通过参数EPOCH_NUM设置。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 图像归一化函数，将数据范围为[0, 255]的图像归一化到[0, 1]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">norm_img</span>(<span class="hljs-params">img</span>):<br>    <span class="hljs-comment"># 验证传入数据格式是否正确，img的shape为[batch_size, 28, 28]</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(img.shape) == <span class="hljs-number">3</span><br>    batch_size, img_h, img_w = img.shape[<span class="hljs-number">0</span>], img.shape[<span class="hljs-number">1</span>], img.shape[<span class="hljs-number">2</span>]<br>    <span class="hljs-comment"># 归一化图像数据</span><br>    img = img / <span class="hljs-number">255</span><br>    <span class="hljs-comment"># 将图像形式reshape为[batch_size, 784]</span><br>    img = paddle.reshape(img, [batch_size, img_h*img_w])<br>    <br>    <span class="hljs-keyword">return</span> img<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br><span class="hljs-comment"># 确保从paddle.vision.datasets.MNIST中加载的图像数据是np.ndarray类型</span><br>paddle.vision.set_image_backend(<span class="hljs-string">&#x27;cv2&#x27;</span>)<br><br><span class="hljs-comment"># 声明网络结构</span><br>model = MNIST()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    <span class="hljs-comment"># 启动训练模式</span><br>    model.train()<br>    <span class="hljs-comment"># 加载训练集 batch_size 设为 16</span><br>    train_loader = paddle.io.DataLoader(paddle.vision.datasets.MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>), <br>                                        batch_size=<span class="hljs-number">16</span>, <br>                                        shuffle=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 定义优化器，使用随机梯度下降SGD优化器，学习率设置为0.001</span><br>    opt = paddle.optimizer.SGD(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br>    EPOCH_NUM = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br>            images = norm_img(data[<span class="hljs-number">0</span>]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            labels = data[<span class="hljs-number">1</span>].astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            <br>            <span class="hljs-comment">#前向计算的过程</span><br>            predicts = model(images)<br>            <br>            <span class="hljs-comment"># 计算损失</span><br>            loss = F.square_error_cost(predicts, labels)<br>            avg_loss = paddle.mean(loss)<br>            <br>            <span class="hljs-comment">#每训练了1000批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch_id: &#123;&#125;, batch_id: &#123;&#125;, loss is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch, batch_id, avg_loss.numpy()))<br>            <br>            <span class="hljs-comment">#后向传播，更新参数的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br>            <br><br>train(model)<br>paddle.save(model.state_dict(), <span class="hljs-string">&#x27;./mnist.pdparams&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>另外，从训练过程中损失所发生的变化可以发现，虽然损失整体上在降低，但到训练的最后一轮，损失函数值依然较高。可以猜测手写数字识别完全复用房价预测的代码，训练效果并不好。接下来我们通过模型测试，获取模型训练的真实效果。</p></blockquote><h4 id="模型测试"><a href="#模型测试" class="headerlink" title="模型测试"></a>模型测试</h4><p>模型测试的主要目的是验证训练好的模型是否能正确识别出数字，包括如下四步：</p><ul><li>声明实例</li><li>加载模型：加载训练过程中保存的模型参数，</li><li>灌入数据：将测试样本传入模型，模型的状态设置为校验状态（eval），显式告诉框架我们接下来只会使用前向计算的流程，不会计算梯度和梯度反向传播。</li><li>获取预测结果，取整后作为预测标签输出。</li></ul><p>在模型测试之前，需要先从’./work/example_0.png’文件中读取样例图片，并进行归一化处理。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 导入图像读取第三方库</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>train_loader = paddle.io.DataLoader(paddle.vision.datasets.MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>), <br>                                    batch_size=<span class="hljs-number">16</span>, <br>                                    shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># print(data[0][0].shape)</span><br><span class="hljs-comment"># plt.imshow(norm_img(train_data0))</span><br><span class="hljs-comment"># plt.show()</span><br>img_path = <span class="hljs-string">&#x27;./data/data17152/example_0.png&#x27;</span><br><span class="hljs-comment"># 读取原始图像并显示</span><br>im = Image.<span class="hljs-built_in">open</span>(img_path)<br>plt.imshow(im)<br>plt.show()<br><span class="hljs-comment"># 将原始图像转为灰度图</span><br>im = im.convert(<span class="hljs-string">&#x27;L&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原始图像shape: &#x27;</span>, np.array(im).shape)<br><span class="hljs-comment"># 使用Image.ANTIALIAS方式采样原始图片</span><br>im = im.resize((<span class="hljs-number">28</span>, <span class="hljs-number">28</span>), Image.ANTIALIAS)<br>plt.imshow(im)<br>plt.show()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;采样后图片shape: &quot;</span>, np.array(im).shape)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 读取一张本地的样例图片，转变成模型输入的格式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_image</span>(<span class="hljs-params">img_path</span>):<br>    <span class="hljs-comment"># 从img_path中读取图像，并转为灰度图</span><br>    im = Image.<span class="hljs-built_in">open</span>(img_path).convert(<span class="hljs-string">&#x27;L&#x27;</span>)<br>    im = im.resize((<span class="hljs-number">28</span>, <span class="hljs-number">28</span>), Image.ANTIALIAS)<br>    im = np.array(im).reshape(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>).astype(np.float32)<br><br>    <span class="hljs-comment"># 图像归一化，保持和数据集的数据范围一致</span><br>    im =  <span class="hljs-number">1</span> - im / <span class="hljs-number">255</span><br>    <span class="hljs-keyword">return</span> im<br><br><span class="hljs-comment"># 定义预测过程</span><br>model = MNIST()<br>params_file_path = <span class="hljs-string">&#x27;mnist.pdparams&#x27;</span><br>img_path = <span class="hljs-string">&#x27;./data/data17152/example_0.png&#x27;</span><br><span class="hljs-comment"># 加载模型参数</span><br>param_dict = paddle.load(params_file_path)<br><span class="hljs-comment"># 将模型参数加载到模型里</span><br>model.load_dict(param_dict)<br><span class="hljs-comment"># 灌入数据</span><br>model.<span class="hljs-built_in">eval</span>()<br>tensor_img = load_image(img_path)<br>result = model(paddle.to_tensor(tensor_img))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result&#x27;</span>,result)<br><span class="hljs-comment">#  预测输出取整，即为预测的数字，打印结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;本次预测的数字是&quot;</span>, result.numpy().astype(<span class="hljs-string">&#x27;int32&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><strong><u>灰度图：0是黑，255是白</u></strong></p><p><strong>重要函数：</strong></p><ul><li><code>enumerate(train_loader())</code>将迭代器进行迭代</li><li><code>np.reshape(1, -1)</code>将ndtype数组转为1维行向量，**-1为占位符**，列数看有多少列就多少列</li></ul><h3 id="2-多层网络改进模型"><a href="#2-多层网络改进模型" class="headerlink" title="2.多层网络改进模型"></a>2.多层网络改进模型</h3><h4 id="数据同步读取与训练"><a href="#数据同步读取与训练" class="headerlink" title="数据同步读取与训练"></a>数据同步读取与训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据处理部分之前的代码，加入部分数据处理的库</span><br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> Linear<br><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> gzip<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>(<span class="hljs-params">mode=<span class="hljs-string">&#x27;train&#x27;</span></span>):<br>    datafile = <span class="hljs-string">&#x27;./work/mnist.json.gz&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;loading mnist dataset from &#123;&#125; ......&#x27;</span>.<span class="hljs-built_in">format</span>(datafile))<br>    <span class="hljs-comment"># 加载json数据文件</span><br>    data = json.load(gzip.<span class="hljs-built_in">open</span>(datafile))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;mnist dataset load done&#x27;</span>)<br>   <br>    <span class="hljs-comment"># 读取到的数据区分训练集，验证集，测试集</span><br>    train_set, val_set, eval_set = data<br>    <span class="hljs-keyword">if</span> mode==<span class="hljs-string">&#x27;train&#x27;</span>:<br>        <span class="hljs-comment"># 获得训练数据集</span><br>        imgs, labels = train_set[<span class="hljs-number">0</span>], train_set[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;valid&#x27;</span>:<br>        <span class="hljs-comment"># 获得验证数据集</span><br>        imgs, labels = val_set[<span class="hljs-number">0</span>], val_set[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;eval&#x27;</span>:<br>        <span class="hljs-comment"># 获得测试数据集</span><br>        imgs, labels = eval_set[<span class="hljs-number">0</span>], eval_set[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<span class="hljs-comment">#抛出异常</span><br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;mode can only be one of [&#x27;train&#x27;, &#x27;valid&#x27;, &#x27;eval&#x27;]&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集数量: &quot;</span>, <span class="hljs-built_in">len</span>(imgs))<br>    <br>    <span class="hljs-comment"># 校验数据</span><br>    imgs_length = <span class="hljs-built_in">len</span>(imgs)<br><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(imgs) == <span class="hljs-built_in">len</span>(labels), \<br>          <span class="hljs-string">&quot;length of train_imgs(&#123;&#125;) should be the same as train_labels(&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(imgs), <span class="hljs-built_in">len</span>(labels))<br>    <br>    <span class="hljs-comment"># 获得数据集长度</span><br>    imgs_length = <span class="hljs-built_in">len</span>(imgs)<br>    <br>    <span class="hljs-comment"># 定义数据集每个数据的序号，根据序号读取数据</span><br>    index_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(imgs_length))<br>    <span class="hljs-comment"># 读入数据时用到的批次大小</span><br>    BATCHSIZE = <span class="hljs-number">100</span><br>    <br>    <span class="hljs-comment"># 定义数据生成器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">data_generator</span>():<br>        <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;train&#x27;</span>:<br>            <span class="hljs-comment"># 训练模式下打乱数据</span><br>            random.shuffle(index_list)<br>        imgs_list = []<br>        labels_list = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> index_list:<br>            <span class="hljs-comment"># 将数据处理成希望的类型</span><br>            img = np.array(imgs[i]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            label = np.array(labels[i]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            imgs_list.append(img) <br>            labels_list.append(label)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(imgs_list) == BATCHSIZE:<br>                <span class="hljs-comment"># 每获得一个batchsize的数据，就返回</span><br>                <span class="hljs-keyword">yield</span> np.array(imgs_list), np.array(labels_list)<br>                <span class="hljs-comment"># 清空数据读取列表</span><br>                imgs_list = []<br>                labels_list = []<br>    <br>        <span class="hljs-comment"># 如果剩余数据的数目小于BATCHSIZE，</span><br>        <span class="hljs-comment"># 则剩余数据一起构成一个大小为len(imgs_list)的mini-batch</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(imgs_list) &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">yield</span> np.array(imgs_list), np.array(labels_list)<br>    <span class="hljs-keyword">return</span> data_generator<span class="hljs-comment">#返回迭代器</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据处理部分之后的代码，数据读取的部分调用Load_data函数</span><br><span class="hljs-comment"># 定义网络结构，同上一节所使用的网络结构</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MNIST</span>(paddle.nn.Layer):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MNIST, self).__init__()<br>        <span class="hljs-comment"># 定义一层全连接层，输出维度是1</span><br>        self.fc = paddle.nn.Linear(in_features=<span class="hljs-number">784</span>, out_features=<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>        outputs = self.fc(inputs)<br>        <span class="hljs-keyword">return</span> outputs<br><br><span class="hljs-comment"># 训练配置，并启动训练过程</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    model = MNIST()<br>    model.train()<br>    <span class="hljs-comment">#调用加载数据的函数</span><br>    train_loader = load_data(<span class="hljs-string">&#x27;train&#x27;</span>)<br>    opt = paddle.optimizer.SGD(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br>    EPOCH_NUM = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br>            <span class="hljs-comment">#准备数据，变得更加简洁</span><br>            images, labels = data<br>            <span class="hljs-comment">#将ndtype数据转换为模型接受的tensor类型进行输入训练</span><br>            images = paddle.to_tensor(images)<br>            labels = paddle.to_tensor(labels) <br><br>            <span class="hljs-comment">#前向计算的过程</span><br>            predits = model(images)<br>            <br>            <span class="hljs-comment">#计算损失，取一个批次样本损失的平均值</span><br>            loss = F.square_error_cost(predits, labels)<br>            avg_loss = paddle.mean(loss)      <br>            <br>            <span class="hljs-comment">#每训练了200批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">200</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch: &#123;&#125;, loss is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch_id, batch_id, avg_loss.numpy()))<br>            <br>            <span class="hljs-comment">#后向传播，更新参数的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br><br>    <span class="hljs-comment"># 保存模型</span><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;./mnist.pdparams&#x27;</span>)<br><span class="hljs-comment"># 创建模型           </span><br>model = MNIST()<br><span class="hljs-comment"># 启动训练过程</span><br>train(model)<br><br></code></pre></td></tr></table></figure><blockquote><p>上面提到的数据读取采用的是同步数据读取方式。对于样本量较大、数据读取较慢的场景，建议采用异步数据读取方式。异步读取数据时，数据读取和模型训练并行执行，从而加快了数据读取速度，牺牲一小部分内存换取数据读取效率的提升，二者关系如 <strong>图4</strong> 所示。</p></blockquote><center><img src="https://ai-studio-static-online.cdn.bcebos.com/a5fd990c5355426183a71b95aa28a59f979014f6905144ddb415c5a4fe647441" width="500" ></center><center><br>图4：同步数据读取和异步数据读取示意图</br></center>* **同步数据读取**：数据读取与模型训练串行。当模型需要数据时，才运行数据读取函数获得当前批次的数据。在读取数据期间，模型一直等待数据读取结束才进行训练，数据读取速度相对较慢。* **异步数据读取**：数据读取和模型训练并行。读取到的数据不断的放入缓存区，无需等待模型训练就可以启动下一轮数据读取。当模型训练完一个批次后，不用等待数据读取过程，直接从缓存区获得下一批次数据进行训练，从而加快了数据读取速度。* **异步队列**：数据读取和模型训练交互的仓库，二者均可以从仓库中读取数据，它的存在使得两者的工作节奏可以解耦。<p>使用飞桨实现异步数据读取非常简单，只需要两个步骤：</p><ol><li>构建一个继承paddle.io.Dataset类的数据读取器。</li><li>通过paddle.io.DataLoader创建异步数据读取的迭代器。</li></ol><h4 id="数据异步读取与训练"><a href="#数据异步读取与训练" class="headerlink" title="数据异步读取与训练"></a>数据异步读取与训练</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> gzip<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 创建一个类MnistDataset，继承paddle.io.Dataset 这个类</span><br><span class="hljs-comment"># MnistDataset的作用和上面load_data()函数的作用相同，均是构建一个迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MnistDataset</span>(paddle.io.Dataset):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, mode</span>):<br>        datafile = <span class="hljs-string">&#x27;./work/mnist.json.gz&#x27;</span><br>        data = json.load(gzip.<span class="hljs-built_in">open</span>(datafile))<br>        <span class="hljs-comment"># 读取到的数据区分训练集，验证集，测试集</span><br>        train_set, val_set, eval_set = data<br>        <span class="hljs-keyword">if</span> mode==<span class="hljs-string">&#x27;train&#x27;</span>:<br>            <span class="hljs-comment"># 获得训练数据集</span><br>            imgs, labels = train_set[<span class="hljs-number">0</span>], train_set[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;valid&#x27;</span>:<br>            <span class="hljs-comment"># 获得验证数据集</span><br>            imgs, labels = val_set[<span class="hljs-number">0</span>], val_set[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;eval&#x27;</span>:<br>            <span class="hljs-comment"># 获得测试数据集</span><br>            imgs, labels = eval_set[<span class="hljs-number">0</span>], eval_set[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;mode can only be one of [&#x27;train&#x27;, &#x27;valid&#x27;, &#x27;eval&#x27;]&quot;</span>)<br>        <br>        <span class="hljs-comment"># 校验数据</span><br>        imgs_length = <span class="hljs-built_in">len</span>(imgs)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(imgs) == <span class="hljs-built_in">len</span>(labels), \<br>            <span class="hljs-string">&quot;length of train_imgs(&#123;&#125;) should be the same as train_labels(&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(imgs), <span class="hljs-built_in">len</span>(labels))<br>        <br>        self.imgs = imgs<br>        self.labels = labels<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img = np.array(self.imgs[idx]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>        label = np.array(self.labels[idx]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>        <br>        <span class="hljs-keyword">return</span> img, label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.imgs)<br><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># 声明数据加载函数，使用MnistDataset数据集</span><br>train_dataset = MnistDataset(mode=<span class="hljs-string">&#x27;train&#x27;</span>)<br><span class="hljs-comment"># print(train_dataset[1][1])</span><br><span class="hljs-comment"># 使用paddle.io.DataLoader 定义DataLoader对象用于加载Python生成器产生的数据，</span><br><span class="hljs-comment"># DataLoader 返回的是一个批次数据迭代器，并且是异步的；</span><br>data_loader = paddle.io.DataLoader(train_dataset, batch_size=<span class="hljs-number">100</span>, shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 迭代的读取数据并打印数据的形状</span><br><span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data_loader()):<br>    images, labels = data<br>    <span class="hljs-built_in">print</span>(i, images.shape, labels.shape)<br>    <span class="hljs-keyword">if</span> i&gt;=<span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    model = MNIST()<br>    model.train()<br>    opt = paddle.optimizer.SGD(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br>    EPOCH_NUM = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data_loader()):<br>            images, labels = data<br>            images = paddle.to_tensor(images)<br>            labels = paddle.to_tensor(labels).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            <br>            <span class="hljs-comment">#前向计算的过程  </span><br>            predicts = model(images)<br><br>            <span class="hljs-comment">#计算损失，取一个批次样本损失的平均值</span><br>            loss = F.square_error_cost(predicts, labels)<br>            avg_loss = paddle.mean(loss)       <br>            <br>            <span class="hljs-comment">#每训练了200批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">200</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch: &#123;&#125;, loss is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch_id, batch_id, avg_loss.numpy()))<br>            <br>            <span class="hljs-comment">#后向传播，更新参数的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br><br>    <span class="hljs-comment">#保存模型参数</span><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;mnist&#x27;</span>)<br><br><span class="hljs-comment">#创建模型</span><br>model = MNIST()<br><span class="hljs-comment">#启动训练过程</span><br>train(model)<br></code></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ol><li><a href="https://so.csdn.net/so/search?q=%E8%BF%AD%E4%BB%A3%E5%99%A8&spm=1001.2101.3001.7020">迭代器</a>迭代器有两个基本的方法：创建迭代器<strong>iter()</strong> 和 访问迭代器**next()**。</li></ol><p>可以直接作用于for循环的对象统称为可迭代对象：Iterable</p><ul><li><p>一类是集合数据类型，如list、tuple、dict、set、str等；</p></li><li><p>一类是generator，包括生成器和带yield的generator function</p></li></ul><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><ol start="2"><li>生成器</li></ol><p>如果列表元素可以按照某种算法推算出来，可以在循环的过程中不断推算出后续的元素，这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p><ol start="3"><li>yield：是一个生成器函数，返回的是一个迭代器</li></ol><p>yield的作用：返回一个可以用来迭代(for循环)的生成器，它的应用场景通常为一个需要返回一系列值的，含有循环的函数中。</p><ol start="4"><li>assert：<code>assert a &gt; 0,&quot;a超出范围&quot;</code><u>如果a&gt;0则顺序执行，否则抛出异常提示a超出范围</u></li></ol><h3 id="3-模型设计之损失函数"><a href="#3-模型设计之损失函数" class="headerlink" title="3.模型设计之损失函数"></a>3.模型设计之损失函数</h3><p>在之前的方案中，我们复用了房价预测模型的损失函数-均方误差。从预测效果来看，虽然损失不断下降，模型的预测值逐渐逼近真实值，但模型的最终效果不够理想。究其根本，不同的深度学习任务需要有各自适宜的损失函数。我们以房价预测和手写数字识别两个任务为例，详细剖析其中的缘由如下：</p><ol><li>房价预测是回归任务，而手写数字识别是分类任务，使用均方误差作为分类任务的损失函数存在逻辑和效果上的缺欠。</li><li>房价可以是大于0的任何浮点数，而手写数字识别的输出只可能是0~9之间的10个整数，相当于一种标签。</li><li>在房价预测的案例中，由于房价本身是一个连续的实数值，因此以模型输出的数值和真实房价差距作为损失函数（Loss）是符合道理的。但对于分类问题，真实结果是分类标签，而模型输出是实数值，导致以两者相减作为损失不具备物理含义。</li></ol><h4 id="Softmax函数"><a href="#Softmax函数" class="headerlink" title="Softmax函数"></a>Softmax函数</h4><p>如果模型能输出10个标签的概率，对应真实标签的概率输出尽可能接近100%，而其他标签的概率输出尽可能接近0%，且所有输出概率之和为1。这是一种更合理的假设！与此对应，真实的标签值可以转变成一个10维度的one-hot向量，在对应数字的位置上为1，其余位置为0，比如标签“6”可以转变成[0,0,0,0,0,0,1,0,0,0]。</p><p>为了实现上述思路，需要引入Softmax函数，它可以将原始输出转变成对应标签的概率，公式如下，其中$C$是标签类别个数。<br>$$<br>softmax(x_i) = \frac {e^{x_i}}{\sum_{j=0}^N{e^{x_j}}}, i=0, …, C-1<br>$$<br>从公式的形式可见，每个输出的范围均在0~1之间，且所有输出之和等于1，这是这种变换后可被解释成概率的基本前提。对应到代码上，需要在前向计算中，对全连接网络的输出层增加一个Softmax运算，<code>outputs = F.softmax(outputs)</code>。</p><p><strong>图3</strong> 是一个三个标签的分类模型（三分类）使用的Softmax输出层，从中可见原始输出的三个数字3、1、-3，经过Softmax层后转变成加和为1的三个概率值0.88、0.12、0。</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/ef129caf64254318821e9410bb71ab1f45fff20e4282482986081d44a1e3bcbb" alt="img"></p><h4 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h4><p>在模型输出为分类标签的概率时，直接以标签和概率做比较也不够合理，人们更习惯使用交叉熵误差作为分类问题的损失衡量。</p><p>交叉熵损失函数的设计是基于最大似然思想：最大概率得到观察结果的假设是真的。如何理解呢？举个例子来说，如 <strong>图7</strong> 所示。有两个外形相同的盒子，甲盒中有99个白球，1个蓝球；乙盒中有99个蓝球，1个白球。一次试验取出了一个蓝球，请问这个球应该是从哪个盒子中取出的？</p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/13a942e5ec7f4e91badb2f4613c6f71a00e51c8afb6a435e94a0b47cedac9515" width="400" hegiht="" ></center><center><br>图7：体会最大似然的思想 </br></center><p>相信大家简单思考后均会得出更可能是从乙盒中取出的，因为从乙盒中取出一个蓝球的概率更高$（P(D|h)）$，所以观察到一个蓝球更可能是从乙盒中取出的$(P(h|D))$。$D$是观测的数据，即蓝球白球；$h$是模型，即甲盒乙盒。这就是贝叶斯公式所表达的思想：</p><p>$$P(h|D) ∝ P(h) \cdot P(D|h)$$</p><p>依据贝叶斯公式，某二分类模型“生成”$n$个训练样本的概率：</p><p>$$P(x_1)\cdot S(w^{T}x_1)\cdot P(x_2)\cdot(1-S(w^{T}x_2))\cdot … \cdot P(x_n)\cdot S(w^{T}x_n)$$</p><hr><p><strong>说明：</strong></p><p>对于二分类问题，模型为$S(w^{T}x_i)$，$S$为Sigmoid函数。当$y_i$=1，概率为$S(w^{T}x_i)$；当$y_i$=0，概率为$1-S(w^{T}x_i)$。</p><hr><p>经过公式推导，使得上述概率最大等价于最小化交叉熵，得到交叉熵的损失函数。交叉熵的公式如下：</p><p>$$ L = -[\sum_{k=1}^{n} t_k\log y_k +(1- t_k)\log(1-y_k)] $$</p><p>其中，$\log$表示以$e$为底数的自然对数。$y_k$代表模型输出，$t_k$代表各个标签。$t_k$中只有正确解的标签为1，其余均为0（one-hot表示）。</p><p>因此，交叉熵只计算对应着“正确解”标签的输出的自然对数。比如，假设正确标签的索引是“2”，与之对应的神经网络的输出是0.6，则交叉熵误差是$−\log 0.6 = 0.51$；若“2”对应的输出是0.1，则交叉熵误差为$−\log 0.1 = 2.30$。由此可见，交叉熵误差的值是由正确标签所对应的输出结果决定的。</p><p>自然对数的函数曲线可由如下代码实现。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>x = np.arange(<span class="hljs-number">0.01</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0.01</span>)<br>y = np.log(x)<br>plt.title(<span class="hljs-string">&quot;y=log(x)&quot;</span>) <br>plt.xlabel(<span class="hljs-string">&quot;x&quot;</span>) <br>plt.ylabel(<span class="hljs-string">&quot;y&quot;</span>) <br>plt.plot(x,y)<br>plt.show()<br>plt.figure()<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>分类任务</p><ol><li>数据处理部分：将输入的标签label数据类型改为int64型</li><li>网络定义部分：全连接层输出应该用SoftMax处理，将单一输出改为各类的输出概率，所有概率之和为1。</li><li>训练过程部分：损失函数改为交叉熵</li></ol></blockquote><h3 id="4-训练配置之优化器"><a href="#4-训练配置之优化器" class="headerlink" title="4.训练配置之优化器"></a>4.训练配置之优化器</h3><h4 id="设置学习率"><a href="#设置学习率" class="headerlink" title="设置学习率"></a>设置学习率</h4><p>在深度学习神经网络模型中，通常使用标准的随机梯度下降算法更新参数，学习率代表参数更新幅度的大小，即步长。当学习率最优时，模型的有效容量最大，最终能达到的效果最好。学习率和深度学习任务类型有关，合适的学习率往往需要大量的实验和调参经验。探索学习率最优值时需要注意如下两点：</p><ul><li><strong>学习率不是越小越好</strong>。学习率越小，损失函数的变化速度越慢，意味着我们需要花费更长的时间进行收敛，如 <strong>图2</strong> 左图所示。</li><li><strong>学习率不是越大越好</strong>。只根据总样本集中的一个批次计算梯度，抽样误差会导致计算出的梯度不是全局最优的方向，且存在波动。在接近最优解时，过大的学习率会导致参数在最优解附近震荡，损失难以收敛，如 <strong>图2</strong> 右图所示。</li></ul><p><img src="https://ai-studio-static-online.cdn.bcebos.com/1e0f066dc9fa4e2bbc942447bdc0578c2ffc6afc15684154ae84bcf31b298d7b" alt="img"></p><blockquote><p>在训练前，我们往往不清楚一个特定问题设置成怎样的学习率是合理的，因此在训练时可以尝试调小或调大，通过观察Loss下降的情况判断合理的学习率.</p></blockquote><h4 id="学习率的主流优化算法"><a href="#学习率的主流优化算法" class="headerlink" title="学习率的主流优化算法"></a>学习率的主流优化算法</h4><p>学习率是优化器的一个参数，调整学习率看似是一件非常麻烦的事情，需要不断的调整步长，观察训练时间和Loss的变化。经过研究员的不断的实验，当前已经形成了四种比较成熟的优化算法：SGD、Momentum、AdaGrad和Adam，效果如 <strong>图3</strong> 所示。</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/f4cf80f95424411a85ad74998433317e721f56ddb4f64e6f8a28a27b6a1baa6b" alt="img"></p><ul><li><strong><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/2.0-beta/api/paddle/optimizer/SGD_cn.html">SGD：</a></strong> 随机梯度下降算法，每次训练少量数据，抽样偏差导致的参数收敛过程中震荡。</li><li><strong><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/2.0-beta/api/paddle/optimizer/Momentum_cn.html">Momentum：</a></strong> 引入物理“动量”的概念，累积速度，减少震荡，使参数更新的方向更稳定。</li></ul><p>每个批次的数据含有抽样误差，导致梯度更新的方向波动较大。如果我们引入物理动量的概念，给梯度下降的过程加入一定的“惯性”累积，就可以减少更新路径上的震荡，即每次更新的梯度由“历史多次梯度的累积方向”和“当次梯度”加权相加得到。历史多次梯度的累积方向往往是从全局视角更正确的方向，这与“惯性”的物理概念很像，也是为何其起名为“Momentum”的原因。类似不同品牌和材质的篮球有一定的重量差别，街头篮球队中的投手（擅长中远距离投篮）喜欢稍重篮球的比例较高。一个很重要的原因是，重的篮球惯性大，更不容易受到手势的小幅变形或风吹的影响。</p><ul><li><strong><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/2.0-beta/api/paddle/optimizer/AdagradOptimizer_cn.html">AdaGrad：</a></strong> 根据不同参数距离最优解的远近，动态调整学习率。学习率逐渐下降，依据各参数变化大小调整学习率。</li></ul><p>通过调整学习率的实验可以发现：当某个参数的现值距离最优解较远时（表现为梯度的绝对值较大），我们期望参数更新的步长大一些，以便更快收敛到最优解。当某个参数的现值距离最优解较近时（表现为梯度的绝对值较小），我们期望参数的更新步长小一些，以便更精细的逼近最优解。类似于打高尔夫球，专业运动员第一杆开球时，通常会大力打一个远球，让球尽量落在洞口附近。当第二杆面对离洞口较近的球时，他会更轻柔而细致的推杆，避免将球打飞。与此类似，参数更新的步长应该随着优化过程逐渐减少，减少的程度与当前梯度的大小有关。根据这个思想编写的优化算法称为“AdaGrad”，Ada是Adaptive的缩写，表示“适应环境而变化”的意思。<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api_cn/optimizer_cn/RMSPropOptimizer_cn.html#rmspropoptimizer">RMSProp</a>是在AdaGrad基础上的改进，学习率随着梯度变化而适应，解决AdaGrad学习率急剧下降的问题。</p><ul><li><strong><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/2.0-beta/api/paddle/optimizer/Adam_cn.html">Adam：</a></strong> 由于动量和自适应学习率两个优化思路是正交的，因此可以将两个思路结合起来，这就是当前广泛应用的算法。</li></ul><h3 id="5-调试优化"><a href="#5-调试优化" class="headerlink" title="5.调试优化"></a>5.调试优化</h3><p>训练过程优化思路主要有如下五个关键环节：</p><p><strong>1. 计算分类准确率，观测模型训练效果。</strong></p><p>交叉熵损失函数只能作为优化目标，无法直接准确衡量模型的训练效果。准确率可以直接衡量训练效果，但由于其离散性质，不适合做为损失函数优化神经网络。</p><p><strong>2. 检查模型训练过程，识别潜在问题。</strong></p><p>如果模型的损失或者评估指标表现异常，通常需要打印模型每一层的输入和输出来定位问题，分析每一层的内容来获取错误的原因。</p><p><strong>3. 加入校验或测试，更好评价模型效果。</strong></p><p>理想的模型训练结果是在训练集和验证集上均有较高的准确率，如果训练集的准确率低于验证集，说明网络训练程度不够；如果训练集的准确率高于验证集，可能是发生了<strong>过拟合</strong>现象。通过在优化目标中加入正则化项的办法，解决过拟合的问题。</p><p><strong>4. 加入正则化项，避免模型过拟合。</strong></p><p>飞桨框架支持为整体参数加入正则化项，这是通常的做法。此外，飞桨框架也支持为某一层或某一部分的网络单独加入正则化项，以达到精细调整参数训练的效果。</p><p><strong>5. 可视化分析。</strong></p><p>用户不仅可以通过打印或使用matplotlib库作图，飞桨还提供了更专业的可视化分析工具VisualDL，提供便捷的可视化分析方法。</p><h4 id="计算模型的分类准确率"><a href="#计算模型的分类准确率" class="headerlink" title="计算模型的分类准确率"></a>计算模型的分类准确率</h4><p>准确率是一个直观衡量分类模型效果的指标，由于这个指标是离散的，因此不适合作为损失来优化。通常情况下，交叉熵损失越小的模型，分类的准确率也越高。基于分类准确率，我们可以公平地比较两种损失函数的优劣，例如在【手写数字识别】之损失函数章节中均方误差和交叉熵的比较。</p><p>使用飞桨提供的计算分类准确率API，可以直接计算准确率。</p><blockquote><p><em>class</em> paddle.metric.Accuracy</p></blockquote><p>该API的输入参数input为预测的分类结果predict，输入参数label为数据真实的label。飞桨还提供了更多衡量模型效果的计算指标，详细可以查看paddle.meric包下面的API。</p><p>在下述代码中，我们在模型前向计算过程forward函数中计算分类准确率，并在训练时打印每个批次样本的分类准确率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义网络前向计算过程，卷积后紧接着使用池化层，最后使用全连接层计算最终输出</span><br>   <span class="hljs-comment"># 卷积层激活函数使用Relu，全连接层激活函数使用softmax</span><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs, label</span>):<br>         x = self.conv1(inputs)<br>         x = F.relu(x)<br>         x = self.max_pool1(x)<br>         x = self.conv2(x)<br>         x = F.relu(x)<br>         x = self.max_pool2(x)<br>         x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], <span class="hljs-number">980</span>])<br>         x = self.fc(x)<br>         <span class="hljs-keyword">if</span> label <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>             acc = paddle.metric.accuracy(<span class="hljs-built_in">input</span>=x, label=label)<br>             <span class="hljs-keyword">return</span> x, acc<br>         <span class="hljs-keyword">else</span>:<br>             <span class="hljs-keyword">return</span> x<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    model = MNIST()<br>    model.train()<br>    <br>    <span class="hljs-comment">#四种优化算法的设置方案，可以逐一尝试效果</span><br>    <span class="hljs-comment"># opt = paddle.optimizer.SGD(learning_rate=0.01, parameters=model.parameters())</span><br>    <span class="hljs-comment"># opt = paddle.optimizer.Momentum(learning_rate=0.01, momentum=0.9, parameters=model.parameters())</span><br>    <span class="hljs-comment"># opt = paddle.optimizer.Adagrad(learning_rate=0.01, parameters=model.parameters())</span><br>    opt = paddle.optimizer.Adam(learning_rate=<span class="hljs-number">0.01</span>, parameters=model.parameters())<br>    <br>    EPOCH_NUM = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br>            <span class="hljs-comment">#准备数据</span><br>            images, labels = data<br>            images = paddle.to_tensor(images)<br>            labels = paddle.to_tensor(labels)<br>            <br>            <span class="hljs-comment">#前向计算的过程</span><br>            predicts, acc = model(images, labels)<br>            <br>            <span class="hljs-comment">#计算损失，取一个批次样本损失的平均值</span><br>            loss = F.cross_entropy(predicts, labels)<br>            avg_loss = paddle.mean(loss)<br>            <br>            <span class="hljs-comment">#每训练了100批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">200</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch: &#123;&#125;, loss is: &#123;&#125;, acc is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch_id, batch_id, avg_loss.numpy(), acc.numpy()))<br>                <br>            <span class="hljs-comment">#后向传播，更新参数，消除梯度的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br><br>    <span class="hljs-comment">#保存模型参数</span><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;mnist.pdparams&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="检查模型训练过程，识别潜在训练问题"><a href="#检查模型训练过程，识别潜在训练问题" class="headerlink" title="检查模型训练过程，识别潜在训练问题"></a>检查模型训练过程，识别潜在训练问题</h4><p>使用飞桨动态图编程可以方便的查看和调试训练的执行过程。在网络定义的Forward函数中，可以打印每一层输入输出的尺寸，以及每层网络的参数。通过查看这些信息，不仅可以更好地理解训练的执行过程，还可以发现潜在问题，或者启发继续优化的思路。</p><p>在下述程序中，使用<code>check_shape</code>变量控制是否打印“尺寸”，验证网络结构是否正确。使用<code>check_content</code>变量控制是否打印“内容值”，验证数据分布是否合理。假如在训练中发现中间层的部分输出持续为0，说明该部分的网络结构设计存在问题，没有充分利用。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#加入对每一层输入和输出的尺寸和数据内容的打印，根据check参数决策是否打印每层的参数和输出尺寸</span><br>     <span class="hljs-comment"># 卷积层激活函数使用Relu，全连接层激活函数使用softmax</span><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs, label=<span class="hljs-literal">None</span>, check_shape=<span class="hljs-literal">False</span>, check_content=<span class="hljs-literal">False</span></span>):<br>         <span class="hljs-comment"># 给不同层的输出不同命名，方便调试</span><br>         outputs1 = self.conv1(inputs)<br>         outputs2 = F.relu(outputs1)<br>         outputs3 = self.max_pool1(outputs2)<br>         outputs4 = self.conv2(outputs3)<br>         outputs5 = F.relu(outputs4)<br>         outputs6 = self.max_pool2(outputs5)<br>         outputs6 = paddle.reshape(outputs6, [outputs6.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>])<br>         outputs7 = self.fc(outputs6)<br>         <br>         <span class="hljs-comment"># 选择是否打印神经网络每层的参数尺寸和输出尺寸，验证网络结构是否设置正确</span><br>         <span class="hljs-keyword">if</span> check_shape:<br>             <span class="hljs-comment"># 打印每层网络设置的超参数-卷积核尺寸，卷积步长，卷积padding，池化核尺寸</span><br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n########## print network layer&#x27;s superparams ##############&quot;</span>)<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;conv1-- kernel_size:&#123;&#125;, padding:&#123;&#125;, stride:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.conv1.weight.shape, self.conv1._padding, self.conv1._stride))<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;conv2-- kernel_size:&#123;&#125;, padding:&#123;&#125;, stride:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.conv2.weight.shape, self.conv2._padding, self.conv2._stride))<br>             <span class="hljs-comment">#print(&quot;max_pool1-- kernel_size:&#123;&#125;, padding:&#123;&#125;, stride:&#123;&#125;&quot;.format(self.max_pool1.pool_size, self.max_pool1.pool_stride, self.max_pool1._stride))</span><br>             <span class="hljs-comment">#print(&quot;max_pool2-- kernel_size:&#123;&#125;, padding:&#123;&#125;, stride:&#123;&#125;&quot;.format(self.max_pool2.weight.shape, self.max_pool2._padding, self.max_pool2._stride))</span><br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;fc-- weight_size:&#123;&#125;, bias_size_&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.fc.weight.shape, self.fc.bias.shape))<br>             <br>             <span class="hljs-comment"># 打印每层的输出尺寸</span><br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n########## print shape of features of every layer ###############&quot;</span>)<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;inputs_shape: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(inputs.shape))<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outputs1_shape: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(outputs1.shape))<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outputs2_shape: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(outputs2.shape))<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outputs3_shape: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(outputs3.shape))<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outputs4_shape: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(outputs4.shape))<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outputs5_shape: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(outputs5.shape))<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outputs6_shape: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(outputs6.shape))<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;outputs7_shape: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(outputs7.shape))<br>             <span class="hljs-comment"># print(&quot;outputs8_shape: &#123;&#125;&quot;.format(outputs8.shape))</span><br>             <br>         <span class="hljs-comment"># 选择是否打印训练过程中的参数和输出内容，可用于训练过程中的调试</span><br>         <span class="hljs-keyword">if</span> check_content:<br>            <span class="hljs-comment"># 打印卷积层的参数-卷积核权重，权重参数较多，此处只打印部分参数</span><br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n########## print convolution layer&#x27;s kernel ###############&quot;</span>)<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;conv1 params -- kernel weights:&quot;</span>, self.conv1.weight[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;conv2 params -- kernel weights:&quot;</span>, self.conv2.weight[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])<br><br>             <span class="hljs-comment"># 创建随机数，随机打印某一个通道的输出值</span><br>             idx1 = np.random.randint(<span class="hljs-number">0</span>, outputs1.shape[<span class="hljs-number">1</span>])<br>             idx2 = np.random.randint(<span class="hljs-number">0</span>, outputs4.shape[<span class="hljs-number">1</span>])<br>             <span class="hljs-comment"># 打印卷积-池化后的结果，仅打印batch中第一个图像对应的特征</span><br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nThe &#123;&#125;th channel of conv1 layer: &quot;</span>.<span class="hljs-built_in">format</span>(idx1), outputs1[<span class="hljs-number">0</span>][idx1])<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The &#123;&#125;th channel of conv2 layer: &quot;</span>.<span class="hljs-built_in">format</span>(idx2), outputs4[<span class="hljs-number">0</span>][idx2])<br>             <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The output of last layer:&quot;</span>, outputs7[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <br>        <span class="hljs-comment"># 如果label不是None，则计算分类精度并返回</span><br>         <span class="hljs-keyword">if</span> label <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>             acc = paddle.metric.accuracy(<span class="hljs-built_in">input</span>=F.softmax(outputs7), label=label)<br>             <span class="hljs-keyword">return</span> outputs7, acc<br>         <span class="hljs-keyword">else</span>:<br>             <span class="hljs-keyword">return</span> outputs7<br></code></pre></td></tr></table></figure><h4 id="加入校验或测试，更好评价模型效果"><a href="#加入校验或测试，更好评价模型效果" class="headerlink" title="加入校验或测试，更好评价模型效果"></a>加入校验或测试，更好评价模型效果</h4><p>在训练过程中，我们会发现模型在训练样本集上的损失在不断减小。但这是否代表模型在未来的应用场景上依然有效？为了验证模型的有效性，通常将样本集合分成三份，训练集、校验集和测试集。</p><ul><li><strong>训练集</strong> ：用于训练模型的参数，即训练过程中主要完成的工作。</li><li><strong>校验集</strong> ：用于对模型超参数的选择，比如网络结构的调整、正则化项权重的选择等。</li><li><strong>测试集</strong> ：用于模拟模型在应用后的真实效果。因为测试集没有参与任何模型优化或参数训练的工作，所以它对模型来说是完全未知的样本。在不以校验数据优化网络结构或模型超参数时，校验数据和测试数据的效果是类似的，均更真实的反映模型效果。</li></ul><p>如下程序读取上一步训练保存的模型参数，读取校验数据集，并测试模型在校验数据集上的效果。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h4 id="加入正则化项，避免模型过拟合"><a href="#加入正则化项，避免模型过拟合" class="headerlink" title="加入正则化项，避免模型过拟合"></a>加入正则化项，避免模型过拟合</h4><h5 id="过拟合现象"><a href="#过拟合现象" class="headerlink" title="过拟合现象"></a>过拟合现象</h5><p>对于样本量有限、但需要使用强大模型的复杂任务，模型很容易出现过拟合的表现，即在训练集上的损失小，在验证集或测试集上的损失较大，如 <strong>图2</strong> 所示。</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/99b879c21113494a9d7315eeda74bc4c8fea07f984824a03bf8411e946c75f1b" alt="img"></p><p>反之，如果模型在训练集和测试集上均损失较大，则称为欠拟合。过拟合表示模型过于敏感，学习到了训练数据中的一些误差，而这些误差并不是真实的泛化规律（可推广到测试集上的规律）。欠拟合表示模型还不够强大，还没有很好的拟合已知的训练样本，更别提测试样本了。因为欠拟合情况容易观察和解决，只要训练loss不够好，就不断使用更强大的模型即可，因此实际中我们更需要处理好过拟合的问题。</p><h5 id="导致过拟合原因"><a href="#导致过拟合原因" class="headerlink" title="导致过拟合原因"></a>导致过拟合原因</h5><p>造成过拟合的原因是模型过于敏感，而训练数据量太少或其中的噪音太多。</p><p>如<strong>图3</strong> 所示，理想的回归模型是一条坡度较缓的抛物线，欠拟合的模型只拟合出一条直线，显然没有捕捉到真实的规律，但过拟合的模型拟合出存在很多拐点的抛物线，显然是过于敏感，也没有正确表达真实规律。</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/53c389bb3c824706bd2fbc05f83ab0c6dd6b5b2fdedb4150a17e16a1b64c243e" alt="img"></p><p>如<strong>图4</strong> 所示，理想的分类模型是一条半圆形的曲线，欠拟合用直线作为分类边界，显然没有捕捉到真实的边界，但过拟合的模型拟合出很扭曲的分类边界，虽然对所有的训练数据正确分类，但对一些较为个例的样本所做出的妥协，高概率不是真实的规律。</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/b5a46f7e0fbe4f8686a71d9a2d330ed09f23bca565a44e0d941148729fd2f7d7" alt="img"></p><h5 id="过拟合的成因与防控"><a href="#过拟合的成因与防控" class="headerlink" title="过拟合的成因与防控"></a>过拟合的成因与防控</h5><p>为了更好的理解过拟合的成因，可以参考侦探定位罪犯的案例逻辑，如 <strong>图5</strong> 所示。</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/34de60a675b64468a2c3fee0844a168d53e891eaacf643fd8c1c9ba8e3812bcc" alt="img"></p><p><strong>对于这个案例，假设侦探也会犯错，通过分析发现可能的原因：</strong></p><ol><li>情况1：罪犯证据存在错误，依据错误的证据寻找罪犯肯定是缘木求鱼。</li><li>情况2：搜索范围太大的同时证据太少，导致符合条件的候选（嫌疑人）太多，无法准确定位罪犯。</li></ol><p><strong>那么侦探解决这个问题的方法有两种：或者缩小搜索范围（比如假设该案件只能是熟人作案），或者寻找更多的证据。</strong></p><p><strong>归结到深度学习中，假设模型也会犯错，通过分析发现可能的原因：</strong></p><ol><li>情况1：训练数据存在噪音，导致模型学到了噪音，而不是真实规律。</li><li>情况2：使用强大模型（表示空间大）的同时训练数据太少，导致在训练数据上表现良好的候选假设太多，锁定了一个“虚假正确”的假设。</li></ol><p><strong>对于情况1，我们使用数据清洗和修正来解决。 对于情况2，我们或者限制模型表示能力，或者收集更多的训练数据。</strong></p><p>而清洗训练数据中的错误，或收集更多的训练数据往往是一句“正确的废话”，在任何时候我们都想获得更多更高质量的数据。在实际项目中，更快、更低成本可控制过拟合的方法，只有限制模型的表示能力。</p><h5 id="正则化项"><a href="#正则化项" class="headerlink" title="正则化项"></a>正则化项</h5><p>为了防止模型过拟合，在没有扩充样本量的可能下，只能降低模型的复杂度，可以通过限制参数的数量或可能取值（参数值尽量小）实现。</p><p>具体来说，在模型的优化目标（损失）中人为加入对参数规模的惩罚项。当参数越多或取值越大时，该惩罚项就越大。通过调整惩罚项的权重系数，可以使模型在“尽量减少训练损失”和“保持模型的泛化能力”之间取得平衡。泛化能力表示模型在没有见过的样本上依然有效。正则化项的存在，增加了模型在训练集上的损失。</p><p>飞桨支持为所有参数加上统一的正则化项，也支持为特定的参数添加正则化项。前者的实现如下代码所示，仅在优化器中设置<code>weight_decay</code>参数即可实现。使用参数<code>coeff</code>调节正则化项的权重，权重越大时，对模型复杂度的惩罚越高。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    model.train() <br><br>    <span class="hljs-comment">#各种优化算法均可以加入正则化项，避免过拟合，参数regularization_coeff调节正则化项的权重</span><br>    opt = paddle.optimizer.Adam(learning_rate=<span class="hljs-number">0.01</span>, weight_decay=paddle.regularizer.L2Decay(coeff=<span class="hljs-number">1e-5</span>), parameters=model.parameters())           <br><br>    EPOCH_NUM = <span class="hljs-number">5</span><br>    <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br>            <span class="hljs-comment">#准备数据，变得更加简洁</span><br>            images, labels = data<br>            images = paddle.to_tensor(images)<br>            labels = paddle.to_tensor(labels)<br>            <br>            <span class="hljs-comment">#前向计算的过程，同时拿到模型输出值和分类准确率</span><br>            predicts, acc = model(images, labels)<br>            <span class="hljs-comment">#计算损失，取一个批次样本损失的平均值</span><br>            loss = F.cross_entropy(predicts, labels)<br>            avg_loss = paddle.mean(loss)<br>            <br>            <span class="hljs-comment">#每训练了100批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">200</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch: &#123;&#125;, loss is: &#123;&#125;, acc is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch_id, batch_id, avg_loss.numpy(), acc.numpy()))<br>            <br>            <span class="hljs-comment">#后向传播，更新参数的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br><br>    <span class="hljs-comment">#保存模型参数</span><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;mnist_regul.pdparams&#x27;</span>)<br><br>model = MNIST()<br>train(model)<br></code></pre></td></tr></table></figure><h3 id="6-可视化分析"><a href="#6-可视化分析" class="headerlink" title="6.可视化分析"></a>6.可视化分析</h3><p>训练模型时，经常需要观察模型的评价指标，分析模型的优化过程，以确保训练是有效的。可选用这两种工具：Matplotlib库和VisualDL。</p><ul><li><strong>Matplotlib库</strong>：Matplotlib库是Python中使用的最多的2D图形绘图库，它有一套完全仿照MATLAB的函数形式的绘图接口，使用轻量级的PLT库（Matplotlib）作图是非常简单的。</li><li><strong>VisualDL</strong>：如果期望使用更加专业的作图工具，可以尝试VisualDL，飞桨可视化分析工具。VisualDL能够有效地展示飞桨在运行过程中的计算图、各种指标变化趋势和数据信息。</li></ul><h4 id="使用Matplotlib库绘制损失随训练下降的曲线图"><a href="#使用Matplotlib库绘制损失随训练下降的曲线图" class="headerlink" title="使用Matplotlib库绘制损失随训练下降的曲线图"></a>使用Matplotlib库绘制损失随训练下降的曲线图</h4><p>将训练的批次编号作为X轴坐标，该批次的训练损失作为Y轴坐标。</p><ol><li>训练开始前，声明两个列表变量存储对应的批次编号(iters=[])和训练损失(losses=[])。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py">iters=[]<br>losses=[]<br><span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br><span class="hljs-string">&quot;&quot;&quot;start to training&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ol><li>随着训练的进行，将iter和losses两个列表填满。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><br>iters=[]<br>losses=[]<br><span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br><span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br>        images, labels = data<br>        predicts, acc = model(images, labels)<br>        loss = F.cross_entropy(predicts, label = labels.astype(<span class="hljs-string">&#x27;int64&#x27;</span>))<br>        avg_loss = paddle.mean(loss)<br>        <span class="hljs-comment"># 累计迭代次数和对应的loss</span><br>   iters.append(batch_id + epoch_id*<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>(train_loader()))<br>losses.append(avg_loss)<br></code></pre></td></tr></table></figure><ol><li>训练结束后，将两份数据以参数形式导入PLT的横纵坐标。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">plt.xlabel(<span class="hljs-string">&quot;iter&quot;</span>, fontsize=<span class="hljs-number">14</span>)，plt.ylabel(<span class="hljs-string">&quot;loss&quot;</span>, fontsize=<span class="hljs-number">14</span>)<br></code></pre></td></tr></table></figure><ol><li>最后，调用plt.plot()函数即可完成作图。</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">plt.plot(iters, losses,color=<span class="hljs-string">&#x27;red&#x27;</span>,label=<span class="hljs-string">&#x27;train loss&#x27;</span>) <br></code></pre></td></tr></table></figure><p>详细代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#引入matplotlib库</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    model.train()<br>    <br>    opt = paddle.optimizer.Adam(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br>    <br>    EPOCH_NUM = <span class="hljs-number">10</span><br>    <span class="hljs-built_in">iter</span>=<span class="hljs-number">0</span><br>    iters=[]<br>    losses=[]<br>    <span class="hljs-keyword">for</span> epoch_id <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br>            <span class="hljs-comment">#准备数据，变得更加简洁</span><br>            images, labels = data<br>            images = paddle.to_tensor(images)<br>            labels = paddle.to_tensor(labels)<br>            <br>            <span class="hljs-comment">#前向计算的过程，同时拿到模型输出值和分类准确率</span><br>            predicts, acc = model(images, labels)<br>            <span class="hljs-comment">#计算损失，取一个批次样本损失的平均值</span><br>            loss = F.cross_entropy(predicts, labels)<br>            avg_loss = paddle.mean(loss)<br>            <br>            <span class="hljs-comment">#每训练了100批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch: &#123;&#125;, batch: &#123;&#125;, loss is: &#123;&#125;, acc is &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch_id, batch_id, avg_loss.numpy(), acc.numpy()))<br>                iters.append(<span class="hljs-built_in">iter</span>)<br>                losses.append(avg_loss.numpy())<br>                <span class="hljs-built_in">iter</span> = <span class="hljs-built_in">iter</span> + <span class="hljs-number">100</span><br>            <br>            <span class="hljs-comment">#后向传播，更新参数的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br>            <br>    <span class="hljs-comment">#保存模型参数</span><br>    paddle.save(model.state_dict(), <span class="hljs-string">&#x27;mnist.pdparams&#x27;</span>)<br>    <br>    <span class="hljs-keyword">return</span> iters, losses<br>    <br>model = MNIST()<br>iters, losses = train(model)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#画出训练过程中Loss的变化曲线</span><br>plt.figure()<br>plt.title(<span class="hljs-string">&quot;train loss&quot;</span>, fontsize=<span class="hljs-number">24</span>)<br>plt.xlabel(<span class="hljs-string">&quot;iter&quot;</span>, fontsize=<span class="hljs-number">14</span>)<br>plt.ylabel(<span class="hljs-string">&quot;loss&quot;</span>, fontsize=<span class="hljs-number">14</span>)<br>plt.plot(iters, losses,color=<span class="hljs-string">&#x27;red&#x27;</span>,label=<span class="hljs-string">&#x27;train loss&#x27;</span>) <br>plt.grid()<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="使用VisualDL可视化分析"><a href="#使用VisualDL可视化分析" class="headerlink" title="使用VisualDL可视化分析"></a>使用VisualDL可视化分析</h4><p>VisualDL是飞桨可视化分析工具，以丰富的图表呈现训练参数变化趋势、模型结构、数据样本、高维数据分布等。帮助用户清晰直观地理解深度学习模型训练过程及模型结构，进而实现高效的模型调优，具体代码实现如下。</p><ul><li>步骤1：引入VisualDL库，定义作图数据存储位置（供第3步使用），本案例的路径是“log”。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> visualdl <span class="hljs-keyword">import</span> LogWriter<br>log_writer = LogWriter(<span class="hljs-string">&quot;./log&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>步骤2：在训练过程中插入作图语句。当每100个batch训练完成后，将当前损失作为一个新增的数据点(iter和acc的映射对)存储到第一步设置的文件中。使用变量iter记录下已经训练的批次数，作为作图的X轴坐标。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py">log_writer.add_scalar(tag = <span class="hljs-string">&#x27;acc&#x27;</span>, step = <span class="hljs-built_in">iter</span>, value = avg_acc.numpy())<br>log_writer.add_scalar(tag = <span class="hljs-string">&#x27;loss&#x27;</span>, step = <span class="hljs-built_in">iter</span>, value = avg_loss.numpy())<br><span class="hljs-built_in">iter</span> = <span class="hljs-built_in">iter</span> + <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="7-模型加载及恢复训练"><a href="#7-模型加载及恢复训练" class="headerlink" title="7.模型加载及恢复训练"></a>7.模型加载及恢复训练</h3><p>在快速入门中，我们已经介绍了将训练好的模型保存到磁盘文件的方法。应用程序可以随时加载模型，完成预测任务。但是在日常训练工作中我们会遇到一些突发情况，导致训练过程主动或被动的中断。如果训练一个模型需要花费几天的训练时间，中断后从初始状态重新训练是不可接受的。</p><p>万幸的是，飞桨支持从上一次保存状态开始训练，只要我们随时保存训练过程中的模型状态，就不用从初始状态重新训练。</p><p>下面介绍恢复训练的实现方法，依然使用手写数字识别的案例，网络定义的部分保持不变。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#数据处理部分之前的代码，保持不变</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-keyword">import</span> gzip<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> warnings <br>warnings.filterwarnings(<span class="hljs-string">&#x27;ignore&#x27;</span>)<br><br><span class="hljs-keyword">import</span> paddle.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> paddle.nn <span class="hljs-keyword">import</span> Conv2D, MaxPool2D, Linear<br><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-comment"># 创建一个类MnistDataset，继承paddle.io.Dataset 这个类</span><br><span class="hljs-comment"># MnistDataset的作用和上面load_data()函数的作用相同，均是构建一个迭代器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MnistDataset</span>(paddle.io.Dataset):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, mode</span>):<br>        datafile = <span class="hljs-string">&#x27;./work/mnist.json.gz&#x27;</span><br>        data = json.load(gzip.<span class="hljs-built_in">open</span>(datafile))<br>        <span class="hljs-comment"># 读取到的数据区分训练集，验证集，测试集</span><br>        train_set, val_set, eval_set = data<br>        <br>        <span class="hljs-comment"># 数据集相关参数，图片高度IMG_ROWS, 图片宽度IMG_COLS</span><br>        self.IMG_ROWS = <span class="hljs-number">28</span><br>        self.IMG_COLS = <span class="hljs-number">28</span><br><br>        <span class="hljs-keyword">if</span> mode==<span class="hljs-string">&#x27;train&#x27;</span>:<br>            <span class="hljs-comment"># 获得训练数据集</span><br>            imgs, labels = train_set[<span class="hljs-number">0</span>], train_set[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;valid&#x27;</span>:<br>            <span class="hljs-comment"># 获得验证数据集</span><br>            imgs, labels = val_set[<span class="hljs-number">0</span>], val_set[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">elif</span> mode==<span class="hljs-string">&#x27;eval&#x27;</span>:<br>            <span class="hljs-comment"># 获得测试数据集</span><br>            imgs, labels = eval_set[<span class="hljs-number">0</span>], eval_set[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;mode can only be one of [&#x27;train&#x27;, &#x27;valid&#x27;, &#x27;eval&#x27;]&quot;</span>)<br>        <br>        <span class="hljs-comment"># 校验数据</span><br>        imgs_length = <span class="hljs-built_in">len</span>(imgs)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(imgs) == <span class="hljs-built_in">len</span>(labels), \<br>            <span class="hljs-string">&quot;length of train_imgs(&#123;&#125;) should be the same as train_labels(&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(imgs), <span class="hljs-built_in">len</span>(labels))<br>        <br>        self.imgs = imgs<br>        self.labels = labels<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-comment"># MLP</span><br>        <span class="hljs-comment"># img = np.array(self.imgs[idx]).astype(&#x27;float32&#x27;)</span><br>        <span class="hljs-comment"># label = np.array(self.labels[idx]).astype(&#x27;int64&#x27;)</span><br>        <span class="hljs-comment"># CNN</span><br>        img = np.reshape(self.imgs[idx], [<span class="hljs-number">1</span>, self.IMG_ROWS, self.IMG_COLS]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>        label = np.reshape(self.labels[idx], [<span class="hljs-number">1</span>]).astype(<span class="hljs-string">&#x27;int64&#x27;</span>)<br><br>        <span class="hljs-keyword">return</span> img, label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.imgs)<br><br><span class="hljs-comment"># 定义模型结构</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MNIST</span>(paddle.nn.Layer):<br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>         <span class="hljs-built_in">super</span>(MNIST, self).__init__()<br>         nn.initializer.set_global_initializer(nn.initializer.Uniform(), nn.initializer.Constant())<br>         <span class="hljs-comment"># 定义卷积层，输出特征通道out_channels设置为20，卷积核的大小kernel_size为5，卷积步长stride=1，padding=2</span><br>         self.conv1 = Conv2D(in_channels=<span class="hljs-number">1</span>, out_channels=<span class="hljs-number">20</span>, kernel_size=<span class="hljs-number">5</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">2</span>)<br>         <span class="hljs-comment"># 定义池化层，池化层卷积核kernel_size为2，池化步长为2</span><br>         self.max_pool1 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br>         <span class="hljs-comment"># 定义卷积层，输出特征通道out_channels设置为20，卷积核的大小kernel_size为5，卷积步长stride=1，padding=2</span><br>         self.conv2 = Conv2D(in_channels=<span class="hljs-number">20</span>, out_channels=<span class="hljs-number">20</span>, kernel_size=<span class="hljs-number">5</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">2</span>)<br>         <span class="hljs-comment"># 定义池化层，池化层卷积核kernel_size为2，池化步长为2</span><br>         self.max_pool2 = MaxPool2D(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>)<br>         <span class="hljs-comment"># 定义一层全连接层，输出维度是10</span><br>         self.fc = Linear(in_features=<span class="hljs-number">980</span>, out_features=<span class="hljs-number">10</span>)<br>         <br>    <span class="hljs-comment"># 定义网络前向计算过程，卷积后紧接着使用池化层，最后使用全连接层计算最终输出</span><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>         x = self.conv1(inputs)<br>         x = F.relu(x)<br>         x = self.max_pool1(x)<br>         x = self.conv2(x)<br>         x = F.relu(x)<br>         x = self.max_pool2(x)<br>         x = paddle.reshape(x, [x.shape[<span class="hljs-number">0</span>], <span class="hljs-number">980</span>])<br>         x = self.fc(x)<br>        <span class="hljs-comment">#  x = F.softmax(x)</span><br>         <span class="hljs-keyword">return</span> x         <br></code></pre></td></tr></table></figure><p>定义训练Trainer，包含训练过程和模型保存</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trainer</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, model_path, model, optimizer</span>):<br>        self.model_path = model_path   <span class="hljs-comment"># 模型存放路径 </span><br>        self.model = model             <span class="hljs-comment"># 定义的模型</span><br>        self.optimizer = optimizer     <span class="hljs-comment"># 优化器</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 保存模型</span><br>        paddle.save(self.model.state_dict(), self.model_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train_step</span>(<span class="hljs-params">self, data</span>):<br>        images, labels = data<br>        <span class="hljs-comment"># 前向计算的过程</span><br>        predicts = self.model(images)<br>        <span class="hljs-comment"># 计算损失</span><br>        loss = F.cross_entropy(predicts, labels)<br>        avg_loss = paddle.mean(loss)<br>        <span class="hljs-comment"># 后向传播，更新参数的过程</span><br>        avg_loss.backward()<br>        self.optimizer.step()<br>        self.optimizer.clear_grad()<br>        <span class="hljs-keyword">return</span> avg_loss<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train_epoch</span>(<span class="hljs-params">self, datasets, epoch</span>):<br>        self.model.train()<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(datasets()):<br>            loss = self.train_step(data)<br>            <span class="hljs-comment"># 每训练了1000批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">500</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch_id: &#123;&#125;, batch_id: &#123;&#125;, loss is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch, batch_id, loss.numpy()))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, train_datasets, start_epoch, end_epoch, save_path</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(save_path):<br>            os.makedirs(save_path)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start_epoch, end_epoch):<br>            self.train_epoch(train_datasets, i)<br>            paddle.save(opt.state_dict(), <span class="hljs-string">&#x27;./&#123;&#125;/mnist_epoch&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(save_path,i)+<span class="hljs-string">&#x27;.pdopt&#x27;</span>)<br>            paddle.save(model.state_dict(), <span class="hljs-string">&#x27;./&#123;&#125;/mnist_epoch&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(save_path,i)+<span class="hljs-string">&#x27;.pdparams&#x27;</span>)<br>        self.save()<br></code></pre></td></tr></table></figure><h4 id="恢复训练"><a href="#恢复训练" class="headerlink" title="恢复训练"></a>恢复训练</h4><p><strong>模型恢复训练，需要重新组网，所以我们需要重启AIStudio，运行<code>MnistDataset</code>数据读取和<code>MNIST</code>网络定义、<code>Trainer</code>部分代码，再执行模型恢复代码</strong></p><p>在上述训练代码中，我们训练了五轮（epoch）。在每轮结束时，我们均保存了模型参数和优化器相关的参数。</p><ul><li>使用<code>model.state_dict()</code>获取模型参数。</li><li>使用<code>opt.state_dict</code>获取优化器和学习率相关的参数。</li><li>调用<code>paddle.save</code>将参数保存到本地。</li></ul><p>比如第一轮训练保存的文件是mnist_epoch0.pdparams，mnist_epoch0.pdopt，分别存储了模型参数和优化器参数。</p><p>使用<code>paddle.load</code>分别加载模型参数和优化器参数，如下代码所示。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">paddle.<span class="hljs-built_in">load</span>(params_path+<span class="hljs-string">&#x27;.pdparams&#x27;</span>)<br>paddle.<span class="hljs-built_in">load</span>(params_path+<span class="hljs-string">&#x27;.pdopt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如何判断模型是否准确的恢复训练呢？</p><p>理想的恢复训练是模型状态回到训练中断的时刻，恢复训练之后的梯度更新走向是和恢复训练前的梯度走向完全相同的。基于此，我们可以通过恢复训练后的损失变化，判断上述方法是否能准确的恢复训练。即从epoch 0结束时保存的模型参数和优化器状态恢复训练，校验其后训练的损失变化（epoch 1）是否和不中断时的训练相差不多。</p><hr><p><strong>说明：</strong></p><p>恢复训练有如下两个要点：</p><ul><li>保存模型时分别保存模型参数和优化器参数。</li><li>恢复参数时分别恢复模型参数和优化器参数。</li></ul><hr><p>下面的代码将展示恢复训练的过程，并验证恢复训练是否成功。加载模型参数并从第一个epoch开始训练，以便读者可以校验恢复训练后的损失变化。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> warnings<br>warnings.filterwarnings(<span class="hljs-string">&#x27;ignore&#x27;</span>)<br><span class="hljs-comment"># MLP继续训练</span><br>paddle.seed(<span class="hljs-number">1024</span>)<br><br>epochs = <span class="hljs-number">3</span><br>BATCH_SIZE = <span class="hljs-number">32</span><br>model_path = <span class="hljs-string">&#x27;./mnist_retrain.pdparams&#x27;</span><br><br>train_dataset = MnistDataset(mode=<span class="hljs-string">&#x27;train&#x27;</span>)<br><span class="hljs-comment"># 这里为了使每次的训练精度都保持一致，因此先选择了shuffle=False，真正训练时应改为shuffle=True</span><br>train_loader = paddle.io.DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=<span class="hljs-literal">False</span>, num_workers=<span class="hljs-number">4</span>) <br><br>model = MNIST()<br><span class="hljs-comment"># lr = 0.01</span><br>total_steps = (<span class="hljs-built_in">int</span>(<span class="hljs-number">50000</span>//BATCH_SIZE) + <span class="hljs-number">1</span>) * epochs<br>lr = paddle.optimizer.lr.PolynomialDecay(learning_rate=<span class="hljs-number">0.01</span>, decay_steps=total_steps, end_lr=<span class="hljs-number">0.001</span>)<br>opt = paddle.optimizer.Momentum(learning_rate=lr, parameters=model.parameters())<br><br>params_dict = paddle.load(<span class="hljs-string">&#x27;./checkpoint/mnist_epoch0.pdparams&#x27;</span>)<br>opt_dict = paddle.load(<span class="hljs-string">&#x27;./checkpoint/mnist_epoch0.pdopt&#x27;</span>)<br><br><span class="hljs-comment"># 加载参数到模型</span><br>model.set_state_dict(params_dict)<br>opt.set_state_dict(opt_dict)<br><br>trainer = Trainer(<br>    model_path=model_path,<br>    model=model,<br>    optimizer=opt<br>)<br><span class="hljs-comment"># 前面训练模型都保存了，这里save_path设置为新路径，实际训练中保存在同一目录就可以</span><br>trainer.train(train_datasets=train_loader,start_epoch = <span class="hljs-number">1</span>, end_epoch = epochs, save_path=<span class="hljs-string">&#x27;checkpoint_con&#x27;</span>)<br></code></pre></td></tr></table></figure><p>从恢复训练的损失变化来看，加载模型参数继续训练的损失函数值和正常训练损失函数值是相差不多的，可见使用飞桨实现恢复训练是极其简单的。 总结一下：</p><ul><li>保存模型时同时保存模型参数和优化器参数；</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">paddle.save(opt.state_dict(), <span class="hljs-string">&#x27;model.pdopt&#x27;</span>)<br>paddle.save(model.state_dict(), <span class="hljs-string">&#x27;model.pdparams&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>恢复参数时同时恢复模型参数和优化器参数。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">model_dict = paddle.load(<span class="hljs-string">&quot;model.pdparams&quot;</span>)<br>opt_dict = paddle.load(<span class="hljs-string">&quot;model.pdopt&quot;</span>)<br><br>model.set_state_dict(model_dict)<br>opt.set_state_dict(opt_dict)<br></code></pre></td></tr></table></figure><h3 id="8-动静转换"><a href="#8-动静转换" class="headerlink" title="8.动静转换"></a>8.动静转换</h3><p>动态图有诸多优点，比如易用的接口、Python风格的编程体验、友好的调试交互机制等。在动态图模式下，代码可以按照我们编写的顺序依次执行。这种机制更符合Python程序员的使用习惯，可以很方便地将脑海中的想法快速地转化为实际代码，也更容易调试。</p><p>但在性能方面，由于Python执行开销较大，与C++有一定差距，因此在工业界的许多部署场景中（如大型推荐系统、移动端）都倾向于直接使用C++进行提速。相比动态图，静态图在部署方面更具有性能的优势。静态图程序在编译执行时，先搭建模型的神经网络结构，然后再对神经网络执行计算操作。预先搭建好的神经网络可以脱离Python依赖，在C++端被重新解析执行，而且拥有整体网络结构也能进行一些网络结构的优化。</p><p>那么，有没有可能，深度学习框架实现一个新的模式，同时具备动态图高易用性与静态图高性能的特点呢？飞桨从2.0版本开始，新增新增支持动静转换功能，编程范式的选择更加灵活。用户依然使用动态图编写代码，只需添加一行装饰器 @paddle.jit.to_static，即可实现动态图转静态图模式运行，进行模型训练或者推理部署。在本章节中，将介绍飞桨动态图转静态图的基本用法和相关原理。</p><h4 id="动态图转静态图训练"><a href="#动态图转静态图训练" class="headerlink" title="动态图转静态图训练"></a>动态图转静态图训练</h4><p>飞桨的动转静方式是基于源代码级别转换的ProgramTranslator实现，其原理是通过分析Python代码，将动态图代码转写为静态图代码，并在底层自动使用静态图执行器运行。其基本使用方法十分简便，只需要在要转化的函数（该函数也可以是用户自定义动态图Layer的forward函数）前添加一个装饰器 @paddle.jit.to_static。这种转换方式使得用户可以灵活使用Python语法及其控制流来构建神经网络模型。下面通过一个例子说明如何使用飞桨实现动态图转静态图训练。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br><br><span class="hljs-comment"># 定义手写数字识别模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MNIST</span>(paddle.nn.Layer):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(MNIST, self).__init__()<br>        <br>        <span class="hljs-comment"># 定义一层全连接层，输出维度是1</span><br>        self.fc = paddle.nn.Linear(in_features=<span class="hljs-number">784</span>, out_features=<span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># 定义网络结构的前向计算过程</span><br><span class="hljs-meta">    @paddle.jit.to_static  </span><span class="hljs-comment"># 添加装饰器，使动态图网络结构在静态图模式下运行</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):<br>        outputs = self.fc(inputs)<br>        <span class="hljs-keyword">return</span> outputs<br></code></pre></td></tr></table></figure><p>上述代码构建了仅有一层全连接层的手写字符识别网络。特别注意，在forward函数之前加了装饰器<code>@paddle.jit.to_static</code>，要求模型在静态图模式下运行。下面是模型的训练代码，由于飞桨实现动转静的功能是在内部完成的，对使用者来说，动态图的训练代码和动转静模型的训练代码是完全一致的。训练代码如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-comment"># 确保从paddle.vision.datasets.MNIST中加载的图像数据是np.ndarray类型</span><br>paddle.vision.set_image_backend(<span class="hljs-string">&#x27;cv2&#x27;</span>)<br><br><span class="hljs-comment"># 图像归一化函数，将数据范围为[0, 255]的图像归一化到[-1, 1]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">norm_img</span>(<span class="hljs-params">img</span>):<br>    batch_size = img.shape[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 归一化图像数据</span><br>    img = img/<span class="hljs-number">127.5</span> - <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 将图像形式reshape为[batch_size, 784]</span><br>    img = paddle.reshape(img, [batch_size, <span class="hljs-number">784</span>])<br>    <br>    <span class="hljs-keyword">return</span> img<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">model</span>):<br>    model.train()<br>    <span class="hljs-comment"># 加载训练集 batch_size 设为 16</span><br>    train_loader = paddle.io.DataLoader(paddle.vision.datasets.MNIST(mode=<span class="hljs-string">&#x27;train&#x27;</span>), <br>                                        batch_size=<span class="hljs-number">16</span>, <br>                                        shuffle=<span class="hljs-literal">True</span>)<br>    opt = paddle.optimizer.SGD(learning_rate=<span class="hljs-number">0.001</span>, parameters=model.parameters())<br>    EPOCH_NUM = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH_NUM):<br>        <span class="hljs-keyword">for</span> batch_id, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader()):<br>            images = norm_img(data[<span class="hljs-number">0</span>]).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>            labels = data[<span class="hljs-number">1</span>].astype(<span class="hljs-string">&#x27;int64&#x27;</span>)<br>            <br>            <span class="hljs-comment">#前向计算的过程</span><br>            predicts = model(images)<br>            <br>            <span class="hljs-comment"># 计算损失</span><br>            loss = F.cross_entropy(predicts, labels)<br>            avg_loss = paddle.mean(loss)<br>            <br>            <span class="hljs-comment">#每训练了1000批次的数据，打印下当前Loss的情况</span><br>            <span class="hljs-keyword">if</span> batch_id % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;epoch_id: &#123;&#125;, batch_id: &#123;&#125;, loss is: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch, batch_id, avg_loss.numpy()))<br>            <br>            <span class="hljs-comment">#后向传播，更新参数的过程</span><br>            avg_loss.backward()<br>            opt.step()<br>            opt.clear_grad()<br><br><br>model = MNIST() <br><br>train(model)<br><br>paddle.save(model.state_dict(), <span class="hljs-string">&#x27;./mnist.pdparams&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==&gt;Trained model saved in ./mnist.pdparams&quot;</span>)<br></code></pre></td></tr></table></figure><p>我们可以观察到，动转静的训练方式与动态图训练代码是完全相同的。因此，在动转静训练的时候，开发者只需要在动态图的组网前向计算函数上添加一个装饰器即可实现动转静训练。 在模型构建和训练中，飞桨更希望借用动态图的易用性优势，实际上，在加上@to_static装饰器运行的时候，飞桨内部是在静态图模式下执行OP的，但是展示给开发者的依然是动态图的使用方式。</p><p>动转静更能体现静态图的方面在于模型部署上。下面将介绍动态图转静态图的部署方式。</p><h4 id="动态图转静态图模型保存"><a href="#动态图转静态图模型保存" class="headerlink" title="动态图转静态图模型保存"></a>动态图转静态图模型保存</h4><p>在推理&amp;部署场景中，需要同时保存推理模型的结构和参数，但是动态图是即时执行即时得到结果，并不会记录模型的结构信息。动态图在保存推理模型时，需要先将动态图模型转换为静态图写法，编译得到对应的模型结构再保存，而飞桨框架2.0版本推出paddle.jit.save和paddle.jit.load接口，无需重新实现静态图网络结构，直接实现动态图模型转成静态图模型格式。paddle.jit.save接口会自动调用飞桨框架2.0推出的动态图转静态图功能，使得用户可以做到使用动态图编程调试，自动转成静态图训练部署。</p><p>这两个接口的基本关系如下图所示：</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/018ac3d24c22423a8a263dfd0f0f7f49898b29e707c14dbdb8f9f5abdde75449" alt="img"></p><p>当用户使用paddle.jit.save保存Layer对象时，飞桨会自动将用户编写的动态图Layer模型转换为静态图写法，并编译得到模型结构，同时将模型结构与参数保存。paddle.jit.save需要适配飞桨沿用已久的推理模型与参数格式，做到前向完全兼容，因此其保存格式与paddle.save有所区别，具体包括三种文件：保存模型结构的*.pdmodel文件；保存推理用参数的*.pdiparams文件和保存兼容变量信息的*.pdiparams.info文件，这几个文件后缀均为paddle.jit.save保存时默认使用的文件后缀。</p><p>比如，如果保存上述手写字符识别的inference模型用于部署，可以直接用下面代码实现：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># save inference model</span><br><span class="hljs-keyword">from</span> paddle.static <span class="hljs-keyword">import</span> InputSpec<br><span class="hljs-comment"># 加载训练好的模型参数</span><br>state_dict = paddle.load(<span class="hljs-string">&quot;./mnist.pdparams&quot;</span>)<br><span class="hljs-comment"># 将训练好的参数读取到网络中</span><br>model.set_state_dict(state_dict)<br><span class="hljs-comment"># 设置模型为评估模式</span><br>model.<span class="hljs-built_in">eval</span>()<br><br><span class="hljs-comment"># 保存inference模型</span><br>paddle.jit.save(<br>    layer=model,<br>    path=<span class="hljs-string">&quot;inference/mnist&quot;</span>,<br>    input_spec=[InputSpec(shape=[<span class="hljs-literal">None</span>, <span class="hljs-number">784</span>], dtype=<span class="hljs-string">&#x27;float32&#x27;</span>)])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==&gt;Inference model saved in inference/mnist.&quot;</span>)<br></code></pre></td></tr></table></figure><p>其中，paddle.jit.save API 将输入的网络存储为 paddle.jit.TranslatedLayer 格式的模型，载入后可用于预测推理或者fine-tune训练。 该接口会将输入网络转写后的模型结构 Program 和所有必要的持久参数变量存储至输入路径 path 。</p><p>path 是存储目标的前缀，存储的模型结构 Program 文件的后缀为 .pdmodel ，存储的持久参数变量文件的后缀为 .pdiparams ，同时这里也会将一些变量描述信息存储至文件，文件后缀为 .pdiparams.info。</p><p>通过调用对应的paddle.jit.load接口，可以把存储的模型载入为 paddle.jit.TranslatedLayer格式，用于预测推理或者fine-tune训练。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">import</span> paddle.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-comment"># 确保从paddle.vision.datasets.MNIST中加载的图像数据是np.ndarray类型</span><br>paddle.vision.set_image_backend(<span class="hljs-string">&#x27;cv2&#x27;</span>)<br><br><span class="hljs-comment"># 读取mnist测试数据，获取第一个数据</span><br>mnist_test = paddle.vision.datasets.MNIST(mode=<span class="hljs-string">&#x27;test&#x27;</span>)<br>test_image, label = mnist_test[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 获取读取到的图像的数字标签</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The label of readed image is : &quot;</span>, label)<br><br><span class="hljs-comment"># 将测试图像数据转换为tensor，并reshape为[1, 784]</span><br>test_image = paddle.reshape(paddle.to_tensor(test_image), [<span class="hljs-number">1</span>, <span class="hljs-number">784</span>])<br><span class="hljs-comment"># 然后执行图像归一化</span><br>test_image = norm_img(test_image)<br><span class="hljs-comment"># 加载保存的模型</span><br>loaded_model = paddle.jit.load(<span class="hljs-string">&quot;./inference/mnist&quot;</span>)<br><span class="hljs-comment"># 利用加载的模型执行预测</span><br>preds = loaded_model(test_image)<br>pred_label = paddle.argmax(preds)<br><span class="hljs-comment"># 打印预测结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The predicted label is : &quot;</span>, pred_label.numpy())<br>The label of readed image <span class="hljs-keyword">is</span> :  [<span class="hljs-number">7</span>]<br>The predicted label <span class="hljs-keyword">is</span> :  [<span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><p>paddle.jit.save API 可以把输入的网络结构和参数固化到一个文件中，所以通过加载保存的模型，可以不用重新构建网络结构而直接用于预测，易于模型部署。</p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Numpy</tag>
      
      <tag>Pandas</tag>
      
      <tag>PIL</tag>
      
      <tag>Matplotlib</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Html5+Css+Js</title>
    <link href="/2022/09/cb13af24c3a7.html"/>
    <url>/2022/09/cb13af24c3a7.html</url>
    
    <content type="html"><![CDATA[<h1 id="Html5"><a href="#Html5" class="headerlink" title="Html5"></a>Html5</h1><h2 id="1-表格标签（可以用对齐）"><a href="#1-表格标签（可以用对齐）" class="headerlink" title="1.表格标签（可以用对齐）"></a>1.表格标签（可以用对齐）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        ···<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    ···<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>tr: 行标签</li><li>td: 单元格标签</li><li>th: 表头标签(自动居中加粗显示)</li><li>thead: 用于定义表格的头部。thead标签内部必须拥有tr标签，一般是位于第一行。</li><li>tbody: 用于定义表格的主体,主要用于放数据本体。</li><li>属性：<img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909192737.png" style="zoom:25%;" /></li></ul><h3 id="合并单元格（td的属性标签）"><a href="#合并单元格（td的属性标签）" class="headerlink" title="合并单元格（td的属性标签）"></a>合并单元格（td的属性标签）</h3><p>跨行合并: rowspan=“合并单元格的个数”<br>跨列合并: colspan=”合并单元格的个数”</p><p>目标单元格: (写合并代码)</p><ul><li>跨行:最上侧单元格为目标单元格,写合并代码</li><li>跨列:最左侧单元格为目标单元格,写合并代码</li></ul><h2 id="2-列表标签"><a href="#2-列表标签" class="headerlink" title="2.列表标签"></a>2.列表标签</h2><h3 id="2-1无序列表"><a href="#2-1无序列表" class="headerlink" title="2.1无序列表"></a>2.1无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>ul为列表标签（<strong>只能嵌套li标签</strong>）</p></li><li><p>li为表项标签（可以放别的标签，相当于一个容器）</p></li></ul><h3 id="2-2有序列表（表项排列有序）"><a href="#2-2有序列表（表项排列有序）" class="headerlink" title="2.2有序列表（表项排列有序）"></a>2.2有序列表（表项排列有序）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>ol标签只能嵌套li标签。</li><li>li标签对相当于一个容器,可以容纳所有元素。</li><li>有序列表会带有自己样式属性,但在实际使用时,我们会使用CSS来设置。</li></ul><h3 id="2-3自定义列表"><a href="#2-3自定义列表" class="headerlink" title="2.3自定义列表"></a>2.3自定义列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>关于我<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>博客<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>发卡网<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>域名分发<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在HTML标签中, dl标签用于定义描述列表(或定义列表) , 该标签会与dt (定义项目/名字)和dd( 描述每一个项目/名字)一起使用。</li></ul><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><h3 id="3-1表单的组成"><a href="#3-1表单的组成" class="headerlink" title="3.1表单的组成"></a>3.1表单的组成</h3><p>注：<u>在HTML中,一个完整的表单通常由表单域、表单控件(也称为表单元素)和提示信息3个部分构成.</u></p><ol><li><u>表单域</u>： 表单域是一个包含表单元素的区域。在HTML标签中，form标签用于定义表单域,以实现用户信息的收集和传递。form会把它范围内的表单元素信息提交给服务器.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--&gt;各种表单元素控件&lt;/!--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><u>表单元素</u>：在表单域中可以定义各种表单元素,这些表单元素就是允许用户在表单中输入或者选择的内容控件。</li></ol><ul><li><p><strong>input输入表单元素</strong>：</p><ol><li><p>定义：<code>&lt;input type=&quot;属性值&quot; /&gt;</code>    </p></li><li><p>input标签为单标签</p></li><li><p><u>type属性设置不同的属性值用来指定不同的控件类型</u></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914211117537.png" alt="image-20220914211117537"></p></li><li><p>其他属性：</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914205332692.png" alt="image-20220914205332692"></p><ul><li><u>name和value是每个表单元素都有的属性值主要给后台人员使用，value为默认值</u>。</li><li><u>name表单元素的名字，要求单选按钮和复选框要有相同的name值。</u></li><li><u>只有单选和复选按钮才有checked属性，网页打开默认选中状态。</u></li><li><u>maxlength规定输入字段中的字符的最大长度。</u></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://fcsy.fit.php&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;翻译&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- text 文本框用户输入任何文字 --&gt;</span><br>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- password 密码框 用户看不见输入的密码 --&gt;</span><br>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- radio 单选按钮 可以实现多选一，name是表单元素的名字，相同名字的单选按钮才可以实现多选一 --&gt;</span><br>        性别：男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;man&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span>  女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;woman&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- checkbox 复选框 可以实现多选 --&gt;</span><br>        爱好：吃饭<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span>睡觉<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span>学习<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- reset 将表单元素的内容全部清空 --&gt;</span><br>        重置：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重新填写&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- submit 提交框 可以将表单提交到服务端 --&gt;</span><br>        翻译：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;免费注册&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 普通按钮 配合JavaScript实现脚本的调用 --&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">javascript</span>=<span class="hljs-string">&quot;index.js&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;获取短信验证码&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>             <span class="hljs-comment">&lt;!-- file 上传文件到该页面 --&gt;</span><br>        上传头像：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 为文本框添加标签，以便于点击标签就可以选中文本框填写，for的值必须和id的值相等 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>select下拉表单元素</strong></p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-comment">&lt;!--&gt;...&lt;/!--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>select标签中至少包含一对option标签.</code></li><li>在option中定义selected=“selected”时，当前项即为默认选中项。</li></ol><ul><li><strong>textarea文本域元素</strong><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">今日反馈:<br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><br>pink老师,我知道这个反馈留言是textarea来做的<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p><code>通过textarea标签可以轻松地创建多行文本输入框。</code></p></li><li><p>cols= “每行中的字符数” , rows= “显示的行数” ,我们在实际开发中不会使用,都是用CSS来改变大小。</p></li></ol></li></ul></li></ul><h2 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>iframe<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.lvyestudy.com&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;250&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><u>在HTML中，我们可以使用iframe标签来实现一个内嵌框架。内嵌框架，就是在当前页面再嵌入另外一个网页。</u></li></ul><hr><h1 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h1><h2 id="ch1-练气"><a href="#ch1-练气" class="headerlink" title="ch1 练气"></a>ch1 练气</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><ul><li><p>CSS是层叠样式表( Cascading Style Sheets )的简称.有时我们也会称之为CSS样式表或级联样式表。</p></li><li><p>CSS是也是一种标记语言</p></li><li><p>CSS主要用于设置HTML页面中的文本内容(字体、大小对齐方式等)、图片的外形(宽高、边框样式、边距等)以及版面的布局和外观显示样式。</p></li><li><p>CSS让我们的网页更加丰富多彩,布局更加灵活自如。简单理解: CSS可以美化HTML,让HTML更漂亮,让页面布局更简单。</p></li></ul><h4 id="1-1CSS语法规范"><a href="#1-1CSS语法规范" class="headerlink" title="1.1CSS语法规范"></a>1.1CSS语法规范</h4><p><u><strong>CSS规则由两个主要的部分构成:选择器以及一条或多条声明。</strong></u></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220917005326815.png" alt="image-20220917005326815"></p><ul><li><p>选择器是用于指定 CSS样式的HTML标签,花括号内是对该对象设置的具体样式</p></li><li><p>属性和属性值以“键值对”的形式出现</p></li><li><p>属性是对指定的对象设置的样式属性,例如字体大小文本颜色等</p></li><li><p>属性和属性值之间用英文 “:” 分开</p></li><li><p>多个“键值对”之间用英文”;” 进行区分</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>CSS_Introduction<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;css/css.css&quot;&gt; --&gt;</span>外联式<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"> &lt;!--内嵌式--&gt;</span><br><span class="language-css">        <span class="hljs-selector-class">.p1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: lightcoral;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>:  <span class="hljs-number">50%</span> Arial,<span class="hljs-number">50%</span> Times New Roman;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.p2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: aqua;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>: Times New Roman;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span> i am real person!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2代码风格"><a href="#1-2代码风格" class="headerlink" title="1.2代码风格"></a>1.2代码风格</h4><ol><li><p>紧凑格式</p><p><code>h3 &#123; color: deeppink; font-size: 20px; &#125;</code></p></li><li><p>展开格式（更直观）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span> &#123;<br><span class="hljs-attribute">color</span>: pink;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>空格规范</p><ul><li><code>属性值前面，冒号后面，保留一个空格</code></li><li><code>选择器（标签）和大括号中间保留空格</code></li></ul></li></ol><h3 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h3><p>作用： <u>选择标签设置格式属性</u></p><h4 id="2-1选择器分类"><a href="#2-1选择器分类" class="headerlink" title="2.1选择器分类"></a>2.1选择器分类</h4><p><strong>选择器分为基础选择器和复合选择器两个大类,我们这里先讲解一下基础选择器。</strong></p><ul><li>基础选择器是由<u>单个选择器组成的</u></li><li>基础选择器包括:<u>标签选择器、类选择器、id 选择器和通配符选择器</u></li><li></li></ul><h5 id="2-1-1标签选择器"><a href="#2-1-1标签选择器" class="headerlink" title="2.1.1标签选择器"></a>2.1.1标签选择器</h5><p>标签选择器(元素选择器)是指用<u>HTML标签名称</u>作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">标签名 &#123;<br>属性1: 属性值1;<br>属性2: 属性值2;<br>属性3 属性值3; ···<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-1-2类选择器"><a href="#2-1-2类选择器" class="headerlink" title="2.1.2类选择器"></a>2.1.2类选择器</h5><p>如果想要差异化选择不同的标签,单独选一个或者某几个标签 ,可以使用类选择器；<u><strong>样式点定义，结构类调用，一个或多个，开发最常用</strong></u></p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">.类名 &#123;<br>属性1：属性值1；<br>···<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多类名语法：</p><p><code>&lt;div class=&quot;name1 name2 ···&quot;&gt;&lt;/div&gt;</code></p><ul><li>在标签class属性中写多个类名,可以同时被调用</li><li><u>多个类名中间必须用空格分开</u></li><li><u>将相同样式放在一个公共样式里，便于调用，提高代码复用率</u></li></ul><h5 id="2-1-3ID选择器"><a href="#2-1-3ID选择器" class="headerlink" title="2.1.3ID选择器"></a>2.1.3ID选择器</h5><ul><li>id选择器可以为标有特定id的HTML元素指定特定的样式。</li><li>HTML元素以<u>id属性来设置id选择器</u>, CSS中id选择器<u>以“#” 来定义</u>。</li><li>id标签格式只能被调用一次，唯一性（常与js使用）</li></ul><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">#ID名 &#123;<br>属性1：属性值1；<br>···<br>&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-1-4通配符选择器"><a href="#2-1-4通配符选择器" class="headerlink" title="2.1.4通配符选择器"></a>2.1.4通配符选择器</h5><ul><li>在CSS中,通配符选择器<code>使用*定义</code>,它表示选取页面中所有元素(标签)。</li><li>标签不需要主动调用，自动会给所有元素设置该格式</li><li>特殊情况才使用,后面讲解使用场景(以下是清除所有的元素标签的内外边距)</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br><span class="hljs-attribute">margin</span>：<span class="hljs-number">0</span>；<br><span class="hljs-attribute">padding</span>：<span class="hljs-number">0</span>；<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-1-5属性选择器"><a href="#2-1-5属性选择器" class="headerlink" title="2.1.5属性选择器"></a>2.1.5属性选择器</h5><ul><li>在CSS中给类选择器**<code>添加属性修饰</code>**以设置该属性的标签的样式</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">.类名<span class="hljs-selector-attr">[name=<span class="hljs-string">&quot;user&quot;</span>]</span> &#123;<br><span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-字体属性"><a href="#3-字体属性" class="headerlink" title="3.字体属性"></a>3.字体属性</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919164322443.png" alt="image-20220919164322443"></p><h4 id="3-1字体类型"><a href="#3-1字体类型" class="headerlink" title="3.1字体类型"></a>3.1字体类型</h4><ul><li>各种字体之间必须使用英文状态下的<u>逗号隔开</u></li><li>一般情况下，如果有<u>空格隔开的多个单词组成的字体加引号</u>.</li><li>尽量使用系统默认自带字体,保证在任何用户的浏览器中都能正确显示</li><li>开发常见字体：<code>‘Microsoft YaHei&#39;,tahoma,arial, &#39;Hiragino Sans GB&#39;</code>;</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.classname</span> &#123;<br><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>,tahoma,arial, <span class="hljs-string">&#x27;Hiragino Sans GB&#x27;</span>;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">font-weight</span>: normal/bold/bolder/lighter/number;<br><span class="hljs-attribute">font-style</span>: normal/italic;<br><span class="hljs-attribute">font</span>: font-styLe font-weight font-size/line-height font-family; <br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2字体大小"><a href="#3-2字体大小" class="headerlink" title="3.2字体大小"></a>3.2字体大小</h4><ul><li><p>px(像素)大小是我们网页的最常用的单位</p></li><li><p>谷歌浏览器默认的文字大小为16px</p></li><li><p>不同浏览器可能默认显示的字号大小不一致,我们尽量给个明确值大小,不要默认大小</p></li><li><p>可以给body指定整个页面文字的大小，但标题标签要单独设置大小</p><h4 id="3-3字体粗细"><a href="#3-3字体粗细" class="headerlink" title="3.3字体粗细"></a>3.3字体粗细</h4></li><li><p>100~900（400 等同于normal,而700等同于bold,注意这个数字后面不跟单位)</p></li><li><p>bold(字体加粗)</p></li><li><p>bolder(字体特粗)</p></li><li><p>lighter(字体变细)</p></li></ul><h4 id="3-4文字样式"><a href="#3-4文字样式" class="headerlink" title="3.4文字样式"></a>3.4文字样式</h4><ul><li>normal默认值，浏览器会显示标准的字体样式font-style: normal;</li><li>italic浏览器会显示斜体的字体样式。</li></ul><h4 id="3-5字体复合属性"><a href="#3-5字体复合属性" class="headerlink" title="3.5字体复合属性"></a>3.5字体复合属性</h4><ul><li>使用font属性时,必须按上面语法格式中的顺序书写，<u><code>不能更换顺序</code></u>，并且各个属性间以<code>空格隔开</code></li><li>不需要设置的属性可以省略(取默认值) , 但<code>必须保留font-size和font-family属性</code>,否则font属性将不起作用</li></ul><h3 id="4-文本属性"><a href="#4-文本属性" class="headerlink" title="4.文本属性"></a>4.文本属性</h3><h4 id="4-1文本颜色"><a href="#4-1文本颜色" class="headerlink" title="4.1文本颜色"></a>4.1文本颜色</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919201737750.png" alt="image-20220919201737750"></p><h4 id="4-2对其文本"><a href="#4-2对其文本" class="headerlink" title="4.2对其文本"></a>4.2对其文本</h4><p><u>以本身所占据的空间进行对其调整</u></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927225953748.png" alt="image-20220927225953748"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3装饰文本"><a href="#4-3装饰文本" class="headerlink" title="4.3装饰文本"></a>4.3装饰文本</h4><p>text-decoration属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>text- decoration: underline;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927231333931.png" alt="image-20220927231333931"></p><h4 id="4-4文本缩进"><a href="#4-4文本缩进" class="headerlink" title="4.4文本缩进"></a>4.4文本缩进</h4><ul><li><p><strong>text-indent</strong>属性用来指定文本的<u>第一行的缩进</u>,通常是将段落的首行缩进。</p></li><li><p><strong>em</strong>是一个相对单位,就是当前元素(font-size) 1个文字的大小，如果当前元素没有设置大小,则会按照父元素的1个文字大小。</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">P</span>&#123;<br><span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;//或者<span class="hljs-number">10px</span> <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-5行间距"><a href="#4-5行间距" class="headerlink" title="4.5行间距"></a>4.5行间距</h4><p><strong>line-height</strong>属性用于设置行间的距离(行高)。可以控制文字行与行之间的距离.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">26px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927232624388.png" alt="image-20220927232624388"></p><h3 id="5-引入方式"><a href="#5-引入方式" class="headerlink" title="5.引入方式"></a>5.引入方式</h3><h4 id="1-行内式"><a href="#1-行内式" class="headerlink" title="1.行内式"></a>1.行内式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:black;&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;padding:30px;&quot;</span>&gt;</span>Hostinger Tutorials<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:white;&quot;</span>&gt;</span>Something usefull here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>行内样式表(内联样式表)是在元素标签内部的style属性中设定CSS样式。<strong>适合于修改简单样式</strong>.</li><li>style实就是标签的属性</li><li>在双引号中间,写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li></ul><h4 id="2-内嵌式"><a href="#2-内嵌式" class="headerlink" title="2.内嵌式"></a>2.内嵌式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:white; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.center</span> &#123;<span class="hljs-attribute">display</span>: block; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;&#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#button-go</span>, <span class="hljs-selector-id">#button-back</span> &#123;<span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> black;&#125;</span><br><span class="language-css"></span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>标签理论上可以放在HTML文档的任何地方,但一般会放在文档的标签中</p></li><li><p>通过此种方式,可以防便控制当前整个页面中的元素样式设置</p></li><li><p>代码结构清晰,但是并没有实现结构与样式完全分离</p></li></ul><h4 id="3-外联式"><a href="#3-外联式" class="headerlink" title="3.外联式"></a>3.外联式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-调试工具"><a href="#6-调试工具" class="headerlink" title="6.调试工具"></a>6.调试工具</h3><ul><li><strong>Ctr|+滚轮</strong> 可以放大开发者工具代码大小。</li><li>左边是HTML元素结构,右边是CSS样式。</li><li>右边CSS样式可以改动数值(<strong>左右箭头</strong>或者<strong>直接输入</strong>)和查看颜色。</li><li><strong>Ctrl + 0</strong>复原浏览器大小。</li><li>如果点击元素,发现右侧没有样式引入，极有可能是类名或者样式引入错误。</li><li>如果有样式,但是样式前面有<strong>黄色叹号</strong>提示,则是样式<strong>属性书写错误</strong>。</li></ul><h3 id="7-综合案例"><a href="#7-综合案例" class="headerlink" title="7.综合案例"></a>7.综合案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"> * @Author: Alleyf 3035581811@qq.com</span><br><span class="hljs-comment"> * @Github: https://github.com/Alleyf</span><br><span class="hljs-comment"> * @QQ: 3035581811</span><br><span class="hljs-comment"> * @Signature: You know more，you know less</span><br><span class="hljs-comment"> * @Date: 2022-10-15 22:52:30</span><br><span class="hljs-comment"> * @LastEditors: Alleyf 3035581811@qq.com</span><br><span class="hljs-comment"> * @LastEditTime: 2022-10-16 00:35:46</span><br><span class="hljs-comment"> * @FilePath: \My_practice\ch3\综合案例\indexdemo.html</span><br><span class="hljs-comment"> * Copyright (c) 2022 by Alleyf 3035581811@qq.com, All Rights Reserved. </span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/index.css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">font</span>: <span class="hljs-number">16px</span>/<span class="hljs-number">28px</span> <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>cssdemo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tit&quot;</span>&gt;</span>北方高温明日达鼎盛 京津冀多地地表温度将超60℃<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;t&quot;</span>&gt;</span><br>            2019-07-03 16:31:47 来源:<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://static-3278ff2a-e80b-46df-b1f9-2d88301455e3.bspapp.com/&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;net&quot;</span>&gt;</span>黑洞<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入查询条件...&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;搜索&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        中国天气网讯 今天（3日），华北、黄淮多地出现高温天气，截至下午2点，北京、天津、郑州等地气温突破35℃。预报显示，今后三天（3-5日），这一带的高温天气将继续发酵，高温范围以及强度将在4日达到鼎盛，预计北京、天津、石家庄、济南等地明天的最高气温有望突破38℃，其中北京和石家庄的最高气温还有望创今年以来的新高。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br>        气温41.4℃！地温66.5！北京强势迎七月首个高温日<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../images/pic.jpeg&quot;</span> /&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        今天，华北、黄淮一带的高温持续发酵，截至今天下午2点，陕西北部、山西西南部、河北南部、北京、天津、山东西部、河南北部最高气温已普遍超过35℃。大城市中，北京、天津、郑州均迎来高温日。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        在阳光暴晒下，地表温度也逐渐走高。今天下午2点，华北黄淮大部地区的地表温度都在50℃以上，部分地区地表温度甚至超过60℃。其中，河北衡水地表温度高达68.3℃，天津站和北京站附近的地表温度分别高达66.6℃和66.5℃。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span><br>        明日热度再升级！京津冀携手冲击38℃+<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        中国天气网气象分析师王伟跃介绍，明天（4日），华北、黄淮地区35℃以上的高温天气还将继续升级，并进入鼎盛阶段，高温强度和范围都将发展到最强。 明天，北京南部、天津大部、河北中部和南部、山东中部和西部、山西南部局地、河南北部、东北部分地区的最高气温都将达到或超过35℃。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>        不过，专家提醒，济南被雨水天气完美绕开，因此未来一周，当地的高温还会天天上岗。在此提醒当地居民注意防暑降温，防范持续高温带来的各种不利影响。（文/张慧 数据支持/王伟跃 胡啸 审核/刘文静 张方丽）<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span><br>        本文来源：中国天气网 责任编辑：刘京_NO5631<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="ch2-筑基"><a href="#ch2-筑基" class="headerlink" title="ch2 筑基"></a>ch2 筑基</h2><h3 id="1-Emmet语法"><a href="#1-Emmet语法" class="headerlink" title="1.Emmet语法"></a>1.Emmet语法</h3><ol><li>快速生成html标签</li></ol><ul><li>生成标签直接输入<strong>标签名按tab键</strong>即可比如div 然后tab键，就可以生成<div> </div></li><li>如果想要生成多个相同标签加上<em>就可以了比如*<em>div*3</em></em> 就可以快速生成3个div</li><li>如果有父子级关系的标签,可以用&gt;比如<strong>ul&gt;li</strong>就可以了</li><li>如果有兄弟关系的标签,用+就可以了比如<strong>div+p</strong></li><li>如果生成带有类名或者id名字的，直接写**.demo<strong>或者</strong>#two** <strong>tab键</strong>就可以了</li><li>如果生成的div类名是有顺序的，可以用<strong>自增符号$</strong></li><li>如果想要在生成的标签**内部写内容可以用{}**表示</li></ul><ol start="2"><li>快速生成css样式</li></ol><p>CSS基本采取<strong>简写形式</strong>即可.</p><blockquote><ul><li>比如w200 按tab可以生成width: 200px;</li></ul></blockquote><blockquote><ul><li>比如Ih26按tab 可以生成line-height: 26px;</li></ul></blockquote><h3 id="2-复合选择器"><a href="#2-复合选择器" class="headerlink" title="2.复合选择器"></a>2.复合选择器</h3><h3 id="3-元素显示模式"><a href="#3-元素显示模式" class="headerlink" title="3.元素显示模式"></a>3.元素显示模式</h3><h3 id="4-背景"><a href="#4-背景" class="headerlink" title="4.背景"></a>4.背景</h3><h3 id="5-三大特性"><a href="#5-三大特性" class="headerlink" title="5.三大特性"></a>5.三大特性</h3><h3 id="6-注释"><a href="#6-注释" class="headerlink" title="6.注释"></a>6.注释</h3><hr><h1 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h1><p><a href="https://github.com/Alleyf">版权归属: Alleyf</a></p>]]></content>
    
    
    <categories>
      
      <category>Front_end_development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>h5</tag>
      
      <tag>css</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo_Command</title>
    <link href="/2022/09/2ffa691bd0f6.html"/>
    <url>/2022/09/2ffa691bd0f6.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><h2 id="Synthesis-Command-Hexo"><a href="#Synthesis-Command-Hexo" class="headerlink" title="Synthesis_Command_Hexo"></a>Synthesis_Command_Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><h2 id="Synthesis-Command-Git"><a href="#Synthesis-Command-Git" class="headerlink" title="Synthesis_Command_Git"></a>Synthesis_Command_Git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add .或者git add filename<br>$ git commit -m <span class="hljs-string">&quot;推送注释内容&quot;</span><br>$ git push (origin main)(main为分支)<br></code></pre></td></tr></table></figure><h2 id="Synthesis-Command-bash"><a href="#Synthesis-Command-bash" class="headerlink" title="Synthesis_Command_bash"></a>Synthesis_Command_bash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#让linux的jyputer notebook服务一直运行</span><br><span class="hljs-built_in">nohup</span> jupyter notebook --allow-root &amp;<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Command</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java_Notes</title>
    <link href="/2022/09/7b5d9ab53dc1.html"/>
    <url>/2022/09/7b5d9ab53dc1.html</url>
    
    <content type="html"><![CDATA[<h1 id="第一章、计算机语言及系统概述"><a href="#第一章、计算机语言及系统概述" class="headerlink" title="第一章、计算机语言及系统概述"></a>第一章、计算机语言及系统概述</h1><p><u><strong>前言：</strong></u></p><blockquote><p>无论学习任何语言都要先理解每个知识点本身，在此基础上勤加练习，只有练习的越多，才能掌握对应的要点，练习实践过程中会发现一些未可知意外的问题，不断发现问题解决问题，从而扩充自己的知识面，本篇笔记仅仅是Java入门基础，还有很多深层次内容需要靠自己进一步学习，在这里祝愿大家都能有所收获，成为一名优秀的开发者！</p></blockquote><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><ol><li><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907091018.png" style="zoom:50%;" /></li><li>特点：<strong>Write once，run anywhere！</strong></li></ol><ul><li><strong>java：java program-&gt;执行编译后的程序</strong></li><li> <strong>javac：java program.java-&gt;编译该程序生成.class文件</strong></li><li> <strong>javadoc：javadoc program-&gt;生成该程序的html文档</strong></li></ul><ol start="3"><li><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135804.png" style="zoom:50%;" /></li><li><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135836.png" style="zoom: 50%;" align="middle" /></li></ol><hr><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="第二章、数据类型及变量"><a href="#第二章、数据类型及变量" class="headerlink" title="第二章、数据类型及变量"></a>第二章、数据类型及变量</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135908.png" style="zoom:33%;"  align="middle"/><blockquote><ul><li><p>标识符必须以**”字母”、下划线”_”、美元符”$”**开头.</p></li><li><p>标识符其它部分可以是字母、下划线“_”、美元符“$”和<strong>数字</strong>的任意组合。</p></li><li><p>Java 标识符<strong>大小写敏感</strong>，且<strong>长度无限制</strong>,但不可以是Java的关键字。</p></li><li><p>Java 采用<strong>16位Unicode</strong>.</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DefineKey</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> _j=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> $k=<span class="hljs-number">2</span>;<br><span class="hljs-comment">//        int 1i=0;(NO)</span><br><span class="hljs-comment">//        int 中国=1;(不建议)</span><br>        <span class="hljs-type">byte</span> a=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">double</span> b=<span class="hljs-number">0.1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221031085020005.png" alt="字符集" style="zoom: 50%;" /><ol><li>ISO8859-1 ——西欧字符集 </li><li>GB2312 ——大陆最早使用的简体中文字符集 </li><li>GBK ——GB2312 的扩展，可以表示繁体字 </li><li>GB18030 ——最新GBK的扩展，中国所有非手持/嵌入式计算机系统的强制性实施标准。可以表示汉字、 维吾尔文、藏文等中华民族字符 </li><li>BIG5 ——台湾的五大码，表示繁体字 </li><li>Unicode ——国际通用字符集</li></ol><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135913.png"  align="middle"/><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><div>    <center>    <p>        <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135920.png" style="zoom:33%;" />       </p>    </br>    <p>        <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135925.png" style="zoom:33%;" />    </p>    </br>    <p>        <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135953.png" style="zoom:33%;" />    </p></center></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">BaseData</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">123</span>;<span class="hljs-comment">//默认十进制</span><br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0123</span>;<span class="hljs-comment">//八进制</span><br>    <span class="hljs-type">int</span> k=<span class="hljs-number">0x123</span>;<span class="hljs-comment">//16进制</span><br>    <span class="hljs-type">long</span> c=<span class="hljs-number">55555</span>;<br>    <span class="hljs-type">long</span> d=<span class="hljs-number">555555555555555L</span>;<br>    <span class="hljs-type">double</span> e=<span class="hljs-number">521e2</span>;<br>    <span class="hljs-type">char</span> f=<span class="hljs-string">&#x27;\u0064&#x27;</span>;<br>    System.out.println(f);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li>Java的整形数据类型<strong>默认为int型</strong>(4字节)，eg: long a = 55555555;<strong>a实际为整形(默认)<strong>，除非后面加</strong>l/L</strong>才为<strong>长整型</strong></li><li>Java的浮点型数据类型<strong>默认为double型</strong>(8字节)，若要用float需要在数值后面<strong>加f/F</strong>，<strong>加d/D</strong>为double型，浮点型都存在<strong>舍入误差</strong></li><li>float尾数可以精确到<strong>7位有效数字</strong>，常用double满足需求</li><li><strong>BigInteger</strong>实现了任意精度的<strong>整数运算</strong>。<strong>BigDecimal</strong> 实现了任意精度的<strong>浮点运算</strong>。</li></ul></blockquote><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135958.png" style="zoom:33%" /></div><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140005.png" style="zoom:33%" align="middle" /></div><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140009.png" style="zoom:33%" align="middle" /></div><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140012.png" style="zoom:33%" align="middle" /></div>> - **Unicode**具有从0到65535之间的编码，他们通常用从’\u0000’到’\uFFFF’ 之间的**十六进制**值来表示（前缀为u表示Unicode）>> - **boolean类型**只有一位，注意不是一个字节！<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140707.png" style="zoom: 53%" align="middle" /></div>**提升转换不丢失精度;(type)var强制类型转换会丢失精度**<p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221031195745491.png" alt="image-20221031195745491"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TypeChange</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">double</span> s=<span class="hljs-number">3.1415</span>;<br>    <span class="hljs-type">int</span> n=(<span class="hljs-type">int</span>)s;<br>    <span class="hljs-type">char</span> b=(<span class="hljs-type">char</span>)n;<br>    <span class="hljs-type">char</span> a=<span class="hljs-string">&#x27;a&#x27;</span>;<br>    String c;<br>    System.out.println(n+b);<br>    <span class="hljs-type">int</span> money=<span class="hljs-number">1000000000</span>;<span class="hljs-comment">//int型为4个字节最大为21亿，超出则异常</span><br>    <span class="hljs-type">int</span> years=<span class="hljs-number">20</span>;<br>    <span class="hljs-type">double</span> total=(<span class="hljs-type">double</span>)(money)*years;<span class="hljs-comment">//提前将其中一个整形转换为浮点型以避免精度缺失</span><br>    System.out.println(total);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><strong>实例</strong>变量：在<strong>堆</strong>中。</li><li><strong>静态</strong>变量：在<strong>方法区</strong>。</li><li><strong>局部</strong>变量：在<strong>栈</strong>中。</li></ul><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907143232.png" style="zoom:33%" align="middle" /><p>以上三大变量中：</p><p><strong>局部变量永远都不会存在线程安全问题。</strong></p><ul><li>因为局部变量不共享。（一个线程一个栈）</li><li>局部变量在<strong>栈</strong>中。所以局部变量永远都不会共享。</li></ul><ol><li>实例变量在堆中，堆只有1个。</li><li>静态变量在方法区中，方法区只有1个。</li></ol><p><strong>堆和方法区都是多线程共享的，所以可能存在线程安全问题。</strong></p><p><strong>总结：</strong></p><ul><li><strong>局部变量+常量</strong>：不会有线程安全问题。</li><li><strong>成员变量（实例+静态）</strong>：可能会有线程安全问题。</li></ul><blockquote><p>最终变量（必须初始化）：<code>final type variable=value；</code>（<strong>定义时初始化或构造函数初始化</strong>）</p></blockquote><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li><strong>只能被初始化一次</strong></li><li><strong>常量名全部大写，单词过多使用下划线</strong></li></ul><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907142721.png" style="zoom:33%" align="middle" /><h2 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h2><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907150838.png" style="zoom:33%" align="middle" /><h2 id="输出进制格式化"><a href="#输出进制格式化" class="headerlink" title="输出进制格式化"></a>输出进制格式化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;二进制输出&quot;</span>+Integer.toBinaryString(a));<br>System.out.println(<span class="hljs-string">&quot;八进制输出&quot;</span>+Integer.toOctalString(a));<br>System.out.println(<span class="hljs-string">&quot;十六进制输出&quot;</span>+Integer.toHexString(a));<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><ul><li><p>定义：<strong>type[] arrayname = new type[num] 或  type arrayname[] = new type[num]</strong></p></li><li><p><strong>初始化默认值为零</strong></p></li><li><p><strong>数组直接赋值属于传引用，指向同一个地址空间</strong></p></li></ul><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ul><li>定义：<strong>type[][] arrayname = new type[m] [n]</strong></li><li>可以不规则，给不同行分配不同大小的列</li><li><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909084420.png" style="zoom: 33%;" align="middle"  /></li></ul><h2 id="容器遍历元素"><a href="#容器遍历元素" class="headerlink" title="容器遍历元素"></a>容器遍历元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : fib)<br>/ /vaue获得fib数组每个元素,<br>/ /相当于fib[i]<br>System.out,print(<span class="hljs-string">&quot; &quot;</span> +value);<br></code></pre></td></tr></table></figure><h2 id="方法（递归）"><a href="#方法（递归）" class="headerlink" title="方法（递归）"></a>方法（递归）</h2><ul><li><strong>递归方法适合用于分段函数类型的问题求解，必须有递归头和递归体</strong></li><li><strong>递归和堆栈原理类似，递归也可以通过堆栈实现</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//斐波那契数列第n项</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fib</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        System.out.println(sequence(<span class="hljs-number">10</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sequence</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>|n == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> n;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> sequence(n-<span class="hljs-number">2</span>)+sequence(n - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;Index error&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li><p>字符串常量“abc”</p></li><li><p>String是字符串类,属于引用数据类型</p></li><li><p><code>s.charAt(index)//索引下标的值</code></p></li><li><p>字符串变量及运算</p><ul><li><p>赋值运算</p><p>​    String str = “abc”;</p><p>​    String str2 = str;</p></li><li><p>连接运算+ +=</p><p>​    str = “abc” + “xyz”; //str的值为”abcxyz”</p></li></ul></li><li><p><strong>字符串不是字符数组</strong></p></li><li><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909093029.png" style="zoom:25%" align="middle"/></div></li></ol><h2 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h2><div align="center">    <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909092844.png" style="zoom:25%" align="middle" /></div><hr><h1 id="第三章、类的封装、继承和多态"><a href="#第三章、类的封装、继承和多态" class="headerlink" title="第三章、类的封装、继承和多态"></a>第三章、类的封装、继承和多态</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><p>类的特点：<code>具有封装性，继承性，多态性和抽象性。</code></p><p>对象：<code>类的实例。</code></p><p>注：</p><ul><li>Java中进行方法调用中传递参数时，<strong>遵循值传递的原则</strong>：基本类型传递的是该数据值本身。引用类型传递的是对对象的引用，而不是对象本身。</li><li>与c++类似，类的定义和调用要分开在两个文件中，类的声明与定义在一个文件，类的调用要在另外一个文件的类中定义一个类对象: <code>classname objname=new classname()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的声明</span><br><span class="hljs-keyword">package</span> ch4;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span> &#123;<br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setname</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setage</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类的调用</span><br><span class="hljs-keyword">package</span> ch4;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">callpeople</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">people</span> <span class="hljs-variable">zyk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">people</span>();<br>        <span class="hljs-type">people</span> <span class="hljs-variable">fcs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">people</span>();<br>        fcs = zyk;<br>        zyk.setname(<span class="hljs-string">&quot;赵逸坤&quot;</span>);<br>        zyk.setage(<span class="hljs-number">21</span>);<br>        System.out.println(zyk.getname()+<span class="hljs-string">&quot;今年&quot;</span>+zyk.getage()+<span class="hljs-string">&quot;岁了&quot;</span>);<br>        System.out.println(zyk);<br>        System.out.println(fcs);<br><span class="hljs-comment">//        Scanner in = new Scanner(System.in);</span><br><span class="hljs-comment">//        String name = in.next();</span><br><span class="hljs-comment">//        System.out.println(in);</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><h3 id="1构造方法和析构方法"><a href="#1构造方法和析构方法" class="headerlink" title="1构造方法和析构方法"></a>1构造方法和析构方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在类里进行定义构造方法，用this对对象引用，从而避免与形参名的冲突</span><br><span class="hljs-comment">//super为隐式参数，为对父类的引用</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">people</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//析构方法</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 对象的清理工作</span><br>&#125;<br><span class="hljs-comment">//给对象赋值为null，则对象的内存将会释放，但静态方法和变量不会释放</span><br></code></pre></td></tr></table></figure><p><strong>方法的重载：</strong></p><p><code>通过参数列表中参数的类型、个数和顺序的不同进行区别</code></p><h3 id="2对象的引用和运算"><a href="#2对象的引用和运算" class="headerlink" title="2对象的引用和运算"></a>2对象的引用和运算</h3><ul><li>instanceof对象运算符 eg：<code>d instanceof MyDate</code></li><li>super为隐式参数，为对<strong>父类的引用</strong></li><li>this为隐式参数，为对<strong>对象本身的引用</strong></li><li>普通方法中，this总是指向调用该方法的对象; 构造方法中，this总是指向正要初始化的对象；this不能用于static方法；可以在一个构造方法中通过this调用其它构造方法，且必须是构造方法中 的第一条语句</li><li>this不能用于<strong>static方法</strong></li></ul><h3 id="3访问控制-隐藏-封装"><a href="#3访问控制-隐藏-封装" class="headerlink" title="3访问控制-隐藏/封装"></a>3访问控制-隐藏/封装</h3><ul><li>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。</li><li>boolean变量的get方法是is开头；常量或static变量公开</li><li>default：默认访问控制属性，什么都没加就是该控制符。有的书上说 friendly、package，这都是一个意思，都不能真的写出来，如果什么访问修饰符都不加，就是default/friendly/package</li><li>Java的访问控制是停留在编译层，也就是它不会在.class文件中留下任何痕迹，只在编译的时候进行访问控制的检查。其实，通过反射的手段，可以访问任何包下任何类中的成员，例如，访问类中的私有成员也是可以的。说明访问控制是<code>伪封装（类似于python）</code>。</li></ul><h4 id="类的访问权限："><a href="#类的访问权限：" class="headerlink" title="类的访问权限："></a>类的访问权限：</h4><p>  <strong>只有public和缺省两种</strong></p><p>  eg：public class MyDate 或class MyDate_ex</p><h4 id="类成员和函数的访问权限："><a href="#类成员和函数的访问权限：" class="headerlink" title="类成员和函数的访问权限："></a>类成员和函数的访问权限：</h4>  <img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914154845348.png" alt="image-20220914154845348" style="zoom:60%" align="middle" /><h4 id="声明set-和get-方法存取对象的属性"><a href="#声明set-和get-方法存取对象的属性" class="headerlink" title="声明set()和get()方法存取对象的属性"></a>声明set()和get()方法存取对象的属性</h4><h3 id="4静态成员"><a href="#4静态成员" class="headerlink" title="4静态成员"></a>4静态成员</h3><ul><li><p>静态成员是属于类本身的公共属性或方法。</p></li><li><p>静态成员变量也叫类属性或类变量，静态成员变量调用时可以对象.类属性或类名.类属性来访问。</p></li><li><p>静态方法调用时可以通过类名.类方法或对象.类方法调用，在调用该方法时，不会将对象的引用（this）传递给它，所以在 static 方法中不可访问非static的成员，静态方法只能访问静态成员变量或静态方法。</p></li><li><p> 父类中是静态方法，子类中不能覆盖为非静态方法；在符合覆盖规则的前提下， 在父子类中，父类中的静态方法可以被子类中的静态方法覆盖，但无多态。（在使用对象调用静态方法时，实则是<strong>调用编译时类型的静态方法</strong>）。</p></li><li><p>父子类中，<strong>静态方法</strong>只能被<strong>静态方法覆盖</strong>，父子类中，<strong>非静态方法</strong>只能被<strong>非静态方法覆盖</strong>。</p></li><li><p><strong>静态方法</strong>只能调用<strong>静态方法和成员</strong>，<strong>非静态方法</strong>可以调用<strong>所有方法和成员</strong>。</p></li></ul><h4 id="静态初始化块-static"><a href="#静态初始化块-static" class="headerlink" title="静态初始化块 static {}"></a>静态初始化块 static {}</h4><blockquote><p>注：如果希望加载后，对整个类进行某些初始化操作，可以使用static初始化块</p></blockquote><ol><li>是在类初始化时执行，不是在创建对象时执行。 </li><li>静态初始化块中不能访问非static成员变量。</li><li>执行顺序：上溯到Object类，先执行Object的静态初始化块，再向下执行子类的静态初始化块，直到我们的类的静态初始化块为止。</li></ol><hr><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><ul><li><u>通过extends父类(单继承)关键词或implements接口(多继承)</u></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span><br>&#123;<br>String speciality;<br><span class="hljs-comment">//专业</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>不支持多继承</strong></p></li><li><p>在java（C++）中类只有单继承，没有像C++那样的多继承。多继承，就是为了实现代码的复用性，却引入了复杂性，使得系统类之间的关系混乱；Java中的多继承，可以通过接口实现</p></li><li><p>如果定义一个类时，没有调用extends，则它的父类是java.lang.Object。Object类是所有java类的根基类。</p></li></ul><h3 id="1-方法的重写"><a href="#1-方法的重写" class="headerlink" title="1.方法的重写"></a>1.方法的重写</h3><ul><li><p>在子类中可以根据需要对父类中继承来的方法进行重写。</p></li><li><p>重写方法(<strong>虚函数</strong>)必须和被重写方法具有<strong>相同方法名称、参数列表、返回值</strong>。通过子类去调用该方法，会调用重写方法而不是被重写方法(叫做重写方法覆盖被重写方法)。</p></li><li><p>可以在子类重写方法中调用被重写方法: <strong>super关键字</strong>。</p></li><li><p>重写方法的<strong>访问权限</strong>，<strong>子类大于等于父类</strong>(由于多态)。</p></li><li><p>重写方法的<strong>返回值类型和声明异常类型</strong>，<strong>子类小于等于父类</strong>。</p></li><li><p>对象.方法() :先在本类内部找是否有该方法，如果没有，到直接父类去找,如果还没有，则一直往上层找，一直找到Object，如果还没有，则报错。</p></li><li><p>子类继承父类的成员变量,子类继承父类除构造方法以外的成员方法,子类不<strong>能继承父类的构造方法</strong>,子类可以增加成员，可以重定义从父类继承来的成员，但不能删除它们。</p></li></ul><h3 id="2-子类对父类的访问权限"><a href="#2-子类对父类的访问权限" class="headerlink" title="2.子类对父类的访问权限"></a>2.子类对父类的访问权限</h3><ul><li><p>子类<strong>不能访问</strong>父类的<strong>私有成员</strong>( private )</p></li><li><p>子类<strong>能够访问</strong>父类的<strong>公有成员</strong>( public)和<strong>保护成员</strong>(protected)和<strong>缺省成员</strong></p></li><li><p>子类对父类的缺省权限成员的访问控制，以包为界分两种情况，可以访问当前包中成员。</p></li></ul><h3 id="3-super引用"><a href="#3-super引用" class="headerlink" title="3.super引用"></a>3.super引用</h3><ol><li><p>调用父类的构造方法：super([参数列表])</p></li><li><p>super是直接父类对象的特征。</p></li><li><p>引用父类同名成员</p><ul><li><p>子类隐藏父类成员变量：super.成员变量</p></li><li><p>子类覆盖父类成员方法：super.成员方法([参数列表])</p></li></ul></li><li><p>构造方法:任何类的构造方法中，若是构造函数的第一行代码<strong>没有显式调用super</strong>(..);那么<strong>Java默认都会调用super()</strong>;作为父类的初始化函数。所以这里的super()加不加都会无所谓。( 内存分析，wrap:new对象的时候采用子类包裹父类的结构)</p></li><li><p>同一个构造方法里面**不能同时调用super()和this()**。</p></li><li><p>在本类构造方法中通过super()调用，会一直上溯到Object()这个构造函数,然后按类层级，依次向下执行各层级构造函数中剩下的代码，直至最低层级的构造函数。同this()一样，super()方法也应该放到构造方法的第一行。</p></li><li><p>new一个类的对象的时候，通过构造方法的从上至下的依次调用，就依次建立了新的根对象、父类对象和自身对象，其中，this指向新建的对象本身，super指向新建的直接父类对象本身。</p></li></ol><h3 id="4-组合VS继承"><a href="#4-组合VS继承" class="headerlink" title="4.组合VS继承"></a>4.组合VS继承</h3><ol><li><p>“is-a”关系使用继承，“has-a”关系使用组合:计算机类、主板类。可以通过在计算机类中增加主板属性来复用主板类的代码。</p></li><li><p>如果仅仅从代码复用的角度考虑，组合完全可以替代继承。</p></li><li><p>所谓组合，就是把要组合的另一个类作为属性放到类里面。</p></li><li><p><strong>是就用继承、有就用组合</strong>。</p></li></ol><h4 id="优缺点对比"><a href="#优缺点对比" class="headerlink" title="优缺点对比"></a>优缺点对比</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916083605738.png" alt="image-20220916083605738"></p><h2 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h2><h3 id="1-子类重定义父类成员"><a href="#1-子类重定义父类成员" class="headerlink" title="1.子类重定义父类成员"></a>1.子类重定义父类成员</h3><ul><li>子类隐藏父类成员变量</li><li>子类覆盖父类成员方法<ul><li>覆盖(override)是指子类声明并实现父类中的同名方法并且参数列表也完全相同。子类继承并重载父类成员方法</li><li>重载.(overload)是指同一个类中的多个方法可以同名但参数列表必须不同。</li></ul></li></ul><h3 id="2-类型的多态"><a href="#2-类型的多态" class="headerlink" title="2.类型的多态"></a>2.类型的多态</h3><ul><li><p>子类对象即是父类对象</p><p><code>new Student() instanceof Person //true</code></p><p><code>new Person() instanceof Student //false</code></p></li><li><p>父类对象引用子类对象</p><p><code>Person p = new Student(); / /赋值相容</code><br><code>Student s = new Person();//语法错误</code><br><code>Object obj = new Person();/ /赋值相容</code></p></li></ul><h3 id="3-编译时的多态和运行时的多态"><a href="#3-编译时的多态和运行时的多态" class="headerlink" title="3.编译时的多态和运行时的多态"></a>3.编译时的多态和运行时的多态</h3><ul><li><p>编译时多态性</p><p><u>方法<strong>重载</strong>都是<strong>编译时多态</strong>。</u></p><p><u>方法覆盖(重写)表现出两种多态性，当<strong>对象引用本类实例</strong>时，为<strong>编译时多态</strong>，否则为<strong>运行时多态</strong>。</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(.....);<br>p.toString()<br><span class="hljs-comment">//执行Person类的toString()</span><br>Student s= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Studen</span>(.....);<br>s.toString()<br><span class="hljs-comment">//执行Student类的toString()</span><br></code></pre></td></tr></table></figure></li><li><p>运行时多态性</p><p><u>自下而上搜索，<strong>有则调用无责溯源</strong></u></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916085315869.png" alt="image-20220916085315869"></p></li></ul><h3 id="4-多态的方法实现"><a href="#4-多态的方法实现" class="headerlink" title="4.多态的方法实现"></a>4.多态的方法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">设<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Person p)</span> <br>① 子类若<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Student s)</span> <span class="hljs-comment">//重载</span><br>则s1.equals(p1) <span class="hljs-comment">//继承，执行父类对象比较规则</span><br>s2.equals(s1) <span class="hljs-comment">//重载，执行子类对象比较规则</span><br>结论：不必要，因为Person参数可接受Student实例。<br>② 子类若<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Person p)</span> <span class="hljs-comment">//覆盖</span><br></code></pre></td></tr></table></figure><blockquote><p><code>多态存在条件</code>：</p><p><strong>:one:要有继承</strong>；</p><p><strong>:two:子类要有方法重写</strong>；</p><p><strong>:three:父类引用指向子类对象</strong>。</p></blockquote><h3 id="5-方法的多态性总结"><a href="#5-方法的多态性总结" class="headerlink" title="5. 方法的多态性总结"></a>5. 方法的多态性总结</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921141638509.png" alt="image-20220921141638509"></p><ul><li><p><strong>子类类型的对象地址</strong>可以直接<strong>赋给父类类型</strong>的<strong>引用对象</strong>，这个称为<strong>向上转型</strong>，是实现多态的基础。</p></li><li><p><strong>引用类型的强制转型</strong>，适用于<strong>将父类类型向下强制转换为子类类型</strong>。 不同类型之间不能强制转型（编译不通过）</p></li><li><p>A instanceof B: A对象的类型是否是B类型，只有在A对象的类型和B类型相同，或为父子类型时，编译不报错。而在运行时，只有A对象类型为B类型的子类型或者就是B类型时，结果才返回true。</p></li><li><p>内存分析(例子: myServlet) :调用父类的service(),然后调用子类的doGet() (注意: this关键字指向整个最终包裹对象，即最外层的子对象;而在包裹对象中，每一层对象通过super关键字指向内一层的父对象)。</p></li><li><p><strong>多态指的是方法的多态</strong>(到底调用那个方法，运行时决定)，属性没有多态。</p></li><li><p>针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</p></li><li><p><strong>重写的方法</strong>都是<strong>虚方法</strong>，根据<strong>实际</strong>调用<strong>对象的实例</strong>的类型来<strong>动态决定</strong>的。</p></li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921145517282.png" alt="image-20220921145517282"></p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClosedFigure</span><br><span class="hljs-comment">//闭合图形抽象类</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">( )</span>;<br><span class="hljs-comment">//计算面积，抽象方法，以分号&quot;;&quot;结束</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li><u><strong>构造方法、静态成员方法</strong></u>不能被声明为<strong>抽象方法</strong>。</li><li>一个<strong>非抽象类</strong>必须<strong>实现</strong>从父类继承来的<strong>所有抽象方法</strong>。</li><li><strong>不能</strong>创建抽象类的<strong>实例</strong>。例如:<code>ClosedFigure g = new ClosedFigure();</code> </li><li><u>abstract修饰方式的初衷就是要求其子类覆盖(实现)这个方法，并且调用时可以以多态方式调用子类覆盖后的方法(抽象类主要和多态技术相结合)</u>，即抽象方法必须在其子类中实现，除非子类本身也是抽象类。<u>abstract不允许修饰成员变量</u>，因为成员变量也没有重写这个概念!</li><li><strong>抽象类</strong>可以<strong>只有具体方法</strong>，也可以<strong>全是抽象方法</strong>，子类继承抽象类也可以是抽象类，但要实例化的类不能是抽象类。</li><li>:star:不能放在一起的修饰符: <u><strong>final和abstract</strong>, <strong>private和abstract</strong>, <strong>static和abstract</strong></u>，因为abstract修饰的方法是必须在其子类中实现(覆盖)，才能以多态方式调用，以上修饰符在修饰方法时期子类都覆盖不了这个方法，<u><strong>final是不可以覆盖</strong></u>，**<u>private是不能</u><u>够继承到子类</u><strong>，所以也就不能覆盖，<u><strong>static是可以覆盖的</strong>，但是在</strong>调用时会调用编译时类型的方法<strong>，因为调用的是父类的方法，而父类的方法又是</strong>抽象的方法<strong>，又</strong>不能够调用**</u>，所以上面的修饰符不能放在一起。</li></ol><h2 id="最终类"><a href="#最终类" class="headerlink" title="最终类"></a>最终类</h2><ol><li><p>声明<strong>最终类</strong>， <strong>不能被继承</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Math</span><br><span class="hljs-comment">//数学类，最终类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMath</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Math</span><br><span class="hljs-comment">//语法错</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Ellipse</span> / /最终类<br></code></pre></td></tr></table></figure></li><li><p>声明<strong>最终方法</strong>,<strong>不能被子类覆盖</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Ellipse</span><br><br>/ /非最终类<br><br>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">( )</span><br><br><span class="hljs-comment">//最终方法</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="final关键词"><a href="#final关键词" class="headerlink" title="final关键词"></a>final关键词</h3><ol><li>final修饰变量时表示常量。<u>变量被final修饰，就会变成常量</u>(常量应大写)，一旦赋值不能改变(可以在<u><strong>初始化时直接赋值</strong></u>，也可以在<u><strong>构造方法里赋值</strong></u>，只能在这两种方法里二选一，<u>必须为常量赋值</u>) ;final的常量不会有默认初始值，对于直接在初始化时赋值方式，final修饰符常和static修饰符一起使用。</li><li>final修饰方法(最终方法)时表示<u>该方法<strong>不可被子类重写</strong></u>。但是<u><strong>可以被重载</strong></u>。</li><li><u>final修饰类</u>(最终类)时表示修饰的<u>类<strong>不能有子类</strong></u>，<strong>不能被继承</strong>。比如Math、String。 final类中的方法也都是final的。</li></ol><h2 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h2><p><u>如果一个抽象类没有字段，所有方法全部都是抽象方法，就可以将该抽象类改为接口。</u></p><p>类不能多继承类，但可以实现多个接口，一个接口可以继承多个接口。</p><p>接口可以看成<u><strong>狭义抽象</strong></u>，将设计与实现彻底分离。</p><p>通过给类新增接口来改变类，而不影响子类。</p><p><strong>接口不能有构造方法</strong>，抽象类可以有。</p><p>接口可以定义<code>default</code>方法（有方法实体，子类可以不用重写）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> ;<br>String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><p>类实现接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><span class="hljs-comment">//规定下面的编译为重写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; run&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽象类和接口的对比"><a href="#抽象类和接口的对比" class="headerlink" title="抽象类和接口的对比"></a>抽象类和接口的对比</h3><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921155545894.png" alt="image-20220921155545894" style="zoom: 80%" align="middle" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Xiao Ming&quot;</span>);<br>        p.run();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> &#123;<br>    String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(getName() + <span class="hljs-string">&quot; run&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口与抽象的区别"><a href="#接口与抽象的区别" class="headerlink" title="接口与抽象的区别"></a>接口与抽象的区别</h3><ul><li><p>接口不能有方法体(<strong>除default</strong>)，抽象类可以有。</p></li><li><p>接口<strong>可以有静态方法但必须实现方法体</strong>，抽象类可以有。</p></li><li><p>在接口中凡是变量必须是<strong>public static final</strong>,而在抽象类中没有要求。</p></li><li><p>抽象类本质上还是一个类，子类是用关键字extends来继承它，并扩展的，有非常强的is-a的关系。而接口，是被其他类用关键字implements来实现接口定义的方法的。接口只是定义功能和行为规范，如果一个类实现了一个接口，那么这个类必须遵守这个接口的方法约定，但没有is-a的关系。</p></li></ul><h2 id="内部类和内部接口"><a href="#内部类和内部接口" class="headerlink" title="内部类和内部接口"></a>内部类和内部接口</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923082921856.png" alt="image-20220923082921856"></p><ul><li><p>内嵌类型<strong>不能</strong>与外层类型<strong>同名</strong>。</p></li><li><p><strong>内部类</strong>中可以<strong>声明成员变量和成员方法</strong>。</p></li><li><p>内部类<strong>可以继承父类或实现接口</strong>。</p></li><li><p>可以声明内部类为<strong>抽象类</strong>，该抽象类<strong>必须被其他内部类继承</strong>;<strong>内部接口</strong>必须<strong>被其他内部类实现</strong>。</p></li><li><p>使用点运算符“.”引用内嵌类型:<strong>外层类型.内嵌类型</strong>eg：<code>Pixel.Color</code></p></li><li><p>内嵌类型具有类中成员的4种访问控制权限。当内部类可被访问时，才能考虑内部类中成员的访问控制权限。</p></li><li><p>内嵌类型与其外层类型彼此信任，能访问对方的所有成员</p></li><li><p><strong>内部接口总是静态的</strong>；<strong>内部类</strong>可声明是<strong>静态的或实例的</strong>，<strong>静态内部类</strong><code>能够声明静态成员</code>，但<strong>不能引用外部类的实例成员</strong>;<strong>实例内部类</strong><code>只能声明实例成员，不能声明静态成员</code>。</p></li><li><p>在<strong>实例内部类</strong>中，使用以下格式引用或调用外部类当前实例的成员变量或实例成员方法:</p><p><code>外部类.this.成员变量//引用外部类当前实例的成员变量</code></p><p><code>外部类.this.实例成员方法(参数列表)//调用外部类当前实例的成员方法</code></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221102203811765.png" alt="image-20221102203811765"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="java-lang包中的基础类库"><a href="#java-lang包中的基础类库" class="headerlink" title="java.lang包中的基础类库"></a>java.lang包中的基础类库</h3><h4 id="1-Object类"><a href="#1-Object类" class="headerlink" title="1.Object类"></a>1.Object类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Object</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Object</span><span class="hljs-params">()</span> <span class="hljs-comment">//构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; getClass(); <span class="hljs-comment">//返回当前对象所在的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> <br><span class="hljs-comment">//比较当前对象与obj是否相等</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回当前对象的信息字符串</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable <span class="hljs-comment">//析构方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Math数学类"><a href="#2-Math数学类" class="headerlink" title="2.Math数学类"></a>2.Math数学类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Math</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">E</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.7182818284590452354</span>; <span class="hljs-comment">//常量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14159265358979323846</span>;<span class="hljs-comment">//π </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">abs</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> <span class="hljs-comment">//求绝对值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">random</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回一个0.0~1.0之间的随机数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">pow</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span> <span class="hljs-comment">//返回a的b次幂</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> <span class="hljs-comment">//返回a的平方根值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sin</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> <span class="hljs-comment">//返回a的正弦值</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-Comparable可比较接口"><a href="#3-Comparable可比较接口" class="headerlink" title="3.Comparable可比较接口"></a>3.Comparable可比较接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span>&lt;T&gt;<br>&#123;<br><span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(T cobj)</span> <span class="hljs-comment">//比较对象大小</span><br>&#125;<br><span class="hljs-comment">//其中，&lt;T&gt;是Comparable接口的参数，表示一个类。</span><br></code></pre></td></tr></table></figure><h4 id="4-基本数据类型的包装类"><a href="#4-基本数据类型的包装类" class="headerlink" title="4.基本数据类型的包装类"></a>4.基本数据类型的包装类</h4><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923083806822.png" alt="image-20220923083806822" style="zoom: 67%;" /><blockquote><p>对应关系：Byte-byte; Boolean-boolean; Short-short; <code>Character-char</code>; <code>Integer-int</code>; Long-long; Float-float; Double-double。</p></blockquote><p><strong>自动裝箱:<strong>基本数据类型就自动的封装到与它相同类型的包装中。如:<code>Integer i = 100</code>;本质上就是编译器编译时自动为我们添加了<code>Integer i = new Integer(100)</code>;<br><strong>自动拆箱</strong>:包装类对象自动转化为基本数据类型。如:<code>int a = new Integer(100)</code>;本质上就是编译器编译时自动为我们添加了<code>int a = new Integer( 100).intValue()</code>;<br><strong>缓存问题:</strong> [-128,127]之间的数对应的包装类对象，仍然当做基本数据类型来处理;一旦遇到一个这个之间的数(默认为这些小的数使用频率会很高)，把他</strong>包装成一个对象</strong>后，就<strong>缓存起来</strong>，下次如果又要包装一个这个数的对象，则去看是否已经有这个对象，有就直接<strong>拿来使用</strong>，这样可以节省内存空间、提高效率(<strong>享元模式</strong>)。<br><strong>享元模式:<strong>有很多小对象，它们的大部分属性相同，这时可以把它们变成一个对象，那些</strong>相同的属性为对象的内部状态</strong>，那些<strong>不同的属性可以变为方法的参数</strong>，由外部传入。例: -128~127 内的相同整数自动装箱为同一个对象。</p><p>:one:Interger类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Integer&gt;<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MIN_VALUE=<span class="hljs-number">0x80000000</span>;<span class="hljs-comment">//最小值-2^31</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_VALUE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7fffffff</span>; <span class="hljs-comment">//最大值2^31-1</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value; <span class="hljs-comment">//私有最终变量，构造时赋值</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Integer</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> <span class="hljs-comment">//构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Integer</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">parseInt</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException <span class="hljs-comment">//将字符串转换为整数，静态方法</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//覆盖Object类中方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toBinaryString</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br><span class="hljs-comment">//将i转换成二进制字符串，i≥时，省略高位0</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toOctalString</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br><span class="hljs-comment">//将i转换成八进制字符串，i≥时，省略高位0</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toHexString</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><br><span class="hljs-comment">//将i转换成十六进制字符串</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br><span class="hljs-comment">//覆盖Object类中方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Integer iobj)</span><br><span class="hljs-comment">//比较两个对象值大小，返回1、0或1</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>:two:Double类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Double</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Double&gt;<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Double</span><span class="hljs-params">(<span class="hljs-type">double</span> value)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Double</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">parseDouble</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException <span class="hljs-comment">//将串s转换为浮点数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">doubleValue</span><span class="hljs-params">()</span><span class="hljs-comment">//返回当前对象中的浮点数值</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-String字符串类"><a href="#5-String字符串类" class="headerlink" title="5.String字符串类"></a>5.String字符串类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, <br>CharSequence<br>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[]; <span class="hljs-comment">//字符数组，最终变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">String</span><span class="hljs-params">()</span> <span class="hljs-comment">//构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">String</span><span class="hljs-params">(String original)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//覆盖Object类中方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回字符串的长度</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> <span class="hljs-comment">//比较字符串是否相等</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equalsIgnoreCase</span> <span class="hljs-params">(String s)</span><span class="hljs-comment">//忽略字母大小写</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(String s)</span> <span class="hljs-comment">//比较字符串的大小</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareToIgnoreCase</span><span class="hljs-params">(String str)</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-Class类"><a href="#7-Class类" class="headerlink" title="7.Class类"></a>7.Class类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>&lt;T&gt;<br>&#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回当前类名字符串</span><br><span class="hljs-keyword">public</span> Class&lt;? <span class="hljs-built_in">super</span> T&gt; getSuperclass(); <span class="hljs-comment">//返回当前类的父类</span><br><span class="hljs-keyword">public</span> Package <span class="hljs-title function_">getPackage</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回当前类所在的包</span><br>&#125;<br><span class="hljs-built_in">this</span>.getClass().getName()<br><span class="hljs-built_in">this</span>.getClass().getSuperclass().getName()<br><span class="hljs-built_in">this</span>.getClass().getPackage().getName()<br></code></pre></td></tr></table></figure><h4 id="8-System系统类"><a href="#8-System系统类" class="headerlink" title="8.System系统类"></a>8.System系统类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">System</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> nullInputStream();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> nullPrintStream();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">PrintStream</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> nullPrintStream();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">arraycopy</span><span class="hljs-params">(Object src, <span class="hljs-type">int</span> src_pos, Object dst, <span class="hljs-type">int</span> dst_pos, <span class="hljs-type">int</span> length)</span> <span class="hljs-comment">//复制数组</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span> <span class="hljs-comment">//结束当前运行的程序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">long</span> <span class="hljs-title function_">currentTimeMillis</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获得当前日期和时间，返回从1970-1-1 00:00:00开始至当前时间的累计毫秒数</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Properties <span class="hljs-title function_">getProperties</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得系统全部属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getProperty</span><span class="hljs-params">(String key)</span> <span class="hljs-comment">//获得指定系统属性</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-Runtime运行时类"><a href="#9-Runtime运行时类" class="headerlink" title="9.Runtime运行时类"></a>9.Runtime运行时类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Runtime</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runtime <span class="hljs-title function_">getRuntime</span><span class="hljs-params">()</span><span class="hljs-comment">//返回与当前应用程序相联系的运行时环境</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">totalMemory</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回系统内存空间总量</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">freeMemory</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回系统内存剩余空间的大小</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java-util包中的工具类库"><a href="#java-util包中的工具类库" class="headerlink" title="java.util包中的工具类库"></a>java.util包中的工具类库</h3><h4 id="1-日期类"><a href="#1-日期类" class="headerlink" title="1.日期类"></a>1.日期类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Cloneable, Comparable&lt;Date&gt;<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Date</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得系统当前日期和时间的Date对象</span><br>&#123;<br><span class="hljs-built_in">this</span>(System.currentTimeMillis());<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Date</span><span class="hljs-params">(<span class="hljs-type">long</span> date)</span> <span class="hljs-comment">//以长整型值创建Date对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Date date)</span><span class="hljs-comment">//比较日期大小，返回0、1、-1 </span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Calendar类"><a href="#2-Calendar类" class="headerlink" title="2.Calendar类"></a>2.Calendar类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calendar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, Cloneable, Comparable&lt;Calendar&gt; <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> YEAR <span class="hljs-comment">//年，常量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MONTH <span class="hljs-comment">//月</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DATE <span class="hljs-comment">//日</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> HOUR <span class="hljs-comment">//时</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MINUTE <span class="hljs-comment">//分</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> SECOND <span class="hljs-comment">//秒</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MILLISECOND <span class="hljs-comment">//百分秒</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DAY_OF_WEEK <span class="hljs-comment">//星期</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Calendar <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> <span class="hljs-comment">//创建实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> field)</span> <span class="hljs-comment">//返回日期</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Date <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回对象中的日期和时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTime</span><span class="hljs-params">(Date date)</span> <span class="hljs-comment">//设置对象的日期和时间</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> date)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> date, <span class="hljs-type">int</span> hour, <span class="hljs-type">int</span> minute)</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-GregorianCalendar类"><a href="#3-GregorianCalendar类" class="headerlink" title="3.GregorianCalendar类"></a>3.GregorianCalendar类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GregorianCalendar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Calendar</span> <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GregorianCalendar</span><span class="hljs-params">()</span> <span class="hljs-comment">//以当前日期时间创建对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GregorianCalendar</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GregorianCalendar</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day, <span class="hljs-type">int</span> hour, <span class="hljs-type">int</span> minute, <span class="hljs-type">int</span> second)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeapYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> <span class="hljs-comment">//判断是否闰年</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Comparator比较器接口"><a href="#Comparator比较器接口" class="headerlink" title="Comparator比较器接口"></a>Comparator比较器接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparator</span>&lt;T&gt;<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span>; <span class="hljs-comment">//比较两个比较器对象是否相等</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(T cobj1, T cobj2)</span>; <span class="hljs-comment">//指定比较两个对象大小的规则</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Arrays数组类"><a href="#Arrays数组类" class="headerlink" title="Arrays数组类"></a>Arrays数组类</h3><h4 id="1-排序"><a href="#1-排序" class="headerlink" title="1.排序"></a>1.排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Object[] a)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(T[] a,Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c)</span><br></code></pre></td></tr></table></figure><h4 id="2-二分法-折半-查找"><a href="#2-二分法-折半-查找" class="headerlink" title="2.二分法(折半)查找"></a>2.二分法(折半)查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(Object[] a, Object key)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(T[] a, T key, Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c)</span><br></code></pre></td></tr></table></figure><h2 id="泛型-类的参数"><a href="#泛型-类的参数" class="headerlink" title="泛型(类的参数)"></a>泛型(类的参数)</h2><blockquote><p>类似于C++和Python的<code>模板</code>，他们有模板类和模板函数。</p></blockquote><h3 id="泛型声明"><a href="#泛型声明" class="headerlink" title="泛型声明"></a>泛型声明</h3><p><code>[修饰符] class 类&lt;类型参数列表&gt; [extends父类] [implements 接口列表]</code><br><code>[public] interface 接口 &lt; 类型参数列表&gt; [extends父接口列表]</code><br><code>[public] [static] &lt; 类型参数列表 &gt; 返回值类型方法([参数列表]) [throws 异常类列表]</code> </p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923092011478.png" alt="image-20220923092011478"></p><blockquote><p>:rainbow: 不能使用在基本类型上 </p><p>:tomato: 不能使用在静态属性上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GenericIntercace</span>&lt;T&gt; &#123;<br>T <span class="hljs-title function_">getData</span><span class="hljs-params">()</span>;<span class="hljs-comment">//类似于c++的模板</span><br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p><code>接口</code>中泛型字母只能使用在<code>方法</code>中，不能使用在<code>全局常量</code>中</p></li><li><p>泛型方法可以在<code>非泛型类</code>中</p></li></ul><h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><p>泛型父类:子类为”富二代”:子类的泛型要比父类多</p><ol><li><p>保留父类的泛型–&gt;子类为泛型类</p></li><li><p>不保留父类泛型–&gt;子类按需实现</p></li></ol><ul><li>子类[重写方法]的参数类型–&gt;随父类而定</li><li>子类新增的方法，参数类型随子类而定</li><li>子类中使用父类的[属性] –&gt; 随父类而定</li><li>子类使用自己的属性–&gt;随子类而定</li></ul><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923093134846.png" alt="image-20220923093134846"></p><h3 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h3><ul><li>定义:泛型擦除是指在<strong>继承(实现)<strong>或</strong>使用</strong>时<strong>没有指定具体的类型</strong></li><li>特点:一旦擦除之后按<strong>Object</strong>处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//2)没有类型擦除--》Object</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C4</span> &lt;A,B&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Object name)</span> &#123;子类重写方法的参数类型--&gt;随父类而定:<br>Object <br><span class="hljs-built_in">this</span>.age = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<span class="hljs-comment">//Object类型，子类使用父类的[属性]，类型</span><br>随父类而定<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><ul><li><strong>T、K、V、E</strong>等泛型字母为有类型，类型参数赋予<strong>具体的值</strong></li><li><strong>?<strong>未知类型类型参数赋予</strong>不确定值</strong>，任意类型</li><li>只能用在<strong>声明类型、方法参数</strong>上，不能用在定义泛型类上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>List&lt;String&gt; name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>List&lt;Integer&gt; age = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>List&lt;Number&gt; number = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Number&gt;();<br>name.add(<span class="hljs-string">&quot;icon&quot;</span>);<br>age.add(<span class="hljs-number">18</span>);<br>number.add(<span class="hljs-number">314</span>);<br>getData(name);<br>getData(age); <br>getData(number);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getData</span><span class="hljs-params">(List&lt;?&gt; data)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;data :&quot;</span> + data.get(<span class="hljs-number">0</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>上限</strong> extends :指定的类型必须是继承某个类，或者实现某个接口(不是用implements)， 即&lt;=如 </p><p><code>– ? extends Fruit </code></p><p><code>– T extends List</code></p><p><strong>下限</strong> super：指定的类型不能小于操作的类 ，即&gt;= 如 </p><p><code>– T super Apple</code> </p><p><code>– ？ super Apple</code></p><hr><h1 id="第四章、异常处理"><a href="#第四章、异常处理" class="headerlink" title="第四章、异常处理"></a>第四章、异常处理</h1><h2 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h2><ul><li>用户输入了非法数据。 </li><li>要打开的文件不存在。 </li><li>网络通信时连接中断，或者JVM内存溢出。</li></ul><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20220928141405830.png" alt="image-20220928141405830"></p><h2 id="异常处理基础"><a href="#异常处理基础" class="headerlink" title="异常处理基础"></a>异常处理基础</h2><ul><li><p>将程序正常代码与错误处理代码分开。</p></li><li><p>使程序具有处理运行错误的能力。</p></li></ul><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>(Error)指程序运行时遇到的硬件、操作系统、虚拟机的错误。 Error错误类。Java程序<strong>不能处理错误</strong>，只能依靠外界干预。</p><ol><li>NoClassDefFoundError类定义未找到错误。没有.class文件，或没有main()方法时。</li><li>OutOfMemoryError内存溢出错误。没有可用内存时。</li><li>StackOverflowError栈溢出错误。当递归函数不能正常结束时。</li></ol><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20220928142730920.png" alt="image-20220928142730920"></p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>（Exception）指在硬件、操作系统、虚拟 机正常时，程序遇到的运行错（语义错）</p><h4 id="异常类（默认java-lang包）"><a href="#异常类（默认java-lang包）" class="headerlink" title="异常类（默认java.lang包）"></a>异常类（默认java.lang包）</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928143014612.png" alt="image-20220928143014612"></p><h4 id="内置异常类"><a href="#内置异常类" class="headerlink" title="内置异常类"></a>内置异常类</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160253693.png"></p><h4 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160326479.png"></p><p>异常类声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Throwable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> <br>&#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得异常信息</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得异常对象的描述信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printStackTrace</span><span class="hljs-params">()</span><span class="hljs-comment">//显示异常栈跟踪信息</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exception</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Throwable</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Exception</span><span class="hljs-params">()</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Exception</span><span class="hljs-params">(String message)</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><p><strong>ArithmeticException</strong></p><p> 3/0 //整除，除数为0，算术异常</p><p>3.0/0 //实数除，除数为0，无穷大 </p></li><li><p><strong>NullPointerException</strong> 空对象异常</p><p> int x[] = null;</p><p> x[0] = 1; //对空数组中的元素进行操作</p><p> String str = null;</p><p> str.length() //空对象调用方法</p></li><li><p><strong>ClassCastException</strong> </p><p>Object obj = new Object(); </p><p>String str = (String) obj; //类型强制转换异常</p></li></ol><h2 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h2><ol><li>程序应<code>避免而不捕获</code>的异常，运行异常</li></ol><ul><li> <strong>除数为0</strong>、<strong>数组下标越界</strong>等</li></ul><ol><li><code>必须捕获</code>的异常</li></ol><ul><li><strong>数值格式</strong>异常，如果没有捕获，由Java虚拟机处理。</li><li><strong>文件不存在</strong>、<strong>网络连接中断</strong>、<strong>数据库连接中断</strong>等，必须捕获，否则编译不能通过。</li></ul><h2 id="异常处理措施"><a href="#异常处理措施" class="headerlink" title="异常处理措施"></a>异常处理措施</h2><h3 id="异常处理语句"><a href="#异常处理语句" class="headerlink" title="异常处理语句"></a>异常处理语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span><br>&#123;<br>语句<span class="hljs-number">1</span>； <span class="hljs-comment">//存在潜在异常的代码</span><br>&#125;<br><span class="hljs-keyword">catch</span> (异常类 异常对象)<br>&#123;<br>语句<span class="hljs-number">2</span>； <span class="hljs-comment">//捕获到异常并进行处理的代码</span><br>&#125;<br><span class="hljs-keyword">finally</span><br>&#123;<br>语句<span class="hljs-number">3</span>；<span class="hljs-comment">//最后必须执行的代码，无论是否捕获到异常</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><ol><li><u>方法声明抛出异常的throws字句</u></li></ol><p>eg：[修饰符] 返回值类型 方法([参数列表]) <strong>[throws 异常类列表]</strong></p><ol><li><u>方法内抛出异常</u></li></ol><p>eg：<strong>throw 异常对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//[修饰符] 返回值类型 方法([参数列表])[throws异常类列表]</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">parseInt</span><span class="hljs-params">(String s)</span> <span class="hljs-keyword">throws</span> NumberFormatException <span class="hljs-comment">//日期类声明抛出异常的方法与方法调用者处理异常。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <span class="hljs-keyword">throws</span> Exception<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><span class="hljs-built_in">this</span>.set(year, month, day);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception<br></code></pre></td></tr></table></figure><h3 id="throws和throw以及try-catch-finally的区别"><a href="#throws和throw以及try-catch-finally的区别" class="headerlink" title="throws和throw以及try-catch-finally的区别"></a>throws和throw以及try-catch-finally的区别</h3><ul><li>throws为方法<code>声明可能出现的异常</code>，函数调用者不处理异常则继续向下抛出异常直至被处理，否则程序结束。</li><li>throw主要是<code>发现异常并抛出指定的异常对象</code>给调用者，当抛出异常后，后面的语句就不会执行了。</li><li>throw要么和<strong>try-catch-finally</strong>语句配套使用，抛出异常后就用处理异常；要么与<strong>throws</strong>配套使用，方法头声明抛出异常类，方法内抛出异常对象而不处理该异常，直到该方法被调用时调用者处理异常则结束，否则继续抛出该异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThrowsDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">throwOne</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Inside throwOne.&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalAccessException</span>(<span class="hljs-string">&quot;demo&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            throwOne();<br>        &#125; <br>        <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Caught &quot;</span> + e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//日期格式异常类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateFormatException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IllegalArgumentException</span><br><span class="hljs-comment">//MyDate类修改方法，抛出日期格式异常类 ，向调用者传递异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <span class="hljs-keyword">throws</span> DateFormatException<br>&#123; <span class="hljs-keyword">if</span> (……)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateFormatException</span>(<span class="hljs-string">&quot;月份错误&quot;</span>);<br>&#125;<br><span class="hljs-comment">//调用方法处理异常，若不能处理则声明抛出日期格式异常，再向调用者传递异常</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span> <span class="hljs-keyword">throws</span> DateFormatException<br>&#123; <br>    <span class="hljs-built_in">this</span>.set(year, month, day);<br>&#125;<br><span class="hljs-comment">//由datestr字符串构造日期，默认日期字符串格式为&quot;yyyy年MM月dd日&quot; </span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(String datestr)</span> <span class="hljs-keyword">throws</span> NumberFormatException, DateFormatException <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> <span class="hljs-keyword">throws</span> NumberFormatException, DateFormatException<br>&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-string">&quot;2017年2月29日&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="第五章、图形用户界面（GUI）"><a href="#第五章、图形用户界面（GUI）" class="headerlink" title="第五章、图形用户界面（GUI）"></a>第五章、图形用户界面（GUI）</h1><h2 id="AWT组件及其属性"><a href="#AWT组件及其属性" class="headerlink" title="AWT组件及其属性"></a>AWT组件及其属性</h2><ul><li><blockquote><p>java.awt包提供抽象窗口工具集（Abstract  Window Tookit，AWT）</p></blockquote></li><li><blockquote><p>javax.swing包提供JDK 1.2的Swing组件， 它扩展了AWT组件的功能</p></blockquote></li></ul><h3 id="AWT组件"><a href="#AWT组件" class="headerlink" title="AWT组件"></a>AWT组件</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220930081159260.png" alt="image-20220930081159260"></p><h3 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h3><h4 id="FlowLayout（流布局管理器）"><a href="#FlowLayout（流布局管理器）" class="headerlink" title="FlowLayout（流布局管理器）"></a>FlowLayout（流布局管理器）</h4><blockquote><p>Panel面板的默认布局管理器.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FlowLayout</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LayoutManager</span>, <br>java.io.Serializable <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LEFT</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//左对齐，类常量，全部大写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CENTER</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//居中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">//右对齐</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FlowLayout</span><span class="hljs-params">()</span> <span class="hljs-comment">//构造方法，默认居中</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">FlowLayout</span><span class="hljs-params">(<span class="hljs-type">int</span> align)</span> <span class="hljs-comment">//align参数指定对齐方式</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BorderLayout（边布局管理器）"><a href="#BorderLayout（边布局管理器）" class="headerlink" title="BorderLayout（边布局管理器）"></a>BorderLayout（边布局管理器）</h4><blockquote><p>Window窗口的默认布局管理器.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorderLayout</span> <span class="hljs-keyword">implements</span> <br><span class="hljs-title class_">LayoutManager2</span>, java.io.Serializable <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NORTH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;North&quot;</span>; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SOUTH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;South&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EAST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;East&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WEST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;West&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CENTER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Center&quot;</span>;<br><span class="hljs-comment">//注意，字符串首字母大写</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BorderLayout</span><span class="hljs-params">()</span> <span class="hljs-comment">//构造方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GridLayout（网格布局管理器）"><a href="#GridLayout（网格布局管理器）" class="headerlink" title="GridLayout（网格布局管理器）"></a>GridLayout（网格布局管理器）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GridLayout</span> <span class="hljs-keyword">implements</span> <br><span class="hljs-title class_">LayoutManager</span>, Serializable <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">GridLayout</span><span class="hljs-params">(<span class="hljs-type">int</span> rows, <span class="hljs-type">int</span> cols)</span> <br><span class="hljs-comment">//参数指定行、列</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="颜色和字体"><a href="#颜色和字体" class="headerlink" title="颜色和字体"></a>颜色和字体</h3><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Color</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Paint</span>, java.io.Serializable <br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Color</span><span class="hljs-params">(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> g, <span class="hljs-type">int</span> b)</span> <span class="hljs-comment">//以三元色值构造对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Color</span><span class="hljs-params">(<span class="hljs-type">int</span> rgb)</span> <span class="hljs-comment">//以RGB值构造对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRed</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回红色值</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGreen</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回绿色值</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBlue</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回蓝色值</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRGB</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回颜色的RGB值</span><br><span class="hljs-keyword">public</span> Color <span class="hljs-title function_">brighter</span><span class="hljs-params">()</span> <span class="hljs-comment">//使颜色变浅</span><br><span class="hljs-keyword">public</span> Color <span class="hljs-title function_">darker</span><span class="hljs-params">()</span> <span class="hljs-comment">//使颜色变深</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Font</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PLAIN</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//常规</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//粗体</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ITALIC</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">//斜体</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Font</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> style, <span class="hljs-type">int</span> size)</span><span class="hljs-comment">//字体名、字形、字号</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回字体名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回字体大小</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getStyle</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回粗、斜体值</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220930090145928.png"></p><h4 id="事件和事件源"><a href="#事件和事件源" class="headerlink" title="事件和事件源"></a>事件和事件源</h4><blockquote><p><strong>事件（event）</strong>是指一个状态的改变，或者一个活动的发生。 产生事件的组件称为<strong>事件源（event source）</strong> 。</p></blockquote><h4 id="事件类和事件监听器接口"><a href="#事件类和事件监听器接口" class="headerlink" title="事件类和事件监听器接口"></a>事件类和事件监听器接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ActionListener</span> <span class="hljs-keyword">extends</span> <br><span class="hljs-title class_">EventListener</span> <span class="hljs-comment">//动作事件监听器接口</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent ev)</span>;<br><span class="hljs-comment">//动作事件处理方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="窗口事件监听器接口"><a href="#窗口事件监听器接口" class="headerlink" title="窗口事件监听器接口"></a>窗口事件监听器接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WindowListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span><br>&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowOpened</span><span class="hljs-params">(WindowEvent ev)</span>; <span class="hljs-comment">//打开后</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent ev)</span>; <span class="hljs-comment">//关闭时</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosed</span><span class="hljs-params">(WindowEvent ev)</span> ; <span class="hljs-comment">//关闭后</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowIconified</span><span class="hljs-params">(WindowEvent ev)</span>;<span class="hljs-comment">//最小化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowDeiconified</span><span class="hljs-params">(WindowEvent ev)</span>;<span class="hljs-comment">//恢复</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowActivated</span><span class="hljs-params">(WindowEvent ev)</span> ;<span class="hljs-comment">//激活</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowDeactivated</span><span class="hljs-params">(WindowEvent ev)</span> ;<br><span class="hljs-comment">//变为不活动</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组件注册事件监听器对象"><a href="#组件注册事件监听器对象" class="headerlink" title="组件注册事件监听器对象"></a>组件注册事件监听器对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> <br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">Accessibl</span><br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addActionListener</span><span class="hljs-params">(ActionListener l)</span><br><span class="hljs-comment">//注册动作事件监听器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeActionListener</span><span class="hljs-params">(ActionListener l)</span> <br><span class="hljs-comment">//取消注册动作事件监听器</span><br>&#125;<br>button.addActionListener(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><h4 id="窗口对象注册窗口事件监听器"><a href="#窗口对象注册窗口事件监听器" class="headerlink" title="窗口对象注册窗口事件监听器"></a>窗口对象注册窗口事件监听器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Container</span> <br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">Accessible</span> <span class="hljs-comment">//窗口类</span><br>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addWindowListener</span><span class="hljs-params">(WindowListener l)</span> <br><span class="hljs-comment">//注册窗口事件监听器</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">removeWindowListener</span><span class="hljs-params">(WindowListener l)</span><br><span class="hljs-comment">//取消窗口事件监听器</span><br>&#125;<br>frame.addWindowListener(<span class="hljs-built_in">this</span>);<br></code></pre></td></tr></table></figure><h2 id="AWT事件类和事件监听器接口"><a href="#AWT事件类和事件监听器接口" class="headerlink" title="AWT事件类和事件监听器接口"></a>AWT事件类和事件监听器接口</h2><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221109222028588.png" alt="image-20221109222028588"></p><h3 id="AWT事件类"><a href="#AWT事件类" class="headerlink" title="AWT事件类"></a>AWT事件类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable <br>&#123;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getSource</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回产生事件的事件源组件</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回事件对象信息</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActionEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AWTEvent</span> <br>&#123;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getActionCommand</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得按钮的标签</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="AWT事件监听器接口"><a href="#AWT事件监听器接口" class="headerlink" title="AWT事件监听器接口"></a>AWT事件监听器接口</h3><ol><li><p>WindowListener 窗口事件 </p></li><li><p>ActionListener 动作事件 </p></li><li><p>MouseMotionListener 鼠标移动事件 </p></li><li><p>MouseListener 鼠标事件 </p></li><li><p>KeyListener 键盘事件 </p></li><li><p>FocusListener 焦点事件</p></li></ol><p><strong>AWT组件类中注册事件监听器的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImageObserver</span>, MenuContainer, <br>Serializable<br>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addKeyListener</span><span class="hljs-params">(KeyListener l)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMouseListener</span><span class="hljs-params">(MouseListener l)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <br><span class="hljs-title function_">addMouseMotionListener</span><span class="hljs-params">(MouseMotionListener l)</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Swing组件及事件"><a href="#Swing组件及事件" class="headerlink" title="Swing组件及事件"></a>Swing组件及事件</h2><h3 id="1-Swing组件与布局"><a href="#1-Swing组件与布局" class="headerlink" title="1.Swing组件与布局"></a>1.Swing组件与布局</h3><h4 id="Swing组件类关系"><a href="#Swing组件类关系" class="headerlink" title="Swing组件类关系"></a>Swing组件类关系</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220930090437034.png" alt="image-20220930090437034"></p><h4 id="主要类及组件类的继承关系"><a href="#主要类及组件类的继承关系" class="headerlink" title="主要类及组件类的继承关系"></a>主要类及组件类的继承关系</h4><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220930090537860.png" alt="image-20220930090537860"></p><blockquote><p>此处整理不完整，其余内容详见-&gt;<a href="https://xiets.blog.csdn.net/article/details/72814531?spm=1001.2014.3001.5506"><code>Java Swing用法简介</code></a></p></blockquote><hr><h1 id="第六章、多线程编程"><a href="#第六章、多线程编程" class="headerlink" title="第六章、多线程编程"></a>第六章、多线程编程</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>是系统进行<strong>资源分配和保护的基本单位</strong>，指一个内存中运行的应用程序 ，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p><blockquote><p>特点：:one: 动态性 :two: 独立性 :three: 并发性 :four: 共享性 :five: 制约性</p><p>静态特征：程序和数据</p><p>动态特征：进程映像，包括以下4要素</p><ul><li>进程控制块（Process Control Block，PCB）， 用来存储进程的标志信息、现场信息和控制信息， 是进程存在的唯一标识 </li><li>进程程序块</li><li>进程核心栈 </li><li>进程数据块</li></ul></blockquote><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>是系统<strong>资源调度的基本单位</strong>，进程内部的一个独立执行单元；一个进程可以同时并发的运行多个线程，可以理解为一个进程便相当于一个单 CPU 操作系统，而线程便是这个系统中运行的多个任务。 </p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>进程：有独立的内存空间，进程中的数据存放空间（堆空间和栈空间）是独立的，至少有一个线程。</p><p>线程：<strong>堆内存</strong>和<strong>方法区</strong>是<strong>共享</strong>的，<strong>栈内存</strong>是<strong>独立</strong>的，线程消耗的资源比进程小的多。 </p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p><strong><code>提高系统的资源利用率和程序的处理效率</code></strong></p><h3 id="状态及转换"><a href="#状态及转换" class="headerlink" title="状态及转换"></a>状态及转换</h3><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221007080603796.png"><img src="https://img-blog.csdnimg.cn/20210512173109590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzE1OTQz,size_16,color_FFFFFF,t_70"><h3 id="多线程结构"><a href="#多线程结构" class="headerlink" title="多线程结构"></a>多线程结构</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221007080648065.png" alt="image-20221007080648065"></p><p><img src="https://img-blog.csdnimg.cn/20210512175007490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzE1OTQz,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221007080759956.png" alt="image-20221007080759956"></p><h2 id="Java的线程对象"><a href="#Java的线程对象" class="headerlink" title="Java的线程对象"></a>Java的线程对象</h2><ol><li>通过实现<strong>接口Runnable，实现void run()方法</strong>创建线程对象，是<strong>线程对象</strong>。<ul><li>创建一个实现Runnable接口的类。</li><li>实现类去实现Runnable接口中的抽象方法：run()。</li><li>创建实现类的对象。</li><li>将此对象作为参数传到Thread类的构造器中，创建Thread类的对象。</li><li>通过Thread类的对象调用start()方法。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.broky.multiThread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableThread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建实现类的对象</span><br>        <span class="hljs-type">RunnableThread01</span> <span class="hljs-variable">runnableThread01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableThread01</span>();<br>        <span class="hljs-comment">//创建Thread类的对象,并将实现类的对象当做参数传入构造器</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnableThread01);<br>        <span class="hljs-comment">//使用Thread类的对象去调用Thread类的start()方法:①启动了线程 ②Thread中的run()调用了Runnable中的run()</span><br>        t1.start();<br><br>        <span class="hljs-comment">//在创建一个线程时，只需要new一个Thread类就可,不需要new实现类</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnableThread01);<br>        t2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//RunnableThread01实现Runnable接口的run()抽象方法</span><br><span class="hljs-comment">// 这并不是一个线程类，是一个可运行的类。它还不是一个线程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableThread01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:\t&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>通过<strong>继承Thread类并重写void run()<strong>方法创建线程对象，是</strong>线程的目标对象</strong>。<ul><li>创建一个继承于Thread类的子类。</li><li>重写Thread类的run()方法。</li><li>创建Thread类的子类的对象。</li><li>通过此对象调用start()来启动一个线程。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.broky.multiThread.exer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadExerDemo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread01</span>().start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread02</span>().start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:\t&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:\t&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>两种实现方式的比较</strong></p><ul><li><strong>第一种方式</strong>实现接口比较常用，因为一个类实现了接口，它还可以去继承其它的类，更灵活。</li><li>Java中只允许单进程，以卖票程序TiketSales类来说，很有可能这个类本来就有父类，这样一来就不可以继承Thread类来完成多线程了，但是一个类可以实现多个接口，因此实现的方式没有类的单继承性的局限性，用实现Runnable接口的方式来完成多线程更加实用。</li><li>实现Runnable接口的方式天然<strong>具有共享数据的特性</strong>（不用static变量）。因为继承Thread的实现方式，需要创建多个子类的对象来进行多线程，如果子类中有变量A，而不使用static约束变量的话，每个子类的对象都会有自己独立的变量A，只有static约束A后，子类的对象才共享变量A。而实现Runnable接口的方式，只需要创建一个实现类的对象，要将这个对象传入Thread类并创建多个Thread类的对象来完成多线程，而这多个Thread类对象实际上就是调用一个实现类对象而已。实现的方式更适合来处理多个线程有共享数据的情况。</li><li>联系：Thread类中也实现了Runnable接口；两种方式都需要重写run()方法，线程的执行逻辑都在run()方法中</li></ul><ol start="3"><li>实现Callable接口<ul><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.broky.multiThread;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建线程的方式三：实现Callable接口。 ---JDK5新特性</span><br><span class="hljs-comment"> * 如何理解Callable比Runnable强大？</span><br><span class="hljs-comment"> * 1.call()可以有返回值</span><br><span class="hljs-comment"> * 2.call()可以抛出异常被外面的操作捕获</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//1.创建一个实现Callable的实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt;&#123;<br>    <span class="hljs-comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                sum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadNew</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//3.创建Callable接口实现类的对象</span><br>        <span class="hljs-type">NumThread</span> <span class="hljs-variable">numThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumThread</span>();<br>        <span class="hljs-comment">//4.将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask对象</span><br>        FutureTask&lt;Integer&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(numThread);<br>        <span class="hljs-comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//6.获取Callable中Call方法的返回值</span><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> futureTask.get();<br>            System.out.println(<span class="hljs-string">&quot;总和为&quot;</span>+sum);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li><p>线程池</p><ul><li><strong>背景：</strong></li></ul><p> 经常创建和销毁、使用量特别大的资源、比如并发情况下的线程、对性能影响很大。</p><ul><li><strong>思路：</strong></li></ul><p> 提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><ul><li><strong>优点：</strong></li></ul><p> 提高响应速度（减少了创建新线程的时间）</p><p> 降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p><p> 便于线程管理</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.broky.multiThread;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadPoolExecutor;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建线程的方式四：使用线程池</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 面试题：创建多线程有几种方式</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 13roky</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021-04-22 21:49</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:\t&quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1.提供指定线程数量的线程池</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">service1</span> <span class="hljs-operator">=</span> (ThreadPoolExecutor) service;<br>        <span class="hljs-comment">//设置线程池的属性</span><br>        <span class="hljs-comment">//        System.out.println(service.getClass());</span><br>        <span class="hljs-comment">//        service1.setCorePoolSize(15);</span><br>        <span class="hljs-comment">//        service1.setKeepAliveTime();</span><br><br>        <span class="hljs-comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象。</span><br>        service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberThread</span>()); <span class="hljs-comment">//适合用于Runnable</span><br>        <span class="hljs-comment">//        service.submit(); 适合适用于Callable</span><br>        <span class="hljs-comment">//关闭线程池</span><br>        service.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Thread类的常用方法"><a href="#Thread类的常用方法" class="headerlink" title="Thread类的常用方法"></a>Thread类的常用方法</h3><ul><li><p>start() : 启动当前线程, 调用当前线程的run()方法</p></li><li><p>run() : 通常需要重写Thread类中的此方法, 将创建的线程要执行的操作声明在此方法中</p></li><li><p>currentThread() : 静态方法, 返回当前代码执行的线程</p></li><li><p>getName() : 获取当前线程的名字</p></li><li><p>setName() : 设置当前线程的名字</p></li><li><p>yield() : <strong>释放当前CPU的执行权</strong>，回到<strong>就绪状态</strong>，在回到就绪之后，<strong>有可能还会再次抢到</strong>,抢到后接着运行（让位）。</p></li><li><p>join(long millis, int nanos) : 在<strong>线程a中调用线程b的join()</strong>, 此时<strong>线程a进入阻塞状态, 直到线程b完全执行完以后</strong>（等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒）, 线程a<strong>才结束阻塞状态</strong></p></li><li><p>stop() : 已过时. 当执行此方法时,强制结束当前线程.</p></li><li><p>sleep(long militime) : 让线程睡眠指定的毫秒数后回到就绪态抢夺CPU时间片，在指定时间内，线程是<strong>定时等待状态</strong>,可以实现线程定时执行。</p></li><li><p>isAlive() ：判断当前线程是否存活</p></li><li><p>interrupt() ：设置中断标记</p></li><li><p>isInterrupted() ：判断是否中断</p></li></ul><p><strong>join用法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable7</span>());<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">//合并线程</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            t.join(); <span class="hljs-comment">// t合并到当前线程中，当前线程受阻塞，t线程执行直到结束。</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable7</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>线程正常结束模板</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">thread10</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyRunable4</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunable4</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">// 模拟5秒</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 终止线程</span><br>        <span class="hljs-comment">// 你想要什么时候终止t的执行，那么你把标记修改为false，就结束了。</span><br>        r.run = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunable4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-comment">// 打一个布尔标记</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(run)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// return就结束了，你在结束之前还有什么没保存的。</span><br>                <span class="hljs-comment">// 在这里可以保存呀。</span><br>                <span class="hljs-comment">//save....</span><br><br>                <span class="hljs-comment">//终止当前线程</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><blockquote><p>JDk中用Thread.State类定义了线程的几种状态想要实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在他的一个完整的生命周期中通常要经历如下的<strong>五种状态</strong>：</p></blockquote><ol><li>新建：当一个Thread类或其子类的对象被声明并创建时，新的线程对象处于新建状态。</li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源。</li><li>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run()方法定义了线程的操作和功能。</li><li>阻塞：在某种特殊情况下，被认为挂起或执行输入输出操作时，让出CPU并临时中止自己的执行，进入阻塞状态。</li><li>死亡：线程完成了它的全部工作或线程被提前强制性的中止或出现异常导致结束。<div align="center"> <img src='https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/qiV0by.png'></div>## 线程的调度</li></ol><h3 id="调度种类"><a href="#调度种类" class="headerlink" title="调度种类"></a>调度种类</h3><ul><li><strong>抢占式</strong>调度模型：<br>哪个线程的优先级比较高，抢到的CPU时间片的概率就高一些/多一些。<br><strong>java采用的就是抢占式调度模型</strong>。</li><li><strong>均分式</strong>调度模型：<br>平均分配CPU时间片。每个线程占有的CPU时间片时间长度一样。<br>平均分配，一切平等。<br>有一些编程语言，线程调度模型采用的是这种方式。</li></ul><h3 id="CPU的调度策略"><a href="#CPU的调度策略" class="headerlink" title="CPU的调度策略"></a>CPU的调度策略</h3><ul><li><strong>时间片：</strong>cpu正常情况下的调度策略。即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片，即该进程允许运行的时间，使各个程序从表面上看是同时进行的。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。而不会造成CPU资源浪费。在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。但在微观上：由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</li><li><strong>抢占式：</strong>高优先级的线程抢占cpu。</li></ul><h3 id="Java的调度算法："><a href="#Java的调度算法：" class="headerlink" title="Java的调度算法："></a>Java的调度算法：</h3><ul><li>同优先级线程组成先进先出队列（先到先服务），使用时间片策略。</li><li>堆高优先级，使用优先调度的抢占式策略。</li></ul><p><strong>线程的优先级等级</strong>（一共有10挡）</p><ul><li>MAX_PRIORITY：10</li><li>MIN_PRIORITY：1</li><li>NORM_PRIORITY：5 (默认优先级)</li></ul><p><strong>获取和设置当前线程的优先级</strong></p><ul><li><code>getPriority();</code> 获取</li><li><code>setPriority(int p);</code> 设置</li></ul><blockquote><p><strong>说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有高优先级的线程执行完成以后，低优先级的线程才执行。</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> net.coding.demo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Threadtest11</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;最高优先级：&quot;</span> + Thread.MAX_PRIORITY);<span class="hljs-comment">//最高优先级：10</span><br>        System.out.println(<span class="hljs-string">&quot;最低优先级:&quot;</span> + Thread.MIN_PRIORITY);<span class="hljs-comment">//最低优先级:1</span><br>        System.out.println(<span class="hljs-string">&quot;默认优先级:&quot;</span> + Thread.NORM_PRIORITY);<span class="hljs-comment">//默认优先级:5</span><br>        <br>        <span class="hljs-comment">// main线程的默认优先级是：5</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程的默认优先级是：&quot;</span> + Thread.currentThread().getPriority());<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable5</span>());<br>        t.setPriority(<span class="hljs-number">10</span>);<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">// 优先级较高的，只是抢到的CPU时间片相对多一些。</span><br>        <span class="hljs-comment">// 大概率方向更偏向于优先级比较高的。</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable5</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h3 id="安全问题出现的条件"><a href="#安全问题出现的条件" class="headerlink" title="安全问题出现的条件"></a>安全问题出现的条件</h3><p><strong>满足三个条件：</strong></p><ol><li>条件1：<strong>多线程并发</strong>。</li><li>条件2：<strong>有共享数据</strong>。</li><li>条件3：<strong>共享数据有修改的行为</strong>。</li></ol><blockquote><p>满足以上3个条件之后，就会存在线程安全问题。</p></blockquote><h3 id="两个专业术语"><a href="#两个专业术语" class="headerlink" title="两个专业术语"></a>两个专业术语</h3><p><strong>异步编程模型：</strong><br>线程t1和线程t2，各自执行各自的，t1不管t2，t2不管t1，谁也不需要等谁，这种编程模型叫做异步编程模型。</p><blockquote><p>实质：多线程并发（效率较高）,<strong>异步就是并发。</strong></p></blockquote><p><strong>同步编程模型：</strong><br>线程t1和线程t2，在线程t1执行的时候，必须等待t2线程执行结束，或者说在t2线程执行的时候，必须等待t1线程执行结束，两个线程之间发生了等待关系，这就是同步编程模型。</p><blockquote><p>实质：线程排队执行，效率较低,<strong>同步就是排队。</strong></p></blockquote><h3 id="线程安全和非线程安全的类的选择"><a href="#线程安全和非线程安全的类的选择" class="headerlink" title="线程安全和非线程安全的类的选择"></a>线程安全和非线程安全的类的选择</h3><ul><li><p>StringBuffer是线程安全的类，但效率低。</p></li><li><p>StringBuilder是非线程安全的类，用于代替StringBuffer。</p></li><li><p>ArrayList是非线程安全的，用于代替Vector。</p></li><li><p>Vector是线程安全的。</p></li><li><p>HashMap HashSet是非线程安全的，用于代替Hashtable。</p></li><li><p>Hashtable是线程安全的。</p></li></ul><blockquote><p>线程安全的类的方法都是<strong>同步方法</strong>，效率低，因此这些类是安全的，线程非安全的类效率高但是不安全，可以用作<strong>局部变量</strong>以避免线程安全问题。</p></blockquote><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><blockquote><p>是一上来就选择线程同步吗？synchronized</p><p>不是，synchronized会让程序的执行效率降低，用户体验不好。<br>系统的用户吞吐量降低。用户体验差。在不得已的情况下再选择线程同步机制。</p></blockquote><ul><li>第一种方案：尽量使用<strong>局部变量</strong> <em>代替</em> “<strong>实例变量</strong>和<strong>静态变量</strong>”。</li><li>第二种方案：<strong>如果必须是实例变量</strong>，那么可以考虑<strong>创建多个对象</strong>，这样实例变量的内存就不共享了。（一个线程对应1个对象，100个线程对应100个对象，对象不共享，就没有数据安全问题了。）</li><li>第三种方案：如果不能使用局部变量，对象也不能创建多个，这个时候就只能选择<strong>synchronized</strong>了。<strong>线程同步机制</strong>。</li></ul><h2 id="synchronized-线程同步"><a href="#synchronized-线程同步" class="headerlink" title="synchronized-线程同步"></a>synchronized-线程同步</h2><p>线程同步机制的<strong>语法</strong>是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>()&#123;<br><span class="hljs-comment">// 线程同步代码块。</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重点：</strong><br>synchronized后面<strong>小括号()</strong> 中传的这个“数据”是相当关键的。这个数据必须是 <strong><code>多线程共享</code></strong> 的数据。才能达到多线程排队。</p><p><strong>注意：</strong></p><blockquote><p>在java语言中，任何一个对象都有“一把锁”，其实这把锁就是标记。（只是把它叫做锁）<br><strong>100个对象，100把锁。1个对象1把锁。</strong></p></blockquote><h3 id="同步的执行原理"><a href="#同步的执行原理" class="headerlink" title="同步的执行原理"></a>同步的执行原理</h3><p>1、假设t1和t2线程并发，开始执行以下代码的时候，肯定有一个先一个后。</p><p>2、假设t1先执行了，遇到了<strong>synchronized</strong>，这个时候自动找“后面<strong>共享对象</strong>”的<strong>对象锁</strong>，找到之后，并<strong>占有这把锁</strong>，然后<strong>执行同步代码块</strong>中的程序，在程序执行过程中一直都是<strong>占有这把锁</strong>的。<strong>直到同步代码块代码结束，这把锁才会释放。</strong></p><p>3、假设t1已经占有这把锁，此时t2也遇到synchronized关键字，也会去占有后面共享对象的这把锁，结果这把锁被t1占有，t2只能在同步代码块外面<strong>等待t1的结束</strong>(阻塞态)，直到t1把同步代码块执行结束了，t1会归还这把锁，此时t2终于等到这把锁，然后t2占有这把锁之后，进入同步代码块执行程序。</p><p>4、这样就达到了<strong>线程排队</strong>执行。</p><p><strong>重中之重：</strong></p><blockquote><p><code>“锁”</code>即该对象的<strong>控制权</strong>，有锁才能修改该对象；这个共享对象一定要选好了。这个共享对象一定是你需要排队执行的这些线程对象所共享的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String actno;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance; <span class="hljs-comment">//实例变量。</span><br><br>    <span class="hljs-comment">//对象</span><br>    Object o= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <span class="hljs-comment">// 实例变量。（Account对象是多线程共享的，Account对象中的实例变量obj也是共享的。）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String actno, <span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.actno = actno;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getActno</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> actno;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setActno</span><span class="hljs-params">(String actno)</span> &#123;<br>        <span class="hljs-built_in">this</span>.actno = actno;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-comment">//取款的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span>&#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 以下可以共享,金额不会出错</span><br><span class="hljs-comment">         * 以下这几行代码必须是线程排队的，不能并发。</span><br><span class="hljs-comment">         * 一个线程把这里的代码全部执行结束之后，另一个线程才能进来。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-comment">//synchronized(actno) &#123;</span><br>        <span class="hljs-comment">//synchronized(o) &#123;</span><br>        <span class="hljs-comment">//必须同步实例对象，不能同步变量</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 以下不共享，金额会出错</span><br><span class="hljs-comment">         */</span><br>  <span class="hljs-comment">/*Object obj = new Object();</span><br><span class="hljs-comment">        synchronized(obj) &#123; // 这样编写就不安全了。因为obj2不是共享对象。</span><br><span class="hljs-comment">        synchronized(null) &#123;//编译不通过</span><br><span class="hljs-comment">        String s = null;</span><br><span class="hljs-comment">        synchronized(s) &#123;//java.lang.NullPointerException*/</span><br>            <span class="hljs-type">double</span> <span class="hljs-variable">before</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getBalance();<br>            <span class="hljs-type">double</span> <span class="hljs-variable">after</span> <span class="hljs-operator">=</span> before - money;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-built_in">this</span>.setBalance(after);<br>        <span class="hljs-comment">//&#125;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">// 两个线程必须共享同一个账户对象。</span><br>    <span class="hljs-keyword">private</span> Account act;<br><br>    <span class="hljs-comment">// 通过构造方法传递过来账户对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AccountThread</span><span class="hljs-params">(Account act)</span> &#123;<br>        <span class="hljs-built_in">this</span>.act = act;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>        act.withdraw(money);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;对&quot;</span>+act.getActno()+<span class="hljs-string">&quot;取款&quot;</span>+money+<span class="hljs-string">&quot;成功，余额&quot;</span> + act.getBalance());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建账户对象（只创建1个）</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">act</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;act-001&quot;</span>, <span class="hljs-number">10000</span>);<br>        <span class="hljs-comment">// 创建两个线程，共享同一个对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountThread</span>(act);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountThread</span>(act);<br><br>        t1.setName(<span class="hljs-string">&quot;t1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;t2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>以上代码锁<strong>this、实例变量actno、实例变量o</strong>都可以！因为这三个是线程共享且都是对象！</p></blockquote><h3 id="同步方法-synchronized"><a href="#同步方法-synchronized" class="headerlink" title="同步方法-synchronized"></a>同步方法-synchronized</h3><p><strong>同步方法</strong>:就是把synchronized关键字加到方法上</p><p>格式:</p><p><code>修饰符 synchronized 返回值类型 方法名(方法参数)&#123; &#125;</code></p><blockquote><p><strong>同步方法</strong>的锁对象是什么呢?  :arrow_forward: <code>this</code></p></blockquote><p><strong>同步静态方法</strong>:就是把synchronized关键字加到静态方法上</p><p>格式:</p><p><code>修饰符 static synchronized 返回值类型 方法名(方法参数)&#123; &#125;</code></p><blockquote><p><strong>同步静态方法</strong>的锁对象是什么呢? :arrow_forward: <code>类名.class</code></p></blockquote><p>注意：</p><blockquote><p>synchronized出现在实例方法上，一定锁的是**<code>this</code><strong>; 没得挑。只能是this。不能是其他的对象了。所以这种方式</strong>不灵活**。</p></blockquote><ol><li>缺点</li></ol><p>synchronized出现在实例方法上，表示<strong>整个方法体都需要同步</strong>，可能会无故<strong>扩大同步的范围</strong>，导致程序的<strong>执行效率降低</strong>。所以这种方式<strong>不常用</strong>。</p><ol start="2"><li>优点</li></ol><p>代码写的少了，节俭了。</p><ol start="3"><li> 总结</li></ol><p>如果共享的对象就是<strong>this</strong>，并且需要<strong>同步的代码块是整个方法体</strong>，建议使用这种方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">before</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getBalance();<br>    <span class="hljs-type">double</span> <span class="hljs-variable">after</span> <span class="hljs-operator">=</span> before - money;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-built_in">this</span>.setBalance(after);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在方法调用处synchronized"><a href="#在方法调用处synchronized" class="headerlink" title="在方法调用处synchronized"></a>在方法调用处synchronized</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>    <span class="hljs-comment">// 取款</span><br>    <span class="hljs-comment">// 多线程并发执行这个方法。</span><br>    <span class="hljs-comment">//synchronized (this) &#123; //这里的this是AccountThread对象，这个对象不共享！</span><br>    <span class="hljs-keyword">synchronized</span> (act) &#123; <span class="hljs-comment">// 这种方式也可以，只不过扩大了同步的范围，效率更低了。</span><br>        act.withdraw(money);<br>    &#125;<br><br>    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;对&quot;</span>+act.getActno()+<span class="hljs-string">&quot;取款&quot;</span>+money+<span class="hljs-string">&quot;成功，余额&quot;</span> + act.getBalance());<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式也可以，只不过<strong>扩大了同步的范围</strong>，效率更低了。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>synchronized有三种写法：</strong></p><ol><li><code>同步代码块</code></li></ol><p>特点：<strong>灵活</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(线程共享对象)&#123;<br>同步代码块;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><code>在实例方法上使用synchronized</code></li></ol><p>表示<strong>共享对象(临界资源)<strong>一定是 <strong><code>this</code></strong> 并且同步代码块是</strong>整个方法体</strong>。</p><ol start="3"><li><code>在静态方法上使用synchronized</code></li></ol><p>表示找 <strong><code>类锁</code><strong>。</strong>类锁永远只有1把</strong>。</p><p><strong>就算创建了100个对象，那类锁也只有1把。</strong></p><p><strong>注意区分：</strong></p><blockquote><ul><li>对象锁：1个对象1把锁，100个对象100把锁，不唯一。</li><li>类锁：100个对象，也可能只是1把类锁，唯一。</li></ul></blockquote><h2 id="LOCK锁"><a href="#LOCK锁" class="headerlink" title="LOCK锁"></a>LOCK锁</h2><blockquote><p>Lock实现提供比使用synchronized方法和语句可以获得更广泛的锁定操作</p></blockquote><p>Lock中提供了<strong>获得锁和释放锁</strong>的方法</p><ul><li><p><code>void lock()</code>:获得锁</p></li><li><p><code>void unlock()</code>:释放锁</p></li></ul><p>Lock是接口不能直接实例化，这里采用它的实现类<strong>ReentrantLock</strong>来实例化</p><ul><li><p><code>Reentrantlock</code>的构造方法</p></li><li><p><code>ReentrantLock()</code>: 创建一个ReentrantLock的实例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch6;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Locktest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">sellticket</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">sellticket</span>(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t, <span class="hljs-string">&quot;t1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t, <span class="hljs-string">&quot;t2&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t, <span class="hljs-string">&quot;t3&quot;</span>);<br>        t1.start();<br>        t2.start();<br>        t3.start();<br><span class="hljs-comment">//        System.out.println(Thread.currentThread().getName());</span><br>    &#125;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">selltickets</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> tickets;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    selltickets(<span class="hljs-type">int</span> tickets) &#123;<br>        <span class="hljs-built_in">this</span>.tickets = tickets;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                sell();<br>            &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (tickets &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br><span class="hljs-comment">//                            Thread.yield();</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在出售第&quot;</span> + <span class="hljs-built_in">this</span>.tickets + <span class="hljs-string">&quot;张票&quot;</span>);<br>                tickets--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h3><table><thead><tr><th align="center">方法名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">void wait()</td><td align="left">导致当前线程等待，直到另一个线程调用该对象的notify()方法或notifyAll()方法</td></tr><tr><td align="center">void notify()</td><td align="left">唤醒正在等待对象监视器的单个线程</td></tr><tr><td align="center">void notifyAll()</td><td align="left">唤醒正在等待对象监视器的所有线程</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch7;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 生产者消费者案例</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T6_ProCus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            Food food=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Food</span>();<br>            Producter p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Producter</span>(food);<br>            Customers s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Customers</span>(food);<br>            Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(p);<br>            Thread t2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(s);<br>            t1.start();<br>            t2.start();<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*生产者*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Food food;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producter</span><span class="hljs-params">(Food food)</span>&#123;<br>        <span class="hljs-built_in">this</span>.food=food;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br>                food.pro(<span class="hljs-string">&quot;番茄炒蛋&quot;</span>, <span class="hljs-string">&quot;酸甜&quot;</span>);<br>            &#125;<br>                <span class="hljs-keyword">else</span><br>                food.pro(<span class="hljs-string">&quot;辣子鸡丁&quot;</span>,<span class="hljs-string">&quot;麻辣口味&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><span class="hljs-comment">/*消费者*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customers</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Food food;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customers</span><span class="hljs-params">(Food food)</span>&#123;<br>        <span class="hljs-built_in">this</span>.food=food;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            food.get();<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*食物*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;  <span class="hljs-comment">//true表示生产，false表示消费</span><br><br>    <span class="hljs-comment">/*生产产品*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pro</span><span class="hljs-params">(String name,String desc)</span>&#123;<br>       <span class="hljs-comment">//不能生产</span><br>        <span class="hljs-keyword">if</span> (!flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//线程进入等待状态，释放监视器的所有权（对象锁）</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.setName(name);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-built_in">this</span>.setDesc(desc);<br>        flag=<span class="hljs-literal">false</span>;    <span class="hljs-comment">//利用Flag标签来交替执行</span><br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br>    <span class="hljs-comment">/*消费产品*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        不能消费</span><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+<span class="hljs-built_in">this</span>.getDesc());<br>        flag=<span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesc</span><span class="hljs-params">(String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Food&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="死锁（DeadLock）和饥饿"><a href="#死锁（DeadLock）和饥饿" class="headerlink" title="死锁（DeadLock）和饥饿"></a>死锁（DeadLock）和饥饿</h2><blockquote><p><strong>死锁</strong>: <u>一组线程因争夺资源陷入永远等待状态</u></p><p><strong>饥饿</strong>: <u>一个可运行线程由于其他线程总是优先于它而被调度程序无限期地拖延而不能被执行</u></p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221107233342841.png"></p><img src="https://img-blog.csdnimg.cn/20210512224504688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzE1OTQz,size_16,color_FFFFFF,t_70,t_70, #pic_center"><p><u>代码示例</u>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 比如：t1想先穿衣服在穿裤子</span><br><span class="hljs-comment"> *       t2想先穿裤子在传衣服</span><br><span class="hljs-comment"> * 此时：t1拿到衣服，t2拿到裤子；</span><br><span class="hljs-comment"> * 由于t1拿了衣服，t2找不到衣服；t2拿了裤子，t1找不到裤子</span><br><span class="hljs-comment"> * 就会导致死锁的发生！</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_DeadLock</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dress</span> <span class="hljs-variable">dress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dress</span>();<br>        <span class="hljs-type">Trousers</span> <span class="hljs-variable">trousers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Trousers</span>();<br>        <span class="hljs-comment">//t1、t2共享dress和trousers。</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable1</span>(dress, trousers), <span class="hljs-string">&quot;t1&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable2</span>(dress, trousers), <span class="hljs-string">&quot;t2&quot;</span>);<br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    Dress dress;<br>    Trousers trousers;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable1</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable1</span><span class="hljs-params">(Dress dress, Trousers trousers)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dress = dress;<br>        <span class="hljs-built_in">this</span>.trousers = trousers;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span>(dress)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (trousers)&#123;<br>                System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    Dress dress;<br>    Trousers trousers;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable2</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRunnable2</span><span class="hljs-params">(Dress dress, Trousers trousers)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dress = dress;<br>        <span class="hljs-built_in">this</span>.trousers = trousers;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span>(trousers)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (dress)&#123;<br>                System.out.println(<span class="hljs-string">&quot;。。。。。。。。。。。。。。&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dress</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trousers</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="交互线程的协作与同步"><a href="#交互线程的协作与同步" class="headerlink" title="交互线程的协作与同步"></a>交互线程的协作与同步</h2><h3 id="交互线程的协作与同步-1"><a href="#交互线程的协作与同步-1" class="headerlink" title="交互线程的协作与同步"></a>交互线程的协作与同步</h3><p><u>生产者-消费者问题</u> </p><blockquote><p>有n个生产者进程和m个消费者进程并发执行，生产者进程要将所生产的产品提供给消费者进程。设置具有k个存储单元的缓冲区</p></blockquote><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221107233616159.png" alt="image-20221107233616159"></p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221107233647995.png" alt="image-20221107233647995"></p><ul><li><blockquote><p>问题：线程通信，发送线程与接收线程，存在可导致错误的缺陷</p></blockquote></li><li><blockquote><p>错误原因：发送线程与接收线程，没有约定在传送 数据时协同工作的步调</p></blockquote></li></ul><h3 id="协作关系"><a href="#协作关系" class="headerlink" title="协作关系"></a>协作关系</h3><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><blockquote><p>完成共同任务的并发线程，协调一致地运行，约定执行次序，协作制约关系。</p></blockquote><h3 id="线程阻塞和唤醒"><a href="#线程阻塞和唤醒" class="headerlink" title="线程阻塞和唤醒"></a>线程阻塞和唤醒</h3><p><strong>实现方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//java.lang.Object类声明以下线程阻塞和唤醒方法，用于管程。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException <span class="hljs-comment">//等待</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">()</span><br><span class="hljs-comment">//唤醒一个等待当前临界资源的线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyAll</span><span class="hljs-params">()</span><br><span class="hljs-comment">//唤醒所有等待当前临界资源的线程</span><br></code></pre></td></tr></table></figure><h2 id="管程-集中控制"><a href="#管程-集中控制" class="headerlink" title="管程(集中控制)"></a>管程(集中控制)</h2><ol><li><strong>管程（monitor）</strong>是指代表<strong>共享资源的数据结构</strong>及并发线程在其上执行的<strong>一组操作</strong>。</li><li>管程被<strong>请求和释放资源</strong>的线程所调用。 </li><li>管程机制包含三部分：</li></ol><ul><li><p><code>条件变量</code>，分配临界资源的条件； </p></li><li><p><code>wait原语</code>，请求临界资源而不满足时，阻塞线程；</p></li><li><p><code>signal原语</code>，唤醒等待该临界资源的一个阻塞线程</p></li></ul><p><strong>生产者和消费者线程同步案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch7;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 生产者消费者案例</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T6_ProCus</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>            Food food=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Food</span>();<br>            Producter p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Producter</span>(food);<br>            Customers s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Customers</span>(food);<br>            Thread t1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(p);<br>            Thread t2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(s);<br>            t1.start();<br>            t2.start();<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*生产者*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Food food;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producter</span><span class="hljs-params">(Food food)</span>&#123;<br>        <span class="hljs-built_in">this</span>.food=food;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) &#123;<br>                food.pro(<span class="hljs-string">&quot;番茄炒蛋&quot;</span>, <span class="hljs-string">&quot;酸甜&quot;</span>);<br>            &#125;<br>                <span class="hljs-keyword">else</span><br>                food.pro(<span class="hljs-string">&quot;辣子鸡丁&quot;</span>,<span class="hljs-string">&quot;麻辣口味&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br><span class="hljs-comment">/*消费者*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customers</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Food food;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customers</span><span class="hljs-params">(Food food)</span>&#123;<br>        <span class="hljs-built_in">this</span>.food=food;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            food.get();<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*食物*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;  <span class="hljs-comment">//true表示生产，false表示消费</span><br><br>    <span class="hljs-comment">/*生产产品*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pro</span><span class="hljs-params">(String name,String desc)</span>&#123;<br>       <span class="hljs-comment">//不能生产</span><br>        <span class="hljs-keyword">if</span> (!flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//线程进入等待状态，释放监视器的所有权（对象锁）</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">this</span>.setName(name);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-built_in">this</span>.setDesc(desc);<br>        flag=<span class="hljs-literal">false</span>;    <span class="hljs-comment">//利用Flag标签来交替执行</span><br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br>    <span class="hljs-comment">/*消费产品*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        不能消费</span><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-built_in">this</span>.wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">300</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>.getName()+<span class="hljs-string">&quot;-&gt;&quot;</span>+<span class="hljs-built_in">this</span>.getDesc());<br>        flag=<span class="hljs-literal">true</span>;<br>        <span class="hljs-built_in">this</span>.notify();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesc</span><span class="hljs-params">(String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Food&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Food</span><span class="hljs-params">(String name, String desc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><h3 id="线程的分类"><a href="#线程的分类" class="headerlink" title="线程的分类"></a>线程的分类</h3><ul><li>一类是：<strong>用户线程</strong></li><li>一类是：<strong>守护线程</strong>（<strong>后台线程</strong>）</li></ul><p>其中具有代表性的就是：<strong>垃圾回收线程（守护线程）</strong>。</p><h4 id="守护线程的特点"><a href="#守护线程的特点" class="headerlink" title="守护线程的特点"></a>守护线程的特点</h4><p>一般守护线程是一个<strong>死循环</strong>，<strong>所有的用户线程只要结束，守护线程自动结束</strong>。</p><p>注意：<strong>主线程main</strong>方法是一个<strong>用户线程</strong>。</p><h4 id="守护线程用法"><a href="#守护线程用法" class="headerlink" title="守护线程用法"></a>守护线程用法</h4><p>每天00:00的时候系统数据自动备份。<br>这个需要使用到定时器，并且我们可以将定时器设置为守护线程。<br>一直在那里看着，没到00:00的时候就备份一次。所有的用户线程如果结束了，守护线程自动退出，没有必要进行数据备份了。</p><table><thead><tr><th>void setDaemon(boolean on)</th><th>on为true表示把线程设置为守护线程</th></tr></thead></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest14</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BakDataThread</span>();<br>        t.setName(<span class="hljs-string">&quot;备份数据的线程&quot;</span>);<br><br>        <span class="hljs-comment">// 启动线程之前，将线程设置为守护线程</span><br>        t.setDaemon(<span class="hljs-literal">true</span>);<br><br>        t.start();<br><br>        <span class="hljs-comment">// 主线程：主线程是用户线程</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BakDataThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 即使是死循环，但由于该线程是守护者，当用户线程结束，守护线程自动终止。</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + (++i));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="第七章、数据IO流操作"><a href="#第七章、数据IO流操作" class="headerlink" title="第七章、数据IO流操作"></a>第七章、数据IO流操作</h1><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221111142439616.png" alt="image-20221111142439616"></p><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221111144227047.png" alt="image-20221111144227047"></p><p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221111144202203.png" alt="image-20221111144202203"></p><h2 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>数据流是 Java 进行 I/O 操作的对象，它按照不同的标准可以分为不同的类别。</p><ul><li>按照流的方向主要分为<strong>输入流和输出流</strong>两大类。</li><li>数据流按照数据单位的不同分为<strong>字节流和字符流</strong>。</li><li>按照功能可以划分为<strong>节点流和处理流</strong>。</li></ul><p>数据流的处理只能按照数据序列的顺序来进行，即前一个数据处理完之后才能处理后一个数据。数据流以输入流的形式被程序获取，再以输出流的形式将数据输出到其它设备。图 1 为输入流模式，图 2 为输出流模式。</p><blockquote><p>输入输出是针对程序而言的，输入即从外部源读取数据到程序，输出即将程序中的信息写入到目的地（包括显示器）。</p></blockquote><p><img src="http://c.biancheng.net/uploads/allimg/200115/5-200115142HWK.png"></p><p><img src="http://c.biancheng.net/uploads/allimg/200115/5-200115142K1644.png" alt="输入流模式"></p><h4 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h4><p>Java 流相关的类都封装在 java.io 包中，而且每个数据流都是一个对象。所有输入流类都是 InputStream 抽象类（字节输入流）和 Reader 抽象类（字符输入流）的子类。其中 InputStream 类是字节输入流的抽象类，是所有字节输入流的父类，其层次结构如图 3 所示。</p><div align="center">    <img src="http://c.biancheng.net/uploads/allimg/200115/5-200115145253550.png"></div><p>InputStream 类中所有方法遇到错误时都会引发 <strong>IOException 异常</strong>。如下是该类中包含的常用方法。</p><table><thead><tr><th align="left">名称</th><th>作用</th></tr></thead><tbody><tr><td align="left"><code>int read()</code></td><td>从输入流读入一个字节的数据，将它转换成一个 0~ 255 的整数，返回一个整数，如果遇到输入流的结尾返回 -1</td></tr><tr><td align="left"><code>int read(byte[] b)</code></td><td>从输入流读取若干字节的数据保存到参数 b 指定的字节数组中，返回的字节数表示读取的字节数，如果遇到输入流的结尾返回 -1</td></tr><tr><td align="left"><code>int read(byte[] b,int off,int len)</code></td><td>从输入流读取若干字节的数据保存到参数 b 指定的字节数组中，其中 off 是指在数组中开始保存数据位置的起始下标，len 是指读取字节的位数。返回的是实际读取的字节数，如果遇到输入流的结尾则返回 -1</td></tr><tr><td align="left"><code>void close()</code></td><td>关闭数据流，当完成对数据流的操作之后需要关闭数据流</td></tr><tr><td align="left"><code>int available()</code></td><td>返回可以从数据源读取的数据流的字节数。</td></tr><tr><td align="left">skip(long n)</td><td>从输入流跳过参数 n 指定的字节数目</td></tr><tr><td align="left">boolean markSupported()</td><td>判断输入流是否可以重复读取，如果可以就返回 true</td></tr><tr><td align="left">void mark(int readLimit)</td><td>如果输入流可以被重复读取，从流的当前位置开始设置标记，readLimit 指定可以设置标记的字节数</td></tr><tr><td align="left">void reset()</td><td>使输入流重新定位到刚才被标记的位置，这样可以重新读取标记过的数据</td></tr></tbody></table><p>上述最后 3 个方法一般会结合在一起使用，首先使用 markSupported() 判断，如果可以重复读取，则使用 mark(int readLimit) 方法进行标记，标记完成之后可以使用 read() 方法读取标记范围内的字节数，最后使用 reset() 方法使输入流重新定位到标记的位置，继而完成重复读取操作。</p><p>Java 中的字符是 Unicode 编码，即双字节的，而 InputerStream 是用来处理单字节的，在处理字符文本时不是很方便。这时可以使用 Java 的文本输入流 Reader 类，该类是字符输入流的抽象类，即所有字符输入流的实现都是它的子类，该类的方法与 InputerSteam 类的方法类似，这里不再介绍。</p><h4 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h4><p>在 Java 中所有输出流类都是 OutputStream 抽象类（字节输出流）和 Writer 抽象类（字符输出流）的子类。其中 OutputStream 类是字节输出流的抽象类，是所有字节输出流的父类，其层次结构如图 4 所示。</p><div align="center">    <img src="http://c.biancheng.net/uploads/allimg/200115/5-200115151G3J0.png"></div><p>OutputStream 类是所有字节输出流的超类，用于以二进制的形式将数据写入目标设备，该类是抽象类，不能被实例化。OutputStream 类提供了一系列跟数据输出有关的方法，如下所示。</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>int write(b)</code></td><td>将指定字节的数据写入到输出流</td></tr><tr><td><code>int write (byte[] b)</code></td><td>将指定字节数组的内容写入输出流</td></tr><tr><td><code>int write (byte[] b,int off,int len)</code></td><td>将指定字节数组从 off 位置开始的 len 字节的内容写入输出流</td></tr><tr><td>close()</td><td>关闭数据流，当完成对数据流的操作之后需要关闭数据流</td></tr><tr><td><code>flush()</code></td><td>刷新输出流，强行将缓冲区的内容写入输出流</td></tr></tbody></table><p>每个Java程序运行时都带有一个系统流，系统流对应的类为 java.lang.System。Sytem 类封装了 Java 程序运行时的 3 个系统流，分别通过 in、out 和 err 变量来引用。这 3 个系统流如下所示：</p><ul><li>System.in：标准输入流，默认设备是键盘。</li><li>System.out：标准输出流，默认设备是控制台。</li><li>System.err：标准错误流，默认设备是控制台。</li></ul><p>Java 中常见编码说明如下：</p><ul><li>ISO8859-1：属于单字节编码，最多只能表示 0~255 的字符范围。</li><li>GBK/GB2312：中文的国标编码，用来表示汉字，属于双字节编码。GBK 可以表示简体中文和繁体中文，而 GB2312 只能表示简体中文。GBK 兼容 GB2312。</li><li>Unicode：是一种编码规范，是为解决全球字符通用编码而设计的。UTF-8 和 UTF-16 是这种规范的一种实现，此编码不兼容 ISO8859-1 编码。Java 内部采用此编码。</li><li>UTF：UTF 编码兼容了 ISO8859-1 编码，同时也可以用来表示所有的语言字符，不过 UTF 编码是不定长编码，每一个字符的长度为 1~6 个字节不等。一般在中文网页中使用此编码，可以节省空间。</li></ul><p>在程序中如果处理不好字符编码，就有可能出现乱码问题。例如现在本机的默认编码是 GBK，但在程序中使用了 ISO8859-1 编码，则就会出现字符的乱码问题。就像两个人交谈，一个人说中文，另外一个人说英语，语言不同就无法沟通。为了避免产生乱码，程序编码应与本地的默认编码保持一致。</p><p>本地的默认编码可以使用 System 类查看。Java 中 System 类可以取得与系统有关的信息，所以直接使用此类可以找到系统的默认编码。方法如下所示：</p><p><code>public static Properties getProperty()</code></p><p>使用上述方法可以查看 JVM 的默认编码，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;    <span class="hljs-comment">// 获取当前系统编码    </span><br>    System.out.println(<span class="hljs-string">&quot;系统默认编码：&quot;</span> + System.getProperty(<span class="hljs-string">&quot;file.encoding&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><p>InputStream 类及其子类的对象表示字节输入流，InputStream 类的常用子类如下。</p><ul><li>ByteArrayInputStream 类：将字节数组转换为字节输入流，从中读取字节。</li><li>FileInputStream 类：从文件中读取数据。</li><li>PipedInputStream 类：连接到一个 PipedOutputStream（管道输出流）。</li><li>SequenceInputStream 类：将多个字节输入流串联成一个字节输入流。</li><li>ObjectInputStream 类：将对象反序列化。</li></ul><p>使用 InputStream 类的方法可以从流中读取一个或一批字节。表 1 列出了 InputStream 类的常用方法。</p><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>int read()</td><td>从输入流中读取一个 8 位的字节，并把它转换为 0~255 的整数，最后返回整数。 如果返回 -1，则表示已经到了输入流的末尾。为了提高 I/O 操作的效率，建议尽量 使用 read() 方法的另外两种形式</td></tr><tr><td>int read(byte[] b)</td><td>从输入流中读取若干字节，并把它们保存到参数 b 指定的字节数组中。 该方法返回 读取的字节数。如果返回 -1，则表示已经到了输入流的末尾</td></tr><tr><td>int read(byte[] b, int off, int len)</td><td>从输入流中读取若干字节，并把它们保存到参数 b 指定的字节数组中。其中，off 指 定在字节数组中开始保存数据的起始下标；len 指定读取的字节数。该方法返回实际 读取的字节数。如果返回 -1，则表示已经到了输入流的末尾</td></tr><tr><td>void close()</td><td>关闭输入流。在读操作完成后，应该关闭输入流，系统将会释放与这个输入流相关 的资源。注意，InputStream 类本身的 close() 方法不执行任何操作，但是它的许多 子类重写了 close() 方法</td></tr><tr><td>int available()</td><td>返回可以从输入流中读取的字节数</td></tr><tr><td>long skip(long n)</td><td>从输入流中跳过参数 n 指定数目的字节。该方法返回跳过的字节数</td></tr><tr><td>void mark(int readLimit)</td><td>在输入流的当前位置开始设置标记，参数 readLimit 则指定了最多被设置标记的字 节数</td></tr><tr><td>boolean markSupported()</td><td>判断当前输入流是否允许设置标记，是则返回 true，否则返回 false</td></tr><tr><td>void reset()</td><td>将输入流的指针返回到设置标记的起始处</td></tr></tbody></table><blockquote><p>注意：在使用 <strong>mark() 方法和 reset() 方法</strong>之前，需要判断该文件系统是否支持这两个方法，以避免对程序造成影响。</p></blockquote><h4 id="DataInputStream和DataOutputStream"><a href="#DataInputStream和DataOutputStream" class="headerlink" title="DataInputStream和DataOutputStream"></a>DataInputStream和DataOutputStream</h4><blockquote><p>如果要进行基于Java基本数据类型(如整数或浮点数等)的输入/输出，则要用到过滤流FilterInputStream类和FilterOutputStream类的各种子类。</p></blockquote><p>常用类方法</p><p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221108115307889.png" alt="image-20221108115307889"></p><p>例题：<strong>求100以内的所有素数，并把结果写入D盘的data.dat文件中，最后再以每行10个数的方式显示出data.dat文件内容</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch8;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeList</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//用于统计素数数目</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;d:/data.dat&quot;</span>);<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(fos);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (isPrime(i)) &#123;<br>                    dos.writeInt(i);<br>                    count++;<br>                &#125;<br>            &#125;<br>            fos.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d:/data.dat&quot;</span>);<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(fis);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count; i++) &#123;<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) System.out.println();<span class="hljs-comment">//每行只显示10个数</span><br>                System.out.printf(<span class="hljs-string">&quot;%5d&quot;</span>, dis.readInt());<br>            &#125;<br>            fis.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="BufferedInputStream和BufferedOutputStream"><a href="#BufferedInputStream和BufferedOutputStream" class="headerlink" title="BufferedInputStream和BufferedOutputStream"></a>BufferedInputStream和BufferedOutputStream</h4><blockquote><p>这两个类称之为字节缓冲流。如果文件的读写数据量较多时，使用<strong>字节缓冲流类对象</strong>可以提高文件读写操作的效率。字节缓冲流对象会建立一个<strong>内部缓冲区</strong>，输入/输出数据首先会读写到缓冲区进行操作，当缓冲区满或关闭字节缓冲流时一次性输出到对应流，也可使用<strong>flush()<strong>方法主动将缓冲区数据输出到对应流，这样可以极大地减少磁盘读写次数，提高了文件</strong>操作效率</strong>。</p></blockquote><p><strong>BufferedInputStream类的构造方法:</strong></p><ul><li>BufferedInputStream(InputStream in):创建缓冲输入流对象，保存in流对象，并创建一个内部缓冲区来保存输入数据。</li><li>BufferedInputStream(InputStream in, int size):创建缓冲输入流对象，保存in流对象，并创建一个指定大小为size个字节的内部缓冲区来保存输入数据。</li></ul><p><strong>BufferedOutputStream类的构造方法:</strong></p><ul><li><p>BufferedOutputStream(OutputStream out):创建输出缓冲流对象，并创建一个默认大小为512个字节的内部缓冲区，写数据到参数所指定的输出流out对象。</p></li><li><p>BufferedOutputStream(OutputStream out, int size):创建输出缓冲流对象，并创建一个指定大小为size个字节的内部缓冲区，写数据到参数所指定的输出流out对象。</p></li></ul><blockquote><p>flush()方法用于在程序结束之前<strong>主动将缓冲区</strong>里的数据<strong>输出到对应的输入/输出流</strong>。可以通过输入/输出缓冲流对象进行显示调用。<br>BufferedInputStream类提供了与FileInputStream类同样的读文件操作方法，BufferedOutputStream类提供了与FileOutputStream类同样的写文件操作方法，唯一的区别是所有读写操作的数据首先进入到缓冲区，在必要时(<strong>缓冲区满、关闭流或调用flush()方法</strong>)才输出到对应的流中。</p></blockquote><h4 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h4><blockquote><p>PrintStream类提供了把Java的<strong>任何类型数据转换为字符串类型数据输出</strong>的功能。输出时，经常使用的方法有<code>print()、println()和printf()</code>。创建PrintStream类的对象时，需要在OutputStream类对象的基础上进行。</p><p>PrintStream类的构造方法有:<code>PrintStream(OutputStream out)</code>:创建一个打印流对象。</p></blockquote><p>示例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch8;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStreamTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:/info.dat&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;hello java 123&quot;</span>;<br>    ps.printf(<span class="hljs-string">&quot;%s&quot;</span>,msg);<br>    ps.close();<br>&#125;&#125;<br></code></pre></td></tr></table></figure><p>示例2：写入九九乘法表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch8;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NineNineMul</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;d:/data.dat&quot;</span>);<br>            <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(os);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                    ps.printf(<span class="hljs-string">&quot; %8s&quot;</span>, i + <span class="hljs-string">&quot;*&quot;</span> + j + <span class="hljs-string">&quot;=&quot;</span> + (i * j));<br>                &#125;<br>                ps.println();<br>            &#125;<br>            ps.close();<br>            os.close();<br>        &#125;<br>            <span class="hljs-keyword">catch</span>(IOException e)&#123;<br>                System.out.println(e.toString());<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h3><p>OutputStream 类及其子类的对象表示一个字节输出流。OutputStream 类的常用子类如下。</p><ul><li>ByteArrayOutputStream 类：向内存缓冲区的字节数组中写数据。</li><li>FileOutputStream 类：向文件中写数据。</li><li>PipedOutputStream 类：连接到一个 PipedlntputStream（管道输入流）。</li><li>ObjectOutputStream 类：将对象序列化。</li></ul><p>利用 OutputStream 类的方法可以从流中写入一个或一批字节。表 2 列出了 OutputStream 类的常用方法。</p><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>void write(int b)</td><td>向输出流写入一个字节。这里的参数是 int 类型，但是它允许使用表达式，而不用强制转换成 byte 类型。为了提高 I/O 操作的效率，建议尽量使用 write() 方法的另外两种形式</td></tr><tr><td>void write(byte[] b)</td><td>把参数 b 指定的字节数组中的所有字节写到输出流中</td></tr><tr><td>void write(byte[] b,int off,int len)</td><td>把参数 b 指定的字节数组中的若干字节写到输出流中。其中，off 指定字节数组中的起始下标，len表示元素个数</td></tr><tr><td>void close()</td><td>关闭输出流。写操作完成后，应该关闭输出流。系统将会释放与这个输出流相关的资源。注意，OutputStream 类本身的 close() 方法不执行任何操作，但是它的许多子类重写了close() 方法</td></tr><tr><td>void flush()</td><td>为了提高效率，在向输出流中写入数据时，数据一般会先保存到内存缓冲区中，只有当缓冲区中的数据达到一定程度时，缓冲区中的数据才会被写入输出流中。使用 flush() 方法则可以强制将缓冲区中的数据写入输出流， 并清空缓冲区</td></tr></tbody></table><h3 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h3><blockquote><p>Reader 类是所有字符流输入类的父类，该类定义了许多方法，这些方法对所有子类都是有效的。</p></blockquote><p>Reader类的常用子类如下。</p><ul><li>CharArrayReader 类：将字符数组转换为字符输入流，从中读取字符。</li><li>StringReader 类：将字符串转换为字符输入流，从中读取字符。</li><li><strong>BufferedReader</strong> 类：为其他字符输入流提供读缓冲区。</li><li>PipedReader 类：连接到一个 PipedWriter。</li><li><strong>InputStreamReader</strong> 类：将字节输入流转换为字符输入流，可以指定字符编码。</li></ul><blockquote><p>与 InputStream 类相同，在 Reader 类中也包含 close()、mark()、skip() 和 reset() 等方法，这些方法可以参考 InputStream 类的方法。下面主要介绍 Reader 类中的 read() 方法，如表 1 所示。</p></blockquote><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td><code>int read()</code></td><td>从输入流中读取一个字符，并把它转换为 0~65535 的整数。如果返回 -1， 则表示已经到了输入流的末尾。为了提高 I/O 操作的效率，建议尽量使用下面两种 read() 方法</td></tr><tr><td><code>int read(char[] cbuf)</code></td><td>从输入流中读取若干个字符，并把它们保存到参数 cbuf 指定的字符数组中。 该方法返回读取的字符数，如果返回 -1，则表示已经到了输入流的末尾</td></tr><tr><td><code>int read(char[] cbuf,int off,int len)</code></td><td>从输入流中读取若干个字符，并把它们保存到参数 cbuf 指定的字符数组中。其中， off 指定在字符数组中开始保存数据的起始下标，len 指定读取的字符数。该方法返 回实际读取的字符数，如果返回 -1，则表示已经到了输入流的末尾</td></tr></tbody></table><h4 id="字符文件输入流"><a href="#字符文件输入流" class="headerlink" title="字符文件输入流"></a>字符文件输入流</h4><p>为了读取方便，Java 提供了用来读取字符文件的便捷类——FileReader。该类的构造方法有如下两种重载形式。</p><ol><li>FileReader(File file)：在给定要读取数据的文件的情况下创建一个新的 FileReader 对象。其中，file 表示要从中读取数据的文件。</li><li>FileReader(String fileName)：在给定从中读取数据的文件名的情况下创建一个新 FileReader 对象。其中，fileName 表示要从中读取数据的文件的名称，表示的是一个文件的完整路径。</li></ol><blockquote><p>在用该类的构造方法创建 FileReader 读取对象时，默认的字符编码及字节缓冲区大小都是由系统设定的。要自己指定这些值，可以在 FilelnputStream 上构造一个 InputStreamReader。</p></blockquote><blockquote><p>注意：在创建 FileReader 对象时可能会引发一个 FileNotFoundException 异常，因此需要使用 try catch 语句捕获该异常。</p><p>字符流和字节流的操作步骤相同，都是首先创建输入流或输出流对象，即建立连接管道，建立完成后进行读或写操作，最后关闭输入/输出流通道。</p></blockquote><p>实例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test12</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;D:/myJava/HelloJava.java&quot;</span>); <span class="hljs-comment">// 创建FileReader对象</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            System.out.println(<span class="hljs-string">&quot;D:\\myJava\\HelloJava.java文件内容如下：&quot;</span>);<br>            <span class="hljs-keyword">while</span> ((i = fr.read()) != -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 循环读取</span><br>                System.out.print((<span class="hljs-type">char</span>) i); <span class="hljs-comment">// 将读取的内容强制转换为char类型</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.print(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fr.close(); <span class="hljs-comment">// 关闭对象</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch8;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriterTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:/data.dat&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello java 521&quot;</span>;<br>        fw.write(s);<br>        fw.close();<br>        System.out.println(<span class="hljs-string">&quot;写入成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如上述代码，首先创建了 FileReader 字符输入流对象 fr，该对象指向 D:\myJava\HelloJava.java 文件，然后定义变量 i 来接收调用 read() 方法的返回值，即读取的字符。在 while 循环中，每次读取一个字符赋给整型变量 i，直到读取到文件末尾时退出循环（当输入流读取到文件末尾时，会返回值 -1）.</p></blockquote><h4 id="字符缓冲区输入流"><a href="#字符缓冲区输入流" class="headerlink" title="字符缓冲区输入流"></a>字符缓冲区输入流</h4><blockquote><p>BufferedReader 类主要用于辅助其他字符输入流，它带有缓冲区，可以先将一批数据读到内存缓冲区。接下来的读操作就可以直接从缓冲区中获取数据，而不需要每次都从数据源读取数据并进行字符编码转换，这样就可以提高数据的读取效率。</p></blockquote><blockquote><p>BufferedReader 类的构造方法有如下两种重载形式。</p></blockquote><ol><li>BufferedReader(Reader in)：创建一个 BufferedReader 来修饰参数 in 指定的字符输入流。</li><li>BufferedReader(Reader in,int size)：创建一个 BufferedReader 来修饰参数 in 指定的字符输入流，参数 size 则用于指定缓冲区的大小，单位为字符。</li></ol><blockquote><p>除了可以为字符输入流提供缓冲区以外，BufferedReader 还提供了 <code>readLine()</code> 方法，该方法<strong>返回包含该行内容的字符串</strong>，但该字符串中不包含任何终止符，如果已到达流末尾，则返回 null。readLine() 方法表示<strong>每次读取一行文本内容</strong>，当遇到换行（\n）、回车（\r）或回车后直接跟着换行标记符即可认为某行已终止。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;D:\\myJava\\book.txt&quot;</span>); <span class="hljs-comment">// 创建 FileReader 对象</span><br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr); <span class="hljs-comment">// 创建 BufferedReader 对象</span><br>            System.out.println(<span class="hljs-string">&quot;D:\\myJava\\book.txt 文件中的内容如下：&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">strLine</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span> ((strLine = br.readLine()) != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 循环读取每行数据</span><br>                System.out.println(strLine);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e1) &#123;<br>            e1.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fr.close(); <span class="hljs-comment">// 关闭 FileReader 对象</span><br>                br.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如上述代码，首先分别创建了名称为 fr 的 FileReader 对象和名称为 br 的 BufferedReader 对象，然后调用 BufferedReader 对象的 readLine() 方法逐行读取文件中的内容。如果读取的文件内容为 Null，即表明已经读取到文件尾部，此时退出循环不再进行读取操作。最后将字符文件输入流和带缓冲的字符输入流关闭.</p></blockquote><h3 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h3><blockquote><p>与 Reader 类相反，Writer 类是所有字符输出流的父类，该类中有许多方法，这些方法对继承该类的所有子类都是有效的。</p></blockquote><p>Writer 类的常用子类如下。</p><ul><li>CharArrayWriter 类：向内存缓冲区的字符数组写数据。</li><li>StringWriter 类：向内存缓冲区的字符串（StringBuffer）写数据。</li><li>BufferedWriter 类：为其他字符输出流提供写缓冲区。</li><li>PipedWriter 类：连接到一个 PipedReader。</li><li>OutputStreamReader 类：将字节输出流转换为字符输出流，可以指定字符编码。</li></ul><blockquote><p>与 OutputStream 类相同，Writer 类也包含 close()、flush() 等方法，这些方法可以参考 OutputStream 类的方法。下面主要介绍 Writer 类中的 write() 方法和 append() 方法，如表 2 所示。</p></blockquote><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>void write(int c)</td><td>向输出流中写入一个字符</td></tr><tr><td><code>void write(char[] cbuf)</code></td><td>把参数 cbuf 指定的字符数组中的所有字符写到输出流中</td></tr><tr><td><code>void write(char[] cbuf,int off,int len)</code></td><td>把参数 cbuf 指定的字符数组中的若干字符写到输出流中。其中，off 指定 字符数组中的起始下标，len 表示元素个数</td></tr><tr><td><code>void write(String str)</code></td><td>向输出流中写入一个字符串</td></tr><tr><td><code>void write(String str, int off,int len)</code></td><td>向输出流中写入一个字符串中的部分字符。其中，off 指定字符串中的起始偏移量，len 表示字符个数</td></tr><tr><td><code>append(char c)</code></td><td>将参数 c 指定的字符添加到输出流中</td></tr><tr><td>append(charSequence esq)</td><td>将参数 esq 指定的字符序列添加到输出流中</td></tr><tr><td>append(charSequence esq,int start,int end)</td><td>将参数 esq 指定的字符序列的子序列添加到输出流中。其中，start 指定 子序列的第一个字符的索引，end 指定子序列中最后一个字符后面的字符 的索引，也就是说子序列的内容包含 start 索引处的字符，但不包括 end 索引处的字符</td></tr></tbody></table><blockquote><p>注意：Writer 类所有的方法在出错的情况下都会引发 <strong>IOException</strong> 异常。关闭一个流后，再对其进行任何操作都会产生错误。</p></blockquote><h4 id="字符文件输出流"><a href="#字符文件输出流" class="headerlink" title="字符文件输出流"></a>字符文件输出流</h4><blockquote><p>Java 提供了写入字符文件的便捷类——FileWriter，该类的构造方法有如下 4 种重载形式。</p></blockquote><ol><li>FileWriter(File file)：在指定 File 对象的情况下构造一个 FileWriter 对象。其中，file 表示要写入数据的 File 对象。</li><li>FileWriter(File file,boolean append)：在指定 File 对象的情况下构造一个 FileWriter 对象，如果 append 的值为 true，则将字节写入文件末尾，而不是写入文件开始处。</li><li>FileWriter(String fileName)：在指定文件名的情况下构造一个 FileWriter 对象。其中，fileName 表示要写入字符的文件名，表示的是完整路径。</li><li>FileWriter(String fileName,boolean append)：在指定文件名以及要写入文件的位置的情况下构造 FileWriter 对象。其中，append 是一个 boolean 值，如果为 true，则将数据写入文件末尾，而不是文件开始处。</li></ol><blockquote><p>在创建 FileWriter 对象时，默认字符编码和默认字节缓冲区大小都是由系统设定的。要自己指定这些值，可以在 FileOutputStream 上构造一个 OutputStreamWriter 对象。FileWriter 类的创建不依赖于文件存在与否，如果关联文件不存在，则会自动生成一个新的文件。在创建文件之前，FileWriter 将在创建对象时打开它作为输出。如果试图打开一个只读文件，将引发一个 IOException 异常。</p></blockquote><blockquote><p>注意：在创建 FileWriter 对象时可能会引发 IOException 或 SecurityException 异常，因此需要使用 try catch 语句捕获该异常。编写一个程序，将用户输入的 4 个字符串保存到 D:\myJava\book.txt 文件中。在这里使用 FileWriter 类中的 write() 方法循环向指定文件中写入数据，实现代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test13</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\myJava\\book.txt&quot;</span>); <span class="hljs-comment">// 创建FileWriter对象</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>                System.out.println(<span class="hljs-string">&quot;请输入第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;个字符串：&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> input.next(); <span class="hljs-comment">// 读取输入的名称</span><br>                fw.write(name + <span class="hljs-string">&quot;\r\n&quot;</span>); <span class="hljs-comment">// 循环写入文件</span><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;录入完成！&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fw.close(); <span class="hljs-comment">// 关闭对象</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如上述代码，首先创建了一个指向 D:\myJava\book.txt 文件的字符文件输出流对象 fw，然后使用 for 循环录入 4 个字符串，并调用 write() 方法将字符串写入到指定的文件中。最后在 finally 语句中关闭字符文件输出流。</p></blockquote><h4 id="字符缓冲区输出流"><a href="#字符缓冲区输出流" class="headerlink" title="字符缓冲区输出流"></a>字符缓冲区输出流</h4><blockquote><p>BufferedWriter 类主要用于辅助其他字符输出流，它同样带有缓冲区，可以先将一批数据写入缓冲区，当缓冲区满了以后，再将缓冲区的数据一次性写到字符输出流，其目的是为了提高数据的写效率。</p></blockquote><p>BufferedWriter 类的构造方法有如下两种重载形式。</p><ol><li>BufferedWriter(Writer out)：创建一个 BufferedWriter 来修饰参数 out 指定的字符输出流。</li><li>BufferedWriter(Writer out,int size)：创建一个 BufferedWriter 来修饰参数 out 指定的字符输出流，参数 size 则用于指定缓冲区的大小，单位为字符。</li></ol><blockquote><p>该类除了可以给字符输出流提供缓冲区之外，还提供了一个新的方法 <code>newLine()</code>，该方法用于写入一个行分隔符。行分隔符字符串由系统属性 line.separator 定义，并且不一定是单个新行（\n）符。</p><p>提示：BufferedWriter 类的使用与 FileWriter 类相同，这里不再重述。</p></blockquote><h3 id="文件随机读写"><a href="#文件随机读写" class="headerlink" title="文件随机读写"></a>文件随机读写</h3><p>建立随机访问文件流对象RandomAccessFile类的构造方法有:</p><ul><li><p><code>RandomAccess File(File file, String mode)</code>:</p><p>使用文件对象file和访问方式mode创建随机访问文件对象。</p></li><li><p><code>RandomAccessFile(String filename, String mode)</code>:</p><p>使用文件绝对名称filename和访问方式mode创建随机访问文件对象。</p><blockquote><p>其中，mode为文件访问的方式，主要有<strong>“r”和“rw”</strong>两种形式。如果mode值为<strong>“r”</strong>，则文件<strong>只能读</strong>，对此文件的任何写操作都会引发<strong>IOException</strong>异常;如果mode值为“<strong>rw</strong>”，且文件已存在，则可以对该文件进行<strong>读/写操作</strong>，如果文件不存在，则会新建一个文件。</p></blockquote></li></ul><h4 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h4><p>在<strong>RandomAccessFile</strong>类中同时提供了文件的读和写操作方法，主要包括<strong>读/写基本数据类型的数据</strong>、<strong>读取一行文本或读取指定长度的字节数</strong>等。</p><h4 id="文件指针操作"><a href="#文件指针操作" class="headerlink" title="文件指针操作"></a>文件指针操作</h4><p>文件指针决定了对文件进行读/写操作的位置，文件指针位置的改变通常有两种方式:<strong>隐式移动</strong>和<strong>显示移动</strong>。通常的读/写操作会隐式移动文件指针，显示移动可通过以下一些方法实现:</p><ol><li>public long <code>getFilePointer()</code> throws IOException:<strong>返回</strong>文件指针的<strong>当前字节位置</strong>。</li><li>public void <code>seek(long pos)</code> throws I0Exception:将文件指针<strong>定位到一个绝对位置pos字节处</strong>。</li><li>public long <code>length()</code> throws IOException:<strong>返回</strong>文件的<strong>长度</strong>，单位<strong>字节</strong>。</li><li>public int <code>skipBytes(int n)</code> throws IOException:将文件指针相对于当前位置<strong>向文件尾方向移动n个字节</strong>，若<strong>n为负值</strong>，则<strong>不移动</strong>。</li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:/info.dat&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(sFile, <span class="hljs-string">&quot;rw&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                rf.writeDouble(i * <span class="hljs-number">1.414</span>);<br>            rf.close();<br>            rf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(sFile, <span class="hljs-string">&quot;rw&quot;</span>);<br><span class="hljs-comment">//移动文件指针到写入的第6个数据位置，重新写入数据47.0001</span><br>            rf.seek(<span class="hljs-number">5</span> * <span class="hljs-number">8</span>);<br>            rf.writeDouble(<span class="hljs-number">47.0001</span>);<br>            rf.close();<br>            rf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(sFile, <span class="hljs-string">&quot;r&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                System.out.println(<span class="hljs-string">&quot;Value &quot;</span> + i + <span class="hljs-string">&quot;: &quot;</span> + rf.readDouble());<br>            rf.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="目录和文件管理"><a href="#目录和文件管理" class="headerlink" title="目录和文件管理"></a>目录和文件管理</h2><blockquote><p>在 <a href="http://alleyf.github.io/">Java</a> 中，File 类是 java.io 包中唯一代表磁盘文件本身的对象，也就是说，如果希望在程序中操作文件和目录，则都可以通过 File 类来完成。File 类定义了一些方法来操作文件，如新建、删除、重命名文件和目录等。</p></blockquote><blockquote><p>File 类不能访问文件内容本身，如果需要访问文件内容本身，则需要使用输入/输出流。File 类提供了如下三种形式构造方法。</p></blockquote><ol><li>File(String path)：如果 path 是实际存在的路径，则该 File 对象表示的是目录；如果 path 是文件名，则该 File 对象表示的是文件。</li><li>File(String path, String name)：path 是路径名，name 是文件名。</li><li>File(File dir, String name)：dir 是路径对象，name 是文件名。</li></ol><p>使用任意一个构造方法都可以创建一个 File 对象，然后调用其提供的方法对文件进行操作。在表 1 中列出了 File 类的常用方法及说明。</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean canRead()</td><td>测试应用程序是否能从指定的文件中进行读取</td></tr><tr><td>boolean canWrite()</td><td>测试应用程序是否能写当前文件</td></tr><tr><td>boolean delete()</td><td>删除当前对象指定的文件</td></tr><tr><td>boolean exists()</td><td>测试当前 File 是否存在</td></tr><tr><td>String getAbsolutePath()</td><td>返回由该对象表示的文件的绝对路径名</td></tr><tr><td>String getName()</td><td>返回表示当前对象的文件名或路径名（如果是路径，则返回最后一级子路径名）</td></tr><tr><td>String getParent()</td><td>返回当前 File 对象所对应目录（最后一级子目录）的父目录名</td></tr><tr><td>boolean isAbsolute()</td><td>测试当前 File 对象表示的文件是否为一个绝对路径名。该方法消除了不同平台的差异，可以直接判断 file 对象是否为绝对路径。在 UNIX/Linux/BSD 等系统上，如果路径名开头是一条斜线<code>/</code>，则表明该 File 对象对应一个绝对路径；在 Windows 等系统上，如果路径开头是盘符，则说明它是一个绝对路径。</td></tr><tr><td>boolean isDirectory()</td><td>测试当前 File 对象表示的文件是否为一个路径</td></tr><tr><td>boolean isFile()</td><td>测试当前 File 对象表示的文件是否为一个“普通”文件</td></tr><tr><td>long lastModified()</td><td>返回当前 File 对象表示的文件最后修改的时间</td></tr><tr><td>long length()</td><td>返回当前 File 对象表示的文件长度</td></tr><tr><td>String[] list()</td><td>返回当前 File 对象指定的路径文件列表</td></tr><tr><td>String[] list(FilenameFilter)</td><td>返回当前 File 对象指定的目录中满足指定过滤器的文件列表</td></tr><tr><td>boolean mkdir()</td><td>创建一个目录，它的路径名由当前 File 对象指定</td></tr><tr><td>boolean mkdirs()</td><td>创建一个目录，它的路径名由当前 File 对象指定</td></tr><tr><td>boolean renameTo(File)</td><td>将当前 File 对象指定的文件更名为给定参数 File 指定的路径名</td></tr></tbody></table><p>File 类中有以下两个常用常量：</p><ul><li>public static final String pathSeparator：指的是分隔连续多个路径字符串的分隔符，Windows 下指<code>;</code>。例如 <code>java -cp test.jar;abc.jar HelloWorld</code>。</li><li>public static final String separator：用来分隔同一个路径字符串中的目录的，Windows 下指<code>/</code>。例如 <code>C:/Program Files/Common Files</code>。</li></ul><blockquote><p>注意：可以看到 File 类的常量定义的命名规则不符合标准命名规则，常量名没有全部大写，这是因为 Java 的发展经过了一段相当长的时间，而命名规范也是逐步形成的，File 类出现较早，所以当时并没有对命名规范有严格的要求，这些都属于 Java 的历史遗留问题。</p></blockquote><blockquote><p>Windows 的路径分隔符使用反斜线“\”，而 Java 程序中的反斜线表示转义字符，所以如果需要在 Windows 的路径下包括反斜线，则应该使用两条反斜线或直接使用斜线“/”也可以。Java 程序支持将斜线当成平台无关的路径分隔符。</p></blockquote><p>假设在 Windows 操作系统中有一文件 <code>D:\javaspace\hello.java</code>，在 Java 中使用的时候，其路径的写法应该为 <code>D:/javaspace/hello.java</code> 或者 <code>D:\\javaspace\\hello.java</code>。</p><blockquote><p>java.io包中的File类提供了与具体平台无关的用于管理文件和目录(文件夹)的操作方法，通过调用这些方法可以用来<strong>获取路径、目录及文件的相关信息</strong>，并对它们进行<strong>创建、删除、重命名</strong>等管理工作。</p></blockquote><ol><li>目录管理</li></ol><ul><li><code>public boolean mkdir()</code>:根据抽象路径名<strong>创建目录</strong>。</li><li><code>public String [] list()</code>:<strong>返回</strong>当前抽象路径下的<strong>文件名和目录名</strong>。</li></ul><ol start="2"><li>文件管理</li></ol><p>（1）<strong>创建</strong>一个<strong>新的文件对象</strong></p><blockquote><p>File类提供了用来创建文件或目录对象的构造方法:</p></blockquote><p>​    <code>public File(String path)</code>:通过给定的路径名来创建文件对象。</p><p>​    public File(String path, String name):使用父路径(目录)字符串和子抽象路径(子目录)字符串创建文件对象。</p><p>（2）有关<strong>文件名和目录名</strong>的操作<br>    public String <code>getName()</code>:返回文件的名称。<br>    public String <code>getPath()</code>:返回文件的路径名。<br>    public String <code>getAbsolutePath()</code>:返回文件绝对路径名。<br>    public String <code>getParent()</code>:返回当前文件的上一级目录名。<br>    public boolean <code>renameTo(File dest)</code>:将抽象路径文件名重命名为给定的新文件名。</p><p>（3）<strong>获取文件属性</strong>信息<br>    public boolean <code>exists()</code>:测试抽象路径表示的文件是否存在。<br>    public boolean <code>canRead()</code>:测试抽象路径表示的文件是否可读。<br>    public boolean <code>canWrite()</code>:测试抽象路径表示的文件是否可写。</p><p>​    public boolean <code>isFile()</code>:测试抽象路径表示的文件是否为正常文件(非目录).<br>​    public boolean <code>isDirectory()</code>:测试抽象路径表示的是否为目录。<br>​    public long <code>lastModified()</code>:返回抽象路径表示的文件最近一次被修改的时间。</p><p>（4）<strong>删除</strong>文件<br>    public boolean <code>delete()</code>:删除抽象路径表示的文件或目录。如果<strong>删除的是目录，则要求目录为空，否则无法删除</strong>。</p><p>示例：重命名目录下的所有文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rename</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/mydir&quot;</span>);<br>        File cur, dest;<br>        String temp;<br>        <span class="hljs-keyword">if</span> (dir.isDirectory()) &#123;<br>            String[] list = dir.list();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.length; i++) &#123;<br>                cur = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, list[i]);<br>                <span class="hljs-keyword">if</span> (cur.isFile()) &#123;<br>                    temp = cur.getName();<br>                    dest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, temp + <span class="hljs-string">&quot;.bak&quot;</span>);<br>                    <span class="hljs-keyword">if</span>(cur.renameTo(dest))<br>                        System.out.println(<span class="hljs-string">&quot;Finished!&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="第八章、网络编程"><a href="#第八章、网络编程" class="headerlink" title="第八章、网络编程"></a>第八章、网络编程</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote><p>Java语言是运用于网络环境的一种编程语言，Java的程序要能在网络上的不同地方运行，这样就要求Java程序执行时，必须有能力取得网络上的各种资源和数据，和服务器建立各种传输通道，把自己的数据传输到网络各处。Java为我们提供了强有力的网络功能。Java所提供的网络功能可以分为三类:用<strong>URL访问网络资源、Socket方式、数据报方式</strong>。</p></blockquote><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p><strong>网络资源定位器</strong>(URL, Uniform ResourceLocator)可以指向网络上的各种资源。通过网络资源定位器可以获取网络上的资源。</p><p>网络资源不仅可以包括网络上各种简单对象:例如网络上的路径和文件(Web页、文本文件、图形(像)文件、声音片断)等;还可以是一些复杂的对象:如<strong>数据库或搜索引擎</strong>。<br>URL:是WWW资源统一资源定位器的缩写。他规范了WWW资源网络定位地址的表示方法。</p><p>网络资源定位器通常有5个部分组成:<code>协议、主机名、端口号、文件和引用</code>。<br>URL的基本表示格式是:<br><code>Protocol://hos tname:/resourcename#anchor</code><br>Protocol：使用的协议，它可以是<strong>http、ftp、news、telnet</strong>等。<br>Hostname:主机名，指定域名服务器(DNS)能访问到的WWW服务的计算机，例<a href="http://www.sun.com/">www.sun.com</a> </p><p>Port:是可选的，表示所连接的端口号，如缺省，将连接到协议缺省的端口（80）。<br>Resourcename:资源名，是主机上能访问到的目录或文件。<br>Anchor:标记，是可选的。他指定文件中有特定标记的位置。</p><h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><p>TCP，<strong>传输控制协议</strong>(Transmission ControlProtocol)，是<strong>面向连接</strong>的通信协议。使用TCP协议进行数据传输时，两个进程之间会建立一个连接，数据以流的形式顺序传输。<br>UDP，<strong>用户数据协议</strong>(User Datagram Protocol) ，是<strong>无连接</strong>通信协议。使用UDP协议进行数据传输时，两个进程之间不建立特定的连接，不对数据到达的顺序进行检查。</p><blockquote><p>在互联网上进行数据传输，多用TCP和UDP协议，它们传输的都是一个<strong>byte stream/ 字节型</strong>的数据流。</p></blockquote><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ul><li><p>Socket是网络驱动层提供给应用程序编程的<strong>接口和一种机制</strong>;</p></li><li><p>Socket在应用程序中创建，通过一种绑定机制与驱动程序建立关系，告诉自己所对应的<strong>IP和Port</strong>。</p><blockquote><p>可以把Socket比喻成一个港口码头，应用程序只要把货物放到港口码头上，就算完成了货物的运送。应用程序只需等待货物到达码头后，将货物取走;</p></blockquote></li></ul><p><code>Socket数据发送过程</code></p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221108164721552.png" alt="image-20221108164721552" style="zoom:50%;" /><p><code>Socket数据接收过程</code></p><img src="https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20221108164806405.png" alt="image-20221108164806405" style="zoom:50%;" /><blockquote><p>Java中网络编程类位于java. net包中。很多应用程序需要可靠的、按顺序的数据传输，也有的应用程序不需要，因此在设计网络程序时应正确选择网络类。</p></blockquote><p><code>URL、URLConnection、 Socket和ServerSocket</code>类是基于TCP协议的;<br><strong>Socket</strong>类用于TCP通信的<strong>服务器和和客户端</strong>。<br><strong>ServerSocket</strong>类用于TCP通信的<strong>服务器端</strong>。<br><code>DatagramPacket、DatagramSocket</code>和<code>MulticastSocket</code> 类是基于UDP协议的。<br><strong>DatagramSocket</strong>类用于<strong>UDP通信</strong>。</p><h2 id="TCP网络程序的工作原理"><a href="#TCP网络程序的工作原理" class="headerlink" title="TCP网络程序的工作原理"></a>TCP网络程序的工作原理</h2><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108165622839.png" alt="image-20221108165622839" style="zoom:50%;" /><h3 id="服务端和客户端交互过程"><a href="#服务端和客户端交互过程" class="headerlink" title="服务端和客户端交互过程"></a>服务端和客户端交互过程</h3><ol><li><strong>服务器端</strong>创建一个<strong>ServerSocket</strong>,然后调用<strong>accept方法</strong>等待客户来连接;</li><li><strong>客户端</strong>程序创建一个<strong>Socket</strong>并请求与服务器建立连接;</li><li><strong>服务器端</strong>接收客户的连接请求，并<strong>创建</strong>一个新的<strong>Socket</strong>与该客户建立专线连接;</li><li>建立了连接的两个Socket在一个<strong>单独的线程</strong>(<strong>由服务器程序创建</strong>)上对话;</li><li><strong>服务器</strong>开始等待新的连接请求，当新的连接请求到达时，重复步骤2-5的过程。</li></ol><h4 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h4><p>InetAddress是用于表示计算机IP地址的一个类，而在日常应用中的计算机地址是用“192.168. 0.1”、www. sina. com. cn等字符串格式来表示的。<br><code>getByName (String host)</code> 方法:</p><p>通过<strong>域名</strong>来构造类InetAddress的实例对象<br><code>getByAddress (byte[] addr)</code> 方法：</p><p>通过<strong>4个字节的网络地址</strong>构造类InetAddress的实例对象</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch9;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InetAddressTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;fcsy.fit&quot;</span>;<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">ts</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ts = InetAddress.getByName(dname);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;<br>            System.err.println(e);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ts != <span class="hljs-literal">null</span>)<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;The IP address is :&quot;</span> + ts.getHostAddress());<br>            System.out.println(<span class="hljs-string">&quot;The host address is :&quot;</span>+ts.getHostName());<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;can not access &quot;</span>+ dname);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ServerSocket"><a href="#ServerSocket" class="headerlink" title="ServerSocket"></a>ServerSocket</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>public <code>ServerSocket()</code> ;<br>public <code>ServerSocket(int port)</code> ;绑定到指定端口，连接队列默认为50<br>public <code>ServerSocket (int port, int backlog)</code> ;指定最大连接队列<br>public ServerSocket(int port, int backlog, inetAddress bindAddr) ;<br><code>close()</code>方法;<br><code>accept ()</code>方法;</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108171917963.png" alt="image-20221108171917963" style="zoom:50%;" /><h4 id="ServerSocket常用方法"><a href="#ServerSocket常用方法" class="headerlink" title="ServerSocket常用方法"></a>ServerSocket常用方法</h4><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108172034904.png" alt="image-20221108172034904" style="zoom:50%;" /><h3 id="Socket-1"><a href="#Socket-1" class="headerlink" title="Socket"></a>Socket</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p><code>Socket()</code> ;<br><code>Socket (String host, int port)</code> ;<br><code>Socket (InetAddress addr, int port)</code> ; .<br><code>Socket (String host, int port, InetAddress localaddr, int localPort)</code> ;<br>Socket (InetAddress addr, int port, InetAddress localaddr, int localPort) ;<br><code>getInputStream</code>和<code>getOutputStream</code>方法</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108172711073.png" alt="image-20221108172711073" style="zoom:50%;" /><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108172233442.png" alt="image-20221108172233442" style="zoom:50%;" /><p>示例：</p><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch9;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">5250</span>);<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> s.accept();<br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> socket.getOutputStream();<br>                <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>                dos.writeUTF(<span class="hljs-string">&quot;你好，客户端地址信息：&quot;</span>+socket.getInetAddress()+<br>                        <span class="hljs-string">&quot;\t客户端通信端口号：&quot;</span>+socket.getPort());<br>                dos.writeUTF(<span class="hljs-string">&quot;再见!&quot;</span>);<br>                dos.close();<br>                socket.close();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.err.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch9;<br><br><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">5250</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> c.getInputStream();<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            System.out.println(dis.readUTF());<br>            System.out.println(dis.readUTF());<br>            dis.close();<br>            c.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.err.println(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="TCP实战演练"><a href="#TCP实战演练" class="headerlink" title="TCP实战演练"></a>TCP实战演练</h2><ol><li><strong>简单一对一聊天室（单线程）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">package</span> ch9;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> s.getInputStream();<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> s.getOutputStream();<br>            <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(is);<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(os);<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>            String info;<br><br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                info = dis.readUTF();<br>                System.out.println(<span class="hljs-string">&quot;对方说：&quot;</span> + info);<br>                <span class="hljs-keyword">if</span> (info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;<br>                info = br.readLine();<br>                dos.writeUTF(info);<br>                <span class="hljs-keyword">if</span> (info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;&#125;<br>            dis.close();<br>            dos.close();<br>            s.close();<br>            serverSocket.close();<br>        &#125;<span class="hljs-keyword">catch</span>(SocketException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;网络连接异常，程序退出&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.err.println(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">package</span> ch9;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8888</span>);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">ic</span> <span class="hljs-operator">=</span> c.getInputStream();<br>            <span class="hljs-type">OutputStream</span> <span class="hljs-variable">oc</span> <span class="hljs-operator">=</span> c.getOutputStream();<br>            <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">icr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dic</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(ic);<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">doc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(oc);<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(icr);<br>            String info;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                info = br.readLine();<br>                doc.writeUTF(info);<br>                <span class="hljs-keyword">if</span> (info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;<br>                info = dic.readUTF();<br>                System.out.println(<span class="hljs-string">&quot;对方说：&quot;</span> + info);<br>                <span class="hljs-keyword">if</span> (info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            dic.close();<br>            doc.close();<br>            c.close();<br>        &#125;<span class="hljs-keyword">catch</span>(SocketException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;网络连接异常，程序退出&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            System.err.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>自由聊天室（多线程）</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//服务端</span><br><span class="hljs-keyword">package</span> ch10;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatRoomServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ServerSocket</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">8888</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> s.accept();<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(s1.getOutputStream());<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(s1.getInputStream());<br><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReader</span>(dis), <span class="hljs-string">&quot;reader&quot;</span>);<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SeverWriter</span>(dos),<span class="hljs-string">&quot;writer&quot;</span>);<br>            reader.start();<br>            writer.start();<br><br><br>        &#125;<span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;网络连接失败&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> DataInputStream dis;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReader</span><span class="hljs-params">(DataInputStream dis)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dis = dis;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        String info;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                info = dis.readUTF();<br>                System.out.println(<span class="hljs-string">&quot;女朋友说：&quot;</span>+info);<br>                <span class="hljs-keyword">if</span>(info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                &#123;<br>                    System.out.println(<span class="hljs-string">&quot;你的臭宝已下线，拜拜了您&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeverWriter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> DataOutputStream dos;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SeverWriter</span><span class="hljs-params">(DataOutputStream dos)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dos = dos;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>        String info;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                info = br.readLine();<br>                dos.writeUTF(info);<br>                <span class="hljs-keyword">if</span>(info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                &#123;<br>                    System.out.println(<span class="hljs-string">&quot;自己下线，拜拜了您&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;e.printStackTrace();&#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//客户端</span><br><span class="hljs-keyword">package</span> ch10;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.ServerSocket;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatRoomClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">8888</span>);<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">dos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(c.getOutputStream());<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(c.getInputStream());<br><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientReader</span>(dis),<span class="hljs-string">&quot;reader&quot;</span>);<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientWriter</span>(dos),<span class="hljs-string">&quot;writer&quot;</span>);<br>            reader.start();<br>            writer.start();<br><br>        &#125;<span class="hljs-keyword">catch</span> (SocketException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;网络连接失败&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            System.out.println(e.toString());<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientReader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    DataInputStream dis;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientReader</span><span class="hljs-params">(DataInputStream dis)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dis = dis;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        String info;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                info = dis.readUTF();<br>                System.out.println(<span class="hljs-string">&quot;男朋友说：&quot;</span>+info);<br>                <span class="hljs-keyword">if</span>(info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                &#123;<br>                    System.out.println(<span class="hljs-string">&quot;您的臭宝已下线，拜拜了您&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientWriter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    DataOutputStream dos;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClientWriter</span><span class="hljs-params">(DataOutputStream dos)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dos = dos;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">icr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(icr);<br>        String info;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>            &#123;<br>                info = br.readLine();<br>                dos.writeUTF(info);<br>                <span class="hljs-keyword">if</span>(info.equals(<span class="hljs-string">&quot;bye&quot;</span>))<br>                &#123;<br>                    System.out.println(<span class="hljs-string">&quot;自己下线，拜拜了您&quot;</span>);<br>                    System.exit(<span class="hljs-number">0</span>);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;e.printStackTrace();&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在TCP网络上传递对象"><a href="#在TCP网络上传递对象" class="headerlink" title="在TCP网络上传递对象"></a>在TCP网络上传递对象</h2><p><code>Object InputStream</code>和<code>0bject OutputStream</code>可以使用<code>0bject InputStream</code>和<code>Object OutputStream</code>来包装底层网络字节流，TCP服务器和TCP客户端之间就可以<strong>传递对象类型的数据</strong>，实现从<strong>底层输入流</strong>中<strong>读取对象类型的数据</strong>和将对象类型的数据<strong>写入到底层输出流</strong>。<code>RMI (remote method invocation)</code> 编程:是java进行分布式编程的基础。</p><img src="C:\Users\alleyf\AppData\Roaming\Typora\typora-user-images\image-20221108214605083.png" alt="image-20221108214605083" style="zoom:50%;" /><h2 id="UDP网络程序的工作原理"><a href="#UDP网络程序的工作原理" class="headerlink" title="UDP网络程序的工作原理"></a>UDP网络程序的工作原理</h2><blockquote><p><strong>用户数据报协议UDP (user datagram protocol)<strong>是一个</strong>无连接的、发送独立数据包</strong>的协议，它不保证数据按顺序传送和正确到达。<strong>数据报Socket</strong>又称为<strong>UDP套接字</strong>，它无需建立、拆除连接，而是直接将信息打包传向指定的目的地，使用简单，占用资源少，适合于断续、非实时通信。利用UDP通信的<code>两个程序是平等的</code>，<code>没有主次之分</code>，两个程序的代码可以完全一样。</p></blockquote><h3 id="DatagramSocket类"><a href="#DatagramSocket类" class="headerlink" title="DatagramSocket类"></a>DatagramSocket类</h3><p>构造函数:<br>Public <code>DatagramSocket ()</code>；<br>Public <code>DatagramSocket(int port)</code> ;<br>Public <code>DatagramSocket(int port, InetAddress laddr)</code> ;<br><code>Close()</code>方法;<br><code>Send (DatagramPacket p)</code>方法；<br><code>Receive (DatagramPacket p)</code> 方法；</p><h3 id="DatagramPacket类"><a href="#DatagramPacket类" class="headerlink" title="DatagramPacket类"></a>DatagramPacket类</h3><blockquote><p>如果把<code>DatagramSocket</code>比作创建的<strong>港口码头</strong>，那么<code>DatagramPacket</code>就是发送和接收数据的<strong>集装箱</strong>。</p></blockquote><p>构造函数</p><p>Public <code>DatagramPacket (byte[] buf, int length)</code> ;<br>Public <code>DatagramPacket (byte[] buf, int length, InetAddress address, int port)</code> ;<br><code>getInetAddress ()</code>和<code>getPort()</code>方法;<br><code>Byte[] getData ()</code>和<code>getLength()</code>方法;</p><h3 id="UDP网络程序的编写步骤"><a href="#UDP网络程序的编写步骤" class="headerlink" title="UDP网络程序的编写步骤"></a>UDP网络程序的编写步骤</h3><p>第一步：服务端和客户端创建<strong>DatagramSocket实例对象</strong>，服务端（接受方）需要指定<strong>监听端口号</strong>，并且<strong>创建字节接收缓存数组</strong>；定义服务端的<strong>发送内容</strong>；</p><p>第二步：服务端和客户端创建<strong>DatagramPacket实例对象</strong>，构造函数指定各自参数（包括<strong>发送/接收字节缓存数组、字节长度</strong>），客户端还要传入发送目标的<strong>主机号/域名（实例化为InetAddress对象）和端口号</strong>；</p><p>第三步：调用客户端的**send()<strong>和服务端的</strong>receive()**方法：<br><code>DatagramSocket.send (DatagramPacket p)</code>;<br><code>DatagramSocket.receive (DatagramPacket p)</code>;<br>第四步：<code>DatagramSocket.close()</code>;</p><h2 id="UDP实战演练"><a href="#UDP实战演练" class="headerlink" title="UDP实战演练"></a>UDP实战演练</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//服务端（接收方）</span><br><span class="hljs-keyword">package</span> ch10;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpRecv</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">8888</span>);<br>            <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf,buf.length);<br>            ds.receive(dp);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">strrecv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(dp.getData(),<span class="hljs-number">0</span>,dp.getLength()) + <span class="hljs-string">&quot; from &quot;</span> + dp.getAddress().getHostAddress()<br>                    + <span class="hljs-string">&quot;:&quot;</span> + dp.getPort();<br>            System.out.println(strrecv);<br>            ds.close();<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">//客户端（发送方）</span><br><span class="hljs-keyword">package</span> ch10;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UdpSend</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java is so interesting &quot;</span>;<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(msg.getBytes(),msg.length(), InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>),<span class="hljs-number">8888</span>);<br>            ds.send(dp);<br>            ds.close();<br>        &#125;<span class="hljs-keyword">catch</span>(IOException e)&#123;<br>            System.err.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote><p>冒泡排序分为<strong>升序和降序</strong>两种方式，核心思想是<strong>两层for循环比较相邻</strong>前后的两个<strong>元素并交换次序</strong>，<strong>升序</strong>则将<strong>大</strong>的放在<strong>后面</strong>，<strong>降序</strong>则将<strong>小的</strong>放<strong>后面</strong>，<strong>内层循环上界</strong>随着<strong>外层循环变量</strong>的<strong>增大而减小</strong>。</p></blockquote><p><code>核心代码</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//升序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;i&lt; arr.length -<span class="hljs-number">1</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j&lt;arr.length-<span class="hljs-number">1</span>-i; j++)&#123;<br><span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>temp = arr[j];<br>arr[j] = arr[j+<span class="hljs-number">1</span>];<br>arr[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//降序</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;i&lt; arr.length -<span class="hljs-number">1</span>; i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j&lt;arr.length-<span class="hljs-number">1</span>-i; j++)&#123;<br><span class="hljs-keyword">if</span>(arr[j]&lt;arr[j+<span class="hljs-number">1</span>])&#123;<br>temp = arr[j];<br>arr[j] = arr[j+<span class="hljs-number">1</span>];<br>arr[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ch11;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BubleSortTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;Integer&gt; n = BubleSort();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : n)&#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Integer&gt; <span class="hljs-title function_">BubleSort</span><span class="hljs-params">()</span>&#123;<br>        ArrayList&lt;Integer&gt; n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            n.add(i);<br>            n.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt()%<span class="hljs-number">10</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n.size()-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n.size()-i-<span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span>(n.get(j)&gt;n.get(j+<span class="hljs-number">1</span>))<span class="hljs-comment">//升序</span><br>              <span class="hljs-comment">//if(n.get(j)&gt;n.get(j+1))降序</span><br>                &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> n.get(j);<br>                    n.set(j,n.get(j+<span class="hljs-number">1</span>));<br>                    n.set(j+<span class="hljs-number">1</span>,temp);<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NoteBook_notes</title>
    <link href="/2022/09/f049d1d71021.html"/>
    <url>/2022/09/f049d1d71021.html</url>
    
    <content type="html"><![CDATA[<h1 id="NoteBook"><a href="#NoteBook" class="headerlink" title="NoteBook"></a>NoteBook</h1><h2 id="1-notebook快捷键"><a href="#1-notebook快捷键" class="headerlink" title="1.notebook快捷键"></a>1.notebook快捷键</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><img src="https://ai-studio-static-online.cdn.bcebos.com/3a9f826518cb42e89965641e4eea9a289dbcce74862e4335ba8738d978e37fc2" alt="img" style="zoom: 50%;" /><h3 id="编辑模式快捷键"><a href="#编辑模式快捷键" class="headerlink" title="编辑模式快捷键"></a>编辑模式快捷键</h3><img src="https://ai-studio-static-online.cdn.bcebos.com/968cf800086a47129fdda653891c170a1c9b1248296747aeaa766bb5cef2932c" alt="img" style="zoom: 50%;" /><h2 id="2-持久化安装（安装到外部库文件夹）"><a href="#2-持久化安装（安装到外部库文件夹）" class="headerlink" title="2.持久化安装（安装到外部库文件夹）"></a>2.持久化安装（安装到外部库文件夹）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建文件夹</span><br>mkdir /home/aistudio/external-libraries <br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装BeautifulSoup4包到外部库</span><br>pip install beautifulsoup4 -t /home/aistudio/external-libraries<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">添加环境变量</span><br>import sys<br>sys.path.append(&#x27;/home/aistudio/external-libraries&#x27;)<br></code></pre></td></tr></table></figure><h2 id="3-Magic命令"><a href="#3-Magic命令" class="headerlink" title="3.Magic命令"></a>3.Magic命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#显示全部可用的Magic命令</span><br>%lsmagic<br><span class="hljs-comment">#%env：设置环境变量</span><br>%env OMP_NUM_THREADS=<span class="hljs-number">4</span><br><span class="hljs-comment">#使用Magic命令来统计运行时长</span><br><span class="hljs-keyword">import</span> random<br><br>%%timeit<br><br>prize = <span class="hljs-number">0</span> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    roll = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">if</span> roll%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        prize += roll<br>    <span class="hljs-keyword">else</span>:<br>        prize -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#直接嵌入可视化内容</span><br>%matplotlib inline<br>%config InlineBackend.figure_format = <span class="hljs-string">&#x27;retina&#x27;</span><br><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">300</span>)<br><span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>):<br>    plt.plot(x, np.sin(np.pi*x)*np.sin(<span class="hljs-number">2</span>*w*np.pi*x))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#%run或者二!python均可执行指定路径的python文件</span><br>%run <span class="hljs-built_in">print</span>.py<br>!python <span class="hljs-built_in">print</span>.py<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#%%writefile and %pycat: 导出cell内容/显示外部脚本的内容</span><br>%pycat SaveToPythonCode.py <span class="hljs-comment">#将文件打开展示在cell中</span><br>%%writefile SaveToPythonCode.py <span class="hljs-comment">#重写文件为cell中的内容并保存</span><br><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>):<br>    flag=<span class="hljs-number">1</span><br>    k=<span class="hljs-built_in">int</span>(sqrt(i))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,k+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i%j==<span class="hljs-number">0</span>:<br>            flag=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span>(flag):<br>            <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#PDB调试代码</span><br><span class="hljs-comment">#Notebook自带一个调试器, 叫The Python Debugger (pdb)，我们来看看它是如何工作的</span><br>%pdb<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    inputnumber = x.__str__()<br>    reversedStr = inputnumber[::-<span class="hljs-number">1</span>]<br>    strOriLen = <span class="hljs-built_in">len</span>(reversedStr)<br>    result = <span class="hljs-built_in">list</span>()<br>    flag = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, strOriLen):<br>        <span class="hljs-keyword">if</span> i == (strOriLen -<span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> reversedStr[i] == <span class="hljs-string">&#x27;-&#x27;</span> :<br>            flag = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            result.append(reversedStr[i])<br>    outputs = <span class="hljs-string">&#x27;&#x27;</span>.join(result)<br>    outputInt = <span class="hljs-built_in">int</span>(outputs)        <br>     <br>    outputInt = outputInt * flag<br>        <br>    <span class="hljs-keyword">if</span> outputInt &gt; <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>)-<span class="hljs-number">1</span>  <span class="hljs-keyword">or</span> outputInt &lt; -<span class="hljs-number">1</span> * <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>):<br>        outputInt = <span class="hljs-number">0</span><br>        <br>    <span class="hljs-keyword">return</span> outputInt<br><br><span class="hljs-built_in">print</span>(reverse(<span class="hljs-number">134</span>))<br></code></pre></td></tr></table></figure><h2 id="PDB命令（python3-7及以上自带的调试器，ipdb为彩色的交互）"><a href="#PDB命令（python3-7及以上自带的调试器，ipdb为彩色的交互）" class="headerlink" title="PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）"></a>PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）</h2><ul><li><p><strong>pdb.set_trace():设置断点</strong></p></li><li><p><strong>n（next）:执行下一步</strong></p></li><li><p><strong>p（print）data :打印data</strong></p></li><li><p><strong>l（ls）：显示当前代码</strong></p></li><li><p><strong>q（quit）：强制中断退出</strong></p></li><li><p><strong>b（break）LineNumber：调试中给指定位置设置断点</strong></p></li><li><p><strong>variable = value:动态分配变量</strong></p></li><li><p><strong>c（continue）：继续运行至结束</strong></p></li><li><p><strong>r（return）：运行至子程序结束</strong></p></li><li><p><strong>a（args）：打印当前函数参数</strong></p></li><li><p><strong>ENTER（回车）：重复上次命令</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>PaddleIDE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NoteBook</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python_Notes</title>
    <link href="/2022/09/ecfdf6e6a290.html"/>
    <url>/2022/09/ecfdf6e6a290.html</url>
    
    <content type="html"><![CDATA[<hr><p><u>**/**为浮点除，返回一个浮点数</u></p><p><u>**//**为整除，返回一个向下取整的整数</u></p><h1 id="math-模块"><a href="#math-模块" class="headerlink" title="math 模块"></a>math 模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><span class="hljs-built_in">print</span>(math.ceil(<span class="hljs-number">4.1</span>))   <span class="hljs-comment">#返回数字的上入整数</span><br><br><span class="hljs-built_in">print</span>(math.floor(<span class="hljs-number">4.9</span>))  <span class="hljs-comment">#返回数字的下舍整数</span><br><br><span class="hljs-built_in">print</span>(math.fabs(-<span class="hljs-number">10</span>))   <span class="hljs-comment">#返回数字的绝对值</span><br><br><span class="hljs-built_in">print</span>(math.sqrt(<span class="hljs-number">9</span>))     <span class="hljs-comment">#返回数字的平方根</span><br><br><span class="hljs-built_in">print</span>(math.exp(<span class="hljs-number">1</span>))      <span class="hljs-comment">#返回e的x次幂</span><br><br></code></pre></td></tr></table></figure><hr><h1 id="random-模块"><a href="#random-模块" class="headerlink" title="random 模块"></a>random 模块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>ran = random.random()<span class="hljs-comment">#产生0到1直接的浮点数</span><br><span class="hljs-built_in">print</span>(ran)<br><br><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;------- 设置种子 seed -------&quot;</span>)<br>random.seed(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Random number with seed 10 : &quot;</span>, random.random())<br><span class="hljs-comment"># 生成同一个随机数</span><br>random.seed(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Random number with seed 10 : &quot;</span>, random.random())<br><br><br>ran = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>)<span class="hljs-comment">#生成1到20之间的随机数</span><br><span class="hljs-built_in">print</span>(ran)<br></code></pre></td></tr></table></figure><hr><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;I&#x27;m going to the movies&#x27;&#x27;&#x27;</span>)<br><span class="hljs-comment">#输出结果所见即所得包括所有符号全部打印出来</span><br>html = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span><br><span class="hljs-string">Friends CGI Demo&lt;/TI TLE&gt;&lt;/HEAD&gt;</span><br><span class="hljs-string">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span><br><span class="hljs-string">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span><br><span class="hljs-string">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span><br><span class="hljs-string">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span><br><span class="hljs-string">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(html)<br></code></pre></td></tr></table></figure><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#声明一个空列表</span><br>girls = []<br><br><span class="hljs-comment">#append(),末尾追加</span><br>girls.append(<span class="hljs-string">&#x27;杨超越&#x27;</span>)<br><span class="hljs-built_in">print</span>(girls)<br><span class="hljs-comment">#extend(),一次添加多个。把一个列表添加到另一个列表 ，列表合并。</span><br>models = [<span class="hljs-string">&#x27;刘雯&#x27;</span>,<span class="hljs-string">&#x27;奚梦瑶&#x27;</span>]<br>girls.extend(models)<br><span class="hljs-comment">#girls = girls + models</span><br><span class="hljs-built_in">print</span>(girls)<br><span class="hljs-comment">#insert():指定位置添加</span><br>girls.insert(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;虞书欣&#x27;</span>)<br><span class="hljs-built_in">print</span>(girls)<br><br><span class="hljs-comment">#列表删除</span><br>words = [<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;pen&#x27;</span>,<span class="hljs-string">&#x27;pencil&#x27;</span>,<span class="hljs-string">&#x27;ruler&#x27;</span>]<br><span class="hljs-keyword">del</span> words[<span class="hljs-number">1</span>]<br>words.remove(<span class="hljs-string">&#x27;cat&#x27;</span>)<span class="hljs-comment">#删除指定元素</span><br>words.pop(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(words)<br><br><span class="hljs-comment">#列表排序</span><br><span class="hljs-comment">#默认升序</span><br>new_list = <span class="hljs-built_in">sorted</span>(random_list)<br><span class="hljs-built_in">print</span>(new_list)<br><span class="hljs-comment">#降序</span><br>new_list = <span class="hljs-built_in">sorted</span>(random_list,reverse =<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(new_list)<br></code></pre></td></tr></table></figure><hr><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><p><strong>注意：元组中只有一个元素时，需要在后面加逗号！</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple3 = (<span class="hljs-string">&#x27;hello&#x27;</span>,)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(tuple3))<br><br><span class="hljs-comment">#元组修改</span><br>t1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)+(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>t2 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) * <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(t1,t2)<br><br><span class="hljs-comment">#相关方法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(random_tuple))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(random_tuple))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(random_tuple))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(random_tuple))<br><span class="hljs-comment">#统计元组中4的个数</span><br><span class="hljs-built_in">print</span>(random_tuple.count(<span class="hljs-number">4</span>))<br><span class="hljs-comment">#元组中4所对应的下标，如果不存在，则会报错</span><br><span class="hljs-built_in">print</span>(random_tuple.index(<span class="hljs-number">4</span>))<br><br><span class="hljs-comment">#元组拆包与装包</span><br><span class="hljs-comment">##当元组中元素个数与变量个数一致时</span><br><span class="hljs-comment">#定义一个元组</span><br>t3 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-comment">#将元组赋值给变量a,b,c</span><br>a,b,c = t3<br><span class="hljs-comment">#打印a,b,c</span><br><span class="hljs-built_in">print</span>(a,b,c)<br><br><span class="hljs-comment">#当元组中元素个数与变量个数不一致时</span><br><span class="hljs-comment">#定义一个元组，包含5个元素</span><br>t4 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment">#将t4[0],t4[1]分别赋值给a,b;其余的元素装包后赋值给c</span><br>a,b,*c = t4<br><span class="hljs-built_in">print</span>(a,b,c)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(*c)<br></code></pre></td></tr></table></figure><hr><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#list可以转成字典，但前提是列表中元素都要成对出现</span><br>dict3 = <span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;杨超越&#x27;</span>),(<span class="hljs-string">&#x27;weight&#x27;</span>,<span class="hljs-number">45</span>)])<br><span class="hljs-built_in">print</span>(dict3)<br><br><span class="hljs-comment">#字典里的函数 items()  keys() values()</span><br>dict5 = &#123;<span class="hljs-string">&#x27;杨超越&#x27;</span>:<span class="hljs-number">165</span>,<span class="hljs-string">&#x27;虞书欣&#x27;</span>:<span class="hljs-number">166</span>,<span class="hljs-string">&#x27;上官喜爱&#x27;</span>:<span class="hljs-number">164</span>&#125;<br><span class="hljs-built_in">print</span>(dict5.items())<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> dict5.items():<br>    <span class="hljs-keyword">if</span> value &gt; <span class="hljs-number">165</span>:<br>        <span class="hljs-built_in">print</span>(key)<br>        <br>names = dict5.keys()<span class="hljs-comment">#返回一个类</span><br><span class="hljs-built_in">print</span>(names)<br>results = dict5.values()<span class="hljs-comment">#返回一个类</span><br><span class="hljs-built_in">print</span>(results)<br><br><span class="hljs-built_in">print</span>(dict5.get(<span class="hljs-string">&#x27;赵小棠&#x27;</span>,<span class="hljs-number">170</span>)) <span class="hljs-comment">#如果能够取到值，则返回字典中的值，否则返回默认值170</span><br></code></pre></td></tr></table></figure><hr><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul><li><p><strong>json.dumps(obj)将python对象编码成json字符串</strong></p><p>（可选参数）：</p><p>sort_keys=True表示按照字典排序(a到z)输出。</p><p>indent参数，代表缩进的位数</p><p>separators参数的作用是去掉,和:后面的空格，传输过程中数据越精简越好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>data = [ &#123; <span class="hljs-string">&#x27;b&#x27;</span> : <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;d&#x27;</span> : <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;a&#x27;</span> : <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;c&#x27;</span> : <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;e&#x27;</span> : <span class="hljs-number">5</span> &#125; ]<br>json = json.dumps(data, sort_keys=<span class="hljs-literal">True</span>, indent=<span class="hljs-number">4</span>,separators=(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>))<br><span class="hljs-built_in">print</span>(json)<br></code></pre></td></tr></table></figure></li><li><p><strong>json.loads 用于解码JSON数据。该函数返回Python字段的数据类型</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>jsonData = <span class="hljs-string">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&#x27;</span><br>text = json.loads(jsonData)  <span class="hljs-comment">#将string转换为dict</span><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul><li><strong>try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理</strong></li><li><strong>finally中的内容，退出try时总会执行</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    fh = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;filepath&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>    fh.write(<span class="hljs-string">&quot;这是一个测试文件，用于测试异常!!&quot;</span>)<br><span class="hljs-keyword">except</span> IOError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error: 没有找到文件或读取文件失败&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;内容写入文件成功&#x27;</span>)<br>    fh.close()<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;关闭文件&#x27;</span>)<br>    f.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python,program_study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

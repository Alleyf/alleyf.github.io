{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default1.png","path":"img/default1.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default2.png","path":"img/default2.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default4.png","path":"img/default4.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default3.png","path":"img/default3.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid2.png","path":"img/fluid2.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/galleries/index.md","hash":"412a03822f98bdbec818aa56720fcfee4b5bf69a","modified":1662629470519},{"_id":"source/_posts/Java Notes.md","hash":"f7eabac1c148727ada5669b10577b8346989bdc2","modified":1664352267521},{"_id":"source/_posts/Html5_Css_Js.md","hash":"da0047c9cc3e12267680909a799585cabac70b4c","modified":1664293822537},{"_id":"source/_posts/Java_Exercise.md","hash":"e89d73cbf31c62c56f789299c6173632b74150ec","modified":1664371675515},{"_id":"source/about/index.md","hash":"d0a5ee556a76e7d7d0f16192aa4d8dbf703fc861","modified":1662818201737},{"_id":"source/_posts/ML_DL.md","hash":"ca2a97e0d6905b8299192eafaff1d02b8fd974e1","modified":1662964094258},{"_id":"source/_posts/Python_Notes.md","hash":"afaf30a969d29a1e75a8b9476449aea19a1730fc","modified":1662814851799},{"_id":"source/_posts/NoteBook.md","hash":"7a7c1901b4c73ce6acba2b7fbcc98a0136131171","modified":1662814839426},{"_id":"source/categories/index.md","hash":"fc257f3f1cf10a3a2d74ff6d5664111bd5d9f944","modified":1662629857236},{"_id":"source/_posts/QuartusUsage.md","hash":"f835b61addc9d1a278bc04182e1187d8a4ada017","modified":1664011319492},{"_id":"source/_posts/SignalSample.md","hash":"f2de2e8b57b7c8f1759deec5dcbee2c36916c935","modified":1663858221578},{"_id":"source/tags/index.md","hash":"244727a792bf9c9f6a00e2913402ce7ea14c1360","modified":1662629843360},{"_id":"source/_posts/Synthesis_Command.md","hash":"5d4df5e838db9e5b54be44c92dc414386e44fcd0","modified":1662951742541},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1655372397000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1655372397000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1655372397000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1655372397000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1655372397000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1655372397000},{"_id":"themes/fluid/_config.yml","hash":"ad3813296d1d85532352fdb4b3b1611b2d7019d8","modified":1662830018838},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1655372397000},{"_id":"themes/fluid/package.json","hash":"0bc354a01c5e6e9de43bf67456dc16c59d400139","modified":1655372397000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1655372397000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1655372397000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1655372397000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1655372397000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1655372397000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1655372397000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1655372397000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1655372397000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1655372397000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1655372397000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1655372397000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1655372397000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1655372397000},{"_id":"themes/fluid/layout/index.ejs","hash":"b15d13877827e99e0ff783a6b13b13cca90bfe8c","modified":1655372397000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1655372397000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1655372397000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1655372397000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1655372397000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1655372397000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1655372397000},{"_id":"themes/fluid/live2d-widget-model-wanko/package.json","hash":"f97ec41764abc0d11e056088765123b6a8aae798","modified":1662820158602},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1655372397000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1655372397000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"776949aa697dffd54e9b1957d9245028879509a3","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1655372397000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1655372397000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1655372397000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1655372397000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1655372397000},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1662820158763},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1655372397000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1655372397000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1655372397000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1655372397000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1655372397000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1655372397000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1655372397000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1655372397000},{"_id":"themes/fluid/source/img/avatar.png","hash":"09e2e60e7728c77ecb1f408220079f4284ea0e39","modified":1662729937501},{"_id":"themes/fluid/source/img/fluid.png","hash":"f3f48030a027ff9cd79f133af0f375be393ec795","modified":1662795735396},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1655372397000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1655372397000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1655372397000},{"_id":"themes/fluid/source/img/fluid2.png","hash":"f43a0be42944248a598cdbb139d3424bab1b2658","modified":1662728254192},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1655372397000},{"_id":"themes/fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1655372397000},{"_id":"themes/fluid/source/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1655372397000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1655372397000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1655372397000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1655372397000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1655372397000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"cbcf6905f4990a22895a848e29dd4c05592a9043","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"94c1ce6e312932e876886ba24b082ae34515a038","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e74fb49526ddb14fee2c6360a560d17f57262ef7","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1655372397000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1655372397000},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1662820158746},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1662820158745},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1662820158748},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1662820158750},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1662820158752},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1655372397000},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1662820158749},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1662820158754},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1662820158755},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1662820158756},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1655372397000},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1662820158758},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1655372397000},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1662820158757},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1655372397000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1655372397000},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1662820158759},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1655372397000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1655372397000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"7054d79c9d5966fc57baf0adcdf3b19275987b62","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1655372397000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1655372397000},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1662820158742},{"_id":"themes/fluid/live2d-widget-model-wanko/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1662820158706},{"_id":"themes/fluid/source/img/default.png","hash":"5713314b1d5395a16c45be29403ab430484fc5a1","modified":1662813781512},{"_id":"themes/fluid/source/img/default4.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1655372397000},{"_id":"themes/fluid/source/img/default3.png","hash":"37d49f8ee6ca55430d22f8e5c3cd79d1143b8247","modified":1662729354173},{"_id":"themes/fluid/source/img/default1.png","hash":"7fff2b1e4c3e61915e462a38ff1b9e6c1de4a7b2","modified":1662728234105},{"_id":"themes/fluid/source/img/default2.png","hash":"6cae03c31a9ca078d5df5f7dcea6ee250a838aa6","modified":1662728002213},{"_id":"public/local-search.xml","hash":"b458d84a472187f42a8166a2535effc31c946215","modified":1664371919236},{"_id":"public/galleries/index.html","hash":"8eebe4252794b039134e84c4a292d6db70eecff5","modified":1664371919236},{"_id":"public/tags/index.html","hash":"850f1b1a458cad5f9b133d2b1796686334025aee","modified":1664371919236},{"_id":"public/archives/index.html","hash":"158cb9af5de9c7ee1e64c32289d9743f9e367054","modified":1664371919236},{"_id":"public/archives/2022/index.html","hash":"446e3c1c15fef9cbc74deb8092c240ca3191eea5","modified":1664371919236},{"_id":"public/archives/2022/09/index.html","hash":"f388cdffa8f2699adb5b32b4273edc34634a50f9","modified":1664371919236},{"_id":"public/categories/Front-end-development/index.html","hash":"9cdb2667707abbaf28f029248b353867571cd7d9","modified":1664371919236},{"_id":"public/categories/Java/index.html","hash":"6101eb4ab2d8d08e0787348cd20df79593622acc","modified":1664371919236},{"_id":"public/categories/MachineLearning/index.html","hash":"d4778d2e8f1438120b033fcd1c79fbd6001d870d","modified":1664371919236},{"_id":"public/categories/python-program-study/index.html","hash":"ecf1f3f7e0347436b27ecfe153b3620847f44818","modified":1664371919236},{"_id":"public/categories/PaddleIDE/index.html","hash":"77a8f609b54d1ee25a447fd242e5b90c846f2827","modified":1664371919236},{"_id":"public/categories/QuartusII/index.html","hash":"54a1114c3946891a3fb36c6116e150f624824986","modified":1664371919236},{"_id":"public/categories/DSP/index.html","hash":"b76c1db0c2967cccfabb3ab22885004f2a136941","modified":1664371919236},{"_id":"public/categories/Command/index.html","hash":"2c2ff602ade81c16b88c7e53fcd1c4ef3dc53af5","modified":1664371919236},{"_id":"public/tags/h5/index.html","hash":"d3728e4e5caaede40af8a47bb387e0255f0b6422","modified":1664371919236},{"_id":"public/tags/css/index.html","hash":"68ff0ab81049f111a0fc5285dbc07e66c47e43f1","modified":1664371919236},{"_id":"public/tags/javascript/index.html","hash":"9da2beba3b948332bf87f6a7145f116a48a5157b","modified":1664371919236},{"_id":"public/tags/Java/index.html","hash":"312c26ae3c899658f5d23807833655ac16745ba7","modified":1664371919236},{"_id":"public/tags/Numpy/index.html","hash":"cffbd54cf1333676aa26f256c820a8ae85504d9a","modified":1664371919236},{"_id":"public/tags/Pandas/index.html","hash":"e50187b325a30f8837e3290e8c8871164d37fa6c","modified":1664371919236},{"_id":"public/tags/PIL/index.html","hash":"0dd8baf74ccf01b84ef3aeb9fc08bbe79522d467","modified":1664371919236},{"_id":"public/tags/Matplotlib/index.html","hash":"5485d8874de42d149d00a2c54a9108a19886778c","modified":1664371919236},{"_id":"public/tags/python/index.html","hash":"1dbad95d15c4706ac04b4bc09f2d7e183692aa44","modified":1664371919236},{"_id":"public/tags/NoteBook/index.html","hash":"c38c2d46b896b7b82265083a3132f1c6e7c6f21d","modified":1664371919236},{"_id":"public/tags/QuartusII/index.html","hash":"f01b6efa7ce25eee2a21a17179ea2f3f2364c8b1","modified":1664371919236},{"_id":"public/tags/Signal/index.html","hash":"3da3c6fd88d620ba21293c751e246a55d47cfd39","modified":1664371919236},{"_id":"public/404.html","hash":"37ef9e55e5eae200d0cf901820fc452b847c0c8a","modified":1664371919236},{"_id":"public/tags/Sample/index.html","hash":"69ec31b28648d40c4c36715d881580f274b55b86","modified":1664371919236},{"_id":"public/tags/Hexo/index.html","hash":"79df385d6598ccdcc1b65e7be417bf86fbf6aa29","modified":1664371919236},{"_id":"public/links/index.html","hash":"c3307db30205cfc34dd1278d5ecfcf3aac156990","modified":1664371919236},{"_id":"public/about/index.html","hash":"9a502534c13e95b2840efdc786f70c9359196de6","modified":1664371919236},{"_id":"public/categories/index.html","hash":"d2523ef3061641d80acacd74599f9ccdae164762","modified":1664371919236},{"_id":"public/2022/09/28/Java_Exercise/index.html","hash":"04fe14c9b0460ab70cc06e9ff587bba8ea898184","modified":1664376478941},{"_id":"public/2022/09/23/QuartusUsage/index.html","hash":"5dc37d051f505deaf9380546fadb45addbd286c5","modified":1664371919236},{"_id":"public/2022/09/22/SignalSample/index.html","hash":"a3f3894f1f5e1432cf70b33ead2a9fa33e36c57f","modified":1664371919236},{"_id":"public/2022/09/11/ML_DL/index.html","hash":"772f3e0c606173cbb2bc7d89440c602faf01a88a","modified":1664371919236},{"_id":"public/2022/09/10/Html5_Css_Js/index.html","hash":"3de6fd5d9c4a907f606bddeaf60f0cfe463137fe","modified":1664371919236},{"_id":"public/2022/09/10/Java Notes/index.html","hash":"afa417a83f6fd0d4d636298244a373a51036a539","modified":1664376478941},{"_id":"public/2022/09/10/Python_Notes/index.html","hash":"c3d7dd5b94c560cffb5523ed8e0dc82dd1ad6f51","modified":1664371919236},{"_id":"public/2022/09/10/NoteBook/index.html","hash":"aebcda18b84a874e1c2110ebc3c070aa16bf8816","modified":1664371919236},{"_id":"public/2022/09/10/Synthesis_Command/index.html","hash":"631b4acefd05f7be8bb1735e0d73519c5f40025c","modified":1664371919236},{"_id":"public/index.html","hash":"a91abda56792fdde5dc389a9984307f82ea2b6f2","modified":1664371919236},{"_id":"public/img/avatar.png","hash":"09e2e60e7728c77ecb1f408220079f4284ea0e39","modified":1664371919236},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1664371919236},{"_id":"public/img/fluid.png","hash":"f3f48030a027ff9cd79f133af0f375be393ec795","modified":1664371919236},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1664371919236},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1664371919236},{"_id":"public/img/fluid2.png","hash":"f43a0be42944248a598cdbb139d3424bab1b2658","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1664371919236},{"_id":"public/live2dw/assets/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1664371919236},{"_id":"public/live2dw/assets/package.json","hash":"f97ec41764abc0d11e056088765123b6a8aae798","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1664371919236},{"_id":"public/live2dw/assets/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1664371919236},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1664371919236},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1664371919236},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1664371919236},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1664371919236},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1664371919236},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1664371919236},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1664371919236},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1664371919236},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1664371919236},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1664371919236},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1664371919236},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1664371919236},{"_id":"public/css/main.css","hash":"f7ce6ed5308c621930136e91fe5e47d1ad91130b","modified":1664371919236},{"_id":"public/live2dw/assets/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1664371919236},{"_id":"public/live2dw/assets/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1664371919236},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1664371919236},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1664371919236},{"_id":"public/img/default.png","hash":"5713314b1d5395a16c45be29403ab430484fc5a1","modified":1664371919236},{"_id":"public/img/default4.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1664371919236},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1664371919236},{"_id":"public/img/default3.png","hash":"37d49f8ee6ca55430d22f8e5c3cd79d1143b8247","modified":1664371919236},{"_id":"public/img/default1.png","hash":"7fff2b1e4c3e61915e462a38ff1b9e6c1de4a7b2","modified":1664371919236},{"_id":"public/img/default2.png","hash":"6cae03c31a9ca078d5df5f7dcea6ee250a838aa6","modified":1664371919236}],"Category":[{"name":"Front_end_development","_id":"cl8lo2ghg0004ichzdotw1ihi"},{"name":"Java","_id":"cl8lo2ghk0009ichz206z5v1g"},{"name":"MachineLearning","_id":"cl8lo2ghl000cichzg4aeb4b1"},{"name":"python,program_study","_id":"cl8lo2ghs000xichz8emncgxl"},{"name":"PaddleIDE","_id":"cl8lo2ghu0013ichz7i8c5the"},{"name":"QuartusII","_id":"cl8lo2ghv0017ichz9u5denai"},{"name":"DSP","_id":"cl8lo2ghw001bichz9d7rdder"},{"name":"Command","_id":"cl8lo2ghz001fichzaqct3f8c"}],"Data":[],"Page":[{"title":"about","date":"2022-09-08T09:37:50.000Z","layout":"about","_content":"\n### **An interesting blogger sharing some useful essays**\n\nMotto：**You know more, you will do not know more.**\n\n### Communication：\n\n您也可以关注我们的微信公众号和小程序，我们会定期更新一些对您有帮助的干货，您的支持将是我们最大的动力，我们会继续努力的。\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E5%85%AC%E4%BC%97%E5%8F%B7.jpg\" style=\"zoom:50%;\" />\n\n---\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E5%B0%8F%E7%A8%8B%E5%BA%8F.jpg\" style=\"zoom: 67%;\"/>\n\n### Support：\n\n您可以扫描下方微信赞赏码支持我们的开源创作，资金将用于服务器及域名开销以及今后的公共接口和创作服务。\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910212636463.png\" alt=\"image-20220910212636463\" style=\"zoom: 25%; pic_center\" />\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-09-08 17:37:50\nlayout: about\n---\n\n### **An interesting blogger sharing some useful essays**\n\nMotto：**You know more, you will do not know more.**\n\n### Communication：\n\n您也可以关注我们的微信公众号和小程序，我们会定期更新一些对您有帮助的干货，您的支持将是我们最大的动力，我们会继续努力的。\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E5%85%AC%E4%BC%97%E5%8F%B7.jpg\" style=\"zoom:50%;\" />\n\n---\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E5%B0%8F%E7%A8%8B%E5%BA%8F.jpg\" style=\"zoom: 67%;\"/>\n\n### Support：\n\n您可以扫描下方微信赞赏码支持我们的开源创作，资金将用于服务器及域名开销以及今后的公共接口和创作服务。\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910212636463.png\" alt=\"image-20220910212636463\" style=\"zoom: 25%; pic_center\" />\n","updated":"2022-09-10T13:56:41.737Z","path":"about/index.html","comments":1,"_id":"cl8lo2gh90000ichzg59976n2","content":"<h3 id=\"An-interesting-blogger-sharing-some-useful-essays\"><a href=\"#An-interesting-blogger-sharing-some-useful-essays\" class=\"headerlink\" title=\"An interesting blogger sharing some useful essays\"></a><strong>An interesting blogger sharing some useful essays</strong></h3><p>Motto：<strong>You know more, you will do not know more.</strong></p>\n<h3 id=\"Communication：\"><a href=\"#Communication：\" class=\"headerlink\" title=\"Communication：\"></a>Communication：</h3><p>您也可以关注我们的微信公众号和小程序，我们会定期更新一些对您有帮助的干货，您的支持将是我们最大的动力，我们会继续努力的。</p>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E5%85%AC%E4%BC%97%E5%8F%B7.jpg\" style=\"zoom:50%;\" />\n\n<hr>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E5%B0%8F%E7%A8%8B%E5%BA%8F.jpg\" style=\"zoom: 67%;\"/>\n\n<h3 id=\"Support：\"><a href=\"#Support：\" class=\"headerlink\" title=\"Support：\"></a>Support：</h3><p>您可以扫描下方微信赞赏码支持我们的开源创作，资金将用于服务器及域名开销以及今后的公共接口和创作服务。</p>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910212636463.png\" alt=\"image-20220910212636463\" style=\"zoom: 25%; pic_center\" />\n","site":{"data":{}},"wordcount":214,"excerpt":"","more":"<h3 id=\"An-interesting-blogger-sharing-some-useful-essays\"><a href=\"#An-interesting-blogger-sharing-some-useful-essays\" class=\"headerlink\" title=\"An interesting blogger sharing some useful essays\"></a><strong>An interesting blogger sharing some useful essays</strong></h3><p>Motto：<strong>You know more, you will do not know more.</strong></p>\n<h3 id=\"Communication：\"><a href=\"#Communication：\" class=\"headerlink\" title=\"Communication：\"></a>Communication：</h3><p>您也可以关注我们的微信公众号和小程序，我们会定期更新一些对您有帮助的干货，您的支持将是我们最大的动力，我们会继续努力的。</p>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E5%85%AC%E4%BC%97%E5%8F%B7.jpg\" style=\"zoom:50%;\" />\n\n<hr>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/%E5%B0%8F%E7%A8%8B%E5%BA%8F.jpg\" style=\"zoom: 67%;\"/>\n\n<h3 id=\"Support：\"><a href=\"#Support：\" class=\"headerlink\" title=\"Support：\"></a>Support：</h3><p>您可以扫描下方微信赞赏码支持我们的开源创作，资金将用于服务器及域名开销以及今后的公共接口和创作服务。</p>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910212636463.png\" alt=\"image-20220910212636463\" style=\"zoom: 25%; pic_center\" />\n"},{"title":"categories","date":"2022-09-08T09:37:37.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-09-08 17:37:37\n---\n","updated":"2022-09-08T09:37:37.236Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl8lo2ghe0002ichzga2h7f2d","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"galleries","date":"2022-09-08T09:31:10.000Z","_content":"","source":"galleries/index.md","raw":"---\ntitle: galleries\ndate: 2022-09-08 17:31:10\n---\n","updated":"2022-09-08T09:31:10.519Z","path":"galleries/index.html","comments":1,"layout":"page","_id":"cl8lo2ghi0006ichzfjsi3hdv","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"tags","date":"2022-09-08T09:37:23.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-09-08 17:37:23\n---\n","updated":"2022-09-08T09:37:23.360Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl8lo2ghj0008ichzgcn553yf","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"title":"Html5+Css+Js","date":"2022-09-10T02:00:00.000Z","sticky":75,"excerpt":"Web—study about H5、Css、Js","_content":"# Html5\n\n## 1.表格标签（可以用对齐）\n\n```html\n<table>\n    <tr>\n        <th>表头</th>\n        <td>单元格内的文字</td>\n        ···\n    </tr>\n    ···\n</table>\n```\n\n- tr: 行标签\n- td: 单元格标签\n- th: 表头标签(自动居中加粗显示)\n- thead: 用于定义表格的头部。thead标签内部必须拥有tr标签，一般是位于第一行。\n- tbody: 用于定义表格的主体,主要用于放数据本体。\n- 属性：<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909192737.png\" style=\"zoom:25%;\" />\n\n### 合并单元格（td的属性标签）\n\n跨行合并: rowspan=“合并单元格的个数”\n跨列合并: colspan=”合并单元格的个数”\n\n目标单元格: (写合并代码)\n\n- 跨行:最上侧单元格为目标单元格,写合并代码\n- 跨列:最左侧单元格为目标单元格,写合并代码\n\n## 2.列表标签\n\n### 2.1无序列表\n\n```html\n<ul>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ul>\n```\n\n- ul为列表标签（**只能嵌套li标签**）\n\n- li为表项标签（可以放别的标签，相当于一个容器）\n\n### 2.2有序列表（表项排列有序）\n\n```html\n<ol>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ol>\n```\n\n- ol标签只能嵌套li标签。\n- li标签对相当于一个容器,可以容纳所有元素。\n- 有序列表会带有自己样式属性,但在实际使用时,我们会使用CSS来设置。\n\n### 2.3自定义列表\n\n```html\n<dl>\n\t<dt>关于我</dt>\n\t<dd>博客</dd>\n\t<dd>发卡网</dd>\n    <dd>域名分发</dd>\n</dl>\t\n```\n\n- 在HTML标签中, dl标签用于定义描述列表(或定义列表) , 该标签会与dt (定义项目/名字)和dd( 描述每一个项目/名字)一起使用。\n\n## 表单标签\n\n### 3.1表单的组成\n\n注：<u>在HTML中,一个完整的表单通常由表单域、表单控件(也称为表单元素)和提示信息3个部分构成.</u>\n\n1. <u>表单域</u>： 表单域是一个包含表单元素的区域。在HTML标签中，form标签用于定义表单域,以实现用户信息的收集和传递。form会把它范围内的表单元素信息提交给服务器.\n\n```html\n<form action=\"url地址\" method=\"提交方式\" name=\"表单域名称\">\n<!-->各种表单元素控件</!-->\n</form>\n```\n\n2. <u>表单元素</u>：在表单域中可以定义各种表单元素,这些表单元素就是允许用户在表单中输入或者选择的内容控件。\n\n   - **input输入表单元素**：\n\n     1. 定义：`<input type=\"属性值\" />`\t\n\n     2. input标签为单标签\n\n     3. <u>type属性设置不同的属性值用来指定不同的控件类型</u>\n\n        ![image-20220914211117537](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914211117537.png)\n\n     4. 其他属性：\n\n        ![image-20220914205332692](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914205332692.png)\n\n        - <u>name和value是每个表单元素都有的属性值主要给后台人员使用，value为默认值</u>。\n        - <u>name表单元素的名字，要求单选按钮和复选框要有相同的name值。</u>\n        - <u>只有单选和复选按钮才有checked属性，网页打开默认选中状态。</u>\n        - <u>maxlength规定输入字段中的字符的最大长度。</u>\n\n        ```html\n        <form method=\"get\" action=\"https://fcsy.fit.php\" name=\"翻译\">\n                <!-- text 文本框用户输入任何文字 -->\n                用户名：<input type=\"text\" name=\"username\" maxlength=\"12\"> <br>\n                <!-- password 密码框 用户看不见输入的密码 -->\n                密码：<input type=\"password\" name=\"password\"> <br>\n                <!-- radio 单选按钮 可以实现多选一，name是表单元素的名字，相同名字的单选按钮才可以实现多选一 -->\n                性别：男<input type=\"radio\" name=\"gender\" value=\"man\" checked=\"checked\">  女<input type=\"radio\" name=\"gender\" value=\"woman\"> <br>\n                <!-- checkbox 复选框 可以实现多选 -->\n                爱好：吃饭<input type=\"checkbox\" name=\"hobby\">睡觉<input type=\"checkbox\" name=\"hobby\">学习<input type=\"checkbox\" name=\"hobby\" checked=\"checked\"> <br>\n                <!-- reset 将表单元素的内容全部清空 -->\n                重置：<input type=\"reset\" name=\"reset\" value=\"重新填写\"> <br>\n                <!-- submit 提交框 可以将表单提交到服务端 -->\n                翻译：<input type=\"submit\" value=\"免费注册\"> <br>\n                <!-- 普通按钮 配合JavaScript实现脚本的调用 -->\n                     <input type=\"button\" javascript=\"index.js\" value=\"获取短信验证码\"> <br>\n                     <!-- file 上传文件到该页面 -->\n                上传头像：<input type=\"file\" name=\"file\" value=\"index\">\n                    <!-- 为文本框添加标签，以便于点击标签就可以选中文本框填写，for的值必须和id的值相等 -->\n                    <label for=\"text\">用户名</label><input type=\"text\" name=\"text\" id=\"text\">\n        </form>\n        ```\n        \n     \n   - **select下拉表单元素**\n   \n     ```html\n     <select>\n     <option>选项1</option>\n     <option>选项2</option>\n     <option>选项3</option>\n     <!-->...</!-->\n     </select>\n     ```\n   \n     1. `select标签中至少包含一对option标签.`\n   \n     2. 在option中定义selected=“selected\"时，当前项即为默认选中项。\n   \n   - **textarea文本域元素**\n   \n     ```html\n     今日反馈:\n     <textarea>\n     pink老师,我知道这个反馈留言是textarea来做的\n     </textarea>\n     ```\n     \n     1. `通过textarea标签可以轻松地创建多行文本输入框。`\n     \n     2. cols= \"每行中的字符数” , rows= \"显示的行数” ,我们在实际开发中不会使用,都是用CSS来改变大小。\n     \n## iframe标签\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>iframe</title>\n</head>\n<body>\n    <iframe src=\"http://www.lvyestudy.com\" width=\"250\" height=\"200\"></iframe>\n</body>\n</html>\n```\n\n- <u>在HTML中，我们可以使用iframe标签来实现一个内嵌框架。内嵌框架，就是在当前页面再嵌入另外一个网页。</u>\n\n---\n\n# Css\n\n##  1.简介\n\n- CSS是层叠样式表( Cascading Style Sheets )的简称.有时我们也会称之为CSS样式表或级联样式表。\n\n- CSS是也是一种标记语言\n\n- CSS主要用于设置HTML页面中的文本内容(字体、大小对齐方式等)、图片的外形(宽高、边框样式、边距等)以及版面的布局和外观显示样式。\n\n- CSS让我们的网页更加丰富多彩,布局更加灵活自如。简单理解: CSS可以美化HTML,让HTML更漂亮,让页面布局更简单。\n\n### 1.1CSS语法规范\n\n<u>**CSS规则由两个主要的部分构成:选择器以及一条或多条声明。**</u>\n\n![image-20220917005326815](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220917005326815.png)\n\n- 选择器是用于指定 CSS样式的HTML标签,花括号内是对该对象设置的具体样式\n\n- 属性和属性值以“键值对”的形式出现\n\n- 属性是对指定的对象设置的样式属性,例如字体大小文本颜色等\n\n- 属性和属性值之间用英文 \":\" 分开\n\n- 多个“键值对”之间用英文\";\" 进行区分\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS_Introduction</title>\n    <!-- <link rel=\"stylesheet\" href=\"css/css.css\"> -->外联式\n    <style> <!--内嵌式-->\n        .p1{\n            color: lightcoral;\n            font:  50% Arial,50% Times New Roman;\n            font-size: 12px;\n            width: auto;\n            height: auto;\n        }\n        .p2{\n            color: aqua;\n            font: Times New Roman;\n            font-size: 20px;\n        }\n    </style>\n</head>\n<body>\n    <p class=\"p1\">CSS</p>\n    <p class=\"p2\"> i am real person!</p>\n</body>\n</html>\n```\n\n### 1.2代码风格\n\n1. 紧凑格式\n\n   `h3 { color: deeppink; font-size: 20px; }`\n\n2. 展开格式（更直观）\n\n   ```css\n   h3 {\n   color: pink;\n   font-size: 20px;\n   }\n   ```\n\n3. 空格规范\n   - `属性值前面，冒号后面，保留一个空格`\n   - `选择器（标签）和大括号中间保留空格`\n\n## 2.选择器\n\n作用： <u>选择标签设置格式属性</u>\n\n### 2.1选择器分类\n\n**选择器分为基础选择器和复合选择器两个大类,我们这里先讲解一下基础选择器。**\n\n- 基础选择器是由<u>单个选择器组成的</u>\n- 基础选择器包括:<u>标签选择器、类选择器、id 选择器和通配符选择器</u>\n- \n\n#### 2.1.1标签选择器\n\n标签选择器(元素选择器)是指用<u>HTML标签名称</u>作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。\n\n语法：\n\n```html\n标签名 {\n\t属性1: 属性值1;\n\t属性2: 属性值2;\n\t属性3 属性值3; ···\n}\n```\n\n#### 2.1.2类选择器\n\n如果想要差异化选择不同的标签,单独选一个或者某几个标签 ,可以使用类选择器；<u>**样式点定义，结构类调用，一个或多个，开发最常用**</u>\n\n语法：\n\n```html\n.类名 {\n\t属性1：属性值1；\n\t···\n}\n<p class=\"p1\">CSS</p>\n```\n\n多类名语法：\n\n`<div class=\"name1 name2 ···\"></div>`\n\n- 在标签class属性中写多个类名,可以同时被调用\n- <u>多个类名中间必须用空格分开</u>\n- <u>将相同样式放在一个公共样式里，便于调用，提高代码复用率</u>\n\n#### 2.1.3ID选择器\n\n- id选择器可以为标有特定id的HTML元素指定特定的样式。\n- HTML元素以<u>id属性来设置id选择器</u>, CSS中id选择器<u>以“#\" 来定义</u>。\n- id标签格式只能被调用一次，唯一性（常与js使用）\n\n语法：\n\n```html\n#类名 {\n\t属性1：属性值1；\n\t···\n}\n<p id=\"p1\">CSS</p>\n```\n\n#### 2.1.4通配符选择器\n\n- 在CSS中,通配符选择器`使用*定义`,它表示选取页面中所有元素(标签)。\n- 标签不需要主动调用，自动会给所有元素设置该格式\n- 特殊情况才使用,后面讲解使用场景(以下是清除所有的元素标签的内外边距)\n\n语法：\n\n```css\n* {\n\tmargin：0；\n\tpadding：0；\n}\n```\n\n## 3.字体属性\n\n![image-20220919164322443](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919164322443.png)\n\n### 3.1字体类型\n\n- 各种字体之间必须使用英文状态下的<u>逗号隔开</u>\n- 一般情况下，如果有<u>空格隔开的多个单词组成的字体加引号</u>.\n- 尽量使用系统默认自带字体,保证在任何用户的浏览器中都能正确显示\n- 开发常见字体：`‘Microsoft YaHei',tahoma,arial, 'Hiragino Sans GB'`;\n\n语法：\n\n```css\n.classname {\nfont-family: 'Microsoft YaHei',tahoma,arial, 'Hiragino Sans GB';\nfont-size: 20px;\nfont-weight: normal/bold/bolder/lighter/number;\nfont-style: normal/italic;\nfont: font-styLe font-weight font-size/line-height font-family; \n\n\n}\n```\n\n### 3.2字体大小\n\n- px(像素)大小是我们网页的最常用的单位\n- 谷歌浏览器默认的文字大小为16px\n- 不同浏览器可能默认显示的字号大小不一致,我们尽量给个明确值大小,不要默认大小\n- 可以给body指定整个页面文字的大小，但标题标签要单独设置大小\n### 3.3字体粗细\n\n- 100~900（400 等同于normal,而700等同于bold,注意这个数字后面不跟单位)\n\n- bold(字体加粗)\n- bolder(字体特粗)\n- lighter(字体变细)\n\n### 3.4文字样式\n\n- normal默认值，浏览器会显示标准的字体样式font-style: normal;\n- italic浏览器会显示斜体的字体样式。\n\n### 3.5字体复合属性\n\n- 使用font属性时,必须按上面语法格式中的顺序书写，<u>`不能更换顺序`</u>，并且各个属性间以`空格隔开`\n- 不需要设置的属性可以省略(取默认值) , 但`必须保留font-size和font-family属性`,否则font属性将不起作用\n\n\n## 4.文本属性\n\n### 4.1文本颜色\n\n![image-20220919201737750](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919201737750.png)\n\n### 4.2对其文本\n\n<u>以本身所占据的空间进行对其调整</u>\n\n![image-20220927225953748](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927225953748.png)\n\n```css\ndiv {\ntext-align: center;\n}\n```\n\n### 4.3装饰文本\n\ntext-decoration属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。\n\n```css\ndiv {\ntext- decoration: underline;\n}\n```\n\n![image-20220927231333931](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927231333931.png)\n\n### 4.4文本缩进\n\n- **text-indent**属性用来指定文本的<u>第一行的缩进</u>,通常是将段落的首行缩进。\n\n- **em**是一个相对单位,就是当前元素( font-size) 1个文字的大小，如果当前元素没有设置大小,则会按照父元素的1个文字大小。\n\n```css\nP{\ntext-indent: 2em;//或者10px \n}\n```\n\n### 4.5行间距\n\n**line-height**属性用于设置行间的距离(行高)。可以控制文字行与行之间的距离.\n\n```css\np{\nline-height: 26px;\n}\n```\n\n![image-20220927232624388](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927232624388.png)\n\n\n\n\n\n\n\n## 5.引入方式\n\n### 1.行内式\n\n```html\n<body style=\"background-color:black;\">\n\n    <h1 style=\"color:white;padding:30px;\">Hostinger Tutorials</h1>\n\n    <p style=\"color:white;\">Something usefull here.</p>\n\n</body>\n```\n\n- 行内样式表(内联样式表)是在元素标签内部的style属性中设定CSS样式。**适合于修改简单样式**.\n- style实就是标签的属性\n- 在双引号中间,写法要符合CSS规范\n- 可以控制当前的标签设置样式\n\n### 2.内嵌式\n\n```html\n<head>\n\n  <style type=\"text/css\">\n\n    p {color:white; font-size: 10px;}\n\n    .center {display: block; margin: 0 auto;}\n\n    #button-go, #button-back {border: solid 1px black;}\n\n  </style>\n\n</head>\n```\n\n- 标签理论上可以放在HTML文档的任何地方,但一般会放在文档的标签中\n\n- 通过此种方式,可以防便控制当前整个页面中的元素样式设置\n- 代码结构清晰,但是并没有实现结构与样式完全分离\n\n### 3.外联式\n\n```html\n<head>\n\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n\n</head>\n```\n\n## 6.调试工具\n\n\n\n\n\n---\n\n# Js\n\n\n\n\n\n\n\n\n\n[版权归属: Alleyf](https://github.com/Alleyf)\n","source":"_posts/Html5_Css_Js.md","raw":"---\ntitle: Html5+Css+Js\ntags: [h5,css,javascript]\ncategories: Front_end_development\ndate: 2022-9-10 10:00:00\nsticky: 75\nexcerpt: Web—study about H5、Css、Js\n---\n# Html5\n\n## 1.表格标签（可以用对齐）\n\n```html\n<table>\n    <tr>\n        <th>表头</th>\n        <td>单元格内的文字</td>\n        ···\n    </tr>\n    ···\n</table>\n```\n\n- tr: 行标签\n- td: 单元格标签\n- th: 表头标签(自动居中加粗显示)\n- thead: 用于定义表格的头部。thead标签内部必须拥有tr标签，一般是位于第一行。\n- tbody: 用于定义表格的主体,主要用于放数据本体。\n- 属性：<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909192737.png\" style=\"zoom:25%;\" />\n\n### 合并单元格（td的属性标签）\n\n跨行合并: rowspan=“合并单元格的个数”\n跨列合并: colspan=”合并单元格的个数”\n\n目标单元格: (写合并代码)\n\n- 跨行:最上侧单元格为目标单元格,写合并代码\n- 跨列:最左侧单元格为目标单元格,写合并代码\n\n## 2.列表标签\n\n### 2.1无序列表\n\n```html\n<ul>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ul>\n```\n\n- ul为列表标签（**只能嵌套li标签**）\n\n- li为表项标签（可以放别的标签，相当于一个容器）\n\n### 2.2有序列表（表项排列有序）\n\n```html\n<ol>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ol>\n```\n\n- ol标签只能嵌套li标签。\n- li标签对相当于一个容器,可以容纳所有元素。\n- 有序列表会带有自己样式属性,但在实际使用时,我们会使用CSS来设置。\n\n### 2.3自定义列表\n\n```html\n<dl>\n\t<dt>关于我</dt>\n\t<dd>博客</dd>\n\t<dd>发卡网</dd>\n    <dd>域名分发</dd>\n</dl>\t\n```\n\n- 在HTML标签中, dl标签用于定义描述列表(或定义列表) , 该标签会与dt (定义项目/名字)和dd( 描述每一个项目/名字)一起使用。\n\n## 表单标签\n\n### 3.1表单的组成\n\n注：<u>在HTML中,一个完整的表单通常由表单域、表单控件(也称为表单元素)和提示信息3个部分构成.</u>\n\n1. <u>表单域</u>： 表单域是一个包含表单元素的区域。在HTML标签中，form标签用于定义表单域,以实现用户信息的收集和传递。form会把它范围内的表单元素信息提交给服务器.\n\n```html\n<form action=\"url地址\" method=\"提交方式\" name=\"表单域名称\">\n<!-->各种表单元素控件</!-->\n</form>\n```\n\n2. <u>表单元素</u>：在表单域中可以定义各种表单元素,这些表单元素就是允许用户在表单中输入或者选择的内容控件。\n\n   - **input输入表单元素**：\n\n     1. 定义：`<input type=\"属性值\" />`\t\n\n     2. input标签为单标签\n\n     3. <u>type属性设置不同的属性值用来指定不同的控件类型</u>\n\n        ![image-20220914211117537](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914211117537.png)\n\n     4. 其他属性：\n\n        ![image-20220914205332692](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914205332692.png)\n\n        - <u>name和value是每个表单元素都有的属性值主要给后台人员使用，value为默认值</u>。\n        - <u>name表单元素的名字，要求单选按钮和复选框要有相同的name值。</u>\n        - <u>只有单选和复选按钮才有checked属性，网页打开默认选中状态。</u>\n        - <u>maxlength规定输入字段中的字符的最大长度。</u>\n\n        ```html\n        <form method=\"get\" action=\"https://fcsy.fit.php\" name=\"翻译\">\n                <!-- text 文本框用户输入任何文字 -->\n                用户名：<input type=\"text\" name=\"username\" maxlength=\"12\"> <br>\n                <!-- password 密码框 用户看不见输入的密码 -->\n                密码：<input type=\"password\" name=\"password\"> <br>\n                <!-- radio 单选按钮 可以实现多选一，name是表单元素的名字，相同名字的单选按钮才可以实现多选一 -->\n                性别：男<input type=\"radio\" name=\"gender\" value=\"man\" checked=\"checked\">  女<input type=\"radio\" name=\"gender\" value=\"woman\"> <br>\n                <!-- checkbox 复选框 可以实现多选 -->\n                爱好：吃饭<input type=\"checkbox\" name=\"hobby\">睡觉<input type=\"checkbox\" name=\"hobby\">学习<input type=\"checkbox\" name=\"hobby\" checked=\"checked\"> <br>\n                <!-- reset 将表单元素的内容全部清空 -->\n                重置：<input type=\"reset\" name=\"reset\" value=\"重新填写\"> <br>\n                <!-- submit 提交框 可以将表单提交到服务端 -->\n                翻译：<input type=\"submit\" value=\"免费注册\"> <br>\n                <!-- 普通按钮 配合JavaScript实现脚本的调用 -->\n                     <input type=\"button\" javascript=\"index.js\" value=\"获取短信验证码\"> <br>\n                     <!-- file 上传文件到该页面 -->\n                上传头像：<input type=\"file\" name=\"file\" value=\"index\">\n                    <!-- 为文本框添加标签，以便于点击标签就可以选中文本框填写，for的值必须和id的值相等 -->\n                    <label for=\"text\">用户名</label><input type=\"text\" name=\"text\" id=\"text\">\n        </form>\n        ```\n        \n     \n   - **select下拉表单元素**\n   \n     ```html\n     <select>\n     <option>选项1</option>\n     <option>选项2</option>\n     <option>选项3</option>\n     <!-->...</!-->\n     </select>\n     ```\n   \n     1. `select标签中至少包含一对option标签.`\n   \n     2. 在option中定义selected=“selected\"时，当前项即为默认选中项。\n   \n   - **textarea文本域元素**\n   \n     ```html\n     今日反馈:\n     <textarea>\n     pink老师,我知道这个反馈留言是textarea来做的\n     </textarea>\n     ```\n     \n     1. `通过textarea标签可以轻松地创建多行文本输入框。`\n     \n     2. cols= \"每行中的字符数” , rows= \"显示的行数” ,我们在实际开发中不会使用,都是用CSS来改变大小。\n     \n## iframe标签\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>iframe</title>\n</head>\n<body>\n    <iframe src=\"http://www.lvyestudy.com\" width=\"250\" height=\"200\"></iframe>\n</body>\n</html>\n```\n\n- <u>在HTML中，我们可以使用iframe标签来实现一个内嵌框架。内嵌框架，就是在当前页面再嵌入另外一个网页。</u>\n\n---\n\n# Css\n\n##  1.简介\n\n- CSS是层叠样式表( Cascading Style Sheets )的简称.有时我们也会称之为CSS样式表或级联样式表。\n\n- CSS是也是一种标记语言\n\n- CSS主要用于设置HTML页面中的文本内容(字体、大小对齐方式等)、图片的外形(宽高、边框样式、边距等)以及版面的布局和外观显示样式。\n\n- CSS让我们的网页更加丰富多彩,布局更加灵活自如。简单理解: CSS可以美化HTML,让HTML更漂亮,让页面布局更简单。\n\n### 1.1CSS语法规范\n\n<u>**CSS规则由两个主要的部分构成:选择器以及一条或多条声明。**</u>\n\n![image-20220917005326815](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220917005326815.png)\n\n- 选择器是用于指定 CSS样式的HTML标签,花括号内是对该对象设置的具体样式\n\n- 属性和属性值以“键值对”的形式出现\n\n- 属性是对指定的对象设置的样式属性,例如字体大小文本颜色等\n\n- 属性和属性值之间用英文 \":\" 分开\n\n- 多个“键值对”之间用英文\";\" 进行区分\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS_Introduction</title>\n    <!-- <link rel=\"stylesheet\" href=\"css/css.css\"> -->外联式\n    <style> <!--内嵌式-->\n        .p1{\n            color: lightcoral;\n            font:  50% Arial,50% Times New Roman;\n            font-size: 12px;\n            width: auto;\n            height: auto;\n        }\n        .p2{\n            color: aqua;\n            font: Times New Roman;\n            font-size: 20px;\n        }\n    </style>\n</head>\n<body>\n    <p class=\"p1\">CSS</p>\n    <p class=\"p2\"> i am real person!</p>\n</body>\n</html>\n```\n\n### 1.2代码风格\n\n1. 紧凑格式\n\n   `h3 { color: deeppink; font-size: 20px; }`\n\n2. 展开格式（更直观）\n\n   ```css\n   h3 {\n   color: pink;\n   font-size: 20px;\n   }\n   ```\n\n3. 空格规范\n   - `属性值前面，冒号后面，保留一个空格`\n   - `选择器（标签）和大括号中间保留空格`\n\n## 2.选择器\n\n作用： <u>选择标签设置格式属性</u>\n\n### 2.1选择器分类\n\n**选择器分为基础选择器和复合选择器两个大类,我们这里先讲解一下基础选择器。**\n\n- 基础选择器是由<u>单个选择器组成的</u>\n- 基础选择器包括:<u>标签选择器、类选择器、id 选择器和通配符选择器</u>\n- \n\n#### 2.1.1标签选择器\n\n标签选择器(元素选择器)是指用<u>HTML标签名称</u>作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。\n\n语法：\n\n```html\n标签名 {\n\t属性1: 属性值1;\n\t属性2: 属性值2;\n\t属性3 属性值3; ···\n}\n```\n\n#### 2.1.2类选择器\n\n如果想要差异化选择不同的标签,单独选一个或者某几个标签 ,可以使用类选择器；<u>**样式点定义，结构类调用，一个或多个，开发最常用**</u>\n\n语法：\n\n```html\n.类名 {\n\t属性1：属性值1；\n\t···\n}\n<p class=\"p1\">CSS</p>\n```\n\n多类名语法：\n\n`<div class=\"name1 name2 ···\"></div>`\n\n- 在标签class属性中写多个类名,可以同时被调用\n- <u>多个类名中间必须用空格分开</u>\n- <u>将相同样式放在一个公共样式里，便于调用，提高代码复用率</u>\n\n#### 2.1.3ID选择器\n\n- id选择器可以为标有特定id的HTML元素指定特定的样式。\n- HTML元素以<u>id属性来设置id选择器</u>, CSS中id选择器<u>以“#\" 来定义</u>。\n- id标签格式只能被调用一次，唯一性（常与js使用）\n\n语法：\n\n```html\n#类名 {\n\t属性1：属性值1；\n\t···\n}\n<p id=\"p1\">CSS</p>\n```\n\n#### 2.1.4通配符选择器\n\n- 在CSS中,通配符选择器`使用*定义`,它表示选取页面中所有元素(标签)。\n- 标签不需要主动调用，自动会给所有元素设置该格式\n- 特殊情况才使用,后面讲解使用场景(以下是清除所有的元素标签的内外边距)\n\n语法：\n\n```css\n* {\n\tmargin：0；\n\tpadding：0；\n}\n```\n\n## 3.字体属性\n\n![image-20220919164322443](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919164322443.png)\n\n### 3.1字体类型\n\n- 各种字体之间必须使用英文状态下的<u>逗号隔开</u>\n- 一般情况下，如果有<u>空格隔开的多个单词组成的字体加引号</u>.\n- 尽量使用系统默认自带字体,保证在任何用户的浏览器中都能正确显示\n- 开发常见字体：`‘Microsoft YaHei',tahoma,arial, 'Hiragino Sans GB'`;\n\n语法：\n\n```css\n.classname {\nfont-family: 'Microsoft YaHei',tahoma,arial, 'Hiragino Sans GB';\nfont-size: 20px;\nfont-weight: normal/bold/bolder/lighter/number;\nfont-style: normal/italic;\nfont: font-styLe font-weight font-size/line-height font-family; \n\n\n}\n```\n\n### 3.2字体大小\n\n- px(像素)大小是我们网页的最常用的单位\n- 谷歌浏览器默认的文字大小为16px\n- 不同浏览器可能默认显示的字号大小不一致,我们尽量给个明确值大小,不要默认大小\n- 可以给body指定整个页面文字的大小，但标题标签要单独设置大小\n### 3.3字体粗细\n\n- 100~900（400 等同于normal,而700等同于bold,注意这个数字后面不跟单位)\n\n- bold(字体加粗)\n- bolder(字体特粗)\n- lighter(字体变细)\n\n### 3.4文字样式\n\n- normal默认值，浏览器会显示标准的字体样式font-style: normal;\n- italic浏览器会显示斜体的字体样式。\n\n### 3.5字体复合属性\n\n- 使用font属性时,必须按上面语法格式中的顺序书写，<u>`不能更换顺序`</u>，并且各个属性间以`空格隔开`\n- 不需要设置的属性可以省略(取默认值) , 但`必须保留font-size和font-family属性`,否则font属性将不起作用\n\n\n## 4.文本属性\n\n### 4.1文本颜色\n\n![image-20220919201737750](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919201737750.png)\n\n### 4.2对其文本\n\n<u>以本身所占据的空间进行对其调整</u>\n\n![image-20220927225953748](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927225953748.png)\n\n```css\ndiv {\ntext-align: center;\n}\n```\n\n### 4.3装饰文本\n\ntext-decoration属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。\n\n```css\ndiv {\ntext- decoration: underline;\n}\n```\n\n![image-20220927231333931](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927231333931.png)\n\n### 4.4文本缩进\n\n- **text-indent**属性用来指定文本的<u>第一行的缩进</u>,通常是将段落的首行缩进。\n\n- **em**是一个相对单位,就是当前元素( font-size) 1个文字的大小，如果当前元素没有设置大小,则会按照父元素的1个文字大小。\n\n```css\nP{\ntext-indent: 2em;//或者10px \n}\n```\n\n### 4.5行间距\n\n**line-height**属性用于设置行间的距离(行高)。可以控制文字行与行之间的距离.\n\n```css\np{\nline-height: 26px;\n}\n```\n\n![image-20220927232624388](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927232624388.png)\n\n\n\n\n\n\n\n## 5.引入方式\n\n### 1.行内式\n\n```html\n<body style=\"background-color:black;\">\n\n    <h1 style=\"color:white;padding:30px;\">Hostinger Tutorials</h1>\n\n    <p style=\"color:white;\">Something usefull here.</p>\n\n</body>\n```\n\n- 行内样式表(内联样式表)是在元素标签内部的style属性中设定CSS样式。**适合于修改简单样式**.\n- style实就是标签的属性\n- 在双引号中间,写法要符合CSS规范\n- 可以控制当前的标签设置样式\n\n### 2.内嵌式\n\n```html\n<head>\n\n  <style type=\"text/css\">\n\n    p {color:white; font-size: 10px;}\n\n    .center {display: block; margin: 0 auto;}\n\n    #button-go, #button-back {border: solid 1px black;}\n\n  </style>\n\n</head>\n```\n\n- 标签理论上可以放在HTML文档的任何地方,但一般会放在文档的标签中\n\n- 通过此种方式,可以防便控制当前整个页面中的元素样式设置\n- 代码结构清晰,但是并没有实现结构与样式完全分离\n\n### 3.外联式\n\n```html\n<head>\n\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n\n</head>\n```\n\n## 6.调试工具\n\n\n\n\n\n---\n\n# Js\n\n\n\n\n\n\n\n\n\n[版权归属: Alleyf](https://github.com/Alleyf)\n","slug":"Html5_Css_Js","published":1,"updated":"2022-09-27T15:50:22.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lo2ghb0001ichzcy81g2s6","content":"<h1 id=\"Html5\"><a href=\"#Html5\" class=\"headerlink\" title=\"Html5\"></a>Html5</h1><h2 id=\"1-表格标签（可以用对齐）\"><a href=\"#1-表格标签（可以用对齐）\" class=\"headerlink\" title=\"1.表格标签（可以用对齐）\"></a>1.表格标签（可以用对齐）</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>表头<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>单元格内的文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        ···<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    ···<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>tr: 行标签</li>\n<li>td: 单元格标签</li>\n<li>th: 表头标签(自动居中加粗显示)</li>\n<li>thead: 用于定义表格的头部。thead标签内部必须拥有tr标签，一般是位于第一行。</li>\n<li>tbody: 用于定义表格的主体,主要用于放数据本体。</li>\n<li>属性：<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909192737.png\" style=\"zoom:25%;\" /></li>\n</ul>\n<h3 id=\"合并单元格（td的属性标签）\"><a href=\"#合并单元格（td的属性标签）\" class=\"headerlink\" title=\"合并单元格（td的属性标签）\"></a>合并单元格（td的属性标签）</h3><p>跨行合并: rowspan=“合并单元格的个数”<br>跨列合并: colspan=”合并单元格的个数”</p>\n<p>目标单元格: (写合并代码)</p>\n<ul>\n<li>跨行:最上侧单元格为目标单元格,写合并代码</li>\n<li>跨列:最左侧单元格为目标单元格,写合并代码</li>\n</ul>\n<h2 id=\"2-列表标签\"><a href=\"#2-列表标签\" class=\"headerlink\" title=\"2.列表标签\"></a>2.列表标签</h2><h3 id=\"2-1无序列表\"><a href=\"#2-1无序列表\" class=\"headerlink\" title=\"2.1无序列表\"></a>2.1无序列表</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ul为列表标签（<strong>只能嵌套li标签</strong>）</p>\n</li>\n<li><p>li为表项标签（可以放别的标签，相当于一个容器）</p>\n</li>\n</ul>\n<h3 id=\"2-2有序列表（表项排列有序）\"><a href=\"#2-2有序列表（表项排列有序）\" class=\"headerlink\" title=\"2.2有序列表（表项排列有序）\"></a>2.2有序列表（表项排列有序）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>ol标签只能嵌套li标签。</li>\n<li>li标签对相当于一个容器,可以容纳所有元素。</li>\n<li>有序列表会带有自己样式属性,但在实际使用时,我们会使用CSS来设置。</li>\n</ul>\n<h3 id=\"2-3自定义列表\"><a href=\"#2-3自定义列表\" class=\"headerlink\" title=\"2.3自定义列表\"></a>2.3自定义列表</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dl</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dt</span>&gt;</span>关于我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dt</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>发卡网<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>域名分发<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dl</span>&gt;</span>\t<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>在HTML标签中, dl标签用于定义描述列表(或定义列表) , 该标签会与dt (定义项目/名字)和dd( 描述每一个项目/名字)一起使用。</li>\n</ul>\n<h2 id=\"表单标签\"><a href=\"#表单标签\" class=\"headerlink\" title=\"表单标签\"></a>表单标签</h2><h3 id=\"3-1表单的组成\"><a href=\"#3-1表单的组成\" class=\"headerlink\" title=\"3.1表单的组成\"></a>3.1表单的组成</h3><p>注：<u>在HTML中,一个完整的表单通常由表单域、表单控件(也称为表单元素)和提示信息3个部分构成.</u></p>\n<ol>\n<li><u>表单域</u>： 表单域是一个包含表单元素的区域。在HTML标签中，form标签用于定义表单域,以实现用户信息的收集和传递。form会把它范围内的表单元素信息提交给服务器.</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;url地址&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;提交方式&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;表单域名称&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--&gt;各种表单元素控件&lt;/!--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p><u>表单元素</u>：在表单域中可以定义各种表单元素,这些表单元素就是允许用户在表单中输入或者选择的内容控件。</p>\n<ul>\n<li><p><strong>input输入表单元素</strong>：</p>\n<ol>\n<li><p>定义：<code>&lt;input type=&quot;属性值&quot; /&gt;</code>    </p>\n</li>\n<li><p>input标签为单标签</p>\n</li>\n<li><p><u>type属性设置不同的属性值用来指定不同的控件类型</u></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914211117537.png\" alt=\"image-20220914211117537\"></p>\n</li>\n<li><p>其他属性：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914205332692.png\" alt=\"image-20220914205332692\"></p>\n<ul>\n<li><u>name和value是每个表单元素都有的属性值主要给后台人员使用，value为默认值</u>。</li>\n<li><u>name表单元素的名字，要求单选按钮和复选框要有相同的name值。</u></li>\n<li><u>只有单选和复选按钮才有checked属性，网页打开默认选中状态。</u></li>\n<li><u>maxlength规定输入字段中的字符的最大长度。</u></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;get&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;https://fcsy.fit.php&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;翻译&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- text 文本框用户输入任何文字 --&gt;</span><br>        用户名：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">maxlength</span>=<span class=\"hljs-string\">&quot;12&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- password 密码框 用户看不见输入的密码 --&gt;</span><br>        密码：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- radio 单选按钮 可以实现多选一，name是表单元素的名字，相同名字的单选按钮才可以实现多选一 --&gt;</span><br>        性别：男<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;man&quot;</span> <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">&quot;checked&quot;</span>&gt;</span>  女<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;woman&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- checkbox 复选框 可以实现多选 --&gt;</span><br>        爱好：吃饭<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobby&quot;</span>&gt;</span>睡觉<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobby&quot;</span>&gt;</span>学习<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobby&quot;</span> <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">&quot;checked&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- reset 将表单元素的内容全部清空 --&gt;</span><br>        重置：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;reset&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;reset&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;重新填写&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- submit 提交框 可以将表单提交到服务端 --&gt;</span><br>        翻译：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;免费注册&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 普通按钮 配合JavaScript实现脚本的调用 --&gt;</span><br>             <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">javascript</span>=<span class=\"hljs-string\">&quot;index.js&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;获取短信验证码&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>             <span class=\"hljs-comment\">&lt;!-- file 上传文件到该页面 --&gt;</span><br>        上传头像：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- 为文本框添加标签，以便于点击标签就可以选中文本框填写，for的值必须和id的值相等 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>用户名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>select下拉表单元素</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>选项1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>选项2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>选项3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--&gt;...&lt;/!--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>select标签中至少包含一对option标签.</code></p>\n</li>\n<li><p>在option中定义selected=“selected”时，当前项即为默认选中项。</p>\n</li>\n</ol>\n</li>\n<li><p><strong>textarea文本域元素</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">今日反馈:<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span>&gt;</span><br>pink老师,我知道这个反馈留言是textarea来做的<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>通过textarea标签可以轻松地创建多行文本输入框。</code></p>\n</li>\n<li><p>cols= “每行中的字符数” , rows= “显示的行数” ,我们在实际开发中不会使用,都是用CSS来改变大小。</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"iframe标签\"><a href=\"#iframe标签\" class=\"headerlink\" title=\"iframe标签\"></a>iframe标签</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>iframe<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;http://www.lvyestudy.com&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;250&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;200&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><u>在HTML中，我们可以使用iframe标签来实现一个内嵌框架。内嵌框架，就是在当前页面再嵌入另外一个网页。</u></li>\n</ul>\n<hr>\n<h1 id=\"Css\"><a href=\"#Css\" class=\"headerlink\" title=\"Css\"></a>Css</h1><h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h2><ul>\n<li><p>CSS是层叠样式表( Cascading Style Sheets )的简称.有时我们也会称之为CSS样式表或级联样式表。</p>\n</li>\n<li><p>CSS是也是一种标记语言</p>\n</li>\n<li><p>CSS主要用于设置HTML页面中的文本内容(字体、大小对齐方式等)、图片的外形(宽高、边框样式、边距等)以及版面的布局和外观显示样式。</p>\n</li>\n<li><p>CSS让我们的网页更加丰富多彩,布局更加灵活自如。简单理解: CSS可以美化HTML,让HTML更漂亮,让页面布局更简单。</p>\n</li>\n</ul>\n<h3 id=\"1-1CSS语法规范\"><a href=\"#1-1CSS语法规范\" class=\"headerlink\" title=\"1.1CSS语法规范\"></a>1.1CSS语法规范</h3><p><u><strong>CSS规则由两个主要的部分构成:选择器以及一条或多条声明。</strong></u></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220917005326815.png\" alt=\"image-20220917005326815\"></p>\n<ul>\n<li><p>选择器是用于指定 CSS样式的HTML标签,花括号内是对该对象设置的具体样式</p>\n</li>\n<li><p>属性和属性值以“键值对”的形式出现</p>\n</li>\n<li><p>属性是对指定的对象设置的样式属性,例如字体大小文本颜色等</p>\n</li>\n<li><p>属性和属性值之间用英文 “:” 分开</p>\n</li>\n<li><p>多个“键值对”之间用英文”;” 进行区分</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>CSS_Introduction<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;css/css.css&quot;&gt; --&gt;</span>外联式<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"> &lt;!--内嵌式--&gt;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.p1</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: lightcoral;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font</span>:  <span class=\"hljs-number\">50%</span> Arial,<span class=\"hljs-number\">50%</span> Times New Roman;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: auto;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: auto;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.p2</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: aqua;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font</span>: Times New Roman;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span> i am real person!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-2代码风格\"><a href=\"#1-2代码风格\" class=\"headerlink\" title=\"1.2代码风格\"></a>1.2代码风格</h3><ol>\n<li><p>紧凑格式</p>\n<p><code>h3 &#123; color: deeppink; font-size: 20px; &#125;</code></p>\n</li>\n<li><p>展开格式（更直观）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">h3</span> &#123;<br><span class=\"hljs-attribute\">color</span>: pink;<br><span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>空格规范</p>\n<ul>\n<li><code>属性值前面，冒号后面，保留一个空格</code></li>\n<li><code>选择器（标签）和大括号中间保留空格</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-选择器\"><a href=\"#2-选择器\" class=\"headerlink\" title=\"2.选择器\"></a>2.选择器</h2><p>作用： <u>选择标签设置格式属性</u></p>\n<h3 id=\"2-1选择器分类\"><a href=\"#2-1选择器分类\" class=\"headerlink\" title=\"2.1选择器分类\"></a>2.1选择器分类</h3><p><strong>选择器分为基础选择器和复合选择器两个大类,我们这里先讲解一下基础选择器。</strong></p>\n<ul>\n<li>基础选择器是由<u>单个选择器组成的</u></li>\n<li>基础选择器包括:<u>标签选择器、类选择器、id 选择器和通配符选择器</u></li>\n<li></li>\n</ul>\n<h4 id=\"2-1-1标签选择器\"><a href=\"#2-1-1标签选择器\" class=\"headerlink\" title=\"2.1.1标签选择器\"></a>2.1.1标签选择器</h4><p>标签选择器(元素选择器)是指用<u>HTML标签名称</u>作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。</p>\n<p>语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">标签名 &#123;<br>\t属性1: 属性值1;<br>\t属性2: 属性值2;<br>\t属性3 属性值3; ···<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2类选择器\"><a href=\"#2-1-2类选择器\" class=\"headerlink\" title=\"2.1.2类选择器\"></a>2.1.2类选择器</h4><p>如果想要差异化选择不同的标签,单独选一个或者某几个标签 ,可以使用类选择器；<u><strong>样式点定义，结构类调用，一个或多个，开发最常用</strong></u></p>\n<p>语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">.类名 &#123;<br>\t属性1：属性值1；<br>\t···<br>&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>多类名语法：</p>\n<p><code>&lt;div class=&quot;name1 name2 ···&quot;&gt;&lt;/div&gt;</code></p>\n<ul>\n<li>在标签class属性中写多个类名,可以同时被调用</li>\n<li><u>多个类名中间必须用空格分开</u></li>\n<li><u>将相同样式放在一个公共样式里，便于调用，提高代码复用率</u></li>\n</ul>\n<h4 id=\"2-1-3ID选择器\"><a href=\"#2-1-3ID选择器\" class=\"headerlink\" title=\"2.1.3ID选择器\"></a>2.1.3ID选择器</h4><ul>\n<li>id选择器可以为标有特定id的HTML元素指定特定的样式。</li>\n<li>HTML元素以<u>id属性来设置id选择器</u>, CSS中id选择器<u>以“#” 来定义</u>。</li>\n<li>id标签格式只能被调用一次，唯一性（常与js使用）</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">#类名 &#123;<br>\t属性1：属性值1；<br>\t···<br>&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-4通配符选择器\"><a href=\"#2-1-4通配符选择器\" class=\"headerlink\" title=\"2.1.4通配符选择器\"></a>2.1.4通配符选择器</h4><ul>\n<li>在CSS中,通配符选择器<code>使用*定义</code>,它表示选取页面中所有元素(标签)。</li>\n<li>标签不需要主动调用，自动会给所有元素设置该格式</li>\n<li>特殊情况才使用,后面讲解使用场景(以下是清除所有的元素标签的内外边距)</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>\t<span class=\"hljs-attribute\">margin</span>：<span class=\"hljs-number\">0</span>；<br>\t<span class=\"hljs-attribute\">padding</span>：<span class=\"hljs-number\">0</span>；<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-字体属性\"><a href=\"#3-字体属性\" class=\"headerlink\" title=\"3.字体属性\"></a>3.字体属性</h2><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919164322443.png\" alt=\"image-20220919164322443\"></p>\n<h3 id=\"3-1字体类型\"><a href=\"#3-1字体类型\" class=\"headerlink\" title=\"3.1字体类型\"></a>3.1字体类型</h3><ul>\n<li>各种字体之间必须使用英文状态下的<u>逗号隔开</u></li>\n<li>一般情况下，如果有<u>空格隔开的多个单词组成的字体加引号</u>.</li>\n<li>尽量使用系统默认自带字体,保证在任何用户的浏览器中都能正确显示</li>\n<li>开发常见字体：<code>‘Microsoft YaHei&#39;,tahoma,arial, &#39;Hiragino Sans GB&#39;</code>;</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.classname</span> &#123;<br><span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;Microsoft YaHei&#x27;</span>,tahoma,arial, <span class=\"hljs-string\">&#x27;Hiragino Sans GB&#x27;</span>;<br><span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">font-weight</span>: normal/bold/bolder/lighter/number;<br><span class=\"hljs-attribute\">font-style</span>: normal/italic;<br><span class=\"hljs-attribute\">font</span>: font-styLe font-weight font-size/line-height font-family; <br><br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-2字体大小\"><a href=\"#3-2字体大小\" class=\"headerlink\" title=\"3.2字体大小\"></a>3.2字体大小</h3><ul>\n<li><p>px(像素)大小是我们网页的最常用的单位</p>\n</li>\n<li><p>谷歌浏览器默认的文字大小为16px</p>\n</li>\n<li><p>不同浏览器可能默认显示的字号大小不一致,我们尽量给个明确值大小,不要默认大小</p>\n</li>\n<li><p>可以给body指定整个页面文字的大小，但标题标签要单独设置大小</p>\n<h3 id=\"3-3字体粗细\"><a href=\"#3-3字体粗细\" class=\"headerlink\" title=\"3.3字体粗细\"></a>3.3字体粗细</h3></li>\n<li><p>100~900（400 等同于normal,而700等同于bold,注意这个数字后面不跟单位)</p>\n</li>\n<li><p>bold(字体加粗)</p>\n</li>\n<li><p>bolder(字体特粗)</p>\n</li>\n<li><p>lighter(字体变细)</p>\n</li>\n</ul>\n<h3 id=\"3-4文字样式\"><a href=\"#3-4文字样式\" class=\"headerlink\" title=\"3.4文字样式\"></a>3.4文字样式</h3><ul>\n<li>normal默认值，浏览器会显示标准的字体样式font-style: normal;</li>\n<li>italic浏览器会显示斜体的字体样式。</li>\n</ul>\n<h3 id=\"3-5字体复合属性\"><a href=\"#3-5字体复合属性\" class=\"headerlink\" title=\"3.5字体复合属性\"></a>3.5字体复合属性</h3><ul>\n<li>使用font属性时,必须按上面语法格式中的顺序书写，<u><code>不能更换顺序</code></u>，并且各个属性间以<code>空格隔开</code></li>\n<li>不需要设置的属性可以省略(取默认值) , 但<code>必须保留font-size和font-family属性</code>,否则font属性将不起作用</li>\n</ul>\n<h2 id=\"4-文本属性\"><a href=\"#4-文本属性\" class=\"headerlink\" title=\"4.文本属性\"></a>4.文本属性</h2><h3 id=\"4-1文本颜色\"><a href=\"#4-1文本颜色\" class=\"headerlink\" title=\"4.1文本颜色\"></a>4.1文本颜色</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919201737750.png\" alt=\"image-20220919201737750\"></p>\n<h3 id=\"4-2对其文本\"><a href=\"#4-2对其文本\" class=\"headerlink\" title=\"4.2对其文本\"></a>4.2对其文本</h3><p><u>以本身所占据的空间进行对其调整</u></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927225953748.png\" alt=\"image-20220927225953748\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br><span class=\"hljs-attribute\">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-3装饰文本\"><a href=\"#4-3装饰文本\" class=\"headerlink\" title=\"4.3装饰文本\"></a>4.3装饰文本</h3><p>text-decoration属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br>text- decoration: underline;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927231333931.png\" alt=\"image-20220927231333931\"></p>\n<h3 id=\"4-4文本缩进\"><a href=\"#4-4文本缩进\" class=\"headerlink\" title=\"4.4文本缩进\"></a>4.4文本缩进</h3><ul>\n<li><p><strong>text-indent</strong>属性用来指定文本的<u>第一行的缩进</u>,通常是将段落的首行缩进。</p>\n</li>\n<li><p><strong>em</strong>是一个相对单位,就是当前元素( font-size) 1个文字的大小，如果当前元素没有设置大小,则会按照父元素的1个文字大小。</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">P</span>&#123;<br><span class=\"hljs-attribute\">text-indent</span>: <span class=\"hljs-number\">2em</span>;//或者<span class=\"hljs-number\">10px</span> <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-5行间距\"><a href=\"#4-5行间距\" class=\"headerlink\" title=\"4.5行间距\"></a>4.5行间距</h3><p><strong>line-height</strong>属性用于设置行间的距离(行高)。可以控制文字行与行之间的距离.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">p</span>&#123;<br><span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">26px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927232624388.png\" alt=\"image-20220927232624388\"></p>\n<h2 id=\"5-引入方式\"><a href=\"#5-引入方式\" class=\"headerlink\" title=\"5.引入方式\"></a>5.引入方式</h2><h3 id=\"1-行内式\"><a href=\"#1-行内式\" class=\"headerlink\" title=\"1.行内式\"></a>1.行内式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color:black;&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color:white;padding:30px;&quot;</span>&gt;</span>Hostinger Tutorials<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color:white;&quot;</span>&gt;</span>Something usefull here.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>行内样式表(内联样式表)是在元素标签内部的style属性中设定CSS样式。<strong>适合于修改简单样式</strong>.</li>\n<li>style实就是标签的属性</li>\n<li>在双引号中间,写法要符合CSS规范</li>\n<li>可以控制当前的标签设置样式</li>\n</ul>\n<h3 id=\"2-内嵌式\"><a href=\"#2-内嵌式\" class=\"headerlink\" title=\"2.内嵌式\"></a>2.内嵌式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-selector-tag\">p</span> &#123;<span class=\"hljs-attribute\">color</span>:white; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">10px</span>;&#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.center</span> &#123;<span class=\"hljs-attribute\">display</span>: block; <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;&#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-selector-id\">#button-go</span>, <span class=\"hljs-selector-id\">#button-back</span> &#123;<span class=\"hljs-attribute\">border</span>: solid <span class=\"hljs-number\">1px</span> black;&#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>标签理论上可以放在HTML文档的任何地方,但一般会放在文档的标签中</p>\n</li>\n<li><p>通过此种方式,可以防便控制当前整个页面中的元素样式设置</p>\n</li>\n<li><p>代码结构清晰,但是并没有实现结构与样式完全分离</p>\n</li>\n</ul>\n<h3 id=\"3-外联式\"><a href=\"#3-外联式\" class=\"headerlink\" title=\"3.外联式\"></a>3.外联式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span> /&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-调试工具\"><a href=\"#6-调试工具\" class=\"headerlink\" title=\"6.调试工具\"></a>6.调试工具</h2><hr>\n<h1 id=\"Js\"><a href=\"#Js\" class=\"headerlink\" title=\"Js\"></a>Js</h1><p><a href=\"https://github.com/Alleyf\">版权归属: Alleyf</a></p>\n","site":{"data":{}},"wordcount":7818,"more":"<h1 id=\"Html5\"><a href=\"#Html5\" class=\"headerlink\" title=\"Html5\"></a>Html5</h1><h2 id=\"1-表格标签（可以用对齐）\"><a href=\"#1-表格标签（可以用对齐）\" class=\"headerlink\" title=\"1.表格标签（可以用对齐）\"></a>1.表格标签（可以用对齐）</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>表头<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>单元格内的文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        ···<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    ···<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>tr: 行标签</li>\n<li>td: 单元格标签</li>\n<li>th: 表头标签(自动居中加粗显示)</li>\n<li>thead: 用于定义表格的头部。thead标签内部必须拥有tr标签，一般是位于第一行。</li>\n<li>tbody: 用于定义表格的主体,主要用于放数据本体。</li>\n<li>属性：<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909192737.png\" style=\"zoom:25%;\" /></li>\n</ul>\n<h3 id=\"合并单元格（td的属性标签）\"><a href=\"#合并单元格（td的属性标签）\" class=\"headerlink\" title=\"合并单元格（td的属性标签）\"></a>合并单元格（td的属性标签）</h3><p>跨行合并: rowspan=“合并单元格的个数”<br>跨列合并: colspan=”合并单元格的个数”</p>\n<p>目标单元格: (写合并代码)</p>\n<ul>\n<li>跨行:最上侧单元格为目标单元格,写合并代码</li>\n<li>跨列:最左侧单元格为目标单元格,写合并代码</li>\n</ul>\n<h2 id=\"2-列表标签\"><a href=\"#2-列表标签\" class=\"headerlink\" title=\"2.列表标签\"></a>2.列表标签</h2><h3 id=\"2-1无序列表\"><a href=\"#2-1无序列表\" class=\"headerlink\" title=\"2.1无序列表\"></a>2.1无序列表</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>ul为列表标签（<strong>只能嵌套li标签</strong>）</p>\n</li>\n<li><p>li为表项标签（可以放别的标签，相当于一个容器）</p>\n</li>\n</ul>\n<h3 id=\"2-2有序列表（表项排列有序）\"><a href=\"#2-2有序列表（表项排列有序）\" class=\"headerlink\" title=\"2.2有序列表（表项排列有序）\"></a>2.2有序列表（表项排列有序）</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表项3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>ol标签只能嵌套li标签。</li>\n<li>li标签对相当于一个容器,可以容纳所有元素。</li>\n<li>有序列表会带有自己样式属性,但在实际使用时,我们会使用CSS来设置。</li>\n</ul>\n<h3 id=\"2-3自定义列表\"><a href=\"#2-3自定义列表\" class=\"headerlink\" title=\"2.3自定义列表\"></a>2.3自定义列表</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dl</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dt</span>&gt;</span>关于我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dt</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>发卡网<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>域名分发<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dl</span>&gt;</span>\t<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>在HTML标签中, dl标签用于定义描述列表(或定义列表) , 该标签会与dt (定义项目/名字)和dd( 描述每一个项目/名字)一起使用。</li>\n</ul>\n<h2 id=\"表单标签\"><a href=\"#表单标签\" class=\"headerlink\" title=\"表单标签\"></a>表单标签</h2><h3 id=\"3-1表单的组成\"><a href=\"#3-1表单的组成\" class=\"headerlink\" title=\"3.1表单的组成\"></a>3.1表单的组成</h3><p>注：<u>在HTML中,一个完整的表单通常由表单域、表单控件(也称为表单元素)和提示信息3个部分构成.</u></p>\n<ol>\n<li><u>表单域</u>： 表单域是一个包含表单元素的区域。在HTML标签中，form标签用于定义表单域,以实现用户信息的收集和传递。form会把它范围内的表单元素信息提交给服务器.</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;url地址&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;提交方式&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;表单域名称&quot;</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--&gt;各种表单元素控件&lt;/!--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p><u>表单元素</u>：在表单域中可以定义各种表单元素,这些表单元素就是允许用户在表单中输入或者选择的内容控件。</p>\n<ul>\n<li><p><strong>input输入表单元素</strong>：</p>\n<ol>\n<li><p>定义：<code>&lt;input type=&quot;属性值&quot; /&gt;</code>    </p>\n</li>\n<li><p>input标签为单标签</p>\n</li>\n<li><p><u>type属性设置不同的属性值用来指定不同的控件类型</u></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914211117537.png\" alt=\"image-20220914211117537\"></p>\n</li>\n<li><p>其他属性：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914205332692.png\" alt=\"image-20220914205332692\"></p>\n<ul>\n<li><u>name和value是每个表单元素都有的属性值主要给后台人员使用，value为默认值</u>。</li>\n<li><u>name表单元素的名字，要求单选按钮和复选框要有相同的name值。</u></li>\n<li><u>只有单选和复选按钮才有checked属性，网页打开默认选中状态。</u></li>\n<li><u>maxlength规定输入字段中的字符的最大长度。</u></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;get&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;https://fcsy.fit.php&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;翻译&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- text 文本框用户输入任何文字 --&gt;</span><br>        用户名：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">maxlength</span>=<span class=\"hljs-string\">&quot;12&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- password 密码框 用户看不见输入的密码 --&gt;</span><br>        密码：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- radio 单选按钮 可以实现多选一，name是表单元素的名字，相同名字的单选按钮才可以实现多选一 --&gt;</span><br>        性别：男<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;man&quot;</span> <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">&quot;checked&quot;</span>&gt;</span>  女<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;woman&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- checkbox 复选框 可以实现多选 --&gt;</span><br>        爱好：吃饭<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobby&quot;</span>&gt;</span>睡觉<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobby&quot;</span>&gt;</span>学习<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobby&quot;</span> <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">&quot;checked&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- reset 将表单元素的内容全部清空 --&gt;</span><br>        重置：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;reset&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;reset&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;重新填写&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- submit 提交框 可以将表单提交到服务端 --&gt;</span><br>        翻译：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;免费注册&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!-- 普通按钮 配合JavaScript实现脚本的调用 --&gt;</span><br>             <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">javascript</span>=<span class=\"hljs-string\">&quot;index.js&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;获取短信验证码&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>             <span class=\"hljs-comment\">&lt;!-- file 上传文件到该页面 --&gt;</span><br>        上传头像：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;file&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;index&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- 为文本框添加标签，以便于点击标签就可以选中文本框填写，for的值必须和id的值相等 --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>用户名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>select下拉表单元素</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>选项1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>选项2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>选项3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--&gt;...&lt;/!--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>select标签中至少包含一对option标签.</code></p>\n</li>\n<li><p>在option中定义selected=“selected”时，当前项即为默认选中项。</p>\n</li>\n</ol>\n</li>\n<li><p><strong>textarea文本域元素</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">今日反馈:<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span>&gt;</span><br>pink老师,我知道这个反馈留言是textarea来做的<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>通过textarea标签可以轻松地创建多行文本输入框。</code></p>\n</li>\n<li><p>cols= “每行中的字符数” , rows= “显示的行数” ,我们在实际开发中不会使用,都是用CSS来改变大小。</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"iframe标签\"><a href=\"#iframe标签\" class=\"headerlink\" title=\"iframe标签\"></a>iframe标签</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>iframe<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;http://www.lvyestudy.com&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;250&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;200&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><u>在HTML中，我们可以使用iframe标签来实现一个内嵌框架。内嵌框架，就是在当前页面再嵌入另外一个网页。</u></li>\n</ul>\n<hr>\n<h1 id=\"Css\"><a href=\"#Css\" class=\"headerlink\" title=\"Css\"></a>Css</h1><h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h2><ul>\n<li><p>CSS是层叠样式表( Cascading Style Sheets )的简称.有时我们也会称之为CSS样式表或级联样式表。</p>\n</li>\n<li><p>CSS是也是一种标记语言</p>\n</li>\n<li><p>CSS主要用于设置HTML页面中的文本内容(字体、大小对齐方式等)、图片的外形(宽高、边框样式、边距等)以及版面的布局和外观显示样式。</p>\n</li>\n<li><p>CSS让我们的网页更加丰富多彩,布局更加灵活自如。简单理解: CSS可以美化HTML,让HTML更漂亮,让页面布局更简单。</p>\n</li>\n</ul>\n<h3 id=\"1-1CSS语法规范\"><a href=\"#1-1CSS语法规范\" class=\"headerlink\" title=\"1.1CSS语法规范\"></a>1.1CSS语法规范</h3><p><u><strong>CSS规则由两个主要的部分构成:选择器以及一条或多条声明。</strong></u></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220917005326815.png\" alt=\"image-20220917005326815\"></p>\n<ul>\n<li><p>选择器是用于指定 CSS样式的HTML标签,花括号内是对该对象设置的具体样式</p>\n</li>\n<li><p>属性和属性值以“键值对”的形式出现</p>\n</li>\n<li><p>属性是对指定的对象设置的样式属性,例如字体大小文本颜色等</p>\n</li>\n<li><p>属性和属性值之间用英文 “:” 分开</p>\n</li>\n<li><p>多个“键值对”之间用英文”;” 进行区分</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>CSS_Introduction<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;css/css.css&quot;&gt; --&gt;</span>外联式<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"> &lt;!--内嵌式--&gt;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.p1</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: lightcoral;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font</span>:  <span class=\"hljs-number\">50%</span> Arial,<span class=\"hljs-number\">50%</span> Times New Roman;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: auto;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: auto;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.p2</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">color</span>: aqua;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font</span>: Times New Roman;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span> i am real person!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-2代码风格\"><a href=\"#1-2代码风格\" class=\"headerlink\" title=\"1.2代码风格\"></a>1.2代码风格</h3><ol>\n<li><p>紧凑格式</p>\n<p><code>h3 &#123; color: deeppink; font-size: 20px; &#125;</code></p>\n</li>\n<li><p>展开格式（更直观）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">h3</span> &#123;<br><span class=\"hljs-attribute\">color</span>: pink;<br><span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>空格规范</p>\n<ul>\n<li><code>属性值前面，冒号后面，保留一个空格</code></li>\n<li><code>选择器（标签）和大括号中间保留空格</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-选择器\"><a href=\"#2-选择器\" class=\"headerlink\" title=\"2.选择器\"></a>2.选择器</h2><p>作用： <u>选择标签设置格式属性</u></p>\n<h3 id=\"2-1选择器分类\"><a href=\"#2-1选择器分类\" class=\"headerlink\" title=\"2.1选择器分类\"></a>2.1选择器分类</h3><p><strong>选择器分为基础选择器和复合选择器两个大类,我们这里先讲解一下基础选择器。</strong></p>\n<ul>\n<li>基础选择器是由<u>单个选择器组成的</u></li>\n<li>基础选择器包括:<u>标签选择器、类选择器、id 选择器和通配符选择器</u></li>\n<li></li>\n</ul>\n<h4 id=\"2-1-1标签选择器\"><a href=\"#2-1-1标签选择器\" class=\"headerlink\" title=\"2.1.1标签选择器\"></a>2.1.1标签选择器</h4><p>标签选择器(元素选择器)是指用<u>HTML标签名称</u>作为选择器,按标签名称分类,为页面中某一类标签指定统一的CSS样式。</p>\n<p>语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">标签名 &#123;<br>\t属性1: 属性值1;<br>\t属性2: 属性值2;<br>\t属性3 属性值3; ···<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2类选择器\"><a href=\"#2-1-2类选择器\" class=\"headerlink\" title=\"2.1.2类选择器\"></a>2.1.2类选择器</h4><p>如果想要差异化选择不同的标签,单独选一个或者某几个标签 ,可以使用类选择器；<u><strong>样式点定义，结构类调用，一个或多个，开发最常用</strong></u></p>\n<p>语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">.类名 &#123;<br>\t属性1：属性值1；<br>\t···<br>&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>多类名语法：</p>\n<p><code>&lt;div class=&quot;name1 name2 ···&quot;&gt;&lt;/div&gt;</code></p>\n<ul>\n<li>在标签class属性中写多个类名,可以同时被调用</li>\n<li><u>多个类名中间必须用空格分开</u></li>\n<li><u>将相同样式放在一个公共样式里，便于调用，提高代码复用率</u></li>\n</ul>\n<h4 id=\"2-1-3ID选择器\"><a href=\"#2-1-3ID选择器\" class=\"headerlink\" title=\"2.1.3ID选择器\"></a>2.1.3ID选择器</h4><ul>\n<li>id选择器可以为标有特定id的HTML元素指定特定的样式。</li>\n<li>HTML元素以<u>id属性来设置id选择器</u>, CSS中id选择器<u>以“#” 来定义</u>。</li>\n<li>id标签格式只能被调用一次，唯一性（常与js使用）</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">#类名 &#123;<br>\t属性1：属性值1；<br>\t···<br>&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-4通配符选择器\"><a href=\"#2-1-4通配符选择器\" class=\"headerlink\" title=\"2.1.4通配符选择器\"></a>2.1.4通配符选择器</h4><ul>\n<li>在CSS中,通配符选择器<code>使用*定义</code>,它表示选取页面中所有元素(标签)。</li>\n<li>标签不需要主动调用，自动会给所有元素设置该格式</li>\n<li>特殊情况才使用,后面讲解使用场景(以下是清除所有的元素标签的内外边距)</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>\t<span class=\"hljs-attribute\">margin</span>：<span class=\"hljs-number\">0</span>；<br>\t<span class=\"hljs-attribute\">padding</span>：<span class=\"hljs-number\">0</span>；<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-字体属性\"><a href=\"#3-字体属性\" class=\"headerlink\" title=\"3.字体属性\"></a>3.字体属性</h2><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919164322443.png\" alt=\"image-20220919164322443\"></p>\n<h3 id=\"3-1字体类型\"><a href=\"#3-1字体类型\" class=\"headerlink\" title=\"3.1字体类型\"></a>3.1字体类型</h3><ul>\n<li>各种字体之间必须使用英文状态下的<u>逗号隔开</u></li>\n<li>一般情况下，如果有<u>空格隔开的多个单词组成的字体加引号</u>.</li>\n<li>尽量使用系统默认自带字体,保证在任何用户的浏览器中都能正确显示</li>\n<li>开发常见字体：<code>‘Microsoft YaHei&#39;,tahoma,arial, &#39;Hiragino Sans GB&#39;</code>;</li>\n</ul>\n<p>语法：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.classname</span> &#123;<br><span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;Microsoft YaHei&#x27;</span>,tahoma,arial, <span class=\"hljs-string\">&#x27;Hiragino Sans GB&#x27;</span>;<br><span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">font-weight</span>: normal/bold/bolder/lighter/number;<br><span class=\"hljs-attribute\">font-style</span>: normal/italic;<br><span class=\"hljs-attribute\">font</span>: font-styLe font-weight font-size/line-height font-family; <br><br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-2字体大小\"><a href=\"#3-2字体大小\" class=\"headerlink\" title=\"3.2字体大小\"></a>3.2字体大小</h3><ul>\n<li><p>px(像素)大小是我们网页的最常用的单位</p>\n</li>\n<li><p>谷歌浏览器默认的文字大小为16px</p>\n</li>\n<li><p>不同浏览器可能默认显示的字号大小不一致,我们尽量给个明确值大小,不要默认大小</p>\n</li>\n<li><p>可以给body指定整个页面文字的大小，但标题标签要单独设置大小</p>\n<h3 id=\"3-3字体粗细\"><a href=\"#3-3字体粗细\" class=\"headerlink\" title=\"3.3字体粗细\"></a>3.3字体粗细</h3></li>\n<li><p>100~900（400 等同于normal,而700等同于bold,注意这个数字后面不跟单位)</p>\n</li>\n<li><p>bold(字体加粗)</p>\n</li>\n<li><p>bolder(字体特粗)</p>\n</li>\n<li><p>lighter(字体变细)</p>\n</li>\n</ul>\n<h3 id=\"3-4文字样式\"><a href=\"#3-4文字样式\" class=\"headerlink\" title=\"3.4文字样式\"></a>3.4文字样式</h3><ul>\n<li>normal默认值，浏览器会显示标准的字体样式font-style: normal;</li>\n<li>italic浏览器会显示斜体的字体样式。</li>\n</ul>\n<h3 id=\"3-5字体复合属性\"><a href=\"#3-5字体复合属性\" class=\"headerlink\" title=\"3.5字体复合属性\"></a>3.5字体复合属性</h3><ul>\n<li>使用font属性时,必须按上面语法格式中的顺序书写，<u><code>不能更换顺序</code></u>，并且各个属性间以<code>空格隔开</code></li>\n<li>不需要设置的属性可以省略(取默认值) , 但<code>必须保留font-size和font-family属性</code>,否则font属性将不起作用</li>\n</ul>\n<h2 id=\"4-文本属性\"><a href=\"#4-文本属性\" class=\"headerlink\" title=\"4.文本属性\"></a>4.文本属性</h2><h3 id=\"4-1文本颜色\"><a href=\"#4-1文本颜色\" class=\"headerlink\" title=\"4.1文本颜色\"></a>4.1文本颜色</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220919201737750.png\" alt=\"image-20220919201737750\"></p>\n<h3 id=\"4-2对其文本\"><a href=\"#4-2对其文本\" class=\"headerlink\" title=\"4.2对其文本\"></a>4.2对其文本</h3><p><u>以本身所占据的空间进行对其调整</u></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927225953748.png\" alt=\"image-20220927225953748\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br><span class=\"hljs-attribute\">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-3装饰文本\"><a href=\"#4-3装饰文本\" class=\"headerlink\" title=\"4.3装饰文本\"></a>4.3装饰文本</h3><p>text-decoration属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br>text- decoration: underline;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927231333931.png\" alt=\"image-20220927231333931\"></p>\n<h3 id=\"4-4文本缩进\"><a href=\"#4-4文本缩进\" class=\"headerlink\" title=\"4.4文本缩进\"></a>4.4文本缩进</h3><ul>\n<li><p><strong>text-indent</strong>属性用来指定文本的<u>第一行的缩进</u>,通常是将段落的首行缩进。</p>\n</li>\n<li><p><strong>em</strong>是一个相对单位,就是当前元素( font-size) 1个文字的大小，如果当前元素没有设置大小,则会按照父元素的1个文字大小。</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">P</span>&#123;<br><span class=\"hljs-attribute\">text-indent</span>: <span class=\"hljs-number\">2em</span>;//或者<span class=\"hljs-number\">10px</span> <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-5行间距\"><a href=\"#4-5行间距\" class=\"headerlink\" title=\"4.5行间距\"></a>4.5行间距</h3><p><strong>line-height</strong>属性用于设置行间的距离(行高)。可以控制文字行与行之间的距离.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">p</span>&#123;<br><span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">26px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220927232624388.png\" alt=\"image-20220927232624388\"></p>\n<h2 id=\"5-引入方式\"><a href=\"#5-引入方式\" class=\"headerlink\" title=\"5.引入方式\"></a>5.引入方式</h2><h3 id=\"1-行内式\"><a href=\"#1-行内式\" class=\"headerlink\" title=\"1.行内式\"></a>1.行内式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;background-color:black;&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color:white;padding:30px;&quot;</span>&gt;</span>Hostinger Tutorials<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color:white;&quot;</span>&gt;</span>Something usefull here.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>行内样式表(内联样式表)是在元素标签内部的style属性中设定CSS样式。<strong>适合于修改简单样式</strong>.</li>\n<li>style实就是标签的属性</li>\n<li>在双引号中间,写法要符合CSS规范</li>\n<li>可以控制当前的标签设置样式</li>\n</ul>\n<h3 id=\"2-内嵌式\"><a href=\"#2-内嵌式\" class=\"headerlink\" title=\"2.内嵌式\"></a>2.内嵌式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-selector-tag\">p</span> &#123;<span class=\"hljs-attribute\">color</span>:white; <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">10px</span>;&#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-selector-class\">.center</span> &#123;<span class=\"hljs-attribute\">display</span>: block; <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;&#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    <span class=\"hljs-selector-id\">#button-go</span>, <span class=\"hljs-selector-id\">#button-back</span> &#123;<span class=\"hljs-attribute\">border</span>: solid <span class=\"hljs-number\">1px</span> black;&#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>标签理论上可以放在HTML文档的任何地方,但一般会放在文档的标签中</p>\n</li>\n<li><p>通过此种方式,可以防便控制当前整个页面中的元素样式设置</p>\n</li>\n<li><p>代码结构清晰,但是并没有实现结构与样式完全分离</p>\n</li>\n</ul>\n<h3 id=\"3-外联式\"><a href=\"#3-外联式\" class=\"headerlink\" title=\"3.外联式\"></a>3.外联式</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/css&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;style.css&quot;</span> /&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-调试工具\"><a href=\"#6-调试工具\" class=\"headerlink\" title=\"6.调试工具\"></a>6.调试工具</h2><hr>\n<h1 id=\"Js\"><a href=\"#Js\" class=\"headerlink\" title=\"Js\"></a>Js</h1><p><a href=\"https://github.com/Alleyf\">版权归属: Alleyf</a></p>\n"},{"title":"Java_Notes","date":"2022-09-10T02:00:00.000Z","sticky":50,"excerpt":"some notation about java。","_content":"\n# 第一章、计算机语言及系统概述\n\n## 知识点\n\n1. <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907091018.png\" style=\"zoom: 33%;\" />\n1. 特点：**Write once，run anywhere！**\n- **java：java program->执行编译后的程序**\n-  **javac：java program.java->编译该程序生成.class文件**\n-  **javadoc：javadoc program->生成该程序的html文档**\n3. <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135804.png\" style=\"zoom:33%;\" />\n3. <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135836.png\" style=\"zoom:33%;\" />\n## 代码示例\n```java\npublic class HelloWorld{\n    public static void main(String[] args) \n    {\n        System.out.println(\"Hello world!\");\n    }\n}\n```\n# 第二章、数据类型及变量\n\n## 标识符\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135908.png\" style=\"zoom:33%;\" />\n\n## 关键字\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135913.png\" style=\"zoom:33%;\" />\n\n```java\n    public static void DefineKey(String[] args) throws Exception {\n        int i=0;\n        int _j=1;\n        int $k=2;\n//        int 1i=0;(NO)\n//        int 中国=1;(不建议)\n        byte a=1;\n        double b=0.1;\n    }\n```\n\n## 数据类型\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135920.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135925.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135953.png\" style=\"zoom:33%;\" />\n\n```java\n    public static void BaseData(String[] args) throws Exception {\n        int i=123;//默认十进制\n        int j=0123;//八进制\n        int k=0x123;//16进制\n        long c=55555;\n        long d=555555555555555L;\n        double e=521e2;\n        char f='\\u0064';\n        System.out.println(f);\n    }\n```\n\n## 进制转换\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135958.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140005.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140009.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140012.png\" style=\"zoom:33%;\" />\n\n## 类型转换：\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140707.png\" style=\"zoom: 33%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140020.png\" style=\"zoom: 50%;\" />\n**提升转换不丢失精度;(type)var强制类型转换**\n\n```java\n    public static void TypeChange(String[] args) throws Exception {\n        double s=3.1415;\n        int n=(int)s;\n        char b=(char)n;\n        char a='a';\n        String c;\n        System.out.println(n+b);\n        int money=1000000000;//int型为4个字节最大为21亿，超出则异常\n        int years=20;\n        double total=(double)(money)*years;//提前将其中一个整形转换为浮点型以避免精度缺失\n        System.out.println(total);\n    }\n```\n\n## 变量\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907143232.png\" style=\"zoom:33%;\" />\n\n最终变量（必须初始化）：**final** type variable；variable=value；\n\n**定义时初始化或构造函数初始化**\n\n## 常量\n\n- **只能被初始化一次**\n- **常量名全部大写，单词过多使用下划线**\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907142721.png\" style=\"zoom:33%;\" />\n\n## 运算符与表达式\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907150838.png\" style=\"zoom:33%;\" />\n\n## 输出进制格式化\n\n```java\nSystem.out.println(\"二进制输出\"+Integer.toBinaryString(a));\nSystem.out.println(\"八进制输出\"+Integer.toOctalString(a));\nSystem.out.println(\"十六进制输出\"+Integer.toHexString(a));\n```\n\n## 数组\n\n### 一维数组\n\n- 定义：**type[] arrayname = new type[num] 或  type arrayname[] = new type[num]**\n\n- **初始化默认值为零**\n\n- **数组直接赋值属于传引用，指向同一个地址空间**\n\n### 二维数组\n\n- 定义：**type[][] arrayname = new type[m][n]**\n- 可以不规则，给不同行分配不同大小的列\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909084420.png\" style=\"zoom:25%;\" />\n\n\n## 容器遍历元素\n\n```java\nfor (int value : fib)\n/ /vaue获得fib数组每个元素,\n/ /相当于fib[i]\n\tSystem.out,print(\" \" +value);\n```\n\n## 方法（递归）\n\n- **递归方法适合用于分段函数类型的问题求解，必须有递归头和递归体**\n- **递归和堆栈原理类似，递归也可以通过堆栈实现**\n\n```java\n//斐波那契数列第n项\npublic class fib {\n    public static void main(String[] args)\n    {\n        System.out.println(sequence(10));\n    }\n    public static int sequence(int n)\n    {\n        if(n == 0|n == 1)\n            return n;\n        else if(n>=2)\n            return sequence(n-2)+sequence(n - 1);\n        else\n        {\n            System.out.println(\"Index error\");\n            return 0;\n        }\n    }\n}\n```\n\n## 字符串\n\n1. 字符串常量“abc”\n\n2. String是字符串类\n\n3. `s.charAt(index)//索引下标的值`\n\n4. 字符串变量及运算\n\n   - 赋值运算\n\n     ​\tString str = \"abc\";\n\n     ​\tString str2 = str;\n\n   - 连接运算+ +=\n\n     ​    str = \"abc\" + \"xyz\"; //str的值为\"abcxyz\"\n\n5. **字符串不是字符数组**\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909093029.png\" style=\"zoom:25%;\" />\n\n## API文档\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909092844.png\" style=\"zoom:25%;\" />\n\n# 第三章、类的封装、继承和多态\n\n## 类和对象\n\n类的特点：`具有封装性，继承性，多态性和抽象性。`\n\n对象：`对象的实例。`\n\n注：\n\n- Java中进行方法调用中传递参数时，**遵循值传递的原则**：基本类型传递的是该 数据值本身。引用类型传递的是对对象的引用，而不是对象本身。\n- 与c++类似，类的定义和调用要分开在两个文件中，类的声明与定义在一个文件，类的调用要在另外一个文件的类中定义一个类对象: `classname objname=new classname()`\n\n```java\n//类的声明\npackage ch4;\n\npublic class people {\n    protected String name;\n    private int age;\n    public String getname() {\n        return name;\n    }\n    public int getage() {\n        return age;\n    }\n    public void setname(String name) {\n        this.name = name;\n    }\n    public void setage(int age) {\n        this.age = age;\n    }\n}\n```\n\n```java\n//类的调用\npackage ch4;\n\nimport java.util.Scanner;\n\npublic class callpeople {\n    public static void main(String[] args) {\n        people zyk = new people();\n        people fcs = new people();\n        fcs = zyk;\n        zyk.setname(\"赵逸坤\");\n        zyk.setage(21);\n        System.out.println(zyk.getname()+\"今年\"+zyk.getage()+\"岁了\");\n        System.out.println(zyk);\n        System.out.println(fcs);\n//        Scanner in = new Scanner(System.in);\n//        String name = in.next();\n//        System.out.println(in);\n    }\n}\n\n```\n\n## 类的封装\n\n### 1构造方法和析构方法\n\n```java\n//在类里进行定义构造方法，用this对对象引用，从而避免与形参名的冲突\n//super为隐式参数，为对父类的引用\npublic people(String name,int age) {\n    this.name = name;\n    this.age = age;\n}\n//析构方法\nprotected void finalize() {\n    // 对象的清理工作\n}\n//给对象赋值为null，则对象的内存将会释放，但静态方法和变量不会释放\n```\n\n**方法和运算符重载：**\n\n`通过参数列表中参数的类型、个数和顺序的不同进行区别`\n\n### 2对象的引用和运算\n\n- instanceof对象运算符       eg：`d instanceof MyDate`\n- super为隐式参数，为对父类的引用\n- this为隐式参数，为对对象本身的引用\n- 普通方法中，this总是指向调用该方法的对象; 构造方法中，this总是指向正要初始化的对象；this不能用于static方法；可以在一个构造方法中通过this调用其它构造方法，且必须是构造方法中 的第一条语句\n\n### 3访问控制-隐藏/封装\n\n- 隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用， 从而提高系统的可扩展性、可维护性。\n- boolean变量的get方法是is开头；常量或 static 变量公开\n- default：默认访问控制属性，什么都没加就是该控制符。有的书上说 friendly、package，这都是一个意思，都不能真的写出来，如果什么访 问修饰符都不加，就是default/friendly/package\n- Java的访问控制是停留在编译层，也就是它不会在.class文件中留下任何 痕迹，只在编译的时候进行访问控制的检查。其实，通过反射的手段，可 以访问任何包下任何类中的成员，例如，访问类中的私有成员也是可以的。说明访问控制是`伪封装（类似于python）`。\n\n#### 类的访问权限：\n\n  **只有public和缺省两种**\n\n  eg：public class MyDate 或class MyDate_ex\n#### 类成员和函数的访问权限：\n\n  <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914154845348.png\" alt=\"image-20220914154845348\" style=\"zoom:67%;\" />\n\n#### 声明set()和get()方法存取对象的属性\n\n### 4静态成员\n\n- 静态成员是属于类本身的公共属性或方法。\n\n- 静态成员变量也叫类属性或类变量，静态成员变量调用时可以对象.类属性或类名.类属性来访问。\n\n- 静态方法调用时只能通过类名.类方法调用，在调用该方法时，不会将对象的引用（this）传递给它，所以在 static 方法中不可访问非static的成员，静态方法只能访问静态成员变量或静态方法。\n\n-  父类中是静态方法，子类中不能覆盖为非静态方法；在符合覆盖规则的前提下， 在父子类中，父类中的静态方法可以被子类中的静态方法覆盖，但无多态。 （在使用对象调用静态方法时，实则是调用编译时类型的静态方法）。\n\n- 父子类中，静态方法只能被静态方法覆盖，父子类中，非静态方法只能被非静 态方法覆盖。\n\n#### 静态初始化块 static {}\n\n注：如果希望加载后，对整个类进行某些初始化操作，可以使用static初始化块\n\n1. 是在类初始化时执行，不是在创建对象时执行。 \n2. 静态初始化块中不能访问非static成员变量。\n3. 执行顺序：上溯到Object类，先执行Object的静态初始化块，再向下执行子 类的静态初始化块，直到我们的类的静态初始化块为止。\n\n\n## 类的继承\n\n- <u>通过extends父类(单继承)关键词或implements接口(多继承)</u>\n\n```java\npublic class Student extends Person\n{\nString speciality;\n//专业\n}\n```\n\n- **不支持多继承**\n\n- 在java（C++-）中类只有单继承，没有像C++那样的多继承。多 继承，就是为了实现代码的复用性，却引入了复杂性，使得系统类之间 的关系混乱；Java中的多继承，可以通过接口实现\n\n- 如果定义一个类时，没有调用extends，则它的父类是java.lang.Object。Object类是所有java类的根基类。\n\n\n\n### 1.方法的重写\n\n- 在子类中可以根据需要对父类中继承来的方法进行重写。\n\n- 重写方法必须和被重写方法具有相同方法名称、参数列表。通过子类去调用该\n  方法，会调用重写方法而不是被重写方法(叫做重写方法覆盖被重写方法)。\n  \n- 可以在子类重写方法中调用被重写方法: super关键字。\n\n- 重写方法的访问权限，子类大于等于父类(由于多态)。\n\n- 重写方法的返回值类型和声明异常类型，子类小于等于父类。\n\n- 对象.方法() :先在本类内部找是否有该方法，如果没有，到直接父类去找,\n  如果还没有，则一直往上层找，一直找到Object， 如果还没有，则报错。\n  \n- 子类继承父类的成员变量,子类继承父类除构造方法以外的成员方法,子类不能继承父类的构造方法,子类可以增加成员，可以重定义从父类继承来的成员，但不能删除它们。\n\n### 2.子类对父类的访问权限\n\n- 子类不能访问父类的私有成员( private )\n\n- 子类能够访问父类的公有成员( public)和保护成员(protected)\n\n- 子类对父类的缺省权限成员的访问控制，以包为界分两种情况，可以访问当前包中成员。\n\n### 3.super引用\n\n1. 调用父类的构造方法：super([参数列表])\n\n2. super是直接父类对象的引用，和this类似。\n\n3. 引用父类同名成员\n\n   - 子类隐藏父类成员变量：super.成员变量\n\n   - 子类覆盖父类成员方法：super.成员方法([参数列表])\n\n4. 构造方法:任何类的构造方法中，若是构造函数的第一行代码没有显式调用\n   super(..);那么Java默认都会调用super();作为父类的初始化函数。所以这里的super()加不加都会无所谓。( 内存分析，wrap:new对象的时候采用子类包裹父类的结构)\n\n5. 同一个构造方法里面不能同时调用super()和this()。\n\n6. 在本类构造方法中通过super()调用，会一直 上溯到Object()这个构造函数,\n   然后按类层级，依次向下执行各层级构造函数中剩下的代码，直至最低层级的\n   构造函数。同this()一样，super()方法也应该放到构造方法的第一行。\n\n7. new一个类的对象的时候，通过构造方法的从上至下的依次调用，就依次建\n   立了新的根对象、父类对象和自身对象，其中，this指向新建的对象本身，\n   super指向新建的直接父类对象本身。\n\n### 4.组合VS继承\n\n1. “is-a\"关系使用继承，“has-a\"关系使用组合:计算机类、主板类。可以通过在计算机类中增加主板属性来复用主板类的代码。\n\n2. 如果仅仅从代码复用的角度考虑，组合完全可以替代继承。\n\n3. 所谓组合，就是把要组合的另一个类作为属性放到类里面。\n\n4. 是就用继承、有就用组合。\n\n#### 优缺点\n\n![image-20220916083605738](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916083605738.png)\n\n## 类的多态\n\n### 1.子类重定义父类成员\n\n- 子类隐藏父类成员变量\n- 子类覆盖父类成员方法\n  - 覆盖(override)是指子类声明并实现父类中的同名方法并且参数列表也完全相同。子类继承并重载父类成员方法\n  - 重载.(overload)是指同一个类中的多个方法可以同名但参数列表必须不同。\n\n### 2.类型的多态\n\n- 子类对象即是父类对象\n\n  `new Student() instanceof Person //true`\n\n  `new Person() instanceof Student //false`\n\n- 父类对象引用子类对象\n\n  `Person p = new Student(); / /赋值相容`\n  `Student s = new Person();//语法错误`\n  `Object obj = new Person();/ /赋值相容`\n\n### 3.编译时的多态和运行时的多态\n\n- 编译时多态性\n\n  <u>方法重载都是编译时多态。</u>\n\n  <u>方法覆盖表现出两种多态性，当对象引用本类实例时，为编译时多态，否则为运行时多态。</u>\n\n  ```java\n  Person p = new Person(.....);\n  p.toString()\n  //执行Person类的toString()\n  Student s= new Studen(.....);\n  s.toString()\n  //执行Student类的toString()\n  ```\n\n- 运行时多态性\n\n  <u>自下而上搜索，有则调用无责溯源</u>\n\n  ![image-20220916085315869](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916085315869.png)\n\n### 4.多态的方法实现\n\n![image-20220921141638509](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921141638509.png)\n\n- 子类类型的对象地址可以直接赋给父类类型的引用对象，这个称为向上转型，是实现多态的基础。\n\n- A instanceof B: A对象的类型是否是B类型，只有在A对象的类型和B类型相同，或为父子类型时，编译不报错。而在运行时，只有A对象类型为B类型的子类型或者就是B类型时，结果才返回true。\n- 内存分析(例子: myServlet) :调用父类的service(),然后调用子类的doGet() (注意: this关键字指向整个最终包裹对象，即最外层的子对象;而在包裹对象中，每-一层对象通过super关键字指向内一层的父对象)。\n- 多态指的是方法的多态(到底调用那个方法，运行时决定)，属性没有多态。\n- 针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。\n\n## 抽象类\n\n### 要点\n\n![image-20220921145517282](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921145517282.png)\n\n### 用法\n\n```java\npublic abstract class ClosedFigure\n//闭合图形抽象类\n{\npublic abstract double area( );\n//计算面积，抽象方法，以分号\";\"结束\n}\n```\n\n1. <u>构造方法、静态成员方法</u>不能被声明为抽象\n   方法。\n2. 一个非抽象类必须实现从父类继承来的所有\n   抽象方法。\n3. 不能创建抽象类的实例。例如:`ClosedFigure g = new ClosedFigure();` \n4. <u>abstract修饰方式的初衷就是要求其子类覆盖(实现)这个方法，并且调用时可以以多态方式调用子类覆盖后的方法(抽象类主要和多态技术相结合)</u>，即抽象方法必须在其子类中实现，除非子类本身也是抽象类。<u>abstract不允许修饰成员变量</u>，因为成员变量也没有重写这个概念!\n5. 抽象类可以只有具体方法，也可以全是抽象方法，子类继承抽象类也可以是抽象类，但要实例化的类不能是抽象类。\n6. 不能放在一起的修饰符: <u>final和abstract, private和abstract, static和abstract</u>，因为abstract修饰的方法是必须在其子类中实现(覆盖)，才能以多态方式调用，以上修饰符在修饰方法时期子类都覆盖不了这个方法，<u>final是不可以覆盖</u>，<u>private是不能</u>\n   <u>够继承到子类</u>，所以也就不能覆盖，<u>static是可以覆盖的，但是在调用时会调用编译时类型的方法，因为调用的是父类的方法，而父类的方法又是抽象的方法，又不能够调用</u>，所以上面的修饰符不能放在一起。\n\n## 最终类\n\n1. 声明最终类， 不能被继承\n   \n   ```java\n   public final class Math\n   //数学类，最终类\n   public class MyMath extends Math\n   //语法错\n   public final class Circle extends Ellipse / /最终类\n   ```\n   \n   \n   \n1. 声明最终方法,不能被子类覆盖\n\n   ```java\n   public class Circle extends Ellipse\n   \n   / /非最终类\n   \n   {\n   \n   public final double area( )\n   \n   //最终方法\n   \n   }\n   ```\n   \n### final关键词\n\n1. final修饰变量时表示常量。<u>变量被final修饰，就会变成常量</u>(常量应大写)，一旦赋值不能改变(可以在<u>初始化时直接赋值</u>，也可以在<u>构造方法里赋值</u>，只能在这两种方法里二选一，<u>必须为常量赋值</u>) ;final的常量不会有默认初始值，对于直接在初始化时赋值方式，final修饰符常和static修饰符一起使用。\n2. final修饰方法( 最终方法)时表示<u>该方法不可被子类重写</u>。但是<u>可以被重载</u>。\n3. <u>final修饰类</u>(最终类)时表示修饰的<u>类不能有子类</u>，不能被继承。比如Math、String。 final类中的方法也都是final的。\n\n## 接口类\n\n<u>如果一个抽象类没有字段，所有方法全部都是抽象方法，就可以将该抽象类改为接口。</u>\n\n类不能多继承类，但可以实现多个接口，一个接口可以继承多个接口。\n\n接口可以看成<u>**狭义抽象**</u>，将设计与实现彻底分离。\n\n通过给类新增接口来改变类，而不影响子类。\n\n接口不能有构造方法，抽象类可以有。\n\n接口可以定义`default`方法（有方法实体，子类可以不用重写）。\n\n```java\ninterface Person{\nvoid run() ;\nString getName() ;\n}\n```\n\n类实现接口：\n\n```java\nclass Student implements Person {\n    private String name;\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    @Override//规定下面的编译为重写\n    public void run() {\n        System.out.println(this.name + \" run\");\n    }\n\n    @Override\n    public String getName() {\n        return this.name;\n    }\n}\n```\n\n### 抽象类和接口的对比\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921155545894.png\" alt=\"image-20220921155545894\" style=\"zoom: 80%;\" />\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Person p = new Student(\"Xiao Ming\");\n        p.run();\n    }\n}\n\ninterface Person {\n    String getName();\n    default void run() {\n        System.out.println(getName() + \" run\");\n    }\n}\n\nclass Student implements Person {\n    private String name;\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}\n```\n\n### 接口与抽象的区别\n\n- 接口不能有方法体，抽象类可以有。\n\n- 接口不能有静态方法，抽象类可以有。\n- 在接口中凡是变量必须是public static final,而在抽象类中没有要求。\n- 抽象类本质上还是-一个类，子类是用关键字extends来继承它，并扩展的，有非常强的is-a的关系。而接口，是被其他类用关键字implements来实现接口定义的方法的。接口只是定义功能和行为规范，如果一个类实现了一个接口，那么这个类必须遵守这个接口的方法约定，但没有is-a的关系。\n\n### 内部类和内部接口\n\n![image-20220923082921856](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923082921856.png)\n\n- 内嵌类型不能与外层类型同名。\n\n- 内部类中可以声明成员变量和成员方法。\n- 内部类可以继承父类或实现接口。.\n- 可以声明内部类为抽象类，该抽象类必须被其他内部类继承;内部接口必须被其他内部类实现。\n\n- 使用点运算符“”引用内嵌类型:外层类型.内嵌类型Pixel.Color\n- 内嵌类型具有类中成员的4种访问控制权限。当内部类可被访问时，才能考虑内部类中成员的访问控制权限。\n- 内嵌类型与其外层类型彼此信任，能访问对方的所有成员\n- 内部接口总是静态的。内部类可声明是静态的或实例的，静态内部类能够声明静态成员，但不能引用外部类的实例成员;实例内部类不能声明静态成员。\n\n- 在实例内部类中，使用以下格式引用或调用外部类当前实例的成员变量或实例成员方法:\n\n  `外部类.this.成员变量//引用外部类当前实例的成员变量`\n\n  `外部类.this.实例成员方法(参数列表)//调用外部类当前实例的成员方法`\n\n## API\n\n### 基本数据类型\n\n![image-20220923083806822](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923083806822.png)\n\n**自动裝箱:**基本数据类型就自动的封装到与它相同类型的包装中。如:\nIntegeri = 100;本质上就是编译器编译时自动为我们添加了Integeri =\nnew Integer( 100);\n<u>自动拆箱:</u>包装类对象自动转化为基本数据类型。如:inta=new\nInteger(100);本质上就是编译器编译时自动为我们添加了inta = new\nInteger( 100).intValue();\n**缓存问题:** [-128,127]之 间的数对应的包装类对象，仍然当做基本数据类型\n来处理;一旦遇到一个这个之间的数(默认为这些小的数使用频率会很高)，\n把他包装成-一个对象后，就缓存起来，下次如果又要包装-一个这个数的对象，\n则去看是否已经有这个对象，有就直接拿来使用，这样可以节省内存空间、提\n高效率(享元模式)。\n**享元模式:**有很多小对象，它们的大部分属性相同，这时可以把它们变成-一个\n对象，那些相同的属性为对象的内部状态，那些不同的属性可以变为方法的参\n数，由外部传入。例: -128~127 内的相同整数自动装箱为同一个对象。\n\n## 泛型\n\n### 泛型声明\n\n`[修饰符] class 类<类型参数列表> [extends父类] [implements 接口列表]`\n`[public] interface 接口 < 类型参数列表> [extends父接口列表]`\n`[public] [static]< < 类型参数列表>返回值类型方法([参数列表]) [throws 异常类`\n`列表]`\n\n![image-20220923092011478](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923092011478.png)\n\n```java\npublic interface GenericIntercace<T> {\nT getData();//类似于c++的模板\n```\n\n注意：\n\n- 接口中泛型字母只能使用在方法中，不能使用在全局常量中\n\n- 泛型方法可以在非泛型类中\n\n### 泛型继承\n\n泛型父类:子类为\"富二代”:子类的泛型要比父类多\n\n1. 保留父类的泛型-->子类为泛型类\n\n2. 不保留父类泛型-->子类按需实现\n\n- 子类. [重写方法]的参数类型-->随父类而定\n- 子类新增的方法，参数类型随子类而定\n- 子类中使用父类的[属性] --> 随父类而定\n- 子类使用自己的属性-->随子类而定\n\n![image-20220923093134846](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923093134846.png)\n\n### 泛型擦除\n\n- 定义:泛型擦除是指在继承(实现)或使用时没有指定具体的类型\n- 特点:一旦擦除之后按Object处理\n\n```java\n//2)没有类型擦除--》Object\nclass C4 <A,B> extends Father{\npublic void test(Object name) {子类重写方法的参数类型-->随父类而定:\nObject \nthis age = new Object:);//Object类型，子类使用父类的[属性]，类型\n随父类而定\n}\n\n```\n\n### 通配符\n\n- T、K、V、E等泛型字母为有类型，类型参数赋予具体的值\n- ?未知类型类型参数赋予不确定值，任意类型\n- 只能用在声明类型、方法参数上，不能用在定义泛型类上\n\n```java\npublic class GenericTest {\npublic static void main(String[ args) {\nList<String> name = new ArrayL ist<String>();\nList<Integer> age = new ArrayL ist<Integer>();\nList<Number> number = new\nArrayList<Number>();\nname.add(\"icon\");\nage.add(18);\nnumber.add(314);\ngetData(name);\ngetData(age); \ngetData(number);\n}\npublic static void getData(List<?> data) {\nSystem.out.println(\"data :\" + data.get(0));\n}\n\n```\n\n# 第四章、异常处理\n\n## 异常类型\n\n- 用户输入了非法数据。 \n- 要打开的文件不存在。 \n- 网络通信时连接中断，或者JVM内存溢出。\n\n![image-20220928141405830](C:\\Users\\alleyf\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928141405830.png)\n\n## 异常处理基础\n\n- 将程序正常代码与错误处理代码分开。\n\n- 使程序具有处理运行错误的能力。\n\n### 错误\n\n( Error)指程序运行时遇到的硬件、操作系统、\n虚拟机的错误。 Error错误类。Java程序**不能处理错误**，只能依靠外界干预。\n\n1. NoClassDefFoundError类定，义未找到错误。没有\n   .class文件， 或没有main()方法时。\n2. OutOfMemoryError内存溢出错误。没有可用内存时。\n3. StackOverflowError栈溢出错误。当递归函数不能正常结束时。\n\n![image-20220928142730920](C:\\Users\\alleyf\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928142730920.png)\n\n### 异常\n\n（Exception）指在硬件、操作系统、虚拟 机正常时，程序遇到的运行错（语义错）\n\n#### 异常类（默认java.lang包）\n\n![image-20220928143014612](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928143014612.png)\n\n#### 内置异常类\n\n![image-20220928160253693](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160253693.png)\n\n#### 异常方法\n\n![image-20220928160326479](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160326479.png)\n\n\n\n异常类声明\n\n```java\npublic class Throwable implements Serializable \n{\npublic String getMessage() //获得异常信息\npublic String toString() //获得异常对象的描述信息\npublic void printStackTrace()//显示异常栈跟踪信息\n}\npublic class Exception extends Throwable\n{\npublic Exception()\npublic Exception(String message)\n}\n\n```\n\n1. **ArithmeticException**\n\n    3/0 //整除，除数为0，算术异常\n\n   3.0/0 //实数除，除数为0，无穷大 \n\n2. **NullPointerException** 空对象异常\n\n    int x[] = null;\n\n    x[0] = 1; //对空数组中的元素进行操作\n\n    String str = null;\n\n    str.length() //空对象调用方法\n\n3. ClassCastException \n\n   Object obj = new Object(); \n\n   String str = (String) obj; //类型强制转换异常\n\n\n\n## 异常处理措施\n\n### 异常处理语句\n\n```java\ntry\n{\n语句1； //存在潜在异常的代码\n}\ncatch (异常类 异常对象)\n{\n语句2； //捕获到异常并进行处理的代码\n}\nfinally\n{\n语句3；//最后必须执行的代码，无论是否捕获到异常\n}\n```\n\n### 抛出异常\n\n<u>抛出异常对象的throw语句</u>\n\n```java\n[修饰符] 返回值类型 方法([参数列表])[throws异常类列表]\npublic static int parseInt(String s)\nthrows NumberFormatException\n日期类声明抛出异常的方法与方法调用者处理异常。\npublic void set(int year, int month, int day)\nthrows Exception\npublic MyDate(int year, int month, int day)\nthrows Exception\n{\nthis.set(year, month, day);\n}\npublic static void main(String[] args) throws Exception\n```\n\n### throws和throw以及try-catch-finally的区别\n\n- throws为方法声明可能出现的异常，函数调用者处理不处理异常则继续向下抛出异常直至被处理，否则程序结束。\n- throw主要是发现异常并抛出指定的异常给调用者。\n- throw要么和try-catch-finally语句配套使用，要么与throws配套 使用。但throws可以单独使用，然后再由处理异常的方法捕获。\n\n```java\nclass ThrowsDemo {\nstatic void throwOne() throws IllegalAccessException {\nSystem.out.println(\"Inside throwOne.\");\nthrow new IllegalAccessException(\"demo\");\n}\npublic static void main(String args[]) {\ntry {\nthrowOne();\n} catch (IllegalAccessException e) {\nSystem.out.println(\"Caught \" + e);\n}}}\n```\n\n\n\n\n\n\n\n\n\n\n\n**版权归属：**[Alleyf](https://fcsy.fit)\n\n","source":"_posts/Java Notes.md","raw":"---\ntitle: Java_Notes\ntags: [Java]\ncategories: Java\ndate: 2022-9-10 10:00:00\nsticky: 50\nexcerpt: some notation about java。\n---\n\n# 第一章、计算机语言及系统概述\n\n## 知识点\n\n1. <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907091018.png\" style=\"zoom: 33%;\" />\n1. 特点：**Write once，run anywhere！**\n- **java：java program->执行编译后的程序**\n-  **javac：java program.java->编译该程序生成.class文件**\n-  **javadoc：javadoc program->生成该程序的html文档**\n3. <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135804.png\" style=\"zoom:33%;\" />\n3. <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135836.png\" style=\"zoom:33%;\" />\n## 代码示例\n```java\npublic class HelloWorld{\n    public static void main(String[] args) \n    {\n        System.out.println(\"Hello world!\");\n    }\n}\n```\n# 第二章、数据类型及变量\n\n## 标识符\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135908.png\" style=\"zoom:33%;\" />\n\n## 关键字\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135913.png\" style=\"zoom:33%;\" />\n\n```java\n    public static void DefineKey(String[] args) throws Exception {\n        int i=0;\n        int _j=1;\n        int $k=2;\n//        int 1i=0;(NO)\n//        int 中国=1;(不建议)\n        byte a=1;\n        double b=0.1;\n    }\n```\n\n## 数据类型\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135920.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135925.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135953.png\" style=\"zoom:33%;\" />\n\n```java\n    public static void BaseData(String[] args) throws Exception {\n        int i=123;//默认十进制\n        int j=0123;//八进制\n        int k=0x123;//16进制\n        long c=55555;\n        long d=555555555555555L;\n        double e=521e2;\n        char f='\\u0064';\n        System.out.println(f);\n    }\n```\n\n## 进制转换\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135958.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140005.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140009.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140012.png\" style=\"zoom:33%;\" />\n\n## 类型转换：\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140707.png\" style=\"zoom: 33%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140020.png\" style=\"zoom: 50%;\" />\n**提升转换不丢失精度;(type)var强制类型转换**\n\n```java\n    public static void TypeChange(String[] args) throws Exception {\n        double s=3.1415;\n        int n=(int)s;\n        char b=(char)n;\n        char a='a';\n        String c;\n        System.out.println(n+b);\n        int money=1000000000;//int型为4个字节最大为21亿，超出则异常\n        int years=20;\n        double total=(double)(money)*years;//提前将其中一个整形转换为浮点型以避免精度缺失\n        System.out.println(total);\n    }\n```\n\n## 变量\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907143232.png\" style=\"zoom:33%;\" />\n\n最终变量（必须初始化）：**final** type variable；variable=value；\n\n**定义时初始化或构造函数初始化**\n\n## 常量\n\n- **只能被初始化一次**\n- **常量名全部大写，单词过多使用下划线**\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907142721.png\" style=\"zoom:33%;\" />\n\n## 运算符与表达式\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907150838.png\" style=\"zoom:33%;\" />\n\n## 输出进制格式化\n\n```java\nSystem.out.println(\"二进制输出\"+Integer.toBinaryString(a));\nSystem.out.println(\"八进制输出\"+Integer.toOctalString(a));\nSystem.out.println(\"十六进制输出\"+Integer.toHexString(a));\n```\n\n## 数组\n\n### 一维数组\n\n- 定义：**type[] arrayname = new type[num] 或  type arrayname[] = new type[num]**\n\n- **初始化默认值为零**\n\n- **数组直接赋值属于传引用，指向同一个地址空间**\n\n### 二维数组\n\n- 定义：**type[][] arrayname = new type[m][n]**\n- 可以不规则，给不同行分配不同大小的列\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909084420.png\" style=\"zoom:25%;\" />\n\n\n## 容器遍历元素\n\n```java\nfor (int value : fib)\n/ /vaue获得fib数组每个元素,\n/ /相当于fib[i]\n\tSystem.out,print(\" \" +value);\n```\n\n## 方法（递归）\n\n- **递归方法适合用于分段函数类型的问题求解，必须有递归头和递归体**\n- **递归和堆栈原理类似，递归也可以通过堆栈实现**\n\n```java\n//斐波那契数列第n项\npublic class fib {\n    public static void main(String[] args)\n    {\n        System.out.println(sequence(10));\n    }\n    public static int sequence(int n)\n    {\n        if(n == 0|n == 1)\n            return n;\n        else if(n>=2)\n            return sequence(n-2)+sequence(n - 1);\n        else\n        {\n            System.out.println(\"Index error\");\n            return 0;\n        }\n    }\n}\n```\n\n## 字符串\n\n1. 字符串常量“abc”\n\n2. String是字符串类\n\n3. `s.charAt(index)//索引下标的值`\n\n4. 字符串变量及运算\n\n   - 赋值运算\n\n     ​\tString str = \"abc\";\n\n     ​\tString str2 = str;\n\n   - 连接运算+ +=\n\n     ​    str = \"abc\" + \"xyz\"; //str的值为\"abcxyz\"\n\n5. **字符串不是字符数组**\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909093029.png\" style=\"zoom:25%;\" />\n\n## API文档\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909092844.png\" style=\"zoom:25%;\" />\n\n# 第三章、类的封装、继承和多态\n\n## 类和对象\n\n类的特点：`具有封装性，继承性，多态性和抽象性。`\n\n对象：`对象的实例。`\n\n注：\n\n- Java中进行方法调用中传递参数时，**遵循值传递的原则**：基本类型传递的是该 数据值本身。引用类型传递的是对对象的引用，而不是对象本身。\n- 与c++类似，类的定义和调用要分开在两个文件中，类的声明与定义在一个文件，类的调用要在另外一个文件的类中定义一个类对象: `classname objname=new classname()`\n\n```java\n//类的声明\npackage ch4;\n\npublic class people {\n    protected String name;\n    private int age;\n    public String getname() {\n        return name;\n    }\n    public int getage() {\n        return age;\n    }\n    public void setname(String name) {\n        this.name = name;\n    }\n    public void setage(int age) {\n        this.age = age;\n    }\n}\n```\n\n```java\n//类的调用\npackage ch4;\n\nimport java.util.Scanner;\n\npublic class callpeople {\n    public static void main(String[] args) {\n        people zyk = new people();\n        people fcs = new people();\n        fcs = zyk;\n        zyk.setname(\"赵逸坤\");\n        zyk.setage(21);\n        System.out.println(zyk.getname()+\"今年\"+zyk.getage()+\"岁了\");\n        System.out.println(zyk);\n        System.out.println(fcs);\n//        Scanner in = new Scanner(System.in);\n//        String name = in.next();\n//        System.out.println(in);\n    }\n}\n\n```\n\n## 类的封装\n\n### 1构造方法和析构方法\n\n```java\n//在类里进行定义构造方法，用this对对象引用，从而避免与形参名的冲突\n//super为隐式参数，为对父类的引用\npublic people(String name,int age) {\n    this.name = name;\n    this.age = age;\n}\n//析构方法\nprotected void finalize() {\n    // 对象的清理工作\n}\n//给对象赋值为null，则对象的内存将会释放，但静态方法和变量不会释放\n```\n\n**方法和运算符重载：**\n\n`通过参数列表中参数的类型、个数和顺序的不同进行区别`\n\n### 2对象的引用和运算\n\n- instanceof对象运算符       eg：`d instanceof MyDate`\n- super为隐式参数，为对父类的引用\n- this为隐式参数，为对对象本身的引用\n- 普通方法中，this总是指向调用该方法的对象; 构造方法中，this总是指向正要初始化的对象；this不能用于static方法；可以在一个构造方法中通过this调用其它构造方法，且必须是构造方法中 的第一条语句\n\n### 3访问控制-隐藏/封装\n\n- 隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用， 从而提高系统的可扩展性、可维护性。\n- boolean变量的get方法是is开头；常量或 static 变量公开\n- default：默认访问控制属性，什么都没加就是该控制符。有的书上说 friendly、package，这都是一个意思，都不能真的写出来，如果什么访 问修饰符都不加，就是default/friendly/package\n- Java的访问控制是停留在编译层，也就是它不会在.class文件中留下任何 痕迹，只在编译的时候进行访问控制的检查。其实，通过反射的手段，可 以访问任何包下任何类中的成员，例如，访问类中的私有成员也是可以的。说明访问控制是`伪封装（类似于python）`。\n\n#### 类的访问权限：\n\n  **只有public和缺省两种**\n\n  eg：public class MyDate 或class MyDate_ex\n#### 类成员和函数的访问权限：\n\n  <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914154845348.png\" alt=\"image-20220914154845348\" style=\"zoom:67%;\" />\n\n#### 声明set()和get()方法存取对象的属性\n\n### 4静态成员\n\n- 静态成员是属于类本身的公共属性或方法。\n\n- 静态成员变量也叫类属性或类变量，静态成员变量调用时可以对象.类属性或类名.类属性来访问。\n\n- 静态方法调用时只能通过类名.类方法调用，在调用该方法时，不会将对象的引用（this）传递给它，所以在 static 方法中不可访问非static的成员，静态方法只能访问静态成员变量或静态方法。\n\n-  父类中是静态方法，子类中不能覆盖为非静态方法；在符合覆盖规则的前提下， 在父子类中，父类中的静态方法可以被子类中的静态方法覆盖，但无多态。 （在使用对象调用静态方法时，实则是调用编译时类型的静态方法）。\n\n- 父子类中，静态方法只能被静态方法覆盖，父子类中，非静态方法只能被非静 态方法覆盖。\n\n#### 静态初始化块 static {}\n\n注：如果希望加载后，对整个类进行某些初始化操作，可以使用static初始化块\n\n1. 是在类初始化时执行，不是在创建对象时执行。 \n2. 静态初始化块中不能访问非static成员变量。\n3. 执行顺序：上溯到Object类，先执行Object的静态初始化块，再向下执行子 类的静态初始化块，直到我们的类的静态初始化块为止。\n\n\n## 类的继承\n\n- <u>通过extends父类(单继承)关键词或implements接口(多继承)</u>\n\n```java\npublic class Student extends Person\n{\nString speciality;\n//专业\n}\n```\n\n- **不支持多继承**\n\n- 在java（C++-）中类只有单继承，没有像C++那样的多继承。多 继承，就是为了实现代码的复用性，却引入了复杂性，使得系统类之间 的关系混乱；Java中的多继承，可以通过接口实现\n\n- 如果定义一个类时，没有调用extends，则它的父类是java.lang.Object。Object类是所有java类的根基类。\n\n\n\n### 1.方法的重写\n\n- 在子类中可以根据需要对父类中继承来的方法进行重写。\n\n- 重写方法必须和被重写方法具有相同方法名称、参数列表。通过子类去调用该\n  方法，会调用重写方法而不是被重写方法(叫做重写方法覆盖被重写方法)。\n  \n- 可以在子类重写方法中调用被重写方法: super关键字。\n\n- 重写方法的访问权限，子类大于等于父类(由于多态)。\n\n- 重写方法的返回值类型和声明异常类型，子类小于等于父类。\n\n- 对象.方法() :先在本类内部找是否有该方法，如果没有，到直接父类去找,\n  如果还没有，则一直往上层找，一直找到Object， 如果还没有，则报错。\n  \n- 子类继承父类的成员变量,子类继承父类除构造方法以外的成员方法,子类不能继承父类的构造方法,子类可以增加成员，可以重定义从父类继承来的成员，但不能删除它们。\n\n### 2.子类对父类的访问权限\n\n- 子类不能访问父类的私有成员( private )\n\n- 子类能够访问父类的公有成员( public)和保护成员(protected)\n\n- 子类对父类的缺省权限成员的访问控制，以包为界分两种情况，可以访问当前包中成员。\n\n### 3.super引用\n\n1. 调用父类的构造方法：super([参数列表])\n\n2. super是直接父类对象的引用，和this类似。\n\n3. 引用父类同名成员\n\n   - 子类隐藏父类成员变量：super.成员变量\n\n   - 子类覆盖父类成员方法：super.成员方法([参数列表])\n\n4. 构造方法:任何类的构造方法中，若是构造函数的第一行代码没有显式调用\n   super(..);那么Java默认都会调用super();作为父类的初始化函数。所以这里的super()加不加都会无所谓。( 内存分析，wrap:new对象的时候采用子类包裹父类的结构)\n\n5. 同一个构造方法里面不能同时调用super()和this()。\n\n6. 在本类构造方法中通过super()调用，会一直 上溯到Object()这个构造函数,\n   然后按类层级，依次向下执行各层级构造函数中剩下的代码，直至最低层级的\n   构造函数。同this()一样，super()方法也应该放到构造方法的第一行。\n\n7. new一个类的对象的时候，通过构造方法的从上至下的依次调用，就依次建\n   立了新的根对象、父类对象和自身对象，其中，this指向新建的对象本身，\n   super指向新建的直接父类对象本身。\n\n### 4.组合VS继承\n\n1. “is-a\"关系使用继承，“has-a\"关系使用组合:计算机类、主板类。可以通过在计算机类中增加主板属性来复用主板类的代码。\n\n2. 如果仅仅从代码复用的角度考虑，组合完全可以替代继承。\n\n3. 所谓组合，就是把要组合的另一个类作为属性放到类里面。\n\n4. 是就用继承、有就用组合。\n\n#### 优缺点\n\n![image-20220916083605738](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916083605738.png)\n\n## 类的多态\n\n### 1.子类重定义父类成员\n\n- 子类隐藏父类成员变量\n- 子类覆盖父类成员方法\n  - 覆盖(override)是指子类声明并实现父类中的同名方法并且参数列表也完全相同。子类继承并重载父类成员方法\n  - 重载.(overload)是指同一个类中的多个方法可以同名但参数列表必须不同。\n\n### 2.类型的多态\n\n- 子类对象即是父类对象\n\n  `new Student() instanceof Person //true`\n\n  `new Person() instanceof Student //false`\n\n- 父类对象引用子类对象\n\n  `Person p = new Student(); / /赋值相容`\n  `Student s = new Person();//语法错误`\n  `Object obj = new Person();/ /赋值相容`\n\n### 3.编译时的多态和运行时的多态\n\n- 编译时多态性\n\n  <u>方法重载都是编译时多态。</u>\n\n  <u>方法覆盖表现出两种多态性，当对象引用本类实例时，为编译时多态，否则为运行时多态。</u>\n\n  ```java\n  Person p = new Person(.....);\n  p.toString()\n  //执行Person类的toString()\n  Student s= new Studen(.....);\n  s.toString()\n  //执行Student类的toString()\n  ```\n\n- 运行时多态性\n\n  <u>自下而上搜索，有则调用无责溯源</u>\n\n  ![image-20220916085315869](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916085315869.png)\n\n### 4.多态的方法实现\n\n![image-20220921141638509](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921141638509.png)\n\n- 子类类型的对象地址可以直接赋给父类类型的引用对象，这个称为向上转型，是实现多态的基础。\n\n- A instanceof B: A对象的类型是否是B类型，只有在A对象的类型和B类型相同，或为父子类型时，编译不报错。而在运行时，只有A对象类型为B类型的子类型或者就是B类型时，结果才返回true。\n- 内存分析(例子: myServlet) :调用父类的service(),然后调用子类的doGet() (注意: this关键字指向整个最终包裹对象，即最外层的子对象;而在包裹对象中，每-一层对象通过super关键字指向内一层的父对象)。\n- 多态指的是方法的多态(到底调用那个方法，运行时决定)，属性没有多态。\n- 针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。\n\n## 抽象类\n\n### 要点\n\n![image-20220921145517282](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921145517282.png)\n\n### 用法\n\n```java\npublic abstract class ClosedFigure\n//闭合图形抽象类\n{\npublic abstract double area( );\n//计算面积，抽象方法，以分号\";\"结束\n}\n```\n\n1. <u>构造方法、静态成员方法</u>不能被声明为抽象\n   方法。\n2. 一个非抽象类必须实现从父类继承来的所有\n   抽象方法。\n3. 不能创建抽象类的实例。例如:`ClosedFigure g = new ClosedFigure();` \n4. <u>abstract修饰方式的初衷就是要求其子类覆盖(实现)这个方法，并且调用时可以以多态方式调用子类覆盖后的方法(抽象类主要和多态技术相结合)</u>，即抽象方法必须在其子类中实现，除非子类本身也是抽象类。<u>abstract不允许修饰成员变量</u>，因为成员变量也没有重写这个概念!\n5. 抽象类可以只有具体方法，也可以全是抽象方法，子类继承抽象类也可以是抽象类，但要实例化的类不能是抽象类。\n6. 不能放在一起的修饰符: <u>final和abstract, private和abstract, static和abstract</u>，因为abstract修饰的方法是必须在其子类中实现(覆盖)，才能以多态方式调用，以上修饰符在修饰方法时期子类都覆盖不了这个方法，<u>final是不可以覆盖</u>，<u>private是不能</u>\n   <u>够继承到子类</u>，所以也就不能覆盖，<u>static是可以覆盖的，但是在调用时会调用编译时类型的方法，因为调用的是父类的方法，而父类的方法又是抽象的方法，又不能够调用</u>，所以上面的修饰符不能放在一起。\n\n## 最终类\n\n1. 声明最终类， 不能被继承\n   \n   ```java\n   public final class Math\n   //数学类，最终类\n   public class MyMath extends Math\n   //语法错\n   public final class Circle extends Ellipse / /最终类\n   ```\n   \n   \n   \n1. 声明最终方法,不能被子类覆盖\n\n   ```java\n   public class Circle extends Ellipse\n   \n   / /非最终类\n   \n   {\n   \n   public final double area( )\n   \n   //最终方法\n   \n   }\n   ```\n   \n### final关键词\n\n1. final修饰变量时表示常量。<u>变量被final修饰，就会变成常量</u>(常量应大写)，一旦赋值不能改变(可以在<u>初始化时直接赋值</u>，也可以在<u>构造方法里赋值</u>，只能在这两种方法里二选一，<u>必须为常量赋值</u>) ;final的常量不会有默认初始值，对于直接在初始化时赋值方式，final修饰符常和static修饰符一起使用。\n2. final修饰方法( 最终方法)时表示<u>该方法不可被子类重写</u>。但是<u>可以被重载</u>。\n3. <u>final修饰类</u>(最终类)时表示修饰的<u>类不能有子类</u>，不能被继承。比如Math、String。 final类中的方法也都是final的。\n\n## 接口类\n\n<u>如果一个抽象类没有字段，所有方法全部都是抽象方法，就可以将该抽象类改为接口。</u>\n\n类不能多继承类，但可以实现多个接口，一个接口可以继承多个接口。\n\n接口可以看成<u>**狭义抽象**</u>，将设计与实现彻底分离。\n\n通过给类新增接口来改变类，而不影响子类。\n\n接口不能有构造方法，抽象类可以有。\n\n接口可以定义`default`方法（有方法实体，子类可以不用重写）。\n\n```java\ninterface Person{\nvoid run() ;\nString getName() ;\n}\n```\n\n类实现接口：\n\n```java\nclass Student implements Person {\n    private String name;\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    @Override//规定下面的编译为重写\n    public void run() {\n        System.out.println(this.name + \" run\");\n    }\n\n    @Override\n    public String getName() {\n        return this.name;\n    }\n}\n```\n\n### 抽象类和接口的对比\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921155545894.png\" alt=\"image-20220921155545894\" style=\"zoom: 80%;\" />\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Person p = new Student(\"Xiao Ming\");\n        p.run();\n    }\n}\n\ninterface Person {\n    String getName();\n    default void run() {\n        System.out.println(getName() + \" run\");\n    }\n}\n\nclass Student implements Person {\n    private String name;\n\n    public Student(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}\n```\n\n### 接口与抽象的区别\n\n- 接口不能有方法体，抽象类可以有。\n\n- 接口不能有静态方法，抽象类可以有。\n- 在接口中凡是变量必须是public static final,而在抽象类中没有要求。\n- 抽象类本质上还是-一个类，子类是用关键字extends来继承它，并扩展的，有非常强的is-a的关系。而接口，是被其他类用关键字implements来实现接口定义的方法的。接口只是定义功能和行为规范，如果一个类实现了一个接口，那么这个类必须遵守这个接口的方法约定，但没有is-a的关系。\n\n### 内部类和内部接口\n\n![image-20220923082921856](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923082921856.png)\n\n- 内嵌类型不能与外层类型同名。\n\n- 内部类中可以声明成员变量和成员方法。\n- 内部类可以继承父类或实现接口。.\n- 可以声明内部类为抽象类，该抽象类必须被其他内部类继承;内部接口必须被其他内部类实现。\n\n- 使用点运算符“”引用内嵌类型:外层类型.内嵌类型Pixel.Color\n- 内嵌类型具有类中成员的4种访问控制权限。当内部类可被访问时，才能考虑内部类中成员的访问控制权限。\n- 内嵌类型与其外层类型彼此信任，能访问对方的所有成员\n- 内部接口总是静态的。内部类可声明是静态的或实例的，静态内部类能够声明静态成员，但不能引用外部类的实例成员;实例内部类不能声明静态成员。\n\n- 在实例内部类中，使用以下格式引用或调用外部类当前实例的成员变量或实例成员方法:\n\n  `外部类.this.成员变量//引用外部类当前实例的成员变量`\n\n  `外部类.this.实例成员方法(参数列表)//调用外部类当前实例的成员方法`\n\n## API\n\n### 基本数据类型\n\n![image-20220923083806822](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923083806822.png)\n\n**自动裝箱:**基本数据类型就自动的封装到与它相同类型的包装中。如:\nIntegeri = 100;本质上就是编译器编译时自动为我们添加了Integeri =\nnew Integer( 100);\n<u>自动拆箱:</u>包装类对象自动转化为基本数据类型。如:inta=new\nInteger(100);本质上就是编译器编译时自动为我们添加了inta = new\nInteger( 100).intValue();\n**缓存问题:** [-128,127]之 间的数对应的包装类对象，仍然当做基本数据类型\n来处理;一旦遇到一个这个之间的数(默认为这些小的数使用频率会很高)，\n把他包装成-一个对象后，就缓存起来，下次如果又要包装-一个这个数的对象，\n则去看是否已经有这个对象，有就直接拿来使用，这样可以节省内存空间、提\n高效率(享元模式)。\n**享元模式:**有很多小对象，它们的大部分属性相同，这时可以把它们变成-一个\n对象，那些相同的属性为对象的内部状态，那些不同的属性可以变为方法的参\n数，由外部传入。例: -128~127 内的相同整数自动装箱为同一个对象。\n\n## 泛型\n\n### 泛型声明\n\n`[修饰符] class 类<类型参数列表> [extends父类] [implements 接口列表]`\n`[public] interface 接口 < 类型参数列表> [extends父接口列表]`\n`[public] [static]< < 类型参数列表>返回值类型方法([参数列表]) [throws 异常类`\n`列表]`\n\n![image-20220923092011478](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923092011478.png)\n\n```java\npublic interface GenericIntercace<T> {\nT getData();//类似于c++的模板\n```\n\n注意：\n\n- 接口中泛型字母只能使用在方法中，不能使用在全局常量中\n\n- 泛型方法可以在非泛型类中\n\n### 泛型继承\n\n泛型父类:子类为\"富二代”:子类的泛型要比父类多\n\n1. 保留父类的泛型-->子类为泛型类\n\n2. 不保留父类泛型-->子类按需实现\n\n- 子类. [重写方法]的参数类型-->随父类而定\n- 子类新增的方法，参数类型随子类而定\n- 子类中使用父类的[属性] --> 随父类而定\n- 子类使用自己的属性-->随子类而定\n\n![image-20220923093134846](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923093134846.png)\n\n### 泛型擦除\n\n- 定义:泛型擦除是指在继承(实现)或使用时没有指定具体的类型\n- 特点:一旦擦除之后按Object处理\n\n```java\n//2)没有类型擦除--》Object\nclass C4 <A,B> extends Father{\npublic void test(Object name) {子类重写方法的参数类型-->随父类而定:\nObject \nthis age = new Object:);//Object类型，子类使用父类的[属性]，类型\n随父类而定\n}\n\n```\n\n### 通配符\n\n- T、K、V、E等泛型字母为有类型，类型参数赋予具体的值\n- ?未知类型类型参数赋予不确定值，任意类型\n- 只能用在声明类型、方法参数上，不能用在定义泛型类上\n\n```java\npublic class GenericTest {\npublic static void main(String[ args) {\nList<String> name = new ArrayL ist<String>();\nList<Integer> age = new ArrayL ist<Integer>();\nList<Number> number = new\nArrayList<Number>();\nname.add(\"icon\");\nage.add(18);\nnumber.add(314);\ngetData(name);\ngetData(age); \ngetData(number);\n}\npublic static void getData(List<?> data) {\nSystem.out.println(\"data :\" + data.get(0));\n}\n\n```\n\n# 第四章、异常处理\n\n## 异常类型\n\n- 用户输入了非法数据。 \n- 要打开的文件不存在。 \n- 网络通信时连接中断，或者JVM内存溢出。\n\n![image-20220928141405830](C:\\Users\\alleyf\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928141405830.png)\n\n## 异常处理基础\n\n- 将程序正常代码与错误处理代码分开。\n\n- 使程序具有处理运行错误的能力。\n\n### 错误\n\n( Error)指程序运行时遇到的硬件、操作系统、\n虚拟机的错误。 Error错误类。Java程序**不能处理错误**，只能依靠外界干预。\n\n1. NoClassDefFoundError类定，义未找到错误。没有\n   .class文件， 或没有main()方法时。\n2. OutOfMemoryError内存溢出错误。没有可用内存时。\n3. StackOverflowError栈溢出错误。当递归函数不能正常结束时。\n\n![image-20220928142730920](C:\\Users\\alleyf\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928142730920.png)\n\n### 异常\n\n（Exception）指在硬件、操作系统、虚拟 机正常时，程序遇到的运行错（语义错）\n\n#### 异常类（默认java.lang包）\n\n![image-20220928143014612](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928143014612.png)\n\n#### 内置异常类\n\n![image-20220928160253693](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160253693.png)\n\n#### 异常方法\n\n![image-20220928160326479](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160326479.png)\n\n\n\n异常类声明\n\n```java\npublic class Throwable implements Serializable \n{\npublic String getMessage() //获得异常信息\npublic String toString() //获得异常对象的描述信息\npublic void printStackTrace()//显示异常栈跟踪信息\n}\npublic class Exception extends Throwable\n{\npublic Exception()\npublic Exception(String message)\n}\n\n```\n\n1. **ArithmeticException**\n\n    3/0 //整除，除数为0，算术异常\n\n   3.0/0 //实数除，除数为0，无穷大 \n\n2. **NullPointerException** 空对象异常\n\n    int x[] = null;\n\n    x[0] = 1; //对空数组中的元素进行操作\n\n    String str = null;\n\n    str.length() //空对象调用方法\n\n3. ClassCastException \n\n   Object obj = new Object(); \n\n   String str = (String) obj; //类型强制转换异常\n\n\n\n## 异常处理措施\n\n### 异常处理语句\n\n```java\ntry\n{\n语句1； //存在潜在异常的代码\n}\ncatch (异常类 异常对象)\n{\n语句2； //捕获到异常并进行处理的代码\n}\nfinally\n{\n语句3；//最后必须执行的代码，无论是否捕获到异常\n}\n```\n\n### 抛出异常\n\n<u>抛出异常对象的throw语句</u>\n\n```java\n[修饰符] 返回值类型 方法([参数列表])[throws异常类列表]\npublic static int parseInt(String s)\nthrows NumberFormatException\n日期类声明抛出异常的方法与方法调用者处理异常。\npublic void set(int year, int month, int day)\nthrows Exception\npublic MyDate(int year, int month, int day)\nthrows Exception\n{\nthis.set(year, month, day);\n}\npublic static void main(String[] args) throws Exception\n```\n\n### throws和throw以及try-catch-finally的区别\n\n- throws为方法声明可能出现的异常，函数调用者处理不处理异常则继续向下抛出异常直至被处理，否则程序结束。\n- throw主要是发现异常并抛出指定的异常给调用者。\n- throw要么和try-catch-finally语句配套使用，要么与throws配套 使用。但throws可以单独使用，然后再由处理异常的方法捕获。\n\n```java\nclass ThrowsDemo {\nstatic void throwOne() throws IllegalAccessException {\nSystem.out.println(\"Inside throwOne.\");\nthrow new IllegalAccessException(\"demo\");\n}\npublic static void main(String args[]) {\ntry {\nthrowOne();\n} catch (IllegalAccessException e) {\nSystem.out.println(\"Caught \" + e);\n}}}\n```\n\n\n\n\n\n\n\n\n\n\n\n**版权归属：**[Alleyf](https://fcsy.fit)\n\n","slug":"Java Notes","published":1,"updated":"2022-09-28T08:04:27.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lo2ghe0003ichz7eja5ql3","content":"<h1 id=\"第一章、计算机语言及系统概述\"><a href=\"#第一章、计算机语言及系统概述\" class=\"headerlink\" title=\"第一章、计算机语言及系统概述\"></a>第一章、计算机语言及系统概述</h1><h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ol>\n<li><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907091018.png\" style=\"zoom: 33%;\" /></li>\n<li>特点：<strong>Write once，run anywhere！</strong></li>\n</ol>\n<ul>\n<li><strong>java：java program-&gt;执行编译后的程序</strong></li>\n<li> <strong>javac：java program.java-&gt;编译该程序生成.class文件</strong></li>\n<li> <strong>javadoc：javadoc program-&gt;生成该程序的html文档</strong></li>\n</ul>\n<ol start=\"3\">\n<li><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135804.png\" style=\"zoom:33%;\" /></li>\n<li><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135836.png\" style=\"zoom:33%;\" />\n## 代码示例\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <br>    &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n# 第二章、数据类型及变量</li>\n</ol>\n<h2 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135908.png\" style=\"zoom:33%;\" />\n\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135913.png\" style=\"zoom:33%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">DefineKey</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> _j=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">int</span> $k=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-comment\">//        int 1i=0;(NO)</span><br><span class=\"hljs-comment\">//        int 中国=1;(不建议)</span><br>        <span class=\"hljs-type\">byte</span> a=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">double</span> b=<span class=\"hljs-number\">0.1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135920.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135925.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135953.png\" style=\"zoom:33%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">BaseData</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">123</span>;<span class=\"hljs-comment\">//默认十进制</span><br>    <span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0123</span>;<span class=\"hljs-comment\">//八进制</span><br>    <span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0x123</span>;<span class=\"hljs-comment\">//16进制</span><br>    <span class=\"hljs-type\">long</span> c=<span class=\"hljs-number\">55555</span>;<br>    <span class=\"hljs-type\">long</span> d=<span class=\"hljs-number\">555555555555555L</span>;<br>    <span class=\"hljs-type\">double</span> e=<span class=\"hljs-number\">521e2</span>;<br>    <span class=\"hljs-type\">char</span> f=<span class=\"hljs-string\">&#x27;\\u0064&#x27;</span>;<br>    System.out.println(f);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"进制转换\"><a href=\"#进制转换\" class=\"headerlink\" title=\"进制转换\"></a>进制转换</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135958.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140005.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140009.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140012.png\" style=\"zoom:33%;\" />\n\n<h2 id=\"类型转换：\"><a href=\"#类型转换：\" class=\"headerlink\" title=\"类型转换：\"></a>类型转换：</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140707.png\" style=\"zoom: 33%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140020.png\" style=\"zoom: 50%;\" />\n**提升转换不丢失精度;(type)var强制类型转换**\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">TypeChange</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-type\">double</span> s=<span class=\"hljs-number\">3.1415</span>;<br>    <span class=\"hljs-type\">int</span> n=(<span class=\"hljs-type\">int</span>)s;<br>    <span class=\"hljs-type\">char</span> b=(<span class=\"hljs-type\">char</span>)n;<br>    <span class=\"hljs-type\">char</span> a=<span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>    String c;<br>    System.out.println(n+b);<br>    <span class=\"hljs-type\">int</span> money=<span class=\"hljs-number\">1000000000</span>;<span class=\"hljs-comment\">//int型为4个字节最大为21亿，超出则异常</span><br>    <span class=\"hljs-type\">int</span> years=<span class=\"hljs-number\">20</span>;<br>    <span class=\"hljs-type\">double</span> total=(<span class=\"hljs-type\">double</span>)(money)*years;<span class=\"hljs-comment\">//提前将其中一个整形转换为浮点型以避免精度缺失</span><br>    System.out.println(total);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907143232.png\" style=\"zoom:33%;\" />\n\n<p>最终变量（必须初始化）：<strong>final</strong> type variable；variable=value；</p>\n<p><strong>定义时初始化或构造函数初始化</strong></p>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><ul>\n<li><strong>只能被初始化一次</strong></li>\n<li><strong>常量名全部大写，单词过多使用下划线</strong></li>\n</ul>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907142721.png\" style=\"zoom:33%;\" />\n\n<h2 id=\"运算符与表达式\"><a href=\"#运算符与表达式\" class=\"headerlink\" title=\"运算符与表达式\"></a>运算符与表达式</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907150838.png\" style=\"zoom:33%;\" />\n\n<h2 id=\"输出进制格式化\"><a href=\"#输出进制格式化\" class=\"headerlink\" title=\"输出进制格式化\"></a>输出进制格式化</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(<span class=\"hljs-string\">&quot;二进制输出&quot;</span>+Integer.toBinaryString(a));<br>System.out.println(<span class=\"hljs-string\">&quot;八进制输出&quot;</span>+Integer.toOctalString(a));<br>System.out.println(<span class=\"hljs-string\">&quot;十六进制输出&quot;</span>+Integer.toHexString(a));<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h3><ul>\n<li><p>定义：<strong>type[] arrayname = new type[num] 或  type arrayname[] = new type[num]</strong></p>\n</li>\n<li><p><strong>初始化默认值为零</strong></p>\n</li>\n<li><p><strong>数组直接赋值属于传引用，指向同一个地址空间</strong></p>\n</li>\n</ul>\n<h3 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h3><ul>\n<li>定义：<strong>type[][] arrayname = new type[m][n]</strong></li>\n<li>可以不规则，给不同行分配不同大小的列<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909084420.png\" style=\"zoom:25%;\" /></li>\n</ul>\n<h2 id=\"容器遍历元素\"><a href=\"#容器遍历元素\" class=\"headerlink\" title=\"容器遍历元素\"></a>容器遍历元素</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : fib)<br>/ /vaue获得fib数组每个元素,<br>/ /相当于fib[i]<br>\tSystem.out,print(<span class=\"hljs-string\">&quot; &quot;</span> +value);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"方法（递归）\"><a href=\"#方法（递归）\" class=\"headerlink\" title=\"方法（递归）\"></a>方法（递归）</h2><ul>\n<li><strong>递归方法适合用于分段函数类型的问题求解，必须有递归头和递归体</strong></li>\n<li><strong>递归和堆栈原理类似，递归也可以通过堆栈实现</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//斐波那契数列第n项</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">fib</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    &#123;<br>        System.out.println(sequence(<span class=\"hljs-number\">10</span>));<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sequence</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(n == <span class=\"hljs-number\">0</span>|n == <span class=\"hljs-number\">1</span>)<br>            <span class=\"hljs-keyword\">return</span> n;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(n&gt;=<span class=\"hljs-number\">2</span>)<br>            <span class=\"hljs-keyword\">return</span> sequence(n-<span class=\"hljs-number\">2</span>)+sequence(n - <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;Index error&quot;</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ol>\n<li><p>字符串常量“abc”</p>\n</li>\n<li><p>String是字符串类</p>\n</li>\n<li><p><code>s.charAt(index)//索引下标的值</code></p>\n</li>\n<li><p>字符串变量及运算</p>\n<ul>\n<li><p>赋值运算</p>\n<p>​    String str = “abc”;</p>\n<p>​    String str2 = str;</p>\n</li>\n<li><p>连接运算+ +=</p>\n<p>​    str = “abc” + “xyz”; //str的值为”abcxyz”</p>\n</li>\n</ul>\n</li>\n<li><p><strong>字符串不是字符数组</strong></p>\n</li>\n</ol>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909093029.png\" style=\"zoom:25%;\" />\n\n<h2 id=\"API文档\"><a href=\"#API文档\" class=\"headerlink\" title=\"API文档\"></a>API文档</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909092844.png\" style=\"zoom:25%;\" />\n\n<h1 id=\"第三章、类的封装、继承和多态\"><a href=\"#第三章、类的封装、继承和多态\" class=\"headerlink\" title=\"第三章、类的封装、继承和多态\"></a>第三章、类的封装、继承和多态</h1><h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><p>类的特点：<code>具有封装性，继承性，多态性和抽象性。</code></p>\n<p>对象：<code>对象的实例。</code></p>\n<p>注：</p>\n<ul>\n<li>Java中进行方法调用中传递参数时，<strong>遵循值传递的原则</strong>：基本类型传递的是该 数据值本身。引用类型传递的是对对象的引用，而不是对象本身。</li>\n<li>与c++类似，类的定义和调用要分开在两个文件中，类的声明与定义在一个文件，类的调用要在另外一个文件的类中定义一个类对象: <code>classname objname=new classname()</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//类的声明</span><br><span class=\"hljs-keyword\">package</span> ch4;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">people</span> &#123;<br>    <span class=\"hljs-keyword\">protected</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getname</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getage</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setname</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setage</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//类的调用</span><br><span class=\"hljs-keyword\">package</span> ch4;<br><br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">callpeople</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">people</span> <span class=\"hljs-variable\">zyk</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">people</span>();<br>        <span class=\"hljs-type\">people</span> <span class=\"hljs-variable\">fcs</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">people</span>();<br>        fcs = zyk;<br>        zyk.setname(<span class=\"hljs-string\">&quot;赵逸坤&quot;</span>);<br>        zyk.setage(<span class=\"hljs-number\">21</span>);<br>        System.out.println(zyk.getname()+<span class=\"hljs-string\">&quot;今年&quot;</span>+zyk.getage()+<span class=\"hljs-string\">&quot;岁了&quot;</span>);<br>        System.out.println(zyk);<br>        System.out.println(fcs);<br><span class=\"hljs-comment\">//        Scanner in = new Scanner(System.in);</span><br><span class=\"hljs-comment\">//        String name = in.next();</span><br><span class=\"hljs-comment\">//        System.out.println(in);</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"类的封装\"><a href=\"#类的封装\" class=\"headerlink\" title=\"类的封装\"></a>类的封装</h2><h3 id=\"1构造方法和析构方法\"><a href=\"#1构造方法和析构方法\" class=\"headerlink\" title=\"1构造方法和析构方法\"></a>1构造方法和析构方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在类里进行定义构造方法，用this对对象引用，从而避免与形参名的冲突</span><br><span class=\"hljs-comment\">//super为隐式参数，为对父类的引用</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">people</span><span class=\"hljs-params\">(String name,<span class=\"hljs-type\">int</span> age)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.age = age;<br>&#125;<br><span class=\"hljs-comment\">//析构方法</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">finalize</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 对象的清理工作</span><br>&#125;<br><span class=\"hljs-comment\">//给对象赋值为null，则对象的内存将会释放，但静态方法和变量不会释放</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>方法和运算符重载：</strong></p>\n<p><code>通过参数列表中参数的类型、个数和顺序的不同进行区别</code></p>\n<h3 id=\"2对象的引用和运算\"><a href=\"#2对象的引用和运算\" class=\"headerlink\" title=\"2对象的引用和运算\"></a>2对象的引用和运算</h3><ul>\n<li>instanceof对象运算符       eg：<code>d instanceof MyDate</code></li>\n<li>super为隐式参数，为对父类的引用</li>\n<li>this为隐式参数，为对对象本身的引用</li>\n<li>普通方法中，this总是指向调用该方法的对象; 构造方法中，this总是指向正要初始化的对象；this不能用于static方法；可以在一个构造方法中通过this调用其它构造方法，且必须是构造方法中 的第一条语句</li>\n</ul>\n<h3 id=\"3访问控制-隐藏-封装\"><a href=\"#3访问控制-隐藏-封装\" class=\"headerlink\" title=\"3访问控制-隐藏/封装\"></a>3访问控制-隐藏/封装</h3><ul>\n<li>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用， 从而提高系统的可扩展性、可维护性。</li>\n<li>boolean变量的get方法是is开头；常量或 static 变量公开</li>\n<li>default：默认访问控制属性，什么都没加就是该控制符。有的书上说 friendly、package，这都是一个意思，都不能真的写出来，如果什么访 问修饰符都不加，就是default/friendly/package</li>\n<li>Java的访问控制是停留在编译层，也就是它不会在.class文件中留下任何 痕迹，只在编译的时候进行访问控制的检查。其实，通过反射的手段，可 以访问任何包下任何类中的成员，例如，访问类中的私有成员也是可以的。说明访问控制是<code>伪封装（类似于python）</code>。</li>\n</ul>\n<h4 id=\"类的访问权限：\"><a href=\"#类的访问权限：\" class=\"headerlink\" title=\"类的访问权限：\"></a>类的访问权限：</h4><p>  <strong>只有public和缺省两种</strong></p>\n<p>  eg：public class MyDate 或class MyDate_ex</p>\n<h4 id=\"类成员和函数的访问权限：\"><a href=\"#类成员和函数的访问权限：\" class=\"headerlink\" title=\"类成员和函数的访问权限：\"></a>类成员和函数的访问权限：</h4>  <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914154845348.png\" alt=\"image-20220914154845348\" style=\"zoom:67%;\" />\n\n<h4 id=\"声明set-和get-方法存取对象的属性\"><a href=\"#声明set-和get-方法存取对象的属性\" class=\"headerlink\" title=\"声明set()和get()方法存取对象的属性\"></a>声明set()和get()方法存取对象的属性</h4><h3 id=\"4静态成员\"><a href=\"#4静态成员\" class=\"headerlink\" title=\"4静态成员\"></a>4静态成员</h3><ul>\n<li><p>静态成员是属于类本身的公共属性或方法。</p>\n</li>\n<li><p>静态成员变量也叫类属性或类变量，静态成员变量调用时可以对象.类属性或类名.类属性来访问。</p>\n</li>\n<li><p>静态方法调用时只能通过类名.类方法调用，在调用该方法时，不会将对象的引用（this）传递给它，所以在 static 方法中不可访问非static的成员，静态方法只能访问静态成员变量或静态方法。</p>\n</li>\n<li><p> 父类中是静态方法，子类中不能覆盖为非静态方法；在符合覆盖规则的前提下， 在父子类中，父类中的静态方法可以被子类中的静态方法覆盖，但无多态。 （在使用对象调用静态方法时，实则是调用编译时类型的静态方法）。</p>\n</li>\n<li><p>父子类中，静态方法只能被静态方法覆盖，父子类中，非静态方法只能被非静 态方法覆盖。</p>\n</li>\n</ul>\n<h4 id=\"静态初始化块-static\"><a href=\"#静态初始化块-static\" class=\"headerlink\" title=\"静态初始化块 static {}\"></a>静态初始化块 static {}</h4><p>注：如果希望加载后，对整个类进行某些初始化操作，可以使用static初始化块</p>\n<ol>\n<li>是在类初始化时执行，不是在创建对象时执行。 </li>\n<li>静态初始化块中不能访问非static成员变量。</li>\n<li>执行顺序：上溯到Object类，先执行Object的静态初始化块，再向下执行子 类的静态初始化块，直到我们的类的静态初始化块为止。</li>\n</ol>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><ul>\n<li><u>通过extends父类(单继承)关键词或implements接口(多继承)</u></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Person</span><br>&#123;<br>String speciality;<br><span class=\"hljs-comment\">//专业</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>不支持多继承</strong></p>\n</li>\n<li><p>在java（C++-）中类只有单继承，没有像C++那样的多继承。多 继承，就是为了实现代码的复用性，却引入了复杂性，使得系统类之间 的关系混乱；Java中的多继承，可以通过接口实现</p>\n</li>\n<li><p>如果定义一个类时，没有调用extends，则它的父类是java.lang.Object。Object类是所有java类的根基类。</p>\n</li>\n</ul>\n<h3 id=\"1-方法的重写\"><a href=\"#1-方法的重写\" class=\"headerlink\" title=\"1.方法的重写\"></a>1.方法的重写</h3><ul>\n<li><p>在子类中可以根据需要对父类中继承来的方法进行重写。</p>\n</li>\n<li><p>重写方法必须和被重写方法具有相同方法名称、参数列表。通过子类去调用该<br>方法，会调用重写方法而不是被重写方法(叫做重写方法覆盖被重写方法)。</p>\n</li>\n<li><p>可以在子类重写方法中调用被重写方法: super关键字。</p>\n</li>\n<li><p>重写方法的访问权限，子类大于等于父类(由于多态)。</p>\n</li>\n<li><p>重写方法的返回值类型和声明异常类型，子类小于等于父类。</p>\n</li>\n<li><p>对象.方法() :先在本类内部找是否有该方法，如果没有，到直接父类去找,<br>如果还没有，则一直往上层找，一直找到Object， 如果还没有，则报错。</p>\n</li>\n<li><p>子类继承父类的成员变量,子类继承父类除构造方法以外的成员方法,子类不能继承父类的构造方法,子类可以增加成员，可以重定义从父类继承来的成员，但不能删除它们。</p>\n</li>\n</ul>\n<h3 id=\"2-子类对父类的访问权限\"><a href=\"#2-子类对父类的访问权限\" class=\"headerlink\" title=\"2.子类对父类的访问权限\"></a>2.子类对父类的访问权限</h3><ul>\n<li><p>子类不能访问父类的私有成员( private )</p>\n</li>\n<li><p>子类能够访问父类的公有成员( public)和保护成员(protected)</p>\n</li>\n<li><p>子类对父类的缺省权限成员的访问控制，以包为界分两种情况，可以访问当前包中成员。</p>\n</li>\n</ul>\n<h3 id=\"3-super引用\"><a href=\"#3-super引用\" class=\"headerlink\" title=\"3.super引用\"></a>3.super引用</h3><ol>\n<li><p>调用父类的构造方法：super([参数列表])</p>\n</li>\n<li><p>super是直接父类对象的引用，和this类似。</p>\n</li>\n<li><p>引用父类同名成员</p>\n<ul>\n<li><p>子类隐藏父类成员变量：super.成员变量</p>\n</li>\n<li><p>子类覆盖父类成员方法：super.成员方法([参数列表])</p>\n</li>\n</ul>\n</li>\n<li><p>构造方法:任何类的构造方法中，若是构造函数的第一行代码没有显式调用<br>super(..);那么Java默认都会调用super();作为父类的初始化函数。所以这里的super()加不加都会无所谓。( 内存分析，wrap:new对象的时候采用子类包裹父类的结构)</p>\n</li>\n<li><p>同一个构造方法里面不能同时调用super()和this()。</p>\n</li>\n<li><p>在本类构造方法中通过super()调用，会一直 上溯到Object()这个构造函数,<br>然后按类层级，依次向下执行各层级构造函数中剩下的代码，直至最低层级的<br>构造函数。同this()一样，super()方法也应该放到构造方法的第一行。</p>\n</li>\n<li><p>new一个类的对象的时候，通过构造方法的从上至下的依次调用，就依次建<br>立了新的根对象、父类对象和自身对象，其中，this指向新建的对象本身，<br>super指向新建的直接父类对象本身。</p>\n</li>\n</ol>\n<h3 id=\"4-组合VS继承\"><a href=\"#4-组合VS继承\" class=\"headerlink\" title=\"4.组合VS继承\"></a>4.组合VS继承</h3><ol>\n<li><p>“is-a”关系使用继承，“has-a”关系使用组合:计算机类、主板类。可以通过在计算机类中增加主板属性来复用主板类的代码。</p>\n</li>\n<li><p>如果仅仅从代码复用的角度考虑，组合完全可以替代继承。</p>\n</li>\n<li><p>所谓组合，就是把要组合的另一个类作为属性放到类里面。</p>\n</li>\n<li><p>是就用继承、有就用组合。</p>\n</li>\n</ol>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916083605738.png\" alt=\"image-20220916083605738\"></p>\n<h2 id=\"类的多态\"><a href=\"#类的多态\" class=\"headerlink\" title=\"类的多态\"></a>类的多态</h2><h3 id=\"1-子类重定义父类成员\"><a href=\"#1-子类重定义父类成员\" class=\"headerlink\" title=\"1.子类重定义父类成员\"></a>1.子类重定义父类成员</h3><ul>\n<li>子类隐藏父类成员变量</li>\n<li>子类覆盖父类成员方法<ul>\n<li>覆盖(override)是指子类声明并实现父类中的同名方法并且参数列表也完全相同。子类继承并重载父类成员方法</li>\n<li>重载.(overload)是指同一个类中的多个方法可以同名但参数列表必须不同。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-类型的多态\"><a href=\"#2-类型的多态\" class=\"headerlink\" title=\"2.类型的多态\"></a>2.类型的多态</h3><ul>\n<li><p>子类对象即是父类对象</p>\n<p><code>new Student() instanceof Person //true</code></p>\n<p><code>new Person() instanceof Student //false</code></p>\n</li>\n<li><p>父类对象引用子类对象</p>\n<p><code>Person p = new Student(); / /赋值相容</code><br><code>Student s = new Person();//语法错误</code><br><code>Object obj = new Person();/ /赋值相容</code></p>\n</li>\n</ul>\n<h3 id=\"3-编译时的多态和运行时的多态\"><a href=\"#3-编译时的多态和运行时的多态\" class=\"headerlink\" title=\"3.编译时的多态和运行时的多态\"></a>3.编译时的多态和运行时的多态</h3><ul>\n<li><p>编译时多态性</p>\n<p><u>方法重载都是编译时多态。</u></p>\n<p><u>方法覆盖表现出两种多态性，当对象引用本类实例时，为编译时多态，否则为运行时多态。</u></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(.....);<br>p.toString()<br><span class=\"hljs-comment\">//执行Person类的toString()</span><br>Student s= <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Studen</span>(.....);<br>s.toString()<br><span class=\"hljs-comment\">//执行Student类的toString()</span><br></code></pre></td></tr></table></figure></li>\n<li><p>运行时多态性</p>\n<p><u>自下而上搜索，有则调用无责溯源</u></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916085315869.png\" alt=\"image-20220916085315869\"></p>\n</li>\n</ul>\n<h3 id=\"4-多态的方法实现\"><a href=\"#4-多态的方法实现\" class=\"headerlink\" title=\"4.多态的方法实现\"></a>4.多态的方法实现</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921141638509.png\" alt=\"image-20220921141638509\"></p>\n<ul>\n<li><p>子类类型的对象地址可以直接赋给父类类型的引用对象，这个称为向上转型，是实现多态的基础。</p>\n</li>\n<li><p>A instanceof B: A对象的类型是否是B类型，只有在A对象的类型和B类型相同，或为父子类型时，编译不报错。而在运行时，只有A对象类型为B类型的子类型或者就是B类型时，结果才返回true。</p>\n</li>\n<li><p>内存分析(例子: myServlet) :调用父类的service(),然后调用子类的doGet() (注意: this关键字指向整个最终包裹对象，即最外层的子对象;而在包裹对象中，每-一层对象通过super关键字指向内一层的父对象)。</p>\n</li>\n<li><p>多态指的是方法的多态(到底调用那个方法，运行时决定)，属性没有多态。</p>\n</li>\n<li><p>针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</p>\n</li>\n</ul>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921145517282.png\" alt=\"image-20220921145517282\"></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClosedFigure</span><br><span class=\"hljs-comment\">//闭合图形抽象类</span><br>&#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">area</span><span class=\"hljs-params\">( )</span>;<br><span class=\"hljs-comment\">//计算面积，抽象方法，以分号&quot;;&quot;结束</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><u>构造方法、静态成员方法</u>不能被声明为抽象<br>方法。</li>\n<li>一个非抽象类必须实现从父类继承来的所有<br>抽象方法。</li>\n<li>不能创建抽象类的实例。例如:<code>ClosedFigure g = new ClosedFigure();</code> </li>\n<li><u>abstract修饰方式的初衷就是要求其子类覆盖(实现)这个方法，并且调用时可以以多态方式调用子类覆盖后的方法(抽象类主要和多态技术相结合)</u>，即抽象方法必须在其子类中实现，除非子类本身也是抽象类。<u>abstract不允许修饰成员变量</u>，因为成员变量也没有重写这个概念!</li>\n<li>抽象类可以只有具体方法，也可以全是抽象方法，子类继承抽象类也可以是抽象类，但要实例化的类不能是抽象类。</li>\n<li>不能放在一起的修饰符: <u>final和abstract, private和abstract, static和abstract</u>，因为abstract修饰的方法是必须在其子类中实现(覆盖)，才能以多态方式调用，以上修饰符在修饰方法时期子类都覆盖不了这个方法，<u>final是不可以覆盖</u>，<u>private是不能</u><br><u>够继承到子类</u>，所以也就不能覆盖，<u>static是可以覆盖的，但是在调用时会调用编译时类型的方法，因为调用的是父类的方法，而父类的方法又是抽象的方法，又不能够调用</u>，所以上面的修饰符不能放在一起。</li>\n</ol>\n<h2 id=\"最终类\"><a href=\"#最终类\" class=\"headerlink\" title=\"最终类\"></a>最终类</h2><ol>\n<li><p>声明最终类， 不能被继承</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Math</span><br><span class=\"hljs-comment\">//数学类，最终类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyMath</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Math</span><br><span class=\"hljs-comment\">//语法错</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Ellipse</span> / /最终类<br></code></pre></td></tr></table></figure></li>\n<li><p>声明最终方法,不能被子类覆盖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Ellipse</span><br><br>/ /非最终类<br><br>&#123;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">area</span><span class=\"hljs-params\">( )</span><br><br><span class=\"hljs-comment\">//最终方法</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"final关键词\"><a href=\"#final关键词\" class=\"headerlink\" title=\"final关键词\"></a>final关键词</h3><ol>\n<li>final修饰变量时表示常量。<u>变量被final修饰，就会变成常量</u>(常量应大写)，一旦赋值不能改变(可以在<u>初始化时直接赋值</u>，也可以在<u>构造方法里赋值</u>，只能在这两种方法里二选一，<u>必须为常量赋值</u>) ;final的常量不会有默认初始值，对于直接在初始化时赋值方式，final修饰符常和static修饰符一起使用。</li>\n<li>final修饰方法( 最终方法)时表示<u>该方法不可被子类重写</u>。但是<u>可以被重载</u>。</li>\n<li><u>final修饰类</u>(最终类)时表示修饰的<u>类不能有子类</u>，不能被继承。比如Math、String。 final类中的方法也都是final的。</li>\n</ol>\n<h2 id=\"接口类\"><a href=\"#接口类\" class=\"headerlink\" title=\"接口类\"></a>接口类</h2><p><u>如果一个抽象类没有字段，所有方法全部都是抽象方法，就可以将该抽象类改为接口。</u></p>\n<p>类不能多继承类，但可以实现多个接口，一个接口可以继承多个接口。</p>\n<p>接口可以看成<u><strong>狭义抽象</strong></u>，将设计与实现彻底分离。</p>\n<p>通过给类新增接口来改变类，而不影响子类。</p>\n<p>接口不能有构造方法，抽象类可以有。</p>\n<p>接口可以定义<code>default</code>方法（有方法实体，子类可以不用重写）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Person</span>&#123;<br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> ;<br>String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> ;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>类实现接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><span class=\"hljs-comment\">//规定下面的编译为重写</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.name + <span class=\"hljs-string\">&quot; run&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"抽象类和接口的对比\"><a href=\"#抽象类和接口的对比\" class=\"headerlink\" title=\"抽象类和接口的对比\"></a>抽象类和接口的对比</h3><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921155545894.png\" alt=\"image-20220921155545894\" style=\"zoom: 80%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;Xiao Ming&quot;</span>);<br>        p.run();<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>    String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span>;<br>    <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(getName() + <span class=\"hljs-string\">&quot; run&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"接口与抽象的区别\"><a href=\"#接口与抽象的区别\" class=\"headerlink\" title=\"接口与抽象的区别\"></a>接口与抽象的区别</h3><ul>\n<li><p>接口不能有方法体，抽象类可以有。</p>\n</li>\n<li><p>接口不能有静态方法，抽象类可以有。</p>\n</li>\n<li><p>在接口中凡是变量必须是public static final,而在抽象类中没有要求。</p>\n</li>\n<li><p>抽象类本质上还是-一个类，子类是用关键字extends来继承它，并扩展的，有非常强的is-a的关系。而接口，是被其他类用关键字implements来实现接口定义的方法的。接口只是定义功能和行为规范，如果一个类实现了一个接口，那么这个类必须遵守这个接口的方法约定，但没有is-a的关系。</p>\n</li>\n</ul>\n<h3 id=\"内部类和内部接口\"><a href=\"#内部类和内部接口\" class=\"headerlink\" title=\"内部类和内部接口\"></a>内部类和内部接口</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923082921856.png\" alt=\"image-20220923082921856\"></p>\n<ul>\n<li><p>内嵌类型不能与外层类型同名。</p>\n</li>\n<li><p>内部类中可以声明成员变量和成员方法。</p>\n</li>\n<li><p>内部类可以继承父类或实现接口。.</p>\n</li>\n<li><p>可以声明内部类为抽象类，该抽象类必须被其他内部类继承;内部接口必须被其他内部类实现。</p>\n</li>\n<li><p>使用点运算符“”引用内嵌类型:外层类型.内嵌类型Pixel.Color</p>\n</li>\n<li><p>内嵌类型具有类中成员的4种访问控制权限。当内部类可被访问时，才能考虑内部类中成员的访问控制权限。</p>\n</li>\n<li><p>内嵌类型与其外层类型彼此信任，能访问对方的所有成员</p>\n</li>\n<li><p>内部接口总是静态的。内部类可声明是静态的或实例的，静态内部类能够声明静态成员，但不能引用外部类的实例成员;实例内部类不能声明静态成员。</p>\n</li>\n<li><p>在实例内部类中，使用以下格式引用或调用外部类当前实例的成员变量或实例成员方法:</p>\n<p><code>外部类.this.成员变量//引用外部类当前实例的成员变量</code></p>\n<p><code>外部类.this.实例成员方法(参数列表)//调用外部类当前实例的成员方法</code></p>\n</li>\n</ul>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923083806822.png\" alt=\"image-20220923083806822\"></p>\n<p>**自动裝箱:**基本数据类型就自动的封装到与它相同类型的包装中。如:<br>Integeri = 100;本质上就是编译器编译时自动为我们添加了Integeri =<br>new Integer( 100);<br><u>自动拆箱:</u>包装类对象自动转化为基本数据类型。如:inta=new<br>Integer(100);本质上就是编译器编译时自动为我们添加了inta = new<br>Integer( 100).intValue();<br><strong>缓存问题:</strong> [-128,127]之 间的数对应的包装类对象，仍然当做基本数据类型<br>来处理;一旦遇到一个这个之间的数(默认为这些小的数使用频率会很高)，<br>把他包装成-一个对象后，就缓存起来，下次如果又要包装-一个这个数的对象，<br>则去看是否已经有这个对象，有就直接拿来使用，这样可以节省内存空间、提<br>高效率(享元模式)。<br>**享元模式:**有很多小对象，它们的大部分属性相同，这时可以把它们变成-一个<br>对象，那些相同的属性为对象的内部状态，那些不同的属性可以变为方法的参<br>数，由外部传入。例: -128~127 内的相同整数自动装箱为同一个对象。</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><h3 id=\"泛型声明\"><a href=\"#泛型声明\" class=\"headerlink\" title=\"泛型声明\"></a>泛型声明</h3><p><code>[修饰符] class 类&lt;类型参数列表&gt; [extends父类] [implements 接口列表]</code><br><code>[public] interface 接口 &lt; 类型参数列表&gt; [extends父接口列表]</code><br><code>[public] [static]&lt; &lt; 类型参数列表&gt;返回值类型方法([参数列表]) [throws 异常类</code><br><code>列表]</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923092011478.png\" alt=\"image-20220923092011478\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GenericIntercace</span>&lt;T&gt; &#123;<br>T <span class=\"hljs-title function_\">getData</span><span class=\"hljs-params\">()</span>;<span class=\"hljs-comment\">//类似于c++的模板</span><br></code></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li><p>接口中泛型字母只能使用在方法中，不能使用在全局常量中</p>\n</li>\n<li><p>泛型方法可以在非泛型类中</p>\n</li>\n</ul>\n<h3 id=\"泛型继承\"><a href=\"#泛型继承\" class=\"headerlink\" title=\"泛型继承\"></a>泛型继承</h3><p>泛型父类:子类为”富二代”:子类的泛型要比父类多</p>\n<ol>\n<li><p>保留父类的泛型–&gt;子类为泛型类</p>\n</li>\n<li><p>不保留父类泛型–&gt;子类按需实现</p>\n</li>\n</ol>\n<ul>\n<li>子类. [重写方法]的参数类型–&gt;随父类而定</li>\n<li>子类新增的方法，参数类型随子类而定</li>\n<li>子类中使用父类的[属性] –&gt; 随父类而定</li>\n<li>子类使用自己的属性–&gt;随子类而定</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923093134846.png\" alt=\"image-20220923093134846\"></p>\n<h3 id=\"泛型擦除\"><a href=\"#泛型擦除\" class=\"headerlink\" title=\"泛型擦除\"></a>泛型擦除</h3><ul>\n<li>定义:泛型擦除是指在继承(实现)或使用时没有指定具体的类型</li>\n<li>特点:一旦擦除之后按Object处理</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//2)没有类型擦除--》Object</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">C4</span> &lt;A,B&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Father</span>&#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(Object name)</span> &#123;子类重写方法的参数类型--&gt;随父类而定:<br>Object <br><span class=\"hljs-type\">this</span> <span class=\"hljs-variable\">age</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>:);<span class=\"hljs-comment\">//Object类型，子类使用父类的[属性]，类型</span><br>随父类而定<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><ul>\n<li>T、K、V、E等泛型字母为有类型，类型参数赋予具体的值</li>\n<li>?未知类型类型参数赋予不确定值，任意类型</li>\n<li>只能用在声明类型、方法参数上，不能用在定义泛型类上</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GenericTest</span> &#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[ args)</span> &#123;<br>List&lt;String&gt; name = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayL</span> ist&lt;String&gt;();<br>List&lt;Integer&gt; age = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayL</span> ist&lt;Integer&gt;();<br>List&lt;Number&gt; number = <span class=\"hljs-keyword\">new</span><br><span class=\"hljs-title class_\">ArrayList</span>&lt;Number&gt;();<br>name.add(<span class=\"hljs-string\">&quot;icon&quot;</span>);<br>age.add(<span class=\"hljs-number\">18</span>);<br>number.add(<span class=\"hljs-number\">314</span>);<br>getData(name);<br>getData(age); <br>getData(number);<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">getData</span><span class=\"hljs-params\">(List&lt;?&gt; data)</span> &#123;<br>System.out.println(<span class=\"hljs-string\">&quot;data :&quot;</span> + data.get(<span class=\"hljs-number\">0</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"第四章、异常处理\"><a href=\"#第四章、异常处理\" class=\"headerlink\" title=\"第四章、异常处理\"></a>第四章、异常处理</h1><h2 id=\"异常类型\"><a href=\"#异常类型\" class=\"headerlink\" title=\"异常类型\"></a>异常类型</h2><ul>\n<li>用户输入了非法数据。 </li>\n<li>要打开的文件不存在。 </li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p><img src=\"C:\\Users\\alleyf\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928141405830.png\" alt=\"image-20220928141405830\"></p>\n<h2 id=\"异常处理基础\"><a href=\"#异常处理基础\" class=\"headerlink\" title=\"异常处理基础\"></a>异常处理基础</h2><ul>\n<li><p>将程序正常代码与错误处理代码分开。</p>\n</li>\n<li><p>使程序具有处理运行错误的能力。</p>\n</li>\n</ul>\n<h3 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h3><p>( Error)指程序运行时遇到的硬件、操作系统、<br>虚拟机的错误。 Error错误类。Java程序<strong>不能处理错误</strong>，只能依靠外界干预。</p>\n<ol>\n<li>NoClassDefFoundError类定，义未找到错误。没有<br>.class文件， 或没有main()方法时。</li>\n<li>OutOfMemoryError内存溢出错误。没有可用内存时。</li>\n<li>StackOverflowError栈溢出错误。当递归函数不能正常结束时。</li>\n</ol>\n<p><img src=\"C:\\Users\\alleyf\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928142730920.png\" alt=\"image-20220928142730920\"></p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>（Exception）指在硬件、操作系统、虚拟 机正常时，程序遇到的运行错（语义错）</p>\n<h4 id=\"异常类（默认java-lang包）\"><a href=\"#异常类（默认java-lang包）\" class=\"headerlink\" title=\"异常类（默认java.lang包）\"></a>异常类（默认java.lang包）</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928143014612.png\" alt=\"image-20220928143014612\"></p>\n<h4 id=\"内置异常类\"><a href=\"#内置异常类\" class=\"headerlink\" title=\"内置异常类\"></a>内置异常类</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160253693.png\" alt=\"image-20220928160253693\"></p>\n<h4 id=\"异常方法\"><a href=\"#异常方法\" class=\"headerlink\" title=\"异常方法\"></a>异常方法</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160326479.png\" alt=\"image-20220928160326479\"></p>\n<p>异常类声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Throwable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> <br>&#123;<br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMessage</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">//获得异常信息</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">//获得异常对象的描述信息</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printStackTrace</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//显示异常栈跟踪信息</span><br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Exception</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Throwable</span><br>&#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Exception</span><span class=\"hljs-params\">()</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Exception</span><span class=\"hljs-params\">(String message)</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>ArithmeticException</strong></p>\n<p> 3/0 //整除，除数为0，算术异常</p>\n<p>3.0/0 //实数除，除数为0，无穷大 </p>\n</li>\n<li><p><strong>NullPointerException</strong> 空对象异常</p>\n<p> int x[] = null;</p>\n<p> x[0] = 1; //对空数组中的元素进行操作</p>\n<p> String str = null;</p>\n<p> str.length() //空对象调用方法</p>\n</li>\n<li><p>ClassCastException </p>\n<p>Object obj = new Object(); </p>\n<p>String str = (String) obj; //类型强制转换异常</p>\n</li>\n</ol>\n<h2 id=\"异常处理措施\"><a href=\"#异常处理措施\" class=\"headerlink\" title=\"异常处理措施\"></a>异常处理措施</h2><h3 id=\"异常处理语句\"><a href=\"#异常处理语句\" class=\"headerlink\" title=\"异常处理语句\"></a>异常处理语句</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span><br>&#123;<br>语句<span class=\"hljs-number\">1</span>； <span class=\"hljs-comment\">//存在潜在异常的代码</span><br>&#125;<br><span class=\"hljs-keyword\">catch</span> (异常类 异常对象)<br>&#123;<br>语句<span class=\"hljs-number\">2</span>； <span class=\"hljs-comment\">//捕获到异常并进行处理的代码</span><br>&#125;<br><span class=\"hljs-keyword\">finally</span><br>&#123;<br>语句<span class=\"hljs-number\">3</span>；<span class=\"hljs-comment\">//最后必须执行的代码，无论是否捕获到异常</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h3><p><u>抛出异常对象的throw语句</u></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">[修饰符] 返回值类型 方法([参数列表])[<span class=\"hljs-keyword\">throws</span>异常类列表]<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">parseInt</span><span class=\"hljs-params\">(String s)</span><br><span class=\"hljs-keyword\">throws</span> NumberFormatException<br>日期类声明抛出异常的方法与方法调用者处理异常。<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year, <span class=\"hljs-type\">int</span> month, <span class=\"hljs-type\">int</span> day)</span><br><span class=\"hljs-keyword\">throws</span> Exception<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyDate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year, <span class=\"hljs-type\">int</span> month, <span class=\"hljs-type\">int</span> day)</span><br><span class=\"hljs-keyword\">throws</span> Exception<br>&#123;<br><span class=\"hljs-built_in\">this</span>.set(year, month, day);<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"throws和throw以及try-catch-finally的区别\"><a href=\"#throws和throw以及try-catch-finally的区别\" class=\"headerlink\" title=\"throws和throw以及try-catch-finally的区别\"></a>throws和throw以及try-catch-finally的区别</h3><ul>\n<li>throws为方法声明可能出现的异常，函数调用者处理不处理异常则继续向下抛出异常直至被处理，否则程序结束。</li>\n<li>throw主要是发现异常并抛出指定的异常给调用者。</li>\n<li>throw要么和try-catch-finally语句配套使用，要么与throws配套 使用。但throws可以单独使用，然后再由处理异常的方法捕获。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ThrowsDemo</span> &#123;<br><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">throwOne</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IllegalAccessException &#123;<br>System.out.println(<span class=\"hljs-string\">&quot;Inside throwOne.&quot;</span>);<br><span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalAccessException</span>(<span class=\"hljs-string\">&quot;demo&quot;</span>);<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> &#123;<br><span class=\"hljs-keyword\">try</span> &#123;<br>throwOne();<br>&#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>System.out.println(<span class=\"hljs-string\">&quot;Caught &quot;</span> + e);<br>&#125;&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<p><strong>版权归属：</strong><a href=\"https://fcsy.fit/\">Alleyf</a></p>\n","site":{"data":{}},"wordcount":12760,"more":"<h1 id=\"第一章、计算机语言及系统概述\"><a href=\"#第一章、计算机语言及系统概述\" class=\"headerlink\" title=\"第一章、计算机语言及系统概述\"></a>第一章、计算机语言及系统概述</h1><h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ol>\n<li><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907091018.png\" style=\"zoom: 33%;\" /></li>\n<li>特点：<strong>Write once，run anywhere！</strong></li>\n</ol>\n<ul>\n<li><strong>java：java program-&gt;执行编译后的程序</strong></li>\n<li> <strong>javac：java program.java-&gt;编译该程序生成.class文件</strong></li>\n<li> <strong>javadoc：javadoc program-&gt;生成该程序的html文档</strong></li>\n</ul>\n<ol start=\"3\">\n<li><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135804.png\" style=\"zoom:33%;\" /></li>\n<li><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135836.png\" style=\"zoom:33%;\" />\n## 代码示例\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HelloWorld</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <br>    &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Hello world!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n# 第二章、数据类型及变量</li>\n</ol>\n<h2 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135908.png\" style=\"zoom:33%;\" />\n\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135913.png\" style=\"zoom:33%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">DefineKey</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-type\">int</span> _j=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">int</span> $k=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-comment\">//        int 1i=0;(NO)</span><br><span class=\"hljs-comment\">//        int 中国=1;(不建议)</span><br>        <span class=\"hljs-type\">byte</span> a=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-type\">double</span> b=<span class=\"hljs-number\">0.1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135920.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135925.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135953.png\" style=\"zoom:33%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">BaseData</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">123</span>;<span class=\"hljs-comment\">//默认十进制</span><br>    <span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0123</span>;<span class=\"hljs-comment\">//八进制</span><br>    <span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0x123</span>;<span class=\"hljs-comment\">//16进制</span><br>    <span class=\"hljs-type\">long</span> c=<span class=\"hljs-number\">55555</span>;<br>    <span class=\"hljs-type\">long</span> d=<span class=\"hljs-number\">555555555555555L</span>;<br>    <span class=\"hljs-type\">double</span> e=<span class=\"hljs-number\">521e2</span>;<br>    <span class=\"hljs-type\">char</span> f=<span class=\"hljs-string\">&#x27;\\u0064&#x27;</span>;<br>    System.out.println(f);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"进制转换\"><a href=\"#进制转换\" class=\"headerlink\" title=\"进制转换\"></a>进制转换</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907135958.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140005.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140009.png\" style=\"zoom:33%;\" />\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140012.png\" style=\"zoom:33%;\" />\n\n<h2 id=\"类型转换：\"><a href=\"#类型转换：\" class=\"headerlink\" title=\"类型转换：\"></a>类型转换：</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140707.png\" style=\"zoom: 33%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907140020.png\" style=\"zoom: 50%;\" />\n**提升转换不丢失精度;(type)var强制类型转换**\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">TypeChange</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>    <span class=\"hljs-type\">double</span> s=<span class=\"hljs-number\">3.1415</span>;<br>    <span class=\"hljs-type\">int</span> n=(<span class=\"hljs-type\">int</span>)s;<br>    <span class=\"hljs-type\">char</span> b=(<span class=\"hljs-type\">char</span>)n;<br>    <span class=\"hljs-type\">char</span> a=<span class=\"hljs-string\">&#x27;a&#x27;</span>;<br>    String c;<br>    System.out.println(n+b);<br>    <span class=\"hljs-type\">int</span> money=<span class=\"hljs-number\">1000000000</span>;<span class=\"hljs-comment\">//int型为4个字节最大为21亿，超出则异常</span><br>    <span class=\"hljs-type\">int</span> years=<span class=\"hljs-number\">20</span>;<br>    <span class=\"hljs-type\">double</span> total=(<span class=\"hljs-type\">double</span>)(money)*years;<span class=\"hljs-comment\">//提前将其中一个整形转换为浮点型以避免精度缺失</span><br>    System.out.println(total);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907143232.png\" style=\"zoom:33%;\" />\n\n<p>最终变量（必须初始化）：<strong>final</strong> type variable；variable=value；</p>\n<p><strong>定义时初始化或构造函数初始化</strong></p>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><ul>\n<li><strong>只能被初始化一次</strong></li>\n<li><strong>常量名全部大写，单词过多使用下划线</strong></li>\n</ul>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907142721.png\" style=\"zoom:33%;\" />\n\n<h2 id=\"运算符与表达式\"><a href=\"#运算符与表达式\" class=\"headerlink\" title=\"运算符与表达式\"></a>运算符与表达式</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220907150838.png\" style=\"zoom:33%;\" />\n\n<h2 id=\"输出进制格式化\"><a href=\"#输出进制格式化\" class=\"headerlink\" title=\"输出进制格式化\"></a>输出进制格式化</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(<span class=\"hljs-string\">&quot;二进制输出&quot;</span>+Integer.toBinaryString(a));<br>System.out.println(<span class=\"hljs-string\">&quot;八进制输出&quot;</span>+Integer.toOctalString(a));<br>System.out.println(<span class=\"hljs-string\">&quot;十六进制输出&quot;</span>+Integer.toHexString(a));<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h3><ul>\n<li><p>定义：<strong>type[] arrayname = new type[num] 或  type arrayname[] = new type[num]</strong></p>\n</li>\n<li><p><strong>初始化默认值为零</strong></p>\n</li>\n<li><p><strong>数组直接赋值属于传引用，指向同一个地址空间</strong></p>\n</li>\n</ul>\n<h3 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h3><ul>\n<li>定义：<strong>type[][] arrayname = new type[m][n]</strong></li>\n<li>可以不规则，给不同行分配不同大小的列<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909084420.png\" style=\"zoom:25%;\" /></li>\n</ul>\n<h2 id=\"容器遍历元素\"><a href=\"#容器遍历元素\" class=\"headerlink\" title=\"容器遍历元素\"></a>容器遍历元素</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : fib)<br>/ /vaue获得fib数组每个元素,<br>/ /相当于fib[i]<br>\tSystem.out,print(<span class=\"hljs-string\">&quot; &quot;</span> +value);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"方法（递归）\"><a href=\"#方法（递归）\" class=\"headerlink\" title=\"方法（递归）\"></a>方法（递归）</h2><ul>\n<li><strong>递归方法适合用于分段函数类型的问题求解，必须有递归头和递归体</strong></li>\n<li><strong>递归和堆栈原理类似，递归也可以通过堆栈实现</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//斐波那契数列第n项</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">fib</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    &#123;<br>        System.out.println(sequence(<span class=\"hljs-number\">10</span>));<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sequence</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(n == <span class=\"hljs-number\">0</span>|n == <span class=\"hljs-number\">1</span>)<br>            <span class=\"hljs-keyword\">return</span> n;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(n&gt;=<span class=\"hljs-number\">2</span>)<br>            <span class=\"hljs-keyword\">return</span> sequence(n-<span class=\"hljs-number\">2</span>)+sequence(n - <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;Index error&quot;</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ol>\n<li><p>字符串常量“abc”</p>\n</li>\n<li><p>String是字符串类</p>\n</li>\n<li><p><code>s.charAt(index)//索引下标的值</code></p>\n</li>\n<li><p>字符串变量及运算</p>\n<ul>\n<li><p>赋值运算</p>\n<p>​    String str = “abc”;</p>\n<p>​    String str2 = str;</p>\n</li>\n<li><p>连接运算+ +=</p>\n<p>​    str = “abc” + “xyz”; //str的值为”abcxyz”</p>\n</li>\n</ul>\n</li>\n<li><p><strong>字符串不是字符数组</strong></p>\n</li>\n</ol>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909093029.png\" style=\"zoom:25%;\" />\n\n<h2 id=\"API文档\"><a href=\"#API文档\" class=\"headerlink\" title=\"API文档\"></a>API文档</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/blog/20220909092844.png\" style=\"zoom:25%;\" />\n\n<h1 id=\"第三章、类的封装、继承和多态\"><a href=\"#第三章、类的封装、继承和多态\" class=\"headerlink\" title=\"第三章、类的封装、继承和多态\"></a>第三章、类的封装、继承和多态</h1><h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><p>类的特点：<code>具有封装性，继承性，多态性和抽象性。</code></p>\n<p>对象：<code>对象的实例。</code></p>\n<p>注：</p>\n<ul>\n<li>Java中进行方法调用中传递参数时，<strong>遵循值传递的原则</strong>：基本类型传递的是该 数据值本身。引用类型传递的是对对象的引用，而不是对象本身。</li>\n<li>与c++类似，类的定义和调用要分开在两个文件中，类的声明与定义在一个文件，类的调用要在另外一个文件的类中定义一个类对象: <code>classname objname=new classname()</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//类的声明</span><br><span class=\"hljs-keyword\">package</span> ch4;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">people</span> &#123;<br>    <span class=\"hljs-keyword\">protected</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getname</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getage</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setname</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setage</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//类的调用</span><br><span class=\"hljs-keyword\">package</span> ch4;<br><br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">callpeople</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">people</span> <span class=\"hljs-variable\">zyk</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">people</span>();<br>        <span class=\"hljs-type\">people</span> <span class=\"hljs-variable\">fcs</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">people</span>();<br>        fcs = zyk;<br>        zyk.setname(<span class=\"hljs-string\">&quot;赵逸坤&quot;</span>);<br>        zyk.setage(<span class=\"hljs-number\">21</span>);<br>        System.out.println(zyk.getname()+<span class=\"hljs-string\">&quot;今年&quot;</span>+zyk.getage()+<span class=\"hljs-string\">&quot;岁了&quot;</span>);<br>        System.out.println(zyk);<br>        System.out.println(fcs);<br><span class=\"hljs-comment\">//        Scanner in = new Scanner(System.in);</span><br><span class=\"hljs-comment\">//        String name = in.next();</span><br><span class=\"hljs-comment\">//        System.out.println(in);</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"类的封装\"><a href=\"#类的封装\" class=\"headerlink\" title=\"类的封装\"></a>类的封装</h2><h3 id=\"1构造方法和析构方法\"><a href=\"#1构造方法和析构方法\" class=\"headerlink\" title=\"1构造方法和析构方法\"></a>1构造方法和析构方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在类里进行定义构造方法，用this对对象引用，从而避免与形参名的冲突</span><br><span class=\"hljs-comment\">//super为隐式参数，为对父类的引用</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">people</span><span class=\"hljs-params\">(String name,<span class=\"hljs-type\">int</span> age)</span> &#123;<br>    <span class=\"hljs-built_in\">this</span>.name = name;<br>    <span class=\"hljs-built_in\">this</span>.age = age;<br>&#125;<br><span class=\"hljs-comment\">//析构方法</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">finalize</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 对象的清理工作</span><br>&#125;<br><span class=\"hljs-comment\">//给对象赋值为null，则对象的内存将会释放，但静态方法和变量不会释放</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>方法和运算符重载：</strong></p>\n<p><code>通过参数列表中参数的类型、个数和顺序的不同进行区别</code></p>\n<h3 id=\"2对象的引用和运算\"><a href=\"#2对象的引用和运算\" class=\"headerlink\" title=\"2对象的引用和运算\"></a>2对象的引用和运算</h3><ul>\n<li>instanceof对象运算符       eg：<code>d instanceof MyDate</code></li>\n<li>super为隐式参数，为对父类的引用</li>\n<li>this为隐式参数，为对对象本身的引用</li>\n<li>普通方法中，this总是指向调用该方法的对象; 构造方法中，this总是指向正要初始化的对象；this不能用于static方法；可以在一个构造方法中通过this调用其它构造方法，且必须是构造方法中 的第一条语句</li>\n</ul>\n<h3 id=\"3访问控制-隐藏-封装\"><a href=\"#3访问控制-隐藏-封装\" class=\"headerlink\" title=\"3访问控制-隐藏/封装\"></a>3访问控制-隐藏/封装</h3><ul>\n<li>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用， 从而提高系统的可扩展性、可维护性。</li>\n<li>boolean变量的get方法是is开头；常量或 static 变量公开</li>\n<li>default：默认访问控制属性，什么都没加就是该控制符。有的书上说 friendly、package，这都是一个意思，都不能真的写出来，如果什么访 问修饰符都不加，就是default/friendly/package</li>\n<li>Java的访问控制是停留在编译层，也就是它不会在.class文件中留下任何 痕迹，只在编译的时候进行访问控制的检查。其实，通过反射的手段，可 以访问任何包下任何类中的成员，例如，访问类中的私有成员也是可以的。说明访问控制是<code>伪封装（类似于python）</code>。</li>\n</ul>\n<h4 id=\"类的访问权限：\"><a href=\"#类的访问权限：\" class=\"headerlink\" title=\"类的访问权限：\"></a>类的访问权限：</h4><p>  <strong>只有public和缺省两种</strong></p>\n<p>  eg：public class MyDate 或class MyDate_ex</p>\n<h4 id=\"类成员和函数的访问权限：\"><a href=\"#类成员和函数的访问权限：\" class=\"headerlink\" title=\"类成员和函数的访问权限：\"></a>类成员和函数的访问权限：</h4>  <img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220914154845348.png\" alt=\"image-20220914154845348\" style=\"zoom:67%;\" />\n\n<h4 id=\"声明set-和get-方法存取对象的属性\"><a href=\"#声明set-和get-方法存取对象的属性\" class=\"headerlink\" title=\"声明set()和get()方法存取对象的属性\"></a>声明set()和get()方法存取对象的属性</h4><h3 id=\"4静态成员\"><a href=\"#4静态成员\" class=\"headerlink\" title=\"4静态成员\"></a>4静态成员</h3><ul>\n<li><p>静态成员是属于类本身的公共属性或方法。</p>\n</li>\n<li><p>静态成员变量也叫类属性或类变量，静态成员变量调用时可以对象.类属性或类名.类属性来访问。</p>\n</li>\n<li><p>静态方法调用时只能通过类名.类方法调用，在调用该方法时，不会将对象的引用（this）传递给它，所以在 static 方法中不可访问非static的成员，静态方法只能访问静态成员变量或静态方法。</p>\n</li>\n<li><p> 父类中是静态方法，子类中不能覆盖为非静态方法；在符合覆盖规则的前提下， 在父子类中，父类中的静态方法可以被子类中的静态方法覆盖，但无多态。 （在使用对象调用静态方法时，实则是调用编译时类型的静态方法）。</p>\n</li>\n<li><p>父子类中，静态方法只能被静态方法覆盖，父子类中，非静态方法只能被非静 态方法覆盖。</p>\n</li>\n</ul>\n<h4 id=\"静态初始化块-static\"><a href=\"#静态初始化块-static\" class=\"headerlink\" title=\"静态初始化块 static {}\"></a>静态初始化块 static {}</h4><p>注：如果希望加载后，对整个类进行某些初始化操作，可以使用static初始化块</p>\n<ol>\n<li>是在类初始化时执行，不是在创建对象时执行。 </li>\n<li>静态初始化块中不能访问非static成员变量。</li>\n<li>执行顺序：上溯到Object类，先执行Object的静态初始化块，再向下执行子 类的静态初始化块，直到我们的类的静态初始化块为止。</li>\n</ol>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><ul>\n<li><u>通过extends父类(单继承)关键词或implements接口(多继承)</u></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Person</span><br>&#123;<br>String speciality;<br><span class=\"hljs-comment\">//专业</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>不支持多继承</strong></p>\n</li>\n<li><p>在java（C++-）中类只有单继承，没有像C++那样的多继承。多 继承，就是为了实现代码的复用性，却引入了复杂性，使得系统类之间 的关系混乱；Java中的多继承，可以通过接口实现</p>\n</li>\n<li><p>如果定义一个类时，没有调用extends，则它的父类是java.lang.Object。Object类是所有java类的根基类。</p>\n</li>\n</ul>\n<h3 id=\"1-方法的重写\"><a href=\"#1-方法的重写\" class=\"headerlink\" title=\"1.方法的重写\"></a>1.方法的重写</h3><ul>\n<li><p>在子类中可以根据需要对父类中继承来的方法进行重写。</p>\n</li>\n<li><p>重写方法必须和被重写方法具有相同方法名称、参数列表。通过子类去调用该<br>方法，会调用重写方法而不是被重写方法(叫做重写方法覆盖被重写方法)。</p>\n</li>\n<li><p>可以在子类重写方法中调用被重写方法: super关键字。</p>\n</li>\n<li><p>重写方法的访问权限，子类大于等于父类(由于多态)。</p>\n</li>\n<li><p>重写方法的返回值类型和声明异常类型，子类小于等于父类。</p>\n</li>\n<li><p>对象.方法() :先在本类内部找是否有该方法，如果没有，到直接父类去找,<br>如果还没有，则一直往上层找，一直找到Object， 如果还没有，则报错。</p>\n</li>\n<li><p>子类继承父类的成员变量,子类继承父类除构造方法以外的成员方法,子类不能继承父类的构造方法,子类可以增加成员，可以重定义从父类继承来的成员，但不能删除它们。</p>\n</li>\n</ul>\n<h3 id=\"2-子类对父类的访问权限\"><a href=\"#2-子类对父类的访问权限\" class=\"headerlink\" title=\"2.子类对父类的访问权限\"></a>2.子类对父类的访问权限</h3><ul>\n<li><p>子类不能访问父类的私有成员( private )</p>\n</li>\n<li><p>子类能够访问父类的公有成员( public)和保护成员(protected)</p>\n</li>\n<li><p>子类对父类的缺省权限成员的访问控制，以包为界分两种情况，可以访问当前包中成员。</p>\n</li>\n</ul>\n<h3 id=\"3-super引用\"><a href=\"#3-super引用\" class=\"headerlink\" title=\"3.super引用\"></a>3.super引用</h3><ol>\n<li><p>调用父类的构造方法：super([参数列表])</p>\n</li>\n<li><p>super是直接父类对象的引用，和this类似。</p>\n</li>\n<li><p>引用父类同名成员</p>\n<ul>\n<li><p>子类隐藏父类成员变量：super.成员变量</p>\n</li>\n<li><p>子类覆盖父类成员方法：super.成员方法([参数列表])</p>\n</li>\n</ul>\n</li>\n<li><p>构造方法:任何类的构造方法中，若是构造函数的第一行代码没有显式调用<br>super(..);那么Java默认都会调用super();作为父类的初始化函数。所以这里的super()加不加都会无所谓。( 内存分析，wrap:new对象的时候采用子类包裹父类的结构)</p>\n</li>\n<li><p>同一个构造方法里面不能同时调用super()和this()。</p>\n</li>\n<li><p>在本类构造方法中通过super()调用，会一直 上溯到Object()这个构造函数,<br>然后按类层级，依次向下执行各层级构造函数中剩下的代码，直至最低层级的<br>构造函数。同this()一样，super()方法也应该放到构造方法的第一行。</p>\n</li>\n<li><p>new一个类的对象的时候，通过构造方法的从上至下的依次调用，就依次建<br>立了新的根对象、父类对象和自身对象，其中，this指向新建的对象本身，<br>super指向新建的直接父类对象本身。</p>\n</li>\n</ol>\n<h3 id=\"4-组合VS继承\"><a href=\"#4-组合VS继承\" class=\"headerlink\" title=\"4.组合VS继承\"></a>4.组合VS继承</h3><ol>\n<li><p>“is-a”关系使用继承，“has-a”关系使用组合:计算机类、主板类。可以通过在计算机类中增加主板属性来复用主板类的代码。</p>\n</li>\n<li><p>如果仅仅从代码复用的角度考虑，组合完全可以替代继承。</p>\n</li>\n<li><p>所谓组合，就是把要组合的另一个类作为属性放到类里面。</p>\n</li>\n<li><p>是就用继承、有就用组合。</p>\n</li>\n</ol>\n<h4 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916083605738.png\" alt=\"image-20220916083605738\"></p>\n<h2 id=\"类的多态\"><a href=\"#类的多态\" class=\"headerlink\" title=\"类的多态\"></a>类的多态</h2><h3 id=\"1-子类重定义父类成员\"><a href=\"#1-子类重定义父类成员\" class=\"headerlink\" title=\"1.子类重定义父类成员\"></a>1.子类重定义父类成员</h3><ul>\n<li>子类隐藏父类成员变量</li>\n<li>子类覆盖父类成员方法<ul>\n<li>覆盖(override)是指子类声明并实现父类中的同名方法并且参数列表也完全相同。子类继承并重载父类成员方法</li>\n<li>重载.(overload)是指同一个类中的多个方法可以同名但参数列表必须不同。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-类型的多态\"><a href=\"#2-类型的多态\" class=\"headerlink\" title=\"2.类型的多态\"></a>2.类型的多态</h3><ul>\n<li><p>子类对象即是父类对象</p>\n<p><code>new Student() instanceof Person //true</code></p>\n<p><code>new Person() instanceof Student //false</code></p>\n</li>\n<li><p>父类对象引用子类对象</p>\n<p><code>Person p = new Student(); / /赋值相容</code><br><code>Student s = new Person();//语法错误</code><br><code>Object obj = new Person();/ /赋值相容</code></p>\n</li>\n</ul>\n<h3 id=\"3-编译时的多态和运行时的多态\"><a href=\"#3-编译时的多态和运行时的多态\" class=\"headerlink\" title=\"3.编译时的多态和运行时的多态\"></a>3.编译时的多态和运行时的多态</h3><ul>\n<li><p>编译时多态性</p>\n<p><u>方法重载都是编译时多态。</u></p>\n<p><u>方法覆盖表现出两种多态性，当对象引用本类实例时，为编译时多态，否则为运行时多态。</u></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(.....);<br>p.toString()<br><span class=\"hljs-comment\">//执行Person类的toString()</span><br>Student s= <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Studen</span>(.....);<br>s.toString()<br><span class=\"hljs-comment\">//执行Student类的toString()</span><br></code></pre></td></tr></table></figure></li>\n<li><p>运行时多态性</p>\n<p><u>自下而上搜索，有则调用无责溯源</u></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220916085315869.png\" alt=\"image-20220916085315869\"></p>\n</li>\n</ul>\n<h3 id=\"4-多态的方法实现\"><a href=\"#4-多态的方法实现\" class=\"headerlink\" title=\"4.多态的方法实现\"></a>4.多态的方法实现</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921141638509.png\" alt=\"image-20220921141638509\"></p>\n<ul>\n<li><p>子类类型的对象地址可以直接赋给父类类型的引用对象，这个称为向上转型，是实现多态的基础。</p>\n</li>\n<li><p>A instanceof B: A对象的类型是否是B类型，只有在A对象的类型和B类型相同，或为父子类型时，编译不报错。而在运行时，只有A对象类型为B类型的子类型或者就是B类型时，结果才返回true。</p>\n</li>\n<li><p>内存分析(例子: myServlet) :调用父类的service(),然后调用子类的doGet() (注意: this关键字指向整个最终包裹对象，即最外层的子对象;而在包裹对象中，每-一层对象通过super关键字指向内一层的父对象)。</p>\n</li>\n<li><p>多态指的是方法的多态(到底调用那个方法，运行时决定)，属性没有多态。</p>\n</li>\n<li><p>针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</p>\n</li>\n</ul>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921145517282.png\" alt=\"image-20220921145517282\"></p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClosedFigure</span><br><span class=\"hljs-comment\">//闭合图形抽象类</span><br>&#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">area</span><span class=\"hljs-params\">( )</span>;<br><span class=\"hljs-comment\">//计算面积，抽象方法，以分号&quot;;&quot;结束</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><u>构造方法、静态成员方法</u>不能被声明为抽象<br>方法。</li>\n<li>一个非抽象类必须实现从父类继承来的所有<br>抽象方法。</li>\n<li>不能创建抽象类的实例。例如:<code>ClosedFigure g = new ClosedFigure();</code> </li>\n<li><u>abstract修饰方式的初衷就是要求其子类覆盖(实现)这个方法，并且调用时可以以多态方式调用子类覆盖后的方法(抽象类主要和多态技术相结合)</u>，即抽象方法必须在其子类中实现，除非子类本身也是抽象类。<u>abstract不允许修饰成员变量</u>，因为成员变量也没有重写这个概念!</li>\n<li>抽象类可以只有具体方法，也可以全是抽象方法，子类继承抽象类也可以是抽象类，但要实例化的类不能是抽象类。</li>\n<li>不能放在一起的修饰符: <u>final和abstract, private和abstract, static和abstract</u>，因为abstract修饰的方法是必须在其子类中实现(覆盖)，才能以多态方式调用，以上修饰符在修饰方法时期子类都覆盖不了这个方法，<u>final是不可以覆盖</u>，<u>private是不能</u><br><u>够继承到子类</u>，所以也就不能覆盖，<u>static是可以覆盖的，但是在调用时会调用编译时类型的方法，因为调用的是父类的方法，而父类的方法又是抽象的方法，又不能够调用</u>，所以上面的修饰符不能放在一起。</li>\n</ol>\n<h2 id=\"最终类\"><a href=\"#最终类\" class=\"headerlink\" title=\"最终类\"></a>最终类</h2><ol>\n<li><p>声明最终类， 不能被继承</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Math</span><br><span class=\"hljs-comment\">//数学类，最终类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyMath</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Math</span><br><span class=\"hljs-comment\">//语法错</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Ellipse</span> / /最终类<br></code></pre></td></tr></table></figure></li>\n<li><p>声明最终方法,不能被子类覆盖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Ellipse</span><br><br>/ /非最终类<br><br>&#123;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">area</span><span class=\"hljs-params\">( )</span><br><br><span class=\"hljs-comment\">//最终方法</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"final关键词\"><a href=\"#final关键词\" class=\"headerlink\" title=\"final关键词\"></a>final关键词</h3><ol>\n<li>final修饰变量时表示常量。<u>变量被final修饰，就会变成常量</u>(常量应大写)，一旦赋值不能改变(可以在<u>初始化时直接赋值</u>，也可以在<u>构造方法里赋值</u>，只能在这两种方法里二选一，<u>必须为常量赋值</u>) ;final的常量不会有默认初始值，对于直接在初始化时赋值方式，final修饰符常和static修饰符一起使用。</li>\n<li>final修饰方法( 最终方法)时表示<u>该方法不可被子类重写</u>。但是<u>可以被重载</u>。</li>\n<li><u>final修饰类</u>(最终类)时表示修饰的<u>类不能有子类</u>，不能被继承。比如Math、String。 final类中的方法也都是final的。</li>\n</ol>\n<h2 id=\"接口类\"><a href=\"#接口类\" class=\"headerlink\" title=\"接口类\"></a>接口类</h2><p><u>如果一个抽象类没有字段，所有方法全部都是抽象方法，就可以将该抽象类改为接口。</u></p>\n<p>类不能多继承类，但可以实现多个接口，一个接口可以继承多个接口。</p>\n<p>接口可以看成<u><strong>狭义抽象</strong></u>，将设计与实现彻底分离。</p>\n<p>通过给类新增接口来改变类，而不影响子类。</p>\n<p>接口不能有构造方法，抽象类可以有。</p>\n<p>接口可以定义<code>default</code>方法（有方法实体，子类可以不用重写）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Person</span>&#123;<br><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> ;<br>String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> ;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>类实现接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><span class=\"hljs-comment\">//规定下面的编译为重写</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.name + <span class=\"hljs-string\">&quot; run&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"抽象类和接口的对比\"><a href=\"#抽象类和接口的对比\" class=\"headerlink\" title=\"抽象类和接口的对比\"></a>抽象类和接口的对比</h3><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220921155545894.png\" alt=\"image-20220921155545894\" style=\"zoom: 80%;\" />\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;Xiao Ming&quot;</span>);<br>        p.run();<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>    String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span>;<br>    <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(getName() + <span class=\"hljs-string\">&quot; run&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"接口与抽象的区别\"><a href=\"#接口与抽象的区别\" class=\"headerlink\" title=\"接口与抽象的区别\"></a>接口与抽象的区别</h3><ul>\n<li><p>接口不能有方法体，抽象类可以有。</p>\n</li>\n<li><p>接口不能有静态方法，抽象类可以有。</p>\n</li>\n<li><p>在接口中凡是变量必须是public static final,而在抽象类中没有要求。</p>\n</li>\n<li><p>抽象类本质上还是-一个类，子类是用关键字extends来继承它，并扩展的，有非常强的is-a的关系。而接口，是被其他类用关键字implements来实现接口定义的方法的。接口只是定义功能和行为规范，如果一个类实现了一个接口，那么这个类必须遵守这个接口的方法约定，但没有is-a的关系。</p>\n</li>\n</ul>\n<h3 id=\"内部类和内部接口\"><a href=\"#内部类和内部接口\" class=\"headerlink\" title=\"内部类和内部接口\"></a>内部类和内部接口</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923082921856.png\" alt=\"image-20220923082921856\"></p>\n<ul>\n<li><p>内嵌类型不能与外层类型同名。</p>\n</li>\n<li><p>内部类中可以声明成员变量和成员方法。</p>\n</li>\n<li><p>内部类可以继承父类或实现接口。.</p>\n</li>\n<li><p>可以声明内部类为抽象类，该抽象类必须被其他内部类继承;内部接口必须被其他内部类实现。</p>\n</li>\n<li><p>使用点运算符“”引用内嵌类型:外层类型.内嵌类型Pixel.Color</p>\n</li>\n<li><p>内嵌类型具有类中成员的4种访问控制权限。当内部类可被访问时，才能考虑内部类中成员的访问控制权限。</p>\n</li>\n<li><p>内嵌类型与其外层类型彼此信任，能访问对方的所有成员</p>\n</li>\n<li><p>内部接口总是静态的。内部类可声明是静态的或实例的，静态内部类能够声明静态成员，但不能引用外部类的实例成员;实例内部类不能声明静态成员。</p>\n</li>\n<li><p>在实例内部类中，使用以下格式引用或调用外部类当前实例的成员变量或实例成员方法:</p>\n<p><code>外部类.this.成员变量//引用外部类当前实例的成员变量</code></p>\n<p><code>外部类.this.实例成员方法(参数列表)//调用外部类当前实例的成员方法</code></p>\n</li>\n</ul>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923083806822.png\" alt=\"image-20220923083806822\"></p>\n<p>**自动裝箱:**基本数据类型就自动的封装到与它相同类型的包装中。如:<br>Integeri = 100;本质上就是编译器编译时自动为我们添加了Integeri =<br>new Integer( 100);<br><u>自动拆箱:</u>包装类对象自动转化为基本数据类型。如:inta=new<br>Integer(100);本质上就是编译器编译时自动为我们添加了inta = new<br>Integer( 100).intValue();<br><strong>缓存问题:</strong> [-128,127]之 间的数对应的包装类对象，仍然当做基本数据类型<br>来处理;一旦遇到一个这个之间的数(默认为这些小的数使用频率会很高)，<br>把他包装成-一个对象后，就缓存起来，下次如果又要包装-一个这个数的对象，<br>则去看是否已经有这个对象，有就直接拿来使用，这样可以节省内存空间、提<br>高效率(享元模式)。<br>**享元模式:**有很多小对象，它们的大部分属性相同，这时可以把它们变成-一个<br>对象，那些相同的属性为对象的内部状态，那些不同的属性可以变为方法的参<br>数，由外部传入。例: -128~127 内的相同整数自动装箱为同一个对象。</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><h3 id=\"泛型声明\"><a href=\"#泛型声明\" class=\"headerlink\" title=\"泛型声明\"></a>泛型声明</h3><p><code>[修饰符] class 类&lt;类型参数列表&gt; [extends父类] [implements 接口列表]</code><br><code>[public] interface 接口 &lt; 类型参数列表&gt; [extends父接口列表]</code><br><code>[public] [static]&lt; &lt; 类型参数列表&gt;返回值类型方法([参数列表]) [throws 异常类</code><br><code>列表]</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923092011478.png\" alt=\"image-20220923092011478\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">GenericIntercace</span>&lt;T&gt; &#123;<br>T <span class=\"hljs-title function_\">getData</span><span class=\"hljs-params\">()</span>;<span class=\"hljs-comment\">//类似于c++的模板</span><br></code></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li><p>接口中泛型字母只能使用在方法中，不能使用在全局常量中</p>\n</li>\n<li><p>泛型方法可以在非泛型类中</p>\n</li>\n</ul>\n<h3 id=\"泛型继承\"><a href=\"#泛型继承\" class=\"headerlink\" title=\"泛型继承\"></a>泛型继承</h3><p>泛型父类:子类为”富二代”:子类的泛型要比父类多</p>\n<ol>\n<li><p>保留父类的泛型–&gt;子类为泛型类</p>\n</li>\n<li><p>不保留父类泛型–&gt;子类按需实现</p>\n</li>\n</ol>\n<ul>\n<li>子类. [重写方法]的参数类型–&gt;随父类而定</li>\n<li>子类新增的方法，参数类型随子类而定</li>\n<li>子类中使用父类的[属性] –&gt; 随父类而定</li>\n<li>子类使用自己的属性–&gt;随子类而定</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220923093134846.png\" alt=\"image-20220923093134846\"></p>\n<h3 id=\"泛型擦除\"><a href=\"#泛型擦除\" class=\"headerlink\" title=\"泛型擦除\"></a>泛型擦除</h3><ul>\n<li>定义:泛型擦除是指在继承(实现)或使用时没有指定具体的类型</li>\n<li>特点:一旦擦除之后按Object处理</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//2)没有类型擦除--》Object</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">C4</span> &lt;A,B&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Father</span>&#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(Object name)</span> &#123;子类重写方法的参数类型--&gt;随父类而定:<br>Object <br><span class=\"hljs-type\">this</span> <span class=\"hljs-variable\">age</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>:);<span class=\"hljs-comment\">//Object类型，子类使用父类的[属性]，类型</span><br>随父类而定<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h3><ul>\n<li>T、K、V、E等泛型字母为有类型，类型参数赋予具体的值</li>\n<li>?未知类型类型参数赋予不确定值，任意类型</li>\n<li>只能用在声明类型、方法参数上，不能用在定义泛型类上</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GenericTest</span> &#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[ args)</span> &#123;<br>List&lt;String&gt; name = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayL</span> ist&lt;String&gt;();<br>List&lt;Integer&gt; age = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayL</span> ist&lt;Integer&gt;();<br>List&lt;Number&gt; number = <span class=\"hljs-keyword\">new</span><br><span class=\"hljs-title class_\">ArrayList</span>&lt;Number&gt;();<br>name.add(<span class=\"hljs-string\">&quot;icon&quot;</span>);<br>age.add(<span class=\"hljs-number\">18</span>);<br>number.add(<span class=\"hljs-number\">314</span>);<br>getData(name);<br>getData(age); <br>getData(number);<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">getData</span><span class=\"hljs-params\">(List&lt;?&gt; data)</span> &#123;<br>System.out.println(<span class=\"hljs-string\">&quot;data :&quot;</span> + data.get(<span class=\"hljs-number\">0</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"第四章、异常处理\"><a href=\"#第四章、异常处理\" class=\"headerlink\" title=\"第四章、异常处理\"></a>第四章、异常处理</h1><h2 id=\"异常类型\"><a href=\"#异常类型\" class=\"headerlink\" title=\"异常类型\"></a>异常类型</h2><ul>\n<li>用户输入了非法数据。 </li>\n<li>要打开的文件不存在。 </li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p><img src=\"C:\\Users\\alleyf\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928141405830.png\" alt=\"image-20220928141405830\"></p>\n<h2 id=\"异常处理基础\"><a href=\"#异常处理基础\" class=\"headerlink\" title=\"异常处理基础\"></a>异常处理基础</h2><ul>\n<li><p>将程序正常代码与错误处理代码分开。</p>\n</li>\n<li><p>使程序具有处理运行错误的能力。</p>\n</li>\n</ul>\n<h3 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h3><p>( Error)指程序运行时遇到的硬件、操作系统、<br>虚拟机的错误。 Error错误类。Java程序<strong>不能处理错误</strong>，只能依靠外界干预。</p>\n<ol>\n<li>NoClassDefFoundError类定，义未找到错误。没有<br>.class文件， 或没有main()方法时。</li>\n<li>OutOfMemoryError内存溢出错误。没有可用内存时。</li>\n<li>StackOverflowError栈溢出错误。当递归函数不能正常结束时。</li>\n</ol>\n<p><img src=\"C:\\Users\\alleyf\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220928142730920.png\" alt=\"image-20220928142730920\"></p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>（Exception）指在硬件、操作系统、虚拟 机正常时，程序遇到的运行错（语义错）</p>\n<h4 id=\"异常类（默认java-lang包）\"><a href=\"#异常类（默认java-lang包）\" class=\"headerlink\" title=\"异常类（默认java.lang包）\"></a>异常类（默认java.lang包）</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928143014612.png\" alt=\"image-20220928143014612\"></p>\n<h4 id=\"内置异常类\"><a href=\"#内置异常类\" class=\"headerlink\" title=\"内置异常类\"></a>内置异常类</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160253693.png\" alt=\"image-20220928160253693\"></p>\n<h4 id=\"异常方法\"><a href=\"#异常方法\" class=\"headerlink\" title=\"异常方法\"></a>异常方法</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928160326479.png\" alt=\"image-20220928160326479\"></p>\n<p>异常类声明</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Throwable</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> <br>&#123;<br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMessage</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">//获得异常信息</span><br><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">//获得异常对象的描述信息</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printStackTrace</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">//显示异常栈跟踪信息</span><br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Exception</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Throwable</span><br>&#123;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Exception</span><span class=\"hljs-params\">()</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Exception</span><span class=\"hljs-params\">(String message)</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>ArithmeticException</strong></p>\n<p> 3/0 //整除，除数为0，算术异常</p>\n<p>3.0/0 //实数除，除数为0，无穷大 </p>\n</li>\n<li><p><strong>NullPointerException</strong> 空对象异常</p>\n<p> int x[] = null;</p>\n<p> x[0] = 1; //对空数组中的元素进行操作</p>\n<p> String str = null;</p>\n<p> str.length() //空对象调用方法</p>\n</li>\n<li><p>ClassCastException </p>\n<p>Object obj = new Object(); </p>\n<p>String str = (String) obj; //类型强制转换异常</p>\n</li>\n</ol>\n<h2 id=\"异常处理措施\"><a href=\"#异常处理措施\" class=\"headerlink\" title=\"异常处理措施\"></a>异常处理措施</h2><h3 id=\"异常处理语句\"><a href=\"#异常处理语句\" class=\"headerlink\" title=\"异常处理语句\"></a>异常处理语句</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span><br>&#123;<br>语句<span class=\"hljs-number\">1</span>； <span class=\"hljs-comment\">//存在潜在异常的代码</span><br>&#125;<br><span class=\"hljs-keyword\">catch</span> (异常类 异常对象)<br>&#123;<br>语句<span class=\"hljs-number\">2</span>； <span class=\"hljs-comment\">//捕获到异常并进行处理的代码</span><br>&#125;<br><span class=\"hljs-keyword\">finally</span><br>&#123;<br>语句<span class=\"hljs-number\">3</span>；<span class=\"hljs-comment\">//最后必须执行的代码，无论是否捕获到异常</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h3><p><u>抛出异常对象的throw语句</u></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">[修饰符] 返回值类型 方法([参数列表])[<span class=\"hljs-keyword\">throws</span>异常类列表]<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">parseInt</span><span class=\"hljs-params\">(String s)</span><br><span class=\"hljs-keyword\">throws</span> NumberFormatException<br>日期类声明抛出异常的方法与方法调用者处理异常。<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year, <span class=\"hljs-type\">int</span> month, <span class=\"hljs-type\">int</span> day)</span><br><span class=\"hljs-keyword\">throws</span> Exception<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyDate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year, <span class=\"hljs-type\">int</span> month, <span class=\"hljs-type\">int</span> day)</span><br><span class=\"hljs-keyword\">throws</span> Exception<br>&#123;<br><span class=\"hljs-built_in\">this</span>.set(year, month, day);<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"throws和throw以及try-catch-finally的区别\"><a href=\"#throws和throw以及try-catch-finally的区别\" class=\"headerlink\" title=\"throws和throw以及try-catch-finally的区别\"></a>throws和throw以及try-catch-finally的区别</h3><ul>\n<li>throws为方法声明可能出现的异常，函数调用者处理不处理异常则继续向下抛出异常直至被处理，否则程序结束。</li>\n<li>throw主要是发现异常并抛出指定的异常给调用者。</li>\n<li>throw要么和try-catch-finally语句配套使用，要么与throws配套 使用。但throws可以单独使用，然后再由处理异常的方法捕获。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ThrowsDemo</span> &#123;<br><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">throwOne</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IllegalAccessException &#123;<br>System.out.println(<span class=\"hljs-string\">&quot;Inside throwOne.&quot;</span>);<br><span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalAccessException</span>(<span class=\"hljs-string\">&quot;demo&quot;</span>);<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> &#123;<br><span class=\"hljs-keyword\">try</span> &#123;<br>throwOne();<br>&#125; <span class=\"hljs-keyword\">catch</span> (IllegalAccessException e) &#123;<br>System.out.println(<span class=\"hljs-string\">&quot;Caught &quot;</span> + e);<br>&#125;&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<p><strong>版权归属：</strong><a href=\"https://fcsy.fit/\">Alleyf</a></p>\n"},{"title":"ML_DL","date":"2022-09-10T16:26:00.000Z","sticky":100,"excerpt":"Deep_learning","_content":"\n# 深度学习\n\n## 基本步骤：\n\n1. 模型假设\n\n2. 优化目标\n\n3. 寻解算法\n\n   * 公式法：\n\n   * 梯度下降法:  \n\n     1. 方向\n     \n     1. 步长\n     \n     1. 特征缩放\n     \n     1. 梯度决定步长   \n     \n\n![image-20220912142745507](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220912142745507.png)\n\n\n## 实例：\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190129721.png\" style=\"zoom: 33%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190439588.png\" style=\"zoom: 50%;\" />\n\n## 常用的库\n\n1. **numpy**是Python科学计算库的基础。包含了强大的N维数组对象和向量运算。\n\n2. **pandas**是建立在numpy基础上的高效数据分析处理库，是Python的重要数据分析库。\n\n3. **Matplotlib**是一个主要用于绘制二维图形的Python库。用途：绘图、可视化\n\n4. **PIL**库是一个具有强大图像处理能力的第三方库。用途：图像处理\n\n---\n\n### Numpy库     \n\n- 可以使用array函数从常规Python**列表或元组**中创建数组。得到的数组的类型是从Python列表中元素的类型推导出来的\n\n```python\n  import numpy as np\n  \n  #将列表转换为二维数组\n  array = np.array([[1,2,3],\n                   [4,5,6]])\n  print(array)\n  #将元组转换为二维数组\n  array = np.array(((1,2,3),\n                   (4,5,6)))\n  print(array)\n  #将列表或元组转为一维数组\n  a = np.array([1,2,3,4]) \n  b = np.array((1,2,3,4))\n  print(a,b)\n```\n\n#### 1.常用函数\n\n- zeros():可以创建指定长度或者形状的全0数组\n\n- ones():可以创建指定长度或者形状的全1数组\n\n- empty():创建一个数组，其初始内容是随机的,取决于内存的状态\n\n- arange():创建一个指定处末位置和步长的数字数组\n\n```python\n  zeroarray = np.zeros((3,3),dtype='int64')\n  print(zeroarray)\n  onearray = np.ones((3,4),dtype='int64')\n  print(onearray)\n  emptyarray = np.empty((3,4))\n  print(emptyarray)\n  array = np.arange( 10, 31,5 )\n  print(array)\n```\n\n- 输出数组的一些信息，如维度、形状、元素个数、元素类型等\n\n```python\n  array = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])\n  print(array)\n  #数组维度\n  print(array.ndim)\n  #数组形状\n  print(array.shape)\n  #数组元素个数\n  print(array.size)\n  #数组元素类型\n  print(array.dtype)\n```\n\n- reshape([m,n])重新定义数字的形状为m行n列。\n\n```python\n  array1 = np.arange(6).reshape([2,3])#重塑为2行3列\n  print(array1)\n  \n  \n  array2 = np.array([[1,2,3,[4,5,6]],dtype=np.int64).reshape([3,2])#重塑为3行2列\n  print(array2)\n  \n```\n\n#### 2.数组计算\n\n**注:大小相等的数组之间的任何算术运算都会将运算应用到元素级。同样，数组与标量的算术运算也会将那个标量值传播到各个元素.**\n\n1. 矩阵基础运算：\n\n   ```python\n   arr1 = np.array([[1,2,3],[4,5,6]])\n   arr2 = np.ones([2,3],dtype=np.int64)\n   \n   print(arr1 + arr2)\n   print(arr1 - arr2)\n   print(arr1 * arr2)\n   print(arr1 / arr2)\n   print(arr1 ** 2)\n   ```\n\n2. 矩阵乘法：\n\n   ```python\n   arr3 = np.array([[1,2,3],[4,5,6]])\n   arr4 = np.ones([3,2],dtype=np.int64)\n   print(arr3)\n   print(arr4)\n   print(np.dot(arr3,arr4))\n   ```\n\n3. 矩阵其他运算：\n\n   ```python\n   print(np.sum(arr3,axis=1)) #axis=1,每一行求和 axie=0,每一列求和\n   print(np.max(arr3))\n   print(np.min(arr3))\n   print(np.mean(arr3))\n   print(np.argmax(arr3),axis=0/1)#axis=1,每一行求最大值的索引 axie=0,每一列求最大值索引\n   print(np.argmin(arr3),axis=0/1)#axis=1,每一行求最小值的索引 axie=0,每一列求最小值索引\n   print(arr3.transpose())#求数组的转置矩阵\n   print(arr3.flatten())#将数组降为一维\n   ```\n\n#### 3.数组的索引与切片\n\n```python\narr5 = np.arange(0,6).reshape([2,3])\nprint(arr5)\nprint(arr5[1])#索引第一行\nprint(arr5[1][2])#索引第一行第二列\nprint(arr5[1,2])#索引第一行第二列\nprint(arr5[1,:])#切片第一行\nprint(arr5[:,1])#切片第一列\nprint(arr5[1,0:2])#切片第一行第零列开始向后的两个元素，返回一个列表\n```\n\n---\n\n#### 4.线性代数常用库函数\n\n![image-20220911193010646](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193010646.png)\n\n### Pandas库\n\n注：提供高性能易用数据类型和分析工具；\n\n​\t\tpandas基于numpy实现，常与numpy和matplotlib一同使用。\n\n**Pandas核心数据结构：**\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/a8c80653f39b479dab9f6867a638b64c405e79d6540c4307a22f43c4b0e228bc\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/c8f06f423acc488fb391bca5dcf8f2b02d7444ef526f41599b6b430ae24659c1\" alt=\"img\" style=\"zoom: 50%;\" />\n\n#### 1. Series\n\n注：Series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类    型）以及一组与之相关的数据标签（即索引）组成.可理解为带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。\n\n```python\nimport pandas as pd\nimport numpy as np\n\ns = pd.Series(['a','b','c','d','e'])#将列表转为series对象\nprint(s)\n```\n\n注：Series中可以使用index设置索引列表，与字典不同的是，Series允许索引重复。\n\n```python\n#与字典不同的是：Series允许索引重复\ns = pd.Series(['a','b','c','d','e'],index=[100,200,100,400,500])\nprint(s)\nd = {'b': 1, 'a': 0, 'c': 2}\npd.Series(d)\nd = {'b': 1, 'a': 0, 'c': 2}#将字典实例化\npd.Series(d)\nprint(s.values)#取键值\nprint(s.index)#取键\n#与普通numpy数组相比，可以通过索引的方式选取Series中的单个或一组值\nprint(s[100])\nprint(s[[400, 500]])\n#对应元素求和\nprint(s+s)\n#对应元素乘\nprint(s*3)\n```\n\n注：Series中最重要的一个功能是它会在算术运算中基于标签自动对齐不同索引的数据。\n\n```python\nobj1 = pd.Series({\"Ohio\": 35000, \"Oregon\": 16000, \"Texas\": 71000, \"Utah\": 5000})\nprint(obj1)\nobj2 = pd.Series({\"California\": np.nan, \"Ohio\": 35000, \"Oregon\": 16000, \"Texas\": 71000})\nprint(obj2)\nprint(obj1 + obj2)\n\n#可以切片，基础运算时没有匹配的键值会被设为NaN\ns = pd.Series(np.array([1,2,3,4,5]), index=['a', 'b', 'c', 'd', 'e'])\n\nprint(s['a'])\nprint(s[1:])\n\nprint(s[:-1])\n\nprint(s[1:] + s[:-1])\n```\n\n#### 2. DataFrame\n\n注：\n\n- DataFrame是一个表格型的数据结构，类似于Excel或sql表\n\n它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）\n\nDataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。\n\n- **用多维数组字典、列表字典生成 DataFrame。**\n\n```python\n#如果指定了列顺序，则DataFrame的列就会按照指定顺序进行排列, 跟原Series一样，如果传入的列在数据中找不到，就会产生NAN值.\ndata = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], 'year': [2000, 2001, 2002, 2001, 2002], 'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}\nframe = pd.DataFrame(data,columns=['year', 'state', 'pop', 'debt'])\nprint(frame)\n```\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910232915712.png\" alt=\"image-20220910232915712\"  />\n\n- **用 Series 字典或字典生成 DataFrame, 即Series可以作为DataFrame的子集。**\n\n```python\nd = {'one': pd.Series([1., 2., 3.], index=['a', 'b', 'c']),\n     'two': pd.Series([1., 2., 3., 4.], index=['a', 'b', 'c', 'd'])}\nprint(pd.DataFrame(d))\n\n#通过类似字典标记的方式或属性的方式，可以将DataFrame的列获取为一个Series,返回的Series拥有原DataFrame相同的索引\nprint(frame2['state'])\n\n#列可以通过赋值的方式进行修改,例如，给那个空的“delt”列赋上一个标量值或一组值\nframe2['debt'] = 16.5\nprint(frame2)\n\n#新增一个Series\nframe2['new'] = frame2['debt' ]* frame2['pop'] \nprint(frame2)\n\n#用numpy数组赋值\nframe2['debt'] = np.arange(5.)\nprint(frame2)\n```\n\n#### 3. 索引对象常用方法\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193234679.png\" alt=\"image-20220911193234679\" style=\"zoom:50%;\" />\n\n---\n\n\n### PIL库\n\n注：\n\n- PIL库是一个具有强大图像处理能力的第三方库。\n\n- 在命令行下的安装方法: pip install pillow。\n\n- 在使用过程中的弓|入方法: from PIL import Image。\n\n- 图像的组成：由RGB三原色组成,RGB图像中，一种彩色由R、G、B三原色按照比例混合而成。0-255区分不同亮度的颜色。图像的数组表示：图像是一个由像素组成的矩阵，每个元素是一个RGB值。\n\n- Image 是 PIL 库中代表一个图像的类（对象）。\n\n```python\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n#显示matplotlib生成的图形\n%matplotlib inline\n\n#读取图片\nimg = Image.open('/home/aistudio/work/yushuxin.jpg') \n\n#显示图片\n#img.show() #自动调用计算机上显示图片的工具\nplt.imshow(img)  \nplt.show(img)   \n\n#获得图像的模式和大小\nimg_mode = img.mode\nprint(img_mode)\nwidth,height = img.size\nprint(width,height)\n\n#将图片旋转45度\nimg_rotate = img.rotate(45) \n\n#左右镜像\nimg3_lr = img3.transpose(Image.FLIP_LEFT_RIGHT)\n#上下镜像\nimg3_bt = img3.transpose(Image.FLIP_TOP_BOTTOM)\n\n#缩放\nwidth,height = img2.size\nimg2_resize_result = img2.resize((int(width*0.6),int(height*0.6)),Image.ANTIALIAS)\n\n#剪切 crop()四个参数分别是：(左上角点的x坐标，左上角点的y坐标，右下角点的x坐标，右下角点的y坐标)\nimg1_crop_result = img1.crop((126,0,381,300))\n#保存图片\nimg1_crop_result.save('path')\n```\n\n---\n\n### Matplotlib库\n\n注：\n\n- Matplotlib库由各种可视化类构成，内部结构复杂。\n- matplotlib.pylot是绘制各类可视化图形的命令字库。\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np \n\n#显示matplotlib生成的图形\n%matplotlib inline\n\nx = np.linspace(-1,1,50) #等差数列，从-1到1生成50个等间距的数的数组\ny1 = 2*x + 1\ny2 = x**2\n\n#传入x,y,通过plot()绘制出折线图 \nplt.figure(figsize=(7,5))#保持图像\nplt.plot(x,y1,color='red',linewidth=1)#连续图\nplt.plot(x,y2,color='blue',linewidth=5)\nplt.legend(handles=[l1,l2],labels=['aa','bb'],loc='best')#图例\nplt.xlabel('x',fontsize=20)\nplt.ylabel('y',fontsize=20)\nplt.xlim((0,1))  #x轴只截取一段进行显示\nplt.ylim((0,1))  #y轴只截取一段进行显示\nplt.show()#显示图形\n\n#绘制离散图\ndots1 =np.random.rand(50)\ndots2 =np.random.rand(50)\nplt.scatter(dots1,dots2,c='red',alpha=0.5) #c表示颜色，alpha表示透明度\nplt.show()\n\n#绘制直方图（柱状图）\nx = np.arange(10)\ny = 2**x+10\nplt.bar(x,y,facecolor='#9999ff',edgecolor='white')\nfor ax,ay in zip(x,y):#顶部居中标注纵坐标\n    plt.text(ax,ay,'%.1f' % ay,ha='center',va='bottom')\nplt.show()\n```\n\n#### 基础图标函数\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193426778.png\" alt=\"image-20220911193426778\" style=\"zoom:67%;\" />\n\n![image-20220911193512661](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png)\n\n![](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png)\n\n---\n\n## 数据增强\n简介：深层神经网络一般都需要大量的训练数据才能获得比较理想的结果。在数据量有限的情况下，可以通过数据增强( Data Augmentation )来增加训练样本的多样性，提高模型鲁棒性。\n目的：\n\n- 增加数据量\n\n- 采集更多的图像特征\n\n- 使网络可见更多的数据变化\n\n- 提高模型的泛化能力\n\n增强方式：\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911194420932.png\" alt=\"image-20220911194420932\" style=\"zoom: 80%;\" />\n\n### 1. 随机旋转\n\n注：**使用numpy+ PIL库进行图像的随机旋转**\n\n```python\ndef rotate_image( img ): \n    \"\"\"\n    图像增强，增加随机旋转角度\n    \"\"\"\n    angle = np.random.randint( -14, 15)\n    img = img.rotate(angle)\n    return img\n\n```\n\n### 2. 随机亮度调整\n\n注：使用numpy+ PIL库进行图像的随机亮度调整\n\n```python\ndef random_brightness(img): \n    \"\"\"\n    图像增强，亮度调整\n    :param img:\n    :return:\n    \"\"\"\n    prob = np.random.uniform(0, 1)\n    if prob < train_parameters['image_enhance_strategy']['brightness_prob']:\n        brightness_delta = train_parameters['image_enhance_strategy']['brightness_delta'] \n        delta = np.random.uniform(-brightness_delta, brightness_delta) + 1\n        img = ImageEnhance.Brightness(img).enhance(delta)\n    return img\n```\n\n### 3. 训练过程可视化\n\n注：使用Matplotlib库绘制深度学习训练过程中,随着数据的增加，误差与准确率的变化趋势,从而对模型效果进行评估。观察到模型的误差相对较低,而准确率较高，接下来可以使用该模型进行预测。\n\n![image-20220911195508553](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911195508553.png)\n\n\n\n[声明]: 上述代码部分为伪代码，本笔记没有配备对应图片，请自己复制到IDE手动尝试运行代码，从而达到练习巩固提高的效果，感谢各位支持！\n\n","source":"_posts/ML_DL.md","raw":"---\ntitle: ML_DL\ntags: [Numpy,Pandas,PIL,Matplotlib]\ncategories: MachineLearning\ndate: 2022-9-11 0:26:00\nsticky: 100\nexcerpt: Deep_learning\n---\n\n# 深度学习\n\n## 基本步骤：\n\n1. 模型假设\n\n2. 优化目标\n\n3. 寻解算法\n\n   * 公式法：\n\n   * 梯度下降法:  \n\n     1. 方向\n     \n     1. 步长\n     \n     1. 特征缩放\n     \n     1. 梯度决定步长   \n     \n\n![image-20220912142745507](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220912142745507.png)\n\n\n## 实例：\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190129721.png\" style=\"zoom: 33%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190439588.png\" style=\"zoom: 50%;\" />\n\n## 常用的库\n\n1. **numpy**是Python科学计算库的基础。包含了强大的N维数组对象和向量运算。\n\n2. **pandas**是建立在numpy基础上的高效数据分析处理库，是Python的重要数据分析库。\n\n3. **Matplotlib**是一个主要用于绘制二维图形的Python库。用途：绘图、可视化\n\n4. **PIL**库是一个具有强大图像处理能力的第三方库。用途：图像处理\n\n---\n\n### Numpy库     \n\n- 可以使用array函数从常规Python**列表或元组**中创建数组。得到的数组的类型是从Python列表中元素的类型推导出来的\n\n```python\n  import numpy as np\n  \n  #将列表转换为二维数组\n  array = np.array([[1,2,3],\n                   [4,5,6]])\n  print(array)\n  #将元组转换为二维数组\n  array = np.array(((1,2,3),\n                   (4,5,6)))\n  print(array)\n  #将列表或元组转为一维数组\n  a = np.array([1,2,3,4]) \n  b = np.array((1,2,3,4))\n  print(a,b)\n```\n\n#### 1.常用函数\n\n- zeros():可以创建指定长度或者形状的全0数组\n\n- ones():可以创建指定长度或者形状的全1数组\n\n- empty():创建一个数组，其初始内容是随机的,取决于内存的状态\n\n- arange():创建一个指定处末位置和步长的数字数组\n\n```python\n  zeroarray = np.zeros((3,3),dtype='int64')\n  print(zeroarray)\n  onearray = np.ones((3,4),dtype='int64')\n  print(onearray)\n  emptyarray = np.empty((3,4))\n  print(emptyarray)\n  array = np.arange( 10, 31,5 )\n  print(array)\n```\n\n- 输出数组的一些信息，如维度、形状、元素个数、元素类型等\n\n```python\n  array = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])\n  print(array)\n  #数组维度\n  print(array.ndim)\n  #数组形状\n  print(array.shape)\n  #数组元素个数\n  print(array.size)\n  #数组元素类型\n  print(array.dtype)\n```\n\n- reshape([m,n])重新定义数字的形状为m行n列。\n\n```python\n  array1 = np.arange(6).reshape([2,3])#重塑为2行3列\n  print(array1)\n  \n  \n  array2 = np.array([[1,2,3,[4,5,6]],dtype=np.int64).reshape([3,2])#重塑为3行2列\n  print(array2)\n  \n```\n\n#### 2.数组计算\n\n**注:大小相等的数组之间的任何算术运算都会将运算应用到元素级。同样，数组与标量的算术运算也会将那个标量值传播到各个元素.**\n\n1. 矩阵基础运算：\n\n   ```python\n   arr1 = np.array([[1,2,3],[4,5,6]])\n   arr2 = np.ones([2,3],dtype=np.int64)\n   \n   print(arr1 + arr2)\n   print(arr1 - arr2)\n   print(arr1 * arr2)\n   print(arr1 / arr2)\n   print(arr1 ** 2)\n   ```\n\n2. 矩阵乘法：\n\n   ```python\n   arr3 = np.array([[1,2,3],[4,5,6]])\n   arr4 = np.ones([3,2],dtype=np.int64)\n   print(arr3)\n   print(arr4)\n   print(np.dot(arr3,arr4))\n   ```\n\n3. 矩阵其他运算：\n\n   ```python\n   print(np.sum(arr3,axis=1)) #axis=1,每一行求和 axie=0,每一列求和\n   print(np.max(arr3))\n   print(np.min(arr3))\n   print(np.mean(arr3))\n   print(np.argmax(arr3),axis=0/1)#axis=1,每一行求最大值的索引 axie=0,每一列求最大值索引\n   print(np.argmin(arr3),axis=0/1)#axis=1,每一行求最小值的索引 axie=0,每一列求最小值索引\n   print(arr3.transpose())#求数组的转置矩阵\n   print(arr3.flatten())#将数组降为一维\n   ```\n\n#### 3.数组的索引与切片\n\n```python\narr5 = np.arange(0,6).reshape([2,3])\nprint(arr5)\nprint(arr5[1])#索引第一行\nprint(arr5[1][2])#索引第一行第二列\nprint(arr5[1,2])#索引第一行第二列\nprint(arr5[1,:])#切片第一行\nprint(arr5[:,1])#切片第一列\nprint(arr5[1,0:2])#切片第一行第零列开始向后的两个元素，返回一个列表\n```\n\n---\n\n#### 4.线性代数常用库函数\n\n![image-20220911193010646](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193010646.png)\n\n### Pandas库\n\n注：提供高性能易用数据类型和分析工具；\n\n​\t\tpandas基于numpy实现，常与numpy和matplotlib一同使用。\n\n**Pandas核心数据结构：**\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/a8c80653f39b479dab9f6867a638b64c405e79d6540c4307a22f43c4b0e228bc\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/c8f06f423acc488fb391bca5dcf8f2b02d7444ef526f41599b6b430ae24659c1\" alt=\"img\" style=\"zoom: 50%;\" />\n\n#### 1. Series\n\n注：Series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类    型）以及一组与之相关的数据标签（即索引）组成.可理解为带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。\n\n```python\nimport pandas as pd\nimport numpy as np\n\ns = pd.Series(['a','b','c','d','e'])#将列表转为series对象\nprint(s)\n```\n\n注：Series中可以使用index设置索引列表，与字典不同的是，Series允许索引重复。\n\n```python\n#与字典不同的是：Series允许索引重复\ns = pd.Series(['a','b','c','d','e'],index=[100,200,100,400,500])\nprint(s)\nd = {'b': 1, 'a': 0, 'c': 2}\npd.Series(d)\nd = {'b': 1, 'a': 0, 'c': 2}#将字典实例化\npd.Series(d)\nprint(s.values)#取键值\nprint(s.index)#取键\n#与普通numpy数组相比，可以通过索引的方式选取Series中的单个或一组值\nprint(s[100])\nprint(s[[400, 500]])\n#对应元素求和\nprint(s+s)\n#对应元素乘\nprint(s*3)\n```\n\n注：Series中最重要的一个功能是它会在算术运算中基于标签自动对齐不同索引的数据。\n\n```python\nobj1 = pd.Series({\"Ohio\": 35000, \"Oregon\": 16000, \"Texas\": 71000, \"Utah\": 5000})\nprint(obj1)\nobj2 = pd.Series({\"California\": np.nan, \"Ohio\": 35000, \"Oregon\": 16000, \"Texas\": 71000})\nprint(obj2)\nprint(obj1 + obj2)\n\n#可以切片，基础运算时没有匹配的键值会被设为NaN\ns = pd.Series(np.array([1,2,3,4,5]), index=['a', 'b', 'c', 'd', 'e'])\n\nprint(s['a'])\nprint(s[1:])\n\nprint(s[:-1])\n\nprint(s[1:] + s[:-1])\n```\n\n#### 2. DataFrame\n\n注：\n\n- DataFrame是一个表格型的数据结构，类似于Excel或sql表\n\n它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）\n\nDataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。\n\n- **用多维数组字典、列表字典生成 DataFrame。**\n\n```python\n#如果指定了列顺序，则DataFrame的列就会按照指定顺序进行排列, 跟原Series一样，如果传入的列在数据中找不到，就会产生NAN值.\ndata = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], 'year': [2000, 2001, 2002, 2001, 2002], 'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}\nframe = pd.DataFrame(data,columns=['year', 'state', 'pop', 'debt'])\nprint(frame)\n```\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910232915712.png\" alt=\"image-20220910232915712\"  />\n\n- **用 Series 字典或字典生成 DataFrame, 即Series可以作为DataFrame的子集。**\n\n```python\nd = {'one': pd.Series([1., 2., 3.], index=['a', 'b', 'c']),\n     'two': pd.Series([1., 2., 3., 4.], index=['a', 'b', 'c', 'd'])}\nprint(pd.DataFrame(d))\n\n#通过类似字典标记的方式或属性的方式，可以将DataFrame的列获取为一个Series,返回的Series拥有原DataFrame相同的索引\nprint(frame2['state'])\n\n#列可以通过赋值的方式进行修改,例如，给那个空的“delt”列赋上一个标量值或一组值\nframe2['debt'] = 16.5\nprint(frame2)\n\n#新增一个Series\nframe2['new'] = frame2['debt' ]* frame2['pop'] \nprint(frame2)\n\n#用numpy数组赋值\nframe2['debt'] = np.arange(5.)\nprint(frame2)\n```\n\n#### 3. 索引对象常用方法\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193234679.png\" alt=\"image-20220911193234679\" style=\"zoom:50%;\" />\n\n---\n\n\n### PIL库\n\n注：\n\n- PIL库是一个具有强大图像处理能力的第三方库。\n\n- 在命令行下的安装方法: pip install pillow。\n\n- 在使用过程中的弓|入方法: from PIL import Image。\n\n- 图像的组成：由RGB三原色组成,RGB图像中，一种彩色由R、G、B三原色按照比例混合而成。0-255区分不同亮度的颜色。图像的数组表示：图像是一个由像素组成的矩阵，每个元素是一个RGB值。\n\n- Image 是 PIL 库中代表一个图像的类（对象）。\n\n```python\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n#显示matplotlib生成的图形\n%matplotlib inline\n\n#读取图片\nimg = Image.open('/home/aistudio/work/yushuxin.jpg') \n\n#显示图片\n#img.show() #自动调用计算机上显示图片的工具\nplt.imshow(img)  \nplt.show(img)   \n\n#获得图像的模式和大小\nimg_mode = img.mode\nprint(img_mode)\nwidth,height = img.size\nprint(width,height)\n\n#将图片旋转45度\nimg_rotate = img.rotate(45) \n\n#左右镜像\nimg3_lr = img3.transpose(Image.FLIP_LEFT_RIGHT)\n#上下镜像\nimg3_bt = img3.transpose(Image.FLIP_TOP_BOTTOM)\n\n#缩放\nwidth,height = img2.size\nimg2_resize_result = img2.resize((int(width*0.6),int(height*0.6)),Image.ANTIALIAS)\n\n#剪切 crop()四个参数分别是：(左上角点的x坐标，左上角点的y坐标，右下角点的x坐标，右下角点的y坐标)\nimg1_crop_result = img1.crop((126,0,381,300))\n#保存图片\nimg1_crop_result.save('path')\n```\n\n---\n\n### Matplotlib库\n\n注：\n\n- Matplotlib库由各种可视化类构成，内部结构复杂。\n- matplotlib.pylot是绘制各类可视化图形的命令字库。\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np \n\n#显示matplotlib生成的图形\n%matplotlib inline\n\nx = np.linspace(-1,1,50) #等差数列，从-1到1生成50个等间距的数的数组\ny1 = 2*x + 1\ny2 = x**2\n\n#传入x,y,通过plot()绘制出折线图 \nplt.figure(figsize=(7,5))#保持图像\nplt.plot(x,y1,color='red',linewidth=1)#连续图\nplt.plot(x,y2,color='blue',linewidth=5)\nplt.legend(handles=[l1,l2],labels=['aa','bb'],loc='best')#图例\nplt.xlabel('x',fontsize=20)\nplt.ylabel('y',fontsize=20)\nplt.xlim((0,1))  #x轴只截取一段进行显示\nplt.ylim((0,1))  #y轴只截取一段进行显示\nplt.show()#显示图形\n\n#绘制离散图\ndots1 =np.random.rand(50)\ndots2 =np.random.rand(50)\nplt.scatter(dots1,dots2,c='red',alpha=0.5) #c表示颜色，alpha表示透明度\nplt.show()\n\n#绘制直方图（柱状图）\nx = np.arange(10)\ny = 2**x+10\nplt.bar(x,y,facecolor='#9999ff',edgecolor='white')\nfor ax,ay in zip(x,y):#顶部居中标注纵坐标\n    plt.text(ax,ay,'%.1f' % ay,ha='center',va='bottom')\nplt.show()\n```\n\n#### 基础图标函数\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193426778.png\" alt=\"image-20220911193426778\" style=\"zoom:67%;\" />\n\n![image-20220911193512661](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png)\n\n![](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png)\n\n---\n\n## 数据增强\n简介：深层神经网络一般都需要大量的训练数据才能获得比较理想的结果。在数据量有限的情况下，可以通过数据增强( Data Augmentation )来增加训练样本的多样性，提高模型鲁棒性。\n目的：\n\n- 增加数据量\n\n- 采集更多的图像特征\n\n- 使网络可见更多的数据变化\n\n- 提高模型的泛化能力\n\n增强方式：\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911194420932.png\" alt=\"image-20220911194420932\" style=\"zoom: 80%;\" />\n\n### 1. 随机旋转\n\n注：**使用numpy+ PIL库进行图像的随机旋转**\n\n```python\ndef rotate_image( img ): \n    \"\"\"\n    图像增强，增加随机旋转角度\n    \"\"\"\n    angle = np.random.randint( -14, 15)\n    img = img.rotate(angle)\n    return img\n\n```\n\n### 2. 随机亮度调整\n\n注：使用numpy+ PIL库进行图像的随机亮度调整\n\n```python\ndef random_brightness(img): \n    \"\"\"\n    图像增强，亮度调整\n    :param img:\n    :return:\n    \"\"\"\n    prob = np.random.uniform(0, 1)\n    if prob < train_parameters['image_enhance_strategy']['brightness_prob']:\n        brightness_delta = train_parameters['image_enhance_strategy']['brightness_delta'] \n        delta = np.random.uniform(-brightness_delta, brightness_delta) + 1\n        img = ImageEnhance.Brightness(img).enhance(delta)\n    return img\n```\n\n### 3. 训练过程可视化\n\n注：使用Matplotlib库绘制深度学习训练过程中,随着数据的增加，误差与准确率的变化趋势,从而对模型效果进行评估。观察到模型的误差相对较低,而准确率较高，接下来可以使用该模型进行预测。\n\n![image-20220911195508553](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911195508553.png)\n\n\n\n[声明]: 上述代码部分为伪代码，本笔记没有配备对应图片，请自己复制到IDE手动尝试运行代码，从而达到练习巩固提高的效果，感谢各位支持！\n\n","slug":"ML_DL","published":1,"updated":"2022-09-12T06:28:14.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lo2ghi0007ichzamt59ff0","content":"<h1 id=\"深度学习\"><a href=\"#深度学习\" class=\"headerlink\" title=\"深度学习\"></a>深度学习</h1><h2 id=\"基本步骤：\"><a href=\"#基本步骤：\" class=\"headerlink\" title=\"基本步骤：\"></a>基本步骤：</h2><ol>\n<li><p>模型假设</p>\n</li>\n<li><p>优化目标</p>\n</li>\n<li><p>寻解算法</p>\n<ul>\n<li><p>公式法：</p>\n</li>\n<li><p>梯度下降法:  </p>\n<ol>\n<li><p>方向</p>\n</li>\n<li><p>步长</p>\n</li>\n<li><p>特征缩放</p>\n</li>\n<li><p>梯度决定步长   </p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220912142745507.png\" alt=\"image-20220912142745507\"></p>\n<h2 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190129721.png\" style=\"zoom: 33%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190439588.png\" style=\"zoom: 50%;\" />\n\n<h2 id=\"常用的库\"><a href=\"#常用的库\" class=\"headerlink\" title=\"常用的库\"></a>常用的库</h2><ol>\n<li><p><strong>numpy</strong>是Python科学计算库的基础。包含了强大的N维数组对象和向量运算。</p>\n</li>\n<li><p><strong>pandas</strong>是建立在numpy基础上的高效数据分析处理库，是Python的重要数据分析库。</p>\n</li>\n<li><p><strong>Matplotlib</strong>是一个主要用于绘制二维图形的Python库。用途：绘图、可视化</p>\n</li>\n<li><p><strong>PIL</strong>库是一个具有强大图像处理能力的第三方库。用途：图像处理</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"Numpy库\"><a href=\"#Numpy库\" class=\"headerlink\" title=\"Numpy库\"></a>Numpy库</h3><ul>\n<li>可以使用array函数从常规Python<strong>列表或元组</strong>中创建数组。得到的数组的类型是从Python列表中元素的类型推导出来的</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br><span class=\"hljs-comment\">#将列表转换为二维数组</span><br>array = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],<br>                 [<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br><span class=\"hljs-built_in\">print</span>(array)<br><span class=\"hljs-comment\">#将元组转换为二维数组</span><br>array = np.array(((<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>),<br>                 (<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>)))<br><span class=\"hljs-built_in\">print</span>(array)<br><span class=\"hljs-comment\">#将列表或元组转为一维数组</span><br>a = np.array([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]) <br>b = np.array((<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-built_in\">print</span>(a,b)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"1-常用函数\"><a href=\"#1-常用函数\" class=\"headerlink\" title=\"1.常用函数\"></a>1.常用函数</h4><ul>\n<li><p>zeros():可以创建指定长度或者形状的全0数组</p>\n</li>\n<li><p>ones():可以创建指定长度或者形状的全1数组</p>\n</li>\n<li><p>empty():创建一个数组，其初始内容是随机的,取决于内存的状态</p>\n</li>\n<li><p>arange():创建一个指定处末位置和步长的数字数组</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">zeroarray = np.zeros((<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>),dtype=<span class=\"hljs-string\">&#x27;int64&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(zeroarray)<br>onearray = np.ones((<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>),dtype=<span class=\"hljs-string\">&#x27;int64&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(onearray)<br>emptyarray = np.empty((<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-built_in\">print</span>(emptyarray)<br>array = np.arange( <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">5</span> )<br><span class=\"hljs-built_in\">print</span>(array)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>输出数组的一些信息，如维度、形状、元素个数、元素类型等</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">array = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>],[<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>],[<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">12</span>]])<br><span class=\"hljs-built_in\">print</span>(array)<br><span class=\"hljs-comment\">#数组维度</span><br><span class=\"hljs-built_in\">print</span>(array.ndim)<br><span class=\"hljs-comment\">#数组形状</span><br><span class=\"hljs-built_in\">print</span>(array.shape)<br><span class=\"hljs-comment\">#数组元素个数</span><br><span class=\"hljs-built_in\">print</span>(array.size)<br><span class=\"hljs-comment\">#数组元素类型</span><br><span class=\"hljs-built_in\">print</span>(array.dtype)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>reshape([m,n])重新定义数字的形状为m行n列。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">array1 = np.arange(<span class=\"hljs-number\">6</span>).reshape([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])<span class=\"hljs-comment\">#重塑为2行3列</span><br><span class=\"hljs-built_in\">print</span>(array1)<br><br><br>array2 = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]],dtype=np.int64).reshape([<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>])<span class=\"hljs-comment\">#重塑为3行2列</span><br><span class=\"hljs-built_in\">print</span>(array2)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-数组计算\"><a href=\"#2-数组计算\" class=\"headerlink\" title=\"2.数组计算\"></a>2.数组计算</h4><p><strong>注:大小相等的数组之间的任何算术运算都会将运算应用到元素级。同样，数组与标量的算术运算也会将那个标量值传播到各个元素.</strong></p>\n<ol>\n<li><p>矩阵基础运算：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">arr1 = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br>arr2 = np.ones([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],dtype=np.int64)<br><br><span class=\"hljs-built_in\">print</span>(arr1 + arr2)<br><span class=\"hljs-built_in\">print</span>(arr1 - arr2)<br><span class=\"hljs-built_in\">print</span>(arr1 * arr2)<br><span class=\"hljs-built_in\">print</span>(arr1 / arr2)<br><span class=\"hljs-built_in\">print</span>(arr1 ** <span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>矩阵乘法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">arr3 = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br>arr4 = np.ones([<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>],dtype=np.int64)<br><span class=\"hljs-built_in\">print</span>(arr3)<br><span class=\"hljs-built_in\">print</span>(arr4)<br><span class=\"hljs-built_in\">print</span>(np.dot(arr3,arr4))<br></code></pre></td></tr></table></figure></li>\n<li><p>矩阵其他运算：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(np.<span class=\"hljs-built_in\">sum</span>(arr3,axis=<span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">#axis=1,每一行求和 axie=0,每一列求和</span><br><span class=\"hljs-built_in\">print</span>(np.<span class=\"hljs-built_in\">max</span>(arr3))<br><span class=\"hljs-built_in\">print</span>(np.<span class=\"hljs-built_in\">min</span>(arr3))<br><span class=\"hljs-built_in\">print</span>(np.mean(arr3))<br><span class=\"hljs-built_in\">print</span>(np.argmax(arr3),axis=<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">#axis=1,每一行求最大值的索引 axie=0,每一列求最大值索引</span><br><span class=\"hljs-built_in\">print</span>(np.argmin(arr3),axis=<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">#axis=1,每一行求最小值的索引 axie=0,每一列求最小值索引</span><br><span class=\"hljs-built_in\">print</span>(arr3.transpose())<span class=\"hljs-comment\">#求数组的转置矩阵</span><br><span class=\"hljs-built_in\">print</span>(arr3.flatten())<span class=\"hljs-comment\">#将数组降为一维</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"3-数组的索引与切片\"><a href=\"#3-数组的索引与切片\" class=\"headerlink\" title=\"3.数组的索引与切片\"></a>3.数组的索引与切片</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">arr5 = np.arange(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>).reshape([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])<br><span class=\"hljs-built_in\">print</span>(arr5)<br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>])<span class=\"hljs-comment\">#索引第一行</span><br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>])<span class=\"hljs-comment\">#索引第一行第二列</span><br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>])<span class=\"hljs-comment\">#索引第一行第二列</span><br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>,:])<span class=\"hljs-comment\">#切片第一行</span><br><span class=\"hljs-built_in\">print</span>(arr5[:,<span class=\"hljs-number\">1</span>])<span class=\"hljs-comment\">#切片第一列</span><br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">2</span>])<span class=\"hljs-comment\">#切片第一行第零列开始向后的两个元素，返回一个列表</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4-线性代数常用库函数\"><a href=\"#4-线性代数常用库函数\" class=\"headerlink\" title=\"4.线性代数常用库函数\"></a>4.线性代数常用库函数</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193010646.png\" alt=\"image-20220911193010646\"></p>\n<h3 id=\"Pandas库\"><a href=\"#Pandas库\" class=\"headerlink\" title=\"Pandas库\"></a>Pandas库</h3><p>注：提供高性能易用数据类型和分析工具；</p>\n<p>​        pandas基于numpy实现，常与numpy和matplotlib一同使用。</p>\n<p><strong>Pandas核心数据结构：</strong></p>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/a8c80653f39b479dab9f6867a638b64c405e79d6540c4307a22f43c4b0e228bc\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/c8f06f423acc488fb391bca5dcf8f2b02d7444ef526f41599b6b430ae24659c1\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<h4 id=\"1-Series\"><a href=\"#1-Series\" class=\"headerlink\" title=\"1. Series\"></a>1. Series</h4><p>注：Series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类    型）以及一组与之相关的数据标签（即索引）组成.可理解为带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>s = pd.Series([<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>,<span class=\"hljs-string\">&#x27;d&#x27;</span>,<span class=\"hljs-string\">&#x27;e&#x27;</span>])<span class=\"hljs-comment\">#将列表转为series对象</span><br><span class=\"hljs-built_in\">print</span>(s)<br></code></pre></td></tr></table></figure>\n\n<p>注：Series中可以使用index设置索引列表，与字典不同的是，Series允许索引重复。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#与字典不同的是：Series允许索引重复</span><br>s = pd.Series([<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>,<span class=\"hljs-string\">&#x27;d&#x27;</span>,<span class=\"hljs-string\">&#x27;e&#x27;</span>],index=[<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">400</span>,<span class=\"hljs-number\">500</span>])<br><span class=\"hljs-built_in\">print</span>(s)<br>d = &#123;<span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>: <span class=\"hljs-number\">2</span>&#125;<br>pd.Series(d)<br>d = &#123;<span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>: <span class=\"hljs-number\">2</span>&#125;<span class=\"hljs-comment\">#将字典实例化</span><br>pd.Series(d)<br><span class=\"hljs-built_in\">print</span>(s.values)<span class=\"hljs-comment\">#取键值</span><br><span class=\"hljs-built_in\">print</span>(s.index)<span class=\"hljs-comment\">#取键</span><br><span class=\"hljs-comment\">#与普通numpy数组相比，可以通过索引的方式选取Series中的单个或一组值</span><br><span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-number\">100</span>])<br><span class=\"hljs-built_in\">print</span>(s[[<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">500</span>]])<br><span class=\"hljs-comment\">#对应元素求和</span><br><span class=\"hljs-built_in\">print</span>(s+s)<br><span class=\"hljs-comment\">#对应元素乘</span><br><span class=\"hljs-built_in\">print</span>(s*<span class=\"hljs-number\">3</span>)<br></code></pre></td></tr></table></figure>\n\n<p>注：Series中最重要的一个功能是它会在算术运算中基于标签自动对齐不同索引的数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">obj1 = pd.Series(&#123;<span class=\"hljs-string\">&quot;Ohio&quot;</span>: <span class=\"hljs-number\">35000</span>, <span class=\"hljs-string\">&quot;Oregon&quot;</span>: <span class=\"hljs-number\">16000</span>, <span class=\"hljs-string\">&quot;Texas&quot;</span>: <span class=\"hljs-number\">71000</span>, <span class=\"hljs-string\">&quot;Utah&quot;</span>: <span class=\"hljs-number\">5000</span>&#125;)<br><span class=\"hljs-built_in\">print</span>(obj1)<br>obj2 = pd.Series(&#123;<span class=\"hljs-string\">&quot;California&quot;</span>: np.nan, <span class=\"hljs-string\">&quot;Ohio&quot;</span>: <span class=\"hljs-number\">35000</span>, <span class=\"hljs-string\">&quot;Oregon&quot;</span>: <span class=\"hljs-number\">16000</span>, <span class=\"hljs-string\">&quot;Texas&quot;</span>: <span class=\"hljs-number\">71000</span>&#125;)<br><span class=\"hljs-built_in\">print</span>(obj2)<br><span class=\"hljs-built_in\">print</span>(obj1 + obj2)<br><br><span class=\"hljs-comment\">#可以切片，基础运算时没有匹配的键值会被设为NaN</span><br>s = pd.Series(np.array([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]), index=[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>])<br><br><span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-string\">&#x27;a&#x27;</span>])<br><span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-number\">1</span>:])<br><br><span class=\"hljs-built_in\">print</span>(s[:-<span class=\"hljs-number\">1</span>])<br><br><span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-number\">1</span>:] + s[:-<span class=\"hljs-number\">1</span>])<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-DataFrame\"><a href=\"#2-DataFrame\" class=\"headerlink\" title=\"2. DataFrame\"></a>2. DataFrame</h4><p>注：</p>\n<ul>\n<li>DataFrame是一个表格型的数据结构，类似于Excel或sql表</li>\n</ul>\n<p>它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）</p>\n<p>DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。</p>\n<ul>\n<li><strong>用多维数组字典、列表字典生成 DataFrame。</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#如果指定了列顺序，则DataFrame的列就会按照指定顺序进行排列, 跟原Series一样，如果传入的列在数据中找不到，就会产生NAN值.</span><br>data = &#123;<span class=\"hljs-string\">&#x27;state&#x27;</span>: [<span class=\"hljs-string\">&#x27;Ohio&#x27;</span>, <span class=\"hljs-string\">&#x27;Ohio&#x27;</span>, <span class=\"hljs-string\">&#x27;Ohio&#x27;</span>, <span class=\"hljs-string\">&#x27;Nevada&#x27;</span>, <span class=\"hljs-string\">&#x27;Nevada&#x27;</span>], <span class=\"hljs-string\">&#x27;year&#x27;</span>: [<span class=\"hljs-number\">2000</span>, <span class=\"hljs-number\">2001</span>, <span class=\"hljs-number\">2002</span>, <span class=\"hljs-number\">2001</span>, <span class=\"hljs-number\">2002</span>], <span class=\"hljs-string\">&#x27;pop&#x27;</span>: [<span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">1.7</span>, <span class=\"hljs-number\">3.6</span>, <span class=\"hljs-number\">2.4</span>, <span class=\"hljs-number\">2.9</span>]&#125;<br>frame = pd.DataFrame(data,columns=[<span class=\"hljs-string\">&#x27;year&#x27;</span>, <span class=\"hljs-string\">&#x27;state&#x27;</span>, <span class=\"hljs-string\">&#x27;pop&#x27;</span>, <span class=\"hljs-string\">&#x27;debt&#x27;</span>])<br><span class=\"hljs-built_in\">print</span>(frame)<br></code></pre></td></tr></table></figure>\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910232915712.png\" alt=\"image-20220910232915712\"  />\n\n<ul>\n<li><strong>用 Series 字典或字典生成 DataFrame, 即Series可以作为DataFrame的子集。</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">d = &#123;<span class=\"hljs-string\">&#x27;one&#x27;</span>: pd.Series([<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">2.</span>, <span class=\"hljs-number\">3.</span>], index=[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]),<br>     <span class=\"hljs-string\">&#x27;two&#x27;</span>: pd.Series([<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">2.</span>, <span class=\"hljs-number\">3.</span>, <span class=\"hljs-number\">4.</span>], index=[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>])&#125;<br><span class=\"hljs-built_in\">print</span>(pd.DataFrame(d))<br><br><span class=\"hljs-comment\">#通过类似字典标记的方式或属性的方式，可以将DataFrame的列获取为一个Series,返回的Series拥有原DataFrame相同的索引</span><br><span class=\"hljs-built_in\">print</span>(frame2[<span class=\"hljs-string\">&#x27;state&#x27;</span>])<br><br><span class=\"hljs-comment\">#列可以通过赋值的方式进行修改,例如，给那个空的“delt”列赋上一个标量值或一组值</span><br>frame2[<span class=\"hljs-string\">&#x27;debt&#x27;</span>] = <span class=\"hljs-number\">16.5</span><br><span class=\"hljs-built_in\">print</span>(frame2)<br><br><span class=\"hljs-comment\">#新增一个Series</span><br>frame2[<span class=\"hljs-string\">&#x27;new&#x27;</span>] = frame2[<span class=\"hljs-string\">&#x27;debt&#x27;</span> ]* frame2[<span class=\"hljs-string\">&#x27;pop&#x27;</span>] <br><span class=\"hljs-built_in\">print</span>(frame2)<br><br><span class=\"hljs-comment\">#用numpy数组赋值</span><br>frame2[<span class=\"hljs-string\">&#x27;debt&#x27;</span>] = np.arange(<span class=\"hljs-number\">5.</span>)<br><span class=\"hljs-built_in\">print</span>(frame2)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-索引对象常用方法\"><a href=\"#3-索引对象常用方法\" class=\"headerlink\" title=\"3. 索引对象常用方法\"></a>3. 索引对象常用方法</h4><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193234679.png\" alt=\"image-20220911193234679\" style=\"zoom:50%;\" />\n\n<hr>\n<h3 id=\"PIL库\"><a href=\"#PIL库\" class=\"headerlink\" title=\"PIL库\"></a>PIL库</h3><p>注：</p>\n<ul>\n<li><p>PIL库是一个具有强大图像处理能力的第三方库。</p>\n</li>\n<li><p>在命令行下的安装方法: pip install pillow。</p>\n</li>\n<li><p>在使用过程中的弓|入方法: from PIL import Image。</p>\n</li>\n<li><p>图像的组成：由RGB三原色组成,RGB图像中，一种彩色由R、G、B三原色按照比例混合而成。0-255区分不同亮度的颜色。图像的数组表示：图像是一个由像素组成的矩阵，每个元素是一个RGB值。</p>\n</li>\n<li><p>Image 是 PIL 库中代表一个图像的类（对象）。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-comment\">#显示matplotlib生成的图形</span><br>%matplotlib inline<br><br><span class=\"hljs-comment\">#读取图片</span><br>img = Image.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;/home/aistudio/work/yushuxin.jpg&#x27;</span>) <br><br><span class=\"hljs-comment\">#显示图片</span><br><span class=\"hljs-comment\">#img.show() #自动调用计算机上显示图片的工具</span><br>plt.imshow(img)  <br>plt.show(img)   <br><br><span class=\"hljs-comment\">#获得图像的模式和大小</span><br>img_mode = img.mode<br><span class=\"hljs-built_in\">print</span>(img_mode)<br>width,height = img.size<br><span class=\"hljs-built_in\">print</span>(width,height)<br><br><span class=\"hljs-comment\">#将图片旋转45度</span><br>img_rotate = img.rotate(<span class=\"hljs-number\">45</span>) <br><br><span class=\"hljs-comment\">#左右镜像</span><br>img3_lr = img3.transpose(Image.FLIP_LEFT_RIGHT)<br><span class=\"hljs-comment\">#上下镜像</span><br>img3_bt = img3.transpose(Image.FLIP_TOP_BOTTOM)<br><br><span class=\"hljs-comment\">#缩放</span><br>width,height = img2.size<br>img2_resize_result = img2.resize((<span class=\"hljs-built_in\">int</span>(width*<span class=\"hljs-number\">0.6</span>),<span class=\"hljs-built_in\">int</span>(height*<span class=\"hljs-number\">0.6</span>)),Image.ANTIALIAS)<br><br><span class=\"hljs-comment\">#剪切 crop()四个参数分别是：(左上角点的x坐标，左上角点的y坐标，右下角点的x坐标，右下角点的y坐标)</span><br>img1_crop_result = img1.crop((<span class=\"hljs-number\">126</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">381</span>,<span class=\"hljs-number\">300</span>))<br><span class=\"hljs-comment\">#保存图片</span><br>img1_crop_result.save(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Matplotlib库\"><a href=\"#Matplotlib库\" class=\"headerlink\" title=\"Matplotlib库\"></a>Matplotlib库</h3><p>注：</p>\n<ul>\n<li>Matplotlib库由各种可视化类构成，内部结构复杂。</li>\n<li>matplotlib.pylot是绘制各类可视化图形的命令字库。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np <br><br><span class=\"hljs-comment\">#显示matplotlib生成的图形</span><br>%matplotlib inline<br><br>x = np.linspace(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">50</span>) <span class=\"hljs-comment\">#等差数列，从-1到1生成50个等间距的数的数组</span><br>y1 = <span class=\"hljs-number\">2</span>*x + <span class=\"hljs-number\">1</span><br>y2 = x**<span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\">#传入x,y,通过plot()绘制出折线图 </span><br>plt.figure(figsize=(<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">5</span>))<span class=\"hljs-comment\">#保持图像</span><br>plt.plot(x,y1,color=<span class=\"hljs-string\">&#x27;red&#x27;</span>,linewidth=<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">#连续图</span><br>plt.plot(x,y2,color=<span class=\"hljs-string\">&#x27;blue&#x27;</span>,linewidth=<span class=\"hljs-number\">5</span>)<br>plt.legend(handles=[l1,l2],labels=[<span class=\"hljs-string\">&#x27;aa&#x27;</span>,<span class=\"hljs-string\">&#x27;bb&#x27;</span>],loc=<span class=\"hljs-string\">&#x27;best&#x27;</span>)<span class=\"hljs-comment\">#图例</span><br>plt.xlabel(<span class=\"hljs-string\">&#x27;x&#x27;</span>,fontsize=<span class=\"hljs-number\">20</span>)<br>plt.ylabel(<span class=\"hljs-string\">&#x27;y&#x27;</span>,fontsize=<span class=\"hljs-number\">20</span>)<br>plt.xlim((<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\">#x轴只截取一段进行显示</span><br>plt.ylim((<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\">#y轴只截取一段进行显示</span><br>plt.show()<span class=\"hljs-comment\">#显示图形</span><br><br><span class=\"hljs-comment\">#绘制离散图</span><br>dots1 =np.random.rand(<span class=\"hljs-number\">50</span>)<br>dots2 =np.random.rand(<span class=\"hljs-number\">50</span>)<br>plt.scatter(dots1,dots2,c=<span class=\"hljs-string\">&#x27;red&#x27;</span>,alpha=<span class=\"hljs-number\">0.5</span>) <span class=\"hljs-comment\">#c表示颜色，alpha表示透明度</span><br>plt.show()<br><br><span class=\"hljs-comment\">#绘制直方图（柱状图）</span><br>x = np.arange(<span class=\"hljs-number\">10</span>)<br>y = <span class=\"hljs-number\">2</span>**x+<span class=\"hljs-number\">10</span><br>plt.bar(x,y,facecolor=<span class=\"hljs-string\">&#x27;#9999ff&#x27;</span>,edgecolor=<span class=\"hljs-string\">&#x27;white&#x27;</span>)<br><span class=\"hljs-keyword\">for</span> ax,ay <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(x,y):<span class=\"hljs-comment\">#顶部居中标注纵坐标</span><br>    plt.text(ax,ay,<span class=\"hljs-string\">&#x27;%.1f&#x27;</span> % ay,ha=<span class=\"hljs-string\">&#x27;center&#x27;</span>,va=<span class=\"hljs-string\">&#x27;bottom&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"基础图标函数\"><a href=\"#基础图标函数\" class=\"headerlink\" title=\"基础图标函数\"></a>基础图标函数</h4><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193426778.png\" alt=\"image-20220911193426778\" style=\"zoom:67%;\" />\n\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png\" alt=\"image-20220911193512661\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png\"></p>\n<hr>\n<h2 id=\"数据增强\"><a href=\"#数据增强\" class=\"headerlink\" title=\"数据增强\"></a>数据增强</h2><p>简介：深层神经网络一般都需要大量的训练数据才能获得比较理想的结果。在数据量有限的情况下，可以通过数据增强( Data Augmentation )来增加训练样本的多样性，提高模型鲁棒性。<br>目的：</p>\n<ul>\n<li><p>增加数据量</p>\n</li>\n<li><p>采集更多的图像特征</p>\n</li>\n<li><p>使网络可见更多的数据变化</p>\n</li>\n<li><p>提高模型的泛化能力</p>\n</li>\n</ul>\n<p>增强方式：</p>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911194420932.png\" alt=\"image-20220911194420932\" style=\"zoom: 80%;\" />\n\n<h3 id=\"1-随机旋转\"><a href=\"#1-随机旋转\" class=\"headerlink\" title=\"1. 随机旋转\"></a>1. 随机旋转</h3><p>注：<strong>使用numpy+ PIL库进行图像的随机旋转</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rotate_image</span>(<span class=\"hljs-params\"> img </span>): <br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    图像增强，增加随机旋转角度</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    angle = np.random.randint( -<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>)<br>    img = img.rotate(angle)<br>    <span class=\"hljs-keyword\">return</span> img<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-随机亮度调整\"><a href=\"#2-随机亮度调整\" class=\"headerlink\" title=\"2. 随机亮度调整\"></a>2. 随机亮度调整</h3><p>注：使用numpy+ PIL库进行图像的随机亮度调整</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_brightness</span>(<span class=\"hljs-params\">img</span>): <br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    图像增强，亮度调整</span><br><span class=\"hljs-string\">    :param img:</span><br><span class=\"hljs-string\">    :return:</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    prob = np.random.uniform(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">if</span> prob &lt; train_parameters[<span class=\"hljs-string\">&#x27;image_enhance_strategy&#x27;</span>][<span class=\"hljs-string\">&#x27;brightness_prob&#x27;</span>]:<br>        brightness_delta = train_parameters[<span class=\"hljs-string\">&#x27;image_enhance_strategy&#x27;</span>][<span class=\"hljs-string\">&#x27;brightness_delta&#x27;</span>] <br>        delta = np.random.uniform(-brightness_delta, brightness_delta) + <span class=\"hljs-number\">1</span><br>        img = ImageEnhance.Brightness(img).enhance(delta)<br>    <span class=\"hljs-keyword\">return</span> img<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-训练过程可视化\"><a href=\"#3-训练过程可视化\" class=\"headerlink\" title=\"3. 训练过程可视化\"></a>3. 训练过程可视化</h3><p>注：使用Matplotlib库绘制深度学习训练过程中,随着数据的增加，误差与准确率的变化趋势,从而对模型效果进行评估。观察到模型的误差相对较低,而准确率较高，接下来可以使用该模型进行预测。</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911195508553.png\" alt=\"image-20220911195508553\"></p>\n","site":{"data":{}},"wordcount":7508,"more":"<h1 id=\"深度学习\"><a href=\"#深度学习\" class=\"headerlink\" title=\"深度学习\"></a>深度学习</h1><h2 id=\"基本步骤：\"><a href=\"#基本步骤：\" class=\"headerlink\" title=\"基本步骤：\"></a>基本步骤：</h2><ol>\n<li><p>模型假设</p>\n</li>\n<li><p>优化目标</p>\n</li>\n<li><p>寻解算法</p>\n<ul>\n<li><p>公式法：</p>\n</li>\n<li><p>梯度下降法:  </p>\n<ol>\n<li><p>方向</p>\n</li>\n<li><p>步长</p>\n</li>\n<li><p>特征缩放</p>\n</li>\n<li><p>梯度决定步长   </p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220912142745507.png\" alt=\"image-20220912142745507\"></p>\n<h2 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h2><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190129721.png\" style=\"zoom: 33%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220902190439588.png\" style=\"zoom: 50%;\" />\n\n<h2 id=\"常用的库\"><a href=\"#常用的库\" class=\"headerlink\" title=\"常用的库\"></a>常用的库</h2><ol>\n<li><p><strong>numpy</strong>是Python科学计算库的基础。包含了强大的N维数组对象和向量运算。</p>\n</li>\n<li><p><strong>pandas</strong>是建立在numpy基础上的高效数据分析处理库，是Python的重要数据分析库。</p>\n</li>\n<li><p><strong>Matplotlib</strong>是一个主要用于绘制二维图形的Python库。用途：绘图、可视化</p>\n</li>\n<li><p><strong>PIL</strong>库是一个具有强大图像处理能力的第三方库。用途：图像处理</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"Numpy库\"><a href=\"#Numpy库\" class=\"headerlink\" title=\"Numpy库\"></a>Numpy库</h3><ul>\n<li>可以使用array函数从常规Python<strong>列表或元组</strong>中创建数组。得到的数组的类型是从Python列表中元素的类型推导出来的</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br><span class=\"hljs-comment\">#将列表转换为二维数组</span><br>array = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],<br>                 [<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br><span class=\"hljs-built_in\">print</span>(array)<br><span class=\"hljs-comment\">#将元组转换为二维数组</span><br>array = np.array(((<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>),<br>                 (<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>)))<br><span class=\"hljs-built_in\">print</span>(array)<br><span class=\"hljs-comment\">#将列表或元组转为一维数组</span><br>a = np.array([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]) <br>b = np.array((<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-built_in\">print</span>(a,b)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"1-常用函数\"><a href=\"#1-常用函数\" class=\"headerlink\" title=\"1.常用函数\"></a>1.常用函数</h4><ul>\n<li><p>zeros():可以创建指定长度或者形状的全0数组</p>\n</li>\n<li><p>ones():可以创建指定长度或者形状的全1数组</p>\n</li>\n<li><p>empty():创建一个数组，其初始内容是随机的,取决于内存的状态</p>\n</li>\n<li><p>arange():创建一个指定处末位置和步长的数字数组</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">zeroarray = np.zeros((<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>),dtype=<span class=\"hljs-string\">&#x27;int64&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(zeroarray)<br>onearray = np.ones((<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>),dtype=<span class=\"hljs-string\">&#x27;int64&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(onearray)<br>emptyarray = np.empty((<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-built_in\">print</span>(emptyarray)<br>array = np.arange( <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">5</span> )<br><span class=\"hljs-built_in\">print</span>(array)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>输出数组的一些信息，如维度、形状、元素个数、元素类型等</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">array = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>],[<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>],[<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">12</span>]])<br><span class=\"hljs-built_in\">print</span>(array)<br><span class=\"hljs-comment\">#数组维度</span><br><span class=\"hljs-built_in\">print</span>(array.ndim)<br><span class=\"hljs-comment\">#数组形状</span><br><span class=\"hljs-built_in\">print</span>(array.shape)<br><span class=\"hljs-comment\">#数组元素个数</span><br><span class=\"hljs-built_in\">print</span>(array.size)<br><span class=\"hljs-comment\">#数组元素类型</span><br><span class=\"hljs-built_in\">print</span>(array.dtype)<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>reshape([m,n])重新定义数字的形状为m行n列。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">array1 = np.arange(<span class=\"hljs-number\">6</span>).reshape([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])<span class=\"hljs-comment\">#重塑为2行3列</span><br><span class=\"hljs-built_in\">print</span>(array1)<br><br><br>array2 = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]],dtype=np.int64).reshape([<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>])<span class=\"hljs-comment\">#重塑为3行2列</span><br><span class=\"hljs-built_in\">print</span>(array2)<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-数组计算\"><a href=\"#2-数组计算\" class=\"headerlink\" title=\"2.数组计算\"></a>2.数组计算</h4><p><strong>注:大小相等的数组之间的任何算术运算都会将运算应用到元素级。同样，数组与标量的算术运算也会将那个标量值传播到各个元素.</strong></p>\n<ol>\n<li><p>矩阵基础运算：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">arr1 = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br>arr2 = np.ones([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],dtype=np.int64)<br><br><span class=\"hljs-built_in\">print</span>(arr1 + arr2)<br><span class=\"hljs-built_in\">print</span>(arr1 - arr2)<br><span class=\"hljs-built_in\">print</span>(arr1 * arr2)<br><span class=\"hljs-built_in\">print</span>(arr1 / arr2)<br><span class=\"hljs-built_in\">print</span>(arr1 ** <span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>矩阵乘法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">arr3 = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br>arr4 = np.ones([<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>],dtype=np.int64)<br><span class=\"hljs-built_in\">print</span>(arr3)<br><span class=\"hljs-built_in\">print</span>(arr4)<br><span class=\"hljs-built_in\">print</span>(np.dot(arr3,arr4))<br></code></pre></td></tr></table></figure></li>\n<li><p>矩阵其他运算：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(np.<span class=\"hljs-built_in\">sum</span>(arr3,axis=<span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">#axis=1,每一行求和 axie=0,每一列求和</span><br><span class=\"hljs-built_in\">print</span>(np.<span class=\"hljs-built_in\">max</span>(arr3))<br><span class=\"hljs-built_in\">print</span>(np.<span class=\"hljs-built_in\">min</span>(arr3))<br><span class=\"hljs-built_in\">print</span>(np.mean(arr3))<br><span class=\"hljs-built_in\">print</span>(np.argmax(arr3),axis=<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">#axis=1,每一行求最大值的索引 axie=0,每一列求最大值索引</span><br><span class=\"hljs-built_in\">print</span>(np.argmin(arr3),axis=<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">#axis=1,每一行求最小值的索引 axie=0,每一列求最小值索引</span><br><span class=\"hljs-built_in\">print</span>(arr3.transpose())<span class=\"hljs-comment\">#求数组的转置矩阵</span><br><span class=\"hljs-built_in\">print</span>(arr3.flatten())<span class=\"hljs-comment\">#将数组降为一维</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"3-数组的索引与切片\"><a href=\"#3-数组的索引与切片\" class=\"headerlink\" title=\"3.数组的索引与切片\"></a>3.数组的索引与切片</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">arr5 = np.arange(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>).reshape([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>])<br><span class=\"hljs-built_in\">print</span>(arr5)<br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>])<span class=\"hljs-comment\">#索引第一行</span><br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>])<span class=\"hljs-comment\">#索引第一行第二列</span><br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>])<span class=\"hljs-comment\">#索引第一行第二列</span><br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>,:])<span class=\"hljs-comment\">#切片第一行</span><br><span class=\"hljs-built_in\">print</span>(arr5[:,<span class=\"hljs-number\">1</span>])<span class=\"hljs-comment\">#切片第一列</span><br><span class=\"hljs-built_in\">print</span>(arr5[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">2</span>])<span class=\"hljs-comment\">#切片第一行第零列开始向后的两个元素，返回一个列表</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"4-线性代数常用库函数\"><a href=\"#4-线性代数常用库函数\" class=\"headerlink\" title=\"4.线性代数常用库函数\"></a>4.线性代数常用库函数</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193010646.png\" alt=\"image-20220911193010646\"></p>\n<h3 id=\"Pandas库\"><a href=\"#Pandas库\" class=\"headerlink\" title=\"Pandas库\"></a>Pandas库</h3><p>注：提供高性能易用数据类型和分析工具；</p>\n<p>​        pandas基于numpy实现，常与numpy和matplotlib一同使用。</p>\n<p><strong>Pandas核心数据结构：</strong></p>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/a8c80653f39b479dab9f6867a638b64c405e79d6540c4307a22f43c4b0e228bc\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/c8f06f423acc488fb391bca5dcf8f2b02d7444ef526f41599b6b430ae24659c1\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<h4 id=\"1-Series\"><a href=\"#1-Series\" class=\"headerlink\" title=\"1. Series\"></a>1. Series</h4><p>注：Series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类    型）以及一组与之相关的数据标签（即索引）组成.可理解为带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>s = pd.Series([<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>,<span class=\"hljs-string\">&#x27;d&#x27;</span>,<span class=\"hljs-string\">&#x27;e&#x27;</span>])<span class=\"hljs-comment\">#将列表转为series对象</span><br><span class=\"hljs-built_in\">print</span>(s)<br></code></pre></td></tr></table></figure>\n\n<p>注：Series中可以使用index设置索引列表，与字典不同的是，Series允许索引重复。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#与字典不同的是：Series允许索引重复</span><br>s = pd.Series([<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>,<span class=\"hljs-string\">&#x27;d&#x27;</span>,<span class=\"hljs-string\">&#x27;e&#x27;</span>],index=[<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">400</span>,<span class=\"hljs-number\">500</span>])<br><span class=\"hljs-built_in\">print</span>(s)<br>d = &#123;<span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>: <span class=\"hljs-number\">2</span>&#125;<br>pd.Series(d)<br>d = &#123;<span class=\"hljs-string\">&#x27;b&#x27;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>: <span class=\"hljs-number\">2</span>&#125;<span class=\"hljs-comment\">#将字典实例化</span><br>pd.Series(d)<br><span class=\"hljs-built_in\">print</span>(s.values)<span class=\"hljs-comment\">#取键值</span><br><span class=\"hljs-built_in\">print</span>(s.index)<span class=\"hljs-comment\">#取键</span><br><span class=\"hljs-comment\">#与普通numpy数组相比，可以通过索引的方式选取Series中的单个或一组值</span><br><span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-number\">100</span>])<br><span class=\"hljs-built_in\">print</span>(s[[<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">500</span>]])<br><span class=\"hljs-comment\">#对应元素求和</span><br><span class=\"hljs-built_in\">print</span>(s+s)<br><span class=\"hljs-comment\">#对应元素乘</span><br><span class=\"hljs-built_in\">print</span>(s*<span class=\"hljs-number\">3</span>)<br></code></pre></td></tr></table></figure>\n\n<p>注：Series中最重要的一个功能是它会在算术运算中基于标签自动对齐不同索引的数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">obj1 = pd.Series(&#123;<span class=\"hljs-string\">&quot;Ohio&quot;</span>: <span class=\"hljs-number\">35000</span>, <span class=\"hljs-string\">&quot;Oregon&quot;</span>: <span class=\"hljs-number\">16000</span>, <span class=\"hljs-string\">&quot;Texas&quot;</span>: <span class=\"hljs-number\">71000</span>, <span class=\"hljs-string\">&quot;Utah&quot;</span>: <span class=\"hljs-number\">5000</span>&#125;)<br><span class=\"hljs-built_in\">print</span>(obj1)<br>obj2 = pd.Series(&#123;<span class=\"hljs-string\">&quot;California&quot;</span>: np.nan, <span class=\"hljs-string\">&quot;Ohio&quot;</span>: <span class=\"hljs-number\">35000</span>, <span class=\"hljs-string\">&quot;Oregon&quot;</span>: <span class=\"hljs-number\">16000</span>, <span class=\"hljs-string\">&quot;Texas&quot;</span>: <span class=\"hljs-number\">71000</span>&#125;)<br><span class=\"hljs-built_in\">print</span>(obj2)<br><span class=\"hljs-built_in\">print</span>(obj1 + obj2)<br><br><span class=\"hljs-comment\">#可以切片，基础运算时没有匹配的键值会被设为NaN</span><br>s = pd.Series(np.array([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]), index=[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>])<br><br><span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-string\">&#x27;a&#x27;</span>])<br><span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-number\">1</span>:])<br><br><span class=\"hljs-built_in\">print</span>(s[:-<span class=\"hljs-number\">1</span>])<br><br><span class=\"hljs-built_in\">print</span>(s[<span class=\"hljs-number\">1</span>:] + s[:-<span class=\"hljs-number\">1</span>])<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-DataFrame\"><a href=\"#2-DataFrame\" class=\"headerlink\" title=\"2. DataFrame\"></a>2. DataFrame</h4><p>注：</p>\n<ul>\n<li>DataFrame是一个表格型的数据结构，类似于Excel或sql表</li>\n</ul>\n<p>它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）</p>\n<p>DataFrame既有行索引也有列索引，它可以被看做由Series组成的字典（共用同一个索引）。</p>\n<ul>\n<li><strong>用多维数组字典、列表字典生成 DataFrame。</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#如果指定了列顺序，则DataFrame的列就会按照指定顺序进行排列, 跟原Series一样，如果传入的列在数据中找不到，就会产生NAN值.</span><br>data = &#123;<span class=\"hljs-string\">&#x27;state&#x27;</span>: [<span class=\"hljs-string\">&#x27;Ohio&#x27;</span>, <span class=\"hljs-string\">&#x27;Ohio&#x27;</span>, <span class=\"hljs-string\">&#x27;Ohio&#x27;</span>, <span class=\"hljs-string\">&#x27;Nevada&#x27;</span>, <span class=\"hljs-string\">&#x27;Nevada&#x27;</span>], <span class=\"hljs-string\">&#x27;year&#x27;</span>: [<span class=\"hljs-number\">2000</span>, <span class=\"hljs-number\">2001</span>, <span class=\"hljs-number\">2002</span>, <span class=\"hljs-number\">2001</span>, <span class=\"hljs-number\">2002</span>], <span class=\"hljs-string\">&#x27;pop&#x27;</span>: [<span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">1.7</span>, <span class=\"hljs-number\">3.6</span>, <span class=\"hljs-number\">2.4</span>, <span class=\"hljs-number\">2.9</span>]&#125;<br>frame = pd.DataFrame(data,columns=[<span class=\"hljs-string\">&#x27;year&#x27;</span>, <span class=\"hljs-string\">&#x27;state&#x27;</span>, <span class=\"hljs-string\">&#x27;pop&#x27;</span>, <span class=\"hljs-string\">&#x27;debt&#x27;</span>])<br><span class=\"hljs-built_in\">print</span>(frame)<br></code></pre></td></tr></table></figure>\n\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220910232915712.png\" alt=\"image-20220910232915712\"  />\n\n<ul>\n<li><strong>用 Series 字典或字典生成 DataFrame, 即Series可以作为DataFrame的子集。</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">d = &#123;<span class=\"hljs-string\">&#x27;one&#x27;</span>: pd.Series([<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">2.</span>, <span class=\"hljs-number\">3.</span>], index=[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]),<br>     <span class=\"hljs-string\">&#x27;two&#x27;</span>: pd.Series([<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">2.</span>, <span class=\"hljs-number\">3.</span>, <span class=\"hljs-number\">4.</span>], index=[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>])&#125;<br><span class=\"hljs-built_in\">print</span>(pd.DataFrame(d))<br><br><span class=\"hljs-comment\">#通过类似字典标记的方式或属性的方式，可以将DataFrame的列获取为一个Series,返回的Series拥有原DataFrame相同的索引</span><br><span class=\"hljs-built_in\">print</span>(frame2[<span class=\"hljs-string\">&#x27;state&#x27;</span>])<br><br><span class=\"hljs-comment\">#列可以通过赋值的方式进行修改,例如，给那个空的“delt”列赋上一个标量值或一组值</span><br>frame2[<span class=\"hljs-string\">&#x27;debt&#x27;</span>] = <span class=\"hljs-number\">16.5</span><br><span class=\"hljs-built_in\">print</span>(frame2)<br><br><span class=\"hljs-comment\">#新增一个Series</span><br>frame2[<span class=\"hljs-string\">&#x27;new&#x27;</span>] = frame2[<span class=\"hljs-string\">&#x27;debt&#x27;</span> ]* frame2[<span class=\"hljs-string\">&#x27;pop&#x27;</span>] <br><span class=\"hljs-built_in\">print</span>(frame2)<br><br><span class=\"hljs-comment\">#用numpy数组赋值</span><br>frame2[<span class=\"hljs-string\">&#x27;debt&#x27;</span>] = np.arange(<span class=\"hljs-number\">5.</span>)<br><span class=\"hljs-built_in\">print</span>(frame2)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3-索引对象常用方法\"><a href=\"#3-索引对象常用方法\" class=\"headerlink\" title=\"3. 索引对象常用方法\"></a>3. 索引对象常用方法</h4><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193234679.png\" alt=\"image-20220911193234679\" style=\"zoom:50%;\" />\n\n<hr>\n<h3 id=\"PIL库\"><a href=\"#PIL库\" class=\"headerlink\" title=\"PIL库\"></a>PIL库</h3><p>注：</p>\n<ul>\n<li><p>PIL库是一个具有强大图像处理能力的第三方库。</p>\n</li>\n<li><p>在命令行下的安装方法: pip install pillow。</p>\n</li>\n<li><p>在使用过程中的弓|入方法: from PIL import Image。</p>\n</li>\n<li><p>图像的组成：由RGB三原色组成,RGB图像中，一种彩色由R、G、B三原色按照比例混合而成。0-255区分不同亮度的颜色。图像的数组表示：图像是一个由像素组成的矩阵，每个元素是一个RGB值。</p>\n</li>\n<li><p>Image 是 PIL 库中代表一个图像的类（对象）。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-comment\">#显示matplotlib生成的图形</span><br>%matplotlib inline<br><br><span class=\"hljs-comment\">#读取图片</span><br>img = Image.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;/home/aistudio/work/yushuxin.jpg&#x27;</span>) <br><br><span class=\"hljs-comment\">#显示图片</span><br><span class=\"hljs-comment\">#img.show() #自动调用计算机上显示图片的工具</span><br>plt.imshow(img)  <br>plt.show(img)   <br><br><span class=\"hljs-comment\">#获得图像的模式和大小</span><br>img_mode = img.mode<br><span class=\"hljs-built_in\">print</span>(img_mode)<br>width,height = img.size<br><span class=\"hljs-built_in\">print</span>(width,height)<br><br><span class=\"hljs-comment\">#将图片旋转45度</span><br>img_rotate = img.rotate(<span class=\"hljs-number\">45</span>) <br><br><span class=\"hljs-comment\">#左右镜像</span><br>img3_lr = img3.transpose(Image.FLIP_LEFT_RIGHT)<br><span class=\"hljs-comment\">#上下镜像</span><br>img3_bt = img3.transpose(Image.FLIP_TOP_BOTTOM)<br><br><span class=\"hljs-comment\">#缩放</span><br>width,height = img2.size<br>img2_resize_result = img2.resize((<span class=\"hljs-built_in\">int</span>(width*<span class=\"hljs-number\">0.6</span>),<span class=\"hljs-built_in\">int</span>(height*<span class=\"hljs-number\">0.6</span>)),Image.ANTIALIAS)<br><br><span class=\"hljs-comment\">#剪切 crop()四个参数分别是：(左上角点的x坐标，左上角点的y坐标，右下角点的x坐标，右下角点的y坐标)</span><br>img1_crop_result = img1.crop((<span class=\"hljs-number\">126</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">381</span>,<span class=\"hljs-number\">300</span>))<br><span class=\"hljs-comment\">#保存图片</span><br>img1_crop_result.save(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Matplotlib库\"><a href=\"#Matplotlib库\" class=\"headerlink\" title=\"Matplotlib库\"></a>Matplotlib库</h3><p>注：</p>\n<ul>\n<li>Matplotlib库由各种可视化类构成，内部结构复杂。</li>\n<li>matplotlib.pylot是绘制各类可视化图形的命令字库。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np <br><br><span class=\"hljs-comment\">#显示matplotlib生成的图形</span><br>%matplotlib inline<br><br>x = np.linspace(-<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">50</span>) <span class=\"hljs-comment\">#等差数列，从-1到1生成50个等间距的数的数组</span><br>y1 = <span class=\"hljs-number\">2</span>*x + <span class=\"hljs-number\">1</span><br>y2 = x**<span class=\"hljs-number\">2</span><br><br><span class=\"hljs-comment\">#传入x,y,通过plot()绘制出折线图 </span><br>plt.figure(figsize=(<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">5</span>))<span class=\"hljs-comment\">#保持图像</span><br>plt.plot(x,y1,color=<span class=\"hljs-string\">&#x27;red&#x27;</span>,linewidth=<span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">#连续图</span><br>plt.plot(x,y2,color=<span class=\"hljs-string\">&#x27;blue&#x27;</span>,linewidth=<span class=\"hljs-number\">5</span>)<br>plt.legend(handles=[l1,l2],labels=[<span class=\"hljs-string\">&#x27;aa&#x27;</span>,<span class=\"hljs-string\">&#x27;bb&#x27;</span>],loc=<span class=\"hljs-string\">&#x27;best&#x27;</span>)<span class=\"hljs-comment\">#图例</span><br>plt.xlabel(<span class=\"hljs-string\">&#x27;x&#x27;</span>,fontsize=<span class=\"hljs-number\">20</span>)<br>plt.ylabel(<span class=\"hljs-string\">&#x27;y&#x27;</span>,fontsize=<span class=\"hljs-number\">20</span>)<br>plt.xlim((<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\">#x轴只截取一段进行显示</span><br>plt.ylim((<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>))  <span class=\"hljs-comment\">#y轴只截取一段进行显示</span><br>plt.show()<span class=\"hljs-comment\">#显示图形</span><br><br><span class=\"hljs-comment\">#绘制离散图</span><br>dots1 =np.random.rand(<span class=\"hljs-number\">50</span>)<br>dots2 =np.random.rand(<span class=\"hljs-number\">50</span>)<br>plt.scatter(dots1,dots2,c=<span class=\"hljs-string\">&#x27;red&#x27;</span>,alpha=<span class=\"hljs-number\">0.5</span>) <span class=\"hljs-comment\">#c表示颜色，alpha表示透明度</span><br>plt.show()<br><br><span class=\"hljs-comment\">#绘制直方图（柱状图）</span><br>x = np.arange(<span class=\"hljs-number\">10</span>)<br>y = <span class=\"hljs-number\">2</span>**x+<span class=\"hljs-number\">10</span><br>plt.bar(x,y,facecolor=<span class=\"hljs-string\">&#x27;#9999ff&#x27;</span>,edgecolor=<span class=\"hljs-string\">&#x27;white&#x27;</span>)<br><span class=\"hljs-keyword\">for</span> ax,ay <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(x,y):<span class=\"hljs-comment\">#顶部居中标注纵坐标</span><br>    plt.text(ax,ay,<span class=\"hljs-string\">&#x27;%.1f&#x27;</span> % ay,ha=<span class=\"hljs-string\">&#x27;center&#x27;</span>,va=<span class=\"hljs-string\">&#x27;bottom&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"基础图标函数\"><a href=\"#基础图标函数\" class=\"headerlink\" title=\"基础图标函数\"></a>基础图标函数</h4><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193426778.png\" alt=\"image-20220911193426778\" style=\"zoom:67%;\" />\n\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png\" alt=\"image-20220911193512661\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911193512661.png\"></p>\n<hr>\n<h2 id=\"数据增强\"><a href=\"#数据增强\" class=\"headerlink\" title=\"数据增强\"></a>数据增强</h2><p>简介：深层神经网络一般都需要大量的训练数据才能获得比较理想的结果。在数据量有限的情况下，可以通过数据增强( Data Augmentation )来增加训练样本的多样性，提高模型鲁棒性。<br>目的：</p>\n<ul>\n<li><p>增加数据量</p>\n</li>\n<li><p>采集更多的图像特征</p>\n</li>\n<li><p>使网络可见更多的数据变化</p>\n</li>\n<li><p>提高模型的泛化能力</p>\n</li>\n</ul>\n<p>增强方式：</p>\n<img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911194420932.png\" alt=\"image-20220911194420932\" style=\"zoom: 80%;\" />\n\n<h3 id=\"1-随机旋转\"><a href=\"#1-随机旋转\" class=\"headerlink\" title=\"1. 随机旋转\"></a>1. 随机旋转</h3><p>注：<strong>使用numpy+ PIL库进行图像的随机旋转</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rotate_image</span>(<span class=\"hljs-params\"> img </span>): <br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    图像增强，增加随机旋转角度</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    angle = np.random.randint( -<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>)<br>    img = img.rotate(angle)<br>    <span class=\"hljs-keyword\">return</span> img<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-随机亮度调整\"><a href=\"#2-随机亮度调整\" class=\"headerlink\" title=\"2. 随机亮度调整\"></a>2. 随机亮度调整</h3><p>注：使用numpy+ PIL库进行图像的随机亮度调整</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_brightness</span>(<span class=\"hljs-params\">img</span>): <br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    图像增强，亮度调整</span><br><span class=\"hljs-string\">    :param img:</span><br><span class=\"hljs-string\">    :return:</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    prob = np.random.uniform(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">if</span> prob &lt; train_parameters[<span class=\"hljs-string\">&#x27;image_enhance_strategy&#x27;</span>][<span class=\"hljs-string\">&#x27;brightness_prob&#x27;</span>]:<br>        brightness_delta = train_parameters[<span class=\"hljs-string\">&#x27;image_enhance_strategy&#x27;</span>][<span class=\"hljs-string\">&#x27;brightness_delta&#x27;</span>] <br>        delta = np.random.uniform(-brightness_delta, brightness_delta) + <span class=\"hljs-number\">1</span><br>        img = ImageEnhance.Brightness(img).enhance(delta)<br>    <span class=\"hljs-keyword\">return</span> img<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-训练过程可视化\"><a href=\"#3-训练过程可视化\" class=\"headerlink\" title=\"3. 训练过程可视化\"></a>3. 训练过程可视化</h3><p>注：使用Matplotlib库绘制深度学习训练过程中,随着数据的增加，误差与准确率的变化趋势,从而对模型效果进行评估。观察到模型的误差相对较低,而准确率较高，接下来可以使用该模型进行预测。</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220911195508553.png\" alt=\"image-20220911195508553\"></p>\n"},{"title":"Java_Exercise","date":"2022-09-28T13:27:00.000Z","sticky":50,"excerpt":"some exercises about java。","_content":"# Java—Exercise\n\n## 第一题\n\n### 一、题目描述\n\n定义一个数组类，编写成员函数实现以下功能：\n\n1. 随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；\n\n2. 判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；\n\n3. 数组和函数Sum（）：计算数组和。\n\n4. 判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；\n\n5. 编写main函数，调用测试以上功能；\n\n### 二、 运行结果\n\n![image-20220928183135033](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928183135033.png)\n\n### 三、源代码\n\n```java\npackage task;\nimport java.util.Arrays;\nimport java.util.Random;\npublic class array {\n    public int [] x;\n    public void RandomArray(int n, int max)\n    {\n        this.x = new int[n];\n        for (int i = 0; i < n; i++)\n        {\n            this.x[i] = new Random().nextInt(max);\n        }\n    }\n    public int CheckOrder()\n    {\n        int [] temp = new int[this.x.length];\n        for (int i = 0; i < this.x.length; i++)\n        {\n            temp[i] = this.x[i];\n        }\n        Arrays.sort(temp);\n        for (int i = 0; i < this.x.length; i++)\n        {\n            if (this.x[i] != temp[i])\n            {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public int Sum()\n    {\n        int sum = 0;\n        for (int i = 0; i < this.x.length; i++)\n        {\n            sum += this.x[i];\n        }\n        return sum;\n    }\n    public int CheckKey(int key)\n    {\n        for (int i = 0; i < this.x.length; i++)\n        {\n            if(this.x[i] == key)\n            {\n                return 1;\n            }\n        }\n        return 0;\n    }\n    public static void main(String[] args)\n    {\n        array a = new array();\n        a.RandomArray(5,10);\n        System.out.println(\"打印随机产生的数组\");\n         for (int x : a.x) {\n             System.out.print(x+\"\\t\");\n    }\n        System.out.println(\"\");\n        System.out.println(\"判断数组中是否有2?\");\n        System.out.println(a.CheckKey(2));\n        System.out.println(\"判断数组是否升序?\");\n        System.out.println(a.CheckOrder());\n        System.out.println(\"打印数组求和的值\");\n        System.out.print(a.Sum());\n    }\n}\n```\n\n## 第二题\n\n### 一、题目描述\n\n编写程序，求圆柱体的体积**CylinderVolume**。\n\n1. 设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；\n\n2. 设计一个圆柱体类Cylinder实现接口area。\n\n   - 包含包含成员变量：高度，半径；\n\n   - 实现构造方法，对成员变量进行赋值；\n\n   - 实现圆柱体底面积成员方法area；\n\n   -  实现计算圆柱体体积的成员方法volume；\n\n3. 编写测试类计算圆柱体体积。\n\n### 二、运行结果\n\n![](https://img.gouka.la/i/2022/09/28/z0gkwr.webp)\n\n### 三、源代码\n\n```java\npackage task;\nimport java.lang.Math.*;\nimport java.util.Scanner;\n\npublic class Cylinder implements area{\n    public double height;\n    public double radius;\n    public double bottomArea()\n    {\n        return Math.PI*Math.pow(this.radius,2);\n    }\n    public Cylinder(double radius, double height)\n    {\n        this.radius = radius;\n        this.height = height;\n    }\n    public double volume()\n    {\n        return height*bottomArea();\n    }\n}\ninterface area{\n    double bottomArea();\n}\nclass Cylindertest{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.println(\"请输入圆柱的半径和高度：\");\n        double r = in.nextDouble();\n        double h = in.nextDouble();\n        Cylinder c = new Cylinder(r, h);\n        System.out.println(\"圆柱的体积为:\\n\"+c.volume()+\"立方米\");\n    }\n}\n```\n\n## 第三题\n\n### 一、题目描述\n\n**按以下要求编写程序：**\n\n1.  定义一个父类Animal类\n\n​\t\t\t属性：kind(种类)\n\n​\t\t\t方法：创建带参（kind为参数）构造方法\n\n​\t\t\t创建cry():void方法\n\n2. 编写三个具体的子类Cat类、Dog类、Sheep类\n\n​\t\t\t分别重写父类中的 cry() 方法，输出信息分别为\n\n​\t\t\tCat类：小猫的叫声：喵喵喵~~~\n\n​\t\t\tDog类：小狗的叫声：汪汪汪~~~\n\n​\t\t\tSheep类：小羊的叫声：咩咩咩~~~\n\n3. 编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：\n\n- 每次随机产生一个0~2的正整数\n- 若数值为 0，则生成一个 Cat 类的对象，存入数组\n- 若数值为 1，则生成一个 Dog 类的对象，存入数组\n- 若数值为 2，则生成一个 Sheep 类的对象，存入数组最后循环输出数组成员，并分别调用 cry() 方法。\n\n### 二、运行结果\n\n![image-20220928210706368](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928210706368.png)\n\n### 三、源代码\n\n```java\npackage task;\nimport java.util.Random;\npublic class Animal {\n    public String kind;\n    public Animal(){};\n    public Animal(String kind)\n    {\n        this.kind = kind;\n    }\n    public void cry(){};\n}\nclass Cat extends Animal\n{\n        public Cat(String kind)\n        {\n            super(kind);\n        }\n        @Override\n        public void cry() {\n            System.out.println(this.kind+\"的叫声：喵喵喵~~~\");\n        }\n}\nclass Dog extends Animal\n{\n    public Dog(String kind)\n    {\n        super(kind);\n    }\n    @Override\n    public void cry() {\n        System.out.println(this.kind+\"的叫声：汪汪汪~~~\");\n    }\n}\nclass Sheep extends Animal\n{\n    public Sheep(String kind)\n    {\n        super(kind);\n    }\n    @Override\n    public void cry() {\n        System.out.println(this.kind+\"的叫声：咩咩咩~~~\");\n    }\n}\nclass Animaltest\n{\n    public static void main(String[] args)\n    {\n        int []n = {0,0,0};\n        Animal [] An = new  Animal[5];\n        for(int i=0; i<An.length; i++) {\n            int j = new Random().nextInt(0, 3);\n            switch (j) {\n                case 0:\n                    An[i] = new Cat(\"Tom\"+(n[0]++));\n                    break;\n                case 1:\n                    An[i] = new Dog(\"Jerry\"+(n[1]++));\n                    break;\n                case 2:\n                    An[i] = new Sheep(\"PeiQi\"+(n[2]++));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid number\");\n            }\n        }\n        for (Animal temp : An )\n        {\n            temp.cry();\n        }\n    }\n}\n```\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[文章已上传博客](https://alleyf.github.io)\n","source":"_posts/Java_Exercise.md","raw":"---\ntitle: Java_Exercise\ntags: [Java]\ncategories: Java\ndate: 2022-9-28 21:27:00\nsticky: 50\nexcerpt: some exercises about java。\n---\n# Java—Exercise\n\n## 第一题\n\n### 一、题目描述\n\n定义一个数组类，编写成员函数实现以下功能：\n\n1. 随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；\n\n2. 判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；\n\n3. 数组和函数Sum（）：计算数组和。\n\n4. 判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；\n\n5. 编写main函数，调用测试以上功能；\n\n### 二、 运行结果\n\n![image-20220928183135033](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928183135033.png)\n\n### 三、源代码\n\n```java\npackage task;\nimport java.util.Arrays;\nimport java.util.Random;\npublic class array {\n    public int [] x;\n    public void RandomArray(int n, int max)\n    {\n        this.x = new int[n];\n        for (int i = 0; i < n; i++)\n        {\n            this.x[i] = new Random().nextInt(max);\n        }\n    }\n    public int CheckOrder()\n    {\n        int [] temp = new int[this.x.length];\n        for (int i = 0; i < this.x.length; i++)\n        {\n            temp[i] = this.x[i];\n        }\n        Arrays.sort(temp);\n        for (int i = 0; i < this.x.length; i++)\n        {\n            if (this.x[i] != temp[i])\n            {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    public int Sum()\n    {\n        int sum = 0;\n        for (int i = 0; i < this.x.length; i++)\n        {\n            sum += this.x[i];\n        }\n        return sum;\n    }\n    public int CheckKey(int key)\n    {\n        for (int i = 0; i < this.x.length; i++)\n        {\n            if(this.x[i] == key)\n            {\n                return 1;\n            }\n        }\n        return 0;\n    }\n    public static void main(String[] args)\n    {\n        array a = new array();\n        a.RandomArray(5,10);\n        System.out.println(\"打印随机产生的数组\");\n         for (int x : a.x) {\n             System.out.print(x+\"\\t\");\n    }\n        System.out.println(\"\");\n        System.out.println(\"判断数组中是否有2?\");\n        System.out.println(a.CheckKey(2));\n        System.out.println(\"判断数组是否升序?\");\n        System.out.println(a.CheckOrder());\n        System.out.println(\"打印数组求和的值\");\n        System.out.print(a.Sum());\n    }\n}\n```\n\n## 第二题\n\n### 一、题目描述\n\n编写程序，求圆柱体的体积**CylinderVolume**。\n\n1. 设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；\n\n2. 设计一个圆柱体类Cylinder实现接口area。\n\n   - 包含包含成员变量：高度，半径；\n\n   - 实现构造方法，对成员变量进行赋值；\n\n   - 实现圆柱体底面积成员方法area；\n\n   -  实现计算圆柱体体积的成员方法volume；\n\n3. 编写测试类计算圆柱体体积。\n\n### 二、运行结果\n\n![](https://img.gouka.la/i/2022/09/28/z0gkwr.webp)\n\n### 三、源代码\n\n```java\npackage task;\nimport java.lang.Math.*;\nimport java.util.Scanner;\n\npublic class Cylinder implements area{\n    public double height;\n    public double radius;\n    public double bottomArea()\n    {\n        return Math.PI*Math.pow(this.radius,2);\n    }\n    public Cylinder(double radius, double height)\n    {\n        this.radius = radius;\n        this.height = height;\n    }\n    public double volume()\n    {\n        return height*bottomArea();\n    }\n}\ninterface area{\n    double bottomArea();\n}\nclass Cylindertest{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.println(\"请输入圆柱的半径和高度：\");\n        double r = in.nextDouble();\n        double h = in.nextDouble();\n        Cylinder c = new Cylinder(r, h);\n        System.out.println(\"圆柱的体积为:\\n\"+c.volume()+\"立方米\");\n    }\n}\n```\n\n## 第三题\n\n### 一、题目描述\n\n**按以下要求编写程序：**\n\n1.  定义一个父类Animal类\n\n​\t\t\t属性：kind(种类)\n\n​\t\t\t方法：创建带参（kind为参数）构造方法\n\n​\t\t\t创建cry():void方法\n\n2. 编写三个具体的子类Cat类、Dog类、Sheep类\n\n​\t\t\t分别重写父类中的 cry() 方法，输出信息分别为\n\n​\t\t\tCat类：小猫的叫声：喵喵喵~~~\n\n​\t\t\tDog类：小狗的叫声：汪汪汪~~~\n\n​\t\t\tSheep类：小羊的叫声：咩咩咩~~~\n\n3. 编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：\n\n- 每次随机产生一个0~2的正整数\n- 若数值为 0，则生成一个 Cat 类的对象，存入数组\n- 若数值为 1，则生成一个 Dog 类的对象，存入数组\n- 若数值为 2，则生成一个 Sheep 类的对象，存入数组最后循环输出数组成员，并分别调用 cry() 方法。\n\n### 二、运行结果\n\n![image-20220928210706368](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928210706368.png)\n\n### 三、源代码\n\n```java\npackage task;\nimport java.util.Random;\npublic class Animal {\n    public String kind;\n    public Animal(){};\n    public Animal(String kind)\n    {\n        this.kind = kind;\n    }\n    public void cry(){};\n}\nclass Cat extends Animal\n{\n        public Cat(String kind)\n        {\n            super(kind);\n        }\n        @Override\n        public void cry() {\n            System.out.println(this.kind+\"的叫声：喵喵喵~~~\");\n        }\n}\nclass Dog extends Animal\n{\n    public Dog(String kind)\n    {\n        super(kind);\n    }\n    @Override\n    public void cry() {\n        System.out.println(this.kind+\"的叫声：汪汪汪~~~\");\n    }\n}\nclass Sheep extends Animal\n{\n    public Sheep(String kind)\n    {\n        super(kind);\n    }\n    @Override\n    public void cry() {\n        System.out.println(this.kind+\"的叫声：咩咩咩~~~\");\n    }\n}\nclass Animaltest\n{\n    public static void main(String[] args)\n    {\n        int []n = {0,0,0};\n        Animal [] An = new  Animal[5];\n        for(int i=0; i<An.length; i++) {\n            int j = new Random().nextInt(0, 3);\n            switch (j) {\n                case 0:\n                    An[i] = new Cat(\"Tom\"+(n[0]++));\n                    break;\n                case 1:\n                    An[i] = new Dog(\"Jerry\"+(n[1]++));\n                    break;\n                case 2:\n                    An[i] = new Sheep(\"PeiQi\"+(n[2]++));\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid number\");\n            }\n        }\n        for (Animal temp : An )\n        {\n            temp.cry();\n        }\n    }\n}\n```\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[文章已上传博客](https://alleyf.github.io)\n","slug":"Java_Exercise","published":1,"updated":"2022-09-28T13:27:55.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lo2ghp000tichz4mnrh6um","content":"<h1 id=\"Java—Exercise\"><a href=\"#Java—Exercise\" class=\"headerlink\" title=\"Java—Exercise\"></a>Java—Exercise</h1><h2 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2><h3 id=\"一、题目描述\"><a href=\"#一、题目描述\" class=\"headerlink\" title=\"一、题目描述\"></a>一、题目描述</h3><p>定义一个数组类，编写成员函数实现以下功能：</p>\n<ol>\n<li><p>随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；</p>\n</li>\n<li><p>判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；</p>\n</li>\n<li><p>数组和函数Sum（）：计算数组和。</p>\n</li>\n<li><p>判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；</p>\n</li>\n<li><p>编写main函数，调用测试以上功能；</p>\n</li>\n</ol>\n<h3 id=\"二、-运行结果\"><a href=\"#二、-运行结果\" class=\"headerlink\" title=\"二、 运行结果\"></a>二、 运行结果</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928183135033.png\" alt=\"image-20220928183135033\"></p>\n<h3 id=\"三、源代码\"><a href=\"#三、源代码\" class=\"headerlink\" title=\"三、源代码\"></a>三、源代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> task;<br><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">array</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> [] x;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">RandomArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> max)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">this</span>.x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">this</span>.x[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().nextInt(max);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CheckOrder</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-type\">int</span> [] temp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-built_in\">this</span>.x.length];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.x.length; i++)<br>        &#123;<br>            temp[i] = <span class=\"hljs-built_in\">this</span>.x[i];<br>        &#125;<br>        Arrays.sort(temp);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.x.length; i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.x[i] != temp[i])<br>            &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Sum</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.x.length; i++)<br>        &#123;<br>            sum += <span class=\"hljs-built_in\">this</span>.x[i];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CheckKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.x.length; i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.x[i] == key)<br>            &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    &#123;<br>        <span class=\"hljs-type\">array</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">array</span>();<br>        a.RandomArray(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">10</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;打印随机产生的数组&quot;</span>);<br>         <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> x : a.x) &#123;<br>             System.out.print(x+<span class=\"hljs-string\">&quot;\\t&quot;</span>);<br>    &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;判断数组中是否有2?&quot;</span>);<br>        System.out.println(a.CheckKey(<span class=\"hljs-number\">2</span>));<br>        System.out.println(<span class=\"hljs-string\">&quot;判断数组是否升序?&quot;</span>);<br>        System.out.println(a.CheckOrder());<br>        System.out.println(<span class=\"hljs-string\">&quot;打印数组求和的值&quot;</span>);<br>        System.out.print(a.Sum());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2><h3 id=\"一、题目描述-1\"><a href=\"#一、题目描述-1\" class=\"headerlink\" title=\"一、题目描述\"></a>一、题目描述</h3><p>编写程序，求圆柱体的体积<strong>CylinderVolume</strong>。</p>\n<ol>\n<li><p>设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；</p>\n</li>\n<li><p>设计一个圆柱体类Cylinder实现接口area。</p>\n<ul>\n<li><p>包含包含成员变量：高度，半径；</p>\n</li>\n<li><p>实现构造方法，对成员变量进行赋值；</p>\n</li>\n<li><p>实现圆柱体底面积成员方法area；</p>\n</li>\n<li><p> 实现计算圆柱体体积的成员方法volume；</p>\n</li>\n</ul>\n</li>\n<li><p>编写测试类计算圆柱体体积。</p>\n</li>\n</ol>\n<h3 id=\"二、运行结果\"><a href=\"#二、运行结果\" class=\"headerlink\" title=\"二、运行结果\"></a>二、运行结果</h3><p><img src=\"https://img.gouka.la/i/2022/09/28/z0gkwr.webp\"></p>\n<h3 id=\"三、源代码-1\"><a href=\"#三、源代码-1\" class=\"headerlink\" title=\"三、源代码\"></a>三、源代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> task;<br><span class=\"hljs-keyword\">import</span> java.lang.Math.*;<br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cylinder</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">area</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> height;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> radius;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">bottomArea</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.PI*Math.pow(<span class=\"hljs-built_in\">this</span>.radius,<span class=\"hljs-number\">2</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cylinder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius, <span class=\"hljs-type\">double</span> height)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">this</span>.radius = radius;<br>        <span class=\"hljs-built_in\">this</span>.height = height;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volume</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> height*bottomArea();<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">area</span>&#123;<br>    <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">bottomArea</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cylindertest</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    &#123;<br>        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);<br>        System.out.println(<span class=\"hljs-string\">&quot;请输入圆柱的半径和高度：&quot;</span>);<br>        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> in.nextDouble();<br>        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> in.nextDouble();<br>        <span class=\"hljs-type\">Cylinder</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cylinder</span>(r, h);<br>        System.out.println(<span class=\"hljs-string\">&quot;圆柱的体积为:\\n&quot;</span>+c.volume()+<span class=\"hljs-string\">&quot;立方米&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h2><h3 id=\"一、题目描述-2\"><a href=\"#一、题目描述-2\" class=\"headerlink\" title=\"一、题目描述\"></a>一、题目描述</h3><p><strong>按以下要求编写程序：</strong></p>\n<ol>\n<li> 定义一个父类Animal类</li>\n</ol>\n<p>​            属性：kind(种类)</p>\n<p>​            方法：创建带参（kind为参数）构造方法</p>\n<p>​            创建cry():void方法</p>\n<ol start=\"2\">\n<li>编写三个具体的子类Cat类、Dog类、Sheep类</li>\n</ol>\n<p>​            分别重写父类中的 cry() 方法，输出信息分别为</p>\n<p>​            Cat类：小猫的叫声：喵喵喵~~~</p>\n<p>​            Dog类：小狗的叫声：汪汪汪~~~</p>\n<p>​            Sheep类：小羊的叫声：咩咩咩~~~</p>\n<ol start=\"3\">\n<li>编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：</li>\n</ol>\n<ul>\n<li>每次随机产生一个0~2的正整数</li>\n<li>若数值为 0，则生成一个 Cat 类的对象，存入数组</li>\n<li>若数值为 1，则生成一个 Dog 类的对象，存入数组</li>\n<li>若数值为 2，则生成一个 Sheep 类的对象，存入数组最后循环输出数组成员，并分别调用 cry() 方法。</li>\n</ul>\n<h3 id=\"二、运行结果-1\"><a href=\"#二、运行结果-1\" class=\"headerlink\" title=\"二、运行结果\"></a>二、运行结果</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928210706368.png\" alt=\"image-20220928210706368\"></p>\n<h3 id=\"三、源代码-2\"><a href=\"#三、源代码-2\" class=\"headerlink\" title=\"三、源代码\"></a>三、源代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> task;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> String kind;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Animal</span><span class=\"hljs-params\">()</span>&#123;&#125;;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Animal</span><span class=\"hljs-params\">(String kind)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">this</span>.kind = kind;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;&#125;;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span><br>&#123;<br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cat</span><span class=\"hljs-params\">(String kind)</span><br>        &#123;<br>            <span class=\"hljs-built_in\">super</span>(kind);<br>        &#125;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span> &#123;<br>            System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：喵喵喵~~~&quot;</span>);<br>        &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span><br>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Dog</span><span class=\"hljs-params\">(String kind)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">super</span>(kind);<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：汪汪汪~~~&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Sheep</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span><br>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Sheep</span><span class=\"hljs-params\">(String kind)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">super</span>(kind);<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：咩咩咩~~~&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animaltest</span><br>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    &#123;<br>        <span class=\"hljs-type\">int</span> []n = &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>&#125;;<br>        Animal [] An = <span class=\"hljs-keyword\">new</span>  <span class=\"hljs-title class_\">Animal</span>[<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;An.length; i++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().nextInt(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);<br>            <span class=\"hljs-keyword\">switch</span> (j) &#123;<br>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                    An[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cat</span>(<span class=\"hljs-string\">&quot;Tom&quot;</span>+(n[<span class=\"hljs-number\">0</span>]++));<br>                    <span class=\"hljs-keyword\">break</span>;<br>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>                    An[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">&quot;Jerry&quot;</span>+(n[<span class=\"hljs-number\">1</span>]++));<br>                    <span class=\"hljs-keyword\">break</span>;<br>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                    An[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Sheep</span>(<span class=\"hljs-string\">&quot;PeiQi&quot;</span>+(n[<span class=\"hljs-number\">2</span>]++));<br>                    <span class=\"hljs-keyword\">break</span>;<br>                <span class=\"hljs-keyword\">default</span>:<br>                    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid number&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (Animal temp : An )<br>        &#123;<br>            temp.cry();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​                                                                                                                                                <a href=\"https://alleyf.github.io/\">文章已上传博客</a></p>\n","site":{"data":{}},"wordcount":4148,"more":"<h1 id=\"Java—Exercise\"><a href=\"#Java—Exercise\" class=\"headerlink\" title=\"Java—Exercise\"></a>Java—Exercise</h1><h2 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2><h3 id=\"一、题目描述\"><a href=\"#一、题目描述\" class=\"headerlink\" title=\"一、题目描述\"></a>一、题目描述</h3><p>定义一个数组类，编写成员函数实现以下功能：</p>\n<ol>\n<li><p>随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；</p>\n</li>\n<li><p>判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；</p>\n</li>\n<li><p>数组和函数Sum（）：计算数组和。</p>\n</li>\n<li><p>判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；</p>\n</li>\n<li><p>编写main函数，调用测试以上功能；</p>\n</li>\n</ol>\n<h3 id=\"二、-运行结果\"><a href=\"#二、-运行结果\" class=\"headerlink\" title=\"二、 运行结果\"></a>二、 运行结果</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928183135033.png\" alt=\"image-20220928183135033\"></p>\n<h3 id=\"三、源代码\"><a href=\"#三、源代码\" class=\"headerlink\" title=\"三、源代码\"></a>三、源代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> task;<br><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">array</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> [] x;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">RandomArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> max)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">this</span>.x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">this</span>.x[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().nextInt(max);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CheckOrder</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-type\">int</span> [] temp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-built_in\">this</span>.x.length];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.x.length; i++)<br>        &#123;<br>            temp[i] = <span class=\"hljs-built_in\">this</span>.x[i];<br>        &#125;<br>        Arrays.sort(temp);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.x.length; i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.x[i] != temp[i])<br>            &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Sum</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.x.length; i++)<br>        &#123;<br>            sum += <span class=\"hljs-built_in\">this</span>.x[i];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sum;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CheckKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.x.length; i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.x[i] == key)<br>            &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    &#123;<br>        <span class=\"hljs-type\">array</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">array</span>();<br>        a.RandomArray(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">10</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;打印随机产生的数组&quot;</span>);<br>         <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> x : a.x) &#123;<br>             System.out.print(x+<span class=\"hljs-string\">&quot;\\t&quot;</span>);<br>    &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;判断数组中是否有2?&quot;</span>);<br>        System.out.println(a.CheckKey(<span class=\"hljs-number\">2</span>));<br>        System.out.println(<span class=\"hljs-string\">&quot;判断数组是否升序?&quot;</span>);<br>        System.out.println(a.CheckOrder());<br>        System.out.println(<span class=\"hljs-string\">&quot;打印数组求和的值&quot;</span>);<br>        System.out.print(a.Sum());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2><h3 id=\"一、题目描述-1\"><a href=\"#一、题目描述-1\" class=\"headerlink\" title=\"一、题目描述\"></a>一、题目描述</h3><p>编写程序，求圆柱体的体积<strong>CylinderVolume</strong>。</p>\n<ol>\n<li><p>设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；</p>\n</li>\n<li><p>设计一个圆柱体类Cylinder实现接口area。</p>\n<ul>\n<li><p>包含包含成员变量：高度，半径；</p>\n</li>\n<li><p>实现构造方法，对成员变量进行赋值；</p>\n</li>\n<li><p>实现圆柱体底面积成员方法area；</p>\n</li>\n<li><p> 实现计算圆柱体体积的成员方法volume；</p>\n</li>\n</ul>\n</li>\n<li><p>编写测试类计算圆柱体体积。</p>\n</li>\n</ol>\n<h3 id=\"二、运行结果\"><a href=\"#二、运行结果\" class=\"headerlink\" title=\"二、运行结果\"></a>二、运行结果</h3><p><img src=\"https://img.gouka.la/i/2022/09/28/z0gkwr.webp\"></p>\n<h3 id=\"三、源代码-1\"><a href=\"#三、源代码-1\" class=\"headerlink\" title=\"三、源代码\"></a>三、源代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> task;<br><span class=\"hljs-keyword\">import</span> java.lang.Math.*;<br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cylinder</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">area</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> height;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> radius;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">bottomArea</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.PI*Math.pow(<span class=\"hljs-built_in\">this</span>.radius,<span class=\"hljs-number\">2</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cylinder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius, <span class=\"hljs-type\">double</span> height)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">this</span>.radius = radius;<br>        <span class=\"hljs-built_in\">this</span>.height = height;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volume</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> height*bottomArea();<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">area</span>&#123;<br>    <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">bottomArea</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cylindertest</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    &#123;<br>        <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);<br>        System.out.println(<span class=\"hljs-string\">&quot;请输入圆柱的半径和高度：&quot;</span>);<br>        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> in.nextDouble();<br>        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> in.nextDouble();<br>        <span class=\"hljs-type\">Cylinder</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cylinder</span>(r, h);<br>        System.out.println(<span class=\"hljs-string\">&quot;圆柱的体积为:\\n&quot;</span>+c.volume()+<span class=\"hljs-string\">&quot;立方米&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h2><h3 id=\"一、题目描述-2\"><a href=\"#一、题目描述-2\" class=\"headerlink\" title=\"一、题目描述\"></a>一、题目描述</h3><p><strong>按以下要求编写程序：</strong></p>\n<ol>\n<li> 定义一个父类Animal类</li>\n</ol>\n<p>​            属性：kind(种类)</p>\n<p>​            方法：创建带参（kind为参数）构造方法</p>\n<p>​            创建cry():void方法</p>\n<ol start=\"2\">\n<li>编写三个具体的子类Cat类、Dog类、Sheep类</li>\n</ol>\n<p>​            分别重写父类中的 cry() 方法，输出信息分别为</p>\n<p>​            Cat类：小猫的叫声：喵喵喵~~~</p>\n<p>​            Dog类：小狗的叫声：汪汪汪~~~</p>\n<p>​            Sheep类：小羊的叫声：咩咩咩~~~</p>\n<ol start=\"3\">\n<li>编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：</li>\n</ol>\n<ul>\n<li>每次随机产生一个0~2的正整数</li>\n<li>若数值为 0，则生成一个 Cat 类的对象，存入数组</li>\n<li>若数值为 1，则生成一个 Dog 类的对象，存入数组</li>\n<li>若数值为 2，则生成一个 Sheep 类的对象，存入数组最后循环输出数组成员，并分别调用 cry() 方法。</li>\n</ul>\n<h3 id=\"二、运行结果-1\"><a href=\"#二、运行结果-1\" class=\"headerlink\" title=\"二、运行结果\"></a>二、运行结果</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220928210706368.png\" alt=\"image-20220928210706368\"></p>\n<h3 id=\"三、源代码-2\"><a href=\"#三、源代码-2\" class=\"headerlink\" title=\"三、源代码\"></a>三、源代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> task;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> String kind;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Animal</span><span class=\"hljs-params\">()</span>&#123;&#125;;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Animal</span><span class=\"hljs-params\">(String kind)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">this</span>.kind = kind;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;&#125;;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span><br>&#123;<br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cat</span><span class=\"hljs-params\">(String kind)</span><br>        &#123;<br>            <span class=\"hljs-built_in\">super</span>(kind);<br>        &#125;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span> &#123;<br>            System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：喵喵喵~~~&quot;</span>);<br>        &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span><br>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Dog</span><span class=\"hljs-params\">(String kind)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">super</span>(kind);<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：汪汪汪~~~&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Sheep</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span><br>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Sheep</span><span class=\"hljs-params\">(String kind)</span><br>    &#123;<br>        <span class=\"hljs-built_in\">super</span>(kind);<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：咩咩咩~~~&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animaltest</span><br>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span><br>    &#123;<br>        <span class=\"hljs-type\">int</span> []n = &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>&#125;;<br>        Animal [] An = <span class=\"hljs-keyword\">new</span>  <span class=\"hljs-title class_\">Animal</span>[<span class=\"hljs-number\">5</span>];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;An.length; i++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().nextInt(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>);<br>            <span class=\"hljs-keyword\">switch</span> (j) &#123;<br>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:<br>                    An[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cat</span>(<span class=\"hljs-string\">&quot;Tom&quot;</span>+(n[<span class=\"hljs-number\">0</span>]++));<br>                    <span class=\"hljs-keyword\">break</span>;<br>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:<br>                    An[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">&quot;Jerry&quot;</span>+(n[<span class=\"hljs-number\">1</span>]++));<br>                    <span class=\"hljs-keyword\">break</span>;<br>                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:<br>                    An[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Sheep</span>(<span class=\"hljs-string\">&quot;PeiQi&quot;</span>+(n[<span class=\"hljs-number\">2</span>]++));<br>                    <span class=\"hljs-keyword\">break</span>;<br>                <span class=\"hljs-keyword\">default</span>:<br>                    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Invalid number&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (Animal temp : An )<br>        &#123;<br>            temp.cry();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>​                                                                                                                                                <a href=\"https://alleyf.github.io/\">文章已上传博客</a></p>\n"},{"title":"Python_Notes","date":"2022-09-10T02:00:00.000Z","sticky":40,"excerpt":"introducing some package usage of machine_learning.","_content":"\n# math 模块\n\n```python\nimport math\n\nprint(math.ceil(4.1))   #返回数字的上入整数\n\nprint(math.floor(4.9))  #返回数字的下舍整数\n\nprint(math.fabs(-10))   #返回数字的绝对值\n\nprint(math.sqrt(9))     #返回数字的平方根\n\nprint(math.exp(1))      #返回e的x次幂\n\n```\n\n---\n\n# random 模块\n\n```python\nimport random\nran = random.random()#产生0到1直接的浮点数\nprint(ran)\n\n\nprint (\"------- 设置种子 seed -------\")\nrandom.seed(10)\nprint (\"Random number with seed 10 : \", random.random())\n# 生成同一个随机数\nrandom.seed(10)\nprint (\"Random number with seed 10 : \", random.random())\n\n\nran = random.randint(1,20)#生成1到20之间的随机数\nprint(ran)\n```\n\n---\n\n# 字符串\n\n```python\nprint('''I'm going to the movies''')\n#输出结果所见即所得包括所有符号全部打印出来\nhtml = '''\n<HTML><HEAD><TITLE>\nFriends CGI Demo</TI TLE></HEAD>\n<BODY><H3>ERROR</H3>\n<B>%s</B><P>\n<FORM><INPUT TYPE=button VALUE=Back\nONCLICK=\"window.history.back()\"></FORM>\n</BODY></HTML>\n'''\nprint(html)\n```\n\n---\n\n# 列表\n\n```python\n#声明一个空列表\ngirls = []\n\n#append(),末尾追加\ngirls.append('杨超越')\nprint(girls)\n#extend(),一次添加多个。把一个列表添加到另一个列表 ，列表合并。\nmodels = ['刘雯','奚梦瑶']\ngirls.extend(models)\n#girls = girls + models\nprint(girls)\n#insert():指定位置添加\ngirls.insert(1,'虞书欣')\nprint(girls)\n\n#列表删除\nwords = ['cat','hello','pen','pencil','ruler']\ndel words[1]\nwords.remove('cat')#删除指定元素\nwords.pop(1)\nprint(words)\n\n#列表排序\n#默认升序\nnew_list = sorted(random_list)\nprint(new_list)\n#降序\nnew_list = sorted(random_list,reverse =True)\nprint(new_list)\n```\n\n---\n\n# 元组\n\n**注意：元组中只有一个元素时，需要在后面加逗号！**\n\n```python\ntuple3 = ('hello',)\nprint(type(tuple3))\n\n#元组修改\nt1 = (1,2,3)+(4,5)\nt2 = (1,2) * 2\nprint(t1,t2)\n\n#相关方法\nprint(max(random_tuple))\nprint(min(random_tuple))\nprint(sum(random_tuple))\nprint(len(random_tuple))\n#统计元组中4的个数\nprint(random_tuple.count(4))\n#元组中4所对应的下标，如果不存在，则会报错\nprint(random_tuple.index(4))\n\n#元组拆包与装包\n##当元组中元素个数与变量个数一致时\n#定义一个元组\nt3 = (1,2,3)\n#将元组赋值给变量a,b,c\na,b,c = t3\n#打印a,b,c\nprint(a,b,c)\n\n#当元组中元素个数与变量个数不一致时\n#定义一个元组，包含5个元素\nt4 = (1,2,3,4,5)\n#将t4[0],t4[1]分别赋值给a,b;其余的元素装包后赋值给c\na,b,*c = t4\nprint(a,b,c)\nprint(c)\nprint(*c)\n```\n\n---\n\n# 字典\n\n```python\n#list可以转成字典，但前提是列表中元素都要成对出现\ndict3 = dict([('name','杨超越'),('weight',45)])\nprint(dict3)\n\n#字典里的函数 items()  keys() values()\ndict5 = {'杨超越':165,'虞书欣':166,'上官喜爱':164}\nprint(dict5.items())\nfor key,value in dict5.items():\n    if value > 165:\n        print(key)\n        \nnames = dict5.keys()#返回一个类\nprint(names)\nresults = dict5.values()#返回一个类\nprint(results)\n\nprint(dict5.get('赵小棠',170)) #如果能够取到值，则返回字典中的值，否则返回默认值170\n```\n\n---\n\n# JSON\n\n- **json.dumps(obj)将python对象编码成json字符串**\n\n  （可选参数）：\n\n  sort_keys=True表示按照字典排序(a到z)输出。\n\n  indent参数，代表缩进的位数\n\n  separators参数的作用是去掉,和:后面的空格，传输过程中数据越精简越好\n\n  ```python\n  import json\n  data = [ { 'b' : 2, 'd' : 4, 'a' : 1, 'c' : 3, 'e' : 5 } ]\n  json = json.dumps(data, sort_keys=True, indent=4,separators=(',', ':'))\n  print(json)\n  ```\n\n- **json.loads 用于解码JSON数据。该函数返回Python字段的数据类型**\n\n  ```python\n  import json\n  jsonData = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}'\n  text = json.loads(jsonData)  #将string转换为dict\n  print(text)\n  ```\n\n---\n\n# 异常处理\n\n- **try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理**\n- **finally中的内容，退出try时总会执行**\n\n```python\ntry:\n    fh = open(\"filepath\", \"w\")\n    fh.write(\"这是一个测试文件，用于测试异常!!\")\nexcept IOError:\n    print('Error: 没有找到文件或读取文件失败')\nelse:\n    print ('内容写入文件成功')\n    fh.close()\nfinally:\n    print('关闭文件')\n    f.close()\n```\n\n  \n\n","source":"_posts/Python_Notes.md","raw":"---\ntitle: Python_Notes\ntags: python\ncategories: python,program_study\ndate: 2022-9-10 10:00:00\nsticky: 40\nexcerpt: introducing some package usage of machine_learning. \n---\n\n# math 模块\n\n```python\nimport math\n\nprint(math.ceil(4.1))   #返回数字的上入整数\n\nprint(math.floor(4.9))  #返回数字的下舍整数\n\nprint(math.fabs(-10))   #返回数字的绝对值\n\nprint(math.sqrt(9))     #返回数字的平方根\n\nprint(math.exp(1))      #返回e的x次幂\n\n```\n\n---\n\n# random 模块\n\n```python\nimport random\nran = random.random()#产生0到1直接的浮点数\nprint(ran)\n\n\nprint (\"------- 设置种子 seed -------\")\nrandom.seed(10)\nprint (\"Random number with seed 10 : \", random.random())\n# 生成同一个随机数\nrandom.seed(10)\nprint (\"Random number with seed 10 : \", random.random())\n\n\nran = random.randint(1,20)#生成1到20之间的随机数\nprint(ran)\n```\n\n---\n\n# 字符串\n\n```python\nprint('''I'm going to the movies''')\n#输出结果所见即所得包括所有符号全部打印出来\nhtml = '''\n<HTML><HEAD><TITLE>\nFriends CGI Demo</TI TLE></HEAD>\n<BODY><H3>ERROR</H3>\n<B>%s</B><P>\n<FORM><INPUT TYPE=button VALUE=Back\nONCLICK=\"window.history.back()\"></FORM>\n</BODY></HTML>\n'''\nprint(html)\n```\n\n---\n\n# 列表\n\n```python\n#声明一个空列表\ngirls = []\n\n#append(),末尾追加\ngirls.append('杨超越')\nprint(girls)\n#extend(),一次添加多个。把一个列表添加到另一个列表 ，列表合并。\nmodels = ['刘雯','奚梦瑶']\ngirls.extend(models)\n#girls = girls + models\nprint(girls)\n#insert():指定位置添加\ngirls.insert(1,'虞书欣')\nprint(girls)\n\n#列表删除\nwords = ['cat','hello','pen','pencil','ruler']\ndel words[1]\nwords.remove('cat')#删除指定元素\nwords.pop(1)\nprint(words)\n\n#列表排序\n#默认升序\nnew_list = sorted(random_list)\nprint(new_list)\n#降序\nnew_list = sorted(random_list,reverse =True)\nprint(new_list)\n```\n\n---\n\n# 元组\n\n**注意：元组中只有一个元素时，需要在后面加逗号！**\n\n```python\ntuple3 = ('hello',)\nprint(type(tuple3))\n\n#元组修改\nt1 = (1,2,3)+(4,5)\nt2 = (1,2) * 2\nprint(t1,t2)\n\n#相关方法\nprint(max(random_tuple))\nprint(min(random_tuple))\nprint(sum(random_tuple))\nprint(len(random_tuple))\n#统计元组中4的个数\nprint(random_tuple.count(4))\n#元组中4所对应的下标，如果不存在，则会报错\nprint(random_tuple.index(4))\n\n#元组拆包与装包\n##当元组中元素个数与变量个数一致时\n#定义一个元组\nt3 = (1,2,3)\n#将元组赋值给变量a,b,c\na,b,c = t3\n#打印a,b,c\nprint(a,b,c)\n\n#当元组中元素个数与变量个数不一致时\n#定义一个元组，包含5个元素\nt4 = (1,2,3,4,5)\n#将t4[0],t4[1]分别赋值给a,b;其余的元素装包后赋值给c\na,b,*c = t4\nprint(a,b,c)\nprint(c)\nprint(*c)\n```\n\n---\n\n# 字典\n\n```python\n#list可以转成字典，但前提是列表中元素都要成对出现\ndict3 = dict([('name','杨超越'),('weight',45)])\nprint(dict3)\n\n#字典里的函数 items()  keys() values()\ndict5 = {'杨超越':165,'虞书欣':166,'上官喜爱':164}\nprint(dict5.items())\nfor key,value in dict5.items():\n    if value > 165:\n        print(key)\n        \nnames = dict5.keys()#返回一个类\nprint(names)\nresults = dict5.values()#返回一个类\nprint(results)\n\nprint(dict5.get('赵小棠',170)) #如果能够取到值，则返回字典中的值，否则返回默认值170\n```\n\n---\n\n# JSON\n\n- **json.dumps(obj)将python对象编码成json字符串**\n\n  （可选参数）：\n\n  sort_keys=True表示按照字典排序(a到z)输出。\n\n  indent参数，代表缩进的位数\n\n  separators参数的作用是去掉,和:后面的空格，传输过程中数据越精简越好\n\n  ```python\n  import json\n  data = [ { 'b' : 2, 'd' : 4, 'a' : 1, 'c' : 3, 'e' : 5 } ]\n  json = json.dumps(data, sort_keys=True, indent=4,separators=(',', ':'))\n  print(json)\n  ```\n\n- **json.loads 用于解码JSON数据。该函数返回Python字段的数据类型**\n\n  ```python\n  import json\n  jsonData = '{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}'\n  text = json.loads(jsonData)  #将string转换为dict\n  print(text)\n  ```\n\n---\n\n# 异常处理\n\n- **try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理**\n- **finally中的内容，退出try时总会执行**\n\n```python\ntry:\n    fh = open(\"filepath\", \"w\")\n    fh.write(\"这是一个测试文件，用于测试异常!!\")\nexcept IOError:\n    print('Error: 没有找到文件或读取文件失败')\nelse:\n    print ('内容写入文件成功')\n    fh.close()\nfinally:\n    print('关闭文件')\n    f.close()\n```\n\n  \n\n","slug":"Python_Notes","published":1,"updated":"2022-09-10T13:00:51.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lo2ghq000uichz65oh9kd6","content":"<h1 id=\"math-模块\"><a href=\"#math-模块\" class=\"headerlink\" title=\"math 模块\"></a>math 模块</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> math<br><br><span class=\"hljs-built_in\">print</span>(math.ceil(<span class=\"hljs-number\">4.1</span>))   <span class=\"hljs-comment\">#返回数字的上入整数</span><br><br><span class=\"hljs-built_in\">print</span>(math.floor(<span class=\"hljs-number\">4.9</span>))  <span class=\"hljs-comment\">#返回数字的下舍整数</span><br><br><span class=\"hljs-built_in\">print</span>(math.fabs(-<span class=\"hljs-number\">10</span>))   <span class=\"hljs-comment\">#返回数字的绝对值</span><br><br><span class=\"hljs-built_in\">print</span>(math.sqrt(<span class=\"hljs-number\">9</span>))     <span class=\"hljs-comment\">#返回数字的平方根</span><br><br><span class=\"hljs-built_in\">print</span>(math.exp(<span class=\"hljs-number\">1</span>))      <span class=\"hljs-comment\">#返回e的x次幂</span><br><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"random-模块\"><a href=\"#random-模块\" class=\"headerlink\" title=\"random 模块\"></a>random 模块</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> random<br>ran = random.random()<span class=\"hljs-comment\">#产生0到1直接的浮点数</span><br><span class=\"hljs-built_in\">print</span>(ran)<br><br><br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&quot;------- 设置种子 seed -------&quot;</span>)<br>random.seed(<span class=\"hljs-number\">10</span>)<br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&quot;Random number with seed 10 : &quot;</span>, random.random())<br><span class=\"hljs-comment\"># 生成同一个随机数</span><br>random.seed(<span class=\"hljs-number\">10</span>)<br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&quot;Random number with seed 10 : &quot;</span>, random.random())<br><br><br>ran = random.randint(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">20</span>)<span class=\"hljs-comment\">#生成1到20之间的随机数</span><br><span class=\"hljs-built_in\">print</span>(ran)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;&#x27;&#x27;I&#x27;m going to the movies&#x27;&#x27;&#x27;</span>)<br><span class=\"hljs-comment\">#输出结果所见即所得包括所有符号全部打印出来</span><br>html = <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span><br><span class=\"hljs-string\">Friends CGI Demo&lt;/TI TLE&gt;&lt;/HEAD&gt;</span><br><span class=\"hljs-string\">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span><br><span class=\"hljs-string\">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span><br><span class=\"hljs-string\">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span><br><span class=\"hljs-string\">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span><br><span class=\"hljs-string\">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-built_in\">print</span>(html)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#声明一个空列表</span><br>girls = []<br><br><span class=\"hljs-comment\">#append(),末尾追加</span><br>girls.append(<span class=\"hljs-string\">&#x27;杨超越&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(girls)<br><span class=\"hljs-comment\">#extend(),一次添加多个。把一个列表添加到另一个列表 ，列表合并。</span><br>models = [<span class=\"hljs-string\">&#x27;刘雯&#x27;</span>,<span class=\"hljs-string\">&#x27;奚梦瑶&#x27;</span>]<br>girls.extend(models)<br><span class=\"hljs-comment\">#girls = girls + models</span><br><span class=\"hljs-built_in\">print</span>(girls)<br><span class=\"hljs-comment\">#insert():指定位置添加</span><br>girls.insert(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;虞书欣&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(girls)<br><br><span class=\"hljs-comment\">#列表删除</span><br>words = [<span class=\"hljs-string\">&#x27;cat&#x27;</span>,<span class=\"hljs-string\">&#x27;hello&#x27;</span>,<span class=\"hljs-string\">&#x27;pen&#x27;</span>,<span class=\"hljs-string\">&#x27;pencil&#x27;</span>,<span class=\"hljs-string\">&#x27;ruler&#x27;</span>]<br><span class=\"hljs-keyword\">del</span> words[<span class=\"hljs-number\">1</span>]<br>words.remove(<span class=\"hljs-string\">&#x27;cat&#x27;</span>)<span class=\"hljs-comment\">#删除指定元素</span><br>words.pop(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-built_in\">print</span>(words)<br><br><span class=\"hljs-comment\">#列表排序</span><br><span class=\"hljs-comment\">#默认升序</span><br>new_list = <span class=\"hljs-built_in\">sorted</span>(random_list)<br><span class=\"hljs-built_in\">print</span>(new_list)<br><span class=\"hljs-comment\">#降序</span><br>new_list = <span class=\"hljs-built_in\">sorted</span>(random_list,reverse =<span class=\"hljs-literal\">True</span>)<br><span class=\"hljs-built_in\">print</span>(new_list)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h1><p><strong>注意：元组中只有一个元素时，需要在后面加逗号！</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">tuple3 = (<span class=\"hljs-string\">&#x27;hello&#x27;</span>,)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">type</span>(tuple3))<br><br><span class=\"hljs-comment\">#元组修改</span><br>t1 = (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)+(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>)<br>t2 = (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">2</span><br><span class=\"hljs-built_in\">print</span>(t1,t2)<br><br><span class=\"hljs-comment\">#相关方法</span><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">max</span>(random_tuple))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">min</span>(random_tuple))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">sum</span>(random_tuple))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">len</span>(random_tuple))<br><span class=\"hljs-comment\">#统计元组中4的个数</span><br><span class=\"hljs-built_in\">print</span>(random_tuple.count(<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-comment\">#元组中4所对应的下标，如果不存在，则会报错</span><br><span class=\"hljs-built_in\">print</span>(random_tuple.index(<span class=\"hljs-number\">4</span>))<br><br><span class=\"hljs-comment\">#元组拆包与装包</span><br><span class=\"hljs-comment\">##当元组中元素个数与变量个数一致时</span><br><span class=\"hljs-comment\">#定义一个元组</span><br>t3 = (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)<br><span class=\"hljs-comment\">#将元组赋值给变量a,b,c</span><br>a,b,c = t3<br><span class=\"hljs-comment\">#打印a,b,c</span><br><span class=\"hljs-built_in\">print</span>(a,b,c)<br><br><span class=\"hljs-comment\">#当元组中元素个数与变量个数不一致时</span><br><span class=\"hljs-comment\">#定义一个元组，包含5个元素</span><br>t4 = (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>)<br><span class=\"hljs-comment\">#将t4[0],t4[1]分别赋值给a,b;其余的元素装包后赋值给c</span><br>a,b,*c = t4<br><span class=\"hljs-built_in\">print</span>(a,b,c)<br><span class=\"hljs-built_in\">print</span>(c)<br><span class=\"hljs-built_in\">print</span>(*c)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#list可以转成字典，但前提是列表中元素都要成对出现</span><br>dict3 = <span class=\"hljs-built_in\">dict</span>([(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;杨超越&#x27;</span>),(<span class=\"hljs-string\">&#x27;weight&#x27;</span>,<span class=\"hljs-number\">45</span>)])<br><span class=\"hljs-built_in\">print</span>(dict3)<br><br><span class=\"hljs-comment\">#字典里的函数 items()  keys() values()</span><br>dict5 = &#123;<span class=\"hljs-string\">&#x27;杨超越&#x27;</span>:<span class=\"hljs-number\">165</span>,<span class=\"hljs-string\">&#x27;虞书欣&#x27;</span>:<span class=\"hljs-number\">166</span>,<span class=\"hljs-string\">&#x27;上官喜爱&#x27;</span>:<span class=\"hljs-number\">164</span>&#125;<br><span class=\"hljs-built_in\">print</span>(dict5.items())<br><span class=\"hljs-keyword\">for</span> key,value <span class=\"hljs-keyword\">in</span> dict5.items():<br>    <span class=\"hljs-keyword\">if</span> value &gt; <span class=\"hljs-number\">165</span>:<br>        <span class=\"hljs-built_in\">print</span>(key)<br>        <br>names = dict5.keys()<span class=\"hljs-comment\">#返回一个类</span><br><span class=\"hljs-built_in\">print</span>(names)<br>results = dict5.values()<span class=\"hljs-comment\">#返回一个类</span><br><span class=\"hljs-built_in\">print</span>(results)<br><br><span class=\"hljs-built_in\">print</span>(dict5.get(<span class=\"hljs-string\">&#x27;赵小棠&#x27;</span>,<span class=\"hljs-number\">170</span>)) <span class=\"hljs-comment\">#如果能够取到值，则返回字典中的值，否则返回默认值170</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h1><ul>\n<li><p><strong>json.dumps(obj)将python对象编码成json字符串</strong></p>\n<p>（可选参数）：</p>\n<p>sort_keys=True表示按照字典排序(a到z)输出。</p>\n<p>indent参数，代表缩进的位数</p>\n<p>separators参数的作用是去掉,和:后面的空格，传输过程中数据越精简越好</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br>data = [ &#123; <span class=\"hljs-string\">&#x27;b&#x27;</span> : <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span> : <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span> : <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span> : <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span> : <span class=\"hljs-number\">5</span> &#125; ]<br>json = json.dumps(data, sort_keys=<span class=\"hljs-literal\">True</span>, indent=<span class=\"hljs-number\">4</span>,separators=(<span class=\"hljs-string\">&#x27;,&#x27;</span>, <span class=\"hljs-string\">&#x27;:&#x27;</span>))<br><span class=\"hljs-built_in\">print</span>(json)<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>json.loads 用于解码JSON数据。该函数返回Python字段的数据类型</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br>jsonData = <span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&#x27;</span><br>text = json.loads(jsonData)  <span class=\"hljs-comment\">#将string转换为dict</span><br><span class=\"hljs-built_in\">print</span>(text)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><ul>\n<li><strong>try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理</strong></li>\n<li><strong>finally中的内容，退出try时总会执行</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">try</span>:<br>    fh = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;filepath&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>)<br>    fh.write(<span class=\"hljs-string\">&quot;这是一个测试文件，用于测试异常!!&quot;</span>)<br><span class=\"hljs-keyword\">except</span> IOError:<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Error: 没有找到文件或读取文件失败&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    <span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&#x27;内容写入文件成功&#x27;</span>)<br>    fh.close()<br><span class=\"hljs-keyword\">finally</span>:<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;关闭文件&#x27;</span>)<br>    f.close()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":3411,"more":"<h1 id=\"math-模块\"><a href=\"#math-模块\" class=\"headerlink\" title=\"math 模块\"></a>math 模块</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> math<br><br><span class=\"hljs-built_in\">print</span>(math.ceil(<span class=\"hljs-number\">4.1</span>))   <span class=\"hljs-comment\">#返回数字的上入整数</span><br><br><span class=\"hljs-built_in\">print</span>(math.floor(<span class=\"hljs-number\">4.9</span>))  <span class=\"hljs-comment\">#返回数字的下舍整数</span><br><br><span class=\"hljs-built_in\">print</span>(math.fabs(-<span class=\"hljs-number\">10</span>))   <span class=\"hljs-comment\">#返回数字的绝对值</span><br><br><span class=\"hljs-built_in\">print</span>(math.sqrt(<span class=\"hljs-number\">9</span>))     <span class=\"hljs-comment\">#返回数字的平方根</span><br><br><span class=\"hljs-built_in\">print</span>(math.exp(<span class=\"hljs-number\">1</span>))      <span class=\"hljs-comment\">#返回e的x次幂</span><br><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"random-模块\"><a href=\"#random-模块\" class=\"headerlink\" title=\"random 模块\"></a>random 模块</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> random<br>ran = random.random()<span class=\"hljs-comment\">#产生0到1直接的浮点数</span><br><span class=\"hljs-built_in\">print</span>(ran)<br><br><br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&quot;------- 设置种子 seed -------&quot;</span>)<br>random.seed(<span class=\"hljs-number\">10</span>)<br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&quot;Random number with seed 10 : &quot;</span>, random.random())<br><span class=\"hljs-comment\"># 生成同一个随机数</span><br>random.seed(<span class=\"hljs-number\">10</span>)<br><span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&quot;Random number with seed 10 : &quot;</span>, random.random())<br><br><br>ran = random.randint(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">20</span>)<span class=\"hljs-comment\">#生成1到20之间的随机数</span><br><span class=\"hljs-built_in\">print</span>(ran)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;&#x27;&#x27;I&#x27;m going to the movies&#x27;&#x27;&#x27;</span>)<br><span class=\"hljs-comment\">#输出结果所见即所得包括所有符号全部打印出来</span><br>html = <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;</span><br><span class=\"hljs-string\">Friends CGI Demo&lt;/TI TLE&gt;&lt;/HEAD&gt;</span><br><span class=\"hljs-string\">&lt;BODY&gt;&lt;H3&gt;ERROR&lt;/H3&gt;</span><br><span class=\"hljs-string\">&lt;B&gt;%s&lt;/B&gt;&lt;P&gt;</span><br><span class=\"hljs-string\">&lt;FORM&gt;&lt;INPUT TYPE=button VALUE=Back</span><br><span class=\"hljs-string\">ONCLICK=&quot;window.history.back()&quot;&gt;&lt;/FORM&gt;</span><br><span class=\"hljs-string\">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-built_in\">print</span>(html)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#声明一个空列表</span><br>girls = []<br><br><span class=\"hljs-comment\">#append(),末尾追加</span><br>girls.append(<span class=\"hljs-string\">&#x27;杨超越&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(girls)<br><span class=\"hljs-comment\">#extend(),一次添加多个。把一个列表添加到另一个列表 ，列表合并。</span><br>models = [<span class=\"hljs-string\">&#x27;刘雯&#x27;</span>,<span class=\"hljs-string\">&#x27;奚梦瑶&#x27;</span>]<br>girls.extend(models)<br><span class=\"hljs-comment\">#girls = girls + models</span><br><span class=\"hljs-built_in\">print</span>(girls)<br><span class=\"hljs-comment\">#insert():指定位置添加</span><br>girls.insert(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;虞书欣&#x27;</span>)<br><span class=\"hljs-built_in\">print</span>(girls)<br><br><span class=\"hljs-comment\">#列表删除</span><br>words = [<span class=\"hljs-string\">&#x27;cat&#x27;</span>,<span class=\"hljs-string\">&#x27;hello&#x27;</span>,<span class=\"hljs-string\">&#x27;pen&#x27;</span>,<span class=\"hljs-string\">&#x27;pencil&#x27;</span>,<span class=\"hljs-string\">&#x27;ruler&#x27;</span>]<br><span class=\"hljs-keyword\">del</span> words[<span class=\"hljs-number\">1</span>]<br>words.remove(<span class=\"hljs-string\">&#x27;cat&#x27;</span>)<span class=\"hljs-comment\">#删除指定元素</span><br>words.pop(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-built_in\">print</span>(words)<br><br><span class=\"hljs-comment\">#列表排序</span><br><span class=\"hljs-comment\">#默认升序</span><br>new_list = <span class=\"hljs-built_in\">sorted</span>(random_list)<br><span class=\"hljs-built_in\">print</span>(new_list)<br><span class=\"hljs-comment\">#降序</span><br>new_list = <span class=\"hljs-built_in\">sorted</span>(random_list,reverse =<span class=\"hljs-literal\">True</span>)<br><span class=\"hljs-built_in\">print</span>(new_list)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h1><p><strong>注意：元组中只有一个元素时，需要在后面加逗号！</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">tuple3 = (<span class=\"hljs-string\">&#x27;hello&#x27;</span>,)<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">type</span>(tuple3))<br><br><span class=\"hljs-comment\">#元组修改</span><br>t1 = (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)+(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>)<br>t2 = (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">2</span><br><span class=\"hljs-built_in\">print</span>(t1,t2)<br><br><span class=\"hljs-comment\">#相关方法</span><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">max</span>(random_tuple))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">min</span>(random_tuple))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">sum</span>(random_tuple))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">len</span>(random_tuple))<br><span class=\"hljs-comment\">#统计元组中4的个数</span><br><span class=\"hljs-built_in\">print</span>(random_tuple.count(<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-comment\">#元组中4所对应的下标，如果不存在，则会报错</span><br><span class=\"hljs-built_in\">print</span>(random_tuple.index(<span class=\"hljs-number\">4</span>))<br><br><span class=\"hljs-comment\">#元组拆包与装包</span><br><span class=\"hljs-comment\">##当元组中元素个数与变量个数一致时</span><br><span class=\"hljs-comment\">#定义一个元组</span><br>t3 = (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)<br><span class=\"hljs-comment\">#将元组赋值给变量a,b,c</span><br>a,b,c = t3<br><span class=\"hljs-comment\">#打印a,b,c</span><br><span class=\"hljs-built_in\">print</span>(a,b,c)<br><br><span class=\"hljs-comment\">#当元组中元素个数与变量个数不一致时</span><br><span class=\"hljs-comment\">#定义一个元组，包含5个元素</span><br>t4 = (<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>)<br><span class=\"hljs-comment\">#将t4[0],t4[1]分别赋值给a,b;其余的元素装包后赋值给c</span><br>a,b,*c = t4<br><span class=\"hljs-built_in\">print</span>(a,b,c)<br><span class=\"hljs-built_in\">print</span>(c)<br><span class=\"hljs-built_in\">print</span>(*c)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#list可以转成字典，但前提是列表中元素都要成对出现</span><br>dict3 = <span class=\"hljs-built_in\">dict</span>([(<span class=\"hljs-string\">&#x27;name&#x27;</span>,<span class=\"hljs-string\">&#x27;杨超越&#x27;</span>),(<span class=\"hljs-string\">&#x27;weight&#x27;</span>,<span class=\"hljs-number\">45</span>)])<br><span class=\"hljs-built_in\">print</span>(dict3)<br><br><span class=\"hljs-comment\">#字典里的函数 items()  keys() values()</span><br>dict5 = &#123;<span class=\"hljs-string\">&#x27;杨超越&#x27;</span>:<span class=\"hljs-number\">165</span>,<span class=\"hljs-string\">&#x27;虞书欣&#x27;</span>:<span class=\"hljs-number\">166</span>,<span class=\"hljs-string\">&#x27;上官喜爱&#x27;</span>:<span class=\"hljs-number\">164</span>&#125;<br><span class=\"hljs-built_in\">print</span>(dict5.items())<br><span class=\"hljs-keyword\">for</span> key,value <span class=\"hljs-keyword\">in</span> dict5.items():<br>    <span class=\"hljs-keyword\">if</span> value &gt; <span class=\"hljs-number\">165</span>:<br>        <span class=\"hljs-built_in\">print</span>(key)<br>        <br>names = dict5.keys()<span class=\"hljs-comment\">#返回一个类</span><br><span class=\"hljs-built_in\">print</span>(names)<br>results = dict5.values()<span class=\"hljs-comment\">#返回一个类</span><br><span class=\"hljs-built_in\">print</span>(results)<br><br><span class=\"hljs-built_in\">print</span>(dict5.get(<span class=\"hljs-string\">&#x27;赵小棠&#x27;</span>,<span class=\"hljs-number\">170</span>)) <span class=\"hljs-comment\">#如果能够取到值，则返回字典中的值，否则返回默认值170</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h1><ul>\n<li><p><strong>json.dumps(obj)将python对象编码成json字符串</strong></p>\n<p>（可选参数）：</p>\n<p>sort_keys=True表示按照字典排序(a到z)输出。</p>\n<p>indent参数，代表缩进的位数</p>\n<p>separators参数的作用是去掉,和:后面的空格，传输过程中数据越精简越好</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br>data = [ &#123; <span class=\"hljs-string\">&#x27;b&#x27;</span> : <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span> : <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span> : <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span> : <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span> : <span class=\"hljs-number\">5</span> &#125; ]<br>json = json.dumps(data, sort_keys=<span class=\"hljs-literal\">True</span>, indent=<span class=\"hljs-number\">4</span>,separators=(<span class=\"hljs-string\">&#x27;,&#x27;</span>, <span class=\"hljs-string\">&#x27;:&#x27;</span>))<br><span class=\"hljs-built_in\">print</span>(json)<br></code></pre></td></tr></table></figure></li>\n<li><p><strong>json.loads 用于解码JSON数据。该函数返回Python字段的数据类型</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> json<br>jsonData = <span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&#x27;</span><br>text = json.loads(jsonData)  <span class=\"hljs-comment\">#将string转换为dict</span><br><span class=\"hljs-built_in\">print</span>(text)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><ul>\n<li><strong>try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理</strong></li>\n<li><strong>finally中的内容，退出try时总会执行</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">try</span>:<br>    fh = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;filepath&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>)<br>    fh.write(<span class=\"hljs-string\">&quot;这是一个测试文件，用于测试异常!!&quot;</span>)<br><span class=\"hljs-keyword\">except</span> IOError:<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Error: 没有找到文件或读取文件失败&#x27;</span>)<br><span class=\"hljs-keyword\">else</span>:<br>    <span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">&#x27;内容写入文件成功&#x27;</span>)<br>    fh.close()<br><span class=\"hljs-keyword\">finally</span>:<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;关闭文件&#x27;</span>)<br>    f.close()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"NoteBook_notes","date":"2022-09-10T02:00:00.000Z","sticky":65,"excerpt":"a lot of notes dealing with notebook","_content":"\n# NoteBook\n\n## 1.notebook快捷键\n\n### 命令模式快捷键\n\n<img src=\"https://ai-studio-static-online.cdn.bcebos.com/3a9f826518cb42e89965641e4eea9a289dbcce74862e4335ba8738d978e37fc2\" alt=\"img\" style=\"zoom: 50%;\" />\n\n### 编辑模式快捷键\n\n<img src=\"https://ai-studio-static-online.cdn.bcebos.com/968cf800086a47129fdda653891c170a1c9b1248296747aeaa766bb5cef2932c\" alt=\"img\" style=\"zoom: 50%;\" />\n\n## 2.持久化安装（安装到外部库文件夹）\n\n```shell\n#创建文件夹\nmkdir /home/aistudio/external-libraries \n#安装BeautifulSoup4包到外部库\npip install beautifulsoup4 -t /home/aistudio/external-libraries\n```\n\n```shell\n#添加环境变量\nimport sys\nsys.path.append('/home/aistudio/external-libraries')\n```\n\n## 3.Magic命令\n\n```python\n#显示全部可用的Magic命令\n%lsmagic\n#%env：设置环境变量\n%env OMP_NUM_THREADS=4\n#使用Magic命令来统计运行时长\nimport random\n\n%%timeit\n\nprize = 0 \nfor i in range(100):\n    roll = random.randint(1, 6)\n    if roll%2 == 0:\n        prize += roll\n    else:\n        prize -= 1\n```\n\n```python\n#直接嵌入可视化内容\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0,1,300)\nfor w in range (2,6,2):\n    plt.plot(x, np.sin(np.pi*x)*np.sin(2*w*np.pi*x))\n```\n\n```python\n#%run或者二!python均可执行指定路径的python文件\n%run print.py\n!python print.py\n```\n\n```python\n#%%writefile and %pycat: 导出cell内容/显示外部脚本的内容\n%pycat SaveToPythonCode.py #将文件打开展示在cell中\n%%writefile SaveToPythonCode.py #重写文件为cell中的内容并保存\n\nfrom math import sqrt\nfor i in range(2,10):\n    flag=1\n    k=int(sqrt(i))\n    for j in range(2,k+1):\n        if i%j==0:\n            flag=0\n        break\n        if(flag):\n            print(i)\n```\n\n```python\n#PDB调试代码\n#Notebook自带一个调试器, 叫The Python Debugger (pdb)，我们来看看它是如何工作的\n%pdb\n\ndef reverse(x: int) -> int:\n    inputnumber = x.__str__()\n    reversedStr = inputnumber[::-1]\n    strOriLen = len(reversedStr)\n    result = list()\n    flag = 1\n    for i in range(0, strOriLen):\n        if i == (strOriLen -1) and reversedStr[i] == '-' :\n            flag = -1\n        else:\n            result.append(reversedStr[i])\n    outputs = ''.join(result)\n    outputInt = int(outputs)        \n     \n    outputInt = outputInt * flag\n        \n    if outputInt > pow(2,31)-1  or outputInt < -1 * pow(2,31):\n        outputInt = 0\n        \n    return outputInt\n\nprint(reverse(134))\n```\n\n## PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）\n\n- **pdb.set_trace():设置断点**\n\n- **n（next）:执行下一步**\n- **p（print）data :打印data**\n- **l（ls）：显示当前代码**\n- **q（quit）：强制中断退出**\n- **b（break）LineNumber：调试中给指定位置设置断点**\n- **variable = value:动态分配变量**\n- **c（continue）：继续运行至结束**\n- **r（return）：运行至子程序结束**\n- **a（args）：打印当前函数参数**\n- **ENTER（回车）：重复上次命令**\n\n","source":"_posts/NoteBook.md","raw":"---\ntitle: NoteBook_notes\ntags: [NoteBook]\ncategories: PaddleIDE\ndate: 2022-9-10 10:00:00\nsticky: 65\nexcerpt: a lot of notes dealing with notebook\n---\n\n# NoteBook\n\n## 1.notebook快捷键\n\n### 命令模式快捷键\n\n<img src=\"https://ai-studio-static-online.cdn.bcebos.com/3a9f826518cb42e89965641e4eea9a289dbcce74862e4335ba8738d978e37fc2\" alt=\"img\" style=\"zoom: 50%;\" />\n\n### 编辑模式快捷键\n\n<img src=\"https://ai-studio-static-online.cdn.bcebos.com/968cf800086a47129fdda653891c170a1c9b1248296747aeaa766bb5cef2932c\" alt=\"img\" style=\"zoom: 50%;\" />\n\n## 2.持久化安装（安装到外部库文件夹）\n\n```shell\n#创建文件夹\nmkdir /home/aistudio/external-libraries \n#安装BeautifulSoup4包到外部库\npip install beautifulsoup4 -t /home/aistudio/external-libraries\n```\n\n```shell\n#添加环境变量\nimport sys\nsys.path.append('/home/aistudio/external-libraries')\n```\n\n## 3.Magic命令\n\n```python\n#显示全部可用的Magic命令\n%lsmagic\n#%env：设置环境变量\n%env OMP_NUM_THREADS=4\n#使用Magic命令来统计运行时长\nimport random\n\n%%timeit\n\nprize = 0 \nfor i in range(100):\n    roll = random.randint(1, 6)\n    if roll%2 == 0:\n        prize += roll\n    else:\n        prize -= 1\n```\n\n```python\n#直接嵌入可视化内容\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0,1,300)\nfor w in range (2,6,2):\n    plt.plot(x, np.sin(np.pi*x)*np.sin(2*w*np.pi*x))\n```\n\n```python\n#%run或者二!python均可执行指定路径的python文件\n%run print.py\n!python print.py\n```\n\n```python\n#%%writefile and %pycat: 导出cell内容/显示外部脚本的内容\n%pycat SaveToPythonCode.py #将文件打开展示在cell中\n%%writefile SaveToPythonCode.py #重写文件为cell中的内容并保存\n\nfrom math import sqrt\nfor i in range(2,10):\n    flag=1\n    k=int(sqrt(i))\n    for j in range(2,k+1):\n        if i%j==0:\n            flag=0\n        break\n        if(flag):\n            print(i)\n```\n\n```python\n#PDB调试代码\n#Notebook自带一个调试器, 叫The Python Debugger (pdb)，我们来看看它是如何工作的\n%pdb\n\ndef reverse(x: int) -> int:\n    inputnumber = x.__str__()\n    reversedStr = inputnumber[::-1]\n    strOriLen = len(reversedStr)\n    result = list()\n    flag = 1\n    for i in range(0, strOriLen):\n        if i == (strOriLen -1) and reversedStr[i] == '-' :\n            flag = -1\n        else:\n            result.append(reversedStr[i])\n    outputs = ''.join(result)\n    outputInt = int(outputs)        \n     \n    outputInt = outputInt * flag\n        \n    if outputInt > pow(2,31)-1  or outputInt < -1 * pow(2,31):\n        outputInt = 0\n        \n    return outputInt\n\nprint(reverse(134))\n```\n\n## PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）\n\n- **pdb.set_trace():设置断点**\n\n- **n（next）:执行下一步**\n- **p（print）data :打印data**\n- **l（ls）：显示当前代码**\n- **q（quit）：强制中断退出**\n- **b（break）LineNumber：调试中给指定位置设置断点**\n- **variable = value:动态分配变量**\n- **c（continue）：继续运行至结束**\n- **r（return）：运行至子程序结束**\n- **a（args）：打印当前函数参数**\n- **ENTER（回车）：重复上次命令**\n\n","slug":"NoteBook","published":1,"updated":"2022-09-10T13:00:39.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lo2ghr000wichz2hy27qf6","content":"<h1 id=\"NoteBook\"><a href=\"#NoteBook\" class=\"headerlink\" title=\"NoteBook\"></a>NoteBook</h1><h2 id=\"1-notebook快捷键\"><a href=\"#1-notebook快捷键\" class=\"headerlink\" title=\"1.notebook快捷键\"></a>1.notebook快捷键</h2><h3 id=\"命令模式快捷键\"><a href=\"#命令模式快捷键\" class=\"headerlink\" title=\"命令模式快捷键\"></a>命令模式快捷键</h3><img src=\"https://ai-studio-static-online.cdn.bcebos.com/3a9f826518cb42e89965641e4eea9a289dbcce74862e4335ba8738d978e37fc2\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<h3 id=\"编辑模式快捷键\"><a href=\"#编辑模式快捷键\" class=\"headerlink\" title=\"编辑模式快捷键\"></a>编辑模式快捷键</h3><img src=\"https://ai-studio-static-online.cdn.bcebos.com/968cf800086a47129fdda653891c170a1c9b1248296747aeaa766bb5cef2932c\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<h2 id=\"2-持久化安装（安装到外部库文件夹）\"><a href=\"#2-持久化安装（安装到外部库文件夹）\" class=\"headerlink\" title=\"2.持久化安装（安装到外部库文件夹）\"></a>2.持久化安装（安装到外部库文件夹）</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">创建文件夹</span><br>mkdir /home/aistudio/external-libraries <br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装BeautifulSoup4包到外部库</span><br>pip install beautifulsoup4 -t /home/aistudio/external-libraries<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">添加环境变量</span><br>import sys<br>sys.path.append(&#x27;/home/aistudio/external-libraries&#x27;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-Magic命令\"><a href=\"#3-Magic命令\" class=\"headerlink\" title=\"3.Magic命令\"></a>3.Magic命令</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#显示全部可用的Magic命令</span><br>%lsmagic<br><span class=\"hljs-comment\">#%env：设置环境变量</span><br>%env OMP_NUM_THREADS=<span class=\"hljs-number\">4</span><br><span class=\"hljs-comment\">#使用Magic命令来统计运行时长</span><br><span class=\"hljs-keyword\">import</span> random<br><br>%%timeit<br><br>prize = <span class=\"hljs-number\">0</span> <br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">100</span>):<br>    roll = random.randint(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>)<br>    <span class=\"hljs-keyword\">if</span> roll%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:<br>        prize += roll<br>    <span class=\"hljs-keyword\">else</span>:<br>        prize -= <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#直接嵌入可视化内容</span><br>%matplotlib inline<br>%config InlineBackend.figure_format = <span class=\"hljs-string\">&#x27;retina&#x27;</span><br><br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>x = np.linspace(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">300</span>)<br><span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span> (<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>):<br>    plt.plot(x, np.sin(np.pi*x)*np.sin(<span class=\"hljs-number\">2</span>*w*np.pi*x))<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#%run或者二!python均可执行指定路径的python文件</span><br>%run <span class=\"hljs-built_in\">print</span>.py<br>!python <span class=\"hljs-built_in\">print</span>.py<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#%%writefile and %pycat: 导出cell内容/显示外部脚本的内容</span><br>%pycat SaveToPythonCode.py <span class=\"hljs-comment\">#将文件打开展示在cell中</span><br>%%writefile SaveToPythonCode.py <span class=\"hljs-comment\">#重写文件为cell中的内容并保存</span><br><br><span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sqrt<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>):<br>    flag=<span class=\"hljs-number\">1</span><br>    k=<span class=\"hljs-built_in\">int</span>(sqrt(i))<br>    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>,k+<span class=\"hljs-number\">1</span>):<br>        <span class=\"hljs-keyword\">if</span> i%j==<span class=\"hljs-number\">0</span>:<br>            flag=<span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">break</span><br>        <span class=\"hljs-keyword\">if</span>(flag):<br>            <span class=\"hljs-built_in\">print</span>(i)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#PDB调试代码</span><br><span class=\"hljs-comment\">#Notebook自带一个调试器, 叫The Python Debugger (pdb)，我们来看看它是如何工作的</span><br>%pdb<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reverse</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:<br>    inputnumber = x.__str__()<br>    reversedStr = inputnumber[::-<span class=\"hljs-number\">1</span>]<br>    strOriLen = <span class=\"hljs-built_in\">len</span>(reversedStr)<br>    result = <span class=\"hljs-built_in\">list</span>()<br>    flag = <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, strOriLen):<br>        <span class=\"hljs-keyword\">if</span> i == (strOriLen -<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">and</span> reversedStr[i] == <span class=\"hljs-string\">&#x27;-&#x27;</span> :<br>            flag = -<span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            result.append(reversedStr[i])<br>    outputs = <span class=\"hljs-string\">&#x27;&#x27;</span>.join(result)<br>    outputInt = <span class=\"hljs-built_in\">int</span>(outputs)        <br>     <br>    outputInt = outputInt * flag<br>        <br>    <span class=\"hljs-keyword\">if</span> outputInt &gt; <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>)-<span class=\"hljs-number\">1</span>  <span class=\"hljs-keyword\">or</span> outputInt &lt; -<span class=\"hljs-number\">1</span> * <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>):<br>        outputInt = <span class=\"hljs-number\">0</span><br>        <br>    <span class=\"hljs-keyword\">return</span> outputInt<br><br><span class=\"hljs-built_in\">print</span>(reverse(<span class=\"hljs-number\">134</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"PDB命令（python3-7及以上自带的调试器，ipdb为彩色的交互）\"><a href=\"#PDB命令（python3-7及以上自带的调试器，ipdb为彩色的交互）\" class=\"headerlink\" title=\"PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）\"></a>PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）</h2><ul>\n<li><p><strong>pdb.set_trace():设置断点</strong></p>\n</li>\n<li><p><strong>n（next）:执行下一步</strong></p>\n</li>\n<li><p><strong>p（print）data :打印data</strong></p>\n</li>\n<li><p><strong>l（ls）：显示当前代码</strong></p>\n</li>\n<li><p><strong>q（quit）：强制中断退出</strong></p>\n</li>\n<li><p><strong>b（break）LineNumber：调试中给指定位置设置断点</strong></p>\n</li>\n<li><p><strong>variable = value:动态分配变量</strong></p>\n</li>\n<li><p><strong>c（continue）：继续运行至结束</strong></p>\n</li>\n<li><p><strong>r（return）：运行至子程序结束</strong></p>\n</li>\n<li><p><strong>a（args）：打印当前函数参数</strong></p>\n</li>\n<li><p><strong>ENTER（回车）：重复上次命令</strong></p>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":1774,"more":"<h1 id=\"NoteBook\"><a href=\"#NoteBook\" class=\"headerlink\" title=\"NoteBook\"></a>NoteBook</h1><h2 id=\"1-notebook快捷键\"><a href=\"#1-notebook快捷键\" class=\"headerlink\" title=\"1.notebook快捷键\"></a>1.notebook快捷键</h2><h3 id=\"命令模式快捷键\"><a href=\"#命令模式快捷键\" class=\"headerlink\" title=\"命令模式快捷键\"></a>命令模式快捷键</h3><img src=\"https://ai-studio-static-online.cdn.bcebos.com/3a9f826518cb42e89965641e4eea9a289dbcce74862e4335ba8738d978e37fc2\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<h3 id=\"编辑模式快捷键\"><a href=\"#编辑模式快捷键\" class=\"headerlink\" title=\"编辑模式快捷键\"></a>编辑模式快捷键</h3><img src=\"https://ai-studio-static-online.cdn.bcebos.com/968cf800086a47129fdda653891c170a1c9b1248296747aeaa766bb5cef2932c\" alt=\"img\" style=\"zoom: 50%;\" />\n\n<h2 id=\"2-持久化安装（安装到外部库文件夹）\"><a href=\"#2-持久化安装（安装到外部库文件夹）\" class=\"headerlink\" title=\"2.持久化安装（安装到外部库文件夹）\"></a>2.持久化安装（安装到外部库文件夹）</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">创建文件夹</span><br>mkdir /home/aistudio/external-libraries <br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装BeautifulSoup4包到外部库</span><br>pip install beautifulsoup4 -t /home/aistudio/external-libraries<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">添加环境变量</span><br>import sys<br>sys.path.append(&#x27;/home/aistudio/external-libraries&#x27;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-Magic命令\"><a href=\"#3-Magic命令\" class=\"headerlink\" title=\"3.Magic命令\"></a>3.Magic命令</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#显示全部可用的Magic命令</span><br>%lsmagic<br><span class=\"hljs-comment\">#%env：设置环境变量</span><br>%env OMP_NUM_THREADS=<span class=\"hljs-number\">4</span><br><span class=\"hljs-comment\">#使用Magic命令来统计运行时长</span><br><span class=\"hljs-keyword\">import</span> random<br><br>%%timeit<br><br>prize = <span class=\"hljs-number\">0</span> <br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">100</span>):<br>    roll = random.randint(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>)<br>    <span class=\"hljs-keyword\">if</span> roll%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:<br>        prize += roll<br>    <span class=\"hljs-keyword\">else</span>:<br>        prize -= <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#直接嵌入可视化内容</span><br>%matplotlib inline<br>%config InlineBackend.figure_format = <span class=\"hljs-string\">&#x27;retina&#x27;</span><br><br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>x = np.linspace(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">300</span>)<br><span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span> (<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>):<br>    plt.plot(x, np.sin(np.pi*x)*np.sin(<span class=\"hljs-number\">2</span>*w*np.pi*x))<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#%run或者二!python均可执行指定路径的python文件</span><br>%run <span class=\"hljs-built_in\">print</span>.py<br>!python <span class=\"hljs-built_in\">print</span>.py<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#%%writefile and %pycat: 导出cell内容/显示外部脚本的内容</span><br>%pycat SaveToPythonCode.py <span class=\"hljs-comment\">#将文件打开展示在cell中</span><br>%%writefile SaveToPythonCode.py <span class=\"hljs-comment\">#重写文件为cell中的内容并保存</span><br><br><span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sqrt<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">10</span>):<br>    flag=<span class=\"hljs-number\">1</span><br>    k=<span class=\"hljs-built_in\">int</span>(sqrt(i))<br>    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>,k+<span class=\"hljs-number\">1</span>):<br>        <span class=\"hljs-keyword\">if</span> i%j==<span class=\"hljs-number\">0</span>:<br>            flag=<span class=\"hljs-number\">0</span><br>        <span class=\"hljs-keyword\">break</span><br>        <span class=\"hljs-keyword\">if</span>(flag):<br>            <span class=\"hljs-built_in\">print</span>(i)<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#PDB调试代码</span><br><span class=\"hljs-comment\">#Notebook自带一个调试器, 叫The Python Debugger (pdb)，我们来看看它是如何工作的</span><br>%pdb<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reverse</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:<br>    inputnumber = x.__str__()<br>    reversedStr = inputnumber[::-<span class=\"hljs-number\">1</span>]<br>    strOriLen = <span class=\"hljs-built_in\">len</span>(reversedStr)<br>    result = <span class=\"hljs-built_in\">list</span>()<br>    flag = <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, strOriLen):<br>        <span class=\"hljs-keyword\">if</span> i == (strOriLen -<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">and</span> reversedStr[i] == <span class=\"hljs-string\">&#x27;-&#x27;</span> :<br>            flag = -<span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            result.append(reversedStr[i])<br>    outputs = <span class=\"hljs-string\">&#x27;&#x27;</span>.join(result)<br>    outputInt = <span class=\"hljs-built_in\">int</span>(outputs)        <br>     <br>    outputInt = outputInt * flag<br>        <br>    <span class=\"hljs-keyword\">if</span> outputInt &gt; <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>)-<span class=\"hljs-number\">1</span>  <span class=\"hljs-keyword\">or</span> outputInt &lt; -<span class=\"hljs-number\">1</span> * <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">31</span>):<br>        outputInt = <span class=\"hljs-number\">0</span><br>        <br>    <span class=\"hljs-keyword\">return</span> outputInt<br><br><span class=\"hljs-built_in\">print</span>(reverse(<span class=\"hljs-number\">134</span>))<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"PDB命令（python3-7及以上自带的调试器，ipdb为彩色的交互）\"><a href=\"#PDB命令（python3-7及以上自带的调试器，ipdb为彩色的交互）\" class=\"headerlink\" title=\"PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）\"></a>PDB命令（python3.7及以上自带的调试器，ipdb为彩色的交互）</h2><ul>\n<li><p><strong>pdb.set_trace():设置断点</strong></p>\n</li>\n<li><p><strong>n（next）:执行下一步</strong></p>\n</li>\n<li><p><strong>p（print）data :打印data</strong></p>\n</li>\n<li><p><strong>l（ls）：显示当前代码</strong></p>\n</li>\n<li><p><strong>q（quit）：强制中断退出</strong></p>\n</li>\n<li><p><strong>b（break）LineNumber：调试中给指定位置设置断点</strong></p>\n</li>\n<li><p><strong>variable = value:动态分配变量</strong></p>\n</li>\n<li><p><strong>c（continue）：继续运行至结束</strong></p>\n</li>\n<li><p><strong>r（return）：运行至子程序结束</strong></p>\n</li>\n<li><p><strong>a（args）：打印当前函数参数</strong></p>\n</li>\n<li><p><strong>ENTER（回车）：重复上次命令</strong></p>\n</li>\n</ul>\n"},{"title":"QuartusIIUsage","date":"2022-09-23T04:00:00.000Z","sticky":55,"excerpt":"a lot of notes dealing with usage of QuartusII","_content":"\n#  The Usage of QuartusII And ModelSim\n\n## 习题3.1\n\n### 问题描述\n\n基于 Quartus Prime 软件，采用原理图设计方式用 D 触发器设计一个 2 分频电路；在此基础上， 设计一个 4 分频和 8 分频电路并进行仿真。（参考设计如图 3.67 所示）\n\n![](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924165154538.png)\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t图 3.67 2 分频电路\n\n### 电路原理图设计\n\n#### 四分频原理图\n\n![TwoDivF](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/TwoDivF.png)\n\n#### 八分频原理图\n\n![EightDivf](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDivf.png)\n\n### ModelSim仿真结果\n\n#### 四分频波形图\n\n![FourDiv](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/FourDiv.png)\n\n#### 八分频波形图\n\n![EightDiv](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDiv.png)\n\n### 结果分析\n\n首先在QuartusII中绘出原理图，编译后然后生成testbench测试文件，将两者关联后，再次编译，然后联合ModelSim进行波形<u>门级仿真</u>，四分频电路由两个二分频电路<u>级联</u>得到，而八分频电路由三个二分频电路得到；观察波形仿真结果发现四分频和八分频分别将输入的矩形波进行了<u>四分频和八分频</u>，结果与理论一致，但是输出的不是随输入瞬时变化，而是有一小段<u>延时</u>，这是由于门级水平仿真下<u>各逻辑门存在一定的延时</u>导致的。\n\n## 习题3.6\n\n### 问题描述\n\n基于 Quartus Prime，用 74194（4 位双向移位寄存器）设计一个 00011101 序列产生器电路，进 行编译和仿真，查看仿真结果。 参考设计：图 3.72 是序列产生器原理图，序列产生器采用 74194 和 74153（双 4 选 1 数据选择器） 构成。\n\n![image-20220924170739029](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924170739029.png)\n\n​\t\t\t\t\t\t\t\t图 3.72 00011101 序列产生器原理图\n\n### 电路原理图设计\n\n![SeqGn](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeqGn.png)\n\n### ModelSim仿真结果\n\n![SeGn](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeGn.png)\n\n### 结果分析\n\n观察仿真结果波形发现输出为周期变化的**00011101序列**，实验结果与预期一致，实现了题目所要求的功能。\n\n## 习题3.12\n\n### 问题描述\n\n设计消抖动电路，并对其功能进行仿真。 参考设计：由 4 个触发器和一个 4 输入与门构成的消抖动电路如图 3.73 所示，消抖动电路实质上就是 一个信号过滤器，能够将信号中的毛刺、抖动等都滤除掉，图 3.74 是其仿真波形，从波形可看出，输出信 号实现了消抖动，同时可以发现如下特点：\n\n- 输出脉宽变小了，它只等于 CLK 的一个周期的宽度。  \n- CLK 的频率不能太低，应至少有 4 个上升沿包含在正常信号脉冲中；CLK 的频率也不能太高，其 周期不能太多地小于干扰或者抖动信号的脉宽。\n- 增加 D 触发器的数量，可以改善消抖动效果。\n\n![image-20220924171445232](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924171445232.png)\n\n### 电路原理图设计\n\n![EnShake](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EnShake.png)\n\n### ModelSim仿真结果\n\n![EmShake](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EmShake.png)\n\n### 结果分析\n\n将输入和输出对比发现，输出没有了输入的**抖动、毛刺**，消除了这些短暂的脉冲，将其过滤掉了，说明该电路有效地实现了消除抖动的功能，与预期相一致。\n","source":"_posts/QuartusUsage.md","raw":"---\ntitle: QuartusIIUsage\ntags: [QuartusII]\ncategories: QuartusII\ndate: 2022-9-23 12:00:00\nsticky: 55\nexcerpt: a lot of notes dealing with usage of QuartusII\n---\n\n#  The Usage of QuartusII And ModelSim\n\n## 习题3.1\n\n### 问题描述\n\n基于 Quartus Prime 软件，采用原理图设计方式用 D 触发器设计一个 2 分频电路；在此基础上， 设计一个 4 分频和 8 分频电路并进行仿真。（参考设计如图 3.67 所示）\n\n![](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924165154538.png)\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t图 3.67 2 分频电路\n\n### 电路原理图设计\n\n#### 四分频原理图\n\n![TwoDivF](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/TwoDivF.png)\n\n#### 八分频原理图\n\n![EightDivf](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDivf.png)\n\n### ModelSim仿真结果\n\n#### 四分频波形图\n\n![FourDiv](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/FourDiv.png)\n\n#### 八分频波形图\n\n![EightDiv](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDiv.png)\n\n### 结果分析\n\n首先在QuartusII中绘出原理图，编译后然后生成testbench测试文件，将两者关联后，再次编译，然后联合ModelSim进行波形<u>门级仿真</u>，四分频电路由两个二分频电路<u>级联</u>得到，而八分频电路由三个二分频电路得到；观察波形仿真结果发现四分频和八分频分别将输入的矩形波进行了<u>四分频和八分频</u>，结果与理论一致，但是输出的不是随输入瞬时变化，而是有一小段<u>延时</u>，这是由于门级水平仿真下<u>各逻辑门存在一定的延时</u>导致的。\n\n## 习题3.6\n\n### 问题描述\n\n基于 Quartus Prime，用 74194（4 位双向移位寄存器）设计一个 00011101 序列产生器电路，进 行编译和仿真，查看仿真结果。 参考设计：图 3.72 是序列产生器原理图，序列产生器采用 74194 和 74153（双 4 选 1 数据选择器） 构成。\n\n![image-20220924170739029](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924170739029.png)\n\n​\t\t\t\t\t\t\t\t图 3.72 00011101 序列产生器原理图\n\n### 电路原理图设计\n\n![SeqGn](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeqGn.png)\n\n### ModelSim仿真结果\n\n![SeGn](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeGn.png)\n\n### 结果分析\n\n观察仿真结果波形发现输出为周期变化的**00011101序列**，实验结果与预期一致，实现了题目所要求的功能。\n\n## 习题3.12\n\n### 问题描述\n\n设计消抖动电路，并对其功能进行仿真。 参考设计：由 4 个触发器和一个 4 输入与门构成的消抖动电路如图 3.73 所示，消抖动电路实质上就是 一个信号过滤器，能够将信号中的毛刺、抖动等都滤除掉，图 3.74 是其仿真波形，从波形可看出，输出信 号实现了消抖动，同时可以发现如下特点：\n\n- 输出脉宽变小了，它只等于 CLK 的一个周期的宽度。  \n- CLK 的频率不能太低，应至少有 4 个上升沿包含在正常信号脉冲中；CLK 的频率也不能太高，其 周期不能太多地小于干扰或者抖动信号的脉宽。\n- 增加 D 触发器的数量，可以改善消抖动效果。\n\n![image-20220924171445232](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924171445232.png)\n\n### 电路原理图设计\n\n![EnShake](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EnShake.png)\n\n### ModelSim仿真结果\n\n![EmShake](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EmShake.png)\n\n### 结果分析\n\n将输入和输出对比发现，输出没有了输入的**抖动、毛刺**，消除了这些短暂的脉冲，将其过滤掉了，说明该电路有效地实现了消除抖动的功能，与预期相一致。\n","slug":"QuartusUsage","published":1,"updated":"2022-09-24T09:21:59.492Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lo2ghs000zichzd2uucw3g","content":"<h1 id=\"The-Usage-of-QuartusII-And-ModelSim\"><a href=\"#The-Usage-of-QuartusII-And-ModelSim\" class=\"headerlink\" title=\"The Usage of QuartusII And ModelSim\"></a>The Usage of QuartusII And ModelSim</h1><h2 id=\"习题3-1\"><a href=\"#习题3-1\" class=\"headerlink\" title=\"习题3.1\"></a>习题3.1</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>基于 Quartus Prime 软件，采用原理图设计方式用 D 触发器设计一个 2 分频电路；在此基础上， 设计一个 4 分频和 8 分频电路并进行仿真。（参考设计如图 3.67 所示）</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924165154538.png\"></p>\n<p>​                                                        图 3.67 2 分频电路</p>\n<h3 id=\"电路原理图设计\"><a href=\"#电路原理图设计\" class=\"headerlink\" title=\"电路原理图设计\"></a>电路原理图设计</h3><h4 id=\"四分频原理图\"><a href=\"#四分频原理图\" class=\"headerlink\" title=\"四分频原理图\"></a>四分频原理图</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/TwoDivF.png\" alt=\"TwoDivF\"></p>\n<h4 id=\"八分频原理图\"><a href=\"#八分频原理图\" class=\"headerlink\" title=\"八分频原理图\"></a>八分频原理图</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDivf.png\" alt=\"EightDivf\"></p>\n<h3 id=\"ModelSim仿真结果\"><a href=\"#ModelSim仿真结果\" class=\"headerlink\" title=\"ModelSim仿真结果\"></a>ModelSim仿真结果</h3><h4 id=\"四分频波形图\"><a href=\"#四分频波形图\" class=\"headerlink\" title=\"四分频波形图\"></a>四分频波形图</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/FourDiv.png\" alt=\"FourDiv\"></p>\n<h4 id=\"八分频波形图\"><a href=\"#八分频波形图\" class=\"headerlink\" title=\"八分频波形图\"></a>八分频波形图</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDiv.png\" alt=\"EightDiv\"></p>\n<h3 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><p>首先在QuartusII中绘出原理图，编译后然后生成testbench测试文件，将两者关联后，再次编译，然后联合ModelSim进行波形<u>门级仿真</u>，四分频电路由两个二分频电路<u>级联</u>得到，而八分频电路由三个二分频电路得到；观察波形仿真结果发现四分频和八分频分别将输入的矩形波进行了<u>四分频和八分频</u>，结果与理论一致，但是输出的不是随输入瞬时变化，而是有一小段<u>延时</u>，这是由于门级水平仿真下<u>各逻辑门存在一定的延时</u>导致的。</p>\n<h2 id=\"习题3-6\"><a href=\"#习题3-6\" class=\"headerlink\" title=\"习题3.6\"></a>习题3.6</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>基于 Quartus Prime，用 74194（4 位双向移位寄存器）设计一个 00011101 序列产生器电路，进 行编译和仿真，查看仿真结果。 参考设计：图 3.72 是序列产生器原理图，序列产生器采用 74194 和 74153（双 4 选 1 数据选择器） 构成。</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924170739029.png\" alt=\"image-20220924170739029\"></p>\n<p>​                                图 3.72 00011101 序列产生器原理图</p>\n<h3 id=\"电路原理图设计-1\"><a href=\"#电路原理图设计-1\" class=\"headerlink\" title=\"电路原理图设计\"></a>电路原理图设计</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeqGn.png\" alt=\"SeqGn\"></p>\n<h3 id=\"ModelSim仿真结果-1\"><a href=\"#ModelSim仿真结果-1\" class=\"headerlink\" title=\"ModelSim仿真结果\"></a>ModelSim仿真结果</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeGn.png\" alt=\"SeGn\"></p>\n<h3 id=\"结果分析-1\"><a href=\"#结果分析-1\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><p>观察仿真结果波形发现输出为周期变化的<strong>00011101序列</strong>，实验结果与预期一致，实现了题目所要求的功能。</p>\n<h2 id=\"习题3-12\"><a href=\"#习题3-12\" class=\"headerlink\" title=\"习题3.12\"></a>习题3.12</h2><h3 id=\"问题描述-2\"><a href=\"#问题描述-2\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>设计消抖动电路，并对其功能进行仿真。 参考设计：由 4 个触发器和一个 4 输入与门构成的消抖动电路如图 3.73 所示，消抖动电路实质上就是 一个信号过滤器，能够将信号中的毛刺、抖动等都滤除掉，图 3.74 是其仿真波形，从波形可看出，输出信 号实现了消抖动，同时可以发现如下特点：</p>\n<ul>\n<li>输出脉宽变小了，它只等于 CLK 的一个周期的宽度。  </li>\n<li>CLK 的频率不能太低，应至少有 4 个上升沿包含在正常信号脉冲中；CLK 的频率也不能太高，其 周期不能太多地小于干扰或者抖动信号的脉宽。</li>\n<li>增加 D 触发器的数量，可以改善消抖动效果。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924171445232.png\" alt=\"image-20220924171445232\"></p>\n<h3 id=\"电路原理图设计-2\"><a href=\"#电路原理图设计-2\" class=\"headerlink\" title=\"电路原理图设计\"></a>电路原理图设计</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EnShake.png\" alt=\"EnShake\"></p>\n<h3 id=\"ModelSim仿真结果-2\"><a href=\"#ModelSim仿真结果-2\" class=\"headerlink\" title=\"ModelSim仿真结果\"></a>ModelSim仿真结果</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EmShake.png\" alt=\"EmShake\"></p>\n<h3 id=\"结果分析-2\"><a href=\"#结果分析-2\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><p>将输入和输出对比发现，输出没有了输入的<strong>抖动、毛刺</strong>，消除了这些短暂的脉冲，将其过滤掉了，说明该电路有效地实现了消除抖动的功能，与预期相一致。</p>\n","site":{"data":{}},"wordcount":946,"more":"<h1 id=\"The-Usage-of-QuartusII-And-ModelSim\"><a href=\"#The-Usage-of-QuartusII-And-ModelSim\" class=\"headerlink\" title=\"The Usage of QuartusII And ModelSim\"></a>The Usage of QuartusII And ModelSim</h1><h2 id=\"习题3-1\"><a href=\"#习题3-1\" class=\"headerlink\" title=\"习题3.1\"></a>习题3.1</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>基于 Quartus Prime 软件，采用原理图设计方式用 D 触发器设计一个 2 分频电路；在此基础上， 设计一个 4 分频和 8 分频电路并进行仿真。（参考设计如图 3.67 所示）</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924165154538.png\"></p>\n<p>​                                                        图 3.67 2 分频电路</p>\n<h3 id=\"电路原理图设计\"><a href=\"#电路原理图设计\" class=\"headerlink\" title=\"电路原理图设计\"></a>电路原理图设计</h3><h4 id=\"四分频原理图\"><a href=\"#四分频原理图\" class=\"headerlink\" title=\"四分频原理图\"></a>四分频原理图</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/TwoDivF.png\" alt=\"TwoDivF\"></p>\n<h4 id=\"八分频原理图\"><a href=\"#八分频原理图\" class=\"headerlink\" title=\"八分频原理图\"></a>八分频原理图</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDivf.png\" alt=\"EightDivf\"></p>\n<h3 id=\"ModelSim仿真结果\"><a href=\"#ModelSim仿真结果\" class=\"headerlink\" title=\"ModelSim仿真结果\"></a>ModelSim仿真结果</h3><h4 id=\"四分频波形图\"><a href=\"#四分频波形图\" class=\"headerlink\" title=\"四分频波形图\"></a>四分频波形图</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/FourDiv.png\" alt=\"FourDiv\"></p>\n<h4 id=\"八分频波形图\"><a href=\"#八分频波形图\" class=\"headerlink\" title=\"八分频波形图\"></a>八分频波形图</h4><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EightDiv.png\" alt=\"EightDiv\"></p>\n<h3 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><p>首先在QuartusII中绘出原理图，编译后然后生成testbench测试文件，将两者关联后，再次编译，然后联合ModelSim进行波形<u>门级仿真</u>，四分频电路由两个二分频电路<u>级联</u>得到，而八分频电路由三个二分频电路得到；观察波形仿真结果发现四分频和八分频分别将输入的矩形波进行了<u>四分频和八分频</u>，结果与理论一致，但是输出的不是随输入瞬时变化，而是有一小段<u>延时</u>，这是由于门级水平仿真下<u>各逻辑门存在一定的延时</u>导致的。</p>\n<h2 id=\"习题3-6\"><a href=\"#习题3-6\" class=\"headerlink\" title=\"习题3.6\"></a>习题3.6</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>基于 Quartus Prime，用 74194（4 位双向移位寄存器）设计一个 00011101 序列产生器电路，进 行编译和仿真，查看仿真结果。 参考设计：图 3.72 是序列产生器原理图，序列产生器采用 74194 和 74153（双 4 选 1 数据选择器） 构成。</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924170739029.png\" alt=\"image-20220924170739029\"></p>\n<p>​                                图 3.72 00011101 序列产生器原理图</p>\n<h3 id=\"电路原理图设计-1\"><a href=\"#电路原理图设计-1\" class=\"headerlink\" title=\"电路原理图设计\"></a>电路原理图设计</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeqGn.png\" alt=\"SeqGn\"></p>\n<h3 id=\"ModelSim仿真结果-1\"><a href=\"#ModelSim仿真结果-1\" class=\"headerlink\" title=\"ModelSim仿真结果\"></a>ModelSim仿真结果</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/SeGn.png\" alt=\"SeGn\"></p>\n<h3 id=\"结果分析-1\"><a href=\"#结果分析-1\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><p>观察仿真结果波形发现输出为周期变化的<strong>00011101序列</strong>，实验结果与预期一致，实现了题目所要求的功能。</p>\n<h2 id=\"习题3-12\"><a href=\"#习题3-12\" class=\"headerlink\" title=\"习题3.12\"></a>习题3.12</h2><h3 id=\"问题描述-2\"><a href=\"#问题描述-2\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>设计消抖动电路，并对其功能进行仿真。 参考设计：由 4 个触发器和一个 4 输入与门构成的消抖动电路如图 3.73 所示，消抖动电路实质上就是 一个信号过滤器，能够将信号中的毛刺、抖动等都滤除掉，图 3.74 是其仿真波形，从波形可看出，输出信 号实现了消抖动，同时可以发现如下特点：</p>\n<ul>\n<li>输出脉宽变小了，它只等于 CLK 的一个周期的宽度。  </li>\n<li>CLK 的频率不能太低，应至少有 4 个上升沿包含在正常信号脉冲中；CLK 的频率也不能太高，其 周期不能太多地小于干扰或者抖动信号的脉宽。</li>\n<li>增加 D 触发器的数量，可以改善消抖动效果。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/image-20220924171445232.png\" alt=\"image-20220924171445232\"></p>\n<h3 id=\"电路原理图设计-2\"><a href=\"#电路原理图设计-2\" class=\"headerlink\" title=\"电路原理图设计\"></a>电路原理图设计</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EnShake.png\" alt=\"EnShake\"></p>\n<h3 id=\"ModelSim仿真结果-2\"><a href=\"#ModelSim仿真结果-2\" class=\"headerlink\" title=\"ModelSim仿真结果\"></a>ModelSim仿真结果</h3><p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/EmShake.png\" alt=\"EmShake\"></p>\n<h3 id=\"结果分析-2\"><a href=\"#结果分析-2\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><p>将输入和输出对比发现，输出没有了输入的<strong>抖动、毛刺</strong>，消除了这些短暂的脉冲，将其过滤掉了，说明该电路有效地实现了消除抖动的功能，与预期相一致。</p>\n"},{"title":"SignalSample","date":"2022-09-22T07:44:00.000Z","sticky":75,"excerpt":"SignalSample`s results about different sample_frequency","_content":"\n# Signal Sample And Rebuild\n\n## 第一题\n\n### 要求\n\n固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；\n\n### Matlab程序设计\n\n```matlab\n%% 100khz信号的采样与恢复\n%原信号生成\nclear;\nfs=500e3;%采样率\nf1=100e3;%信号频率\nT=10/f1;%采样20个周期\ndt=1/fs;\nt=linspace(-T,T-dt,20*1e3);%时域横坐标\nx = cos(2*pi*f1*t);\nsubplot(411);\nplot(t,x);%画原始信号时域图\nxlabel(\"t/s\")\ntitle(\"100kHz信号时域图\")\ngrid on\n\n%进行采样\nn=-T:dt:T-dt;\nxs=cos(2*pi*f1*n);\nsubplot(412);\nstem(n,xs,\"filled\");\nxlabel(\"t/s\")\ntitle(\"采样信号时域图\")\ngrid on\n%快速傅里叶变换绘出频谱图\nf=n*fs/length(xs)+0.5;\nX=fft(xs,length(xs));\nsubplot(413);\nplot(f*fs/1e3,abs(X));\nxlabel(\"f/kHz\")\ntitle(\"采样信号幅频图\")\ngrid on\n\n%滤波恢复原信号\ny=[];\nfor i = 1 : length(t)\n    a=t(i)-n;\n    Sa=sinc(fs.*a);\n    g=dot(xs,Sa);\n    y = [y,g];\nend\nsubplot(414);\nplot(y);\nxlabel(\"t/s\")\ntitle(\"恢复信号时域图\")\n```\n\n### 实验结果\n\n1. 100kHz原始信号的采样与恢复\n\n   ![sample100](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample100.png)\n\n2. 250kHz原始信号的采样与恢复\n\n   ![sample250](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample250.png)\n\n3. 400kHz原始信号的采样与恢复\n\n   ![sample400](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample400.png)\n\n### 结果分析\n\n- 根据是实验结果观察波形可知，当采样频率固定为500kHz时，对100kHz采样后恢复的信号与原始信号基本一致，依据**奈奎斯特采样定理**<u>采样频率需要大于信号的最高频率的两倍</u>可知，此时为**过采样**；对250kHz采样后恢复的信号在边界附近幅度有一定变化但近似可以恢复出原信号，依据奈奎斯特采样定理可知此时为**临界采样**；对400kHz采样后恢复的信号频率为原始信号的四倍发生了**非线性失真**，无法恢复出原始信号，依据奈奎斯特采样定理可知此时为**欠采样**。\n\n\n\n---\n\n## 第二题\n\n### 要求\n\n采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。\n\n### Matlab程序设计\n\n```matlab\n%% 信号的采样与恢复\nclear all;close;clc;\n%% 原信号采样及对比\n[x,fm]=audioread(\"D:/Libai.wav\");\nx=x(:,1);%由于x是双声道，所以取它的左声道\nFs=18e3;\nx = resample(x,Fs,fm);%将读取信号重采样为18kHz作为原始信号\nN=length(x); %信号的长度\nt=(0:N-1)/Fs;%时域范围\nfigure(1);\nsubplot(421);\nplot(t,x); %音频信号时域图\ntitle(\"原信号音频时域图\");\nxlabel(\"Time\"); \nY=fft(x,N);\ndf=Fs/length(t); %计算谱线间隔\nf=t*df;\nYs=abs(Y); %幅度响应\n% Ys=Ys(1:length(Ys)/2); %由于幅度响应是偶函数，所以截取一半\nsubplot(422);\nplot(f.*Fs./1e3,Ys); %音频信号频谱图\ntitle(\"原信号音频频谱图\");\nxlabel(\"f/kHz\");\n%% 进行过采样、临界采样和欠采样三种采样\ni=3;\nfso=Fs/1.5;\nfsc=Fs/2;\nfsu=Fs/4;\nfor n = [1.5, 2, 4]\nif n==1.5\n    yso =  resample(x,fso,Fs);\nelseif n==2\n    ysc =  resample(x,fsc,Fs);\nelse\n    ysu =  resample(x,fsu,Fs);\nend\nsubplot(4,2,i);\ni=i+1;\nxlabel(\"t/s\")\nif n==1.5\n    tso=linspace(t(1),t(end),length(yso));%时域横坐标\n    plot(tso,yso);%画采样信号时域图\n    title(\"过采样采样信号时域图\")\n    grid on\n    Y=fft(yso,length(yso));\n    subplot(4,2,i);\n    i=i+1;\n    df=fso/length(tso); %计算谱线间隔\n    fo=tso*df;\n    Ys=abs(Y); %幅度响应\n    plot(fo.*fso./1e3,Ys); %音频信号频谱图\n    xlabel(\"f/kHz\"); \n    title(\"过采样音频频谱图\");\n    grid on\nelseif n==2\n    tsc=linspace(t(1),t(end),length(ysc));%时域横坐标\n    plot(tsc,ysc);%画采样信号时域图\n    title(\"临界采样采样信号时域图\")\n    grid on\n    Y=fft(ysc,length(ysc));\n    subplot(4,2,i);\n    i=i+1;\n    df=fsc/length(tsc); %计算谱线间隔\n    fc=tsc*df;\n    Ys=abs(Y); %幅度响应\n    plot(fc.*fsc./1e3,Ys); %音频信号频谱图\n    xlabel(\"f/kHz\");\n    title(\"临界采样音频频谱图\");\n    grid on\nelseif n==4 \n    tsu=linspace(t(1),t(end),length(ysu));%时域横坐标\n    plot(tsu,ysu);%画采样信号时域图\n    title(\"欠采样采样信号时域图\")\n    grid on\n    Y=fft(ysu,length(ysu));\n    subplot(4,2,i);\n    i=i+1;\n    df=fsu/length(tsu); %计算谱线间隔\n    fu=tsu*df;\n    Ys=abs(Y); %幅度响应\n    plot(fu.*fsu./1e3,Ys); %音频信号频谱图\n    xlabel(\"f/kHz\");\n    title(\"欠采样音频频谱图\");\n    grid on\nend\nend\n%% 低通滤波恢复原信号\nyo=zeros(1,length(x));\nfor i = 1 : length(x)\n        a=t(i)-tso;\n        Sa=sinc(fso.*a);\n        g=0;\n        for k = 1:1:length(yso)\n            s = yso(k)*Sa(k);\n            g=g+s;\n        end\n        yo(i) = g;\nend\nyc=zeros(1,length(x));\nfor i = 1 : length(t)\n        b=t(i)-tsc;\n        Sb=sinc(fsc.*b);\n        g=0;\n        for k = 1:1:length(ysc)\n            s = ysc(k)*Sb(k);\n            g=g+s;\n        end\n        yc(i) = g;\nend\nyu=zeros(1,length(x));\nfor i = 1 : length(t)\n        c=t(i)-tsu;\n        Sc=sinc(fsu.*c);\n        g=0;\n        for k = 1:1:length(ysu)\n            s = ysu(k)*Sc(k);\n            g=g+s;\n        end\n        yu(i) = g;\nend\n%% 信号对比及保存\n%画出还原时域图\nm=2;\nfigure(2);\nsubplot(421);\nplot(t,x); \ntitle(\"原信号音频时域图\");\nxlabel(\"Time\");\ngrid on\ns=\"原信号音频频谱图\";\nFFT(x,N,Fs,t,m,s);\nm=m+2;\nsubplot(423);\nplot(t,yo);\nxlabel(\"t/s\")\ntitle(\"过采样恢复信号时域图\");\ngrid on\nso=\"过采样信号音频频谱图\";\nFFT(yo,length(yo),fso,t,m,so);\nm=m+2;\nsubplot(425);\nplot(t,yc);\nxlabel(\"t/s\")\ntitle(\"临界采样恢复信号时域图\");\ngrid on\nsc=\"临界采样信号音频频谱图\";\nFFT(yc,length(yc),fsc,t,m,sc);\nm=m+2;\nsubplot(427);\nplot(t,yu);\nxlabel(\"t/s\")\ntitle(\"欠采样恢复信号时域图\");\ngrid on\nsu=\"欠采样信号音频频谱图\";\nFFT(yu,length(yu),fsu,t,m,su);\n%保存信号\nname = [\"over_sampling.wav\",\"critical_sampling.wav\",\"under_sampling.wav\"];\naudiowrite(name(1),yo,Fs);\naudiowrite(name(2),yc,Fs);\naudiowrite(name(3),yu,Fs);\nend\n%% 傅里叶变换函数\nfunction FourierTransform = FFT(signal,N,fs,t,m,s)\nY=fft(signal,N);\ndf=fs/length(t); %计算谱线间隔\nf=t*df;\nYs=abs(Y); %幅度响应\nsubplot(4,2,m);\nplot(f.*fs./1e3,Ys); %音频信号频谱图\nxlabel(\"f/kHz\");\ntitle(s);\nend\n```\n\n### 实验结果\n\n1. 三种采样后的信号与原信号的对比\n\n   ![sampleorigin](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sampleorigin.png)\n\n2. 重建信号与原信号的对比\n\n   ![rebuild](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/rebuild.png)\n\n\n### 结果分析\n\n- 先读取音频信号，matlab默认读取音频时的采样频率为44.1kHz，而人类能够听到的声音的频率为**20~20kHz**左右，为了加快运算速度将采集的信号重采样为18kHz作为原始信号，然后对其分别进行过采样(频率为12kHz)、临界采样(频率为9kHz)、欠采样(频率为4.5kHz)，采样后对其进行**插值重建**。\n- 对比原始信号与重建信号的时域图和频谱图发现，过采样和临界采样恢复的信号和原始信号基本一致，没有发生较大的畸变，而欠采样信号发生了较大的失真，与原始信号有较大的的区别，由此可知，**采样必须满足奈奎斯特采样定理**才能不失真的恢复出原始信号。\n\n   ​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n   \n   \n   \n   \n   \n   \n   \n   ​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[原文已上传博客](https://alleyf.github.io/2022/09/22/SignalSample/)","source":"_posts/SignalSample.md","raw":"---\ntitle: SignalSample\ntags: [Signal,Sample]\ncategories: DSP\ndate: 2022-9-22 15:44:00\nsticky: 75\nexcerpt: SignalSample`s results about different sample_frequency\n---\n\n# Signal Sample And Rebuild\n\n## 第一题\n\n### 要求\n\n固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；\n\n### Matlab程序设计\n\n```matlab\n%% 100khz信号的采样与恢复\n%原信号生成\nclear;\nfs=500e3;%采样率\nf1=100e3;%信号频率\nT=10/f1;%采样20个周期\ndt=1/fs;\nt=linspace(-T,T-dt,20*1e3);%时域横坐标\nx = cos(2*pi*f1*t);\nsubplot(411);\nplot(t,x);%画原始信号时域图\nxlabel(\"t/s\")\ntitle(\"100kHz信号时域图\")\ngrid on\n\n%进行采样\nn=-T:dt:T-dt;\nxs=cos(2*pi*f1*n);\nsubplot(412);\nstem(n,xs,\"filled\");\nxlabel(\"t/s\")\ntitle(\"采样信号时域图\")\ngrid on\n%快速傅里叶变换绘出频谱图\nf=n*fs/length(xs)+0.5;\nX=fft(xs,length(xs));\nsubplot(413);\nplot(f*fs/1e3,abs(X));\nxlabel(\"f/kHz\")\ntitle(\"采样信号幅频图\")\ngrid on\n\n%滤波恢复原信号\ny=[];\nfor i = 1 : length(t)\n    a=t(i)-n;\n    Sa=sinc(fs.*a);\n    g=dot(xs,Sa);\n    y = [y,g];\nend\nsubplot(414);\nplot(y);\nxlabel(\"t/s\")\ntitle(\"恢复信号时域图\")\n```\n\n### 实验结果\n\n1. 100kHz原始信号的采样与恢复\n\n   ![sample100](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample100.png)\n\n2. 250kHz原始信号的采样与恢复\n\n   ![sample250](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample250.png)\n\n3. 400kHz原始信号的采样与恢复\n\n   ![sample400](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample400.png)\n\n### 结果分析\n\n- 根据是实验结果观察波形可知，当采样频率固定为500kHz时，对100kHz采样后恢复的信号与原始信号基本一致，依据**奈奎斯特采样定理**<u>采样频率需要大于信号的最高频率的两倍</u>可知，此时为**过采样**；对250kHz采样后恢复的信号在边界附近幅度有一定变化但近似可以恢复出原信号，依据奈奎斯特采样定理可知此时为**临界采样**；对400kHz采样后恢复的信号频率为原始信号的四倍发生了**非线性失真**，无法恢复出原始信号，依据奈奎斯特采样定理可知此时为**欠采样**。\n\n\n\n---\n\n## 第二题\n\n### 要求\n\n采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。\n\n### Matlab程序设计\n\n```matlab\n%% 信号的采样与恢复\nclear all;close;clc;\n%% 原信号采样及对比\n[x,fm]=audioread(\"D:/Libai.wav\");\nx=x(:,1);%由于x是双声道，所以取它的左声道\nFs=18e3;\nx = resample(x,Fs,fm);%将读取信号重采样为18kHz作为原始信号\nN=length(x); %信号的长度\nt=(0:N-1)/Fs;%时域范围\nfigure(1);\nsubplot(421);\nplot(t,x); %音频信号时域图\ntitle(\"原信号音频时域图\");\nxlabel(\"Time\"); \nY=fft(x,N);\ndf=Fs/length(t); %计算谱线间隔\nf=t*df;\nYs=abs(Y); %幅度响应\n% Ys=Ys(1:length(Ys)/2); %由于幅度响应是偶函数，所以截取一半\nsubplot(422);\nplot(f.*Fs./1e3,Ys); %音频信号频谱图\ntitle(\"原信号音频频谱图\");\nxlabel(\"f/kHz\");\n%% 进行过采样、临界采样和欠采样三种采样\ni=3;\nfso=Fs/1.5;\nfsc=Fs/2;\nfsu=Fs/4;\nfor n = [1.5, 2, 4]\nif n==1.5\n    yso =  resample(x,fso,Fs);\nelseif n==2\n    ysc =  resample(x,fsc,Fs);\nelse\n    ysu =  resample(x,fsu,Fs);\nend\nsubplot(4,2,i);\ni=i+1;\nxlabel(\"t/s\")\nif n==1.5\n    tso=linspace(t(1),t(end),length(yso));%时域横坐标\n    plot(tso,yso);%画采样信号时域图\n    title(\"过采样采样信号时域图\")\n    grid on\n    Y=fft(yso,length(yso));\n    subplot(4,2,i);\n    i=i+1;\n    df=fso/length(tso); %计算谱线间隔\n    fo=tso*df;\n    Ys=abs(Y); %幅度响应\n    plot(fo.*fso./1e3,Ys); %音频信号频谱图\n    xlabel(\"f/kHz\"); \n    title(\"过采样音频频谱图\");\n    grid on\nelseif n==2\n    tsc=linspace(t(1),t(end),length(ysc));%时域横坐标\n    plot(tsc,ysc);%画采样信号时域图\n    title(\"临界采样采样信号时域图\")\n    grid on\n    Y=fft(ysc,length(ysc));\n    subplot(4,2,i);\n    i=i+1;\n    df=fsc/length(tsc); %计算谱线间隔\n    fc=tsc*df;\n    Ys=abs(Y); %幅度响应\n    plot(fc.*fsc./1e3,Ys); %音频信号频谱图\n    xlabel(\"f/kHz\");\n    title(\"临界采样音频频谱图\");\n    grid on\nelseif n==4 \n    tsu=linspace(t(1),t(end),length(ysu));%时域横坐标\n    plot(tsu,ysu);%画采样信号时域图\n    title(\"欠采样采样信号时域图\")\n    grid on\n    Y=fft(ysu,length(ysu));\n    subplot(4,2,i);\n    i=i+1;\n    df=fsu/length(tsu); %计算谱线间隔\n    fu=tsu*df;\n    Ys=abs(Y); %幅度响应\n    plot(fu.*fsu./1e3,Ys); %音频信号频谱图\n    xlabel(\"f/kHz\");\n    title(\"欠采样音频频谱图\");\n    grid on\nend\nend\n%% 低通滤波恢复原信号\nyo=zeros(1,length(x));\nfor i = 1 : length(x)\n        a=t(i)-tso;\n        Sa=sinc(fso.*a);\n        g=0;\n        for k = 1:1:length(yso)\n            s = yso(k)*Sa(k);\n            g=g+s;\n        end\n        yo(i) = g;\nend\nyc=zeros(1,length(x));\nfor i = 1 : length(t)\n        b=t(i)-tsc;\n        Sb=sinc(fsc.*b);\n        g=0;\n        for k = 1:1:length(ysc)\n            s = ysc(k)*Sb(k);\n            g=g+s;\n        end\n        yc(i) = g;\nend\nyu=zeros(1,length(x));\nfor i = 1 : length(t)\n        c=t(i)-tsu;\n        Sc=sinc(fsu.*c);\n        g=0;\n        for k = 1:1:length(ysu)\n            s = ysu(k)*Sc(k);\n            g=g+s;\n        end\n        yu(i) = g;\nend\n%% 信号对比及保存\n%画出还原时域图\nm=2;\nfigure(2);\nsubplot(421);\nplot(t,x); \ntitle(\"原信号音频时域图\");\nxlabel(\"Time\");\ngrid on\ns=\"原信号音频频谱图\";\nFFT(x,N,Fs,t,m,s);\nm=m+2;\nsubplot(423);\nplot(t,yo);\nxlabel(\"t/s\")\ntitle(\"过采样恢复信号时域图\");\ngrid on\nso=\"过采样信号音频频谱图\";\nFFT(yo,length(yo),fso,t,m,so);\nm=m+2;\nsubplot(425);\nplot(t,yc);\nxlabel(\"t/s\")\ntitle(\"临界采样恢复信号时域图\");\ngrid on\nsc=\"临界采样信号音频频谱图\";\nFFT(yc,length(yc),fsc,t,m,sc);\nm=m+2;\nsubplot(427);\nplot(t,yu);\nxlabel(\"t/s\")\ntitle(\"欠采样恢复信号时域图\");\ngrid on\nsu=\"欠采样信号音频频谱图\";\nFFT(yu,length(yu),fsu,t,m,su);\n%保存信号\nname = [\"over_sampling.wav\",\"critical_sampling.wav\",\"under_sampling.wav\"];\naudiowrite(name(1),yo,Fs);\naudiowrite(name(2),yc,Fs);\naudiowrite(name(3),yu,Fs);\nend\n%% 傅里叶变换函数\nfunction FourierTransform = FFT(signal,N,fs,t,m,s)\nY=fft(signal,N);\ndf=fs/length(t); %计算谱线间隔\nf=t*df;\nYs=abs(Y); %幅度响应\nsubplot(4,2,m);\nplot(f.*fs./1e3,Ys); %音频信号频谱图\nxlabel(\"f/kHz\");\ntitle(s);\nend\n```\n\n### 实验结果\n\n1. 三种采样后的信号与原信号的对比\n\n   ![sampleorigin](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sampleorigin.png)\n\n2. 重建信号与原信号的对比\n\n   ![rebuild](https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/rebuild.png)\n\n\n### 结果分析\n\n- 先读取音频信号，matlab默认读取音频时的采样频率为44.1kHz，而人类能够听到的声音的频率为**20~20kHz**左右，为了加快运算速度将采集的信号重采样为18kHz作为原始信号，然后对其分别进行过采样(频率为12kHz)、临界采样(频率为9kHz)、欠采样(频率为4.5kHz)，采样后对其进行**插值重建**。\n- 对比原始信号与重建信号的时域图和频谱图发现，过采样和临界采样恢复的信号和原始信号基本一致，没有发生较大的畸变，而欠采样信号发生了较大的失真，与原始信号有较大的的区别，由此可知，**采样必须满足奈奎斯特采样定理**才能不失真的恢复出原始信号。\n\n   ​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n   \n   \n   \n   \n   \n   \n   \n   ​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[原文已上传博客](https://alleyf.github.io/2022/09/22/SignalSample/)","slug":"SignalSample","published":1,"updated":"2022-09-22T14:50:21.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lo2ght0011ichz0i5t09v7","content":"<h1 id=\"Signal-Sample-And-Rebuild\"><a href=\"#Signal-Sample-And-Rebuild\" class=\"headerlink\" title=\"Signal Sample And Rebuild\"></a>Signal Sample And Rebuild</h1><h2 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2><h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；</p>\n<h3 id=\"Matlab程序设计\"><a href=\"#Matlab程序设计\" class=\"headerlink\" title=\"Matlab程序设计\"></a>Matlab程序设计</h3><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\"><span class=\"hljs-comment\">%% 100khz信号的采样与恢复</span><br><span class=\"hljs-comment\">%原信号生成</span><br>clear;<br>fs=<span class=\"hljs-number\">500e3</span>;<span class=\"hljs-comment\">%采样率</span><br>f1=<span class=\"hljs-number\">100e3</span>;<span class=\"hljs-comment\">%信号频率</span><br>T=<span class=\"hljs-number\">10</span>/f1;<span class=\"hljs-comment\">%采样20个周期</span><br>dt=<span class=\"hljs-number\">1</span>/fs;<br>t=<span class=\"hljs-built_in\">linspace</span>(-T,T-dt,<span class=\"hljs-number\">20</span>*<span class=\"hljs-number\">1e3</span>);<span class=\"hljs-comment\">%时域横坐标</span><br>x = <span class=\"hljs-built_in\">cos</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f1*t);<br>subplot(<span class=\"hljs-number\">411</span>);<br><span class=\"hljs-built_in\">plot</span>(t,x);<span class=\"hljs-comment\">%画原始信号时域图</span><br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;100kHz信号时域图&quot;</span>)<br>grid on<br><br><span class=\"hljs-comment\">%进行采样</span><br>n=-T:dt:T-dt;<br>xs=<span class=\"hljs-built_in\">cos</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f1*n);<br>subplot(<span class=\"hljs-number\">412</span>);<br>stem(n,xs,<span class=\"hljs-string\">&quot;filled&quot;</span>);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;采样信号时域图&quot;</span>)<br>grid on<br><span class=\"hljs-comment\">%快速傅里叶变换绘出频谱图</span><br>f=n*fs/<span class=\"hljs-built_in\">length</span>(xs)+<span class=\"hljs-number\">0.5</span>;<br>X=fft(xs,<span class=\"hljs-built_in\">length</span>(xs));<br>subplot(<span class=\"hljs-number\">413</span>);<br><span class=\"hljs-built_in\">plot</span>(f*fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(X));<br>xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;采样信号幅频图&quot;</span>)<br>grid on<br><br><span class=\"hljs-comment\">%滤波恢复原信号</span><br>y=[];<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(t)<br>    a=t(<span class=\"hljs-built_in\">i</span>)-n;<br>    Sa=sinc(fs.*a);<br>    g=<span class=\"hljs-built_in\">dot</span>(xs,Sa);<br>    y = [y,g];<br><span class=\"hljs-keyword\">end</span><br>subplot(<span class=\"hljs-number\">414</span>);<br><span class=\"hljs-built_in\">plot</span>(y);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;恢复信号时域图&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><ol>\n<li><p>100kHz原始信号的采样与恢复</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample100.png\" alt=\"sample100\"></p>\n</li>\n<li><p>250kHz原始信号的采样与恢复</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample250.png\" alt=\"sample250\"></p>\n</li>\n<li><p>400kHz原始信号的采样与恢复</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample400.png\" alt=\"sample400\"></p>\n</li>\n</ol>\n<h3 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><ul>\n<li>根据是实验结果观察波形可知，当采样频率固定为500kHz时，对100kHz采样后恢复的信号与原始信号基本一致，依据<strong>奈奎斯特采样定理</strong><u>采样频率需要大于信号的最高频率的两倍</u>可知，此时为<strong>过采样</strong>；对250kHz采样后恢复的信号在边界附近幅度有一定变化但近似可以恢复出原信号，依据奈奎斯特采样定理可知此时为<strong>临界采样</strong>；对400kHz采样后恢复的信号频率为原始信号的四倍发生了<strong>非线性失真</strong>，无法恢复出原始信号，依据奈奎斯特采样定理可知此时为<strong>欠采样</strong>。</li>\n</ul>\n<hr>\n<h2 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2><h3 id=\"要求-1\"><a href=\"#要求-1\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。</p>\n<h3 id=\"Matlab程序设计-1\"><a href=\"#Matlab程序设计-1\" class=\"headerlink\" title=\"Matlab程序设计\"></a>Matlab程序设计</h3><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\"><span class=\"hljs-comment\">%% 信号的采样与恢复</span><br>clear all;close;clc;<br><span class=\"hljs-comment\">%% 原信号采样及对比</span><br>[x,fm]=audioread(<span class=\"hljs-string\">&quot;D:/Libai.wav&quot;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>Fs=<span class=\"hljs-number\">18e3</span>;<br>x = resample(x,Fs,fm);<span class=\"hljs-comment\">%将读取信号重采样为18kHz作为原始信号</span><br>N=<span class=\"hljs-built_in\">length</span>(x); <span class=\"hljs-comment\">%信号的长度</span><br>t=(<span class=\"hljs-number\">0</span>:N<span class=\"hljs-number\">-1</span>)/Fs;<span class=\"hljs-comment\">%时域范围</span><br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">1</span>);<br>subplot(<span class=\"hljs-number\">421</span>);<br><span class=\"hljs-built_in\">plot</span>(t,x); <span class=\"hljs-comment\">%音频信号时域图</span><br>title(<span class=\"hljs-string\">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class=\"hljs-string\">&quot;Time&quot;</span>); <br>Y=fft(x,N);<br>df=Fs/<span class=\"hljs-built_in\">length</span>(t); <span class=\"hljs-comment\">%计算谱线间隔</span><br>f=t*df;<br>Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br><span class=\"hljs-comment\">% Ys=Ys(1:length(Ys)/2); %由于幅度响应是偶函数，所以截取一半</span><br>subplot(<span class=\"hljs-number\">422</span>);<br><span class=\"hljs-built_in\">plot</span>(f.*Fs./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>title(<span class=\"hljs-string\">&quot;原信号音频频谱图&quot;</span>);<br>xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>);<br><span class=\"hljs-comment\">%% 进行过采样、临界采样和欠采样三种采样</span><br><span class=\"hljs-built_in\">i</span>=<span class=\"hljs-number\">3</span>;<br>fso=Fs/<span class=\"hljs-number\">1.5</span>;<br>fsc=Fs/<span class=\"hljs-number\">2</span>;<br>fsu=Fs/<span class=\"hljs-number\">4</span>;<br><span class=\"hljs-keyword\">for</span> n = [<span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]<br><span class=\"hljs-keyword\">if</span> n==<span class=\"hljs-number\">1.5</span><br>    yso =  resample(x,fso,Fs);<br><span class=\"hljs-keyword\">elseif</span> n==<span class=\"hljs-number\">2</span><br>    ysc =  resample(x,fsc,Fs);<br><span class=\"hljs-keyword\">else</span><br>    ysu =  resample(x,fsu,Fs);<br><span class=\"hljs-keyword\">end</span><br>subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">i</span>);<br><span class=\"hljs-built_in\">i</span>=<span class=\"hljs-built_in\">i</span>+<span class=\"hljs-number\">1</span>;<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br><span class=\"hljs-keyword\">if</span> n==<span class=\"hljs-number\">1.5</span><br>    tso=<span class=\"hljs-built_in\">linspace</span>(t(<span class=\"hljs-number\">1</span>),t(<span class=\"hljs-keyword\">end</span>),<span class=\"hljs-built_in\">length</span>(yso));<span class=\"hljs-comment\">%时域横坐标</span><br>    <span class=\"hljs-built_in\">plot</span>(tso,yso);<span class=\"hljs-comment\">%画采样信号时域图</span><br>    title(<span class=\"hljs-string\">&quot;过采样采样信号时域图&quot;</span>)<br>    grid on<br>    Y=fft(yso,<span class=\"hljs-built_in\">length</span>(yso));<br>    subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">i</span>);<br>    <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-built_in\">i</span>+<span class=\"hljs-number\">1</span>;<br>    df=fso/<span class=\"hljs-built_in\">length</span>(tso); <span class=\"hljs-comment\">%计算谱线间隔</span><br>    fo=tso*df;<br>    Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br>    <span class=\"hljs-built_in\">plot</span>(fo.*fso./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>    xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>); <br>    title(<span class=\"hljs-string\">&quot;过采样音频频谱图&quot;</span>);<br>    grid on<br><span class=\"hljs-keyword\">elseif</span> n==<span class=\"hljs-number\">2</span><br>    tsc=<span class=\"hljs-built_in\">linspace</span>(t(<span class=\"hljs-number\">1</span>),t(<span class=\"hljs-keyword\">end</span>),<span class=\"hljs-built_in\">length</span>(ysc));<span class=\"hljs-comment\">%时域横坐标</span><br>    <span class=\"hljs-built_in\">plot</span>(tsc,ysc);<span class=\"hljs-comment\">%画采样信号时域图</span><br>    title(<span class=\"hljs-string\">&quot;临界采样采样信号时域图&quot;</span>)<br>    grid on<br>    Y=fft(ysc,<span class=\"hljs-built_in\">length</span>(ysc));<br>    subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">i</span>);<br>    <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-built_in\">i</span>+<span class=\"hljs-number\">1</span>;<br>    df=fsc/<span class=\"hljs-built_in\">length</span>(tsc); <span class=\"hljs-comment\">%计算谱线间隔</span><br>    fc=tsc*df;<br>    Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br>    <span class=\"hljs-built_in\">plot</span>(fc.*fsc./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>    xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>);<br>    title(<span class=\"hljs-string\">&quot;临界采样音频频谱图&quot;</span>);<br>    grid on<br><span class=\"hljs-keyword\">elseif</span> n==<span class=\"hljs-number\">4</span> <br>    tsu=<span class=\"hljs-built_in\">linspace</span>(t(<span class=\"hljs-number\">1</span>),t(<span class=\"hljs-keyword\">end</span>),<span class=\"hljs-built_in\">length</span>(ysu));<span class=\"hljs-comment\">%时域横坐标</span><br>    <span class=\"hljs-built_in\">plot</span>(tsu,ysu);<span class=\"hljs-comment\">%画采样信号时域图</span><br>    title(<span class=\"hljs-string\">&quot;欠采样采样信号时域图&quot;</span>)<br>    grid on<br>    Y=fft(ysu,<span class=\"hljs-built_in\">length</span>(ysu));<br>    subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">i</span>);<br>    <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-built_in\">i</span>+<span class=\"hljs-number\">1</span>;<br>    df=fsu/<span class=\"hljs-built_in\">length</span>(tsu); <span class=\"hljs-comment\">%计算谱线间隔</span><br>    fu=tsu*df;<br>    Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br>    <span class=\"hljs-built_in\">plot</span>(fu.*fsu./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>    xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>);<br>    title(<span class=\"hljs-string\">&quot;欠采样音频频谱图&quot;</span>);<br>    grid on<br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-comment\">%% 低通滤波恢复原信号</span><br>yo=<span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">length</span>(x));<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(x)<br>        a=t(<span class=\"hljs-built_in\">i</span>)-tso;<br>        Sa=sinc(fso.*a);<br>        g=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> k = <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(yso)<br>            s = yso(k)*Sa(k);<br>            g=g+s;<br>        <span class=\"hljs-keyword\">end</span><br>        yo(<span class=\"hljs-built_in\">i</span>) = g;<br><span class=\"hljs-keyword\">end</span><br>yc=<span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">length</span>(x));<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(t)<br>        b=t(<span class=\"hljs-built_in\">i</span>)-tsc;<br>        Sb=sinc(fsc.*b);<br>        g=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> k = <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(ysc)<br>            s = ysc(k)*Sb(k);<br>            g=g+s;<br>        <span class=\"hljs-keyword\">end</span><br>        yc(<span class=\"hljs-built_in\">i</span>) = g;<br><span class=\"hljs-keyword\">end</span><br>yu=<span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">length</span>(x));<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(t)<br>        c=t(<span class=\"hljs-built_in\">i</span>)-tsu;<br>        Sc=sinc(fsu.*c);<br>        g=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> k = <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(ysu)<br>            s = ysu(k)*Sc(k);<br>            g=g+s;<br>        <span class=\"hljs-keyword\">end</span><br>        yu(<span class=\"hljs-built_in\">i</span>) = g;<br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-comment\">%% 信号对比及保存</span><br><span class=\"hljs-comment\">%画出还原时域图</span><br>m=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">2</span>);<br>subplot(<span class=\"hljs-number\">421</span>);<br><span class=\"hljs-built_in\">plot</span>(t,x); <br>title(<span class=\"hljs-string\">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class=\"hljs-string\">&quot;Time&quot;</span>);<br>grid on<br>s=<span class=\"hljs-string\">&quot;原信号音频频谱图&quot;</span>;<br>FFT(x,N,Fs,t,m,s);<br>m=m+<span class=\"hljs-number\">2</span>;<br>subplot(<span class=\"hljs-number\">423</span>);<br><span class=\"hljs-built_in\">plot</span>(t,yo);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;过采样恢复信号时域图&quot;</span>);<br>grid on<br>so=<span class=\"hljs-string\">&quot;过采样信号音频频谱图&quot;</span>;<br>FFT(yo,<span class=\"hljs-built_in\">length</span>(yo),fso,t,m,so);<br>m=m+<span class=\"hljs-number\">2</span>;<br>subplot(<span class=\"hljs-number\">425</span>);<br><span class=\"hljs-built_in\">plot</span>(t,yc);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;临界采样恢复信号时域图&quot;</span>);<br>grid on<br>sc=<span class=\"hljs-string\">&quot;临界采样信号音频频谱图&quot;</span>;<br>FFT(yc,<span class=\"hljs-built_in\">length</span>(yc),fsc,t,m,sc);<br>m=m+<span class=\"hljs-number\">2</span>;<br>subplot(<span class=\"hljs-number\">427</span>);<br><span class=\"hljs-built_in\">plot</span>(t,yu);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;欠采样恢复信号时域图&quot;</span>);<br>grid on<br>su=<span class=\"hljs-string\">&quot;欠采样信号音频频谱图&quot;</span>;<br>FFT(yu,<span class=\"hljs-built_in\">length</span>(yu),fsu,t,m,su);<br><span class=\"hljs-comment\">%保存信号</span><br>name = [<span class=\"hljs-string\">&quot;over_sampling.wav&quot;</span>,<span class=\"hljs-string\">&quot;critical_sampling.wav&quot;</span>,<span class=\"hljs-string\">&quot;under_sampling.wav&quot;</span>];<br>audiowrite(name(<span class=\"hljs-number\">1</span>),yo,Fs);<br>audiowrite(name(<span class=\"hljs-number\">2</span>),yc,Fs);<br>audiowrite(name(<span class=\"hljs-number\">3</span>),yu,Fs);<br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-comment\">%% 傅里叶变换函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">FourierTransform</span> = <span class=\"hljs-title\">FFT</span><span class=\"hljs-params\">(signal,N,fs,t,m,s)</span></span><br>Y=fft(signal,N);<br>df=fs/<span class=\"hljs-built_in\">length</span>(t); <span class=\"hljs-comment\">%计算谱线间隔</span><br>f=t*df;<br>Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br>subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,m);<br><span class=\"hljs-built_in\">plot</span>(f.*fs./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>);<br>title(s);<br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实验结果-1\"><a href=\"#实验结果-1\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><ol>\n<li><p>三种采样后的信号与原信号的对比</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sampleorigin.png\" alt=\"sampleorigin\"></p>\n</li>\n<li><p>重建信号与原信号的对比</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/rebuild.png\" alt=\"rebuild\"></p>\n</li>\n</ol>\n<h3 id=\"结果分析-1\"><a href=\"#结果分析-1\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><ul>\n<li><p>先读取音频信号，matlab默认读取音频时的采样频率为44.1kHz，而人类能够听到的声音的频率为<strong>20~20kHz</strong>左右，为了加快运算速度将采集的信号重采样为18kHz作为原始信号，然后对其分别进行过采样(频率为12kHz)、临界采样(频率为9kHz)、欠采样(频率为4.5kHz)，采样后对其进行<strong>插值重建</strong>。</p>\n</li>\n<li><p>对比原始信号与重建信号的时域图和频谱图发现，过采样和临界采样恢复的信号和原始信号基本一致，没有发生较大的畸变，而欠采样信号发生了较大的失真，与原始信号有较大的的区别，由此可知，<strong>采样必须满足奈奎斯特采样定理</strong>才能不失真的恢复出原始信号。</p>\n<p> ​                                                                                                                </p>\n<p> ​                                                                                                                <a href=\"https://alleyf.github.io/2022/09/22/SignalSample/\">原文已上传博客</a></p>\n</li>\n</ul>\n","site":{"data":{}},"wordcount":4846,"more":"<h1 id=\"Signal-Sample-And-Rebuild\"><a href=\"#Signal-Sample-And-Rebuild\" class=\"headerlink\" title=\"Signal Sample And Rebuild\"></a>Signal Sample And Rebuild</h1><h2 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2><h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；</p>\n<h3 id=\"Matlab程序设计\"><a href=\"#Matlab程序设计\" class=\"headerlink\" title=\"Matlab程序设计\"></a>Matlab程序设计</h3><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\"><span class=\"hljs-comment\">%% 100khz信号的采样与恢复</span><br><span class=\"hljs-comment\">%原信号生成</span><br>clear;<br>fs=<span class=\"hljs-number\">500e3</span>;<span class=\"hljs-comment\">%采样率</span><br>f1=<span class=\"hljs-number\">100e3</span>;<span class=\"hljs-comment\">%信号频率</span><br>T=<span class=\"hljs-number\">10</span>/f1;<span class=\"hljs-comment\">%采样20个周期</span><br>dt=<span class=\"hljs-number\">1</span>/fs;<br>t=<span class=\"hljs-built_in\">linspace</span>(-T,T-dt,<span class=\"hljs-number\">20</span>*<span class=\"hljs-number\">1e3</span>);<span class=\"hljs-comment\">%时域横坐标</span><br>x = <span class=\"hljs-built_in\">cos</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f1*t);<br>subplot(<span class=\"hljs-number\">411</span>);<br><span class=\"hljs-built_in\">plot</span>(t,x);<span class=\"hljs-comment\">%画原始信号时域图</span><br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;100kHz信号时域图&quot;</span>)<br>grid on<br><br><span class=\"hljs-comment\">%进行采样</span><br>n=-T:dt:T-dt;<br>xs=<span class=\"hljs-built_in\">cos</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f1*n);<br>subplot(<span class=\"hljs-number\">412</span>);<br>stem(n,xs,<span class=\"hljs-string\">&quot;filled&quot;</span>);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;采样信号时域图&quot;</span>)<br>grid on<br><span class=\"hljs-comment\">%快速傅里叶变换绘出频谱图</span><br>f=n*fs/<span class=\"hljs-built_in\">length</span>(xs)+<span class=\"hljs-number\">0.5</span>;<br>X=fft(xs,<span class=\"hljs-built_in\">length</span>(xs));<br>subplot(<span class=\"hljs-number\">413</span>);<br><span class=\"hljs-built_in\">plot</span>(f*fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(X));<br>xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;采样信号幅频图&quot;</span>)<br>grid on<br><br><span class=\"hljs-comment\">%滤波恢复原信号</span><br>y=[];<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(t)<br>    a=t(<span class=\"hljs-built_in\">i</span>)-n;<br>    Sa=sinc(fs.*a);<br>    g=<span class=\"hljs-built_in\">dot</span>(xs,Sa);<br>    y = [y,g];<br><span class=\"hljs-keyword\">end</span><br>subplot(<span class=\"hljs-number\">414</span>);<br><span class=\"hljs-built_in\">plot</span>(y);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;恢复信号时域图&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><ol>\n<li><p>100kHz原始信号的采样与恢复</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample100.png\" alt=\"sample100\"></p>\n</li>\n<li><p>250kHz原始信号的采样与恢复</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample250.png\" alt=\"sample250\"></p>\n</li>\n<li><p>400kHz原始信号的采样与恢复</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sample400.png\" alt=\"sample400\"></p>\n</li>\n</ol>\n<h3 id=\"结果分析\"><a href=\"#结果分析\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><ul>\n<li>根据是实验结果观察波形可知，当采样频率固定为500kHz时，对100kHz采样后恢复的信号与原始信号基本一致，依据<strong>奈奎斯特采样定理</strong><u>采样频率需要大于信号的最高频率的两倍</u>可知，此时为<strong>过采样</strong>；对250kHz采样后恢复的信号在边界附近幅度有一定变化但近似可以恢复出原信号，依据奈奎斯特采样定理可知此时为<strong>临界采样</strong>；对400kHz采样后恢复的信号频率为原始信号的四倍发生了<strong>非线性失真</strong>，无法恢复出原始信号，依据奈奎斯特采样定理可知此时为<strong>欠采样</strong>。</li>\n</ul>\n<hr>\n<h2 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2><h3 id=\"要求-1\"><a href=\"#要求-1\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。</p>\n<h3 id=\"Matlab程序设计-1\"><a href=\"#Matlab程序设计-1\" class=\"headerlink\" title=\"Matlab程序设计\"></a>Matlab程序设计</h3><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\"><span class=\"hljs-comment\">%% 信号的采样与恢复</span><br>clear all;close;clc;<br><span class=\"hljs-comment\">%% 原信号采样及对比</span><br>[x,fm]=audioread(<span class=\"hljs-string\">&quot;D:/Libai.wav&quot;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>Fs=<span class=\"hljs-number\">18e3</span>;<br>x = resample(x,Fs,fm);<span class=\"hljs-comment\">%将读取信号重采样为18kHz作为原始信号</span><br>N=<span class=\"hljs-built_in\">length</span>(x); <span class=\"hljs-comment\">%信号的长度</span><br>t=(<span class=\"hljs-number\">0</span>:N<span class=\"hljs-number\">-1</span>)/Fs;<span class=\"hljs-comment\">%时域范围</span><br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">1</span>);<br>subplot(<span class=\"hljs-number\">421</span>);<br><span class=\"hljs-built_in\">plot</span>(t,x); <span class=\"hljs-comment\">%音频信号时域图</span><br>title(<span class=\"hljs-string\">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class=\"hljs-string\">&quot;Time&quot;</span>); <br>Y=fft(x,N);<br>df=Fs/<span class=\"hljs-built_in\">length</span>(t); <span class=\"hljs-comment\">%计算谱线间隔</span><br>f=t*df;<br>Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br><span class=\"hljs-comment\">% Ys=Ys(1:length(Ys)/2); %由于幅度响应是偶函数，所以截取一半</span><br>subplot(<span class=\"hljs-number\">422</span>);<br><span class=\"hljs-built_in\">plot</span>(f.*Fs./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>title(<span class=\"hljs-string\">&quot;原信号音频频谱图&quot;</span>);<br>xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>);<br><span class=\"hljs-comment\">%% 进行过采样、临界采样和欠采样三种采样</span><br><span class=\"hljs-built_in\">i</span>=<span class=\"hljs-number\">3</span>;<br>fso=Fs/<span class=\"hljs-number\">1.5</span>;<br>fsc=Fs/<span class=\"hljs-number\">2</span>;<br>fsu=Fs/<span class=\"hljs-number\">4</span>;<br><span class=\"hljs-keyword\">for</span> n = [<span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]<br><span class=\"hljs-keyword\">if</span> n==<span class=\"hljs-number\">1.5</span><br>    yso =  resample(x,fso,Fs);<br><span class=\"hljs-keyword\">elseif</span> n==<span class=\"hljs-number\">2</span><br>    ysc =  resample(x,fsc,Fs);<br><span class=\"hljs-keyword\">else</span><br>    ysu =  resample(x,fsu,Fs);<br><span class=\"hljs-keyword\">end</span><br>subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">i</span>);<br><span class=\"hljs-built_in\">i</span>=<span class=\"hljs-built_in\">i</span>+<span class=\"hljs-number\">1</span>;<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br><span class=\"hljs-keyword\">if</span> n==<span class=\"hljs-number\">1.5</span><br>    tso=<span class=\"hljs-built_in\">linspace</span>(t(<span class=\"hljs-number\">1</span>),t(<span class=\"hljs-keyword\">end</span>),<span class=\"hljs-built_in\">length</span>(yso));<span class=\"hljs-comment\">%时域横坐标</span><br>    <span class=\"hljs-built_in\">plot</span>(tso,yso);<span class=\"hljs-comment\">%画采样信号时域图</span><br>    title(<span class=\"hljs-string\">&quot;过采样采样信号时域图&quot;</span>)<br>    grid on<br>    Y=fft(yso,<span class=\"hljs-built_in\">length</span>(yso));<br>    subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">i</span>);<br>    <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-built_in\">i</span>+<span class=\"hljs-number\">1</span>;<br>    df=fso/<span class=\"hljs-built_in\">length</span>(tso); <span class=\"hljs-comment\">%计算谱线间隔</span><br>    fo=tso*df;<br>    Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br>    <span class=\"hljs-built_in\">plot</span>(fo.*fso./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>    xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>); <br>    title(<span class=\"hljs-string\">&quot;过采样音频频谱图&quot;</span>);<br>    grid on<br><span class=\"hljs-keyword\">elseif</span> n==<span class=\"hljs-number\">2</span><br>    tsc=<span class=\"hljs-built_in\">linspace</span>(t(<span class=\"hljs-number\">1</span>),t(<span class=\"hljs-keyword\">end</span>),<span class=\"hljs-built_in\">length</span>(ysc));<span class=\"hljs-comment\">%时域横坐标</span><br>    <span class=\"hljs-built_in\">plot</span>(tsc,ysc);<span class=\"hljs-comment\">%画采样信号时域图</span><br>    title(<span class=\"hljs-string\">&quot;临界采样采样信号时域图&quot;</span>)<br>    grid on<br>    Y=fft(ysc,<span class=\"hljs-built_in\">length</span>(ysc));<br>    subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">i</span>);<br>    <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-built_in\">i</span>+<span class=\"hljs-number\">1</span>;<br>    df=fsc/<span class=\"hljs-built_in\">length</span>(tsc); <span class=\"hljs-comment\">%计算谱线间隔</span><br>    fc=tsc*df;<br>    Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br>    <span class=\"hljs-built_in\">plot</span>(fc.*fsc./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>    xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>);<br>    title(<span class=\"hljs-string\">&quot;临界采样音频频谱图&quot;</span>);<br>    grid on<br><span class=\"hljs-keyword\">elseif</span> n==<span class=\"hljs-number\">4</span> <br>    tsu=<span class=\"hljs-built_in\">linspace</span>(t(<span class=\"hljs-number\">1</span>),t(<span class=\"hljs-keyword\">end</span>),<span class=\"hljs-built_in\">length</span>(ysu));<span class=\"hljs-comment\">%时域横坐标</span><br>    <span class=\"hljs-built_in\">plot</span>(tsu,ysu);<span class=\"hljs-comment\">%画采样信号时域图</span><br>    title(<span class=\"hljs-string\">&quot;欠采样采样信号时域图&quot;</span>)<br>    grid on<br>    Y=fft(ysu,<span class=\"hljs-built_in\">length</span>(ysu));<br>    subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">i</span>);<br>    <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-built_in\">i</span>+<span class=\"hljs-number\">1</span>;<br>    df=fsu/<span class=\"hljs-built_in\">length</span>(tsu); <span class=\"hljs-comment\">%计算谱线间隔</span><br>    fu=tsu*df;<br>    Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br>    <span class=\"hljs-built_in\">plot</span>(fu.*fsu./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>    xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>);<br>    title(<span class=\"hljs-string\">&quot;欠采样音频频谱图&quot;</span>);<br>    grid on<br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-comment\">%% 低通滤波恢复原信号</span><br>yo=<span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">length</span>(x));<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(x)<br>        a=t(<span class=\"hljs-built_in\">i</span>)-tso;<br>        Sa=sinc(fso.*a);<br>        g=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> k = <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(yso)<br>            s = yso(k)*Sa(k);<br>            g=g+s;<br>        <span class=\"hljs-keyword\">end</span><br>        yo(<span class=\"hljs-built_in\">i</span>) = g;<br><span class=\"hljs-keyword\">end</span><br>yc=<span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">length</span>(x));<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(t)<br>        b=t(<span class=\"hljs-built_in\">i</span>)-tsc;<br>        Sb=sinc(fsc.*b);<br>        g=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> k = <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(ysc)<br>            s = ysc(k)*Sb(k);<br>            g=g+s;<br>        <span class=\"hljs-keyword\">end</span><br>        yc(<span class=\"hljs-built_in\">i</span>) = g;<br><span class=\"hljs-keyword\">end</span><br>yu=<span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">length</span>(x));<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(t)<br>        c=t(<span class=\"hljs-built_in\">i</span>)-tsu;<br>        Sc=sinc(fsu.*c);<br>        g=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> k = <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(ysu)<br>            s = ysu(k)*Sc(k);<br>            g=g+s;<br>        <span class=\"hljs-keyword\">end</span><br>        yu(<span class=\"hljs-built_in\">i</span>) = g;<br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-comment\">%% 信号对比及保存</span><br><span class=\"hljs-comment\">%画出还原时域图</span><br>m=<span class=\"hljs-number\">2</span>;<br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">2</span>);<br>subplot(<span class=\"hljs-number\">421</span>);<br><span class=\"hljs-built_in\">plot</span>(t,x); <br>title(<span class=\"hljs-string\">&quot;原信号音频时域图&quot;</span>);<br>xlabel(<span class=\"hljs-string\">&quot;Time&quot;</span>);<br>grid on<br>s=<span class=\"hljs-string\">&quot;原信号音频频谱图&quot;</span>;<br>FFT(x,N,Fs,t,m,s);<br>m=m+<span class=\"hljs-number\">2</span>;<br>subplot(<span class=\"hljs-number\">423</span>);<br><span class=\"hljs-built_in\">plot</span>(t,yo);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;过采样恢复信号时域图&quot;</span>);<br>grid on<br>so=<span class=\"hljs-string\">&quot;过采样信号音频频谱图&quot;</span>;<br>FFT(yo,<span class=\"hljs-built_in\">length</span>(yo),fso,t,m,so);<br>m=m+<span class=\"hljs-number\">2</span>;<br>subplot(<span class=\"hljs-number\">425</span>);<br><span class=\"hljs-built_in\">plot</span>(t,yc);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;临界采样恢复信号时域图&quot;</span>);<br>grid on<br>sc=<span class=\"hljs-string\">&quot;临界采样信号音频频谱图&quot;</span>;<br>FFT(yc,<span class=\"hljs-built_in\">length</span>(yc),fsc,t,m,sc);<br>m=m+<span class=\"hljs-number\">2</span>;<br>subplot(<span class=\"hljs-number\">427</span>);<br><span class=\"hljs-built_in\">plot</span>(t,yu);<br>xlabel(<span class=\"hljs-string\">&quot;t/s&quot;</span>)<br>title(<span class=\"hljs-string\">&quot;欠采样恢复信号时域图&quot;</span>);<br>grid on<br>su=<span class=\"hljs-string\">&quot;欠采样信号音频频谱图&quot;</span>;<br>FFT(yu,<span class=\"hljs-built_in\">length</span>(yu),fsu,t,m,su);<br><span class=\"hljs-comment\">%保存信号</span><br>name = [<span class=\"hljs-string\">&quot;over_sampling.wav&quot;</span>,<span class=\"hljs-string\">&quot;critical_sampling.wav&quot;</span>,<span class=\"hljs-string\">&quot;under_sampling.wav&quot;</span>];<br>audiowrite(name(<span class=\"hljs-number\">1</span>),yo,Fs);<br>audiowrite(name(<span class=\"hljs-number\">2</span>),yc,Fs);<br>audiowrite(name(<span class=\"hljs-number\">3</span>),yu,Fs);<br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-comment\">%% 傅里叶变换函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">FourierTransform</span> = <span class=\"hljs-title\">FFT</span><span class=\"hljs-params\">(signal,N,fs,t,m,s)</span></span><br>Y=fft(signal,N);<br>df=fs/<span class=\"hljs-built_in\">length</span>(t); <span class=\"hljs-comment\">%计算谱线间隔</span><br>f=t*df;<br>Ys=<span class=\"hljs-built_in\">abs</span>(Y); <span class=\"hljs-comment\">%幅度响应</span><br>subplot(<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,m);<br><span class=\"hljs-built_in\">plot</span>(f.*fs./<span class=\"hljs-number\">1e3</span>,Ys); <span class=\"hljs-comment\">%音频信号频谱图</span><br>xlabel(<span class=\"hljs-string\">&quot;f/kHz&quot;</span>);<br>title(s);<br><span class=\"hljs-keyword\">end</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实验结果-1\"><a href=\"#实验结果-1\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><ol>\n<li><p>三种采样后的信号与原信号的对比</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/sampleorigin.png\" alt=\"sampleorigin\"></p>\n</li>\n<li><p>重建信号与原信号的对比</p>\n<p><img src=\"https://raw.githubusercontent.com/Alleyf/PictureMap/main/web_icons/rebuild.png\" alt=\"rebuild\"></p>\n</li>\n</ol>\n<h3 id=\"结果分析-1\"><a href=\"#结果分析-1\" class=\"headerlink\" title=\"结果分析\"></a>结果分析</h3><ul>\n<li><p>先读取音频信号，matlab默认读取音频时的采样频率为44.1kHz，而人类能够听到的声音的频率为<strong>20~20kHz</strong>左右，为了加快运算速度将采集的信号重采样为18kHz作为原始信号，然后对其分别进行过采样(频率为12kHz)、临界采样(频率为9kHz)、欠采样(频率为4.5kHz)，采样后对其进行<strong>插值重建</strong>。</p>\n</li>\n<li><p>对比原始信号与重建信号的时域图和频谱图发现，过采样和临界采样恢复的信号和原始信号基本一致，没有发生较大的畸变，而欠采样信号发生了较大的失真，与原始信号有较大的的区别，由此可知，<strong>采样必须满足奈奎斯特采样定理</strong>才能不失真的恢复出原始信号。</p>\n<p> ​                                                                                                                </p>\n<p> ​                                                                                                                <a href=\"https://alleyf.github.io/2022/09/22/SignalSample/\">原文已上传博客</a></p>\n</li>\n</ul>\n"},{"title":"Hexo_Command","date":"2022-09-10T02:00:00.000Z","sticky":10,"excerpt":"some common commands relevant hexo and git.","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n## Synthesis_Command_Hexo\n\n```bash\n$ hexo cl && hexo g && hexo d\n```\n\n## Synthesis_Command_Git\n\n```bash\n$ git add .或者git add filename\n$ git commit -m \"推送注释内容\"\n$ git push (origin main)(main为分支)\n```\n\n## Synthesis_Command_bash\n\n```bash\n#让linux的jyputer notebook服务一直运行\nnohup jupyter notebook --allow-root &\n```\n\n\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/Synthesis_Command.md","raw":"---\ntitle: Hexo_Command\ntags: [Hexo]\ncategories: Command\ndate: 2022-9-10 10:00:00\nsticky: 10\nexcerpt: some common commands relevant hexo and git.\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\n## Synthesis_Command_Hexo\n\n```bash\n$ hexo cl && hexo g && hexo d\n```\n\n## Synthesis_Command_Git\n\n```bash\n$ git add .或者git add filename\n$ git commit -m \"推送注释内容\"\n$ git push (origin main)(main为分支)\n```\n\n## Synthesis_Command_bash\n\n```bash\n#让linux的jyputer notebook服务一直运行\nnohup jupyter notebook --allow-root &\n```\n\n\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"Synthesis_Command","published":1,"updated":"2022-09-12T03:02:22.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8lo2ght0012ichzczwyfwnc","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Synthesis-Command-Hexo\"><a href=\"#Synthesis-Command-Hexo\" class=\"headerlink\" title=\"Synthesis_Command_Hexo\"></a>Synthesis_Command_Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Synthesis-Command-Git\"><a href=\"#Synthesis-Command-Git\" class=\"headerlink\" title=\"Synthesis_Command_Git\"></a>Synthesis_Command_Git</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git add .或者git add filename<br>$ git commit -m <span class=\"hljs-string\">&quot;推送注释内容&quot;</span><br>$ git push (origin main)(main为分支)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Synthesis-Command-bash\"><a href=\"#Synthesis-Command-bash\" class=\"headerlink\" title=\"Synthesis_Command_bash\"></a>Synthesis_Command_bash</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#让linux的jyputer notebook服务一直运行</span><br><span class=\"hljs-built_in\">nohup</span> jupyter notebook --allow-root &amp;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"wordcount":624,"more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Synthesis-Command-Hexo\"><a href=\"#Synthesis-Command-Hexo\" class=\"headerlink\" title=\"Synthesis_Command_Hexo\"></a>Synthesis_Command_Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Synthesis-Command-Git\"><a href=\"#Synthesis-Command-Git\" class=\"headerlink\" title=\"Synthesis_Command_Git\"></a>Synthesis_Command_Git</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ git add .或者git add filename<br>$ git commit -m <span class=\"hljs-string\">&quot;推送注释内容&quot;</span><br>$ git push (origin main)(main为分支)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Synthesis-Command-bash\"><a href=\"#Synthesis-Command-bash\" class=\"headerlink\" title=\"Synthesis_Command_bash\"></a>Synthesis_Command_bash</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#让linux的jyputer notebook服务一直运行</span><br><span class=\"hljs-built_in\">nohup</span> jupyter notebook --allow-root &amp;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl8lo2ghb0001ichzcy81g2s6","category_id":"cl8lo2ghg0004ichzdotw1ihi","_id":"cl8lo2ghl000bichz0tfv2nfy"},{"post_id":"cl8lo2ghe0003ichz7eja5ql3","category_id":"cl8lo2ghk0009ichz206z5v1g","_id":"cl8lo2ghl000eichz86u2fi7v"},{"post_id":"cl8lo2ghi0007ichzamt59ff0","category_id":"cl8lo2ghl000cichzg4aeb4b1","_id":"cl8lo2ghm000iichzau684gpx"},{"post_id":"cl8lo2ghp000tichz4mnrh6um","category_id":"cl8lo2ghk0009ichz206z5v1g","_id":"cl8lo2ghs0010ichz7oa027pp"},{"post_id":"cl8lo2ghq000uichz65oh9kd6","category_id":"cl8lo2ghs000xichz8emncgxl","_id":"cl8lo2ghv0016ichz8ffw8syy"},{"post_id":"cl8lo2ghr000wichz2hy27qf6","category_id":"cl8lo2ghu0013ichz7i8c5the","_id":"cl8lo2ghw001aichz73gw8ihy"},{"post_id":"cl8lo2ghs000zichzd2uucw3g","category_id":"cl8lo2ghv0017ichz9u5denai","_id":"cl8lo2ghz001eichz7pmhe5af"},{"post_id":"cl8lo2ght0011ichz0i5t09v7","category_id":"cl8lo2ghw001bichz9d7rdder","_id":"cl8lo2ghz001hichz3pzafnhu"},{"post_id":"cl8lo2ght0012ichzczwyfwnc","category_id":"cl8lo2ghz001fichzaqct3f8c","_id":"cl8lo2gi0001lichz4orva9ce"}],"PostTag":[{"post_id":"cl8lo2ghb0001ichzcy81g2s6","tag_id":"cl8lo2ghh0005ichz8vhz9v41","_id":"cl8lo2ghm000gichz7cvlajy9"},{"post_id":"cl8lo2ghb0001ichzcy81g2s6","tag_id":"cl8lo2ghk000aichza6l6a47x","_id":"cl8lo2ghm000hichz56k15k74"},{"post_id":"cl8lo2ghb0001ichzcy81g2s6","tag_id":"cl8lo2ghl000dichzgn6faceq","_id":"cl8lo2ghm000kichzbpb14ehc"},{"post_id":"cl8lo2ghe0003ichz7eja5ql3","tag_id":"cl8lo2ghl000fichz0qzg1iho","_id":"cl8lo2ghm000lichz9g5w4rx9"},{"post_id":"cl8lo2ghi0007ichzamt59ff0","tag_id":"cl8lo2ghm000jichza1jsem3c","_id":"cl8lo2ghn000pichzdk80ahkp"},{"post_id":"cl8lo2ghi0007ichzamt59ff0","tag_id":"cl8lo2ghm000michzge2maddy","_id":"cl8lo2ghn000qichzhx79e8oc"},{"post_id":"cl8lo2ghi0007ichzamt59ff0","tag_id":"cl8lo2ghn000nichz0foe1o40","_id":"cl8lo2ghn000richzbv1u42j6"},{"post_id":"cl8lo2ghi0007ichzamt59ff0","tag_id":"cl8lo2ghn000oichz25wi73dg","_id":"cl8lo2gho000sichzf8lw4cdz"},{"post_id":"cl8lo2ghp000tichz4mnrh6um","tag_id":"cl8lo2ghl000fichz0qzg1iho","_id":"cl8lo2ghr000vichz46s129bb"},{"post_id":"cl8lo2ghq000uichz65oh9kd6","tag_id":"cl8lo2ghs000yichz66fagm0e","_id":"cl8lo2ghv0015ichzhcosdl9z"},{"post_id":"cl8lo2ghr000wichz2hy27qf6","tag_id":"cl8lo2ghv0014ichzghji0hgd","_id":"cl8lo2ghw0019ichzhjaq7r93"},{"post_id":"cl8lo2ghs000zichzd2uucw3g","tag_id":"cl8lo2ghw0018ichz59uw63zy","_id":"cl8lo2ghy001dichz4a6f073l"},{"post_id":"cl8lo2ght0011ichz0i5t09v7","tag_id":"cl8lo2ghw001cichz83jmdazw","_id":"cl8lo2gi0001jichzgb7f1790"},{"post_id":"cl8lo2ght0011ichz0i5t09v7","tag_id":"cl8lo2ghz001gichzc2qq6pvo","_id":"cl8lo2gi0001kichz66wd7gka"},{"post_id":"cl8lo2ght0012ichzczwyfwnc","tag_id":"cl8lo2ghz001iichzh5fx5zmh","_id":"cl8lo2gi0001michzbyjd6q4e"}],"Tag":[{"name":"h5","_id":"cl8lo2ghh0005ichz8vhz9v41"},{"name":"css","_id":"cl8lo2ghk000aichza6l6a47x"},{"name":"javascript","_id":"cl8lo2ghl000dichzgn6faceq"},{"name":"Java","_id":"cl8lo2ghl000fichz0qzg1iho"},{"name":"Numpy","_id":"cl8lo2ghm000jichza1jsem3c"},{"name":"Pandas","_id":"cl8lo2ghm000michzge2maddy"},{"name":"PIL","_id":"cl8lo2ghn000nichz0foe1o40"},{"name":"Matplotlib","_id":"cl8lo2ghn000oichz25wi73dg"},{"name":"python","_id":"cl8lo2ghs000yichz66fagm0e"},{"name":"NoteBook","_id":"cl8lo2ghv0014ichzghji0hgd"},{"name":"QuartusII","_id":"cl8lo2ghw0018ichz59uw63zy"},{"name":"Signal","_id":"cl8lo2ghw001cichz83jmdazw"},{"name":"Sample","_id":"cl8lo2ghz001gichzc2qq6pvo"},{"name":"Hexo","_id":"cl8lo2ghz001iichzh5fx5zmh"}]}}